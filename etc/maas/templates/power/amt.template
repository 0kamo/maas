#!/bin/sh
# -*- mode: shell-script -*-
#
# Control a system via amttool
#
# Parameters.  Don't quote these: the templating system will quote as needed,
# so adding quotes of our own might cause double-quoting.
power_address={{power_address}}
power_change={{power_change}}
power_pass={{power_pass}}
ip_address={{ip_address}}

# The user specified power_address overrides any automatically determined
# ip_address.
if [ -n "$power_address" ]; then
  ip_address=$power_address
fi


# Exit with failure message.
# Parameters: exit code, and error message.
fail() {
    echo "$2" >&2
    exit $1
}


# Perform a command using amttool.
issue_amt_command() {
  LC_ALL='C' AMT_PASSWORD="$power_pass" amttool "$ip_address" "$@"
}


# Ask for node's power state: 'on' or 'off'.
query_state() {
    # Retry the state if it fails because it often fails the first time.
    local state=
    local count=
    for attempts in $(seq 0 10)
    do
        state=$(issue_amt_command info | grep '^Powerstate:' | awk '{print $2}')
        if [ -n "$state" ]
        then
            break
        fi
        # Wait 1 second between retries.  AMT controllers are generally very
        # light and may not be comfortable with more frequent queries.
        sleep 1
    done
    case "$state" in
    S[0-4])
        # Wide awake (S0), or asleep (S1-S4), but not a clean slate that
        # will lead to a fresh boot.
        echo 'on'
        ;;
    S5)
        echo 'off'
        ;;
    *)
        fail 2 "Got unknown power state from node: '$state'"
        ;;
    esac
}


# Power-cycle the machine, and boot it using PXE.
restart() {
    issue_amt_command powercycle pxe
}


# Power the machine on, and boot it using PXE.
power_on() {
    local attempts=
    # Try several times.  Power commands often fail the first time.
    for attempts in $(seq 0 10)
    do
        # Issue the AMT command; amttool will prompt for confirmation.
        yes | issue_amt_command powerup pxe
        if [ "$(query_state)" = 'on' ]
        then
            # Success.  Machine is on.
            return 0
        fi
        sleep 1
    done
    fail 1 "Machine is not powering on.  Giving up."
}


# Power the machine off.
power_off() {
    local attempts=
    # Try several times.  Power commands often fail the first time.
    for attempts in $(seq 0 10)
    do
        if [ "$(query_state)" = 'off' ]
        then
            # Success.  Machine is off.
            return 0
        fi
        # Issue the AMT command; amttool will prompt for confirmation.
        yes | issue_amt_command powerdown
        sleep 1
    done
    fail 1 "Machine is not powering off.  Giving up."
}


main() {
    case "${power_change}" in
    'on')
        if [ "$(query_state)" = 'on' ]
        then
            # The machine is already up, so powering it up will do nothing.
            # Cycle the power instead.
            restart
        else
            power_on
        fi
        ;;
    'off')
        if [ "$(query_state)" != 'off' ]
        then
            power_off
        fi
        ;;
    'query')
        query_state
        ;;
    *)
        fail 1 "Unknown power command: '$1'"
    esac
}

main "$power_change"
