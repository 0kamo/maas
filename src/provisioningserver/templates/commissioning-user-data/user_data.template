#!/bin/sh
#
# This script carries inside it multiple files.  When executed, it creates
# the files into a temporary directory, downloads and extracts commissioning
# scripts from the metadata service, and then processes the scripts.
#
# The commissioning scripts get run by a close equivalent of run-parts.
# For each, the main script calls home to maas with maas-signal, posting
# the script's output as a separate file.
#
####  IPMI setup  ######
# If IPMI network settings have been configured statically, you can
# make them DHCP. If 'true', the IPMI network source will be changed
# to DHCP.
IPMI_CHANGE_STATIC_TO_DHCP="false"

# In certain hardware, the parameters for the ipmi_si kernel module
# might need to be specified. If you wish to send parameters, uncomment
# the following line.
#IPMI_SI_PARAMS="type=kcs ports=0xca2"

#### script setup ######
TEMP_D=$(mktemp -d "${TMPDIR:-/tmp}/${0##*/}.XXXXXX")
IPMI_CONFIG_D="${TEMP_D}/ipmi.d"
BIN_D="${TEMP_D}/bin"
PATH="$BIN_D:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
trap cleanup EXIT

mkdir -p "$BIN_D" "$OUT_D" "$IPMI_CONFIG_D"

# Ensure that invocations of apt-get are not interactive by default,
# here and in all subprocesses.
export DEBIAN_FRONTEND=noninteractive

### some utility functions ####
aptget() {
   apt-get --assume-yes -q "$@" </dev/null
}

add_bin() {
   cat > "${BIN_D}/$1"
   chmod "${2:-755}" "${BIN_D}/$1"
}
add_ipmi_config() {
   cat > "${IPMI_CONFIG_D}/$1"
   chmod "${2:-644}" "${IPMI_CONFIG_D}/$1"
}
cleanup() {
   [ -n "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
}

find_creds_cfg() {
   local config="" file="" found=""

   # If the config location is set in environment variable, trust it.
   [ -n "${COMMISSIONING_CREDENTIALS_URL}" ] &&
      _RET="${COMMISSIONING_CREDENTIALS_URL}" && return

   # Go looking for local files written by cloud-init.
   for file in /etc/cloud/cloud.cfg.d/*cmdline*.cfg; do
      [ -f "$file" ] && _RET="$file" && return
   done

   local opt="" cmdline=""
   if [ -f /proc/cmdline ] && read cmdline < /proc/cmdline; then
      # Search through /proc/cmdline arguments:
      # cloud-config-url trumps url=
      for opt in $cmdline; do
         case "$opt" in
            url=*)
               found=${opt#url=};;
            cloud-config-url=*)
               _RET="${opt#*=}"
               return 0;;
         esac
      done
      [ -n "$found" ] && _RET="$found" && return 0
   fi
   return 1
}

# Invoke the "signal()" API call to report progress.
# Usage: signal <status> <message>
signal() {
   maas-signal "--config=${CRED_CFG}" "$@"
}

fail() {
   [ -z "$CRED_CFG" ] || signal FAILED "$1"
   echo "FAILED: $1" 1>&2;
   exit 1
}

main() {
   # Install tools and load modules.
   aptget update
   aptget install \
      python3-yaml python3-oauthlib freeipmi-tools openipmi ipmitool \
      sshpass
   load_modules

   # The main function, actually execute stuff that is written below.
   local script total=0 creds=""

   find_creds_cfg || fail "Failed to find credential config"
   creds="$_RET"

   # Get remote credentials into a local file.
   case "$creds" in
      http://*|https://*)
         wget "$creds" -O "${TEMP_D}/my.creds" ||
            fail "failed to get credentials from $cred_cfg"
         creds="${TEMP_D}/my.creds"
         ;;
   esac

   # Use global name read by signal().
   CRED_CFG="$creds"

   # Power settings.
   local pargs=""
   if $IPMI_CHANGE_STATIC_TO_DHCP; then
      pargs="--dhcp-if-static"
   fi
   power_type=$(maas-ipmi-autodetect-tool)
   if [ -z $power_type ]; then
       power_type=$(maas-wedge-autodetect --check) || power_type=""
   fi
   case "$power_type" in
      ipmi)
         power_settings=$(maas-ipmi-autodetect \
            --configdir "$IPMI_CONFIG_D" ${pargs})
         ;;
      moonshot)
         power_settings=$(maas-moonshot-autodetect)
         ;;
      wedge)
         power_settings=$(maas-wedge-autodetect --get-credentials) || power_settings=""
         ;;
   esac
   if [ ! -z "$power_settings" ]; then
      signal \
         "--power-type=${power_type}" "--power-parameters=${power_settings}" \
         WORKING "Finished [maas-ipmi-autodetect]"
   fi

   maas-run-remote-scripts "--config=${CRED_CFG}" "${TEMP_D}"
}

load_modules() {
   modprobe ipmi_msghandler
   modprobe ipmi_devintf
   modprobe ipmi_si ${IPMI_SI_PARAMS}
   modprobe ipmi_ssif
   udevadm settle
}

### begin writing files ###

# Example config: enable BMC remote access (on some systems.)
#add_ipmi_config "02-global-config.ipmi" <<"END_IPMI_CONFIG"
#Section Lan_Channel
#	Volatile_Access_Mode			Always_Available
#	Volatile_Enable_User_Level_Auth		Yes
#	Volatile_Channel_Privilege_Limit	Administrator
#	Non_Volatile_Access_Mode		Always_Available
#	Non_Volatile_Enable_User_Level_Auth	Yes
#	Non_Volatile_Channel_Privilege_Limit	Administrator
#EndSection
#END_IPMI_CONFIG

add_bin "maas-ipmi-autodetect-tool" <<"END_MAAS_IPMI_AUTODETECT_TOOL"
{{maas_ipmi_autodetect_tool_py}}
END_MAAS_IPMI_AUTODETECT_TOOL

add_bin "maas-ipmi-autodetect" <<"END_MAAS_IPMI_AUTODETECT"
{{maas_ipmi_autodetect_py}}
END_MAAS_IPMI_AUTODETECT

add_bin "maas-moonshot-autodetect" <<"END_MAAS_MOONSHOT_AUTODETECT"
{{maas_moonshot_autodetect_py}}
END_MAAS_MOONSHOT_AUTODETECT

add_bin "maas-wedge-autodetect" <<"END_MAAS_WEDGE_AUTODETECT"
{{maas_wedge_autodetect_sh}}
END_MAAS_WEDGE_AUTODETECT

add_bin "maas_api_helper.py" <<"END_MAAS_API_HELPER"
{{maas_api_helper_py}}
END_MAAS_API_HELPER

add_bin "maas-signal" <<"END_MAAS_SIGNAL"
{{maas_signal_py}}
END_MAAS_SIGNAL

add_bin "maas-run-remote-scripts" <<"END_MAAS_RUN_REMOTE_SCRIPTS"
{{maas_run_remote_scripts_py}}
END_MAAS_RUN_REMOTE_SCRIPTS


main
exit
