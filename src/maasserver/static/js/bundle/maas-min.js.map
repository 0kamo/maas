{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/maasserver/static/js/angular/controllers/add_device.js","webpack:///./src/maasserver/static/js/angular/controllers/add_domain.js","webpack:///./src/maasserver/static/js/angular/controllers/add_hardware.js","webpack:///./src/maasserver/static/js/angular/controllers/dashboard.js","webpack:///./src/maasserver/static/js/angular/controllers/domain_details.js","webpack:///./src/maasserver/static/js/angular/controllers/domains_list.js","webpack:///./src/maasserver/static/js/angular/controllers/fabric_details.js","webpack:///./src/maasserver/static/js/angular/controllers/images.js","webpack:///./src/maasserver/static/js/angular/controllers/intro.js","webpack:///./src/maasserver/static/js/angular/controllers/intro_user.js","webpack:///./src/maasserver/static/js/angular/controllers/networks_list.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_networking.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_storage.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_storage_filesystems.js","webpack:///./src/maasserver/static/js/angular/controllers/node_events.js","webpack:///./src/maasserver/static/js/angular/controllers/node_result.js","webpack:///./src/maasserver/static/js/angular/controllers/node_results.js","webpack:///./src/maasserver/static/js/angular/controllers/nodes_list.js","webpack:///./src/maasserver/static/js/angular/controllers/pod_details.js","webpack:///./src/maasserver/static/js/angular/controllers/pods_list.js","webpack:///./src/maasserver/static/js/angular/controllers/prefs.js","webpack:///./src/maasserver/static/js/angular/controllers/settings.js","webpack:///./src/maasserver/static/js/angular/controllers/space_details.js","webpack:///./src/maasserver/static/js/angular/controllers/subnet_details.js","webpack:///./src/maasserver/static/js/angular/controllers/vlan_details.js","webpack:///./src/maasserver/static/js/angular/controllers/zone_details.js","webpack:///./src/maasserver/static/js/angular/controllers/zones_list.js","webpack:///./src/maasserver/static/js/angular/directives/accordion.js","webpack:///./src/maasserver/static/js/angular/directives/boot_images.js","webpack:///./src/maasserver/static/js/angular/directives/call_to_action.js","webpack:///./src/maasserver/static/js/angular/directives/card_loader.js","webpack:///./src/maasserver/static/js/angular/directives/code_lines.js","webpack:///./src/maasserver/static/js/angular/directives/contenteditable.js","webpack:///./src/maasserver/static/js/angular/directives/controller_image_status.js","webpack:///./src/maasserver/static/js/angular/directives/controller_status.js","webpack:///./src/maasserver/static/js/angular/directives/dbl_click_overlay.js","webpack:///./src/maasserver/static/js/angular/directives/enter.js","webpack:///./src/maasserver/static/js/angular/directives/enter_blur.js","webpack:///./src/maasserver/static/js/angular/directives/error_overlay.js","webpack:///./src/maasserver/static/js/angular/directives/error_toggle.js","webpack:///./src/maasserver/static/js/angular/directives/ipranges.js","webpack:///./src/maasserver/static/js/angular/directives/login.js","webpack:///./src/maasserver/static/js/angular/directives/maas_obj_form.js","webpack:///./src/maasserver/static/js/angular/directives/mac_address.js","webpack:///./src/maasserver/static/js/angular/directives/machines_table.js","webpack:///./src/maasserver/static/js/angular/directives/notifications.js","webpack:///./src/maasserver/static/js/angular/directives/os_select.js","webpack:///./src/maasserver/static/js/angular/directives/placeholder.js","webpack:///./src/maasserver/static/js/angular/directives/pod_parameters.js","webpack:///./src/maasserver/static/js/angular/directives/power_parameters.js","webpack:///./src/maasserver/static/js/angular/directives/proxy_settings.js","webpack:///./src/maasserver/static/js/angular/directives/release_name.js","webpack:///./src/maasserver/static/js/angular/directives/release_options.js","webpack:///./src/maasserver/static/js/angular/directives/script_results_list.js","webpack:///./src/maasserver/static/js/angular/directives/script_runtime.js","webpack:///./src/maasserver/static/js/angular/directives/script_select.js","webpack:///./src/maasserver/static/js/angular/directives/script_status.js","webpack:///./src/maasserver/static/js/angular/directives/ssh_keys.js","webpack:///./src/maasserver/static/js/angular/directives/switches_table.js","webpack:///./src/maasserver/static/js/angular/directives/toggle_control.js","webpack:///./src/maasserver/static/js/angular/directives/type.js","webpack:///./src/maasserver/static/js/angular/directives/version_reloader.js","webpack:///./src/maasserver/static/js/angular/directives/window_width.js","webpack:///./src/maasserver/static/js/angular/factories/bootresources.js","webpack:///./src/maasserver/static/js/angular/factories/configs.js","webpack:///./src/maasserver/static/js/angular/factories/controllers.js","webpack:///./src/maasserver/static/js/angular/factories/devices.js","webpack:///./src/maasserver/static/js/angular/factories/dhcpsnippets.js","webpack:///./src/maasserver/static/js/angular/factories/discoveries.js","webpack:///./src/maasserver/static/js/angular/factories/domains.js","webpack:///./src/maasserver/static/js/angular/factories/events.js","webpack:///./src/maasserver/static/js/angular/factories/fabrics.js","webpack:///./src/maasserver/static/js/angular/factories/general.js","webpack:///./src/maasserver/static/js/angular/factories/ipranges.js","webpack:///./src/maasserver/static/js/angular/factories/machines.js","webpack:///./src/maasserver/static/js/angular/factories/node_results.js","webpack:///./src/maasserver/static/js/angular/factories/nodes.js","webpack:///./src/maasserver/static/js/angular/factories/notifications.js","webpack:///./src/maasserver/static/js/angular/factories/packagerepositories.js","webpack:///./src/maasserver/static/js/angular/factories/pods.js","webpack:///./src/maasserver/static/js/angular/factories/region.js","webpack:///./src/maasserver/static/js/angular/factories/scripts.js","webpack:///./src/maasserver/static/js/angular/factories/services.js","webpack:///./src/maasserver/static/js/angular/factories/spaces.js","webpack:///./src/maasserver/static/js/angular/factories/sshkeys.js","webpack:///./src/maasserver/static/js/angular/factories/staticroutes.js","webpack:///./src/maasserver/static/js/angular/factories/subnets.js","webpack:///./src/maasserver/static/js/angular/factories/switches.js","webpack:///./src/maasserver/static/js/angular/factories/tags.js","webpack:///./src/maasserver/static/js/angular/factories/users.js","webpack:///./src/maasserver/static/js/angular/factories/vlans.js","webpack:///./src/maasserver/static/js/angular/factories/zones.js","webpack:///./src/maasserver/static/js/angular/filters/by_fabric.js","webpack:///./src/maasserver/static/js/angular/filters/by_space.js","webpack:///./src/maasserver/static/js/angular/filters/by_subnet.js","webpack:///./src/maasserver/static/js/angular/filters/by_vlan.js","webpack:///./src/maasserver/static/js/angular/filters/nodes.js","webpack:///./src/maasserver/static/js/angular/filters/order_by_date.js","webpack:///./src/maasserver/static/js/angular/filters/remove_default_vlan.js","webpack:///./src/maasserver/static/js/angular/maas.js","webpack:///./src/maasserver/static/js/angular/services/browser.js","webpack:///./src/maasserver/static/js/angular/services/converter.js","webpack:///./src/maasserver/static/js/angular/services/error.js","webpack:///./src/maasserver/static/js/angular/services/json.js","webpack:///./src/maasserver/static/js/angular/services/log.js","webpack:///./src/maasserver/static/js/angular/services/manager.js","webpack:///./src/maasserver/static/js/angular/services/managerhelper.js","webpack:///./src/maasserver/static/js/angular/services/pollingmanager.js","webpack:///./src/maasserver/static/js/angular/services/search.js","webpack:///./src/maasserver/static/js/angular/services/validation.js","webpack:///./src/maasserver/static/js/ui/maas-ui.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","angular","controller","$scope","DevicesManager","SubnetsManager","DomainsManager","ManagerHelperService","ValidationService","newDevice","cloneDevice","isObject","domain","interfaces","mac","ipAssignment","subnetId","ipAddress","getDefaultDomain","$parent","addDeviceScope","subnets","getItems","domains","viewable","error","ipAssignments","title","device","show","hide","$emit","nameHasError","length","validateHostname","macHasError","deviceInterface","validateMAC","ipHasError","validateIP","validateIPInNetwork","cidr","isNumber","subnet","getItemFromList","deviceHasError","externalIpError","staticIpError","addInterface","push","isPrimaryInterface","indexOf","deleteInterface","splice","cancel","save","addAnother","convertedDevice","hostname","primary_mac","extra_macs","forEach","nic","ip_assignment","ip_address","convertDeviceToProtocol","create","then","parseValidationError","loadManagers","addDomainScope","authoritative","validateDomainName","domainHasError","copy","convertDomainToProtocol","$http","ZonesManager","MachinesManager","GeneralManager","RegionConnection","addHardwareScope","model","zones","architectures","getData","hwe_kernels","default_min_hwe_kernel","power_types","macAddressRegex","machine","chassis","virshFields","label","field_type","default","choices","required","defaultArchitecture","newMachine","cloneMachine","macs","zone","architecture","min_hwe_kernel","power","type","parameters","text","newChassis","cloneChassis","chassisPowerTypes","description","fields","mode","startPolling","stopPolling","showMachine","showChassis","addMac","removeMac","idx","invalidName","validateMac","machineHasError","in_error","chassisHasErrors","power_type","field","isUndefined","powerParametersHasError","saveMachine","pxe_mac","shift","map","power_parameters","id","saveChassis","params","chassis_type","username","method","url","data","$","param","headers","Content-Type","loadManager","$on","$window","$rootScope","$routeParams","$location","DiscoveriesManager","VLANsManager","ConfigsManager","deviceIPOptions","page","loaded","discoveredDevices","machines","devices","configManager","networkDiscovery","column","selectedDevice","convertTo","predicate","last_seen","sortTable","reverse","proxyManager","updateItem","createItem","createInterface","Error","getDiscoveryName","discovery","getSubnetName","getName","getVLANName","vlanId","vlan","toggleSelected","deviceId","discovered","getDomainByName","slice","split","parent","goTo","saved","filter","option","preProcess","item","mac_address","ip","afterSave","obj","_removeItem","isString","path","search","tab","UsersManager","ErrorService","domainLoaded","displayname","editSummary","action","domainsManager","newObject","supportedRecordTypes","enterEditSummary","exitEditSummary","isSuperUser","isDefaultDomain","canBeDeleted","rrsets","deleteButton","actionInProgress","addRecordButton","cancelAction","deleteConfirmButton","deleteDomain","activeDomain","getActiveItem","requestedDomain","parseInt","domain_id","isNaN","raiseError","setActiveItem","$filter","currentpage","loading","addDomain","cancelAddDomain","FabricsManager","SpacesManager","ControllersManager","fabricLoaded","fabric","$watch","updateVLANs","rows","racks","vlans","space","space_name","row","vlan_name","subnet_name","rack_sids","rack_sid","rack","system_id","keys","key","fabricManager","controllers","isDefaultFabric","confirmingDelete","cancelDeleteButton","deleteFabric","reply","activeFabric","requestedFabric","fabric_id","BootResourcesManager","bootResources","autoImport","isArray","resources","PackageRepositoriesManager","repoManager","hasImages","maasName","upstreamDNS","mainArchive","portsArchive","httpProxy","skip","clickContinue","welcomeInError","form","$maasForm","hasErrors","networkInError","inError","objs","canContinue","force","location","reload","MAAS_config","completed_intro","managers","repo","user","sshkeys_count","markIntroComplete","user_completed_intro","getAuthUser","filterByVLAN","filterByFabric","filterBySpace","filterByNullSpace","getURLParameters","by","groupBy","ADD_FABRIC_ACTION","selectedTitle","objectName","ADD_VLAN_ACTION","ADD_SPACE_ACTION","ADD_SUBNET_ACTION","subnetManager","fabrics","spaceManager","spaces","vlanManager","group","orphanVLANs","actionObjectInitializers","vlan_ids","updateGroupBy","previous_space","index","updateOrphanVLANs","previous_fabric","previous_vlan","fabric_name","updateFabricsGroupBy","updateActions","actionOptions","actionChanged","actionOption","getFabricNameById","fabricId","actionSubnetPreSave","$interval","TagsManager","ServicesManager","ScriptsManager","DEVICE_IP_ASSIGNMENT","external","dynamic","static","updateTitle","node","fqdn","updateHeader","header","editing","editing_domain","options","selected","updateAvailableActionOptions","availableOptions","allOptions","getAllActionOptions","node_type","actions","updatePower","bmc_node_count","power_bmc_node_count","canEdit","updateSummary","summary","tags","hasUsableArchitectures","hasInvalidArchitecture","updateServices","isController","services","getServices","service","updateDevices","child","nicIdx","deviceWithMAC","links","link","lIdx","deviceWithLink","nodeLoaded","$watchCollection","storageController","networkingController","showing_confirmation","osinfo","section","area","osSelection","osystem","release","hwe_kernel","commissionOptions","enableSSH","skipNetworking","skipStorage","updateFirmware","configureHBA","commissioningSelection","testSelection","releaseOptions","checkingPower","scripts","getDeviceIPAssignment","events","limit","0","1","2","3","4","updateNode","queryPower","nodesManager","checkPowerState","console","log","tagsAutocomplete","query","autocomplete","getPowerStateClass","power_state","getPowerStateText","canCheckPowerState","isUbuntuOS","isUbuntuCoreOS","isCustomOS","isActionError","isDeployError","missing_osinfo","osystems","isSSHKeyError","getSSHKeyCount","optionChanged","actionCancel","actionGo","extra","distro_series","enable_ssh","skip_networking","skip_storage","commissioning_scripts","testing_scripts","status_code","erase","secure_erase","secureErase","quick_erase","quickErase","performAction","$reset","getArchitecturePlaceholder","isDevice","invalidArchitecture","isRackControllerConnected","isLocked","locked","editHeaderDomain","editHeader","editHeaderInvalid","cancelEditHeader","saveEditHeader","cancelEditSummary","saveEditSummary","tag","invalidPowerType","editPower","cancelEditPower","saveEditPower","allowShowMoreEvents","showMoreEvents","getEventText","event","getPowerEventError","level","hasPowerEventError","getPowerEventErrorText","hasActionPowerError","actionName","hasPowerError","missing_packages","getPowerErrors","result","packages","sort","getServiceClass","status","hasCustomCommissioningScripts","script_type","controllerLoaded","scope","showFailedTestWarning","testing_status","getCPUSubtext","cpu_count","cpu_speed","type_name","type_name_title","activeNode","originalInterfaces","filtered","usedVLANs","inter","parents","vlan_id","childInterface","found","link_id","interfaceType","vid","modes","isFunction","getValue","this","nicType","allowLinkUp","JSONService","INTERFACE_TYPE","PHYSICAL","BOND","BRIDGE","VLAN","ALIAS","INTERFACE_TYPE_TEXTS","physical","bond","bridge","alias","LINK_MODE","AUTO","STATIC","DHCP","LINK_UP","LINK_MODE_TEXTS","auto","dhcp","link_up","SELECTION_MODE","NONE","SINGLE","MULTI","DELETE","ADD","CREATE_BOND","CREATE_BRIDGE","CREATE_PHYSICAL","EDIT","IP_ASSIGNMENT","updateLoaded","nodeHasLoaded","managersHaveLoaded","updateInterfaces","vlanTable","addedVlans","children","editInterface","selectedMode","formatted","members","vlanRecord","primary_rack","secondary_rack","sort_key","getVLANText","a","b","localeCompare","nic_copy","subnet_id","interfaceLinksMap","linkMaps","newInterface","parentId","linkId","newParent","iType","isAlias","isVLAN","canAddAlias","canAddVLAN","addTypeChanged","leaveSingleSelectionMode","updateNewInterface","mapNICToOriginalLink","nic_id","originalInteface","getDefaultVLAN","default_vlan_id","getUnusedVLANs","ignoreVLANs","getSelectedInterfaces","selectedInterfaces","splitKey","getNextName","prefix","tableInfo","interfaceErrorsByLinkId","newBondInterface","newBridgeInterface","bondOptions","isLimitedEditingAllowed","isAllNetworkingDisabled","isBootInterface","is_boot","getInterfaceTypeText","isDefined","getLinkModeText","getSubnetText","getSubnet","isInterfaceNameInvalid","otherNic","isLinkModeDisabled","getInterfaceError","isIPAddressInvalid","getUniqueKey","toggleInterfaceSelect","isInterfaceSelected","cannotEditInterface","isEditing","edit","undefined","defaultSubnet","fabricChanged","vlanChanged","fabricChangedForm","updateValue","vlanChangedForm","subnetChanged","subnetChangedForm","modeChanged","modeChangedForm","originalLink","editCancel","preProcessInterface","interface_id","saveInterface","updateInterface","saveInterfaceLink","linkSubnet","editSave","isShowingDeleteConfirm","isShowingAdd","canAddAliasOrVLAN","canAddAnotherVLAN","getRemoveTypeText","canBeRemoved","remove","quickRemove","confirmRemove","unlinkSubnet","add","defaultVLAN","defaultMode","quickAdd","getAddName","aliasIdx","createVLANInterface","isDisabled","canCreateBond","isShowingCreateBond","showCreateBond","primary","lacpRate","xmitHashPolicy","hasBootInterface","getInterfacePlaceholderMACAddress","isMACAddressInvalid","invalidEmpty","showLACPRate","showXMITHashPolicy","cannotAddBond","addBond","bond_mode","bond_lacp_rate","bond_xmit_hash_policy","createBondInterface","canCreateBridge","isShowingCreateBridge","showCreateBridge","bridge_stp","bridge_fd","cannotAddBridge","addBridge","createBridgeInterface","isShowingCreatePhysical","showCreatePhysical","macError","errorMsg","cannotAddPhysicalInterface","addPhysicalInterface","createPhysicalInterface","errorStr","tryParse","disks","availableNew","single","disk","ConverterService","MIN_PARTITION_SIZE","MUTLI","UNMOUNT","UNFORMAT","FORMAT_AND_MOUNT","PARTITION","BCACHE","RAID","VOLUME_GROUP","LOGICAL_VOLUME","RAID_MODES","min_disks","allows_spares","calculateSize","minSize","numDisks","hasMountedFilesystem","filesystem","mount_point","hasFormattedUnmountedFilesystem","fstype","isInUse","is_format_fstype","available_size","getTags","cache_set_id","block_id","partition_id","updateDisks","used","cachesets","filesystems","has_disks","size_human","mount_options","filesystem_id","original_type","original","parent_type","partitions","partition","special_filesystems","oldFilesystem","filesystemsMap","$selected","updateFilesystemSelection","used_by","used_for","cacheset","oldCacheSet","cachesetsMap","updateCacheSetsSelection","available","has_partitions","available_size_human","used_size_human","serial","test_status","firmware_version","oldDisk","availableMap","$options","newDevices","updateAvailableSelection","updateAvailable","filesystemMode","filesystemAllSelected","cachesetsMode","cachesetsAllSelected","availableMode","availableAllSelected","deselectAll","items","capitalizeFirstLetter","string","charAt","toUpperCase","getIndexFromName","match","RegExp","exec","dIdx","Math","max","isNameAlreadyInUse","exclude_disk","j","isLogicalVolume","showMembers","isBootDiskDisabled","setAsBootDisk","setBootDisk","getSelectedFilesystems","toggleFilesystemSelect","toggleFilesystemAllSelect","isFilesystemsDisabled","isAllStorageDisabled","filesystemCancel","filesystemUnmount","quickFilesystemUnmount","filesystemConfirmUnmount","updateFilesystem","filesystemDelete","quickFilesystemDelete","filesystemConfirmDelete","unmountSpecialFilesystem","deletePartition","deleteFilesystem","hasUnmountedFilesystem","showFreeSpace","getDeviceType","getSelectedAvailable","toggleAvailableSelect","toggleAvailableAllSelect","isAvailableDisabled","canFormatAndMount","getPartitionButtonText","availablePartitionSpace","space_to_reserve","partition_table_type","INITIAL_PARTITION_OFFSET","roundByBlockSize","canAddPartition","isNameInvalid","nameHasChanged","parentName","availableCancel","usesMountPoint","usesStorage","isMountPointInvalid","mountPoint","canDelete","used_size","availableDelete","availableQuickDelete","availableEdit","editingTags","editingFilesystem","availableQuickEdit","availableConfirmEdit","mountOptions","updateDisk","availableConfirmDelete","deleteVolumeGroup","deleteDisk","availablePartition","size_and_units","size","sizeUnits","availableQuickPartition","getAddPartitionName","isAddPartitionSizeInvalid","test","bytes","unitsToBytes","roundUnits","availableConfirmPartition","removeDisk","available_space","createPartition","getSelectedCacheSets","toggleCacheSetSelect","toggleCacheSetAllSelect","isCacheSetsDisabled","cacheSetCancel","canDeleteCacheSet","cacheSetDelete","quickCacheSetDelete","cacheSetConfirmDelete","deleteCacheSet","canCreateCacheSet","createCacheSet","getCannotCreateBcacheMsg","canCreateBcache","createBcache","cacheMode","fstypeChanged","isNewDiskNameInvalid","createBcacheCanSave","availableConfirmCreateBcache","cache_set","cache_mode","canCreateRAID","createRAID","spares","getAvailableRAIDModes","getTotalNumberOfAvailableSpares","diff","getNumberOfRemainingSpares","allowed","showSparesColumn","RAIDModeChanged","isActiveRAIDMember","isSpareRAIDMember","setAsActiveRAIDMember","setAsSpareRAIDMember","getNewRAIDSize","Number","MAX_VALUE","deviceSize","min","bytesToUnits","createRAIDCanSave","availableConfirmCreateRAID","block_devices","spare_devices","spare_partitions","canCreateVolumeGroup","createVolumeGroup","getNewVolumeGroupSize","total","createVolumeGroupCanSave","availableConfirmCreateVolumeGroup","canAddLogicalVolume","availableLogicalVolume","namePrefix","isLogicalVolumeNameInvalid","newLogicalVolumeNameChanged","isAddLogicalVolumeSizeInvalid","availableConfirmLogicalVolume","createLogicalVolume","authUser","is_superuser","owner","hasStorageLayoutIssues","storage_layout_issues","SpecialFilesystem","isValid","startsWith","describe","parts","join","dropdown","addSpecialFilesystem","addSpecialFilesystemFinished","canMount","mount","mountSpecialFilesystem","EventsManagerFactory","eventsManager","getManager","days","getMaximumDays","loadItems","eventsLoaded","loadMore","loadMaximumDays","destroy","NodeResultsManagerFactory","nodeResultsManager","requestedResult","getItem","get_result_data","output","resultLoaded","updateLogs","had_installation","logs","installation_results","selectedLog","commissioning_results","testing_results","results","updateLogOutput","resultsLoaded","logOutput","getSummaryXML","getSummaryYAML","loadHistory","showing_results","history_list","showing_history","loading_history","get_history","history","SearchService","SwitchesManager","isViewingSelected","tabs","toLowerCase","enterViewSelected","previous_search","leaveViewSelected","updateFilters","updateAllViewableChecked","filtered_items","allViewableChecked","clearAction","resetActionProgress","zoneSelection","shouldClearAction","selectedItems","removeEmptyFilter","updateActionErrorCount","actionErrorCount","supportsAction","action_failed","progress","actionProgress","completed","errors","affected_nodes","updateSelectedItems","hasActionsFailed","manager","unselectItem","hasActionsInProgress","nodes","switches","showswitches","pagetitle","searchValid","getSelectedItems","metadata","getMetadata","filters","getEmptyFilter","takeActionOptions","syncStatuses","addController","registerUrl","register_url","registerSecret","register_secret","addHardwareOption","addHardwareOptions","toggleTab","clearSearch","toggleChecked","isSelected","selectItem","toggleCheckAll","onNodeListingChanged","showSelected","toggleFilter","filtersToString","isFilterActive","getCurrentFilters","selectColumnOrSort","actionOptionSelected","zone_id","addErrorToActionProgress","addHardwareOptionChanged","addDevice","cancelAddDevice","statusPoll","storeFilters","nodesFilter","retrieveFilters","devicesFilter","controllersFilter","switchesFilter","PodsManager","pod","podManager","sentence","operation","bind","refresh","deleteItem","inProgress","compose","storage","boot","machinesSearch","editPodConfiguration","exitEditPodConfiguration","actionOptionChanged","getPodTypeTitle","canCompose","capabilities","composeMachine","composePreProcess","sorted","constraint","cancelCompose","composeAddStorage","composeSetBootDisk","composeRemoveDisk","startWatching","now","getDefaultZone","activePod","pods","filteredItems","open","powerTypes","action_error","addPod","cancelAddPod","getPowerTypeTitle","powerType","DHCPSnippetsManager","snippetsManager","snippets","known_architectures","pockets_to_disable","components_to_disable","packageRepositoriesManager","repositories","newSnippet","editSnippet","deleteSnippet","snippetTypes","newRepository","editRepository","deleteRepository","repositoryEnabledToggle","repository","repositoryEnterRemove","repositoryExitRemove","repositoryConfirmRemove","isPPA","isMirror","repositoryEnterEdit","repositoryExitEdit","repositoryAdd","enabled","arches","distributions","components","repositoryAddCancel","getSnippetTypeText","snippet","getSnippetAppliesToObject","getSnippetAppliesToText","snippetEnterRemove","snippetExitRemove","snippetConfirmRemove","snippetEnterEdit","snippetExitEdit","snippetToggle","snippetAdd","snippetAddCancel","spaceLoaded","updateSubnets","isDefaultSpace","subnet_ids","deleteSpace","activeSpace","requestedSpace","space_id","source","version","StaticRoutesManager","active_discovery_data","active_discovery_interval","staticRoutes","staticRoutesManager","actionError","newStaticRoute","editStaticRoute","deleteStaticRoute","MAP_SUBNET_ACTION","DELETE_ACTION","ALLOC_TYPES","5","6","NODE_TYPES","updateIPVersion","ipVersion","subnetLoaded","updateFabric","ipSort","ipv4ToInteger","ipv6Expand","getAllocType","allocType","str","getSubnetCIDR","destId","allocTypeSort","alloc_type","getUsageForIP","node_summary","nodeType","bmcs","dns_records","nodeTypeSort","ownerSort","sortIPTable","actionRetry","scanSubnet","scan_started_on","deleteSubnet","subnetPreSave","changedFields","addStaticRoute","gateway_ip","destination","metric","cancelAddStaticRoute","isStaticRouteInEditMode","route","staticRouteToggleEditMode","isStaticRouteInDeleteMode","staticRouteEnterDeleteMode","staticRouteCancelDelete","staticRouteConfirmDelete","choice","activeSubnet","requestedSubnet","objects","self","vm","updateManagementRacks","primaryRack","secondaryRack","updateRelatedControllers","relatedControllers","updateRelatedSubnets","relatedSubnets","updatePossibleActions","relay_vlan","RELAY_DHCP_ACTION","DISABLE_DHCP_ACTION","dhcp_on","PROVIDE_DHCP_ACTION","isFabricDefault","vlanLoaded","provideDHCPAction","getSpaceName","getActionByName","initProvideDHCP","forRelay","relayVLAN","maxIPs","startIP","endIP","gatewayIP","needsDynamicRange","iprange","statistics","suggested_dynamic_range","needsGatewayIP","subnetMissingGatewayIP","updatePrimaryRack","updateSecondaryRack","updateSubnet","filterPrimaryRack","suggested_gateway","num_addresses","startPlaceholder","start","endPlaceholder","end","gatewayPlaceholder","canPerformAction","gateway","configureDHCP","extraDHCP","relay","disableDHCP","deleteVLAN","getFullVLANName","getDHCPStatus","activeVLAN","requestedVLAN","zoneLoaded","zoneManager","isDefaultZone","activeZone","requestedZone","addZone","closeZone","directive","restrict","element","attrs","clickHandler","evt","toggleClass","find","on","off","template","$element","$document","design","templateUrl","files_version","saving","stopping","ubuntuImages","isNew","tooMany","showingAdvanced","connecting","errorMessage","source_type","keyring_filename","keyring_data","releases","selections","changed","ubuntuCoreImages","ubuntu_core","images","otherImages","other","generatedImages","customImages","ubuntuDeleteId","removingImage","getTitleIcon","showMirrorPath","isShowingAdvancedOptions","toggleAdvancedOptions","bothKeyringOptionsSet","showConnectButton","sourceChanged","currentSources","ubuntu","sources","prevNew","updateSource","regenerateUbuntuImages","connect","isConnectButtonDisabled","getSourceParams","selectDefaults","arch","fetch","fromJson","showConnectBlock","showSelections","getUbuntuLTSReleases","deleted","getUbuntuNonLTSReleases","getArchitectures","toggleSelection","showImagesTable","getResource","resource","resource_os","rtype","image","icon","beingDeleted","resourceId","downloading","name_split","regenerateUbuntuCoreImages","ubuntuCoreImage","checked","regenerateOtherImages","otherImage","_regenerateImages","image_id","regenerateGeneratedImages","regenerateCustomImages","ltsIsSelected","commissioningSeriesSelected","commissioning_series","cancelRemove","deleteImage","showStopImportButton","region_import_running","showSaveSelection","canSaveSelection","commissioning_series_being_deleted","commissioning_series_arches","getSaveSelectionText","canStopImport","getStopImportText","stopImport","saveSelection","saveUbuntu","getNewSelections","newObjs","oldSelections","newSelections","selection","source_len","toggleUbuntuCoreSelection","saveUbuntuCoreSelection","saveUbuntuCore","toggleOtherSelection","saveOtherSelection","saveOther","confirmDeleteImage","ready","ubuntu_core_images","other_images","run","$templateCache","put","replace","require","maasCta","ngModel","ngModelCtrl","defaultTitle","select","shown","$setViewValue","getTitle","$modelValue","secondary","getOptionTitle","$viewChangeListeners","$eval","ngChange","stopPropagation","$apply","$compile","include","maasCardLoader","html","contents","maasCodeLines","attributes","empty","lines","newLine","insert","each","ngDisabled","maasEditing","focusHandler","blur","changeHandler","$render","$viewValue","unbind","$timeout","statuses","updateStatuses","controllerIds","checkImageStates","register","known","runningInterval","startTimeout","CHECK_INTERVAL","unregister","showSpinner","getImageStatus","ControllerImageStatusService","systemId","unwatch","registered","textOnly","getClass","countClass","classes","class_name","counter","updateStatusClass","serviceClass","serviceText","styleElement","document","createElement","innerHTML","getElementsByTagName","appendChild","BrowserService","transclude","maasDblClickOverlay","clickElement","overlay","tagName","createEvent","initMouseEvent","window","dispatchEvent","css","cursor","triggerHandler","overlayClick","preventDefault","overlayDblClick","browser","addClass","which","maasEnter","jasmine","Image","src","markDisconnected","connected","showDisconnected","clientError","wasConnected","watchConnection","isConnected","_error","disconnectedPromise","cancelTimeout","watchConnectionAndError","removeClass","IPRangesManager","ipranges","iprangeManager","newRange","editIPRange","deleteIPRange","addRange","start_ip","end_ip","comment","cancelAddRange","ipRangeCanBeModified","range","isIPRangeInEditMode","ipRangeToggleEditMode","ipRangeClearEditMode","isIPRangeInDeleteMode","ipRangeEnterDeleteMode","ipRangeCancelDelete","ipRangeConfirmDelete","ipRangeSort","factory","visitPage","Bakery","WebHandler","BakeryStorage","localStorage","getBakery","loginURL","externalAuthURL","attr","bakery","Info","VisitURL","nextPath","Accept","response","currentTarget","responseText","MAASFormController","savingKeys","managerMethod","cloneObject","clonedObj","isTableForm","tableForm","saveOnBlur","isSaving","showInputSaving","errorScope","registerField","unregisterField","startEditingField","stopEditingField","clearErrors","updatedObj","newObj","errorJson","errorField","setErrors","v","saveForm","newValue","inline","MAASGroupController","timeout","formController","keyIdx","pre","onChange","subtleText","subtle","missingAttrs","disableLabel","labelElement","labelWidth","labelLeft","append","labelInfo","infoWrapper","infoIcon","infoTooltip","inputWrapper","inputWidth","placeholder","inputElement","blurOnEnter","val","currentValue","disabled","placeholderEnabled","childScope","$new","_ngDisabled","_selectValue","_selectNgChange","_change","values","checkScope","_selectedValues","_checked","_toggleChecked","tagsScope","_tags","hiddenScope","_toggle","switchScope","_changed","onValue","offValue","inputClass","errorsElement","helpText","helpTextElement","setTimeout","focus","hasClass","subtleTextElement","removeAttr","ul","ele","macAddressFormat","numbers","$parsers","$formatters","hideCheckboxes","onListingChange","onCheckAll","onCheck","SPINNER_STATUSES","table","filteredMachines","updateAllChecked","$machine","showNodeStatus","other_test_status","getReleaseTitle","os_release","getStatusText","releaseTitle","trim","$machines","NotificationsManager","notifications","dismiss","categories","categoryTitles","warning","success","info","categoryClasses","categoryNotifications","cns","category","notification","maasOsSelect","getSelectableReleases","allChoices","getSelectableKernels","kernels","os","osKernels","getDefaultOrFirst","array","defaultValue","weightValue","first","weightedPresent","setDefault","default_osystem","default_release","kernel","selectedOSChanged","selectedReleaseChanged","ngPlaceholder","hideType","podTypes","fieldsElement","updateFields","podType","$destroy","maasObjForm","getType","driver_type","req","input_type","replaceWith","maasPowerParameters","$sce","enableHttpProxy","usePeerProxy","proxy_type","releaseName","setText","maasReleaseOptions","onEraseChange","globalOptions","startTime","runTime","estimatedRunTime","scriptStatus","incrementCounter","start_date","Date","setSeconds","seconds","floor","minutes","hours","new_counter","promise","$q","scriptType","allScripts","getScripts","script","tags_string","onTagAdding","refocus","tagsInput","tagsInputScope","isolateScope","eventHandlers","input","change","for_hardware","getIcon","SSHKeysManager","groupedKeys","authId","sourceTitles","lp","gh","upload","openRow","rowMode","trustAsHtml","close","canImportKeys","importKeys","protocol","auth_id","__all__","confirmDelete","keyMap","groupObj","keysource","keysourceKey","switchHasError","filteredSwitches","switch_","$switch_","$switches","$attr","isToggled","toggleMenu","target","ngType","valid_types","LogService","reloadPage","enableAutoReload","site","href","oldValue","onResize","windowWidth","innerWidth","message","_loaded","_data","_polling","_nextPromise","_pollTimeout","_pollErrorTimeout","_pollEmptyTimeout","isLoaded","isPolling","_poll","_loadData","callMethod","newData","_pollAgain","pollTimeout","connection_error","defer","resolve","Manager","_pk","_handler","registerNotifier","onNotify","NodesManager","service_ids","service_id","_metadataAttributes","_replaceItem","PollingManager","_batchKey","createDNSRecord","record","rrtype","ip_addresses","rrdata","_items","EventsManager","nodeId","_nodeId","_factory","_maxDays","_managers","_initBatchLoadParameters","node_id","max_days","destroyManager","setMaximumDays","isLoading","_getManager","machine_actions","polling","nextPromise","device_actions","region_controller_actions","rack_controller_actions","region_and_rack_controller_actions","min_hwe_kernels","replaceData","oldData","isEmpty","bond_options","newPowerType","oldPowerType","newItem","release_options","_autoReload","_type","_scopes","_getInternalData","isDataLoaded","isDataPolling","apply","waitingCount","_reloadFunc","registerHandler","disableAutoReload","unregisterHandler","storage_tags","NodeResultsManager","_node","hardware_type","_getStorageSubtext","deviceinfo","_updateObject","existing","updated","_addOrReplace","showing_menu","_processItem","result_section","result_type","subtext","hardware_type_results","physical_blockdevice","_getIndexOfItem","_updateMetadata","_removeItemByIdFromArray","_selectedItems","hw_type","ret","_area","has_surfaced","script_id","data_type","state","updateInterfaceForm","volume_group_id","blockdevice_id","partition_size","$cookies","MSG_TYPE","RESPONSE_TYPE","callbacks","requests","requestId","websocket","autoReconnect","retryTimeout","defaultConnectDefer","handlers","notifiers","newRequestId","func","unregisterNotifier","buildSocket","WebSocket","_buildUrl","onopen","onerror","onclose","onmessage","onMessage","_getProtocol","host","port","pathname","proto","csrftoken","base","newPath","newPort","encodeURIComponent","defaultConnect","opened","errored","reject","msg","onResponse","request_id","remembered_request","request","handler","remember","send","toJson","getLargestRange","largest_range","ranges","equals","purpose","hasDynamicRange","matching","_authUser","authuser","_loadAuthUser","reloadItems","addRackController","foreign_objects","standardFilter","mappings","cpu","cores","ram","memory","pod-id","isInteger","matches","lowerTerm","exact","negate","parseFloat","_matches","terms","term","matched","mapFunc","substring","no_match","field2","aDate","bDate","getTime","config","$interpolateProvider","$routeProvider","$httpProvider","versionedPath","startSymbol","endSymbol","defaults","xsrfCookieName","xsrfHeaderName","routes","when","redirectTo","reloadOnSearch","controllerAs","superuser","otherwise","next","current","ga","q","arguments","userId","analytics_user_id","uuid","hash","regex","matcher","navigator","userAgent","UNITS","unit","converted","abs","toFixed","units","block_size","ipv4ToOctets","octets","part","pow","expandedAddress","groups","substr","ipv6ToGroups","jsonString","JSON","parse","_typeof","e","logging","logLevel","performance","_debug","debug","_log","_info","_warn","warn","formatMilliseconds","milliseconds","__log","args","Array","unshift","METADATA_ACTIONS","CREATE","UPDATE","_name_field","_isLoading","_extraLoadDefers","_extraReloadDefers","_actionQueue","_activeItem","_metadata","pk_value","len","_replaceItemInArray","_batchLoadItems","extra_func","callLoad","_resolveDefers","defersArray","_rejectDefers","clear","processActions","updatedIdx","updatedItem","updateItems","clearActiveItem","canProcessActions","_getMetadataValue","metadatas","_addMetadataValue","count","_removeMetadataValue","_updateMetadataArrayEntry","added","oldArray","_updateMetadataValueEntry","_updateMetadataEntry","oldItem","loadedManagers","loadedManager","tryParsingJSON","SyntaxError","getPrintableString","dict","showNames","emptyFilter","_","getSplitSearch","fixedTerms","spanningParentheses","startIdx","searchTerms","_getFilterValueIndex","storedFilters","domainnamePattern","hostnamePattern","macPattern","ipv4Pattern","cidrMatcher","one","two","bits","domainname","macAddress","validateIPv4","validateIPv6","network","networkSplit","networkAddress","cidrBits","validateIPInRange","lowAddress","highAddress","ipOctets","lowOctets","highOctets","dropdowns","click","openMenu","closeAllMenus","MAASUI","utils","fn","attachEvent","readyState","addEventListener","el","className","classList","toggle","existingIndex","contains","init","querySelectorAll","sublinks"],"mappings":"mBACA,IAAAA,oBAGA,SAAAC,oBAAAC,UAGA,GAAAF,iBAAAE,UACA,OAAAF,iBAAAE,UAAAC,QAGA,IAAAC,OAAAJ,iBAAAE,WACAG,EAAAH,SACAI,GAAA,EACAH,YAUA,OANAI,QAAAL,UAAAM,KAAAJ,OAAAD,QAAAC,cAAAD,QAAAF,qBAGAG,OAAAE,GAAA,EAGAF,OAAAD,QAKAF,oBAAAQ,EAAAF,QAGAN,oBAAAS,EAAAV,iBAGAC,oBAAAU,EAAA,SAAAR,QAAAS,KAAAC,QACAZ,oBAAAa,EAAAX,QAAAS,OACAG,OAAAC,eAAAb,QAAAS,MACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,UAMAZ,oBAAAmB,EAAA,SAAAjB,SACAY,OAAAC,eAAAb,QAAA,cAAiDkB,OAAA,KAIjDpB,oBAAAqB,EAAA,SAAAlB,QACA,IAAAS,OAAAT,eAAAmB,WACA,WAA2B,OAAAnB,OAAA,SAC3B,WAAiC,OAAAA,QAEjC,OADAH,oBAAAU,EAAAE,OAAA,IAAAA,QACAA,QAIAZ,oBAAAa,EAAA,SAAAU,OAAAC,UAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,OAAAC,WAGtDxB,oBAAA2B,EAAA,GAIA3B,wCAAA4B,EAAA,6FC7DAC,QAAQ1B,OAAO,QAAQ2B,WAAW,uBAC9B,SAAU,iBAAkB,iBAAkB,iBAC9C,uBAAwB,oBAAqB,SACzCC,OAAQC,eAAgBC,eAAgBC,eACxCC,qBAAsBC,mBAwCtB,SAASC,UAAUC,aACf,OAAGT,QAAQU,SAASD,cAEZ3B,KAAM,GACN6B,OAAQF,YAAYE,OACpBC,aAbJC,IAAK,GACLC,aAAc,KACdC,SAAU,KACVC,UAAW,OAcPlC,KAAM,GACN6B,OAAQN,eAAeY,mBACvBL,aAnBJC,IAAK,GACLC,aAAc,KACdC,SAAU,KACVC,UAAW,MA/BDd,OAAOgB,QACbC,eAAiBjB,OAG7BA,OAAOkB,QAAUhB,eAAeiB,WAChCnB,OAAOoB,QAAUjB,eAAegB,WAChCnB,OAAOqB,UAAW,EAClBrB,OAAOsB,MAAQ,KAGftB,OAAOuB,gBAEC3C,KAAM,WACN4C,MAAO,aAGP5C,KAAM,UACN4C,MAAO,YAGP5C,KAAM,SACN4C,MAAO,WAgCfxB,OAAOyB,OAAS,KA6BhBzB,OAAO0B,KAAO,WAEP1B,OAAOqB,WAGVrB,OAAOyB,OAASnB,YAChBN,OAAOqB,UAAW,IAItBrB,OAAO2B,KAAO,WACV3B,OAAOqB,UAAW,EAGlBrB,OAAO4B,MAAM,oBAIjB5B,OAAO6B,aAAe,WAElB,OAAqB,OAAlB7B,OAAOyB,QAAiD,IAA9BzB,OAAOyB,OAAO7C,KAAKkD,SAGxCzB,kBAAkB0B,iBAAiB/B,OAAOyB,OAAO7C,OAI7DoB,OAAOgC,YAAc,SAASC,iBAE1B,GAAkC,IAA/BA,gBAAgBtB,IAAImB,OACnB,OAAO,EAGX,IAAIzB,kBAAkB6B,YAAYD,gBAAgBtB,KAC9C,OAAO,EAGX,IAAItC,EACJ,IAAIA,EAAI,EAAGA,EAAI2B,OAAOyB,OAAOf,WAAWoB,OAAQzD,IAAK,CAEjD,KADa2B,OAAOyB,OAAOf,WAAWrC,KAAO4D,kBAEzCjC,OAAOyB,OAAOf,WAAWrC,GAAGsC,MAAQsB,gBAAgBtB,IACpD,OAAO,EAGf,OAAO,GAIXX,OAAOmC,WAAa,SAASF,iBAEzB,GAAwC,IAArCA,gBAAgBnB,UAAUgB,OACzB,OAAO,EAGX,IAAIzB,kBAAkB+B,WAAWH,gBAAgBnB,WAC7C,OAAO,EAEX,IAAIzC,EACJ,GAAGyB,QAAQU,SAASyB,gBAAgBrB,cAChC,GAAyC,aAAtCqB,gBAAgBrB,aAAahC,MAE5B,IAAIP,EAAI,EAAGA,EAAI2B,OAAOkB,QAAQY,OAAQzD,IAIlC,GAHYgC,kBAAkBgC,oBAC1BJ,gBAAgBnB,UAChBd,OAAOkB,QAAQ7C,GAAGiE,MAElB,OAAO,OAGZ,GAAyC,WAAtCL,gBAAgBrB,aAAahC,MACnCkB,QAAQyC,SAASN,gBAAgBpB,UAAW,CAE5C,IAAI2B,OAAStC,eAAeuC,gBACxBR,gBAAgBpB,UAGpB,IAFYR,kBAAkBgC,oBAC1BJ,gBAAgBnB,UAAW0B,OAAOF,MAElC,OAAO,EAInB,OAAO,GAKXtC,OAAO0C,eAAiB,WACpB,GAAqB,OAAlB1C,OAAOyB,QAA0C,KAAvBzB,OAAOyB,OAAO7C,MACnCoB,OAAO6B,eACX,OAAO,EAGX,IAAIxD,EACJ,IAAIA,EAAI,EAAGA,EAAI2B,OAAOyB,OAAOf,WAAWoB,OAAQzD,IAAK,CACjD,IAAI4D,gBAAkBjC,OAAOyB,OAAOf,WAAWrC,GAC/C,GAA2B,KAAxB4D,gBAAgBtB,KACfX,OAAOgC,YAAYC,mBAClBnC,QAAQU,SAASyB,gBAAgBrB,cAClC,OAAO,EAEX,IAAI+B,gBACsC,aAAtCV,gBAAgBrB,aAAahC,OACK,KAA9BqD,gBAAgBnB,WAChBd,OAAOmC,WAAWF,kBACtBW,cACsC,WAAtCX,gBAAgBrB,aAAahC,QACxBkB,QAAQyC,SAASN,gBAAgBpB,WAClCb,OAAOmC,WAAWF,kBAC1B,GAAGU,iBAAmBC,cAClB,OAAO,EAGf,OAAO,GAIX5C,OAAO6C,aAAe,WAClB7C,OAAOyB,OAAOf,WAAWoC,MA5KrBnC,IAAK,GACLC,aAAc,KACdC,SAAU,KACVC,UAAW,MA6KnBd,OAAO+C,mBAAqB,SAASd,iBACjC,OAA6D,IAAtDjC,OAAOyB,OAAOf,WAAWsC,QAAQf,kBAI5CjC,OAAOiD,gBAAkB,SAAShB,iBAE3BjC,OAAO+C,mBAAmBd,kBAG7BjC,OAAOyB,OAAOf,WAAWwC,OACrBlD,OAAOyB,OAAOf,WAAWsC,QAAQf,iBAAkB,IAI3DjC,OAAOmD,OAAS,WACZnD,OAAOsB,MAAQ,KACftB,OAAOyB,OAASnB,YAChBN,OAAO2B,QAIX3B,OAAOoD,KAAO,SAASC,YAEnB,IAAGrD,OAAO0C,iBAAV,CAMA1C,OAAOsB,MAAQ,KAGf,IAAIG,OApLR,SAAiCA,QAE7B,IAOIpD,EAPAiF,iBACAC,SAAU9B,OAAO7C,KACjB6B,OAAQgB,OAAOhB,OACf+C,YAAa/B,OAAOf,WAAW,GAAGC,IAClC8C,cACA/C,eAGJ,IAAIrC,EAAI,EAAGA,EAAIoD,OAAOf,WAAWoB,OAAQzD,IACrCiF,gBAAgBG,WAAWX,KAAKrB,OAAOf,WAAWrC,GAAGsC,KAUzD,OARAb,QAAQ4D,QAAQjC,OAAOf,WAAY,SAASiD,KACxCL,gBAAgB5C,WAAWoC,MACvBnC,IAAKgD,IAAIhD,IACTiD,cAAeD,IAAI/C,aAAahC,KAChCiF,WAAYF,IAAI7C,UAChB0B,OAAUmB,IAAI9C,aAGfyC,gBA+JMQ,CAAwB9D,OAAOyB,QAC5CxB,eAAe8D,OAAOtC,QAAQuC,KAAK,SAASvC,QACrC4B,WACCrD,OAAOyB,OAASnB,UAAUN,OAAOyB,SAEjCzB,OAAOyB,OAASnB,YAEhBN,OAAO2B,SAEZ,SAASL,OACRtB,OAAOsB,MACHlB,qBAAqB6D,qBAAqB3C,WAKtDlB,qBAAqB8D,aACjBlE,QAASE,eAAgBC,iBAAiB6D,KAAK,WAE3ChE,OAAOyB,OAASnB,0GCxQhCR,QAAQ1B,OAAO,QAAQ2B,WAAW,uBAC9B,SAAU,iBAAkB,uBAC5B,oBAAqB,SAASC,OAAQG,eAClCC,qBAAsBC,mBAIJL,OAAOgB,QACbmD,eAAiBnE,OAG7BA,OAAOqB,UAAW,EAClBrB,OAAOsB,MAAQ,KAWftB,OAAOS,QANC7B,KAAM,GACNwF,eAAe,GAgBvBpE,OAAO0B,KAAO,WAEP1B,OAAOqB,WAGVrB,OAAOS,QAtBH7B,KAAM,GACNwF,eAAe,GAsBnBpE,OAAOqB,UAAW,IAItBrB,OAAO2B,KAAO,WACV3B,OAAOqB,UAAW,EAGlBrB,OAAO4B,MAAM,oBAIjB5B,OAAO6B,aAAe,WAElB,OAAiC,IAA9B7B,OAAOS,OAAO7B,KAAKkD,SAGdzB,kBAAkBgE,mBAAmBrE,OAAOS,OAAO7B,OAK/DoB,OAAOsE,eAAiB,WACpB,QAA0B,KAAvBtE,OAAOS,OAAO7B,OAAeoB,OAAO6B,iBAQ3C7B,OAAOmD,OAAS,WACZnD,OAAOsB,MAAQ,KACftB,OAAOS,QAxDH7B,KAAM,GACNwF,eAAe,GAwDnBpE,OAAO2B,QAIX3B,OAAOoD,KAAO,SAASC,YAEnB,IAAGrD,OAAOsE,iBAAV,CAMAtE,OAAOsB,MAAQ,KAGf,IAAIb,OA5DR,SAAiCA,QAC7B,OAAOX,QAAQyE,KAAK9D,QA2DP+D,CAAwBxE,OAAOS,QAC5CN,eAAe4D,OAAOtD,QAAQuD,KAAK,WAC/BhE,OAAOS,QA1EP7B,KAAM,GACNwF,eAAe,GA0EXf,YAEArD,OAAO2B,QAEZ,SAASL,OACRtB,OAAOsB,MACHlB,qBAAqB6D,qBAAqB3C,yGClG9DxB,QAAQ1B,OAAO,QAAQ2B,WAAW,yBAC9B,SAAU,QAAS,eAAgB,kBACnC,iBAAkB,iBAAkB,mBACpC,uBAAwB,oBAAqB,SACzCC,OAAQyE,MAAOC,aAAcC,gBAC7BC,eAAgBzE,eAAgB0E,iBAChCzE,qBAAsBC,mBAIJL,OAAOgB,QACb8D,iBAAmB9E,OAG/BA,OAAOqB,UAAW,EAClBrB,OAAO+E,MAAQ,UACf/E,OAAOgF,MAAQN,aAAavD,WAC5BnB,OAAOoB,QAAUjB,eAAegB,WAChCnB,OAAOiF,cAAgBL,eAAeM,QAAQ,iBAC9ClF,OAAOmF,YAAcP,eAAeM,QAAQ,eAC5ClF,OAAOoF,uBAAyBR,eAAeM,QAC3C,0BACJlF,OAAOqF,YAAcT,eAAeM,QAAQ,eAC5ClF,OAAOsB,MAAQ,KACftB,OAAOsF,gBAAkB,yCAGzBtF,OAAOuF,QAAU,KACjBvF,OAAOwF,QAAU,KAKjB,IAAIC,cAEI7G,KAAM,WACN8G,MAAO,UACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,gBACN8G,MAAO,gBACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IA4MlB,SAASC,sBACL,GAAmC,IAAhC/F,OAAOiF,cAAcnD,OACpB,MAAO,GAGP,IAAIzD,EACJ,IAAIA,EAAI,EAAGA,EAAI2B,OAAOiF,cAAcnD,OAAQzD,IACxC,GAA+B,kBAA5B2B,OAAOiF,cAAc5G,GACpB,OAAO2B,OAAOiF,cAAc5G,GAGpC,OAAO2B,OAAOiF,cAAc,GAapC,SAASe,WAAWC,cAIhB,OAAGnG,QAAQU,SAASyF,eAEZrH,KAAM,GACN6B,OAAQwF,aAAaxF,OACrByF,OAdJvF,IAAK,GACLW,OAAO,IAcH6E,KAAMF,aAAaE,KACnBC,aAAcH,aAAaG,aAC3BC,eAAgBJ,aAAaI,eAC7BC,OACIC,KAAMN,aAAaK,MAAMC,KACzBC,iBAOR5H,KAAM,GACN6B,OAAQN,eAAeY,mBACvBmF,OA7BAvF,IAAK,GACLW,OAAO,IA6BP6E,KAxDuB,IAAxBnG,OAAOgF,MAAMlD,OACL,KAEA9B,OAAOgF,MAAM,GAsDpBoB,aAAcL,sBACdM,eAAgBrG,OAAOoF,uBAAuBqB,KAC9CH,OACIC,KAAM,KACNC,gBAMZ,SAASE,WAAWC,cAIhB,OAAG7G,QAAQU,SAASmG,eAEZlG,OAAQkG,aAAalG,OACrB6F,OACIC,KAAM,KACNC,iBAKJ/F,OAAQN,eAAeY,mBACvBuF,OACIC,KAAM,KACNC,gBArRhBxG,OAAO4G,oBAEChI,KAAM,OACNiI,YAAa,2BACbC,SAEQlI,KAAM,WACN8G,MAAO,OACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,MAKlBlH,KAAM,WACNiI,YAAa,WACbC,OAAQrB,cAGR7G,KAAM,WACNiI,YAAa,sBACbC,SAEQlI,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,OACN8G,MAAO,OACPC,WAAY,SACZC,QAAW,KACXC,WACAC,UAAU,IAGVlH,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,MAKlBlH,KAAM,cACNiI,YAAa,iBACbC,SAEQlI,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,gBACN8G,MAAO,gBACPC,WAAY,SACZC,QAAW,WACXC,UACK,WAAY,kBACZ,UAAW,kBACX,OAAQ,SAEbC,UAAU,MAKlBlH,KAAM,OACNiI,YAAa,sBACbC,SAEQlI,KAAM,WACN8G,MAAO,MACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,MAKlBlH,KAAM,QACNiI,YAAa,0BACbC,OAAQrB,cAGR7G,KAAM,SACNiI,YAAa,SACbC,SAEQlI,KAAM,WACN8G,MAAO,OACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,WACN8G,MAAO,WACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,IAGVlH,KAAM,gBACN8G,MAAO,gBACPC,WAAY,SACZC,QAAW,GACXC,WACAC,UAAU,MA2I1B9F,OAAO0B,KAAO,SAASqF,MAEhB/G,OAAO+G,OAASA,OACI,YAAhB/G,OAAO+G,KACN/G,OAAOuF,QAAUS,aACK,YAAhBhG,OAAO+G,OACb/G,OAAOwF,QAAUkB,cAErB1G,OAAOsB,MAAQ,KACftB,OAAO+G,KAAOA,MAIf/G,OAAOqB,WAGVrB,OAAOqB,UAAW,EAGlBuD,eAAeoC,aAAahH,OAAQ,iBAGpC4E,eAAeoC,aAAahH,OAAQ,iBAIxCA,OAAO2B,KAAO,WACV3B,OAAOqB,UAAW,EAGlBuD,eAAeqC,YAAYjH,OAAQ,iBAGnC4E,eAAeqC,YAAYjH,OAAQ,eAGnCA,OAAO4B,MAAM,sBAIjB5B,OAAOkH,YAAc,WACjB,OAAmC,IAAhClH,OAAOiF,cAAcnD,QAGD,YAAhB9B,OAAO+G,MAIlB/G,OAAOmH,YAAc,WACjB,OAAmC,IAAhCnH,OAAOiF,cAAcnD,QAGD,YAAhB9B,OAAO+G,MAIlB/G,OAAOoH,OAAS,WACZpH,OAAOuF,QAAQW,KAAKpD,MAlKhBnC,IAAK,GACLW,OAAO,KAqKftB,OAAOqH,UAAY,SAAS1G,KACxB,IAAI2G,IAAMtH,OAAOuF,QAAQW,KAAKlD,QAAQrC,KACnC2G,KAAO,GACNtH,OAAOuF,QAAQW,KAAKhD,OAAOoE,IAAK,IAKxCtH,OAAOuH,YAAc,WAEjB,OAAkC,IAA/BvH,OAAOuF,QAAQ3G,KAAKkD,SAGfzB,kBAAkB0B,iBAAiB/B,OAAOuF,QAAQ3G,OAI9DoB,OAAOwH,YAAc,SAAS7G,KACX,KAAZA,IAAIA,IACHA,IAAIW,OAAQ,EAEZX,IAAIW,OAASjB,kBAAkB6B,YAAYvB,IAAIA,MAMvDX,OAAOyH,gBAAkB,WAQrB,GANAC,SACuB,OAAnB1H,OAAOuF,SACiB,OAAxBvF,OAAOuF,QAAQY,MACiB,KAAhCnG,OAAOuF,QAAQa,cACe,OAA9BpG,OAAOuF,QAAQe,MAAMC,MACrBvG,OAAOuH,YAAYvH,OAAOuF,SAC3BmC,SACC,OAAOA,SAKX,GAAkC,KAA/B1H,OAAOuF,QAAQW,KAAK,GAAGvF,KACtBX,OAAOuF,QAAQW,KAAK,GAAG5E,MACvB,OAAO,EAEX,IAAIjD,EACJ,IAAIA,EAAI,EAAGA,EAAI2B,OAAOuF,QAAQW,KAAKpE,OAAQzD,IAAK,CAC5C,IAAIsC,IAAMX,OAAOuF,QAAQW,KAAK7H,GAC9B,GAAe,KAAZsC,IAAIA,KAAcA,IAAIW,MACrB,OAAO,EAGf,OAAO,GAIXtB,OAAO2H,iBAAmB,WAKtB,OAHAD,SACuB,OAAnB1H,OAAOwF,SACuB,OAA9BxF,OAAOwF,QAAQc,MAAMC,KACtBmB,UAzIP,SAAiCE,WAAYpB,YACzC,IAAInI,EACJ,IAAIA,EAAI,EAAGA,EAAIuJ,WAAWd,OAAOhF,OAAQzD,IAAK,CAC1C,IAAIwJ,MAAQD,WAAWd,OAAOzI,GAC1BgB,MAAQmH,WAAWqB,MAAMjJ,MAC7B,GAAGiJ,MAAM/B,WACFhG,QAAQgI,YAAYzI,QAAoB,KAAVA,OAC7B,OAAO,EAInB,OAAO,EAiIA0I,CACH/H,OAAOwF,QAAQc,MAAMC,KAAMvG,OAAOwF,QAAQc,MAAME,aAIxDxG,OAAOmD,OAAS,WACZnD,OAAOsB,MAAQ,KACftB,OAAOuF,QAAUS,aACjBhG,OAAOwF,QAAUkB,aAGjB1G,OAAO2B,QAIX3B,OAAOgI,YAAc,SAAS3E,YAnL9B,IAAkCkC,QAE1BW,KACA+B,QACAxE,WAiLDzD,OAAOyH,oBAMVzH,OAAOsB,MAAQ,KAGfqD,gBAAgBZ,QA9LcwB,QA+LDvF,OAAOuF,QA7LhCW,KAAOpG,QAAQyE,KAAKgB,QAAQW,MAC5B+B,QAAU/B,KAAKgC,QAAQvH,IACvB8C,WAAayC,KAAKiC,IAAI,SAASxH,KAAO,OAAOA,IAAIA,OAIjD4C,SAAUgC,QAAQ3G,KAClB6B,OAAQ8E,QAAQ9E,OAChB2F,aAAcb,QAAQa,aACtBC,eAAgBd,QAAQc,eACxB4B,QAASA,QACTxE,WAAYA,WACZmE,WAAYrC,QAAQe,MAAMC,KAAK3H,KAC/BwJ,iBAAkBtI,QAAQyE,KAAKgB,QAAQe,MAAME,YAC7CL,MACIkC,GAAI9C,QAAQY,KAAKkC,GACjBzJ,KAAM2G,QAAQY,KAAKvH,SA6KmBoF,KACtC,WACOX,WACCrD,OAAOuF,QAAUS,WAAWhG,OAAOuF,UAEnCvF,OAAOuF,QAAUS,aAGjBhG,OAAO2B,SAEZ,SAASL,OACRtB,OAAOsB,MACHlB,qBAAqB6D,qBAAqB3C,WAK9DtB,OAAOsI,YAAc,SAASjF,YAE1B,IAAGrD,OAAO2H,mBAAV,CAMA3H,OAAOsB,MAAQ,KAGf,IAAIiH,OAASzI,QAAQyE,KAAKvE,OAAOwF,QAAQc,MAAME,YAC/C+B,OAAOC,aAAexI,OAAOwF,QAAQc,MAAMC,KAAK3H,KAChD2J,OAAO9H,OAAST,OAAOwF,QAAQ/E,OAAO7B,KAON,aAAxB2J,OAAOC,cACiB,UAAxBD,OAAOC,qBACJD,OAAOE,SAIlBhE,OACIiE,OAAQ,OACRC,IAAK,mCACLC,KAAMC,EAAEC,MAAMP,QACdQ,SACIC,eAAgB,uCAErBhF,KAAK,WACDX,WACCrD,OAAOwF,QAAUkB,WAAW1G,OAAOwF,UAEnCxF,OAAOwF,QAAUkB,aAEjB1G,OAAO2B,SAEZ,SAASL,OACRtB,OAAOsB,MACHlB,qBAAqB6D,qBAAqB3C,MAAMsH,UAM5DxI,qBAAqB8D,aACjBlE,QAAS0E,aAAcvE,iBAAiB6D,KAAK,WAEzChE,OAAOuF,QAAUS,aACjBhG,OAAOwF,QAAUkB,eAIzBtG,qBAAqB6I,YACjBjJ,OAAQ4E,gBAAgBZ,KAAK,WAC1BhE,OAAOiF,cAAcnD,OAAS,GAK1BhC,QAAQU,SAASR,OAAOuF,UACS,KAAhCvF,OAAOuF,QAAQa,eACfpG,OAAOuF,QAAQa,aAAeL,yBAM1C/F,OAAOkJ,IAAI,WAAY,WACnBtE,eAAeqC,YAAYjH,OAAQ,iBACnC4E,eAAeqC,YAAYjH,OAAQ,4GClnB/CF,QAAQ1B,OAAO,QAAQ2B,WAAW,uBAC9B,SAAU,UAAW,aAAc,eAAgB,YACnD,qBAAsB,iBAAkB,kBACxC,iBAAkB,iBAAkB,eAAgB,iBACpD,uBACA,SAASC,OAAQmJ,QAASC,WAAYC,aAAcC,UAC3CC,mBAAoBpJ,eAAgBwE,gBACpC1E,eAAgBC,eAAgBsJ,aAAcC,eAC9CrJ,sBAGL,IAAIsJ,kBACC,SAAU,WACV,UAAW,YACX,WAAY,aAIjBN,WAAW5H,MAAQ,YACnB4H,WAAWO,KAAO,YAGlB3J,OAAO4J,QAAS,EAChB5J,OAAO6J,kBAAoBN,mBAAmBpI,WAC9CnB,OAAOoB,QAAUjB,eAAegB,WAChCnB,OAAO8J,SAAWnF,gBAAgBxD,WAClCnB,OAAO+J,QAAU9J,eAAekB,WAChCnB,OAAOgK,cAAgBP,eACvBzJ,OAAOiK,iBAAmB,KAC1BjK,OAAOkK,OAAS,MAChBlK,OAAOmK,eAAiB,KACxBnK,OAAOoK,UAAY,KAGnBpK,OAAOqK,UAAYrK,OAAOsK,UAG1BtK,OAAOuK,UAAY,SAASF,WACxBrK,OAAOqK,UAAYA,UACnBrK,OAAOwK,SAAWxK,OAAOwK,SAK7BxK,OAAOyK,cACHC,WAAY,SAASnC,QACjB,GAA6B,WAA1BvI,OAAOoK,UAAU7D,KAChB,OAAOtG,eAAe0K,WAAWpC,QAC9B,GAA6B,cAA1BvI,OAAOoK,UAAU7D,KACvB,OAAOtG,eAAe2K,gBAAgBrC,QAEtC,MAAM,IAAIsC,MAAM,iBAAmB7K,OAAOoK,UAAU7D,QAMhEvG,OAAO8K,iBAAmB,SAASC,WAC/B,OAA0B,OAAvBA,UAAUxH,SACF,UAGAwH,UAAUxH,UAKzBvD,OAAOgL,cAAgB,SAASnK,UAC5B,IAAI2B,OAAStC,eAAeuC,gBAAgB5B,UAC5C,OAAOX,eAAe+K,QAAQzI,SAIlCxC,OAAOkL,YAAc,SAASC,QAC1B,IAAIC,KAAO5B,aAAa/G,gBAAgB0I,QACxC,OAAO3B,aAAayB,QAAQG,OAIhCpL,OAAOqL,eAAiB,SAASC,UAC7B,GAAGtL,OAAOmK,iBAAmBmB,SACzBtL,OAAOmK,eAAiB,SACrB,CACH,IAEI1J,OAFA8K,WAAahC,mBAAmB9G,gBAAgB6I,UAChD/H,SAAWvD,OAAO8K,iBAAiBS,YAEvB,YAAbhI,WACCA,SAAW,IAEZA,SAASP,QAAQ,KAAO,GACvBvC,OAASN,eAAeqL,gBACpBjI,SAASkI,MAAMlI,SAASP,QAAQ,KAAO,IAC3CO,SAAWA,SAASmI,MAAM,IAAK,GAAG,GACpB,OAAXjL,SACCA,OAASN,eAAeY,qBAG5BN,OAASN,eAAeY,mBAE5Bf,OAAOoK,WACH7D,KAAM,SACNhD,SAAUA,SACV9C,OAAQA,OACRkL,OAAQ,KACR/H,cAAe,UACfgI,MAAM,EACNC,OAAO,EACPnC,gBAAiBA,gBAAgBoC,OAC7B,SAASC,QAIL,QAAiB,WAAdA,OAAO,KACLjM,QAAQyC,SAASgJ,WAAW/I,YAO7CxC,OAAOmK,eAAiBmB,WAMhCtL,OAAOgM,WAAa,SAASC,MACzB,IAAIV,WAAahC,mBAAmB9G,gBAChCzC,OAAOmK,gBAgBX,OAfA8B,KAAOnM,QAAQyE,KAAK0H,MACS,WAA1BjM,OAAOoK,UAAU7D,MAChB0F,KAAKzI,YAAc+H,WAAWW,YAC9BD,KAAKxI,cACLwI,KAAKvL,aACDC,IAAK4K,WAAWW,YAChBtI,cAAeqI,KAAKrI,cACpBC,WAAY0H,WAAWY,GACvB3J,OAAQ+I,WAAW/I,UAES,cAA1BxC,OAAOoK,UAAU7D,OACvB0F,KAAKC,YAAcX,WAAWW,YAC9BD,KAAKpI,WAAa0H,WAAWY,GAC7BF,KAAKzJ,OAAS+I,WAAW/I,QAEtByJ,MAIXjM,OAAOoM,UAAY,SAASC,KACxB9C,mBAAmB+C,YAAYtM,OAAOmK,gBACtCnK,OAAOmK,eAAiB,KACxBnK,OAAOoK,UAAU7G,SAAW8I,IAAI9I,SAChCvD,OAAOoK,UAAUuB,OAASU,IAAIV,OAC9B3L,OAAOoK,UAAUyB,OAAQ,EACtB7L,OAAOoK,UAAUwB,OACb9L,QAAQyM,SAASF,IAAIV,QACpBrC,UAAUkD,KAAK,SAAWH,IAAIV,QAE9BrC,UAAUkD,KAAK,UAAUC,QAAQC,IAAK,cAMlDtM,qBAAqB8D,aAAalE,QAC9BuJ,mBAAoBpJ,eAAgBwE,gBACpC1E,eAAgBC,eAAgBsJ,aAAcC,iBAAiBzF,KAC/D,WACIhE,OAAO4J,QAAS,EAChB5J,OAAOiK,iBAAmBR,eAAehH,gBACrC,uHC1KpB3C,QAAQ1B,OAAO,QAAQ2B,WAAW,2BAC9B,SAAU,aAAc,eAAgB,YACxC,iBAAkB,eAAgB,uBAAwB,eAC1D,SACIC,OAAQoJ,WAAYC,aAAcC,UAClCnJ,eAAgBwM,aAAcvM,qBAAsBwM,cAgDpD,SAASC,aAAapM,QAClBT,OAAOS,OAASA,OAChBT,OAAO4J,QAAS,EANhBR,WAAW5H,MAAQxB,OAAOS,OAAOqM,YAzCrC1D,WAAW5H,MAAQ,aAInB4H,WAAWO,KAAO,UAGlB3J,OAAO4J,QAAS,EAChB5J,OAAOS,OAAS,KAChBT,OAAO+M,aAAc,EACrB/M,OAAOqK,UAAY,OACnBrK,OAAOwK,SAAU,EACjBxK,OAAOgN,OAAS,KAEhBhN,OAAOiN,eAAiB9M,eACxBH,OAAOkN,aAEPlN,OAAOmN,sBACH,IAAK,OAAQ,QAAS,KAAM,KAAM,MAAO,QAAS,OAItDnN,OAAOqK,UAAY,OAGnBrK,OAAOuK,UAAY,SAASF,WACxBrK,OAAOqK,UAAYA,UACnBrK,OAAOwK,SAAWxK,OAAOwK,SAG7BxK,OAAOoN,iBAAmB,WACtBpN,OAAO+M,aAAc,GAIzB/M,OAAOqN,gBAAkB,WACrBrN,OAAO+M,aAAc,GAiBzB/M,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAIxBtN,OAAOuN,gBAAkB,WACrB,QAAGzN,QAAQU,SAASR,OAAOS,SACK,IAArBT,OAAOS,OAAO4H,IAM7BrI,OAAOwN,aAAe,WAClB,QAAG1N,QAAQU,SAASR,OAAOS,SACgB,IAAhCT,OAAOS,OAAOgN,OAAO3L,QAMpC9B,OAAO0N,aAAe,WAClB1N,OAAOsB,MAAQ,KACftB,OAAO2N,kBAAmB,EAC1B3N,OAAOgN,OAAS,UAIpBhN,OAAO4N,gBAAkB,WACrB5N,OAAOsB,MAAQ,KACftB,OAAO2N,kBAAmB,EAC1B3N,OAAOgN,OAAS,cAIpBhN,OAAO6N,aAAe,WAClB7N,OAAO2N,kBAAmB,GAI9B3N,OAAO8N,oBAAsB,WACzB3N,eAAe4N,aAAa/N,OAAOS,QAAQuD,KAAK,WAC5ChE,OAAO2N,kBAAmB,EAC1BrE,UAAUkD,KAAK,aAChB,SAASlL,OACRtB,OAAOsB,MACHlB,qBAAqB6D,qBAAqB3C,UAKtDlB,qBAAqB8D,aACjBlE,QAASG,eAAgBwM,eAAe3I,KAAK,WAI7C,IAAIgK,aAAe7N,eAAe8N,gBAC9BC,gBAAkBC,SAAS9E,aAAa+E,UAAW,IACpDC,MAAMH,iBACLtB,aAAa0B,WAAW,8BAClBxO,QAAQU,SAASwN,eACvBA,aAAa3F,KAAO6F,gBACpBrB,aAAamB,cAEb7N,eAAeoO,cACXL,iBAAiBlK,KAAK,SAASvD,QAC3BoM,aAAapM,SACd,SAASa,OACRsL,aAAa0B,WAAWhN,yGCjIhDxB,QAAQ1B,OAAO,QAAQ2B,WAAW,yBAC9B,SAAU,aAAc,eAAgB,UAAW,iBACnD,eAAgB,uBAChB,SAASC,OAAQoJ,WAAYC,aAAcmF,QAASrO,eAChDwM,aAAcvM,sBAKdgJ,WAAW5H,MAAQ,MACnB4H,WAAWO,KAAO,UAGlB3J,OAAOoB,QAAUjB,eAAegB,WAChCnB,OAAOyO,YAAc,UACrBzO,OAAOqK,UAAY,OACnBrK,OAAOwK,SAAU,EACjBxK,OAAO0O,SAAU,EAKjB1O,OAAOmE,eAAiB,KAGxBnE,OAAO2O,UAAY,WACf3O,OAAOmE,eAAezC,QAI1B1B,OAAO4O,gBAAkB,WACrB5O,OAAOmE,eAAehB,UAI1BnD,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAGxBlN,qBAAqB8D,aACjBlE,QAASG,eAAgBwM,eAAe3I,KACxC,WACIhE,OAAO0O,SAAU,oGC1CjC5O,QAAQ1B,OAAO,QAAQ2B,WAAW,2BAC9B,SAAU,aAAc,eAAgB,UAAW,YACnD,iBAAkB,eAAgB,iBAAkB,gBACpD,qBACA,eAAgB,uBAAwB,eACxC,SACIC,OAAQoJ,WAAYC,aAAcmF,QAASlF,UAC3CuF,eAAgBrF,aAActJ,eAAgB4O,cAC9CC,mBACApC,aAAcvM,qBAAsBwM,cAkCpC,SAASoC,aAAaC,QACfnP,QAAQU,SAASyO,UAChBjP,OAAOiP,OAASA,OAhBpB7F,WAAW5H,MAAQxB,OAAOiP,OAAOrQ,KAkB7BoB,OAAOkP,OAAO,QAASC,aAAa,GACpCnP,OAAOkP,OAAO,UAAWC,aAAa,GACtCnP,OAAOkP,OAAO,cAAeC,aAAa,GAC1CnP,OAAO4J,QAAS,EAEhB5J,OAAOqK,UAAY,2CAK3B,SAAS8E,cACL,IAAIC,QACAC,SACJvP,QAAQ4D,QAAQ8K,QAAQ,SAARA,CACRxO,OAAOsP,OAAQL,OAAOjP,OAAOiP,OAAO5G,KAAK,GACzC,SAAS+C,MACb,IAAIlK,QACAsN,QAAQ,SAARA,CAAkBxO,OAAOkB,SAAUkK,KAAKA,KAAK/C,KAAK,GACtD,GAAGnH,QAAQY,OAAS,EAChBhC,QAAQ4D,QAAQxC,QAAS,SAASsB,QAC9B,IAAI+M,MAAQT,cAAcrM,gBAAgBD,OAAO+M,OAC7CC,WAAwB,OAAVD,MACd,cAAgBA,MAAM3Q,KACtB6Q,KACArE,KAAMA,KACNsE,UAAWlG,aAAayB,QAAQG,MAChC5I,OAAQA,OACRmN,YAAazP,eAAe+K,QAAQzI,QACpC+M,MAAOA,MACPC,WAAYA,YAEhBJ,KAAKtM,KAAK2M,WAEX,CAGH,IAAIA,KACArE,KAAMA,KACNsE,UAAWlG,aAAayB,QAAQG,MAChC5I,OAAQ,KACRmN,YAAa,KACbJ,MAAO,KACPC,WAAY,MAEhBJ,KAAKtM,KAAK2M,KAGd3P,QAAQ4D,QAAQ0H,KAAKwE,UAAW,SAASC,UACrC,IAAIC,KAAOf,mBAAmBtM,gBAAgBoN,UAC3C/P,QAAQU,SAASsP,QAChBT,MAAMS,KAAKC,WAAaD,UAIpC9P,OAAOoP,KAAOA,KACdpP,OAAOqP,MAAQtQ,OAAOiR,KAAKX,OAAOlH,IAAI,SAAS8H,KAC3C,OAAOZ,MAAMY,OA3FrB7G,WAAW5H,MAAQ,aAInB4H,WAAWO,KAAO,WAGlB3J,OAAOiP,OAAS,KAChBjP,OAAOkQ,cAAgBrB,eACvB7O,OAAO+M,aAAc,EACrB/M,OAAOsP,MAAQ9F,aAAarI,WAC5BnB,OAAOkB,QAAUhB,eAAeiB,WAChCnB,OAAOmQ,YAAcpB,mBAAmB5N,WACxCnB,OAAO4J,QAAS,EAQhB5J,OAAOoN,iBAAmB,WACtBpN,OAAO+M,aAAc,GAIzB/M,OAAOqN,gBAAkB,WACrBrN,OAAO+M,aAAc,GAqEzB/M,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAIxBtN,OAAOoQ,gBAAkB,WACrB,QAAItQ,QAAQU,SAASR,OAAOiP,SAGA,IAArBjP,OAAOiP,OAAO5G,IAIzBrI,OAAOwN,aAAe,WAClB,QAAG1N,QAAQU,SAASR,OAAOiP,SACK,IAArBjP,OAAOiP,OAAO5G,IAM7BrI,OAAO0N,aAAe,WAClB1N,OAAOsB,MAAQ,KACftB,OAAOqQ,kBAAmB,GAI9BrQ,OAAOsQ,mBAAqB,WACxBtQ,OAAOqQ,kBAAmB,GAI9BrQ,OAAO8N,oBAAsB,WACzBe,eAAe0B,aAAavQ,OAAOiP,QAAQjL,KAAK,WAC5ChE,OAAOqQ,kBAAmB,EAC1B/G,UAAUkD,KAAK,aACflD,UAAUmD,OAAO,KAAM,WACxB,SAAS+D,OACRxQ,OAAOsB,MACHlB,qBAAqB6D,qBAAqBuM,MAAMlP,UAK5DlB,qBAAqB8D,aAAalE,QAC9B6O,eAAgBrF,aAActJ,eAAgB4O,cAC9CC,mBAAoBpC,eAAe3I,KACnC,WAII,IAAIyM,aAAe5B,eAAeZ,gBAC9ByC,gBAAkBvC,SAAS9E,aAAasH,UAAW,IAEpDtC,MAAMqC,iBACL9D,aAAa0B,WAAW,8BAClBxO,QAAQU,SAASiQ,eACvBA,aAAapI,KAAOqI,gBACpB1B,aAAayB,cAEb5B,eAAeN,cACXmC,iBAAiB1M,KAAK,SAASiL,QAC3BD,aAAaC,SACd,SAAS3N,OACRsL,aAAa0B,WAAWhN,mGC5KpDxB,QAAQ1B,OAAO,QAAQ2B,WAAW,oBAC9B,aAAc,SAAU,uBACxB,iBAAkB,eAAgB,uBAAwB,SACtDqJ,WAAYpJ,OAAQ4Q,qBACpBnH,eAAgBkD,aAAcvM,sBAE1BgJ,WAAWO,KAAO,SAClBP,WAAW5H,MAAQ,aAEnBxB,OAAO0O,SAAU,EACjB1O,OAAO6Q,cAAgBD,qBAAqB1L,UAC5ClF,OAAOgK,cAAgBP,eACvBzJ,OAAO8Q,WAAa,KAGpB9Q,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAIxBlN,qBAAqB8D,aACjBlE,QAASyJ,eAAgBkD,eAAe3I,KAAK,WAC7ChE,OAAO8Q,WAAarH,eAAehH,gBAC/B,6BAMRzC,OAAOkP,OAAO,0BAA2B,WAClCpP,QAAQiR,QAAQ/Q,OAAO6Q,cAAcG,aACpChR,OAAO0O,SAAU,EACjBtF,WAAW5H,MAAQ,mGChCvC1B,QAAQ1B,OAAO,QAAQ2B,WAAW,mBAC9B,aAAc,SAAU,UAAW,YACnC,iBAAkB,6BAA8B,uBAChD,uBACA,SACIqJ,WAAYpJ,OAAQmJ,QAASG,UAC7BG,eAAgBwH,2BAA4BL,qBAC5CxQ,sBA2EI,GAzEAgJ,WAAWO,KAAO,QAClBP,WAAW5H,MAAQ,UAEnBxB,OAAO0O,SAAU,EACjB1O,OAAOgK,cAAgBP,eACvBzJ,OAAOkR,YAAcD,2BACrBjR,OAAO6Q,cAAgBD,qBAAqB1L,UAC5ClF,OAAOmR,WAAY,EACnBnR,OAAOoR,SAAW,KAClBpR,OAAOqR,YAAc,KACrBrR,OAAOsR,YAAc,KACrBtR,OAAOuR,aAAe,KACtBvR,OAAOwR,UAAY,KAInBpI,WAAWqI,KAAO,WACdzR,OAAO0R,eAAc,IAIzB1R,OAAO2R,eAAiB,WACpB,IAAIC,KAAO5R,OAAOoR,SAASS,UAC3B,QAAG/R,QAAQU,SAASoR,OACTA,KAAKE,aAOpB9R,OAAO+R,eAAiB,WACpB,IAAIC,SAAU,EACVC,MACAjS,OAAOqR,YACPrR,OAAOsR,YACPtR,OAAOuR,aACPvR,OAAOwR,WAOX,OANA1R,QAAQ4D,QAAQuO,KAAM,SAAS5F,KAC3B,IAAIuF,KAAOvF,IAAIwF,UACZ/R,QAAQU,SAASoR,OAASA,KAAKE,cAC9BE,SAAU,KAGXA,SAIXhS,OAAOkS,YAAc,WACjB,OACKlS,OAAO2R,mBACP3R,OAAO+R,kBACR/R,OAAOmR,WAIfnR,OAAO0R,cAAgB,SAASS,OACzBrS,QAAQgI,YAAYqK,SACnBA,OAAQ,IAETA,OAASnS,OAAOkS,gBACfzI,eAAeiB,YACX9L,KAAQ,kBACRS,OAAS,IACV2E,KAAK,WAGJmF,QAAQiJ,SAASC,YAM1BC,YAAYC,gBACXjJ,UAAUkD,KAAK,SACZ,CAEH,IAAIgG,UAAY/I,eAAgBwH,4BAChC7Q,qBAAqB8D,aACjBlE,OAAQwS,UAAUxO,KAAK,WACvBhE,OAAO0O,SAAU,EACjB1O,OAAOoR,SAAW3H,eAAehH,gBAC7B,aACJzC,OAAOqR,YAAc5H,eAAehH,gBAChC,gBACJzC,OAAOwR,UAAY/H,eAAehH,gBAC9B,cACJzC,OAAOsR,YACHL,2BAA2B9P,WAAW2K,OAClC,SAAS2G,MACL,OAAQA,KAAA,SACU,iBAAdA,KAAK7T,OACV,GACXoB,OAAOuR,aACHN,2BAA2B9P,WAAW2K,OAClC,SAAS2G,MACL,OAAQA,KAAA,SACU,kBAAdA,KAAK7T,OACV,KAMfoB,OAAOkP,OAAO,0BAA2B,WAClCpP,QAAQiR,QAAQ/Q,OAAO6Q,cAAcG,YACpChR,OAAO6Q,cAAcG,UAAUlP,OAAS,EACxC9B,OAAOmR,WAAY,EAEnBnR,OAAOmR,WAAY,iGCtH3CrR,QAAQ1B,OAAO,QAAQ2B,WAAW,uBAC9B,aAAc,SAAU,UAAW,YACnC,eAAgB,uBAChB,SACIqJ,WAAYpJ,OAAQmJ,QAASG,UAC7BqD,aAAcvM,sBAEVgJ,WAAWO,KAAO,QAClBP,WAAW5H,MAAQ,UAEnBxB,OAAO0O,SAAU,EACjB1O,OAAO0S,KAAO,KAIdtJ,WAAWqI,KAAO,WACdzR,OAAO0R,eAAc,IAIzB1R,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAIxBtN,OAAOkS,YAAc,WACjB,OAAOlS,OAAO0S,KAAKC,cAAgB,GAIvC3S,OAAO0R,cAAgB,SAASS,OACzBrS,QAAQgI,YAAYqK,SACnBA,OAAQ,IAETA,OAASnS,OAAOkS,gBACfvF,aAAaiG,oBAAoB5O,KAAK,WAGlCmF,QAAQiJ,SAASC,YAM1BC,YAAYO,qBACXvJ,UAAUkD,KAAK,KAGfpM,qBAAqB6I,YACjBjJ,OAAQ2M,cAAc3I,KAAK,WACvBhE,OAAO0O,SAAU,EACjB1O,OAAO0S,KAAO/F,aAAamG,+GCnDnDhT,QAAQ1B,OAAO,QAAQ2B,WAAW,0BAC9B,SAAU,aAAc,eAAgB,UAAW,YACnD,iBAAkB,iBAAkB,gBAAiB,eACrD,eAAgB,uBAChB,SAASC,OAAQoJ,WAAYC,aAAcmF,QAASlF,UAC3CpJ,eAAgB2O,eAAgBC,cAAetF,aAC/CmD,aAAcvM,sBAGnB,IAAI2S,aAAevE,QAAQ,gBACvBwE,eAAiBxE,QAAQ,kBACzByE,cAAgBzE,QAAQ,iBACxB0E,kBAAoB1E,QAAQ,qBAGhCpF,WAAW5H,MAAQ,UACnB4H,WAAWO,KAAO,WAIlB3J,OAAOmT,iBAAmB,WACnBrT,QAAQyM,SAASjD,UAAUmD,SAAS2G,IACnCpT,OAAOqT,QAAU/J,UAAUmD,SAAS2G,GAEpCpT,OAAOqT,QAAU,UAIzBrT,OAAOsT,mBACH1U,KAAM,aACN4C,MAAO,SACP+R,cAAe,aACfC,WAAY,UAEhBxT,OAAOyT,iBACH7U,KAAM,WACN4C,MAAO,OACP+R,cAAe,WACfC,WAAY,QAEhBxT,OAAO0T,kBACH9U,KAAM,YACN4C,MAAO,QACP+R,cAAe,YACfC,WAAY,SAEhBxT,OAAO2T,mBACH/U,KAAM,aACN4C,MAAO,SACP+R,cAAe,aACfC,WAAY,UAGhBxT,OAAOmT,mBAGPnT,OAAO4T,cAAgB1T,eACvBF,OAAOkB,QAAUhB,eAAeiB,WAChCnB,OAAOkQ,cAAgBrB,eACvB7O,OAAO6T,QAAUhF,eAAe1N,WAChCnB,OAAO8T,aAAehF,cACtB9O,OAAO+T,OAASjF,cAAc3N,WAC9BnB,OAAOgU,YAAcxK,aACrBxJ,OAAOsP,MAAQ9F,aAAarI,WAC5BnB,OAAO0O,SAAU,EAEjB1O,OAAOiU,SAEPjU,OAAOiU,MAAMJ,WAEb7T,OAAOiU,MAAMF,UACb/T,OAAOiU,MAAMF,OAAOG,eAGpB,IAAIC,0BACAlF,OAAQ,WACJ,UAEJ7D,KAAM,WAEF,OACI6D,OAAQjP,OAAO6T,QAAQ,GAAGxL,KAGlCkH,MAAO,WACH,UAEJ/M,OAAQ,WAEJ,OACI4I,KAAMpL,OAAO6T,QAAQ,GAAGO,SAAS,MAM7C,SAASpJ,cAAcxI,QACnB,OAAOtC,eAAe+K,QAAQzI,QA8HlCxC,OAAOqU,cAAgB,WACnB,IA9DIjF,KACA2E,OACAO,eA6DW,UADDtU,OAAOqT,SAEjB/J,UAAUmD,OAAO,KAAM,SAhEvB2C,QACA2E,OAASvF,QAAQ,UAARA,CAAmBxO,OAAO+T,QAAS,SAC5CO,gBAAkBjM,IAAK,GAC3BvI,QAAQ4D,QAAQqQ,OAAQ,SAASxE,OAC7B,IAAIrO,QAAU+R,cAAcjT,OAAOkB,QAASqO,OAC5CrO,QAAUsN,QAAQ,UAARA,CAAmBtN,SAAU,SACvC,IAAIqT,MAAQ,EACZzU,QAAQ4D,QAAQxC,QAAS,SAASsB,QAC9B+R,QACA,IAAInJ,KAAO5B,aAAa/G,gBAAgBD,OAAO4I,MAE3CqE,KACAR,OAFSJ,eAAepM,gBAAgB2I,KAAK6D,QAG7C7D,KAAMA,KACNsE,UAAW1P,OAAOkL,YAAYE,MAC9B5I,OAAQA,OACRmN,YAAa3E,cAAcxI,QAC3B+M,MAAOA,MACPC,WAAY,IAEbD,MAAMlH,KAAOiM,eAAejM,KAC3BiM,eAAejM,GAAKkH,MAAMlH,GAC1BoH,IAAID,WAAaD,MAAM3Q,MAE3BwQ,KAAKtM,KAAK2M,OAED,IAAV8E,OACCnF,KAAKtM,MACDyM,MAAOA,MACPC,WAAYD,MAAM3Q,SAI9BoB,OAAOiU,MAAMF,OAAO3E,KAAOA,KAG/B,WACI,IAAIA,QACAlO,QAAUgS,kBAAkBlT,OAAOkB,SACvCA,QAAUsN,QAAQ,UAARA,CAAmBtN,SAAU,SACvCpB,QAAQ4D,QAAQxC,QAAS,SAASsB,QAC9B,IAAI4I,KAAO5B,aAAa/G,gBAAgBD,OAAO4I,MAE3CqE,KACAR,OAFSJ,eAAepM,gBAAgB2I,KAAK6D,QAG7C7D,KAAMA,KACNsE,UAAW1P,OAAOkL,YAAYE,MAC9B5I,OAAQA,OACRmN,YAAa3E,cAAcxI,QAC3B+M,MAAO,MAEXH,KAAKtM,KAAK2M,OAEdzP,OAAOiU,MAAMF,OAAOG,YAAc9E,KAa9BoF,KAKAlL,UAAUmD,OAAO,KAAM,UAjI/B,WACI,IAAI2C,QACAqF,iBAAmBpM,IAAI,GACvBqM,eAAiBrM,IAAI,GACrBwL,QAAUrF,QAAQ,UAARA,CAAmBxO,OAAO6T,SAAU,SAClD/T,QAAQ4D,QAAQmQ,QAAS,SAAS5E,QAC9B,IAAIK,MAAQ0D,eAAehT,OAAOsP,MAAOL,QACzCK,MAAQd,QAAQ,UAARA,CAAmBc,OAAQ,QACnCxP,QAAQ4D,QAAQ4L,MAAO,SAASlE,MAC5B,IAAIlK,QAAU6R,aAAa/S,OAAOkB,QAASkK,MAC3C,GAAGlK,QAAQY,OAAS,EAChBhC,QAAQ4D,QAAQxC,QAAS,SAASsB,QAC9B,IAAI+M,MAAQT,cAAcrM,gBACtBD,OAAO+M,OACPE,KACAR,OAAQA,OACR0F,YAAa,GACbvJ,KAAMA,KACNsE,UAAW,GACXH,MAAOA,MACP/M,OAAQA,OACRmN,YAAa3E,cAAcxI,SAE5ByM,OAAO5G,KAAOoM,gBAAgBpM,KAC7BoM,gBAAgBpM,GAAK4G,OAAO5G,GAC5BoH,IAAIkF,YAAc1F,OAAOrQ,MAE1BwM,KAAK/C,KAAOqM,cAAcrM,KACzBqM,cAAcrM,GAAK+C,KAAK/C,GACxBoH,IAAIC,UAAY1P,OAAOkL,YAAYE,OAEvCgE,KAAKtM,KAAK2M,WAEX,CACH,IAAIA,KACAR,OAAQA,OACR0F,YAAa,GACbvJ,KAAMA,KACNsE,UAAW1P,OAAOkL,YAAYE,OAE/B6D,OAAO5G,KAAOoM,gBAAgBpM,KAC7BoM,gBAAgBpM,GAAK4G,OAAO5G,GAC5BoH,IAAIkF,YAAc1F,OAAOrQ,MAE7BwQ,KAAKtM,KAAK2M,UAItBzP,OAAOiU,MAAMJ,QAAQzE,KAAOA,KAkFxBwF,KAMR5U,OAAO6U,cAAgB,WAChBlI,aAAaW,cACZtN,OAAO8U,eACH9U,OAAOsT,kBACPtT,OAAOyT,gBACPzT,OAAO0T,iBACP1T,OAAO2T,mBAGX3T,OAAO8U,kBAKf9U,OAAO+U,cAAgB,WACnB/U,OAAOkN,UACHiH,yBAAyBnU,OAAOgV,aAAaxB,eAIrDxT,OAAO6N,aAAe,WAClB7N,OAAOgV,aAAe,KACtBhV,OAAOkN,UAAY,MAIvBlN,OAAOkL,YAAc,SAASE,MAC1B,OAAO5B,aAAayB,QAAQG,OAIhCpL,OAAOiV,kBAAoB,SAASC,UAChC,OAAOrG,eAAe5D,QAClB4D,eAAepM,gBAAgByS,YAKvClV,OAAOmV,oBAAsB,SAAS9I,KAElC,OADAA,IAAI4C,OAASzF,aAAa/G,gBAAgB4J,IAAIjB,MAAM6D,OAC7C5C,KAGXjM,qBAAqB8D,aAAalE,QAC9BE,eAAgB2O,eAAgBC,cAAetF,aAC/CmD,eAAe3I,KACf,WACIhE,OAAO0O,SAAU,EAEjB1O,OAAO6U,gBAEP7U,OAAOkP,OACH,oCACAlP,OAAOqU,eAAe,GAI1BrU,OAAOkJ,IAAI,eAAgB,WACvBlJ,OAAOmT,mBACPnT,OAAOqU,kBAEXrU,OAAOqU,gHC7SvBvU,QAAQ1B,OAAO,QAAQ2B,WAAW,yBAC9B,SAAU,aAAc,eAAgB,YAAa,YACrD,iBAAkB,kBAAmB,qBAAsB,eAC3D,iBAAkB,eAAgB,cAAe,iBACjD,uBAAwB,kBAAmB,eAC3C,oBAAqB,iBAAkB,SACnCC,OAAQoJ,WAAYC,aAAcC,UAAW8L,UAAWnV,eACxD0E,gBAAiBoK,mBAAoBrK,aAAcE,eACnD+H,aAAc0I,YAAalV,eAAgBC,qBAC3CkV,gBAAiB1I,aAAcvM,kBAAmBkV,gBAGlD,IAAIC,sBACAC,SAAU,WACVC,QAAS,UACTC,OAAU,UA+Fd,SAASC,cACF5V,OAAO6V,MAAQ7V,OAAO6V,KAAKC,OAC1B1M,WAAW5H,MAAQxB,OAAO6V,KAAKC,MAIvC,SAASC,eAaL,IAAI1X,EAVJ,IAAG2B,OAAOgW,OAAOC,UAAWjW,OAAOgW,OAAOE,eAW1C,IARAlW,OAAOgW,OAAOzS,SAASlE,MAAQW,OAAO6V,KAAKC,KAQvCzX,EAAE,EAAEA,EAAE2B,OAAOgW,OAAOvV,OAAO0V,QAAQrU,OAAOzD,IAAK,CAC/C,IAAI0N,OAAS/L,OAAOgW,OAAOvV,OAAO0V,QAAQ9X,GAC1C,GAAG0N,OAAO1D,KAAOrI,OAAO6V,KAAKpV,OAAO4H,GAAI,CACpCrI,OAAOgW,OAAOvV,OAAO2V,SAAWrK,OAChC,QAMZ,SAASsK,+BACLrW,OAAOgN,OAAOsJ,oBACVxW,QAAQU,SAASR,OAAO6V,QAKI,OAA7B7V,OAAOgN,OAAOuJ,aACbvW,OAAOgN,OAAOuJ,WACVvW,OAAOwW,oBAAoBxW,OAAO6V,KAAKY,YAO/C3W,QAAQ4D,QAAQ1D,OAAOgN,OAAOuJ,WAAY,SAASxK,QAC5C/L,OAAO6V,KAAKa,QAAQ1T,QAAQ+I,OAAOnN,OAAS,GACzB,aAAhBmN,OAAOnN,MACToB,OAAOgN,OAAOsJ,iBAAiBxT,KAAKiJ,WAMhD,SAAS4K,cAGL,IAAG3W,OAAOsG,MAAM2P,QAAhB,CAIA,IAAI5X,EAEJ,IADA2B,OAAOsG,MAAMC,KAAO,KAChBlI,EAAI,EAAGA,EAAI2B,OAAOqF,YAAYvD,OAAQzD,IACtC,GAAG2B,OAAO6V,KAAKjO,aAAe5H,OAAOqF,YAAYhH,GAAGO,KAAM,CACtDoB,OAAOsG,MAAMC,KAAOvG,OAAOqF,YAAYhH,GACvC,MAIR2B,OAAOsG,MAAMsQ,eAAiB5W,OAAO6V,KAAKgB,qBAE1C7W,OAAOsG,MAAME,WAAa1G,QAAQyE,KAC9BvE,OAAO6V,KAAKzN,kBACZtI,QAAQU,SAASR,OAAOsG,MAAME,cAC9BxG,OAAOsG,MAAME,eAMdxG,OAAO8W,WAAwC,KAA3B9W,OAAO6V,KAAKjO,YACN,IAA1B5H,OAAO6V,KAAKY,YACXzW,OAAOsG,MAAM2P,SAAU,IAK/B,SAASc,gBAGF/W,OAAOgX,QAAQf,UAIfnW,QAAQU,SAASR,OAAO6V,KAAK1P,QAC5BnG,OAAOgX,QAAQ7Q,KAAKiQ,SAAW1R,aAAajC,gBACxCzC,OAAO6V,KAAK1P,KAAKkC,KAEzBrI,OAAOgX,QAAQ5Q,aAAagQ,SAAWpW,OAAO6V,KAAKzP,aACnDpG,OAAOgX,QAAQ3Q,eAAe+P,SAAWpW,OAAO6V,KAAKxP,eACrDrG,OAAOgX,QAAQC,KAAOnX,QAAQyE,KAAKvE,OAAO6V,KAAKoB,MAK5CjX,OAAO8W,WACN9W,OAAOkX,0BACPlX,OAAOmX,2BACPnX,OAAOgX,QAAQf,SAAU,IAKjC,SAASmB,iBACFpX,OAAOqX,eACNrX,OAAOsX,YACPxX,QAAQ4D,QAAQqL,mBAAmBwI,YAC3BvX,OAAO6V,MAAO,SAAS2B,SAC3BxX,OAAOsX,SAASE,QAAQ5Y,MAAQ4Y,WAO5C,SAASC,gBACLzX,OAAO+J,WACPjK,QAAQ4D,QAAQ1D,OAAO6V,KAAK9L,QAAS,SAAS2N,OAC1C,IAAIjW,QACA7C,KAAM8Y,MAAM5B,MAIbhW,QAAQiR,QAAQ2G,MAAMhX,aACrBgX,MAAMhX,WAAWoB,OAAS,EAC1BhC,QAAQ4D,QAAQgU,MAAMhX,WAAY,SAASiD,IAAKgU,QAC5C,IAAIC,cAAgB9X,QAAQyE,KAAK9C,QACjCmW,cAAc1L,YAAcvI,IAAIuI,YAK7ByL,OAAS,IACRC,cAAchZ,KAAO,IAItBkB,QAAQiR,QAAQpN,IAAIkU,QACnBlU,IAAIkU,MAAM/V,OAAS,EACnBhC,QAAQ4D,QAAQC,IAAIkU,MAAO,SAASC,KAAMC,MACtC,IAAIC,eAAiBlY,QAAQyE,KACzBqT,eACJI,eAAenU,WAAaiU,KAAKjU,WAK9BkU,KAAO,IACNC,eAAe9L,YAAc,IAGjClM,OAAO+J,QAAQjH,KAAKkV,kBAGxBhY,OAAO+J,QAAQjH,KAAK8U,iBAI5B5X,OAAO+J,QAAQjH,KAAKrB,UA+ChC,SAASwW,WAAWpC,MAChB7V,OAAO6V,KAAOA,KACd7V,OAAO4J,QAAS,EAEhBgM,cACAmB,gBACAK,iBA7CApX,OAAOkP,OAAO,YAAa,WACvB0G,cACAG,iBAIJ/V,OAAOkP,OAAO,eAAgBuI,eAG9BzX,OAAOkP,OAAO,eAAgBmH,8BAI9BrW,OAAOkP,OAAO,oBAAqB6H,eACnC/W,OAAOkY,iBACHlY,OAAOgX,QAAQ5Q,aAAa+P,QAASY,eAGzC/W,OAAOkP,OAAO,sBAAuB6H,eACrC/W,OAAOkY,iBACHlY,OAAOgX,QAAQ3Q,eAAe8P,QAASY,eAI3C/W,OAAOkP,OAAO,eAAgB6H,eAC9B/W,OAAOkY,iBACHlY,OAAOgX,QAAQ7Q,KAAKgQ,QAASY,eAIjC/W,OAAOkP,OAAO,kBAAmByH,aACjC3W,OAAOkP,OAAO,wBAAyByH,aACvC3W,OAAOkY,iBAAiB,cAAevB,aAGvC3W,OAAOkP,OAAO,mBAAoBkI,gBAe/BtX,QAAQU,SAASR,OAAOmY,oBACvBnY,OAAOmY,kBAAkBF,aAE1BnY,QAAQU,SAASR,OAAOoY,uBACvBpY,OAAOoY,qBAAqBH,aAnUpC7O,WAAW5H,MAAQ,aACnB4H,WAAWO,KAAO,QAGlB3J,OAAO4J,QAAS,EAChB5J,OAAO6V,KAAO,KACd7V,OAAOgN,QACLjB,OAAQ,KACRwK,WAAY,KACZD,oBACAhV,MAAO,KACP+W,sBAAsB,GAExBrY,OAAOqF,YAAcT,eAAeM,QAAQ,eAC5ClF,OAAOsY,OAAS1T,eAAeM,QAAQ,UACvClF,OAAOuY,SACHC,KAAM1Y,QAAQyM,SACVlD,aAAamP,MAAQnP,aAAamP,KAAO,WAEjDxY,OAAOyY,aACHC,QAAS,KACTC,QAAS,KACTC,WAAY,MAEhB5Y,OAAO6Y,mBACHC,WAAW,EACXC,gBAAgB,EAChBC,aAAa,EACbC,gBAAgB,EAChBC,cAAc,GAElBlZ,OAAOmZ,0BACPnZ,OAAOoZ,iBACPpZ,OAAOqZ,kBACPrZ,OAAOsZ,eAAgB,EACvBtZ,OAAO+J,WACP/J,OAAOuZ,QAAUhE,eAAepU,WAGhCnB,OAAOgW,QACHC,SAAS,EACTC,gBAAgB,EAChB3S,UACIlE,MAAO,IAEXoB,QACI2V,SAAU,KACVD,QAAShW,eAAegB,aAKhCnB,OAAOgX,SACHf,SAAS,EACT7P,cACIgQ,SAAU,KACVD,QAASvR,eAAeM,QAAQ,kBAEpCmB,gBACI+P,SAAU,KACVD,QAASvR,eAAeM,QAAQ,oBAEpCiB,MACIiQ,SAAU,KACVD,QAASzR,aAAavD,YAE1B8V,SAIJjX,OAAOsX,YAGPtX,OAAOsG,OACH2P,SAAS,EACT1P,KAAM,KACNqQ,eAAgB,EAChBpQ,eAIJxG,OAAOwZ,sBAAwB,SAAS5Y,cACpC,OAAO4U,qBAAqB5U,eAIhCZ,OAAOyZ,QACHC,MAAO,IAgPX1Z,OAAOwW,oBAAsB,SAASC,WAClC,GAAwB,iBAAdA,WACFA,UAAY,GAAKA,UAAY,EACjC,SASJ,OAAO7R,eAAeM,SANlByU,EAAG,kBACHC,EAAG,iBACHC,EAAG,0BACHC,EAAG,4BACHC,EAAG,sCAE6CtD,aAIxDzW,OAAOga,WAAa,SAASnE,KAAMoE,YAI/B,OAHGna,QAAQgI,YAAYmS,cACnBA,YAAa,GAEVja,OAAOka,aAAaxP,WAAWmL,MAAM7R,KAAK,SAAS6R,MACtDE,eACAgB,gBACGkD,YACCja,OAAOma,mBAEZ,SAAS7Y,OACR8Y,QAAQC,IAAI/Y,OACZyU,eACAgB,mBAKR/W,OAAOsa,iBAAmB,SAASC,OAC/B,OAAOlF,YAAYmF,aAAaD,QAGpCva,OAAOya,mBAAqB,WAIxB,OAAI3a,QAAQU,SAASR,OAAO6V,MAIzB7V,OAAOsZ,cACC,WAEAtZ,OAAO6V,KAAK6E,YANZ,IAWf1a,OAAO2a,kBAAoB,WAIvB,OAAI7a,QAAQU,SAASR,OAAO6V,MAIzB7V,OAAOsZ,cACC,iBAC2B,YAA5BtZ,OAAO6V,KAAK6E,YACX,GAEA,SAAW1a,OAAO6V,KAAK6E,YARvB,IAcf1a,OAAO4a,mBAAqB,WAIxB,QAAI9a,QAAQU,SAASR,OAAO6V,QAII,YAA5B7V,OAAO6V,KAAK6E,cACX1a,OAAOsZ,gBAIhBtZ,OAAOma,gBAAkB,WACrBna,OAAOsZ,eAAgB,EACvBtZ,OAAOka,aAAaC,gBAAgBna,OAAO6V,MAAM7R,KAAK,WAClDhE,OAAOsZ,eAAgB,KAI/BtZ,OAAO6a,WAAa,WAIhB,QAAI/a,QAAQU,SAASR,OAAO6V,OAID,WAAxB7V,OAAO6V,KAAK6C,SAMnB1Y,OAAO8a,eAAiB,WAIpB,QAAIhb,QAAQU,SAASR,OAAO6V,OAID,gBAAxB7V,OAAO6V,KAAK6C,SAMnB1Y,OAAO+a,WAAa,WAIhB,QAAIjb,QAAQU,SAASR,OAAO6V,OAID,WAAxB7V,OAAO6V,KAAK6C,SAOnB1Y,OAAOgb,cAAgB,WACnB,OAA+B,OAAxBhb,OAAOgN,OAAO1L,OAIzBtB,OAAOib,cAAgB,WAEnB,GAAGjb,OAAOgb,gBACN,OAAO,EAGX,IAAIE,eACApb,QAAQgI,YAAY9H,OAAOsY,OAAO6C,WACA,IAAlCnb,OAAOsY,OAAO6C,SAASrZ,OAC3B,SAAGhC,QAAQU,SAASR,OAAOgN,OAAOjB,SACA,WAA9B/L,OAAOgN,OAAOjB,OAAOnN,OACrBsc,iBAORlb,OAAOob,cAAgB,WAEnB,OAAGpb,OAAOgb,oBAGPlb,QAAQU,SAASR,OAAOgN,OAAOjB,SACA,WAA9B/L,OAAOgN,OAAOjB,OAAOnN,MACa,IAAlC+N,aAAa0O,mBAOrBrb,OAAOgN,OAAOsO,cAAgB,WAE1Btb,OAAOgN,OAAO1L,MAAQ,KACtBtB,OAAOgN,OAAOqL,sBAAuB,GAIzCrY,OAAOub,aAAe,WAClBvb,OAAOgN,OAAOjB,OAAS,KACvB/L,OAAOgN,OAAO1L,MAAQ,KACtBtB,OAAOgN,OAAOqL,sBAAuB,GAIzCrY,OAAOwb,SAAW,WACd,IACInd,EADAod,SAGJ,GAAiC,WAA9Bzb,OAAOgN,OAAOjB,OAAOnN,MACpBkB,QAAQyM,SAASvM,OAAOyY,YAAYC,UACpC5Y,QAAQyM,SAASvM,OAAOyY,YAAYE,SAAU,CAK9C8C,MAAM/C,QAAU1Y,OAAOyY,YAAYC,QACnC,IAAIC,QAAU3Y,OAAOyY,YAAYE,QAEjCA,SADAA,QAAUA,QAAQjN,MAAM,MACNiN,QAAQ7W,OAAO,GACjC2Z,MAAMC,cAAgB/C,QAEnB7Y,QAAQyM,SAASvM,OAAOyY,YAAYG,cACnC5Y,OAAOyY,YAAYG,WAAW5V,QAAQ,SAAW,GACjDhD,OAAOyY,YAAYG,WAAW5V,QAAQ,QAAU,KAChDyY,MAAM7C,WAAa5Y,OAAOyY,YAAYG,iBAEvC,GAAiC,eAA9B5Y,OAAOgN,OAAOjB,OAAOnN,KAAuB,CAMlD,IALA6c,MAAME,WAAa3b,OAAO6Y,kBAAkBC,UAC5C2C,MAAMG,gBACF5b,OAAO6Y,kBAAkBE,eAC7B0C,MAAMI,aAAe7b,OAAO6Y,kBAAkBG,YAC9CyC,MAAMK,yBACFzd,EAAE,EAAEA,EAAE2B,OAAOmZ,uBAAuBrX,OAAOzD,IAC3Cod,MAAMK,sBAAsBhZ,KACxB9C,OAAOmZ,uBAAuB9a,GAAGgK,IAczC,IAZGrI,OAAO6Y,kBAAkBI,gBACxBwC,MAAMK,sBAAsBhZ,KAAK,mBAElC9C,OAAO6Y,kBAAkBK,cACxBuC,MAAMK,sBAAsBhZ,KAAK,iBAEK,IAAvC2Y,MAAMK,sBAAsBha,QAG3B2Z,MAAMK,sBAAsBhZ,KAAK,QAErC2Y,MAAMM,mBACF1d,EAAE,EAAEA,EAAE2B,OAAOoZ,cAActX,OAAOzD,IAClCod,MAAMM,gBAAgBjZ,KAAK9C,OAAOoZ,cAAc/a,GAAGgK,IAEnB,IAAjCoT,MAAMM,gBAAgBja,QAErB2Z,MAAMM,gBAAgBjZ,KAAK,aAE5B,GAAiC,SAA9B9C,OAAOgN,OAAOjB,OAAOnN,KAAiB,CAC5C,GAA+B,IAA5BoB,OAAO6V,KAAKmG,cACNhc,OAAOgN,OAAOqL,qBAEnB,YADArY,OAAOgN,OAAOqL,sBAAuB,GAMzC,IAFAoD,MAAME,WAAa3b,OAAO6Y,kBAAkBC,UAC5C2C,MAAMM,mBACF1d,EAAE,EAAEA,EAAE2B,OAAOoZ,cAActX,OAAOzD,IAClCod,MAAMM,gBAAgBjZ,KAAK9C,OAAOoZ,cAAc/a,GAAGgK,IAEnB,IAAjCoT,MAAMM,gBAAgBja,QAErB2Z,MAAMM,gBAAgBjZ,KAAK,YAEK,YAA9B9C,OAAOgN,OAAOjB,OAAOnN,OAE3B6c,MAAMQ,MAAQjc,OAAOqZ,eAAe4C,MACpCR,MAAMS,aAAelc,OAAOqZ,eAAe8C,YAC3CV,MAAMW,YAAcpc,OAAOqZ,eAAegD,YAG9Crc,OAAOka,aAAaoC,cAChBtc,OAAO6V,KAAM7V,OAAOgN,OAAOjB,OAAOnN,KAAM6c,OAAOzX,KAAK,WAEf,WAA9BhE,OAAOgN,OAAOjB,OAAOnN,MACpB0K,UAAUkD,KAAK,UAEnBxM,OAAOgN,OAAOjB,OAAS,KACvB/L,OAAOgN,OAAO1L,MAAQ,KACtBtB,OAAOgN,OAAOqL,sBAAuB,EACrCrY,OAAOyY,YAAY8D,SACnBvc,OAAO6Y,kBAAkBC,WAAY,EACrC9Y,OAAO6Y,kBAAkBE,gBAAiB,EAC1C/Y,OAAO6Y,kBAAkBG,aAAc,EACvChZ,OAAO6Y,kBAAkBI,gBAAiB,EAC1CjZ,OAAO6Y,kBAAkBK,cAAe,EACxClZ,OAAOmZ,0BACPnZ,OAAOoZ,kBACR,SAAS9X,OACRtB,OAAOgN,OAAO1L,MAAQA,SAKlCtB,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAIxBtN,OAAOkX,uBAAyB,WAC5B,OAAOlX,OAAOgX,QAAQ5Q,aAAa+P,QAAQrU,OAAS,GAIxD9B,OAAOwc,2BAA6B,WAChC,OAAGxc,OAAOkX,yBACC,yBAEA,iCAKflX,OAAOmX,uBAAyB,WAC5B,QAAGrX,QAAQU,SAASR,OAAO6V,SAElB7V,OAAOyc,WACyB,KAA7Bzc,OAAO6V,KAAKzP,eAEuB,IADnCpG,OAAOgX,QAAQ5Q,aAAa+P,QAAQnT,QAChChD,OAAO6V,KAAKzP,iBAOhCpG,OAAO0c,oBAAsB,WACzB,QACK1c,OAAOyc,UAAazc,OAAOqX,cACiB,KAAzCrX,OAAOgX,QAAQ5Q,aAAagQ,WAEmB,IAD/CpW,OAAOgX,QAAQ5Q,aAAa+P,QAAQnT,QAChChD,OAAOgX,QAAQ5Q,aAAagQ,YAK5CpW,OAAO2c,0BAA4B,WAE/B,OAAO3c,OAAOqF,YAAYvD,OAAS,GAIvC9B,OAAO4c,SAAW,WACd,OAAoB,OAAhB5c,OAAO6V,MAIJ7V,OAAO6V,KAAKgH,QAIvB7c,OAAO8W,QAAU,WACb,OACI9W,OAAO2c,6BACH3c,OAAOsN,gBACLtN,OAAO4c,YAIrB5c,OAAO8c,iBAAmB,WACnB9c,OAAO8W,WAMP9W,OAAOgW,OAAOE,iBAGjBlW,OAAOgW,OAAOC,SAAU,EACxBjW,OAAOgW,OAAOE,gBAAiB,EAI/BlW,OAAOgW,OAAOzS,SAASlE,MAAQW,OAAO6V,KAAKtS,WAI/CvD,OAAO+c,WAAa,WACZ/c,OAAO8W,YAMR9W,OAAOgW,OAAOC,UAGjBjW,OAAOgW,OAAOC,SAAU,EACxBjW,OAAOgW,OAAOE,gBAAiB,EAI/BlW,OAAOgW,OAAOzS,SAASlE,MAAQW,OAAO6V,KAAKtS,YAI/CvD,OAAOgd,kBAAoB,WAEvB,IAAIhd,OAAOgW,OAAOC,UAAYjW,OAAOgW,OAAOE,eACxC,OAAO,EAIX,IAAI7W,MAAQW,OAAOgW,OAAOzS,SAASlE,MACnC,OAAoB,IAAjBA,MAAMyC,SAGDzB,kBAAkB0B,iBAAiB1C,QAI/CW,OAAOid,iBAAmB,WACtBjd,OAAOgW,OAAOC,SAAU,EACxBjW,OAAOgW,OAAOE,gBAAiB,EAC/BH,gBAIJ/V,OAAOkd,eAAiB,WAEpB,IAAGld,OAAOgd,oBAAV,CAGAhd,OAAOgW,OAAOC,SAAU,EACxBjW,OAAOgW,OAAOE,gBAAiB,EAG/B,IAAIL,KAAO/V,QAAQyE,KAAKvE,OAAO6V,MAC/BA,KAAKtS,SAAWvD,OAAOgW,OAAOzS,SAASlE,MACvCwW,KAAKpV,OAAST,OAAOgW,OAAOvV,OAAO2V,SAGnCpW,OAAOga,WAAWnE,QAItB7V,OAAO+M,YAAc,WACb/M,OAAO8W,YAGX9W,OAAOgX,QAAQf,SAAU,IAI7BjW,OAAOmd,kBAAoB,WAEpBnd,OAAOyc,UAAYzc,OAAOqX,aACzBrX,OAAOgX,QAAQf,SAAU,EAClBjW,OAAOmX,2BACdnX,OAAOgX,QAAQf,SAAU,GAG7Bc,iBAIJ/W,OAAOod,gBAAkB,WAErB,IAAGpd,OAAO0c,sBAAV,CAIA1c,OAAOgX,QAAQf,SAAU,EAGzB,IAAIJ,KAAO/V,QAAQyE,KAAKvE,OAAO6V,MAC/BA,KAAK1P,KAAOrG,QAAQyE,KAAKvE,OAAOgX,QAAQ7Q,KAAKiQ,UAC7CP,KAAKzP,aAAepG,OAAOgX,QAAQ5Q,aAAagQ,SACF,OAA3CpW,OAAOgX,QAAQ3Q,eAAe+P,SAC7BP,KAAKxP,eAAiB,GAEtBwP,KAAKxP,eAAiBrG,OAAOgX,QAAQ3Q,eAAe+P,SAExDP,KAAKoB,QACLnX,QAAQ4D,QAAQ1D,OAAOgX,QAAQC,KAAM,SAASoG,KAC1CxH,KAAKoB,KAAKnU,KAAKua,IAAI5W,QAIvBzG,OAAOga,WAAWnE,QAItB7V,OAAOsd,iBAAmB,WACtB,OAAQxd,QAAQU,SAASR,OAAOsG,MAAMC,OAI1CvG,OAAOud,UAAY,WACXvd,OAAO8W,YAGX9W,OAAOsG,MAAM2P,SAAU,IAI3BjW,OAAOwd,gBAAkB,WAGS,IAA1Bxd,OAAO6V,KAAKY,WAA8C,KAA3BzW,OAAO6V,KAAKjO,aAC3C5H,OAAOsG,MAAM2P,SAAU,GAE3BU,eAIJ3W,OAAOyd,cAAgB,WAEnB,IAAGzd,OAAOsd,mBAAV,CAGAtd,OAAOsG,MAAM2P,SAAU,EAGvB,IAAIJ,KAAO/V,QAAQyE,KAAKvE,OAAO6V,MAC/BA,KAAKjO,WAAa5H,OAAOsG,MAAMC,KAAK3H,KACpCiX,KAAKzN,iBAAmBtI,QAAQyE,KAAKvE,OAAOsG,MAAME,YAGlDxG,OAAOga,WAAWnE,MAAM,KAI5B7V,OAAO0d,oBAAsB,WACzB,QAAI5d,QAAQU,SAASR,OAAO6V,UAGxB/V,QAAQiR,QAAQ/Q,OAAO6V,KAAK4D,UAI5BzZ,OAAO6V,KAAK4D,OAAO3X,OAAS,GAC5B9B,OAAO6V,KAAK4D,OAAO3X,OAAS9B,OAAOyZ,OAAOC,OAC1C1Z,OAAOyZ,OAAOC,MAAQ,MAI9B1Z,OAAO2d,eAAiB,WACpB3d,OAAOyZ,OAAOC,OAAS,IAI3B1Z,OAAO4d,aAAe,SAASC,OAC3B,IAAIpX,KAAOoX,MAAMtX,KAAKM,YAKtB,OAJG/G,QAAQyM,SAASsR,MAAMhX,cACtBgX,MAAMhX,YAAY/E,OAAS,IAC3B2E,MAAQ,MAAQoX,MAAMhX,aAEnBJ,MAGXzG,OAAO8d,mBAAqB,WAMxB,IAAIzf,EALJ,GAAIyB,QAAQU,SAASR,OAAO6V,OACvB/V,QAAQiR,QAAQ/Q,OAAO6V,KAAK4D,QAKjC,IAAIpb,EAAI,EAAGA,EAAI2B,OAAO6V,KAAK4D,OAAO3X,OAAQzD,IAAK,CAC3C,IAAIwf,MAAQ7d,OAAO6V,KAAK4D,OAAOpb,GAC/B,GAAwB,YAArBwf,MAAMtX,KAAKwX,OACgB,+BAA3BF,MAAMtX,KAAKM,YAEV,OAAOgX,MACJ,GAAwB,SAArBA,MAAMtX,KAAKwX,OACgB,uBAA3BF,MAAMtX,KAAKM,YAEjB,SAOZ7G,OAAOge,mBAAqB,WACxB,IAAIH,MAAQ7d,OAAO8d,qBACnB,OAAOhe,QAAQU,SAASqd,QAG5B7d,OAAOie,uBAAyB,WAC5B,IAAIJ,MAAQ7d,OAAO8d,qBACnB,OAAGhe,QAAQU,SAASqd,OAETA,MAAMhX,YAEN,IAKf7G,OAAOke,oBAAsB,SAASC,YAClC,IAAIne,OAAOoe,gBACP,OAAO,EAUX,SAAGD,aANC,aACA,SACA,KACA,MACA,WAEiCnb,QAAQmb,aAAe,IAOhEne,OAAOoe,cAAgB,WACnB,QAAGte,QAAQU,SAASR,OAAOsG,MAAMC,OACtBvG,OAAOsG,MAAMC,KAAK8X,iBAAiBvc,OAAS,GAO3D9B,OAAOse,eAAiB,WACpB,IAAIjgB,EACAkgB,OAAS,GACb,GAAGze,QAAQU,SAASR,OAAOsG,MAAMC,MAAO,CACpC,IAAIiY,SAAWxe,OAAOsG,MAAMC,KAAK8X,iBAEjC,IADAG,SAASC,OACLpgB,EAAI,EAAGA,EAAImgB,SAAS1c,OAAQzD,IAC5BkgB,QAAUC,SAASngB,GAChBA,EAAE,EAAImgB,SAAS1c,OACdyc,QAAU,KAENlgB,EAAE,EAAImgB,SAAS1c,SACnByc,QAAU,SAGlBA,QAAUC,SAAS1c,OAAS,EAAI,YAAc,WAElD,OAAOyc,QAIXve,OAAO0e,gBAAkB,SAASlH,SAC9B,OAAI1X,QAAQU,SAASgX,SAGK,YAAnBA,QAAQmH,OACA,UACkB,SAAnBnH,QAAQmH,OACP,QACkB,aAAnBnH,QAAQmH,OACP,UAEA,OATJ,QAcf3e,OAAO4e,8BAAgC,WACnC,IAAIvgB,EACJ,IAAIA,EAAE,EAAEA,EAAE2B,OAAOuZ,QAAQzX,OAAOzD,IAC5B,GAAqC,IAAlC2B,OAAOuZ,QAAQlb,GAAGwgB,YACjB,OAAO,EAGf,OAAO,GAIX7e,OAAO8e,iBAAmB,SAASlgB,KAAMmgB,OACrC/e,OAAOpB,MAAQmgB,MACZjf,QAAQU,SAASue,MAAMlJ,OACxBkJ,MAAM9G,cAMZjY,OAAOgf,sBAAwB,WAG3B,GAA6B,IAA1Bhf,OAAO6V,KAAKY,YAAoBzW,OAAO6V,KAAKmG,YAC3C,OAAO,EAEX,OAAOhc,OAAO6V,KAAKmG,aAEf,KAAK,EAEL,KAAK,EAEL,KAAK,EAEL,KAAK,GAEL,KAAK,GACD,OAAO,EAEf,OAAOhc,OAAO6V,KAAKoJ,gBAEf,KAAM,EAEN,KAAK,EACD,OAAO,EAEf,OAAO,GAKXjf,OAAOkf,cAAgB,WACnB,IAAIxZ,MAAQ1F,OAAO6V,KAAKsJ,UAAY,SACpC,OAAInf,OAAO6V,KAAKuJ,WAAuC,IAA1Bpf,OAAO6V,KAAKuJ,UAEhCpf,OAAO6V,KAAKuJ,UAAY,IACtB1Z,MAAQ,MAAQ1F,OAAO6V,KAAKuJ,UAAY,OAExC1Z,MAAQ,MAAS1F,OAAO6V,KAAKuJ,UAAY,IAAQ,OAJjD1Z,OASftF,qBAAqB8D,aAAalE,QAC9B2E,gBACA1E,eACA8O,mBACArK,aACAE,eACA+H,aACA0I,YACAlV,eACAmV,gBACAC,iBACDvR,KAAK,WACD,eAAiBqF,aAAa9C,MAC7BvG,OAAOka,aAAenL,mBACtB/O,OAAOqX,cAAe,EACtBrX,OAAOyc,UAAW,EAClBzc,OAAOqf,UAAY,aACnBrf,OAAOsf,gBAAkB,cACpB,WAAajW,aAAa9C,MAC/BvG,OAAOka,aAAeja,eACtBD,OAAOqX,cAAe,EACtBrX,OAAOyc,UAAW,EAClBzc,OAAOqf,UAAY,SACnBrf,OAAOsf,gBAAkB,WAEzBtf,OAAOka,aAAevV,gBACtB3E,OAAOqX,cAAe,EACtBrX,OAAOyc,UAAW,EAClBzc,OAAOqf,UAAY,UACnBrf,OAAOsf,gBAAkB,WAM7B,IAAIC,WAAavf,OAAOka,aAAajM,gBAClCnO,QAAQU,SAAS+e,aAChBA,WAAWxP,YAAc1G,aAAa0G,UACtCkI,WAAWsH,aAEXvf,OAAOka,aAAa3L,cAChBlF,aAAa0G,WAAW/L,KAAK,SAAS6R,MAClCoC,WAAWpC,OACZ,SAASvU,OACRsL,aAAa0B,WAAWhN,SAEhCie,WAAavf,OAAOka,aAAajM,iBAElCjO,OAAOyc,WACNzc,OAAO4D,cAAgB2b,WAAW3b,eAOtCgB,eAAeoC,aAAahH,OAAQ,iBACpC4E,eAAeoC,aAAahH,OAAQ,eACpC4E,eAAeoC,aAAahH,OAAQ,YAKxCA,OAAOkJ,IAAI,WAAY,WACnBtE,eAAeqC,YAAYjH,OAAQ,iBACnC4E,eAAeqC,YAAYjH,OAAQ,eACnC4E,eAAeqC,YAAYjH,OAAQ,qHC/lC/CF,QAAQ1B,OAAO,QAAQ0N,OAAO,6BAA8B,WACxD,OAAO,SAASwD,MAAO3L,IAAK6b,oBACxB,IAAIC,YACJ,IAAI3f,QAAQU,SAASmD,OAChB7D,QAAQU,SAASgf,oBAClB,OAAOC,SAEX,IAAIC,aAeJ,OAdA5f,QAAQ4D,QAAQ8b,mBAAoB,SAASG,OACvB,SAAfA,MAAMpZ,OACQoZ,MAAMC,QAAQ,KACbjc,IAAI0E,IACdqX,UAAU5c,KAAK6c,MAAME,YAIjC/f,QAAQ4D,QAAQ4L,MAAO,SAASlE,OAEhB,IADFsU,UAAU1c,QAAQoI,KAAK/C,KAE7BoX,SAAS3c,KAAKsI,QAGfqU,YAQf3f,QAAQ1B,OAAO,QAAQ0N,OAAO,yBAA0B,WACpD,OAAO,SAASpL,WAAYof,eAAgBrO,MACxC,GAAGA,OAAS3R,QAAQU,SAASsf,kBACxBhgB,QAAQiR,QAAQ+O,eAAeF,SAChC,OAAOlf,WAEX,IAAI+e,YAcJ,OAbA3f,QAAQ4D,QAAQhD,WAAY,SAASiD,KACjC,IAAItF,EAAGsN,OAAQoU,OAAQ,EACvB,IAAI1hB,EAAI,EAAGA,EAAIyhB,eAAeF,QAAQ9d,OAAQzD,IAE1C,IADAsN,OAASmU,eAAeF,QAAQvhB,IACtBgK,KAAO1E,IAAI0E,IAAMsD,OAAOqU,UAAYrc,IAAIqc,QAAS,CACvDD,OAAQ,EACR,MAGJA,OACAN,SAAS3c,KAAKa,OAGf8b,YAOf3f,QAAQ1B,OAAO,QAAQ0N,OAAO,0BAA2B,WACrD,OAAO,SAASwD,MAAO2Q,eACnB,IAAIngB,QAAQyM,SAAS0T,eACjB,OAAO3Q,MAEX,IAAImQ,YAQJ,OAPA3f,QAAQ4D,QAAQ4L,MAAO,SAASlE,MACP,SAAlB6U,cACCR,SAAS3c,KAAKsI,MACK,IAAbA,KAAK8U,KACXT,SAAS3c,KAAKsI,QAGfqU,YAOf3f,QAAQ1B,OAAO,QAAQ0N,OAAO,kBAAmB,WAC7C,OAAO,SAASqU,MAAOxc,KACnB,IAAI7D,QAAQU,SAASmD,KACjB,OAAOwc,MAEX,IAAIV,YAWJ,GANI3f,QAAQsgB,WAAWzc,IAAI0c,YACvB1c,IAAI0c,SAAW,SAASzhB,MACpB,OAAO0hB,KAAK1hB,QAIhBkB,QAAQU,SAASmD,IAAI0c,SAAS,WAQ3B,CAGH,IAAIxI,MAAQlU,IAAI0c,SAAS,SACrBE,QAAU5c,IAAI0c,SAAS,QACvBG,YACC1gB,QAAQU,SAASqX,QAAUA,MAAM/V,OAAS,GAC9B,UAAZye,QACLzgB,QAAQ4D,QAAQyc,MAAO,SAASpZ,MACzByZ,aAA6B,YAAdzZ,KAAKA,MAIR,UAAZwZ,SAAqC,SAAdxZ,KAAKA,MAG/B0Y,SAAS3c,KAAKiE,aArBlBjH,QAAQ4D,QAAQyc,MAAO,SAASpZ,MACX,YAAdA,KAAKA,MACJ0Y,SAAS3c,KAAKiE,QAsB1B,OAAO0Y,YAKf3f,QAAQ1B,OAAO,QAAQ2B,WAAW,4BAC9B,SAAU,UAAW,iBAAkB,eAAgB,iBACvD,kBAAmB,qBAAsB,iBACzC,iBAAkB,eAClB,uBAAwB,oBAAqB,cAC7C,SACIC,OAAQwO,QAASK,eAAgBrF,aAActJ,eAC/CyE,gBAAiBoK,mBAAoB9O,eACrC2E,eAAgB+H,aAChBvM,qBAAsBC,kBAAmBogB,aAGzC,IAAIC,gBACAC,SAAU,WACVC,KAAM,OACNC,OAAQ,SACRC,KAAM,OACNC,MAAO,SAEPC,sBACAC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACV/V,KAAQ,OACRgW,MAAS,SAITC,WACAC,KAAM,OACNC,OAAQ,SACRC,KAAM,OACNC,QAAS,WAETC,iBACAC,KAAQ,cACRhM,OAAU,gBACViM,KAAQ,OACRC,QAAW,gBAIXC,gBACAC,KAAM,KACNC,OAAQ,SACRC,MAAO,QACPC,OAAQ,SACRC,IAAK,MACLC,YAAa,cACbC,cAAe,gBACfC,gBAAiB,kBACjBC,KAAM,QAGNC,sBACS,UADTA,uBAEU,WAFVA,qBAGQ,SA2DZ,SAASC,eACLziB,OAAO4J,OAAS5J,OAAO0iB,eAAiB1iB,OAAO2iB,mBAC5C3iB,OAAO4J,QACNgZ,mBAOR,SAASA,mBACL5iB,OAAOwf,sBACP1f,QAAQ4D,QAAQ1D,OAAO6V,KAAKnV,WAAY,SAASiD,KAC7C3D,OAAOwf,mBAAmB7b,IAAI0E,IAAM1E,MAGxC,IAAIjD,cAGAmiB,aAEAC,cA2IJ,GAzIAhjB,QAAQ4D,QAAQ1D,OAAO6V,KAAKnV,WAAY,SAASiD,KAK7C,GAA2B,IAAxBA,IAAIof,SAASjhB,OAAc,CAC1B,IAAI4V,MAAQ1X,OAAOwf,mBAAmB7b,IAAIof,SAAS,IACnD,GAAGrL,MAAMnR,OAASma,eAAeE,MAC9BlJ,MAAMnR,OAASma,eAAeG,OAW7B,YALG/gB,QAAQU,SAASR,OAAOgjB,gBACvBhjB,OAAOgjB,cAAc3a,KAAO1E,IAAI0E,KAChCrI,OAAOgjB,cAAgB,KACvBhjB,OAAOijB,aAAenB,eAAeC,OAsQzD,IAAoB9K,KACZiM,UA9OA,GAjBGvf,IAAI4C,OAASma,eAAeE,MAC5Bjd,IAAI4C,OAASma,eAAeG,SAC3Bld,IAAIwf,WACJrjB,QAAQ4D,QAAQC,IAAIic,QAAS,SAASjU,QAClChI,IAAIwf,QAAQrgB,KACRhD,QAAQyE,KAAKvE,OAAOwf,mBAAmB7T,aAKhD7L,QAAQiR,QAAQpN,IAAIsT,OACnBtT,IAAIsT,KAAKnV,OAAS,IACjBhC,QAAQyM,SAAS5I,IAAIsT,KAAK,GAAGxQ,QAC9B9C,IAAIsT,MAiPIA,KAjPctT,IAAIsT,KAkP9BiM,aACJpjB,QAAQ4D,QAAQuT,KAAM,SAASoG,KAC3B6F,UAAUpgB,MAAO2D,KAAM4W,QAEpB6F,YAnPHvf,IAAIyH,KAAO5B,aAAa/G,gBAAgBkB,IAAIkc,SACzC/f,QAAQU,SAASmD,IAAIyH,QACpBzH,IAAIsL,OAASJ,eAAepM,gBACpBkB,IAAIyH,KAAK6D,QAGbjP,OAAOgB,QAAQqW,cAAc,CAE7B,IAAKtY,OAAOW,UAAUC,eAAenB,KAC7BskB,WAAYnf,IAAIyH,KAAK/C,IAAM,CAC/Bya,WAAWnf,IAAIyH,KAAK/C,KAAM,EAC1B,IAAI+a,YACAnU,OAAUtL,IAAIsL,OACd7D,KAAQzH,IAAIyH,KACZlK,QAAWsN,QAAQ,SAARA,CACPxO,OAAOkB,SAAUkK,KAAKzH,IAAIyH,KAAK/C,KAAK,GACxCgb,aAAgB,KAChBC,eAAkB,KAClBC,SAAY5f,IAAIsL,OAAOrQ,KAAO,IAC1BoB,OAAOwjB,YAAY7f,IAAIyH,OAE5BzH,IAAIyH,KAAKiY,eACRD,WAAWC,aACPtU,mBAAmBtM,gBACfkB,IAAIyH,KAAKiY,eAElB1f,IAAIyH,KAAKkY,iBACRF,WAAWE,eACPvU,mBAAmBtM,gBACfkB,IAAIyH,KAAKkY,iBAErBT,UAAU/f,KAAKsgB,YAGnBP,UAAUpE,KAAK,SAASgF,EAAGC,GACvB,OAAOD,EAAEF,SAASI,cAAcD,EAAEH,YAO9C,GAAwB,IAArB5f,IAAIkU,MAAM/V,OAIT6B,IAAIqc,SAAW,EACfrc,IAAInB,OAAS,KACbmB,IAAIoD,KAAOsa,UAAUI,QACrB9d,IAAIE,WAAa,GACjBnD,WAAWoC,KAAKa,SACb,CACH,IAAI2D,IAAM,EACVxH,QAAQ4D,QAAQC,IAAIkU,MAAO,SAASC,MAChC,IAAI8L,SAAW9jB,QAAQyE,KAAKZ,KAC5BigB,SAAS5D,QAAUlI,KAAKzP,GACxBub,SAASphB,OAAStC,eAAeuC,gBAC7BqV,KAAK+L,WACTD,SAAS7c,KAAO+Q,KAAK/Q,KACrB6c,SAAS/f,WAAaiU,KAAKjU,WACxB/D,QAAQgI,YAAY8b,SAAS/f,cAC5B+f,SAAS/f,WAAa,IAI1B+f,SAASxY,KAAOzH,IAAIyH,KACpBwY,SAAS3U,OAAStL,IAAIsL,OACnB3H,IAAM,IAGLsc,SAASrd,KAAOma,eAAeK,MAC/B6C,SAAShlB,MAAQ,IAAM0I,KAE3BA,MACA5G,WAAWoC,KAAK8gB,eAM5B5jB,OAAOU,WAAaA,WACpBV,OAAO6iB,UAAYA,UAGnB7iB,OAAO8jB,qBACPhkB,QAAQ4D,QAAQ1D,OAAOU,WAAY,SAASiD,KACxC,IAAIogB,SAAW/jB,OAAO8jB,kBAAkBngB,IAAI0E,IACzCvI,QAAQgI,YAAYic,YACnBA,YACA/jB,OAAO8jB,kBAAkBngB,IAAI0E,IAAM0b,UAEvCA,SAASpgB,IAAIqc,SAAWrc,MAKzB7D,QAAQU,SAASR,OAAOgjB,eAAgB,CACvC,IAAInL,MAAQ7X,OAAO8jB,kBAAkB9jB,OAAOgjB,cAAc3a,IAC1D,GAAGvI,QAAQgI,YAAY+P,OACnB7X,OAAOgjB,cAAgB,KACvBhjB,OAAOijB,aAAenB,eAAeC,SAClC,CACH,IAAIjK,KAAOD,MAAM7X,OAAOgjB,cAAchD,SACnClgB,QAAQgI,YAAYgQ,QACnB9X,OAAOgjB,cAAgB,KACvBhjB,OAAOijB,aAAenB,eAAeC,QAqCrD,WACI,GAAGjiB,QAAQU,SAASR,OAAOgkB,aAAarY,QAAS,CAC7C,IAAIsY,SAAWjkB,OAAOgkB,aAAarY,OAAOtD,GACtC6b,OAASlkB,OAAOgkB,aAAarY,OAAOqU,QACpCnI,MAAQ7X,OAAO8jB,kBAAkBG,UACrC,GAAGnkB,QAAQU,SAASqX,OAAQ,CACxB,IAAIsM,UAAYtM,MAAMqM,QACtB,GAAGpkB,QAAQU,SAAS2jB,WAAY,CAC5BnkB,OAAOgkB,aAAarY,OAASwY,UAE7B,IAAIC,MAAQpkB,OAAOgkB,aAAazd,KAC5B8d,QAAUD,QAAU1D,eAAeK,MACnCuD,OAASF,QAAU1D,eAAeI,KAClCyD,YAAcvkB,OAAOukB,YAAYJ,WACjCK,WAAaxkB,OAAOwkB,WAAWL,WAcnC,YAbII,aAAgBC,WAKbH,UAAYE,aAAeC,YAC1BxkB,OAAOgkB,aAAazd,KAAO,OAC3BvG,OAAOykB,kBACDH,SAAWE,YAAcD,cAC/BvkB,OAAOgkB,aAAazd,KAAO,QAC3BvG,OAAOykB,mBARXzkB,OAAOgkB,gBACPU,8BAeZ1kB,OAAOgkB,gBACPU,4BAjEJC,GAIJ,SAASC,qBAAqBC,OAAQ7E,SAClC,IAAI8E,iBAAmB9kB,OAAOwf,mBAAmBqF,QACjD,GAAG/kB,QAAQU,SAASskB,kBAAmB,CACnC,IAAIzmB,EAAGyZ,KAAO,KACd,IAAIzZ,EAAI,EAAGA,EAAIymB,iBAAiBjN,MAAM/V,SAClCgW,KAAOgN,iBAAiBjN,MAAMxZ,IACtBgK,KAAO2X,QAF2B3hB,KAM9C,OAAOyZ,KAEP,OAAO,KAKf,SAAS4M,2BACF1kB,OAAOijB,eAAiBnB,eAAeE,QACtChiB,OAAOijB,eAAiBnB,eAAeK,KACvCniB,OAAOijB,eAAiBnB,eAAeI,SACvCliB,OAAOijB,aAAenB,eAAeC,MA6C7C,SAASgD,eAAe9V,QACpB,OAAOzF,aAAa/G,gBAAgBwM,OAAO+V,iBAK/C,SAASC,eAAethB,IAAKuhB,aACzB,IAAI5V,MAAQd,QAAQ,oBAARA,CAA6BxO,OAAOsP,OAmBhD,OAlBAA,MAAQd,QAAQ,iBAARA,CAA0Bc,MAAO3L,IAAIsL,QAC7CK,MAAQd,QAAQ,6BAARA,CACJc,MAAO3L,IAAK3D,OAAOwf,oBAIpB1f,QAAQgI,YAAYod,eACnBA,gBAEJplB,QAAQ4D,QAAQwhB,YAAa,SAAS9Z,MAClC,IAAI/M,EACJ,IAAIA,EAAI,EAAGA,EAAIiR,MAAMxN,OAAQzD,IACzB,GAAGiR,MAAMjR,GAAGgK,KAAO+C,KAAK/C,GAAI,CACxBiH,MAAMpM,OAAO7E,EAAG,GAChB,SAILiR,MAIX,SAAS6V,wBACL,IAAIzkB,cAWJ,OAVAZ,QAAQ4D,QAAQ1D,OAAOolB,mBAAoB,SAASnV,KAChD,IAAIoV,SAAWpV,IAAIvE,MAAM,KACrBmM,MAAQ7X,OAAO8jB,kBAAkBuB,SAAS,IAC9C,GAAGvlB,QAAQU,SAASqX,OAAQ,CACxB,IAAIlU,IAAMkU,MAAMwN,SAAS,IACtBvlB,QAAQU,SAASmD,MAChBjD,WAAWoC,KAAKa,QAIrBjD,WAIX,SAAS4kB,YAAYC,QACjB,IAAIje,IAAM,EAMV,OALAxH,QAAQ4D,QAAQ1D,OAAOwf,mBAAoB,SAAS7b,KAC7CA,IAAI/E,OAAS2mB,OAASje,KACrBA,QAGDie,OAASje,IAjWpBtH,OAAOuB,gBAEC3C,KAAM4jB,uBACN/b,KAAM,aAGN7H,KAAM4jB,sBACN/b,KAAM,YAGN7H,KAAM4jB,qBACN/b,KAAM,WAKdzG,OAAO4J,QAAS,EAChB5J,OAAO0iB,eAAgB,EACvB1iB,OAAO2iB,oBAAqB,EAC5B3iB,OAAOwlB,WAAatb,OAAQ,QAC5BlK,OAAO6T,QAAUhF,eAAe1N,WAChCnB,OAAOsP,MAAQ9F,aAAarI,WAC5BnB,OAAOkB,QAAUhB,eAAeiB,WAChCnB,OAAOU,cACPV,OAAO8jB,qBACP9jB,OAAOylB,2BACPzlB,OAAOwf,sBACPxf,OAAOolB,sBACPplB,OAAOijB,aAAe,KACtBjjB,OAAOgkB,gBACPhkB,OAAO0lB,oBACP1lB,OAAO2lB,sBACP3lB,OAAOgjB,cAAgB,KACvBhjB,OAAO4lB,YAAchhB,eAAeM,QAAQ,gBAC5ClF,OAAOmgB,QAECpZ,KAAMsa,UAAUC,KAChB7a,KAAMib,gBAAgBL,UAAUC,QAGhCva,KAAMsa,UAAUE,OAChB9a,KAAMib,gBAAgBL,UAAUE,UAGhCxa,KAAMsa,UAAUG,KAChB/a,KAAMib,gBAAgBL,UAAUG,QAGhCza,KAAMsa,UAAUI,QAChBhb,KAAMib,gBAAgBL,UAAUI,WA6TxCzhB,OAAOiY,WAAa,WAChBjY,OAAOkP,OAAO,kBAAmB0T,kBAE7B5iB,OAAOgB,QAAQqW,cACfrX,OAAOkP,OAAO,UAAW0T,kBAAkB,GAE/C5iB,OAAO0iB,eAAgB,EACvBD,gBAKJziB,OAAO6lB,wBAA0B,SAASliB,KACtC,QAAK3D,OAAOsN,iBAIRtN,OAAOgB,QAAQqW,eAAgBrX,OAAOgB,QAAQyb,WAK9C3c,QAAQU,SAASR,OAAO6V,OACD,aAAvB7V,OAAO6V,KAAK8I,QACC,SAAbhb,IAAI4C,QAMZvG,OAAO8lB,wBAA0B,WAC7B,OAAK9lB,OAAOsN,gBAIRtN,OAAOgB,QAAQqW,eAAgBrX,OAAOgB,QAAQyb,aAK9C3c,QAAQU,SAASR,OAAO6V,QAES,KAD5B,QAAS,YAAa,UAAU7S,QAC7BhD,OAAO6V,KAAK8I,UAY5B3e,OAAO+lB,gBAAkB,SAASpiB,KAC9B,IAAI7D,QAAQU,SAASmD,KACjB,OAAO,EAGX,GAAGA,IAAIqiB,SAAWriB,IAAI4C,OAASma,eAAeK,MAC1C,OAAO,EAGP,IAAI1iB,EAFD,GAAGsF,IAAI4C,OAASma,eAAeE,MAC5Bjd,IAAI4C,OAASma,eAAeG,OAElC,IAAIxiB,EAAI,EAAGA,EAAIsF,IAAIwf,QAAQrhB,OAAQzD,IAC/B,GAAGsF,IAAIwf,QAAQ9kB,GAAG2nB,QACd,OAAO,EAInB,OAAO,GAIXhmB,OAAOimB,qBAAuB,SAAStiB,KACnC,IAAI8C,KAAOua,qBAAqBrd,IAAI4C,MACpC,OAAGzG,QAAQomB,UAAUzf,MACVA,KAEA9C,IAAI4C,MAKnBvG,OAAOmmB,gBAAkB,SAASxiB,KAC9B,IAAI8C,KAAOib,gBAAgB/d,IAAIoD,MAC/B,OAAGjH,QAAQomB,UAAUzf,MACVA,KAEA9C,IAAIoD,MAKnB/G,OAAOwjB,YAAc,SAASpY,MAC1B,OAAItL,QAAQU,SAAS4K,MAIL,IAAbA,KAAK8U,IACG,WACDpgB,QAAQyM,SAASnB,KAAKxM,OAASwM,KAAKxM,KAAKkD,OAAS,EACjDsJ,KAAK8U,IAAM,KAAO9U,KAAKxM,KAAO,IAE9BwM,KAAK8U,IARL,IAaflgB,OAAOomB,cAAgB,SAAS5jB,QAC5B,OAAI1C,QAAQU,SAASgC,QAEX1C,QAAQyM,SAAS/J,OAAO5D,OAC9B4D,OAAO5D,KAAKkD,OAAS,GACrBU,OAAOF,OAASE,OAAO5D,KAChB4D,OAAOF,KAAO,KAAOE,OAAO5D,KAAO,IAEnC4D,OAAOF,KANP,gBAWftC,OAAOqmB,UAAY,SAASxlB,UACxB,OAAOX,eAAeuC,gBAAgB5B,WAI1Cb,OAAOsmB,uBAAyB,SAAS3iB,KACrC,IAAI7D,QAAQyM,SAAS5I,IAAI/E,OAA6B,IAApB+E,IAAI/E,KAAKkD,OACvC,OAAO,EAEP,IAAIzD,EADD,GAAGyB,QAAQiR,QAAQ/Q,OAAO6V,KAAKnV,YAElC,IAAIrC,EAAI,EAAGA,EAAI2B,OAAO6V,KAAKnV,WAAWoB,OAAQzD,IAAK,CAC/C,IAAIkoB,SAAWvmB,OAAO6V,KAAKnV,WAAWrC,GACtC,GAAGkoB,SAAS3nB,OAAS+E,IAAI/E,MAAQ2nB,SAASle,KAAO1E,IAAI0E,GACjD,OAAO,EAInB,OAAO,GAIXrI,OAAOwmB,mBAAqB,SAAS7iB,KAEjC,OAAG7D,QAAQsgB,WAAWzc,IAAI0c,WACdvgB,QAAQU,SAASmD,IAAI0c,SAAS,YAE9BvgB,QAAQU,SAASmD,IAAInB,SAKrCxC,OAAOymB,kBAAoB,SAAS9iB,KAChC,OAAG7D,QAAQomB,UAAUviB,IAAIqc,UAAYrc,IAAIqc,SAAW,EACzChgB,OAAOylB,wBAAwB9hB,IAAIqc,SAEvC,MAKXhgB,OAAO0mB,mBAAqB,SAAS/iB,KACjC,SAAG7D,QAAQyM,SAAS5I,IAAIE,aAA4B,WAAbF,IAAIoD,SAElC1G,kBAAkB+B,WAAWuB,IAAIE,cACjCxD,kBAAkBgC,oBACfsB,IAAIE,WAAYF,IAAInB,OAAOF,QAO3CtC,OAAO2mB,aAAe,SAAShjB,KAC3B,OAAOA,IAAI0E,GAAK,IAAM1E,IAAIqc,SAI9BhgB,OAAO4mB,sBAAwB,SAASjjB,KACpC,IAAIsM,IAAMjQ,OAAO2mB,aAAahjB,KAC1B2D,IAAMtH,OAAOolB,mBAAmBpiB,QAAQiN,KACzC3I,KAAO,EACNtH,OAAOolB,mBAAmBliB,OAAOoE,IAAK,GAEtCtH,OAAOolB,mBAAmBtiB,KAAKmN,KAGhCjQ,OAAOolB,mBAAmBtjB,OAAS,EAC/B9B,OAAOijB,eAAiBnB,eAAelB,OACtC5gB,OAAOijB,aAAenB,eAAeG,OAEE,IAArCjiB,OAAOolB,mBAAmBtjB,OAChC9B,OAAOijB,aAAenB,eAAeE,OAErChiB,OAAOijB,aAAenB,eAAeC,MAK7C/hB,OAAO6mB,oBAAsB,SAASljB,KAClC,OAAO3D,OAAOolB,mBAAmBpiB,QAC7BhD,OAAO2mB,aAAahjB,OAAS,GAIrC3D,OAAO8mB,oBAAsB,SAASnjB,KAClC,OAAI3D,OAAOijB,eAAiBnB,eAAeC,OAGrC/hB,OAAOijB,eAAiBnB,eAAeG,QACvCjiB,OAAO6mB,oBAAoBljB,OAQrC3D,OAAO+mB,UAAY,SAASpjB,KACxB,OAAG3D,OAAOijB,eAAiBnB,eAAeS,MAG/BviB,OAAOgjB,cAAc3a,KAAO1E,IAAI0E,IAK/CrI,OAAOgnB,KAAO,SAASrjB,KACnB3D,OAAOolB,oBAAsBplB,OAAO2mB,aAAahjB,MACjD3D,OAAOijB,aAAenB,eAAeS,KAClCviB,OAAOgB,QAAQyb,UACdzc,OAAOgjB,eACH3a,GAAI1E,IAAI0E,GACRzJ,KAAM+E,IAAI/E,KACVsN,YAAavI,IAAIuI,YACjB+K,KAAMtT,IAAIsT,KAAK9O,IAAI,SAASkV,KAAO,OAAOA,IAAI5W,OAC9CjE,OAAQmB,IAAInB,OACZqB,WAAYF,IAAIE,WAChBD,cAAeD,IAAIC,cACnBoc,QAASrc,IAAIqc,cAECiH,IAAftjB,IAAInB,QAAuC,OAAfmB,IAAInB,OAC/BxC,OAAOgjB,cAAckE,cAAgBvjB,IAAInB,OAEzCxC,OAAOgjB,cAAckE,cAAgBlnB,OAAOkB,QAAQ,IAGxDlB,OAAOgjB,eACH3a,GAAI1E,IAAI0E,GACRzJ,KAAM+E,IAAI/E,KACVsN,YAAavI,IAAIuI,YACjB+K,KAAMtT,IAAIsT,KAAK9O,IAAI,SAASkV,KAAO,OAAOA,IAAI5W,OAC9CwI,OAAQtL,IAAIsL,OACZ7D,KAAMzH,IAAIyH,KACV5I,OAAQmB,IAAInB,OACZuE,KAAMpD,IAAIoD,KACVlD,WAAYF,IAAIE,WAChBmc,QAASrc,IAAIqc,UAMzBhgB,OAAOmnB,cAAgB,SAASxjB,KAGV,OAAfA,IAAIsL,OACHtL,IAAIyH,KAAO2Z,eAAephB,IAAIsL,QAE9BtL,IAAIyH,KAAO,KAEfpL,OAAOonB,YAAYzjB,MAIvB3D,OAAOqnB,kBAAoB,SAASpX,IAAK5Q,MAAOuS,MAC5C,IAAIxG,KAEAA,KADS,OAAV/L,MACQ0lB,eAAe1lB,OAEf,KAEXuS,KAAK0V,YAAY,OAAQlc,MACzBpL,OAAOunB,gBAAgB,OAAQnc,KAAMwG,OAIzC5R,OAAOonB,YAAc,SAASzjB,KAC1BA,IAAInB,OAAS,KACbxC,OAAOwnB,cAAc7jB,MAIzB3D,OAAOunB,gBAAkB,SAAStX,IAAK5Q,MAAOuS,MAC1CA,KAAK0V,YAAY,SAAU,MAC3BtnB,OAAOynB,kBAAkB,SAAU,KAAM7V,OAI7C5R,OAAOwnB,cAAgB,SAAS7jB,KACxB7D,QAAQU,SAASmD,IAAInB,UAGrBmB,IAAIoD,KAAOsa,UAAUI,SAErBzhB,OAAOgB,QAAQyb,WACf9Y,IAAIE,WAAa,MAErB7D,OAAO0nB,YAAY/jB,MAIvB3D,OAAOynB,kBAAoB,SAASxX,IAAK5Q,MAAOuS,MACxC9R,QAAQU,SAASnB,QAGjBuS,KAAK0V,YAAY,OAAQjG,UAAUI,SAEvC1a,KAAO6K,KAAKyO,SAAS,QACrBzO,KAAK0V,YAAY,aAAc,MAC/BtnB,OAAO2nB,gBAAgB,OAAQ5gB,KAAM6K,OAIzC5R,OAAO0nB,YAAc,SAAS/jB,KAG1B,GADAA,IAAIE,WAAa,GACD,WAAbF,IAAIoD,KAAmB,CACtB,IAAI6gB,aAAehD,qBAAqBjhB,IAAI0E,GAAI1E,IAAIqc,SACjDlgB,QAAQU,SAASonB,eAChBjkB,IAAInB,OAAO6F,KAAOuf,aAAa/D,YAE/BlgB,IAAIE,WAAa+jB,aAAa/jB,cAM1C7D,OAAO2nB,gBAAkB,SAAS1X,IAAK5Q,MAAOuS,MAG1C,GADAA,KAAK0V,YAAY,aAAc,IAClB,WAAVjoB,MAAoB,CACnB,IAAIuoB,aAAehD,qBACjBhT,KAAKyO,SAAS,MAAOzO,KAAKyO,SAAS,YAClCvgB,QAAQU,SAASonB,eAChBhW,KAAKyO,SAAS,UAAUhY,KAAOuf,aAAa/D,WAE5CjS,KAAK0V,YAAY,aAAcM,aAAa/jB,cAMxD7D,OAAO6nB,WAAa,SAASlkB,KACzB3D,OAAOolB,sBACPplB,OAAOijB,aAAenB,eAAeC,KACrC/hB,OAAOgjB,cAAgB,MAI3BhjB,OAAO8nB,oBAAsB,SAASnkB,KAClC,IAAI4E,OAASzI,QAAQyE,KAAKZ,KAqC1B,cAnCO4E,OAAOF,GACdE,OAAOwH,UAAY/P,OAAO6V,KAAK9F,UAC/BxH,OAAOwf,aAAepkB,IAAI0E,QAGR4e,IAAftjB,IAAIsL,QAAuC,OAAftL,IAAIsL,OAC/B1G,OAAO0G,OAAStL,IAAIsL,OAAO5G,GAE3BE,OAAO0G,OAAS,UAEJgY,IAAbtjB,IAAIyH,MAAmC,OAAbzH,IAAIyH,KAC7B7C,OAAO6C,KAAOzH,IAAIyH,KAAK/C,GAEvBE,OAAO6C,KAAO,UAEA6b,IAAftjB,IAAInB,QAAuC,OAAfmB,IAAInB,OAC/B+F,OAAO/F,OAAS+F,OAAO/F,OAAO6F,UAEvBE,OAAO/F,OAGf1C,QAAQomB,UAAUviB,IAAIqc,UAAYrc,IAAIqc,SAAW,GAChDzX,OAAOyX,QAAUrc,IAAIqc,eACdhgB,OAAOylB,wBAAwB9hB,IAAIqc,iBAEnCzX,OAAOyX,SAEdrc,IAAIoD,OAASsa,UAAUE,QACvB5d,IAAIC,gBAAkB4e,wBACvB1iB,QAAQyM,SAAS5I,IAAIE,aACrBF,IAAIE,WAAW/B,OAAS,EACvByG,OAAO1E,WAAaF,IAAIE,kBAEjB0E,OAAO1E,WAEX0E,QAIXvI,OAAOgoB,cAAgB,SAASrkB,KAC5B,IAAI4E,OAuCJ,OArCIA,OADDvI,OAAOgB,QAAQyb,UAEV7d,KAAQ+E,IAAI/E,KACZsN,YAAevI,IAAIuI,YACnBtI,cAAiBD,IAAIC,cACrBC,WAAcF,IAAIE,aAIlBjF,KAAQ+E,IAAI/E,KACZsN,YAAevI,IAAIuI,YACnBnF,KAAQpD,IAAIoD,KACZkQ,KAAQtT,IAAIsT,KAAK9O,IACb,SAASkV,KAAO,OAAOA,IAAI5W,aAGrBwgB,IAAftjB,IAAIsL,QAAuC,OAAftL,IAAIsL,OAC/B1G,OAAO0G,OAAStL,IAAIsL,OAAO5G,GAE3BE,OAAO0G,OAAS,UAEJgY,IAAbtjB,IAAIyH,MAAmC,OAAbzH,IAAIyH,KAC7B7C,OAAO6C,KAAOzH,IAAIyH,KAAK/C,GAEvBE,OAAO6C,KAAO,UAEC6b,IAAftjB,IAAInB,QAAuC,OAAfmB,IAAInB,OAChC+F,OAAO/F,OAASmB,IAAInB,OAAO6F,GAE3BE,OAAO/F,OAAS,KAEjB1C,QAAQomB,UAAUviB,IAAIqc,UAAYrc,IAAIqc,SAAW,IAChDzX,OAAOyX,QAAUrc,IAAIqc,eACdhgB,OAAOylB,wBAAwB9hB,IAAIqc,UAE3ClgB,QAAQyM,SAAS5I,IAAIE,aAAeF,IAAIE,WAAW/B,OAAS,IAC3DyG,OAAO1E,WAAaF,IAAIE,YAErB7D,OAAOgB,QAAQkZ,aAAa+N,gBAC/BjoB,OAAO6V,KAAMlS,IAAI0E,GAAIE,QAAQvE,KAAK,KAAM,SAAS1C,OAI7C8Y,QAAQC,IAAI/Y,OAIZshB,sBAKZ5iB,OAAOkoB,kBAAoB,SAASvkB,KAChC,IAAI4E,QACAxB,KAAQpD,IAAIoD,MAiBhB,OAfG/G,OAAOgB,QAAQyb,WACdlU,OAAO3E,cAAgBD,IAAIC,eAE5B9D,QAAQU,SAASmD,IAAInB,UACpB+F,OAAO/F,OAASmB,IAAInB,OAAO6F,IAE5BvI,QAAQomB,UAAUviB,IAAIqc,UAAYrc,IAAIqc,SAAW,IAChDzX,OAAOyX,QAAUrc,IAAIqc,eACdhgB,OAAOylB,wBAAwB9hB,IAAIqc,UAE3Crc,IAAIoD,OAASsa,UAAUE,QACtBzhB,QAAQyM,SAAS5I,IAAIE,aACrBF,IAAIE,WAAW/B,OAAS,IACxByG,OAAO1E,WAAaF,IAAIE,YAErB7D,OAAOgB,QAAQkZ,aAAaiO,WAC/BnoB,OAAO6V,KAAMlS,IAAI0E,GAAIE,QAAQvE,KAAK,KAAM,SAAS1C,OAQ7C,MAPA8Y,QAAQC,IAAI/Y,OACTxB,QAAQomB,UAAUviB,IAAIqc,UAAYrc,IAAIqc,SAAW,IAChDhgB,OAAOylB,wBAAwB9hB,IAAIqc,SAAW1e,OAIlDshB,mBACMthB,SAKlBtB,OAAOooB,SAAW,SAASpF,eAEvB,OADAhjB,OAAO6nB,aACA7E,eAIXhjB,OAAOqoB,uBAAyB,WAC5B,OAAOroB,OAAOijB,eAAiBnB,eAAeI,QAIlDliB,OAAOsoB,aAAe,WAClB,OAAOtoB,OAAOijB,eAAiBnB,eAAeK,KAIlDniB,OAAOuoB,kBAAoB,SAAS5kB,KAChC,OAAG3D,OAAOgB,QAAQqW,gBAEPrX,OAAO8lB,4BAGP9lB,OAAOukB,YAAY5gB,MAAQ3D,OAAOwkB,WAAW7gB,QAK5D3D,OAAOukB,YAAc,SAAS5gB,KAC1B,QAAI7D,QAAQU,SAASmD,OAEXA,IAAI4C,OAASma,eAAeK,QAEP,IAArBpd,IAAIkU,MAAM/V,QAChB6B,IAAIkU,MAAM,GAAG9Q,OAASsa,UAAUI,WAQxCzhB,OAAOwkB,WAAa,SAAS7gB,KACzB,QAAI7D,QAAQU,SAASmD,OAEXA,IAAI4C,OAASma,eAAeK,OAClCpd,IAAI4C,OAASma,eAAeI,MAGdmE,eAAethB,KACd7B,OAAS,IAKhC9B,OAAOwoB,kBAAoB,SAAS7kB,KAChC,QAAI3D,OAAOwkB,WAAW7gB,MAGJshB,eAAethB,KACd7B,OAAS,GAIhC9B,OAAOyoB,kBAAoB,SAAS9kB,KAChC,OAAGA,IAAI4C,OAASma,eAAeC,SACpB,YACDhd,IAAI4C,OAASma,eAAeI,KAC3B,OAEAnd,IAAI4C,MAKnBvG,OAAO0oB,aAAe,WAClB,OACK1oB,OAAOgB,QAAQqW,eACfrX,OAAO8lB,2BAIhB9lB,OAAO2oB,OAAS,WACZ3oB,OAAOijB,aAAenB,eAAeI,QAIzCliB,OAAO4oB,YAAc,SAASjlB,KAC1B3D,OAAOolB,oBAAsBplB,OAAO2mB,aAAahjB,MACjD3D,OAAO2oB,UAIX3oB,OAAOmD,OAAS,WACZnD,OAAOgkB,gBACPhkB,OAAO0lB,oBACP1lB,OAAO2lB,sBACJ3lB,OAAOijB,eAAiBnB,eAAeM,YACtCpiB,OAAOijB,aAAenB,eAAeG,MAC/BjiB,OAAOijB,eAAiBnB,eAAeQ,gBAC7CtiB,OAAOijB,aAAenB,eAAeC,KAErC/hB,OAAOijB,aAAenB,eAAeE,QAK7ChiB,OAAO6oB,cAAgB,SAASllB,KAC5B3D,OAAOijB,aAAenB,eAAeC,KACrC/hB,OAAOolB,sBACJzhB,IAAI4C,OAASma,eAAeK,MAC3B/gB,OAAOgB,QAAQkZ,aAAajX,gBACxBjD,OAAO6V,KAAMlS,IAAI0E,IAErBrI,OAAOgB,QAAQkZ,aAAa4O,aACxB9oB,OAAO6V,KAAMlS,IAAI0E,GAAI1E,IAAIqc,SAIjC,IAAI1Y,IAAMtH,OAAOU,WAAWsC,QAAQW,KACjC2D,KAAO,GACNtH,OAAOU,WAAWwC,OAAOoE,IAAK,IAKtCtH,OAAO+oB,IAAM,SAASxiB,KAAM5C,KAGxB,IAAIuhB,eACDplB,QAAQU,SAASR,OAAOgkB,aAAa5Y,OACpC8Z,YAAYpiB,KAAK9C,OAAOgkB,aAAa5Y,MAIzC,IAAIkE,MAAQ2V,eAAethB,IAAKuhB,aAC5B8D,YAAc,KACf1Z,MAAMxN,OAAS,IACdknB,YAAc1Z,MAAM,IAExB,IAAI4X,cAAgB,KAChB+B,YAAc5H,UAAUI,QAGzBlb,OAASma,eAAeK,QACvBiI,YAAcrlB,IAAIyH,KAClB8b,cAAgB1Y,QAAQ,SAARA,CACZxO,OAAOkB,SAAUkK,KAAK4d,YAAY3gB,KAAK,GAAM,GACjD4gB,YAAc5H,UAAUC,MAI5BthB,OAAOgkB,cACHzd,KAAMA,KACN6E,KAAM4d,YACNxmB,OAAQ0kB,cACRngB,KAAMkiB,YACNtd,OAAQhI,IACRsT,SAEJjX,OAAOijB,aAAenB,eAAeK,KAIzCniB,OAAOkpB,SAAW,SAASvlB,KACvB3D,OAAOolB,oBAAsBplB,OAAO2mB,aAAahjB,MACjD,IAAI4C,KAAO,QACPvG,OAAOukB,YAAY5gB,OACnB4C,KAAO,QAEXvG,OAAO+oB,IAAIxiB,KAAM5C,MAIrB3D,OAAOmpB,WAAa,WAChB,GAAGnpB,OAAOgkB,aAAazd,OAASma,eAAeK,MAAO,CAClD,IAAIqI,SAAWppB,OAAOgkB,aAAarY,OAAOkM,MAAM/V,OAChD,OAAO9B,OAAOgkB,aAAarY,OAAO/M,KAAO,IAAMwqB,SAC5C,GAAIppB,OAAOgkB,aAAazd,OAASma,eAAeI,KACnD,OACI9gB,OAAOgkB,aAAarY,OAAO/M,KAAO,IAClCoB,OAAOgkB,aAAa5Y,KAAK8U,KAKrClgB,OAAOykB,eAAiB,WACpB,GAAGzkB,OAAOgkB,aAAazd,OAASma,eAAeK,MAC3C/gB,OAAOgkB,aAAa5Y,KAAOpL,OAAOgkB,aAAarY,OAAOP,KACtDpL,OAAOgkB,aAAaxhB,OAASgM,QAAQ,SAARA,CACzBxO,OAAOkB,SACNkK,KAAKpL,OAAOgkB,aAAa5Y,KAAK/C,KAAK,GAAM,GAC9CrI,OAAOgkB,aAAajd,KAAOsa,UAAUC,UAClC,GAAGthB,OAAOgkB,aAAazd,OAASma,eAAeI,KAAM,CACxD,IAAIxR,MAAQ2V,eAAejlB,OAAOgkB,aAAarY,QAC/C3L,OAAOgkB,aAAa5Y,KAAO,KACxBkE,MAAMxN,OAAS,IACd9B,OAAOgkB,aAAa5Y,KAAOkE,MAAM,IAErCtP,OAAOgkB,aAAaxhB,OAAS,KAC7BxC,OAAOgkB,aAAajd,KAAOsa,UAAUI,UAK7CzhB,OAAO6C,aAAe,SAAS0D,MAC3B,IAAI5C,IACJ,GAAG3D,OAAOgB,QAAQyb,SACd9Y,KACI0E,GAAIrI,OAAOgkB,aAAarY,OAAOtD,GAC/B4O,KAAMjX,OAAOgkB,aAAa/M,KAAK9O,IAC3B,SAASkV,KAAO,OAAOA,IAAI5W,OAC/B7C,cAAe5D,OAAOgkB,aAAapgB,cACnCpB,OAAQxC,OAAOgkB,aAAaxhB,OAC5BqB,WAAY7D,OAAOgkB,aAAangB,YAEpC7D,OAAOkoB,kBAAkBvkB,UACtB,GAAG3D,OAAOgkB,aAAazd,OAASma,eAAeK,MAElDpd,KACI0E,GAAIrI,OAAOgkB,aAAarY,OAAOtD,GAC/BtB,KAAM/G,OAAOgkB,aAAajd,KAC1BvE,OAAQxC,OAAOgkB,aAAaxhB,OAC5BqB,WAAY7D,OAAOgkB,aAAangB,YAEpC7D,OAAOkoB,kBAAkBvkB,UACtB,GAAG3D,OAAOgkB,aAAazd,OAASma,eAAeI,KAAM,CACxD,IAAIvY,QACAoD,OAAQ3L,OAAOgkB,aAAarY,OAAOtD,GACnC+C,KAAMpL,OAAOgkB,aAAa5Y,KAAK/C,GAC/BtB,KAAM/G,OAAOgkB,aAAajd,KAC1BkQ,KAAMjX,OAAOgkB,aAAa/M,KAAK9O,IAC3B,SAASkV,KAAO,OAAOA,IAAI5W,QAEhC3G,QAAQU,SAASR,OAAOgkB,aAAaxhB,UACpC+F,OAAO/F,OAASxC,OAAOgkB,aAAaxhB,OAAO6F,GAC3CE,OAAO1E,WAAa7D,OAAOgkB,aAAangB,YAE5C7D,OAAOgB,QAAQkZ,aAAamP,oBACxBrpB,OAAO6V,KAAMtN,QAAQvE,KAAK,KAAM,SAAS1C,OAGrC8Y,QAAQC,IAAI/Y,SAKrBxB,QAAQyM,SAAShG,MAChBvG,OAAO+oB,IAAIxiB,KAAMvG,OAAOgkB,aAAarY,SAErC3L,OAAOijB,aAAenB,eAAeC,KACrC/hB,OAAOolB,sBACPplB,OAAOgkB,kBAOfhkB,OAAOspB,WAAa,WAChB,QAAItpB,OAAO8lB,2BAIH9lB,OAAOijB,eAAiBnB,eAAeC,MACvC/hB,OAAOijB,eAAiBnB,eAAeE,QACvChiB,OAAOijB,eAAiBnB,eAAeG,OAOnDjiB,OAAOupB,cAAgB,WACnB,GAAGvpB,OAAOijB,eAAiBnB,eAAeG,MACtC,OAAO,EAEX,IACI5jB,EAAG+M,KADH1K,WAAaykB,wBAEjB,IAAI9mB,EAAI,EAAGA,EAAIqC,WAAWoB,OAAQzD,IAAK,CACnC,IAAIsF,IAAMjD,WAAWrC,GACrB,GAAGsF,IAAI4C,OAASma,eAAeK,OAC3Bpd,IAAI4C,OAASma,eAAeE,KAC5B,OAAO,EACJ,GAAI9gB,QAAQU,SAAS4K,OAErB,GAAGA,OAASzH,IAAIyH,KACnB,OAAO,OAFPA,KAAOzH,IAAIyH,KAKnB,OAAO,GAIXpL,OAAOwpB,oBAAsB,WACzB,OAAOxpB,OAAOijB,eAAiBnB,eAAeM,aAIlDpiB,OAAOypB,eAAiB,WACpB,GAAGzpB,OAAOijB,eAAiBnB,eAAeG,OACtCjiB,OAAOupB,gBAAiB,CACxBvpB,OAAOijB,aAAenB,eAAeM,YAErC,IAAIxC,QAAUuF,wBACdnlB,OAAO0lB,kBACH9mB,KAAM0mB,YAAY,QAClBrO,QACA2I,QAASA,QACT8J,QAAS9J,QAAQ,GACjB1T,YAAa,GACbnF,KAAM,gBACN4iB,SAAU,OACVC,eAAgB,YAM5B5pB,OAAO6pB,iBAAmB,SAASlmB,KAC/B,IAAI7D,QAAQiR,QAAQpN,IAAIic,SACpB,OAAO,EAEX,IAAIvhB,EACJ,IAAIA,EAAI,EAAGA,EAAIsF,IAAIic,QAAQ9d,OAAQzD,IAC/B,GAAGsF,IAAIic,QAAQvhB,GAAG2nB,QACd,OAAO,EAGf,OAAO,GAKXhmB,OAAO8pB,kCAAoC,SAASnmB,KAChD,OAAI7D,QAAQU,SAASmD,IAAI+lB,SAGd/lB,IAAI+lB,QAAQxd,YAFZ,IAQflM,OAAO+pB,oBAAsB,SAAS7d,YAAa8d,cAI/C,OAHGlqB,QAAQgI,YAAYkiB,gBACnBA,cAAe,GAEflqB,QAAQyM,SAASL,cAAgC,KAAhBA,aAG7B7L,kBAAkB6B,YAAYgK,aAF3B8d,cAMfhqB,OAAOiqB,aAAe,WAClB,MAAwC,YAAjCjqB,OAAO0lB,iBAAiB3e,MAInC/G,OAAOkqB,mBAAqB,WACxB,MACqC,gBAAjClqB,OAAO0lB,iBAAiB3e,MACS,YAAjC/G,OAAO0lB,iBAAiB3e,MACS,gBAAjC/G,OAAO0lB,iBAAiB3e,MAIhC/G,OAAOmqB,cAAgB,WACnB,OACInqB,OAAOsmB,uBAAuBtmB,OAAO0lB,mBACrC1lB,OAAO+pB,oBACH/pB,OAAO0lB,iBAAiBxZ,cAIpClM,OAAOoqB,QAAU,WACb,IAAGpqB,OAAOmqB,gBAAV,CAIA,IAAIvK,QAAU5f,OAAO0lB,iBAAiB9F,QAAQzX,IAC1C,SAASxE,KAAO,OAAOA,IAAI0E,KAC3B6D,YAAclM,OAAO0lB,iBAAiBxZ,YACvB,KAAhBA,cACCA,YAAclM,OAAO0lB,iBAAiBgE,QAAQxd,aAElD,IAAI2T,QAASzU,KAAOpL,OAAO0lB,iBAAiBgE,QAAQte,KAEhDyU,QADD/f,QAAQU,SAAS4K,MACNA,KAAK/C,GAEL,KAEd,IAAIE,QACA3J,KAAMoB,OAAO0lB,iBAAiB9mB,KAC9BsN,YAAaA,YACb+K,KAAMjX,OAAO0lB,iBAAiBzO,KAAK9O,IAC/B,SAASkV,KAAO,OAAOA,IAAI5W,OAC/BmZ,QAASA,QACTxU,KAAMyU,QACNwK,UAAWrqB,OAAO0lB,iBAAiB3e,KACnCujB,eAAgBtqB,OAAO0lB,iBAAiBiE,SACxCY,sBAAuBvqB,OAAO0lB,iBAAiBkE,gBAEnD5pB,OAAOgB,QAAQkZ,aAAasQ,oBACxBxqB,OAAO6V,KAAMtN,QAAQvE,KAAK,KAAM,SAAS1C,OAGrC8Y,QAAQC,IAAI/Y,SAKpBxB,QAAQ4D,QAAQ1D,OAAO0lB,iBAAiB9F,QAAS,SAASjU,QACtD,IAAIrE,IAAMtH,OAAOU,WAAWsC,QAAQ2I,QACjCrE,KAAO,GACNtH,OAAOU,WAAWwC,OAAOoE,IAAK,KAKtCtH,OAAO0lB,oBACP1lB,OAAOolB,sBACPplB,OAAOijB,aAAenB,eAAeC,OAMzC/hB,OAAOyqB,gBAAkB,WACrB,GAAGzqB,OAAOijB,eAAiBnB,eAAeE,OACtC,OAAO,EAEX,IAAIre,IAAMwhB,wBAAwB,GAClC,OAAGxhB,IAAI4C,OAASma,eAAeK,OAC3Bpd,IAAI4C,OAASma,eAAeG,QAOpC7gB,OAAO0qB,sBAAwB,WAC3B,OAAO1qB,OAAOijB,eAAiBnB,eAAeO,eAIlDriB,OAAO2qB,iBAAmB,WACtB,GAAG3qB,OAAOijB,eAAiBnB,eAAeE,QACtChiB,OAAOyqB,kBAAmB,CAC1BzqB,OAAOijB,aAAenB,eAAeO,cAErC,IAAIzC,QAAUuF,wBACdnlB,OAAO2lB,oBACH/mB,KAAM0mB,YAAY,MAClBrO,QACA2I,QAASA,QACT8J,QAAS9J,QAAQ,GACjB1T,YAAa,GACb0e,YAAY,EACZC,UAAW,MAMvB7qB,OAAO8qB,gBAAkB,WACrB,OACI9qB,OAAOsmB,uBAAuBtmB,OAAO2lB,qBACrC3lB,OAAO+pB,oBACH/pB,OAAO2lB,mBAAmBzZ,cAItClM,OAAO+qB,UAAY,WACf,IAAG/qB,OAAO8qB,kBAAV,CAIA,IAAIlL,SAAW5f,OAAO2lB,mBAAmB+D,QAAQrhB,IAC7C6D,YAAclM,OAAO2lB,mBAAmBzZ,YACzB,KAAhBA,cACCA,YAAclM,OAAO2lB,mBAAmB+D,QAAQxd,aAEpD,IAAI3D,QACA3J,KAAMoB,OAAO2lB,mBAAmB/mB,KAChCsN,YAAaA,YACb+K,KAAMjX,OAAO2lB,mBAAmB1O,KAAK9O,IACjC,SAASkV,KAAO,OAAOA,IAAI5W,OAC/BmZ,QAASA,QACTxU,KAAMpL,OAAO2lB,mBAAmB+D,QAAQte,KAAK/C,GAC7CuiB,WAAY5qB,OAAO2lB,mBAAmBiF,WACtCC,UAAW7qB,OAAO2lB,mBAAmBkF,WAEzC7qB,OAAOgB,QAAQkZ,aAAa8Q,sBACxBhrB,OAAO6V,KAAMtN,QAAQvE,KAAK,KAAM,SAAS1C,OAGrC8Y,QAAQC,IAAI/Y,SAKpB,IAAIgG,IAAMtH,OAAOU,WAAWsC,QACxBhD,OAAO2lB,mBAAmB+D,SAC3BpiB,KAAO,GACNtH,OAAOU,WAAWwC,OAAOoE,IAAK,GAIlCtH,OAAO2lB,sBACP3lB,OAAOolB,sBACPplB,OAAOijB,aAAenB,eAAeC,OAIzC/hB,OAAOirB,wBAA0B,WAC7B,OAAOjrB,OAAOijB,eAAiBnB,eAAeQ,iBAIlDtiB,OAAOkrB,mBAAqB,WACrBlrB,OAAOijB,eAAiBnB,eAAeC,OACtC/hB,OAAOijB,aAAenB,eAAeQ,gBAClCtiB,OAAOgB,QAAQyb,SACdzc,OAAOgkB,cACHplB,KAAM0mB,YAAY,OAClBpZ,YAAa,GACbif,UAAU,EACVlU,QACAmU,SAAU,KACV5oB,OAAQ,KACRoB,cAAe4e,uBAGnBxiB,OAAOgkB,cACHplB,KAAM0mB,YAAY,OAClBpZ,YAAa,GACbif,UAAU,EACVlU,QACAmU,SAAU,KACVnc,OAAQjP,OAAO6T,QAAQ,GACvBzI,KAAM2Z,eAAe/kB,OAAO6T,QAAQ,IACpCrR,OAAQ,KACRuE,KAAMsa,UAAUI,WAOhCzhB,OAAOqrB,2BAA6B,WAChC,OACIrrB,OAAOsmB,uBAAuBtmB,OAAOgkB,eACrChkB,OAAO+pB,oBACH/pB,OAAOgkB,aAAa9X,aAAa,IAI7ClM,OAAOsrB,qBAAuB,WAK1B,IAAI/iB,OAJDvI,OAAOqrB,+BAMN9iB,OADDvI,OAAOgB,QAAQyb,UAEV7d,KAAMoB,OAAOgkB,aAAaplB,KAC1BsN,YAAalM,OAAOgkB,aAAa9X,YACjC+K,KAAMjX,OAAOgkB,aAAa/M,KAAK9O,IAC3B,SAASkV,KAAO,OAAOA,IAAI5W,OAC/B7C,cAAe5D,OAAOgkB,aAAapgB,cACnCC,WAAY7D,OAAOgkB,aAAangB,aAIhCjF,KAAMoB,OAAOgkB,aAAaplB,KAC1BqY,KAAMjX,OAAOgkB,aAAa/M,KAAK9O,IAC3B,SAASkV,KAAO,OAAOA,IAAI5W,OAC/ByF,YAAalM,OAAOgkB,aAAa9X,YACjCd,KAAMpL,OAAOgkB,aAAa5Y,KAAK/C,GAC/BtB,KAAM/G,OAAOgkB,aAAajd,MAG/BjH,QAAQU,SAASR,OAAOgkB,aAAaxhB,UACpC+F,OAAO/F,OAASxC,OAAOgkB,aAAaxhB,OAAO6F,IAE/CrI,OAAOgkB,aAAamH,UAAW,EAC/BnrB,OAAOgkB,aAAaoH,SAAW,KAC/BprB,OAAOgB,QAAQkZ,aAAaqR,wBACxBvrB,OAAO6V,KAAMtN,QAAQvE,KAAK,WAEtBhE,OAAOgkB,gBACPhkB,OAAOijB,aAAenB,eAAeC,MAEzC,SAASyJ,UACLlqB,MAAQmf,YAAYgL,SAASD,UACzB1rB,QAAQU,SAASc,QAKjB6pB,SAAW7pB,MAAM4K,YACdpM,QAAQiR,QAAQoa,YACfnrB,OAAOgkB,aAAamH,UAAW,EAC/BnrB,OAAOgkB,aAAaoH,SAAWD,SAAS,KAL5C/Q,QAAQC,IAAImR,cAa5BprB,qBAAqB8D,aAAalE,QAC9B6O,eACArF,aACAtJ,eACAyM,aACAoC,qBACD/K,KAAK,WACJhE,OAAO2iB,oBAAqB,EAC5BF,iBAIJziB,OAAOgB,QAAQ8d,iBAAiB,uBAAwB9e,8GCjoDhEF,QAAQ1B,OAAO,QAAQ0N,OAAO,uBAAwB,WAClD,OAAO,SAAS4f,MAAOC,cACnB,IAAI7rB,QAAQU,SAASmrB,gBAChB7rB,QAAQU,SAASmrB,aAAalqB,UAC9B3B,QAAQiR,QAAQ4a,aAAa5hB,SAC9B,OAAO2hB,MAGX,IAAIjM,YACAmM,QAAS,EAsBb,OArBG9rB,QAAQiR,QAAQ4a,aAAa5hB,WAC5B6hB,QAAS,GAEb9rB,QAAQ4D,QAAQgoB,MAAO,SAASG,MAC5B,GAAGD,OACIC,OAASF,aAAalqB,QACrBge,SAAS3c,KAAK+oB,UAEf,CACH,IAAIxtB,EAAG0hB,OAAQ,EACf,IAAI1hB,EAAI,EAAGA,EAAIstB,aAAa5hB,QAAQjI,OAAQzD,IACxC,GAAGwtB,OAASF,aAAa5hB,QAAQ1L,GAAI,CACjC0hB,OAAQ,EACR,MAGJA,OACAN,SAAS3c,KAAK+oB,SAInBpM,YAIf3f,QAAQ1B,OAAO,QAAQ2B,WAAW,yBAC9B,SAAU,kBAAmB,mBAAoB,eACjD,SAASC,OAAQ2E,gBAAiBmnB,iBAAkBnf,cAGhD,IAQIof,mBAD2B,QAI3BjK,gBACAC,KAAM,KACNC,OAAQ,SACRgK,MAAO,QACPC,QAAS,UACTC,SAAU,WACV3J,KAAM,OACNL,OAAQ,SACRiK,iBAAkB,eAClBC,UAAW,YACXC,OAAQ,SACRC,KAAM,OACNC,aAAc,eACdC,eAAgB,kBAIhBC,aAEI1O,MAAO,SACPvc,MAAO,SACPkrB,UAAW,EACXC,eAAe,EACfC,cAAe,SAASC,QAASC,UAC7B,OAAOD,QAAUC,YAIrB/O,MAAO,SACPvc,MAAO,SACPkrB,UAAW,EACXC,eAAe,EACfC,cAAe,SAASC,QAASC,UAC7B,OAAOD,WAIX9O,MAAO,SACPvc,MAAO,SACPkrB,UAAW,EACXC,eAAe,EACfC,cAAe,SAASC,QAASC,UAC7B,OAAOD,SAAWC,SAAW,MAIjC/O,MAAO,SACPvc,MAAO,SACPkrB,UAAW,EACXC,eAAe,EACfC,cAAe,SAASC,QAASC,UAC7B,OAAOD,SAAWC,SAAW,MAIjC/O,MAAO,UACPvc,MAAO,UACPkrB,UAAW,EACXC,eAAe,EACfC,cAAe,SAASC,QAASC,UAC7B,OAAOD,QAAUC,SAAW,KA+BxC,SAASC,qBAAqB9gB,MAC1B,OAAOnM,QAAQU,SAASyL,QARC+gB,WASD/gB,KAAK+gB,WARtBltB,QAAQU,SAASwsB,aACpBltB,QAAQyM,SAASygB,WAAWC,cACD,KAA3BD,WAAWC,aAHnB,IAA6BD,WAa7B,SAASE,gCAAgCjhB,MACrC,OAAGnM,QAAQU,SAASyL,KAAK+gB,aACrBltB,QAAQyM,SAASN,KAAK+gB,WAAWG,SACN,KAA3BlhB,KAAK+gB,WAAWG,UACmC,IAAlDrtB,QAAQyM,SAASN,KAAK+gB,WAAWC,cACE,KAAhChhB,KAAK+gB,WAAWC,aACbhhB,KAAK+gB,WAAWG,OAEhB,KAKf,SAASC,QAAQnhB,MACb,MAAiB,cAAdA,KAAK1F,OAEEzG,QAAQU,SAASyL,KAAK+gB,eACzB/gB,KAAK+gB,WAAWK,mBACfvtB,QAAQyM,SAASN,KAAK+gB,WAAWC,cACD,KAAhChhB,KAAK+gB,WAAWC,eAEThhB,KAAK+gB,WAAWK,iBAKxBphB,KAAKqhB,eAAiBvB,oBAIjC,SAASwB,QAAQ1B,MACb,IAAI5U,QAIJ,OAHAnX,QAAQ4D,QAAQmoB,KAAK5U,KAAM,SAASoG,KAChCpG,KAAKnU,MAAO2D,KAAM4W,QAEfpG,KAIX,SAAS0P,aAAakF,MAClB,GAAiB,cAAdA,KAAKtlB,KACJ,MAAO,aAAeslB,KAAK2B,aAE3B,IAAIvd,IAAM4b,KAAKtlB,KAAO,IAAMslB,KAAK4B,SAIjC,OAHG3tB,QAAQyC,SAASspB,KAAK6B,gBACrBzd,KAAO,IAAM4b,KAAK6B,cAEfzd,IA4Rf,SAAS0d,cA5CT,IACQC,KAnJAC,UAtFAC,YAqRDhuB,QAAQiR,QAAQ/Q,OAAO6V,KAAK6V,QAC3B1rB,OAAO+tB,UAAY/tB,OAAO6V,KAAK6V,MAAM5pB,OAAS,EAtR9CgsB,eACJhuB,QAAQ4D,QAAQ1D,OAAO6V,KAAK6V,MAAO,SAASG,MACxC,GAAGkB,qBAAqBlB,MAAO,CAC3B,IAAIjjB,MACArC,KAAQ,aACR3H,KAAQitB,KAAKjtB,KACbovB,WAAcnC,KAAKmC,WACnBb,OAAUtB,KAAKmB,WAAWG,OAC1BF,YAAepB,KAAKmB,WAAWC,YAC/BgB,cAAiBpC,KAAKmB,WAAWiB,cACjCR,SAAY5B,KAAKxjB,GACjBqlB,aAAgB,KAChBQ,cAAiBrC,KAAKmB,WAAW3kB,GACjC8lB,cAAiBtC,KAAKtlB,KACtB6nB,SAAYvC,MAEC,YAAdA,KAAKtlB,OACJslB,KAAKwC,YAAcxC,KAAKlgB,OAAOpF,MAEnCunB,YAAYhrB,KAAK8F,MAErB9I,QAAQ4D,QAAQmoB,KAAKyC,WAAY,SAASC,WACnCxB,qBAAqBwB,YACpBT,YAAYhrB,MACRyD,KAAQ,aACR3H,KAAQ2vB,UAAU3vB,KAClBovB,WAAcO,UAAUP,WACxBb,OAAUoB,UAAUvB,WAAWG,OAC/BF,YAAesB,UAAUvB,WAAWC,YACpCgB,cACIM,UAAUvB,WAAWiB,cACzBR,SAAY5B,KAAKxjB,GACjBqlB,aAAgBa,UAAUlmB,GAC1B6lB,cAAiBK,UAAUvB,WAAW3kB,GACtC8lB,cAAiB,YACjBC,SAAYG,gBAS5BzuB,QAAQ4D,QACJ1D,OAAO6V,KAAK2Y,oBACZ,SAASxB,YACLc,YAAYhrB,MACRyD,KAAQ,aACR3H,KAAQ,IACRovB,WAAc,IACdb,OAAUH,WAAWG,OACrBF,YAAeD,WAAWC,YAC1BgB,cAAiBjB,WAAWiB,cAC5BR,SAAY,KACZC,aAAgB,KAChBS,cAAiB,cAM7BruB,QAAQ4D,QAAQoqB,YAAa,SAASd,YAClC,IAAI/c,IAAM0W,aAAaqG,YACnByB,cAAgBzuB,OAAO0uB,eAAeze,KACvCnQ,QAAQU,SAASiuB,eAChBzB,WAAW2B,UAAYF,cAAcE,UAErC3B,WAAW2B,WAAY,IAK/B3uB,OAAO8tB,YAAcA,YACrB9tB,OAAO0uB,kBACP5uB,QAAQ4D,QAAQoqB,YAAa,SAASd,YAClChtB,OAAO0uB,eAAe/H,aAAaqG,aAAeA,aAItDhtB,OAAO4uB,2BAA0B,GAM7Bf,aACJ/tB,QAAQ4D,QAAQ1D,OAAO6V,KAAK6V,MAAO,SAASG,MACvB,cAAdA,KAAKtlB,MACJsnB,UAAU/qB,MACNyD,KAAQ,YACR3H,KAAQitB,KAAKjtB,KACbovB,WAAcnC,KAAKmC,WACnBR,aAAgB3B,KAAKxjB,GACrBwmB,QAAWhD,KAAKiD,aAO5BhvB,QAAQ4D,QAAQmqB,UAAW,SAASkB,UAChC,IAAI9e,IAAM0W,aAAaoI,UACnBC,YAAchvB,OAAOivB,aAAahf,KACnCnQ,QAAQU,SAASwuB,aAChBD,SAASJ,UAAYK,YAAYL,UAEjCI,SAASJ,WAAY,IAK7B3uB,OAAO6tB,UAAYA,UACnB7tB,OAAOivB,gBACPnvB,QAAQ4D,QAAQmqB,UAAW,SAASkB,UAChC/uB,OAAOivB,aAAatI,aAAaoI,WAAaA,WAIlD/uB,OAAOkvB,0BAAyB,GAIpC,WACI,IAAIC,aAmFJ,GAlFArvB,QAAQ4D,QAAQ1D,OAAO6V,KAAK6V,MAAO,SAASG,MACxC,IAAIuB,QAAQvB,MAAO,CACf,IAAIuD,gBAAiB,EAClBtvB,QAAQiR,QAAQ8a,KAAKyC,aACpBzC,KAAKyC,WAAWxsB,OAAS,IACzBstB,gBAAiB,GAErB,IAAIxmB,MACAhK,KAAQitB,KAAKjtB,KACbovB,WAAcnC,KAAKmC,WACnBqB,qBAAwBxD,KAAKwD,qBAC7BC,gBAAmBzD,KAAKyD,gBACxB/oB,KAAQslB,KAAKtlB,KACbxB,MAAS8mB,KAAK9mB,MACdwqB,OAAU1D,KAAK0D,OACftY,KAAQsW,QAAQ1B,MAChBsB,OAAUD,gCAAgCrB,MAC1CoB,YAAe,KACfgB,cAAiB,KACjBR,SAAY5B,KAAKxjB,GACjBqlB,aAAgB,KAChB0B,eAAkBA,eAClBpJ,QAAW6F,KAAK7F,QAChBoI,SAAYvC,KACZ2D,YAAe3D,KAAK2D,YACpBC,iBAAoB5D,KAAK4D,kBAEZ,YAAd5D,KAAKtlB,OACJqC,KAAKylB,YAAcxC,KAAKlgB,OAAOpF,MAEnC4oB,UAAUrsB,KAAK8F,MAEnB9I,QAAQ4D,QAAQmoB,KAAKyC,WAAY,SAASC,WAClCnB,QAAQmB,YACRY,UAAUrsB,MACNlE,KAAQ2vB,UAAU3vB,KAClBovB,WAAcO,UAAUP,WACxBqB,qBACId,UAAUc,qBACdC,gBAAmBf,UAAUe,gBAC7B/oB,KAAQ,YACRxB,MAAS,GACTwqB,OAAU,GACVtY,QACAkW,OACID,gCAAgCqB,WACpCtB,YAAe,KACfgB,cAAiB,KACjBR,SAAY5B,KAAKxjB,GACjBqlB,aAAgBa,UAAUlmB,GAC1B+mB,gBAAkB,EAClBpJ,SAAW,EACXoI,SAAYG,gBAS5BzuB,QAAQ4D,QAAQyrB,UAAW,SAAStD,MAChC,IAAI5b,IAAM0W,aAAakF,MACnB6D,QAAU1vB,OAAO2vB,aAAa1f,KAC/BnQ,QAAQU,SAASkvB,UAChB7D,KAAK8C,UAAYe,QAAQf,UACzB9C,KAAK+D,SAAWF,QAAQE,WAExB/D,KAAK8C,WAAY,EACjB9C,KAAK+D,eAKb5vB,OAAOmvB,UAAYA,UACnBnvB,OAAO2vB,gBACP7vB,QAAQ4D,QAAQyrB,UAAW,SAAStD,MAChC7rB,OAAO2vB,aAAahJ,aAAakF,OAASA,OAK3C/rB,QAAQU,SAASR,OAAO2rB,cAEvB,GAAG7rB,QAAQU,SAASR,OAAO2rB,aAAalqB,QAAS,CAC7C,IAAIwO,IAAM0W,aAAa3mB,OAAO2rB,aAAalqB,QAC3CzB,OAAO2rB,aAAalqB,OAASzB,OAAO2vB,aAAa1f,UAE9C,GAAGnQ,QAAQiR,QAAQ/Q,OAAO2rB,aAAa5hB,SAAU,CACpD,IAAI8lB,cACJ/vB,QAAQ4D,QACJ1D,OAAO2rB,aAAa5hB,QAAS,SAAStI,QAClC,IAAIwO,IAAM0W,aAAallB,QACnBnB,UAAYN,OAAO2vB,aAAa1f,KACjCnQ,QAAQU,SAASF,YAChBuvB,WAAW/sB,KAAKxC,aAG5BN,OAAO2rB,aAAa5hB,QAAU8lB,WAKtC7vB,OAAO8vB,0BAAyB,GAqD5BC,GAhDAnC,QACJ9tB,QAAQ4D,QAAQ1D,OAAO6V,KAAK6V,MAAO,SAASG,MACxC,GAAGuB,QAAQvB,OAAuB,cAAdA,KAAKtlB,KAAsB,CAC3C,IAAI6oB,gBAAiB,EAClBtvB,QAAQiR,QAAQ8a,KAAKyC,aACpBzC,KAAKyC,WAAWxsB,OAAS,IACzBstB,gBAAiB,GAErB,IAAIxmB,MACAhK,KAAQitB,KAAKjtB,KACb2H,KAAQslB,KAAKtlB,KACbxB,MAAS8mB,KAAK9mB,MACdwqB,OAAU1D,KAAK0D,OACftY,KAAQsW,QAAQ1B,MAChBiD,SAAYjD,KAAKiD,SACjB9I,QAAW6F,KAAK7F,QAChBoJ,eAAkBA,eAClBI,YAAe3D,KAAK2D,YACpBC,iBAAoB5D,KAAK4D,kBAEZ,YAAd5D,KAAKtlB,OACJqC,KAAKylB,YAAcxC,KAAKlgB,OAAOpF,MAEnCqnB,KAAK9qB,KAAK8F,MAEd9I,QAAQ4D,QAAQmoB,KAAKyC,WAAY,SAASC,WACnCnB,QAAQmB,YAAiC,cAAnBA,UAAUhoB,MAC/BqnB,KAAK9qB,MACDlE,KAAQ2vB,UAAU3vB,KAClB2H,KAAQ,YACRxB,MAAS,GACTwqB,OAAU,GACVtY,QACA6X,SAAYP,UAAUO,SACtB9I,SAAW,QAK3BhmB,OAAO4tB,KAAOA,OAYV5tB,OAAO+tB,WAAY,EACnB/tB,OAAO8tB,eACP9tB,OAAO0uB,kBACP1uB,OAAOgwB,eAAiBlO,eAAeC,KACvC/hB,OAAOiwB,uBAAwB,EAC/BjwB,OAAO6tB,aACP7tB,OAAOivB,gBACPjvB,OAAOkwB,cAAgBpO,eAAeC,KACtC/hB,OAAOmwB,sBAAuB,EAC9BnwB,OAAOmvB,aACPnvB,OAAO2vB,gBACP3vB,OAAOowB,cAAgBtO,eAAeC,KACtC/hB,OAAOqwB,sBAAuB,EAC9BrwB,OAAO2rB,gBACP3rB,OAAO4tB,SAKf,SAAS0C,YAAYC,OACjBzwB,QAAQ4D,QAAQ6sB,MAAO,SAAStkB,MAC5BA,KAAK0iB,WAAY,IAKzB,SAAS6B,sBAAsBC,QAC3B,OAAOA,OAAOC,OAAO,GAAGC,cAAgBF,OAAOhlB,MAAM,GAUzD,SAASmlB,iBAAiBrL,OAAQ3mB,MAC9B,IACIiyB,MADU,IAAIC,OAAO,IAAMvL,OAAS,aACpBwL,KAAKnyB,MACzB,GAAGkB,QAAQiR,QAAQ8f,QAA2B,IAAjBA,MAAM/uB,OAC/B,OAAOqM,SAAS0iB,MAAM,GAAI,IAKlC,SAASvL,YAAYC,QACjB,IAAIje,KAAO,EAaX,OAZAxH,QAAQ4D,QAAQ1D,OAAO6V,KAAK6V,MAAO,SAASG,MACxC,IAAImF,KAAOJ,iBAAiBrL,OAAQsG,KAAKjtB,MACtCkB,QAAQyC,SAASyuB,QAChB1pB,IAAM2pB,KAAKC,IAAI5pB,IAAK0pB,OAExBlxB,QAAQ4D,QAAQmoB,KAAKyC,WAAY,SAASC,WACtCyC,KAAOJ,iBAAiBrL,OAAQgJ,UAAU3vB,MACvCkB,QAAQyC,SAASyuB,QAChB1pB,IAAM2pB,KAAKC,IAAI5pB,IAAK0pB,WAIzBzL,QAAUje,IAAM,GAI3B,SAAS6pB,mBAAmBvyB,KAAMwyB,cAC9B,IAAItxB,QAAQiR,QAAQ/Q,OAAO6V,KAAK6V,OAC5B,OAAO,EAGX,IAAIrtB,EAAGgzB,EACP,IAAIhzB,EAAI,EAAGA,EAAI2B,OAAO6V,KAAK6V,MAAM5pB,OAAQzD,IAAK,CAC1C,IAAIwtB,KAAO7rB,OAAO6V,KAAK6V,MAAMrtB,GAC7B,GAAGwtB,KAAKjtB,OAASA,QACTkB,QAAQU,SAAS4wB,eACK,cAAtBA,aAAa7qB,MACb6qB,aAAa3D,WAAa5B,KAAKxjB,IAC/B,OAAO,EAGf,GAAGvI,QAAQiR,QAAQ8a,KAAKyC,YACpB,IAAI+C,EAAI,EAAGA,EAAIxF,KAAKyC,WAAWxsB,OAAQuvB,IAAK,CACxC,IAAI9C,UAAY1C,KAAKyC,WAAW+C,GAChC,GAAG9C,UAAU3vB,OAASA,QACdkB,QAAQU,SAAS4wB,eACK,cAAtBA,aAAa7qB,MACb6qB,aAAa1D,eAAiBa,UAAUlmB,IACxC,OAAO,GAM3B,OAAO,EAIX,SAASipB,gBAAgBzF,MACrB,MAAqB,YAAdA,KAAKtlB,MAA2C,WAArBslB,KAAKwC,YApd3CruB,OAAOwlB,WAAatb,OAAQ,QAC5BlK,OAAO+tB,WAAY,EACnB/tB,OAAO8tB,eACP9tB,OAAO0uB,kBACP1uB,OAAOgwB,eAAiBlO,eAAeC,KACvC/hB,OAAOiwB,uBAAwB,EAC/BjwB,OAAO6tB,aACP7tB,OAAOivB,gBACPjvB,OAAOkwB,cAAgBpO,eAAeC,KACtC/hB,OAAOmwB,sBAAuB,EAC9BnwB,OAAOmvB,aACPnvB,OAAO2vB,gBACP3vB,OAAOowB,cAAgBtO,eAAeC,KACtC/hB,OAAOqwB,sBAAuB,EAC9BrwB,OAAO2rB,gBACP3rB,OAAO4tB,QACP5tB,OAAOuxB,eAwcPvxB,OAAOiY,WAAa,WAChBjY,OAAOkP,OAAO,aAAcye,cAIhC3tB,OAAOwxB,mBAAqB,SAASvlB,KAAMsM,SAEvC,OAAIvY,OAAOsN,mBAKPxN,QAAQU,SAASR,OAAO6V,QAEK,KAD5B,QAAS,aAAa7S,QACnBhD,OAAO6V,KAAK8I,WAKH,aAAd1S,KAAK1F,MASO,SAAZgS,UACStM,KAAKmjB,kBAMrBpvB,OAAOyxB,cAAgB,SAASxlB,MAEzBA,KAAK+Z,SAILhmB,OAAOwxB,mBAAmBvlB,OAI7BtH,gBAAgB+sB,YAAY1xB,OAAO6V,KAAM5J,KAAKwhB,WAIlDztB,OAAO2xB,uBAAyB,WAC5B,IAAI7D,eAMJ,OALAhuB,QAAQ4D,QAAQ1D,OAAO8tB,YAAa,SAASd,YACtCA,WAAW2B,WACVb,YAAYhrB,KAAKkqB,cAGlBc,aAKX9tB,OAAO4uB,0BAA4B,SAASzc,OACrCrS,QAAQgI,YAAYqK,SACnBA,OAAQ,GAEZ,IAAI2b,YAAc9tB,OAAO2xB,yBACC,IAAvB7D,YAAYhsB,OACX9B,OAAOgwB,eAAiBlO,eAAeC,KACV,IAAvB+L,YAAYhsB,QAAgBqQ,MAClCnS,OAAOgwB,eAAiBlO,eAAeE,OACjC7P,QACNnS,OAAOgwB,eAAiBlO,eAAekK,OAGV,IAA9BhsB,OAAO8tB,YAAYhsB,OAClB9B,OAAOiwB,uBAAwB,EACzBnC,YAAYhsB,SAAW9B,OAAO8tB,YAAYhsB,OAChD9B,OAAOiwB,uBAAwB,EAE/BjwB,OAAOiwB,uBAAwB,GAKvCjwB,OAAO4xB,uBAAyB,SAAS5E,YACrCA,WAAW2B,WAAa3B,WAAW2B,UACnC3uB,OAAO4uB,2BAA0B,IAIrC5uB,OAAO6xB,0BAA4B,WAC/B/xB,QAAQ4D,QAAQ1D,OAAO8tB,YAAa,SAASd,YACtChtB,OAAOiwB,sBACNjD,WAAW2B,WAAY,EAEvB3B,WAAW2B,WAAY,IAG/B3uB,OAAO4uB,2BAA0B,IAKrC5uB,OAAO8xB,sBAAwB,WAC3B,OACI9xB,OAAOgwB,iBAAmBlO,eAAeC,MACzC/hB,OAAOgwB,iBAAmBlO,eAAeE,QACzChiB,OAAOgwB,iBAAmBlO,eAAekK,OACzChsB,OAAO+xB,wBAIf/xB,OAAOgyB,iBAAmB,WACtB1B,YAAYtwB,OAAO8tB,aACnB9tB,OAAO4uB,2BAA0B,IAIrC5uB,OAAOiyB,kBAAoB,WACvBjyB,OAAOgwB,eAAiBlO,eAAemK,SAI3CjsB,OAAOkyB,uBAAyB,SAASlF,YACrCsD,YAAYtwB,OAAO8tB,aACnBd,WAAW2B,WAAY,EACvB3uB,OAAO4uB,2BAA0B,GACjC5uB,OAAOiyB,qBAIXjyB,OAAOmyB,yBAA2B,SAASnF,YACvCroB,gBAAgBytB,iBACZpyB,OAAO6V,KACPmX,WAAWS,SAAUT,WAAWU,aAChCV,WAAWG,OAAQ,KAAM,MAE7B,IAAI7lB,IAAMtH,OAAO8tB,YAAY9qB,QAAQgqB,YACrChtB,OAAO8tB,YAAY5qB,OAAOoE,IAAK,GAC/BtH,OAAO4uB,6BAIX5uB,OAAOqyB,iBAAmB,WACtBryB,OAAOgwB,eAAiBlO,eAAeI,QAI3CliB,OAAOsyB,sBAAwB,SAAStF,YACpCsD,YAAYtwB,OAAO8tB,aACnBd,WAAW2B,WAAY,EACvB3uB,OAAO4uB,2BAA0B,GACjC5uB,OAAOqyB,oBAIXryB,OAAOuyB,wBAA0B,SAASvF,YACN,YAA7BA,WAAWmB,cAEVxpB,gBAAgB6tB,yBACZxyB,OAAO6V,KAAMmX,WAAWC,aACO,cAA7BD,WAAWmB,cAEjBxpB,gBAAgB8tB,gBACZzyB,OAAO6V,KAAMmX,WAAWoB,SAAS/lB,IAGrC1D,gBAAgB+tB,iBACZ1yB,OAAO6V,KAAMmX,WAAWS,SAAUT,WAAWU,aAC7CV,WAAWkB,eAGnB,IAAI5mB,IAAMtH,OAAO8tB,YAAY9qB,QAAQgqB,YACrChtB,OAAO8tB,YAAY5qB,OAAOoE,IAAK,GAC/BtH,OAAO4uB,6BAIX5uB,OAAO2yB,uBAAyB,SAAS9G,MACrC,SAAG/rB,QAAQyM,SAASsf,KAAKsB,SAA2B,KAAhBtB,KAAKsB,QACjCrtB,QAAQyM,SAASsf,KAAKoB,cACD,KAArBpB,KAAKoB,cAQjBjtB,OAAO4yB,cAAgB,SAAS/G,MAC5B,MAAiB,WAAdA,KAAKtlB,OAEgB,aAAdslB,KAAKtlB,MAAqC,YAAdslB,KAAKtlB,OAChCslB,KAAKuD,gBAOpBpvB,OAAO6yB,cAAgB,SAAShH,MAC5B,OAAG/rB,QAAQgI,YAAY+jB,MACZ,GAGM,YAAdA,KAAKtlB,KACoB,WAArBslB,KAAKwC,YACG,iBACqC,IAAtCxC,KAAKwC,YAAYrrB,QAAQ,SACxB,QAAU6oB,KAAKwC,YAAY3iB,MAAM,KAAK,GAEtC8kB,sBAAsB3E,KAAKwC,aAElB,WAAdxC,KAAKtlB,KACJ,eAEAiqB,sBAAsB3E,KAAKtlB,OAK1CvG,OAAO8yB,qBAAuB,WAC1B,IAAI3D,aAMJ,OALArvB,QAAQ4D,QAAQ1D,OAAOmvB,UAAW,SAAStD,MACpCA,KAAK8C,WACJQ,UAAUrsB,KAAK+oB,QAGhBsD,WAKXnvB,OAAO8vB,yBAA2B,SAAS3d,OACpCrS,QAAQgI,YAAYqK,SACnBA,OAAQ,GAEZ,IAAIgd,UAAYnvB,OAAO8yB,uBACC,IAArB3D,UAAUrtB,OACT9B,OAAOowB,cAAgBtO,eAAeC,KACX,IAArBoN,UAAUrtB,QAAgBqQ,MAChCnS,OAAOowB,cAAgBtO,eAAeE,OAChC7P,QACNnS,OAAOowB,cAAgBtO,eAAekK,OAGX,IAA5BhsB,OAAOmvB,UAAUrtB,OAChB9B,OAAOqwB,sBAAuB,EACxBlB,UAAUrtB,SAAW9B,OAAOmvB,UAAUrtB,OAC5C9B,OAAOqwB,sBAAuB,EAE9BrwB,OAAOqwB,sBAAuB,GAKtCrwB,OAAO+yB,sBAAwB,SAASlH,MACpCA,KAAK8C,WAAa9C,KAAK8C,UACvB3uB,OAAO8vB,0BAAyB,IAIpC9vB,OAAOgzB,yBAA2B,WAC9BlzB,QAAQ4D,QAAQ1D,OAAOmvB,UAAW,SAAStD,MACnC7rB,OAAOqwB,qBAGPxE,KAAK8C,WAAY,EAFjB9C,KAAK8C,WAAY,IAKzB3uB,OAAO8vB,0BAAyB,IAKpC9vB,OAAOizB,oBAAsB,WACzB,OACIjzB,OAAOowB,gBAAkBtO,eAAeC,MACxC/hB,OAAOowB,gBAAkBtO,eAAeE,QACxChiB,OAAOowB,gBAAkBtO,eAAekK,OACxChsB,OAAO+xB,wBAIf/xB,OAAOkzB,kBAAoB,SAASrH,MAChC,OAAG7rB,OAAO+xB,yBAEc,WAAdlG,KAAKtlB,OAAqBslB,KAAKuD,iBAEjB,aAAdvD,KAAKtlB,OAAuBslB,KAAKuC,SAASpI,WAQxDhmB,OAAOmzB,uBAAyB,SAAStH,MACrC,OAAGA,KAAKuD,eACG,gBAEA,aAIfpvB,OAAOozB,wBAA0B,SAASvH,MACtC,IAAIwH,iBAAmB,EAWvB,OAVIvzB,QAAQyM,SAASsf,KAAKuC,SAASkF,uBACW,KAAvCzH,KAAKuC,SAASkF,uBAEjBD,iBAx1B0BE,QA21ByB,IAAhDvzB,OAAO6V,KAAKzP,aAAapD,QAAQ,aAChCqwB,kBA11Bc,UA61BfvH,iBAAiB0H,iBACpB3H,KAAKuC,SAASd,eAAiB+F,iBA31BR,UAg2B/BrzB,OAAOyzB,gBAAkB,SAAS5H,MAC9B,SAAI7rB,OAAOsN,eAAiBtN,OAAO+xB,0BAEX,cAAdlG,KAAKtlB,MAAsC,WAAdslB,KAAKtlB,QAEpB,YAAdslB,KAAKtlB,MACW,WAArBslB,KAAKwC,aACmB,WAArBxC,KAAKwC,iBAEHvuB,QAAQyM,SAASsf,KAAKsB,SAA2B,KAAhBtB,KAAKsB,SAIxCntB,OAAOozB,wBAAwBvH,MACnCE,oBAAuB,MAI/B/rB,OAAO0zB,cAAgB,SAAS7H,MAC5B,MAAiB,KAAdA,KAAKjtB,QAEEuyB,mBAAmBtF,KAAKjtB,KAAMitB,OAQ5C7rB,OAAO2zB,eAAiB,SAAS9H,MAC7B,GAAGyF,gBAAgBzF,MAAO,CACtB,IAAI+H,WAAa/H,KAAKuC,SAASxvB,KAAK8M,MAAM,KAAK,GAAK,IAElC,IADDmgB,KAAKjtB,KAAKoE,QAAQ4wB,cAE/B/H,KAAKjtB,KAAOg1B,cAMxB5zB,OAAO6zB,gBAAkB,SAAShI,MAC9B7rB,OAAO8vB,0BAAyB,GAChC9vB,OAAO2rB,iBAIX3rB,OAAO8zB,eAAiB,SAAS3G,QAC7B,OAAOrtB,QAAQyM,SAAS4gB,SAAsB,SAAXA,QAKvCntB,OAAO+zB,YAAc,SAAS5G,QAC1B,OAAOrtB,QAAQyM,SAAS4gB,SACT,UAAXA,QAAiC,UAAXA,QAI9BntB,OAAOg0B,oBAAsB,SAASC,YAClC,OAAGn0B,QAAQgI,YAAYmsB,aAA8B,KAAfA,aAEZ,SAAfA,YAMiB,MAAlBA,WAAW,KAQzBj0B,OAAOk0B,UAAY,SAASrI,MACxB,SAAK7rB,OAAOsN,eAAiBtN,OAAO+xB,0BAEZ,WAAdlG,KAAKtlB,KACwB,IAA5BslB,KAAKuC,SAAS+F,WAEbtI,KAAKuD,iBAKrBpvB,OAAOo0B,gBAAkB,WACrBp0B,OAAOowB,cAAgBtO,eAAeI,QAI1CliB,OAAOq0B,qBAAuB,SAASxI,MACnCyE,YAAYtwB,OAAOmvB,WACnBtD,KAAK8C,WAAY,EACjB3uB,OAAO8vB,0BAAyB,GAChC9vB,OAAOo0B,mBAIXp0B,OAAO8W,QAAU,SAAS+U,MACxB,SAAK7rB,OAAOsN,eAAiBtN,OAAO+xB,yBAQtC/xB,OAAOs0B,cAAgB,SAASzI,MAC5B7rB,OAAOowB,cAAgBtO,eAAeS,KAEpB,WAAdsJ,KAAKtlB,KACLslB,KAAK+D,UACD2E,aAAa,EACbC,mBAAmB,GAEF,cAAd3I,KAAKtlB,KACZslB,KAAK+D,UACD2E,aAAa,EACbC,mBAAmB,EACnBrH,OAAQtB,KAAKsB,SAGjBtB,KAAK+D,UACD4E,mBAAmB,EACnBD,aAAa,EACbtd,KAAMnX,QAAQyE,KAAKsnB,KAAK5U,MACxBkW,OAAQtB,KAAKsB,QAEZntB,OAAOkzB,kBAAkBrH,QAC1BA,KAAK+D,SAAS4E,mBAAoB,KAM9Cx0B,OAAOy0B,mBAAqB,SAAS5I,MACjCyE,YAAYtwB,OAAOmvB,WACnBtD,KAAK8C,WAAY,EACjB3uB,OAAO8vB,0BAAyB,GAChC9vB,OAAOs0B,cAAczI,OAIzB7rB,OAAO00B,qBAAuB,SAAS7I,MACnC,IAAItjB,QACA3J,KAAMitB,KAAKjtB,MAIf,IAAGoB,OAAO0zB,cAAc7H,QACpB7rB,OAAOg0B,oBAAoBnI,KAAK+D,SAASqE,YAD7C,CAWA,GALiB,KAAdpI,KAAKjtB,OACJitB,KAAKjtB,KAAOitB,KAAKuC,SAASxvB,MAI3B0yB,gBAAgBzF,MAAM,CACrB,IAAI+H,WAAa/H,KAAKuC,SAASxvB,KAAK8M,MAAM,KAAK,GAAK,IACpDnD,OAAO3J,KAAOitB,KAAKjtB,KAAK6M,MAAMmoB,WAAW9xB,QA8B7C,GA1BGhC,QAAQomB,UAAU2F,KAAK+D,SAASzC,UAC/B5kB,OAAO4kB,OAAStB,KAAK+D,SAASzC,OAC9B5kB,OAAO0kB,YAAcpB,KAAK+D,SAASqE,YAAc,GACjD1rB,OAAO0lB,cAAgBpC,KAAK+D,SAAS+E,cAAgB,IAItD70B,QAAQiR,QAAQ8a,KAAK+D,SAAS3Y,QAC7B1O,OAAO0O,KAAO4U,KAAK+D,SAAS3Y,KAAK9O,IAC7B,SAASkV,KAAO,OAAOA,IAAI5W,QAInC9B,gBAAgBiwB,WACZ50B,OAAO6V,KAAMgW,KAAK4B,SAAUllB,QAIhCsjB,KAAKsB,OAAStB,KAAK+D,SAASzC,OAC5BtB,KAAKoB,YAAcpB,KAAK+D,SAASqE,WACjCpI,KAAKoC,cAAgBpC,KAAK+D,SAAS+E,aACnC9I,KAAK5U,KAAO4U,KAAK+D,SAAS3Y,KAC1B4U,KAAK+D,YAIF9vB,QAAQyM,SAASsf,KAAKoB,cAAqC,KAArBpB,KAAKoB,YAAoB,CAC9DjtB,OAAO8tB,YAAYhrB,MACflE,KAAQitB,KAAKjtB,KACbovB,WAAcnC,KAAKmC,WACnBb,OAAUtB,KAAKsB,OACfF,YAAepB,KAAKoB,YACpBgB,cAAiBpC,KAAKoC,cACtBR,SAAY5B,KAAK4B,SACjBC,aAAgB7B,KAAK6B,eAIzB,IAAIpmB,IAAMtH,OAAOmvB,UAAUnsB,QAAQ6oB,MACnC7rB,OAAOmvB,UAAUjsB,OAAOoE,IAAK,GAIjCukB,KAAK8C,WAAY,EAGjB3uB,OAAO8vB,0BAAyB,KAIpC9vB,OAAOyoB,kBAAoB,SAASoD,MAChC,GAAiB,eAAdA,KAAKtlB,KAAuB,CAC3B,IAAIzG,QAAQU,SAASqrB,KAAKuC,UAGtB,MAAO,qBAFPvC,KAAOA,KAAKuC,SAMpB,MAAiB,aAAdvC,KAAKtlB,KACG,gBACa,cAAdslB,KAAKtlB,KACJ,YACa,WAAdslB,KAAKtlB,KACJ,eACa,YAAdslB,KAAKtlB,KACa,WAArBslB,KAAKwC,YACG,iBACqC,IAAtCxC,KAAKwC,YAAYrrB,QAAQ,SACxB,QAAU6oB,KAAKwC,YAAY3iB,MAAM,KAAK,GAAK,QAE3CmgB,KAAKwC,YAAc,aAN3B,GAYXruB,OAAO60B,uBAAyB,SAAShJ,MACpB,WAAdA,KAAKtlB,KAEJ5B,gBAAgBmwB,kBACZ90B,OAAO6V,KAAMgW,KAAK4B,UACF,cAAd5B,KAAKtlB,KAEX5B,gBAAgB8tB,gBACZzyB,OAAO6V,KAAMgW,KAAK6B,cAGtB/oB,gBAAgBowB,WACZ/0B,OAAO6V,KAAMgW,KAAK4B,UAI1B,IAAInmB,IAAMtH,OAAOmvB,UAAUnsB,QAAQ6oB,MACnC7rB,OAAOmvB,UAAUjsB,OAAOoE,IAAK,GAC7BtH,OAAO8vB,0BAAyB,IAIpC9vB,OAAOg1B,mBAAqB,SAASnJ,MACjC7rB,OAAOowB,cAAgBtO,eAAesK,UAEtC,IAAI6I,eAAiBpJ,KAAKwD,qBAAqB3jB,MAAM,KACrDmgB,KAAK+D,UACDsF,KAAMD,eAAe,GACrBE,UAAWF,eAAe,GAC1B9H,OAAQ,KACR8G,WAAY,GACZU,aAAc,KAKtB30B,OAAOo1B,wBAA0B,SAASvJ,MACtCyE,YAAYtwB,OAAOmvB,WACnBtD,KAAK8C,WAAY,EACjB3uB,OAAO8vB,0BAAyB,GAChC9vB,OAAOg1B,mBAAmBnJ,OAI9B7rB,OAAOq1B,oBAAsB,SAASxJ,MAClC,IAAI/pB,OAAQwsB,WAAazC,KAAKuC,SAASE,WAMvC,OAJIxsB,OADDhC,QAAQiR,QAAQud,YACNA,WAAWxsB,OAEX,EAE6B,QAAvC+pB,KAAKuC,SAASkF,sBACbxxB,OAAS,EACF+pB,KAAKjtB,KAAO,SAAWkD,OAAS,GACe,IAAhD9B,OAAO6V,KAAKzP,aAAapD,QAAQ,YACvC6oB,KAAKuC,SAASpI,QAGP6F,KAAKjtB,KAAO,SAAWkD,OAAS,GAEhC+pB,KAAKjtB,KAAO,SAAWkD,OAAS,IAK/C9B,OAAOs1B,0BAA4B,SAASzJ,MACxC,GAA0B,KAAvBA,KAAK+D,SAASsF,OA/rBHzE,OA+rB4B5E,KAAK+D,SAASsF,KA9rB1C,gBACCK,KAAK9E,SA+rBb,CACH,IAAI+E,MAAQ1J,iBAAiB2J,aACzB5J,KAAK+D,SAASsF,KAAMrJ,KAAK+D,SAASuF,WACtC,OAAGK,MAAQzJ,oBAEDyJ,MAAQ3J,KAAKuC,SAASd,gBAGdxB,iBAAiB4J,WAC3B7J,KAAK+D,SAASsF,KAAMrJ,KAAK+D,SAASuF,WACzBtJ,KAAKuC,SAASd,eAX/B,OAAO,EAhsBf,IAAkBmD,QAutBlBzwB,OAAO21B,0BAA4B,SAAS9J,MAExC,IAAG7rB,OAAOs1B,0BAA0BzJ,QAChC7rB,OAAOg0B,oBAAoBnI,KAAK+D,SAASqE,YAD7C,CAMA,IAAIuB,MAAQ1J,iBAAiB2J,aACzB5J,KAAK+D,SAASsF,KAAMrJ,KAAK+D,SAASuF,WAGlCF,eAAiBpJ,KAAKuC,SAASiB,qBAAqB3jB,MAAM,KAC3DmgB,KAAK+D,SAASsF,OAASD,eAAe,IACtCpJ,KAAK+D,SAASuF,YAAcF,eAAe,KAC1CO,MAAQ3J,KAAKuC,SAASd,gBAG1B,IAAIsI,YAAa,EACbC,gBAAkB71B,OAAOozB,wBAAwBvH,MAClD2J,OAASK,kBAERL,MAAQK,gBAERD,YAAa,GAIjB,IAAIrtB,UAaJ,GAZGzI,QAAQyM,SAASsf,KAAK+D,SAASzC,SACL,KAAzBtB,KAAK+D,SAASzC,SACd5kB,OAAO4kB,OAAStB,KAAK+D,SAASzC,OACE,KAA7BtB,KAAK+D,SAASqE,aACb1rB,OAAO0kB,YAAcpB,KAAK+D,SAASqE,WACnC1rB,OAAO0lB,cAAgBpC,KAAK+D,SAAS+E,eAG7ChwB,gBAAgBmxB,gBACZ91B,OAAO6V,KAAMgW,KAAK4B,SAAU+H,MAAOjtB,QAGpCqtB,WAAY,CACX,IAAItuB,IAAMtH,OAAOmvB,UAAUnsB,QAAQ6oB,MACnC7rB,OAAOmvB,UAAUjsB,OAAOoE,IAAK,GAEjCtH,OAAO8vB,0BAAyB,KAIpC9vB,OAAO+1B,qBAAuB,WAC1B,IAAIlI,aAMJ,OALA/tB,QAAQ4D,QAAQ1D,OAAO6tB,UAAW,SAASkB,UACpCA,SAASJ,WACRd,UAAU/qB,KAAKisB,YAGhBlB,WAKX7tB,OAAOkvB,yBAA2B,SAAS/c,OACpCrS,QAAQgI,YAAYqK,SACnBA,OAAQ,GAEZ,IAAI0b,UAAY7tB,OAAO+1B,uBACC,IAArBlI,UAAU/rB,OACT9B,OAAOkwB,cAAgBpO,eAAeC,KACX,IAArB8L,UAAU/rB,QAAgBqQ,MAChCnS,OAAOkwB,cAAgBpO,eAAeE,OAChC7P,QACNnS,OAAOkwB,cAAgBpO,eAAekK,OAGX,IAA5BhsB,OAAO6tB,UAAU/rB,OAChB9B,OAAOmwB,sBAAuB,EACxBtC,UAAU/rB,SAAW9B,OAAO6tB,UAAU/rB,OAC5C9B,OAAOmwB,sBAAuB,EAE9BnwB,OAAOmwB,sBAAuB,GAKtCnwB,OAAOg2B,qBAAuB,SAASjH,UACnCA,SAASJ,WAAaI,SAASJ,UAC/B3uB,OAAOkvB,0BAAyB,IAIpClvB,OAAOi2B,wBAA0B,WAC7Bn2B,QAAQ4D,QAAQ1D,OAAO6tB,UAAW,SAASkB,UACpC/uB,OAAOmwB,qBACNpB,SAASJ,WAAY,EAErBI,SAASJ,WAAY,IAG7B3uB,OAAOkvB,0BAAyB,IAKpClvB,OAAOk2B,oBAAsB,WACzB,OACIl2B,OAAO+xB,yBACN/xB,OAAOsN,eACRtN,OAAOkwB,gBAAkBpO,eAAeC,MACxC/hB,OAAOkwB,gBAAkBpO,eAAeE,QACxChiB,OAAOkwB,gBAAkBpO,eAAekK,OAIhDhsB,OAAOm2B,eAAiB,WACpB7F,YAAYtwB,OAAO6tB,WACnB7tB,OAAOkvB,0BAAyB,IAIpClvB,OAAOo2B,kBAAoB,SAASrH,UAChC,MAA6B,KAArBA,SAASF,UACR7uB,OAAO+xB,wBACR/xB,OAAOsN,eAInBtN,OAAOq2B,eAAiB,WACpBr2B,OAAOkwB,cAAgBpO,eAAeI,QAI1CliB,OAAOs2B,oBAAsB,SAASvH,UAClCuB,YAAYtwB,OAAO6tB,WACnBkB,SAASJ,WAAY,EACrB3uB,OAAOkvB,0BAAyB,GAChClvB,OAAOq2B,kBAIXr2B,OAAOu2B,sBAAwB,SAASxH,UACpCpqB,gBAAgB6xB,eACZx2B,OAAO6V,KAAMkZ,SAASvB,cAE1B,IAAIlmB,IAAMtH,OAAO6tB,UAAU7qB,QAAQ+rB,UACnC/uB,OAAO6tB,UAAU3qB,OAAOoE,IAAK,GAC7BtH,OAAOkvB,4BAIXlvB,OAAOy2B,kBAAoB,WACvB,GAAGz2B,OAAOizB,wBAA0BjzB,OAAOsN,cACvC,OAAO,EAGX,IAAI8I,SAAWpW,OAAO8yB,uBACtB,OAAuB,IAApB1c,SAAStU,UAEHsU,SAAS,GAAGgZ,iBACZpvB,OAAO2yB,uBAAuBvc,SAAS,KACnB,WAArBA,SAAS,GAAG7P,OAMxBvG,OAAO02B,eAAiB,WACpB,GAAI12B,OAAOy2B,oBAAX,CAKA,IAAI5K,KAAO7rB,OAAO8yB,uBAAuB,GACzCnuB,gBAAgB+xB,eACZ12B,OAAO6V,KAAMgW,KAAK4B,SAAU5B,KAAK6B,cAGrC,IAAIpmB,IAAMtH,OAAOmvB,UAAUnsB,QAAQ6oB,MACnC7rB,OAAOmvB,UAAUjsB,OAAOoE,IAAK,KAIjCtH,OAAO22B,yBAA2B,WAC9B,GAA+B,IAA5B32B,OAAO6tB,UAAU/rB,OAChB,MAAO,iDAEP,IAAIsU,SAAWpW,OAAO8yB,uBACtB,OAAuB,IAApB1c,SAAStU,OACL9B,OAAO2yB,uBAAuBvc,SAAS,IAElC,4DAEuB,WAArBA,SAAS,GAAG7P,KAEd,8DAEE6P,SAAS,GAAGgZ,eAEd,kGAIG,KAGJ,qDAMnBpvB,OAAO42B,gBAAkB,WACrB,QAAG52B,OAAOizB,wBAA0BjzB,OAAOsN,gBAKhC,OADDtN,OAAO22B,4BASrB32B,OAAO62B,aAAe,WACd72B,OAAO42B,oBAGX52B,OAAOowB,cAAgBtO,eAAeuK,OACtCrsB,OAAO2rB,cACH/sB,KAAM0mB,YAAY,UAClB7jB,OAAQzB,OAAO8yB,uBAAuB,GACtC/D,SAAU/uB,OAAO6tB,UAAU,GAC3BiJ,UAAW,YACX3J,OAAQ,KACR8G,WAAY,GACZU,aAAc,GACd1d,WAKRjX,OAAO+2B,cAAgB,SAAS5gB,SACN,OAAnBA,QAAQgX,QACPhX,QAAQ8d,WAAa,GACrB9d,QAAQwe,aAAe,IAKnB30B,OAAO8zB,eAAe3d,QAAQgX,QACH,SAAvBhX,QAAQ8d,aACR9d,QAAQ8d,WAAa,IAIzB9d,QAAQ8d,WAAa,QAMjCj0B,OAAOg3B,qBAAuB,WAC1B,IAAIl3B,QAAQU,SAASR,OAAO6V,QACvB/V,QAAQiR,QAAQ/Q,OAAO6V,KAAK6V,OAC7B,OAAO,EAGX,GAAgC,KAA7B1rB,OAAO2rB,aAAa/sB,KACnB,OAAO,EAEP,IAAIP,EAAGgzB,EACP,IAAIhzB,EAAI,EAAGA,EAAI2B,OAAO6V,KAAK6V,MAAM5pB,OAAQzD,IAAK,CAC1C,IAAIwtB,KAAO7rB,OAAO6V,KAAK6V,MAAMrtB,GAC7B,GAAG2B,OAAO2rB,aAAa/sB,OAASitB,KAAKjtB,KACjC,OAAO,EAEX,GAAGkB,QAAQiR,QAAQ8a,KAAKyC,YACpB,IAAI+C,EAAI,EAAGA,EAAIxF,KAAKyC,WAAWxsB,OAAQuvB,IAAK,CACxC,IAAI9C,UAAY1C,KAAKyC,WAAW+C,GAChC,GAAGrxB,OAAO2rB,aAAa/sB,OAAS2vB,UAAU3vB,KACtC,OAAO,GAM3B,OAAO,GAIXoB,OAAOi3B,oBAAsB,WACzB,OACKj3B,OAAOg3B,yBACPh3B,OAAOg0B,oBAAoBh0B,OAAO2rB,aAAasI,aAIxDj0B,OAAOk3B,6BAA+B,WAClC,GAAIl3B,OAAOi3B,sBAAX,CAKA,IAAI1uB,QACA3J,KAAMoB,OAAO2rB,aAAa/sB,KAC1Bu4B,UAAWn3B,OAAO2rB,aAAaoD,SAASvB,aACxC4J,WAAYp3B,OAAO2rB,aAAamL,WAEG,cAApC92B,OAAO2rB,aAAalqB,OAAO8E,KAC1BgC,OAAOmlB,aAAe1tB,OAAO2rB,aAAalqB,OAAOisB,aAEjDnlB,OAAOklB,SAAWztB,OAAO2rB,aAAalqB,OAAOgsB,SAE9C3tB,QAAQyM,SAASvM,OAAO2rB,aAAawB,SACL,KAA/BntB,OAAO2rB,aAAawB,SACpB5kB,OAAO4kB,OAASntB,OAAO2rB,aAAawB,OAME,KAAnCntB,OAAO2rB,aAAasI,aACnB1rB,OAAO0kB,YAAcjtB,OAAO2rB,aAAasI,WACzC1rB,OAAO0lB,cAAgBjuB,OAAO2rB,aAAagJ,eAGhD70B,QAAQiR,QAAQ/Q,OAAO2rB,aAAa1U,OAChCjX,OAAO2rB,aAAa1U,KAAKnV,OAAS,IACrCyG,OAAO0O,KAAOjX,OAAO2rB,aAAa1U,KAAK9O,IACnC,SAASkV,KAAO,OAAOA,IAAI5W,QAEnC9B,gBAAgBkyB,aAAa72B,OAAO6V,KAAMtN,QAG1C,IAAIjB,IAAMtH,OAAOmvB,UAAUnsB,QAAQhD,OAAO2rB,aAAalqB,QACvDzB,OAAOmvB,UAAUjsB,OAAOoE,IAAK,GAC7BtH,OAAO2rB,gBAGP3rB,OAAO8vB,0BAAyB,KAIpC9vB,OAAOq3B,cAAgB,WACnB,GAAGr3B,OAAOizB,wBAA0BjzB,OAAOsN,cACvC,OAAO,EAGX,IAAI8I,SAAWpW,OAAO8yB,uBACtB,GAAG1c,SAAStU,OAAS,EAAG,CACpB,IAAIzD,EACJ,IAAIA,EAAI,EAAGA,EAAI+X,SAAStU,OAAQzD,IAAK,CACjC,GAAG2B,OAAO2yB,uBAAuBvc,SAAS/X,IACtC,OAAO,EACJ,GAAwB,WAArB+X,SAAS/X,GAAGkI,KAClB,OAAO,EAGf,OAAO,EAEX,OAAO,GAIXvG,OAAOs3B,WAAa,WACZt3B,OAAOq3B,kBAGXr3B,OAAOowB,cAAgBtO,eAAewK,KACtCtsB,OAAO2rB,cACH/sB,KAAM0mB,YAAY,MAClBvb,QAAS/J,OAAO8yB,uBAChB/rB,KAAM,KACNwwB,UACApK,OAAQ,KACR8G,WAAY,GACZU,aAAc,GACd1d,SAEJjX,OAAO2rB,aAAa5kB,KAAO/G,OAAOw3B,wBAAwB,KAI9Dx3B,OAAOw3B,sBAAwB,WAC3B,IAAI13B,QAAQU,SAASR,OAAO2rB,gBACvB7rB,QAAQiR,QAAQ/Q,OAAO2rB,aAAa5hB,SACrC,SAGJ,IAAIoW,SAMJ,OALArgB,QAAQ4D,QAAQ+oB,WAAY,SAAS1lB,MAC9B/G,OAAO2rB,aAAa5hB,QAAQjI,QAAUiF,KAAK2lB,WAC1CvM,MAAMrd,KAAKiE,QAGZoZ,OAIXngB,OAAOy3B,gCAAkC,WACrC,IAAI1wB,KAAO/G,OAAO2rB,aAAa5kB,KAC/B,GAAGjH,QAAQgI,YAAYf,QAAUA,KAAK4lB,cAClC,OAAO,EAEP,IAAI+K,KAAO13B,OAAO2rB,aAAa5hB,QAAQjI,OAASiF,KAAK2lB,UAIrD,OAHGgL,KAAO,IACNA,KAAO,GAEJA,MAKf13B,OAAO23B,2BAA6B,WAChC,IAAIC,QAAU53B,OAAOy3B,kCACrB,OAAGG,SAAW,EACH,EAEAA,QAAU53B,OAAO2rB,aAAa4L,OAAOz1B,QAKpD9B,OAAO63B,iBAAmB,WACtB,OAAO73B,OAAOy3B,kCAAoC,GAItDz3B,OAAO83B,gBAAkB,WACrB93B,OAAO2rB,aAAa4L,WAIxBv3B,OAAO+3B,mBAAqB,SAASlM,MACjC,OAAI/rB,QAAQiR,QAAQ/Q,OAAO2rB,aAAa4L,UAKpB,IAFNv3B,OAAO2rB,aAAa4L,OAAOv0B,QACjC2jB,aAAakF,QAMzB7rB,OAAOg4B,kBAAoB,SAASnM,MAChC,OAAQ7rB,OAAO+3B,mBAAmBlM,OAItC7rB,OAAOi4B,sBAAwB,SAASpM,MACpC,IAAIvkB,IAAMtH,OAAO2rB,aAAa4L,OAAOv0B,QAAQ2jB,aAAakF,OACvDvkB,KAAO,GACNtH,OAAO2rB,aAAa4L,OAAOr0B,OAAOoE,IAAK,IAK/CtH,OAAOk4B,qBAAuB,SAASrM,MACnC,IAAI5b,IAAM0W,aAAakF,OAEX,IADF7rB,OAAO2rB,aAAa4L,OAAOv0B,QAAQiN,MAEzCjQ,OAAO2rB,aAAa4L,OAAOz0B,KAAKmN,MAKxCjQ,OAAOm4B,eAAiB,WACpB,GAAGr4B,QAAQgI,YAAY9H,OAAO2rB,aAAa5kB,MACvC,MAAO,GAEX,IAAI6lB,cAAgB5sB,OAAO2rB,aAAa5kB,KAAK6lB,cAC7C,IAAI9sB,QAAQsgB,WAAWwM,eACnB,MAAO,GAIX,IAAIE,SACA9sB,OAAO2rB,aAAa5hB,QAAQjI,OAC5B9B,OAAO2rB,aAAa4L,OAAOz1B,OAC3B+qB,QAAUuL,OAAOC,UACrBv4B,QAAQ4D,QAAQ1D,OAAO2rB,aAAa5hB,QAAS,SAAStI,QAGlD,IAAI62B,WACA72B,OAAO2sB,SAASd,gBAAkB7rB,OAAO2sB,SAAS8G,KACtDrI,QAAUoE,KAAKsH,IAAI1L,QAASyL,cAIhC,IAAIpD,KAAOtI,cAAcC,QAASC,UAClC,OAAOhB,iBAAiB0M,aAAatD,MAAMzE,QAI/CzwB,OAAOy4B,kBAAoB,WACvB,OACKz4B,OAAOg3B,yBACPh3B,OAAOg0B,oBAAoBh0B,OAAO2rB,aAAasI,aAIxDj0B,OAAO04B,2BAA6B,WAChC,GAAI14B,OAAOy4B,oBAAX,CAKA,IAAIlwB,QACA3J,KAAMoB,OAAO2rB,aAAa/sB,KAC1Bmf,MAAO/d,OAAO2rB,aAAa5kB,KAAKgX,MAChC4a,iBACArK,cACAsK,iBACAC,qBAEJ/4B,QAAQ4D,QAAQ1D,OAAO2rB,aAAa5hB,QAAS,SAAStI,QAC/CzB,OAAO+3B,mBAAmBt2B,QACN,cAAhBA,OAAO8E,KACNgC,OAAO+lB,WAAWxrB,KAAKrB,OAAOisB,cAE9BnlB,OAAOowB,cAAc71B,KAAKrB,OAAOgsB,UAGlB,cAAhBhsB,OAAO8E,KACNgC,OAAOswB,iBAAiB/1B,KAAKrB,OAAOisB,cAEpCnlB,OAAOqwB,cAAc91B,KAAKrB,OAAOgsB,YAI1C3tB,QAAQyM,SAASvM,OAAO2rB,aAAawB,SACL,KAA/BntB,OAAO2rB,aAAawB,SACpB5kB,OAAO4kB,OAASntB,OAAO2rB,aAAawB,OACE,KAAnCntB,OAAO2rB,aAAasI,aACnB1rB,OAAO0kB,YAAcjtB,OAAO2rB,aAAasI,WACzC1rB,OAAO0lB,cAAgBjuB,OAAO2rB,aAAagJ,eAGhD70B,QAAQiR,QAAQ/Q,OAAO2rB,aAAa1U,OAChCjX,OAAO2rB,aAAa1U,KAAKnV,OAAS,IACrCyG,OAAO0O,KAAOjX,OAAO2rB,aAAa1U,KAAK9O,IACnC,SAASkV,KAAO,OAAOA,IAAI5W,QAEnC9B,gBAAgB2yB,WAAWt3B,OAAO6V,KAAMtN,QAGxCzI,QAAQ4D,QAAQ1D,OAAO2rB,aAAa5hB,QAAS,SAAStI,QAClD,IAAI6F,IAAMtH,OAAOmvB,UAAUnsB,QAAQhD,OAAO2rB,aAAalqB,QACvDzB,OAAOmvB,UAAUjsB,OAAOoE,IAAK,KAEjCtH,OAAO2rB,gBAGP3rB,OAAO8vB,0BAAyB,KAIpC9vB,OAAO84B,qBAAuB,WAC1B,GAAG94B,OAAOizB,wBAA0BjzB,OAAOsN,cACvC,OAAO,EAGX,IAAI8I,SAAWpW,OAAO8yB,uBACtB,GAAG1c,SAAStU,OAAS,EAAG,CACpB,IAAIzD,EACJ,IAAIA,EAAI,EAAGA,EAAI+X,SAAStU,OAAQzD,IAAK,CACjC,GAAG+X,SAAS/X,GAAG+wB,eACX,OAAO,EACJ,GAAGpvB,OAAO2yB,uBAAuBvc,SAAS/X,IAC7C,OAAO,EACJ,GAAwB,WAArB+X,SAAS/X,GAAGkI,KAClB,OAAO,EAGf,OAAO,EAEX,OAAO,GAIXvG,OAAO+4B,kBAAoB,WACnB/4B,OAAO84B,yBAGX94B,OAAOowB,cAAgBtO,eAAeyK,aACtCvsB,OAAO2rB,cACH/sB,KAAM0mB,YAAY,MAClBvb,QAAS/J,OAAO8yB,0BAKxB9yB,OAAOg5B,sBAAwB,WAC3B,IAAIC,MAAQ,EAMZ,OALAn5B,QAAQ4D,QAAQ1D,OAAO2rB,aAAa5hB,QAAS,SAAStI,QAElDw3B,OACIx3B,OAAO2sB,SAASd,gBAAkB7rB,OAAO2sB,SAAS8G,OAEnDpJ,iBAAiB0M,aAAaS,OAAOxI,QAIhDzwB,OAAOk5B,yBAA2B,WAC9B,OAAQl5B,OAAOg3B,wBAInBh3B,OAAOm5B,kCAAoC,WACvC,GAAIn5B,OAAOk5B,2BAAX,CAKA,IAAI3wB,QACA3J,KAAMoB,OAAO2rB,aAAa/sB,KAC1B+5B,iBACArK,eAEJxuB,QAAQ4D,QAAQ1D,OAAO2rB,aAAa5hB,QAAS,SAAStI,QAC/B,cAAhBA,OAAO8E,KACNgC,OAAO+lB,WAAWxrB,KAAKrB,OAAOisB,cAE9BnlB,OAAOowB,cAAc71B,KAAKrB,OAAOgsB,YAGzC9oB,gBAAgBo0B,kBAAkB/4B,OAAO6V,KAAMtN,QAG/CzI,QAAQ4D,QAAQ1D,OAAO2rB,aAAa5hB,QAAS,SAAStI,QAClD,IAAI6F,IAAMtH,OAAOmvB,UAAUnsB,QAAQhD,OAAO2rB,aAAalqB,QACvDzB,OAAOmvB,UAAUjsB,OAAOoE,IAAK,KAEjCtH,OAAO2rB,gBAGP3rB,OAAO8vB,0BAAyB,KAIpC9vB,OAAOo5B,oBAAsB,SAASvN,MAClC,MAAiB,WAAdA,KAAKtlB,QAEEslB,KAAKuC,SAASd,eAAiBvB,qBAQ7C/rB,OAAOq5B,uBAAyB,SAASxN,MACrC7rB,OAAOowB,cAAgBtO,eAAe0K,eACtCX,KAAK8C,WAAY,EAEjB,IAAIsG,eAAiBpJ,KAAKwD,qBAAqB3jB,MAAM,KACjD4tB,WAAazN,KAAKjtB,KAAO,MAC7BitB,KAAK+D,UACDhxB,KAAM0mB,YAAYgU,YAClBpE,KAAMD,eAAe,GACrBE,UAAWF,eAAe,GAC1B9H,OAAQ,KACRlW,UAKRjX,OAAOu5B,2BAA6B,SAAS1N,MACzC,QAAI/rB,QAAQyM,SAASsf,KAAK+D,SAAShxB,QAKhB,IAFFitB,KAAK+D,SAAShxB,KAAKoE,QAAQ6oB,KAAKjtB,KAAO,MAGpDitB,KAAK+D,SAAShxB,KAAKkD,QAAU+pB,KAAKjtB,KAAKkD,OAAS,GAChDqvB,mBAAmBtF,KAAK+D,SAAShxB,QAKzCoB,OAAOw5B,4BAA8B,SAAS3N,MACtC/rB,QAAQyM,SAASsf,KAAK+D,SAAShxB,QAIjB,IADDitB,KAAK+D,SAAShxB,KAAKoE,QAAQ6oB,KAAKjtB,KAAO,OAEpDitB,KAAK+D,SAAShxB,KAAOitB,KAAKjtB,KAAO,OAKzCoB,OAAOy5B,8BAAgC,SAAS5N,MAE5C,OAAO7rB,OAAOs1B,0BAA0BzJ,OAI5C7rB,OAAO05B,8BAAgC,SAAS7N,MAE5C,KAAG7rB,OAAOu5B,2BAA2B1N,OACjC7rB,OAAOy5B,8BAA8B5N,OACrC7rB,OAAOg0B,oBAAoBnI,KAAK+D,SAASqE,aAF7C,CAOA,IAAIuB,MAAQ1J,iBAAiB2J,aACzB5J,KAAK+D,SAASsF,KAAMrJ,KAAK+D,SAASuF,WAGlCF,eAAiBpJ,KAAKuC,SAASiB,qBAAqB3jB,MAAM,KAC3DmgB,KAAK+D,SAASsF,OAASD,eAAe,IACtCpJ,KAAK+D,SAASuF,YAAcF,eAAe,KAC1CO,MAAQ3J,KAAKuC,SAASd,gBAIvBkI,MAAQ3J,KAAKuC,SAASd,iBACrBkI,MAAQ3J,KAAKuC,SAASd,gBAI1B,IAAIsI,YAAa,EACdJ,QAAU3J,KAAKuC,SAASd,iBACvBsI,YAAa,GAIjB,IAAIh3B,KAAOitB,KAAK+D,SAAShxB,KAAK6M,MAAMogB,KAAKjtB,KAAKkD,OAAS,GAGnDyG,UAkBJ,GAjBGzI,QAAQyM,SAASsf,KAAK+D,SAASzC,SACL,KAAzBtB,KAAK+D,SAASzC,SACd5kB,OAAO4kB,OAAStB,KAAK+D,SAASzC,OACE,KAA7BtB,KAAK+D,SAASqE,aACb1rB,OAAO0kB,YAAcpB,KAAK+D,SAASqE,WACnC1rB,OAAO0lB,cAAgBpC,KAAK+D,SAAS+E,eAG1C70B,QAAQiR,QAAQ8a,KAAK+D,SAAS3Y,OAC1B4U,KAAK+D,SAAS3Y,KAAKnV,OAAS,IAC/ByG,OAAO0O,KAAO4U,KAAK+D,SAAS3Y,KAAK9O,IAC7B,SAASkV,KAAO,OAAOA,IAAI5W,QAEnC9B,gBAAgBg1B,oBACZ35B,OAAO6V,KAAMgW,KAAK4B,SAAU7uB,KAAM42B,MAAOjtB,QAG1CqtB,WAAY,CACX,IAAItuB,IAAMtH,OAAOmvB,UAAUnsB,QAAQ6oB,MACnC7rB,OAAOmvB,UAAUjsB,OAAOoE,IAAK,GAEjCtH,OAAO8vB,0BAAyB,KAMpC9vB,OAAO+xB,qBAAuB,WAC1B,IAAI6H,SAAWjtB,aAAamG,cAC5B,OAAIhT,QAAQU,SAASo5B,YAAc95B,QAAQU,SAASR,OAAO6V,QACrD+jB,SAASC,cACVD,SAASnxB,WAAazI,OAAO6V,KAAKikB,UAE7Bh6B,QAAQU,SAASR,OAAO6V,QAED,KAD5B,QAAS,aAAa7S,QACnBhD,OAAO6V,KAAK8I,UAUxB3e,OAAO+5B,uBAAyB,WAC5B,SAAGj6B,QAAQU,SAASR,OAAO6V,QACvB/V,QAAQiR,QAAQ/Q,OAAO6V,KAAKmkB,yBACrBh6B,OAAO6V,KAAKmkB,sBAAsBl4B,OAAS,GAM1D9B,OAAOgB,QAAQ8d,iBAAiB,oBAAqB9e,2HCl/D5D,WAEG,SAASi6B,oBACL3Z,KAAK6M,OAAS,QACd7M,KAAK2T,WAAa,GAClB3T,KAAKqU,aAAe,GAGxBsF,kBAAkBv6B,UAAUw6B,QAAU,WAClC,OAAO5Z,KAAK2T,WAAWkG,WAAW,MAGtCF,kBAAkBv6B,UAAU06B,SAAW,WACnC,IAAIC,OAAS/Z,KAAK6M,QAMlB,OAJI7M,KAAK2T,WAAWkG,WAAW,MAC3BE,MAAMv3B,KAAK,MAAQwd,KAAK2T,YAGpB3T,KAAK6M,QACb,IAAK,QAGD,IAAI+H,KAAO5U,KAAKqU,aAAa9D,MAAM,oBACtB,OAATqE,OACgB,MAAZA,KAAK,GACLmF,MAAMv3B,KAAK,cAAgBoyB,KAAK,GAAK,eAErCmF,MAAMv3B,KAAK,cAAgBoyB,KAAK,GAAK,WASjD,OAAOmF,MAAMC,KAAK,MAgDtBx6B,QAAQ1B,OAAO,QAAQ2B,WACnB,6BACI,SA/CR,SAAmCC,QAG/BA,OAAOu6B,SAAW,KAGlBv6B,OAAOw6B,qBAAuB,WAC1Bx6B,OAAOu6B,SAAW,WAItBv6B,OAAOy6B,6BAA+B,WACV,YAApBz6B,OAAOu6B,WACPv6B,OAAOu6B,SAAW,UAqC9Bz6B,QAAQ1B,OAAO,QAAQ2B,WACnB,sCACI,SAAU,kBAlClB,SAA4CC,OAAQ2E,iBAEhD3E,OAAOgtB,WAAa,IAAIiN,kBACxBj6B,OAAO6G,YAAc,KAErB7G,OAAOkP,OAAO,aAAc,SAAS8d,YACjChtB,OAAO6G,YAAcmmB,WAAWoN,aACjC,GAEHp6B,OAAO06B,SAAW,WACd,OAAO16B,OAAOgtB,WAAWkN,WAG7Bl6B,OAAO26B,MAAQ,WACXh2B,gBAAgBi2B,uBACZ56B,OAAO6V,KAAM7V,OAAOgtB,WAAWG,OAC/BntB,OAAOgtB,WAAWiH,WAClBj0B,OAAOgtB,WAAW2H,cACtB30B,OAAOy6B,gCAGXz6B,OAAOmD,OAAS,WACZnD,OAAOgtB,WAAa,IAAIiN,kBACxBj6B,OAAOy6B,mCAjFlB,6FCDD36B,QAAQ1B,OAAO,QAAQ2B,WAAW,wBAC9B,SAAU,aAAc,eACxB,kBAAmB,qBAAsB,uBACzC,uBAAwB,eAAgB,SAASC,OAAQoJ,WACrDC,aAAc1E,gBAAiBoK,mBAAoB8rB,qBACnDz6B,qBAAsBwM,cAGtB,IAAIkuB,cAAgB,KAcpB,SAAS7iB,WAAWpC,MAChB7V,OAAO6V,KAAOA,KACd7V,OAAO4J,QAAS,EAGhBkxB,cAAgBD,qBAAqBE,WAAWllB,KAAKxN,IACrDrI,OAAOyZ,OAASqhB,cAAc35B,WAC9BnB,OAAOg7B,KAAOF,cAAcG,iBAC5BH,cAAcI,YAAYl3B,KAAK,WAC3BhE,OAAOm7B,cAAe,IAI1Bn7B,OAAOkP,OAAO,YAAa,WACvB9F,WAAW5H,MAAQxB,OAAO6V,KAAKC,KAAO,cAzB9C1M,WAAW5H,MAAQ,aACnB4H,WAAWO,KAAO,QAGlB3J,OAAO4J,QAAS,EAChB5J,OAAO6V,KAAO,KACd7V,OAAOyZ,UACPzZ,OAAOm7B,cAAe,EACtBn7B,OAAOg7B,KAAO,EAsBdh7B,OAAO4d,aAAe,SAASC,OAC3B,IAAIpX,KAAOoX,MAAMtX,KAAKM,YAKtB,OAJG/G,QAAQyM,SAASsR,MAAMhX,cACtBgX,MAAMhX,YAAY/E,OAAS,IAC3B2E,MAAQ,MAAQoX,MAAMhX,aAEnBJ,MAIXzG,OAAOo7B,SAAW,WACdp7B,OAAOg7B,MAAQ,EACfF,cAAcO,gBAAgBr7B,OAAOg7B,OAGhB,eAAtB3xB,aAAa9C,MACZvG,OAAOka,aAAenL,mBACtB/O,OAAOqf,UAAY,eAEnBrf,OAAOka,aAAevV,gBACtB3E,OAAOqf,UAAY,WAGvBjf,qBAAqB6I,YACjBjJ,OAAQA,OAAOka,cAAclW,KAAK,WAGlC,IAAIub,WAAavf,OAAOka,aAAajM,gBAClCnO,QAAQU,SAAS+e,aAChBA,WAAWxP,YAAc1G,aAAa0G,UACtCkI,WAAWsH,YAEXvf,OAAOka,aAAa3L,cAChBlF,aAAa0G,WAAW/L,KAAK,SAAS6R,MAClCoC,WAAWpC,OACZ,SAASvU,OACRsL,aAAa0B,WAAWhN,WAQxCtB,OAAOkJ,IAAI,WAAY,WAChBpJ,QAAQU,SAASs6B,gBAChBA,cAAcQ,yGCvF9Bx7B,QAAQ1B,OAAO,QAAQ2B,WAAW,wBAC9B,SAAU,aAAc,eAAgB,YACxC,kBAAmB,qBAAsB,4BACzC,uBAAwB,eACxB,SAASC,OAAQoJ,WAAYC,aAAcC,UAAW3E,gBAC7CoK,mBAAoBwsB,0BACpBn7B,qBAAsBwM,cA6B3B,SAASqL,WAAWpC,MAChB7V,OAAO6V,KAAOA,KACd7V,OAAO4J,QAAS,EAGhB,IAAI4xB,mBAAqBD,0BAA0BR,WAC/C/6B,OAAO6V,MACP4lB,gBAAkBttB,SAAS9E,aAAahB,GAAI,IAChDmzB,mBAAmBE,QAAQD,iBAAiBz3B,KAAK,SAASua,QACtDve,OAAOue,OAASA,OAChBve,OAAO27B,gBAAgB37B,OAAO47B,QAC9B57B,OAAO67B,cAAe,EACtBzyB,WAAW5H,MAAQxB,OAAO6V,KAAKC,KAAO,MAClC9V,OAAOue,OAAO3f,OAxC1BwK,WAAW5H,MAAQ,aACnB4H,WAAWO,KAAO,QAGlB3J,OAAO4J,QAAS,EAChB5J,OAAO67B,cAAe,EACtB77B,OAAO6V,KAAO,KACd7V,OAAO47B,OAAS,WAChB57B,OAAOue,OAAS,KAEhBve,OAAO27B,gBAAkB,SAASC,QAC9B57B,OAAO47B,OAASA,OAChB57B,OAAO4I,KAAO,aACW2yB,0BAA0BR,WAC/C/6B,OAAO6V,MACQ8lB,gBACf37B,OAAOue,OAAOlW,GAAIrI,OAAO47B,QAAQ53B,KAC7B,SAAS4E,MAED5I,OAAO4I,KADC,KAATA,KACe,cAEAA,QAwBlC5I,OAAOkP,OAAO,YAAa,WACpBpP,QAAQU,SAASR,OAAO6V,OACxB/V,QAAQU,SAASR,OAAOue,UACvBnV,WAAW5H,MAAQxB,OAAO6V,KAAKC,KAAO,MAClC9V,OAAOue,OAAO3f,QAID,eAAtByK,aAAa9C,MACZvG,OAAOka,aAAenL,mBACtB/O,OAAOqf,UAAY,eAEnBrf,OAAOka,aAAevV,gBACtB3E,OAAOqf,UAAY,WAGvBjf,qBAAqB6I,YACjBjJ,OAAQA,OAAOka,cAAclW,KAAK,WAGlC,IAAIub,WAAavf,OAAOka,aAAajM,gBAClCnO,QAAQU,SAAS+e,aAChBA,WAAWxP,YAAc1G,aAAa0G,UACtCkI,WAAWsH,YAEXvf,OAAOka,aAAa3L,cAChBlF,aAAa0G,WAAW/L,KAAK,SAAS6R,MAClCoC,WAAWpC,OACZ,SAASvU,OACRsL,aAAa0B,WAAWhN,WAQxCtB,OAAOkJ,IAAI,WAAY,WACnB,IAAIsyB,mBAAqBD,0BAA0BR,WAC/C/6B,OAAO6V,MACR/V,QAAQU,SAASg7B,qBAChBA,mBAAmBF,0GC9FnCx7B,QAAQ1B,OAAO,QAAQ2B,WAAW,yBAC9B,SAAU,eAAgB,kBAAmB,qBAC7C,4BAA6B,uBAAwB,eACrD,SAASC,OAAQqJ,aAAc1E,gBAAiBoK,mBACvCwsB,0BAA2Bn7B,qBAAsBwM,cAuBtD,SAASkvB,aACL,IAEIC,iBAA2D,IAAxC/7B,OAAOg8B,KAAK1lB,iBAAiBxU,OACpD9B,OAAOg8B,KAAK1lB,iBAAiBxU,OAAS,EAKnC9B,OAAOi8B,sBACFj8B,OAAOi8B,qBAAqBn6B,OAAS,IACL,IAA5B9B,OAAO6V,KAAKmG,aACgB,IAA5Bhc,OAAO6V,KAAKmG,aACgB,KAA5Bhc,OAAO6V,KAAKmG,cACpBhc,OAAOg8B,KAAK1lB,iBAAiBxT,MACzBtB,MAAS,sBACT6G,GAAMrI,OAAOi8B,qBAAqB,GAAG5zB,KAG7CrI,OAAOg8B,KAAK1lB,iBAAiBxT,MACzBtB,MAAS,wBACT6G,GAAM,iBAEVrI,OAAOg8B,KAAK1lB,iBAAiBxT,MACzBtB,MAAS,uBACT6G,GAAM,gBAEN0zB,kBACuC,IAAxC/7B,OAAOg8B,KAAK1lB,iBAAiBxU,SAGtB9B,OAAOk8B,aACbH,kBAA2C,IAAvB/7B,OAAOg8B,KAAKl6B,UAEhC9B,OAAOg8B,KAAKjwB,OAAS/L,OAAOg8B,KAAK1lB,iBAAiB,IAJlDtW,OAAOg8B,KAAKjwB,OAAS/L,OAAOg8B,KAAK1lB,iBAAiB,GAS1D,SAAS2B,WAAWpC,MAChB7V,OAAO6V,KAAOA,KACd7V,OAAO4J,QAAS,EAEhB5J,OAAOw7B,mBAAqBD,0BAA0BR,WAClDllB,KAAM7V,OAAOuY,QAAQC,MACzBxY,OAAOw7B,mBAAmBN,YAAYl3B,KAAK,WACvChE,OAAOm8B,sBACHn8B,OAAOw7B,mBAAmBW,sBAC9Bn8B,OAAOo8B,gBACHp8B,OAAOw7B,mBAAmBY,gBAC9Bp8B,OAAOi8B,qBACHj8B,OAAOw7B,mBAAmBS,qBAC9Bj8B,OAAOq8B,QAAUr8B,OAAOw7B,mBAAmBa,QAEhB,SAAxBr8B,OAAOuY,QAAQC,OACdsjB,aACA97B,OAAOkP,OAAO,uBAAwB4sB,YAAY,GAClD97B,OAAOkP,OACH,uBAAwBlP,OAAOs8B,iBAAiB,IAExDt8B,OAAOu8B,eAAgB,IAhF/Bv8B,OAAOw7B,mBAAqB,KAE5Bx7B,OAAOm8B,sBAAwB,KAC/Bn8B,OAAOo8B,gBAAkB,KACzBp8B,OAAOi8B,qBAAuB,KAC9Bj8B,OAAOq8B,QAAU,KAGjBr8B,OAAOg8B,MACHjwB,OAAQ,KACRuK,qBAGJtW,OAAOw8B,UAAY,aAGnBx8B,OAAO4J,QAAS,EAChB5J,OAAOu8B,eAAgB,EACvBv8B,OAAO6V,KAAO,KAkEW,eAAtBxM,aAAa9C,KACZvG,OAAOka,aAAenL,mBAEtB/O,OAAOka,aAAevV,gBAG1BvE,qBAAqB6I,YACjBjJ,OAAQA,OAAOka,cAAclW,KAAK,WAG9B,IAAIub,WAAavf,OAAOka,aAAajM,gBAClCnO,QAAQU,SAAS+e,aACjBA,WAAWxP,YAAc1G,aAAa0G,UACrCkI,WAAWsH,YAEXvf,OAAOka,aAAa3L,cAChBlF,aAAa0G,WAAW/L,KAAK,SAAS6R,MAClCoC,WAAWpC,OACZ,SAASvU,OACRsL,aAAa0B,WAAWhN,WAK5CtB,OAAOs8B,gBAAkB,WAErB,GADAt8B,OAAOw8B,UAAY,aACfx8B,OAAO6V,KAEL,GAA6B,gBAA1B7V,OAAOg8B,KAAKjwB,OAAO1D,GACxBrI,OAAOka,aAAauiB,cAAcz8B,OAAO6V,MAAM7R,KAC3C,SAAS43B,QACL57B,OAAOw8B,UAAYZ,cAEzB,GAA6B,iBAA1B57B,OAAOg8B,KAAKjwB,OAAO1D,GACxBrI,OAAOka,aAAawiB,eAAe18B,OAAO6V,MAAM7R,KAC5C,SAAS43B,QACL57B,OAAOw8B,UAAYZ,aAExB,CACH,IACIv9B,EADAkgB,OAAS,KAGb,IAAIlgB,EAAI,EAAGA,EAAI2B,OAAOi8B,qBAAqBn6B,OAAQzD,IAC/C,GAAG2B,OAAOi8B,qBAAqB59B,GAAGgK,KAC/BrI,OAAOg8B,KAAKjwB,OAAO1D,GAAI,CACtBkW,OAASve,OAAOi8B,qBAAqB59B,GACrC,MAGR,OAAOkgB,OAAOI,QACV,KAAK,EACD3e,OAAOw8B,UAAY,uBACnB,MACJ,KAAK,EACDx8B,OAAOw8B,UAAY,0BACnB,MACJ,KAAK,EACDx8B,OAAOw7B,mBAAmBG,gBACtBpd,OAAOlW,GAAI,YAAYrE,KAAK,SAAS43B,QAE7B57B,OAAOw8B,UADG,KAAXZ,OAEK,sDAGeA,SAG/B,MACJ,KAAK,EACD57B,OAAOw7B,mBAAmBG,gBACtBpd,OAAOlW,GAAI,YAAYrE,KAAK,SAAS43B,QAE7B57B,OAAOw8B,UADG,KAAXZ,OAEK,mDAGeA,SAG/B,MACJ,KAAK,EACD57B,OAAOw8B,UACH,wCACJ,MACJ,KAAK,EACDx8B,OAAOw8B,UAAY,4BACnB,MACJ,QACIx8B,OAAOw8B,UAAY,2BACfje,OAAOI,UAM3B3e,OAAO28B,YAAc,SAASpe,QAC1BA,OAAOqe,iBAAkB,EAEtB98B,QAAQiR,QAAQwN,OAAOse,cACtBte,OAAOue,iBAAkB,GAG7Bve,OAAOwe,iBAAkB,EACzB/8B,OAAOw7B,mBAAmBwB,YAAYze,OAAOlW,IAAIrE,KAC7C,SAASi5B,SACL1e,OAAOse,aAAeI,QACtB1e,OAAOwe,iBAAkB,EACzBxe,OAAOue,iBAAkB,MAOrC98B,OAAOkJ,IAAI,WAAY,WAChBpJ,QAAQU,SAASR,OAAOw7B,qBACvBx7B,OAAOw7B,mBAAmBF,wGC/M1Cx7B,QAAQ1B,OAAO,QAAQ2B,WAAW,uBAC9B,SAAU,YAAa,aAAc,eAAgB,YACrD,kBAAmB,iBAAkB,qBACrC,iBAAkB,uBAAwB,gBAC1C,eAAgB,eAAgB,kBAAmB,iBACnD,kBACA,SAASC,OAAQoV,UAAWhM,WAAYC,aAAcC,UAClD3E,gBAAiB1E,eAAgB8O,mBAAoBnK,eACrDxE,qBAAsB88B,cAAex4B,aAAciI,aACnD2I,gBAAiBC,eAAgB4nB,iBAGjC,IAAI3nB,sBACAC,SAAU,WACVC,QAAS,UACTC,OAAU,UAkMd,SAASynB,kBAAkB1wB,KACvB,IAAID,OAASzM,OAAOq9B,KAAK3wB,KAAKD,OAAO6wB,cACrC,MAAkB,kBAAX7wB,QAAyC,gBAAXA,OAIzC,SAAS8wB,kBAAkB7wB,KACvB1M,OAAOq9B,KAAK3wB,KAAK8wB,gBAAkBx9B,OAAOq9B,KAAK3wB,KAAKD,OACpDzM,OAAOq9B,KAAK3wB,KAAKD,OAAS,gBAI9B,SAASgxB,kBAAkB/wB,KACpB0wB,kBAAkB1wB,OACjB1M,OAAOq9B,KAAK3wB,KAAKD,OAASzM,OAAOq9B,KAAK3wB,KAAK8wB,gBAC3Cx9B,OAAO09B,cAAchxB,MAK7B,SAASixB,yBAAyBjxB,KAE9B,GAA8C,IAA3C1M,OAAOq9B,KAAK3wB,KAAKkxB,eAAe97B,OAAnC,CAMA,IAAIzD,EACJ,IAAIA,EAAI,EAAGA,EAAI2B,OAAOq9B,KAAK3wB,KAAKkxB,eAAe97B,OAAQzD,IACnD,IAAI2B,OAAOq9B,KAAK3wB,KAAKkxB,eAAev/B,GAAGswB,UAEnC,YADA3uB,OAAOq9B,KAAK3wB,KAAKmxB,oBAAqB,GAI9C79B,OAAOq9B,KAAK3wB,KAAKmxB,oBAAqB,OAZlC79B,OAAOq9B,KAAK3wB,KAAKmxB,oBAAqB,EAe9C,SAASC,YAAYpxB,KACjBqxB,oBAAoBrxB,KACpB+wB,kBAAkB/wB,KAClB1M,OAAOq9B,KAAK3wB,KAAKsI,aAAe,KAChChV,OAAOq9B,KAAK3wB,KAAKsxB,cAAgB,KACtB,UAARtxB,KAA2B,aAARA,MAIf5M,QAAQsgB,WACPpgB,OAAOq9B,KAAK3wB,KAAK+L,YAAY8D,SAC7Bvc,OAAOq9B,KAAK3wB,KAAK+L,YAAY8D,SAEjCvc,OAAOq9B,KAAK3wB,KAAKmM,kBAAkBC,WAAY,EAC/C9Y,OAAOq9B,KAAK3wB,KAAKmM,kBAAkBE,gBAAiB,EACpD/Y,OAAOq9B,KAAK3wB,KAAKmM,kBAAkBG,aAAc,EACjDhZ,OAAOq9B,KAAK3wB,KAAKmM,kBAAkBI,gBAAiB,EACpDjZ,OAAOq9B,KAAK3wB,KAAKmM,kBAAkBK,cAAe,GAEtDlZ,OAAOq9B,KAAK3wB,KAAKyM,0BACjBnZ,OAAOq9B,KAAK3wB,KAAK0M,iBAIrB,SAAS6kB,kBAAkBvxB,KACsB,IAA1C1M,OAAOq9B,KAAK3wB,KAAKwxB,cAAcp8B,QAC9Bg8B,YAAYpxB,KAEb1M,OAAOq9B,KAAK3wB,KAAKsI,eAAiBooB,kBAAkB1wB,OACnD1M,OAAOq9B,KAAK3wB,KAAKsI,aAAe,MAQxC,SAASmpB,kBAAkBzxB,KACuB,IAA3C1M,OAAOq9B,KAAK3wB,KAAKkxB,eAAe97B,QACH,KAA5B9B,OAAOq9B,KAAK3wB,KAAKD,QACjBzM,OAAOq9B,KAAK3wB,KAAKD,SAAWzM,OAAOq9B,KAAK3wB,KAAK8wB,kBAC7Cx9B,OAAOq9B,KAAK3wB,KAAKD,OAAS,GAC1BzM,OAAO09B,cAAchxB,MAM7B,SAAS0xB,uBAAuB1xB,KAC5B,IAAIrO,EAEJ,IADA2B,OAAOq9B,KAAK3wB,KAAK2xB,iBAAmB,EAChChgC,EAAI,EAAGA,EAAI2B,OAAOq9B,KAAK3wB,KAAKwxB,cAAcp8B,OAAQzD,IAAK,CACvC2B,OAAOs+B,eACnBt+B,OAAOq9B,KAAK3wB,KAAKwxB,cAAc7/B,GAAIqO,OAEnC1M,OAAOq9B,KAAK3wB,KAAK2xB,kBAAoB,GAEzCr+B,OAAOq9B,KAAK3wB,KAAKwxB,cAAc7/B,GAAGkgC,eAAgB,GAK1D,SAASR,oBAAoBrxB,KACzB,IAAI8xB,SAAWx+B,OAAOq9B,KAAK3wB,KAAK+xB,eAChCD,SAASE,UAAYF,SAASvF,MAAQ,EACtCuF,SAASG,UACTH,SAASnmB,sBAAuB,EAChCmmB,SAASI,eAAiB,EAkB9B,SAASC,oBAAoBnyB,KACrB1M,OAAO8+B,iBAAiBpyB,KAO5B5M,QAAQ4D,QAAQ1D,OAAOq9B,KAAK3wB,KAAKqyB,QAAQ59B,WACjC,SAAS0U,OACa,IAAvBA,KAAK0oB,eACJv+B,OAAOq9B,KAAK3wB,KAAKqyB,QAAQC,aAAanpB,KAAK9F,aAT3C/P,OAAOi/B,qBAAqBvyB,OAC3BoxB,YAAYpxB,KACZ6wB,kBAAkB7wB,MA7T/BtD,WAAW5H,MAAQ,QACnB4H,WAAWO,KAAO,QAGlB3J,OAAOk/B,MAAQv6B,gBAAgBxD,WAC/BnB,OAAOgF,MAAQN,aAAavD,WAC5BnB,OAAO+J,QAAU9J,eAAekB,WAChCnB,OAAOmQ,YAAcpB,mBAAmB5N,WACxCnB,OAAOm/B,SAAWhC,gBAAgBh8B,WAClCnB,OAAOo/B,aAAyC,OAA1B/1B,aAAa81B,SACnCn/B,OAAOyO,YAAc,QACrBzO,OAAOsY,OAAS1T,eAAeM,QAAQ,UACvClF,OAAOuZ,QAAUhE,eAAepU,WAChCnB,OAAO0O,SAAU,EAEjB1O,OAAOq9B,QAEPr9B,OAAOq9B,KAAK6B,SACZl/B,OAAOq9B,KAAK6B,MAAMG,UAAY,WAC9Br/B,OAAOq9B,KAAK6B,MAAMzwB,YAAc,QAChCzO,OAAOq9B,KAAK6B,MAAMH,QAAUp6B,gBAC5B3E,OAAOq9B,KAAK6B,MAAM1B,gBAAkB,GACpCx9B,OAAOq9B,KAAK6B,MAAMzyB,OAAS,GAC3BzM,OAAOq9B,KAAK6B,MAAMI,aAAc,EAChCt/B,OAAOq9B,KAAK6B,MAAMhB,cAAgBv5B,gBAAgB46B,mBAClDv/B,OAAOq9B,KAAK6B,MAAMM,SAAW76B,gBAAgB86B,cAC7Cz/B,OAAOq9B,KAAK6B,MAAMQ,QAAUxC,cAAcyC,iBAC1C3/B,OAAOq9B,KAAK6B,MAAMlqB,aAAe,KACjChV,OAAOq9B,KAAK6B,MAAMU,kBAAoBh7B,eAAeM,QACjD,mBACJlF,OAAOq9B,KAAK6B,MAAMb,iBAAmB,EACrCr+B,OAAOq9B,KAAK6B,MAAMT,gBACdxF,MAAO,EACPyF,UAAW,EACXC,UACAtmB,sBAAsB,EACtBumB,eAAgB,GAEpB5+B,OAAOq9B,KAAK6B,MAAMzmB,aACdC,QAAS,KACTC,QAAS,KACTC,WAAY,MAEhB5Y,OAAOq9B,KAAK6B,MAAMlB,cAAgB,KAClCh+B,OAAOq9B,KAAK6B,MAAMrmB,mBACdC,WAAW,EACXC,gBAAgB,EAChBC,aAAa,EACbC,gBAAgB,EAChBC,cAAc,GAElBlZ,OAAOq9B,KAAK6B,MAAM7lB,kBAClBrZ,OAAOq9B,KAAK6B,MAAM/lB,0BAClBnZ,OAAOq9B,KAAK6B,MAAM9lB,iBAGlBpZ,OAAOq9B,KAAKtzB,WACZ/J,OAAOq9B,KAAKtzB,QAAQs1B,UAAY,UAChCr/B,OAAOq9B,KAAKtzB,QAAQ0E,YAAc,UAClCzO,OAAOq9B,KAAKtzB,QAAQg1B,QAAU9+B,eAC9BD,OAAOq9B,KAAKtzB,QAAQyzB,gBAAkB,GACtCx9B,OAAOq9B,KAAKtzB,QAAQ0C,OAAS,GAC7BzM,OAAOq9B,KAAKtzB,QAAQu1B,aAAc,EAClCt/B,OAAOq9B,KAAKtzB,QAAQm0B,cAAgBj+B,eAAes/B,mBACnDv/B,OAAOq9B,KAAKtzB,QAAQ6zB,kBACpB59B,OAAOq9B,KAAKtzB,QAAQM,UAAY,OAChCrK,OAAOq9B,KAAKtzB,QAAQ8zB,oBAAqB,EACzC79B,OAAOq9B,KAAKtzB,QAAQy1B,SAAWv/B,eAAew/B,cAC9Cz/B,OAAOq9B,KAAKtzB,QAAQ21B,QAAUxC,cAAcyC,iBAC5C3/B,OAAOq9B,KAAKtzB,QAAQG,OAAS,OAC7BlK,OAAOq9B,KAAKtzB,QAAQiL,aAAe,KACnChV,OAAOq9B,KAAKtzB,QAAQ61B,kBAAoBh7B,eAAeM,QACnD,kBACJlF,OAAOq9B,KAAKtzB,QAAQs0B,iBAAmB,EACvCr+B,OAAOq9B,KAAKtzB,QAAQ00B,gBAChBxF,MAAO,EACPyF,UAAW,EACXC,UACAtmB,sBAAsB,EACtBumB,eAAgB,GAEpB5+B,OAAOq9B,KAAKtzB,QAAQi0B,cAAgB,KAGpCh+B,OAAOq9B,KAAKltB,eACZnQ,OAAOq9B,KAAKltB,YAAYkvB,UAAY,cACpCr/B,OAAOq9B,KAAKltB,YAAY1B,YAAc,cACtCzO,OAAOq9B,KAAKltB,YAAY4uB,QAAUhwB,mBAClC/O,OAAOq9B,KAAKltB,YAAYqtB,gBAAkB,GAC1Cx9B,OAAOq9B,KAAKltB,YAAY1D,OAAS,GACjCzM,OAAOq9B,KAAKltB,YAAYmvB,aAAc,EACtCt/B,OAAOq9B,KAAKltB,YAAY+tB,cACpBnvB,mBAAmBwwB,mBACvBv/B,OAAOq9B,KAAKltB,YAAYytB,kBACxB59B,OAAOq9B,KAAKltB,YAAY9F,UAAY,OACpCrK,OAAOq9B,KAAKltB,YAAY0tB,oBAAqB,EAC7C79B,OAAOq9B,KAAKltB,YAAYqvB,SAAWzwB,mBAAmB0wB,cACtDz/B,OAAOq9B,KAAKltB,YAAYuvB,QAAUxC,cAAcyC,iBAChD3/B,OAAOq9B,KAAKltB,YAAYjG,OAAS,OACjClK,OAAOq9B,KAAKltB,YAAY6E,aAAe,KAEvChV,OAAOq9B,KAAKltB,YAAYyvB,kBAAoBh7B,eAAeM,QACvD,2BACJlF,OAAOq9B,KAAKltB,YAAYkuB,iBAAmB,EAC3Cr+B,OAAOq9B,KAAKltB,YAAYsuB,gBACpBxF,MAAO,EACPyF,UAAW,EACXC,UACAtmB,sBAAsB,EACtBumB,eAAgB,GAEpB5+B,OAAOq9B,KAAKltB,YAAY6tB,cAAgB,KACxCh+B,OAAOq9B,KAAKltB,YAAY0vB,gBACxB7/B,OAAOq9B,KAAKltB,YAAY2vB,eAAgB,EACxC9/B,OAAOq9B,KAAKltB,YAAY4vB,YAAcztB,YAAY0tB,aAClDhgC,OAAOq9B,KAAKltB,YAAY8vB,eAAiB3tB,YAAY4tB,gBAGrDlgC,OAAOq9B,KAAK8B,YACZn/B,OAAOq9B,KAAK8B,SAASE,UAAY,WACjCr/B,OAAOq9B,KAAK8B,SAAS1wB,YAAc,WACnCzO,OAAOq9B,KAAK8B,SAASJ,QAAU5B,gBAC/Bn9B,OAAOq9B,KAAK8B,SAAS3B,gBAAkB,GACvCx9B,OAAOq9B,KAAK8B,SAAS1yB,OAAS,GAC9BzM,OAAOq9B,KAAK8B,SAASG,aAAc,EACnCt/B,OAAOq9B,KAAK8B,SAASjB,cAAgBf,gBAAgBoC,mBACrDv/B,OAAOq9B,KAAK8B,SAAS90B,UAAY,OACjCrK,OAAOq9B,KAAK8B,SAAStB,oBAAqB,EAC1C79B,OAAOq9B,KAAK8B,SAASK,SAAWrC,gBAAgBsC,cAChDz/B,OAAOq9B,KAAK8B,SAASO,QAAUxC,cAAcyC,iBAC7C3/B,OAAOq9B,KAAK8B,SAASj1B,OAAS,OAC9BlK,OAAOq9B,KAAK8B,SAASnqB,aAAe,KAEpChV,OAAOq9B,KAAK8B,SAASS,kBAAoBh7B,eAAeM,QACpD,mBACJlF,OAAOq9B,KAAK8B,SAASd,iBAAmB,EACxCr+B,OAAOq9B,KAAK8B,SAASV,gBACjBxF,MAAO,EACPyF,UAAW,EACXC,UACAtmB,sBAAsB,EACtBumB,eAAgB,GAEpB5+B,OAAOq9B,KAAK8B,SAAS1mB,aACjBC,QAAS,KACTC,QAAS,KACTC,WAAY,MAEhB5Y,OAAOq9B,KAAK8B,SAASnB,cAAgB,KACrCh+B,OAAOq9B,KAAK8B,SAAShmB,0BACrBnZ,OAAOq9B,KAAK8B,SAAStmB,mBACjBC,WAAW,EACXC,gBAAgB,EAChBC,aAAa,EACbC,gBAAgB,EAChBC,cAAc,GAElBlZ,OAAOq9B,KAAK8B,SAAS9lB,kBAIrBrZ,OAAOmgC,kBAAoB,KAC3BngC,OAAOogC,qBAECxhC,KAAM,UACN4C,MAAO,YAGP5C,KAAM,UACN4C,MAAO,YAOfxB,OAAO8E,iBAAmB,KAK1B9E,OAAOiB,eAAiB,KAIxBjB,OAAOkJ,IAAI,oBAAqB,WAC5BlJ,OAAOmgC,kBAAoB,OAgJ/BngC,OAAOqgC,UAAY,SAAS3zB,KACxBtD,WAAW5H,MAAQxB,OAAOq9B,KAAK3wB,KAAK2yB,UACpCr/B,OAAOyO,YAAc/B,IACrBpD,UAAUmD,OAAO,MAAOC,MAI5B1M,OAAOsgC,YAAc,SAAS5zB,KAC1B1M,OAAOq9B,KAAK3wB,KAAKD,OAAS,GAC1BzM,OAAO09B,cAAchxB,MAIzB1M,OAAOugC,cAAgB,SAAS1qB,KAAMnJ,KACvB,UAARA,KAA2B,aAARA,MACf1M,OAAOq9B,KAAK3wB,KAAKqyB,QAAQyB,WAAW3qB,KAAK9F,WACxC/P,OAAOq9B,KAAK3wB,KAAKqyB,QAAQC,aAAanpB,KAAK9F,WAE3C/P,OAAOq9B,KAAK3wB,KAAKqyB,QAAQ0B,WAAW5qB,KAAK9F,WAE7C4tB,yBAAyBjxB,MAE7B0xB,uBAAuB1xB,KACvBuxB,kBAAkBvxB,MAItB1M,OAAO0gC,eAAiB,SAASh0B,KAClB,UAARA,KAA2B,aAARA,MACf1M,OAAOq9B,KAAK3wB,KAAKmxB,mBAChB/9B,QAAQ4D,QACJ1D,OAAOq9B,KAAK3wB,KAAKkxB,eAAgB,SAAS/nB,MACtC7V,OAAOq9B,KAAK3wB,KAAKqyB,QAAQC,aACrBnpB,KAAK9F,aAGjBjQ,QAAQ4D,QACJ1D,OAAOq9B,KAAK3wB,KAAKkxB,eAAgB,SAAS/nB,MACtC7V,OAAOq9B,KAAK3wB,KAAKqyB,QAAQ0B,WACrB5qB,KAAK9F,aAGrB4tB,yBAAyBjxB,MAE7B0xB,uBAAuB1xB,KACvBuxB,kBAAkBvxB,MAGtB1M,OAAO2gC,qBAAuB,SAASzB,MAAOxyB,KACtB,IAAjBwyB,MAAMp9B,QACuB,KAA5B9B,OAAOq9B,KAAK3wB,KAAKD,QACjBzM,OAAOq9B,KAAK3wB,KAAKD,SAAWzM,OAAOq9B,KAAK3wB,KAAK8wB,kBAC7Cx9B,OAAOq9B,KAAK3wB,KAAKD,OAAS,GAC1BzM,OAAO09B,cAAchxB,OAM7B1M,OAAOkY,iBAAiB,8BAA+B,WACnDylB,yBAAyB,WACzBQ,kBAAkB,aAEtBn+B,OAAOkY,iBAAiB,kCAAmC,WACvDylB,yBAAyB,eACzBQ,kBAAkB,iBAItBn+B,OAAO4gC,aAAe,SAASl0B,KAC3B6wB,kBAAkB7wB,KAClB1M,OAAO09B,cAAchxB,MAIzB1M,OAAO6gC,aAAe,SAASt6B,KAAMlH,MAAOqN,KAGrC5M,QAAQU,SAASR,OAAOq9B,KAAK3wB,KAAKsI,gBAGrChV,OAAOq9B,KAAK3wB,KAAKgzB,QAAUxC,cAAc2D,aACrC7gC,OAAOq9B,KAAK3wB,KAAKgzB,QAASn5B,KAAMlH,OAAO,GAC3CW,OAAOq9B,KAAK3wB,KAAKD,OAASywB,cAAc4D,gBACpC9gC,OAAOq9B,KAAK3wB,KAAKgzB,WAIzB1/B,OAAO+gC,eAAiB,SAASx6B,KAAMlH,MAAOqN,KAC1C,OAAOwwB,cAAc6D,eACjB/gC,OAAOq9B,KAAK3wB,KAAKgzB,QAASn5B,KAAMlH,OAAO,IAI/CW,OAAO09B,cAAgB,SAAShxB,KAC5B,IAAIgzB,QAAUxC,cAAc8D,kBACxBhhC,OAAOq9B,KAAK3wB,KAAKD,QACN,OAAZizB,SACC1/B,OAAOq9B,KAAK3wB,KAAKgzB,QAAUxC,cAAcyC,iBACzC3/B,OAAOq9B,KAAK3wB,KAAK4yB,aAAc,IAE/Bt/B,OAAOq9B,KAAK3wB,KAAKgzB,QAAUA,QAC3B1/B,OAAOq9B,KAAK3wB,KAAK4yB,aAAc,GAEnCrB,kBAAkBvxB,MAItB1M,OAAOuK,UAAY,SAASF,UAAWqC,KACnC1M,OAAOq9B,KAAK3wB,KAAKrC,UAAYA,UAC7BrK,OAAOq9B,KAAK3wB,KAAKlC,SAAWxK,OAAOq9B,KAAK3wB,KAAKlC,SAIjDxK,OAAOihC,mBAAqB,SAAS52B,UAAWqC,KACzC1M,OAAOq9B,KAAK3wB,KAAKxC,SAAWG,UAC3BrK,OAAOq9B,KAAK3wB,KAAKxC,OAASG,UAE1BrK,OAAOuK,UAAUF,UAAWqC,MAKpC1M,OAAOs+B,eAAiB,SAASzoB,KAAMnJ,KACnC,OAAI1M,OAAOq9B,KAAK3wB,KAAKsI,cAGda,KAAKa,QAAQ1T,QAChBhD,OAAOq9B,KAAK3wB,KAAKsI,aAAapW,OAAS,GAI/CoB,OAAOkhC,qBAAuB,SAASx0B,KACnC0xB,uBAAuB1xB,KACvB6wB,kBAAkB7wB,KAGN,UAARA,IACG5M,QAAQU,SAASR,OAAO8E,mBACvB9E,OAAO8E,iBAAiBnD,OAEd,YAAR+K,KACH5M,QAAQU,SAASR,OAAOiB,iBACvBjB,OAAOiB,eAAeU,QAMlC3B,OAAOgb,cAAgB,SAAStO,KAC5B,SAAG5M,QAAQU,SAASR,OAAOq9B,KAAK3wB,KAAKsI,eACM,WAAvChV,OAAOq9B,KAAK3wB,KAAKsI,aAAapW,MACQ,IAAtCoB,OAAOq9B,KAAK3wB,KAAK2xB,kBACkB,IAAlCr+B,OAAOsY,OAAO6C,SAASrZ,QACU,IAAlC6K,aAAa0O,mBAG4B,IAAtCrb,OAAOq9B,KAAK3wB,KAAK2xB,kBAI5Br+B,OAAOib,cAAgB,SAASvO,KAC5B,OAAyC,IAAtC1M,OAAOq9B,KAAK3wB,KAAK2xB,qBAGjBv+B,QAAQU,SAASR,OAAOq9B,KAAK3wB,KAAKsI,eACM,WAAvChV,OAAOq9B,KAAK3wB,KAAKsI,aAAapW,MACI,IAAlCoB,OAAOsY,OAAO6C,SAASrZ,SAO/B9B,OAAOob,cAAgB,SAAS1O,KAC5B,OAAyC,IAAtC1M,OAAOq9B,KAAK3wB,KAAK2xB,qBAGjBv+B,QAAQU,SAASR,OAAOq9B,KAAK3wB,KAAKsI,eACM,WAAvChV,OAAOq9B,KAAK3wB,KAAKsI,aAAapW,MACI,IAAlC+N,aAAa0O,mBAOrBrb,OAAOub,aAAe,SAAS7O,KAC3BqxB,oBAAoBrxB,KACpB+wB,kBAAkB/wB,KAClB1M,OAAOq9B,KAAK3wB,KAAKsI,aAAe,MAIpChV,OAAOwb,SAAW,SAAS9O,KACvB,IACIrO,EADAod,SAGJ,GAA0C,WAAvCzb,OAAOq9B,KAAK3wB,KAAKsI,aAAapW,MAC7BkB,QAAQyM,SAASvM,OAAOq9B,KAAK3wB,KAAK+L,YAAYC,UAC9C5Y,QAAQyM,SAASvM,OAAOq9B,KAAK3wB,KAAK+L,YAAYE,SAAU,CAKxD8C,MAAM/C,QAAU1Y,OAAOq9B,KAAK3wB,KAAK+L,YAAYC,QAC7C,IAAIC,QAAU3Y,OAAOq9B,KAAK3wB,KAAK+L,YAAYE,QAE3CA,SADAA,QAAUA,QAAQjN,MAAM,MACNiN,QAAQ7W,OAAO,GACjC2Z,MAAMC,cAAgB/C,QAEnB7Y,QAAQyM,SAASvM,OAAOq9B,KAAK3wB,KAAK+L,YAAYG,cAC7C5Y,OAAOq9B,KAAK3wB,KAAK+L,YAAYG,WAAW5V,QAAQ,SAC7C,GACHhD,OAAOq9B,KAAK3wB,KAAK+L,YAAYG,WAAW5V,QAAQ,QAC7C,KACHyY,MAAM7C,WAAa5Y,OAAOq9B,KAAK3wB,KAAK+L,YAAYG,iBAEjD,GAA0C,aAAvC5Y,OAAOq9B,KAAK3wB,KAAKsI,aAAapW,MACpCkB,QAAQyC,SAASvC,OAAOq9B,KAAK3wB,KAAKsxB,cAAc31B,IAEhDoT,MAAM0lB,QAAUnhC,OAAOq9B,KAAK3wB,KAAKsxB,cAAc31B,QAC5C,GAA0C,eAAvCrI,OAAOq9B,KAAK3wB,KAAKsI,aAAapW,KAAuB,CAS3D,IAPA6c,MAAME,WACF3b,OAAOq9B,KAAK3wB,KAAKmM,kBAAkBC,UACvC2C,MAAMG,gBACF5b,OAAOq9B,KAAK3wB,KAAKmM,kBAAkBE,eACvC0C,MAAMI,aACF7b,OAAOq9B,KAAK3wB,KAAKmM,kBAAkBG,YACvCyC,MAAMK,yBACFzd,EAAE,EAAEA,EAAE2B,OAAOq9B,KAAK3wB,KAAKyM,uBAAuBrX,OAAOzD,IACrDod,MAAMK,sBAAsBhZ,KACxB9C,OAAOq9B,KAAK3wB,KAAKyM,uBAAuB9a,GAAGgK,IAcnD,IAZGrI,OAAOq9B,KAAK3wB,KAAKmM,kBAAkBI,gBAClCwC,MAAMK,sBAAsBhZ,KAAK,mBAElC9C,OAAOq9B,KAAK3wB,KAAKmM,kBAAkBK,cAClCuC,MAAMK,sBAAsBhZ,KAAK,iBAEK,IAAvC2Y,MAAMK,sBAAsBha,QAG3B2Z,MAAMK,sBAAsBhZ,KAAK,QAErC2Y,MAAMM,mBACF1d,EAAE,EAAEA,EAAE2B,OAAOq9B,KAAK3wB,KAAK0M,cAActX,OAAOzD,IAC5Cod,MAAMM,gBAAgBjZ,KAClB9C,OAAOq9B,KAAK3wB,KAAK0M,cAAc/a,GAAGgK,IAEN,IAAjCoT,MAAMM,gBAAgBja,QAErB2Z,MAAMM,gBAAgBjZ,KAAK,aAE5B,GAA0C,SAAvC9C,OAAOq9B,KAAK3wB,KAAKsI,aAAapW,KAAiB,CACrD,IAAIoB,OAAOq9B,KAAK3wB,KAAK+xB,eAAepmB,qBAAsB,CACtD,IAAImmB,SAAWx+B,OAAOq9B,KAAK3wB,KAAK+xB,eAChC,IAAIpgC,EAAE,EAAEA,EAAE2B,OAAOq9B,KAAK3wB,KAAKwxB,cAAcp8B,OAAOzD,IACS,IAAlD2B,OAAOq9B,KAAK3wB,KAAKwxB,cAAc7/B,GAAG2d,cAEjCwiB,SAASnmB,sBAAuB,EAChCmmB,SAASI,kBAGjB,GAAqD,GAAlD5+B,OAAOq9B,KAAK3wB,KAAK+xB,eAAeG,eAC/B,OAOR,IAHAnjB,MAAME,WACF3b,OAAOq9B,KAAK3wB,KAAKmM,kBAAkBC,UACvC2C,MAAMM,mBACF1d,EAAE,EAAEA,EAAE2B,OAAOq9B,KAAK3wB,KAAK0M,cAActX,OAAOzD,IAC5Cod,MAAMM,gBAAgBjZ,KAClB9C,OAAOq9B,KAAK3wB,KAAK0M,cAAc/a,GAAGgK,IAEN,IAAjCoT,MAAMM,gBAAgBja,QAErB2Z,MAAMM,gBAAgBjZ,KAAK,YAEc,YAAvC9C,OAAOq9B,KAAK3wB,KAAKsI,aAAapW,OAEpC6c,MAAMQ,MACFjc,OAAOq9B,KAAK3wB,KAAK2M,eAAe4C,MACpCR,MAAMS,aACFlc,OAAOq9B,KAAK3wB,KAAK2M,eAAe8C,YACpCV,MAAMW,YACFpc,OAAOq9B,KAAK3wB,KAAK2M,eAAegD,YAIxC0hB,oBAAoBrxB,KACpB1M,OAAOq9B,KAAK3wB,KAAK+xB,eAAexF,MAC5Bj5B,OAAOq9B,KAAK3wB,KAAKwxB,cAAcp8B,OAGnChC,QAAQ4D,QAAQ1D,OAAOq9B,KAAK3wB,KAAKwxB,cAAe,SAASroB,MACrD7V,OAAOq9B,KAAK3wB,KAAKqyB,QAAQziB,cACrBzG,KAAM7V,OAAOq9B,KAAK3wB,KAAKsI,aAAapW,KACpC6c,OAAOzX,KAAK,WACRhE,OAAOq9B,KAAK3wB,KAAK+xB,eAAeC,WAAa,EAC7C7oB,KAAK0oB,eAAgB,EACrBM,oBAAoBnyB,MACrB,SAASpL,QA/UxB,SAAkCoL,IAAKpL,MAAOuU,MAC1C,IAAI2oB,SAAWx+B,OAAOq9B,KAAK3wB,KAAK+xB,eAChCD,SAASE,WAAa,EACtB,IAAIQ,MAAQV,SAASG,OAAOr9B,OACzBxB,QAAQgI,YAAYo3B,OACnBV,SAASG,OAAOr9B,QAAUuU,MAE1BqpB,MAAMp8B,KAAK+S,MAyUHurB,CAAyB10B,IAAKpL,MAAOuU,MACrCA,KAAK0oB,eAAgB,EACrBM,oBAAoBnyB,UAMpC1M,OAAOi/B,qBAAuB,SAASvyB,KACnC,IAAI8xB,SAAWx+B,OAAOq9B,KAAK3wB,KAAK+xB,eAChC,OAAOD,SAASvF,MAAQ,GAAKuF,SAASE,YAAcF,SAASvF,OAIjEj5B,OAAO8+B,iBAAmB,SAASpyB,KAC/B,OAAO3N,OAAOiR,KACVhQ,OAAOq9B,KAAK3wB,KAAK+xB,eAAeE,QAAQ78B,OAAS,GAIzD9B,OAAOqhC,yBAA2B,WAC3BrhC,OAAOmgC,mBACNngC,OAAO8E,iBAAiBpD,KACpB1B,OAAOmgC,kBAAkBvhC,OAKrCoB,OAAOshC,UAAY,WACfthC,OAAOiB,eAAeS,QAI1B1B,OAAOuhC,gBAAkB,WACrBvhC,OAAOiB,eAAekC,UAI1BnD,OAAOwZ,sBAAwB,SAAS5Y,cACpC,OAAO4U,qBAAqB5U,eAIhCZ,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAGxBtN,OAAO4e,8BAAgC,WACnC,IAAIvgB,EACJ,IAAIA,EAAE,EAAEA,EAAE2B,OAAOuZ,QAAQzX,OAAOzD,IAC5B,GAAqC,IAAlC2B,OAAOuZ,QAAQlb,GAAGwgB,YACjB,OAAO,EAGf,OAAO,GAMXze,qBAAqB8D,aAAalE,QAC9B2E,gBAAiB1E,eAAgB8O,mBACjCnK,eAAgBF,aAAciI,aAAc2I,gBAC5CC,eAAgB4nB,kBAAkBn5B,KAAK,WACnChE,OAAO0O,SAAU,IAIzB9J,eAAeoC,aAAahH,OAAQ,UAGpCA,OAAOkJ,IAAI,WAAY,WACnBkM,UAAUjS,OAAOnD,OAAOwhC,YACxB58B,eAAeqC,YAAYjH,OAAQ,UACnCk9B,cAAcuE,aAAa,QAASzhC,OAAOq9B,KAAK6B,MAAMQ,SACtDxC,cAAcuE,aAAa,UAAWzhC,OAAOq9B,KAAKtzB,QAAQ21B,SAC1DxC,cAAcuE,aACV,cAAezhC,OAAOq9B,KAAKltB,YAAYuvB,SAC3CxC,cAAcuE,aACV,WAAYzhC,OAAOq9B,KAAK8B,SAASO,WAIzC,IAAIgC,YAAcxE,cAAcyE,gBAAgB,SAC7C7hC,QAAQU,SAASkhC,eAChB1hC,OAAOq9B,KAAK6B,MAAMzyB,OAASywB,cAAc4D,gBACrCY,aACJ1hC,OAAO09B,cAAc,UAEzB,IAAIkE,cAAgB1E,cAAcyE,gBAAgB,WAC/C7hC,QAAQU,SAASohC,iBAChB5hC,OAAOq9B,KAAKtzB,QAAQ0C,OAASywB,cAAc4D,gBACvCc,eACJ5hC,OAAO09B,cAAc,YAEzB,IAAImE,kBAAoB3E,cAAcyE,gBAAgB,eACnD7hC,QAAQU,SAASqhC,qBAChB7hC,OAAOq9B,KAAKltB,YAAY1D,OAASywB,cAAc4D,gBAC3Ce,mBACJ7hC,OAAO09B,cAAc,gBAEzB,IAAIoE,eAAiB5E,cAAcyE,gBAAgB,YAChD7hC,QAAQU,SAASshC,kBAChB9hC,OAAOq9B,KAAK8B,SAAS1yB,OAASywB,cAAc4D,gBACxCgB,gBACJ9hC,OAAO09B,cAAc,aAKD,UAArBr0B,aAAaqD,KAAwC,YAArBrD,aAAaqD,KACnB,gBAArBrD,aAAaqD,KACQ,aAArBrD,aAAaqD,KACjB1M,OAAOqgC,UAAUh3B,aAAaqD,KAIlC,IAAI6N,MAAQlR,aAAakR,MACtBza,QAAQyM,SAASgO,SAChBva,OAAOq9B,KAAKr9B,OAAOyO,aAAahC,OAAS8N,MACzCva,OAAO09B,cAAc19B,OAAOyO,2GCtwBxC3O,QAAQ1B,OAAO,QAAQ2B,WAAW,wBAC9B,SAAU,aAAc,YAAa,eACrC,cAAe,iBAAkB,eAAgB,iBACjD,eAAgB,uBAAwB,eAAgB,SACpDC,OAAQoJ,WAAYE,UAAWD,aAC/B04B,YAAan9B,eAAgB+H,aAAcxM,eAC3CuE,aAActE,qBAAsBwM,cAGpCxD,WAAW5H,MAAQ,aACnB4H,WAAWO,KAAO,OAGlB3J,OAAO4J,QAAS,EAChB5J,OAAOgiC,IAAM,KACbhiC,OAAOiiC,WAAaF,YACpB/hC,OAAOgN,QACLjB,OAAQ,KACRoK,UAEIvX,KAAM,UACN4C,MAAO,UACP0gC,SAAU,UACVC,UAAWriC,QAAQsiC,KAAKL,YAAaA,YAAYM,WAGjDzjC,KAAM,SACN4C,MAAO,SACP0gC,SAAU,SACVC,UAAWriC,QAAQsiC,KAAKL,YAAaA,YAAYO,cAGrDC,YAAY,EACZjhC,MAAO,MAETtB,OAAOwiC,SACLx1B,QACEpO,KAAM,UACN4C,MAAO,UACP0gC,SAAU,WAEZ71B,KACEo2B,UACEl8B,KAAM,QACN2uB,KAAM,EACNje,QACAyrB,MAAM,MAIZ1iC,OAAOqF,YAAcT,eAAeM,QAAQ,eAC5ClF,OAAOoB,QAAUjB,eAAegB,WAChCnB,OAAOgF,MAAQN,aAAavD,WAC5BnB,OAAOuY,SACLC,KAAM,WAERxY,OAAO2iC,eAAiB,kBACxB3iC,OAAOiW,SAAU,EAGjBjW,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAKxBtN,OAAO2c,0BAA4B,WAE/B,OAAO3c,OAAOqF,YAAYvD,OAAS,GAIvC9B,OAAO8W,QAAU,WACb,OACI9W,OAAO2c,6BACH3c,OAAOsN,eAInBtN,OAAO4iC,qBAAuB,WACtB5iC,OAAO8W,YAGX9W,OAAOiW,SAAU,IAIrBjW,OAAO6iC,yBAA2B,WAC9B7iC,OAAOiW,SAAU,GAIrBjW,OAAOgb,cAAgB,WACnB,OAA+B,OAAxBhb,OAAOgN,OAAO1L,OAIzBtB,OAAO8iC,oBAAsB,WAEzB9iC,OAAOgN,OAAO1L,MAAQ,MAI1BtB,OAAOub,aAAe,WAClBvb,OAAOgN,OAAOjB,OAAS,KACvB/L,OAAOgN,OAAO1L,MAAQ,MAI1BtB,OAAOwb,SAAW,WACdxb,OAAOgN,OAAOu1B,YAAa,EAC3BviC,OAAOgN,OAAOjB,OAAOo2B,UAAUniC,OAAOgiC,KAAKh+B,KAAK,WAET,WAA9BhE,OAAOgN,OAAOjB,OAAOnN,MACpB0K,UAAUkD,KAAK,SAEnBxM,OAAOgN,OAAOu1B,YAAa,EAC3BviC,OAAOgN,OAAOjB,OAAS,KACvB/L,OAAOgN,OAAO1L,MAAQ,MACvB,SAASA,OACRtB,OAAOgN,OAAOu1B,YAAa,EAC3BviC,OAAOgN,OAAO1L,MAAQA,SAKhCtB,OAAO+iC,gBAAkB,WACrB,IAAI1kC,EACJ,IAAIA,EAAI,EAAGA,EAAI2B,OAAOqF,YAAYvD,OAAQzD,IAAK,CAC3C,IAAIuJ,WAAa5H,OAAOqF,YAAYhH,GACpC,GAAGuJ,WAAWhJ,OAASoB,OAAOgiC,IAAIz7B,KAC9B,OAAOqB,WAAWf,YAG1B,OAAO7G,OAAOgiC,IAAIz7B,MAItBvG,OAAOgjC,WAAa,WAChB,QAAGljC,QAAQU,SAASR,OAAOgiC,OACfhiC,OAAOsN,eACXtN,OAAOgiC,IAAIiB,aAAajgC,QAAQ,eAAiB,IAO7DhD,OAAOkjC,eAAiB,WACpBljC,OAAOgN,OAAOjB,OAAS/L,OAAOwiC,QAAQx1B,QAI1ChN,OAAOmjC,kBAAoB,SAAS56B,SAChCA,OAASzI,QAAQyE,KAAKgE,SACfF,GAAKrI,OAAOgiC,IAAI35B,GAEvB,IAAI+6B,OAASpjC,OAAOwiC,QAAQn2B,IAAIo2B,QAAQhkB,KAAK,SAASgF,EAAGC,GACvD,OAAGD,EAAEif,OAAShf,EAAEgf,KACP,EACCjf,EAAEif,OAAShf,EAAEgf,MACb,EAED,IAIPD,WAWJ,OAVA3iC,QAAQ4D,QAAQ0/B,OAAQ,SAASvX,KAAMvkB,KACrC,IAAI+7B,WAAa/7B,IAAM,IAAMukB,KAAKqJ,KAC9Bje,KAAO4U,KAAK5U,KAAK9O,IAAI,SAASkV,KAChC,OAAOA,IAAI5W,OAEbwQ,KAAK/T,OAAO,EAAG,EAAG2oB,KAAKtlB,MACvB88B,YAAc,IAAMpsB,KAAKqjB,KAAK,KAAO,IACrCmI,QAAQ3/B,KAAKugC,cAEf96B,OAAOk6B,QAAUA,QAAQnI,KAAK,KACvB/xB,QAIXvI,OAAOsjC,cAAgB,WACrBtjC,OAAOwiC,QAAQn2B,KACbo2B,UACEl8B,KAAM,QACN2uB,KAAM,EACNje,QACAyrB,MAAM,KAGV1iC,OAAOgN,OAAOjB,OAAS,MAIzB/L,OAAOujC,kBAAoB,WACzB,IAAId,SACFl8B,KAAM,QACN2uB,KAAM,EACNje,QACAyrB,MAAM,GAEL1iC,OAAOgiC,IAAIiB,aAAajgC,QAAQ,kBAAoB,IACrDy/B,QAAQl8B,KAAO,SAEjBvG,OAAOwiC,QAAQn2B,IAAIo2B,QAAQ3/B,KAAK2/B,UAIlCziC,OAAOwjC,mBAAqB,SAASf,SACnC3iC,QAAQ4D,QAAQ1D,OAAOwiC,QAAQn2B,IAAIo2B,QAAS,SAAS5W,MACnDA,KAAK6W,MAAO,IAEdD,QAAQC,MAAO,GAIjB1iC,OAAOyjC,kBAAoB,SAAShB,SAClC,IAAIn7B,IAAMtH,OAAOwiC,QAAQn2B,IAAIo2B,QAAQz/B,QAAQy/B,SAC1Cn7B,KAAO,GACRtH,OAAOwiC,QAAQn2B,IAAIo2B,QAAQv/B,OAAOoE,IAAK,IAK3CtH,OAAO0jC,cAAgB,WACnB1jC,OAAOkP,OAAO,WAAY,WACtB9F,WAAW5H,MAAQ,OAASxB,OAAOgiC,IAAIpjC,OAE3CoB,OAAOkP,OAAO,mBAAoB,WAE9B,IAAI5H,IAAMtH,OAAOgN,OAAOmJ,QAAQnT,QAC5BhD,OAAOwiC,QAAQx1B,QACfhN,OAAOgjC,cAKK,IAAT17B,KACCtH,OAAOgN,OAAOmJ,QAAQjT,OAClB,EAAG,EAAGlD,OAAOwiC,QAAQx1B,QAN1B1F,KAAO,GACNtH,OAAOgN,OAAOmJ,QAAQjT,OAAOoE,IAAK,KAS9CtH,OAAOkP,OAAO,gBAAiB,SAASy0B,IAAK3/B,MAGtC2/B,KAAoB,YAAbA,IAAI/kC,OACNoF,MAAsB,YAAdA,KAAKpF,OACboB,OAAOwiC,QAAQn2B,IAAI5L,OACfN,eAAeY,mBAAmBsH,GACtCrI,OAAOwiC,QAAQn2B,IAAIlG,KACfzB,aAAak/B,iBAAiBv7B,QAOlDjI,qBAAqB8D,aAAalE,QAC9B+hC,YAAan9B,eAAgB+H,aAC7BxM,eAAgBuE,eAAeV,KAAK,WAKpC,IAAI6/B,UAAY9B,YAAY9zB,gBACzBnO,QAAQU,SAASqjC,YAChBA,UAAUx7B,KAAO8F,SAAS9E,aAAahB,GAAI,KAC3CrI,OAAOgiC,IAAM6B,UACb7jC,OAAO4J,QAAS,EAChB5J,OAAO2iC,eAAiB,WAAa3iC,OAAOgiC,IAAI35B,GAChDrI,OAAO0jC,iBAEP3B,YAAYxzB,cACRJ,SAAS9E,aAAahB,GAAI,KAAKrE,KAAK,SAASg+B,KACzChiC,OAAOgiC,IAAMA,IACbhiC,OAAO4J,QAAS,EAChB5J,OAAO2iC,eAAiB,WAAa3iC,OAAOgiC,IAAI35B,GAChDrI,OAAO0jC,iBACR,SAASpiC,OACRsL,aAAa0B,WAAWhN,sGCzRhDxB,QAAQ1B,OAAO,QAAQ2B,WAAW,sBAC9B,SAAU,aACV,cAAe,eAAgB,iBAAkB,eACjD,uBAAwB,SACpBC,OAAQoJ,WAAY24B,YAAap1B,aAAc/H,eAC/CF,aAActE,sBA6Cd,SAASu9B,2BAEL,GAA0B,IAAvB39B,OAAO8jC,KAAKhiC,OAAf,CAMA,IAAIzD,EACJ,IAAIA,EAAI,EAAGA,EAAI2B,OAAO8jC,KAAKhiC,OAAQzD,IAC/B,IAAI2B,OAAO8jC,KAAKzlC,GAAGswB,UAEf,YADA3uB,OAAO69B,oBAAqB,GAIpC79B,OAAO69B,oBAAqB,OAZxB79B,OAAO69B,oBAAqB,EAepC,SAASC,cACLC,sBACA/9B,OAAOgN,OAAOjB,OAAS,KAI3B,SAASkyB,oBAC8B,IAAhCj+B,OAAOk+B,cAAcp8B,SACpBg8B,cACG99B,OAAOgN,OAAOjB,SACb/L,OAAOgN,OAAOjB,OAAS,OAMnC,SAASgyB,sBACL,IAAIS,SAAWx+B,OAAOgN,OAAOwxB,SAC7BA,SAASE,UAAYF,SAASvF,MAAQuF,SAASG,OAAS,EACxD7+B,QAAQ4D,QAAQ1D,OAAO8jC,KAAM,SAAS9B,YAC3BA,IAAIzD,gBAOnB,SAASM,sBACD7+B,OAAO8+B,oBAMXh/B,QAAQ4D,QAAQ1D,OAAO8jC,KAAM,SAAS9B,MACT,IAAtBA,IAAIzD,eACHwD,YAAY/C,aAAagD,IAAI35B,MAGrC41B,qBAVQj+B,OAAOi/B,wBACNnB,cA1Fb10B,WAAW5H,MAAQ,OACnB4H,WAAWO,KAAO,OAGlB3J,OAAOiiC,WAAaF,YACpB/hC,OAAO8jC,KAAO/B,YAAY5gC,WAC1BnB,OAAO0O,SAAU,EAEjB1O,OAAO+jC,iBACP/jC,OAAOk+B,cAAgB6D,YAAYxC,mBACnCv/B,OAAOqK,UAAY,OACnBrK,OAAO69B,oBAAqB,EAC5B79B,OAAOgN,QACLjB,OAAQ,KACRoK,UAEIvX,KAAM,UACN4C,MAAO,UACP0gC,SAAU,UACVC,UAAWriC,QAAQsiC,KAAKL,YAAaA,YAAYM,WAGjDzjC,KAAM,SACN4C,MAAO,SACP0gC,SAAU,SACVC,UAAWriC,QAAQsiC,KAAKL,YAAaA,YAAYO,cAGrD9D,UACIvF,MAAO,EACPyF,UAAW,EACXC,OAAQ,IAGd3+B,OAAO+oB,KACLib,MAAM,EACN33B,QAEFrM,OAAOikC,WAAar/B,eAAeM,QAAQ,eAC3ClF,OAAOgF,MAAQN,aAAavD,WAgE5BnB,OAAOugC,cAAgB,SAASyB,KACzBD,YAAYvB,WAAWwB,IAAI35B,IAC1B05B,YAAY/C,aAAagD,IAAI35B,IAE7B05B,YAAYtB,WAAWuB,IAAI35B,IAE/Bs1B,2BACAM,qBAIJj+B,OAAO0gC,eAAiB,WACjB1gC,OAAO69B,mBACN/9B,QAAQ4D,QAAQ1D,OAAO8jC,KAAM,SAAS9B,KAClCD,YAAY/C,aAAagD,IAAI35B,MAGjCvI,QAAQ4D,QAAQ1D,OAAO8jC,KAAM,SAAS9B,KAClCD,YAAYtB,WAAWuB,IAAI35B,MAGnCs1B,2BACAM,qBAKJj+B,OAAOkY,iBAAiB,OAAQ,WAC5BylB,6BAIJ39B,OAAOuK,UAAY,SAASF,WACxBrK,OAAOqK,UAAYA,UACnBrK,OAAOwK,SAAWxK,OAAOwK,SAI7BxK,OAAOub,aAAe,WAClBwiB,sBACA/9B,OAAOgN,OAAOjB,OAAS,MAI3B/L,OAAOwb,SAAW,WAIduiB,sBACA/9B,OAAOgN,OAAOwxB,SAASvF,MAAQj5B,OAAOk+B,cAAcp8B,OAGpD,IAAIqgC,UAAYniC,OAAOgN,OAAOjB,OAAOo2B,UACrCriC,QAAQ4D,QAAQ1D,OAAOk+B,cAAe,SAAS8D,KAC3CG,UAAUH,KAAKh+B,KAAK,WACZhE,OAAOgN,OAAOwxB,SAASE,WAAa,EACpCsD,IAAIzD,eAAgB,EACpBM,uBACD,SAASv9B,OACRtB,OAAOgN,OAAOwxB,SAASG,QAAU,EACjCqD,IAAIkC,aAAe5iC,MACnB0gC,IAAIzD,eAAgB,EACpBM,2BAMhB7+B,OAAOi/B,qBAAuB,WAC1B,IAAIT,SAAWx+B,OAAOgN,OAAOwxB,SAC7B,OAAOA,SAASvF,MAAQ,GACpBuF,SAASE,UAAYF,SAASG,SAAYH,SAASvF,OAI3Dj5B,OAAO8+B,iBAAmB,WAEtB,OADe9+B,OAAOgN,OAAOwxB,SACbG,OAAS,GAI7B3+B,OAAOmkC,OAAS,WACZnkC,OAAO+oB,IAAIib,MAAO,EAClBhkC,OAAO+oB,IAAI1c,IAAIlG,KAAOzB,aAAak/B,iBAAiBv7B,IAIxDrI,OAAOokC,aAAe,WAClBpkC,OAAO+oB,IAAIib,MAAO,EAClBhkC,OAAO+oB,IAAI1c,QAIfrM,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAIxBtN,OAAOqkC,kBAAoB,SAASz8B,YAChC,IAAIvJ,EACJ,IAAIA,EAAI,EAAGA,EAAI2B,OAAOikC,WAAWniC,OAAQzD,IAAK,CAC1C,IAAIimC,UAAYtkC,OAAOikC,WAAW5lC,GAClC,GAAGimC,UAAU1lC,OAASgJ,WAClB,OAAO08B,UAAUz9B,YAGzB,OAAOe,YAIXxH,qBAAqB8D,aAAalE,QAC9B+hC,YAAap1B,aAAc/H,eAAgBF,eAAeV,KAC1D,WACIhE,OAAO0O,SAAU,2FChOjC5O,QAAQ1B,OAAO,QAAQ2B,WAAW,yBAC9B,SAAU,eAAgB,uBAC1B,SACIC,OAAQ2M,aAAcvM,sBAClBJ,OAAO0O,SAAU,EACjBtO,qBAAqB6I,YACjBjJ,OAAQ2M,cAAc3I,KAAK,WACvBhE,OAAO0O,SAAU,8FCPrC5O,QAAQ1B,OAAO,QAAQ2B,WAAW,sBAC9B,SAAU,aAAc,eAAgB,6BACxC,sBAAuB,kBAAmB,qBAC1C,iBAAkB,iBAAkB,iBACpC,uBACA,SAASC,OAAQoJ,WAAYC,aAAc4H,2BAClCszB,oBAAqB5/B,gBAAiBoK,mBACtC9O,eAAgBC,eAAgB0E,eAChCxE,sBAGLgJ,WAAW5H,MAAQ,aACnB4H,WAAWO,KAAO,WAGlB3J,OAAO0O,SAAU,EACjB1O,OAAOwkC,gBAAkBD,oBACzBvkC,OAAOykC,SAAWF,oBAAoBpjC,WACtCnB,OAAOkB,QAAUhB,eAAeiB,WAChCnB,OAAO8J,SAAWnF,gBAAgBxD,WAClCnB,OAAO+J,QAAU9J,eAAekB,WAChCnB,OAAOmQ,YAAcpB,mBAAmB5N,WACxCnB,OAAO0kC,oBACH9/B,eAAeM,QAAQ,uBAC3BlF,OAAO2kC,mBACH//B,eAAeM,QAAQ,sBAC3BlF,OAAO4kC,sBACHhgC,eAAeM,QAAQ,yBAC3BlF,OAAO6kC,2BAA6B5zB,2BACpCjR,OAAO8kC,aACH7zB,2BAA2B9P,WAC/BnB,OAAO+kC,WAAa,KACpB/kC,OAAOglC,YAAc,KACrBhlC,OAAOilC,cAAgB,KACvBjlC,OAAOklC,cAAgB,SAAU,SAAU,QAC3CllC,OAAOmlC,cAAgB,KACvBnlC,OAAOolC,eAAiB,KACxBplC,OAAOqlC,iBAAmB,KAG1BrlC,OAAOslC,wBAA0B,SAASC,YACtCt0B,2BAA2BvG,WAAW66B,aAI1CvlC,OAAOwlC,sBAAwB,SAASD,YACpCvlC,OAAOmlC,cAAgB,KACvBnlC,OAAOolC,eAAiB,KACxBplC,OAAOqlC,iBAAmBE,YAI9BvlC,OAAOylC,qBAAuB,WAC1BzlC,OAAOqlC,iBAAmB,MAI9BrlC,OAAO0lC,wBAA0B,WAC7Bz0B,2BAA2BqxB,WACvBtiC,OAAOqlC,kBAAkBrhC,KAAK,WAC1BhE,OAAOylC,0BAKnBzlC,OAAO2lC,MAAQ,SAAS/8B,MACpB,QAAI9I,QAAQU,SAASoI,UAGjB9I,QAAQyM,SAAS3D,KAAKD,OAGU,IAA7BC,KAAKD,IAAI3F,QAAQ,SACpB4F,KAAKD,IAAI3F,QAAQ,sBAAwB,KAIjDhD,OAAO4lC,SAAW,SAASh9B,MACvB,QAAI9I,QAAQU,SAASoI,UAGjB9I,QAAQyM,SAAS3D,KAAKhK,QAGL,iBAAdgK,KAAKhK,MACM,kBAAdgK,KAAKhK,QAIboB,OAAO6lC,oBAAsB,SAASN,YAClCvlC,OAAOmlC,cAAgB,KACvBnlC,OAAOqlC,iBAAmB,KAC1BrlC,OAAOolC,eAAiBG,YAI5BvlC,OAAO8lC,mBAAqB,WACxB9lC,OAAOolC,eAAiB,MAI5BplC,OAAO+lC,cAAgB,SAASJ,OAC5B,IAAIlzB,MACA7T,KAAM,GACNonC,SAAS,EACTr9B,IAAK,GACLsH,IAAK,GACLg2B,QAAS,OAAQ,SACjBC,iBACAC,eAEAR,QACAlzB,KAAK9J,IAAM,QAEf3I,OAAOmlC,cAAgB1yB,MAI3BzS,OAAOomC,oBAAsB,WACzBpmC,OAAOmlC,cAAgB,MAqB3BnlC,OAAOgL,cAAgB,SAASxI,QAC5B,OAAOtC,eAAe+K,QAAQzI,SAIlCxC,OAAOqmC,mBAAqB,SAASC,SACjC,OAAGxmC,QAAQyM,SAAS+5B,QAAQzwB,MACjB,OACD/V,QAAQyC,SAAS+jC,QAAQ9jC,QACxB,SAEA,UAKfxC,OAAOumC,0BAA4B,SAASD,SACxC,OAAGxmC,QAAQyM,SAAS+5B,QAAQzwB,OAjCf9F,UAkCMu2B,QAAQzwB,KAjCvBA,KAAOlR,gBAAgBlC,gBAAgBsN,WACxCjQ,QAAQU,SAASqV,MACTA,MAEXA,KAAO5V,eAAewC,gBAAgBsN,WACnCjQ,QAAQU,SAASqV,MACTA,MAEXA,KAAO9G,mBAAmBtM,gBAAgBsN,WACvCjQ,QAAQU,SAASqV,MACTA,UADX,KAyBU/V,QAAQyC,SAAS+jC,QAAQ9jC,QACxBtC,eAAeuC,gBAAgB6jC,QAAQ9jC,aAD3C,EAnCX,IAAiBuN,UACT8F,MAwCR7V,OAAOwmC,wBAA0B,SAASF,SACtC,IAAIj6B,IAAMrM,OAAOumC,0BAA0BD,SAC3C,OAAGxmC,QAAQyM,SAAS+5B,QAAQzwB,OAAS/V,QAAQU,SAAS6L,KAC3CA,IAAIyJ,KACLhW,QAAQyC,SAAS+jC,QAAQ9jC,SAC/B1C,QAAQU,SAAS6L,KACVnM,eAAe+K,QAAQoB,KAEvB,IAKfrM,OAAOymC,mBAAqB,SAASH,SACjCtmC,OAAO+kC,WAAa,KACpB/kC,OAAOglC,YAAc,KACrBhlC,OAAOilC,cAAgBqB,SAI3BtmC,OAAO0mC,kBAAoB,WACvB1mC,OAAOilC,cAAgB,MAI3BjlC,OAAO2mC,qBAAuB,WAC1BpC,oBAAoBjC,WAAWtiC,OAAOilC,eAAejhC,KACjD,WACIhE,OAAO0mC,uBAKnB1mC,OAAO4mC,iBAAmB,SAASN,SAC/BtmC,OAAO+kC,WAAa,KACpB/kC,OAAOilC,cAAgB,KACvBjlC,OAAOglC,YAAcsB,QACrBtmC,OAAOglC,YAAYz+B,KAAOvG,OAAOqmC,mBAAmBC,UAIxDtmC,OAAO6mC,gBAAkB,WACrB7mC,OAAOglC,YAAc,MAIzBhlC,OAAO8mC,cAAgB,SAASR,SAC5B/B,oBAAoB75B,WAAW47B,SAAStiC,KAAK,KACzC,SAAS1C,OAELglC,QAAQN,SAAWM,QAAQN,QAC3B5rB,QAAQC,IAAI/Y,UAKxBtB,OAAO+mC,WAAa,WAChB/mC,OAAOglC,YAAc,KACrBhlC,OAAOilC,cAAgB,KACvBjlC,OAAO+kC,YACHnmC,KAAM,GACN2H,KAAM,SACNy/B,SAAS,IAKjBhmC,OAAOgnC,iBAAmB,WACtBhnC,OAAO+kC,WAAa,MAII,SAAzB17B,aAAakP,SACZnP,WAAW5H,MAAQ,gBACnBxB,OAAOyO,YAAc,QAEQ,iBAAzBpF,aAAakP,UACjBnP,WAAW5H,MAAQ,uBACnBxB,OAAOyO,YAAc,gBAIzBrO,qBAAqB8D,aAAalE,QAC1BiR,2BAA4BszB,oBAC5B5/B,gBAAiB1E,eAAgB8O,mBACjC7O,eAAgB0E,iBAAiBZ,KACrC,WACIhE,OAAO0O,SAAU,mGC5PjC5O,QAAQ1B,OAAO,QAAQ2B,WAAW,0BAC9B,SAAU,aAAc,eAAgB,UAAW,YACnD,gBAAiB,eAAgB,iBAAkB,iBACnD,eAAgB,uBAAwB,eACxC,SACIC,OAAQoJ,WAAYC,aAAcmF,QAASlF,UAC3CwF,cAAetF,aAActJ,eAAgB2O,eAC7ClC,aAAcvM,qBAAsBwM,cAsBpC,SAASq6B,YAAY13B,OACjBvP,OAAOuP,MAAQA,MALfnG,WAAW5H,MAAQxB,OAAOuP,MAAM3Q,KAOhCoB,OAAOqK,UAAY,2BACnBrK,OAAOkP,OAAO,UAAWg4B,eAAe,GACxCA,gBACAlnC,OAAO4J,QAAS,EAIpB,SAASs9B,gBACL,IAAI93B,QACJtP,QAAQ4D,QAAQ8K,QAAQ,SAARA,CACRxO,OAAOkB,SAAUqO,MAAMvP,OAAOuP,MAAMlH,KAAK,GACzC,SAAS7F,QACb,IAAI4I,KAAO5B,aAAa/G,gBAAgBD,OAAO4I,MAC3C6D,OAASJ,eAAepM,gBAAgB2I,KAAK6D,QAC7CQ,KACArE,KAAMA,KACNsE,UAAWlG,aAAayB,QAAQG,MAChC5I,OAAQA,OACRmN,YAAazP,eAAe+K,QAAQzI,QACpCyM,OAAQA,OACR0F,YAAa1F,OAAOrQ,MAExBwQ,KAAKtM,KAAK2M,OAEdzP,OAAOoP,KAAOA,KA9ClBhG,WAAW5H,MAAQ,aAInB4H,WAAWO,KAAO,WAGlB3J,OAAOuP,MAAQ,KACfvP,OAAO8T,aAAehF,cACtB9O,OAAOkB,QAAUhB,eAAeiB,WAChCnB,OAAO4J,QAAS,EAChB5J,OAAO+M,aAAc,EAwCrB/M,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAIxBtN,OAAOoN,iBAAmB,WACtBpN,OAAO+M,aAAc,GAIzB/M,OAAOqN,gBAAkB,WACrBrN,OAAO+M,aAAc,GAIzB/M,OAAOmnC,eAAiB,WACpB,QAAIrnC,QAAQU,SAASR,OAAOuP,QAGD,IAApBvP,OAAOuP,MAAMlH,IAIxBrI,OAAOwN,aAAe,WAClB,QAAG1N,QAAQU,SAASR,OAAOuP,QACmB,IAAnCvP,OAAOuP,MAAM63B,WAAWtlC,QAMvC9B,OAAO0N,aAAe,WAClB1N,OAAOsB,MAAQ,KACftB,OAAOqQ,kBAAmB,GAI9BrQ,OAAOsQ,mBAAqB,WACxBtQ,OAAOqQ,kBAAmB,GAI9BrQ,OAAO8N,oBAAsB,WACzBgB,cAAcu4B,YAAYrnC,OAAOuP,OAAOvL,KAAK,WACzChE,OAAOqQ,kBAAmB,EAC1B/G,UAAUkD,KAAK,aACflD,UAAUmD,OAAO,KAAM,UACxB,SAASnL,OACRtB,OAAOsB,MACHlB,qBAAqB6D,qBAAqB3C,UAKtDlB,qBAAqB8D,aAAalE,QAC9B8O,cAAe5O,eAAgBsJ,aAAcqF,eAC7ClC,eAAe3I,KAAK,WAIpB,IAAIsjC,YAAcx4B,cAAcb,gBAC5Bs5B,eAAiBp5B,SAAS9E,aAAam+B,SAAU,IAClDn5B,MAAMk5B,gBACL36B,aAAa0B,WAAW,6BAClBxO,QAAQU,SAAS8mC,cACvBA,YAAYj/B,KAAOk/B,eACnBN,YAAYK,aAEZx4B,cAAcP,cACVg5B,gBAAgBvjC,KAAK,SAASuL,OAC1B03B,YAAY13B,QACb,SAASjO,OACRsL,aAAa0B,WAAWhN,2GCrIhDxB,QAAQ1B,OAAO,QAAQ0N,OAAO,gBAAiB,oBAC3C,WACI,OAAO,SAAS5K,QAASumC,QACrB,IAAIhoB,YAOJ,OANA3f,QAAQ4D,QAAQxC,QAAS,SAASsB,QAC3BA,OAAO6F,KAAOo/B,OAAOp/B,IACpB7F,OAAOklC,UAAYD,OAAOC,SAC1BjoB,SAAS3c,KAAKN,UAGfid,aAInB3f,QAAQ1B,OAAO,QAAQ2B,WAAW,2BAC9B,SAAU,aAAc,eAAgB,UAAW,YACnD,iBAAkB,iBAAkB,gBAAiB,eACrD,eAAgB,iBAAkB,sBAClC,uBAAwB,eAAgB,mBACxC,SACIC,OAAQoJ,WAAYC,aAAcmF,QAASlF,UAAWG,eACtDvJ,eAAgB4O,cAAetF,aAAcmD,aAC7CkC,eAAgB84B,oBAAqBvnC,qBAAsBwM,aAC3Dkf,kBAGA1iB,WAAW5H,MAAQ,aAInB4H,WAAWO,KAAO,WAGlB3J,OAAO4J,QAAS,EAChB5J,OAAOwC,OAAS,KAChBxC,OAAO+M,aAAc,EACrB/M,OAAO4nC,sBAAwB,KAC/B5nC,OAAO6nC,0BAA4B,KACnC7nC,OAAOkB,QAAUhB,eAAeiB,WAChCnB,OAAO4T,cAAgB1T,eACvBF,OAAO8nC,aAAeH,oBAAoBxmC,WAC1CnB,OAAO+nC,oBAAsBJ,oBAC7B3nC,OAAOuP,MAAQ,KACfvP,OAAOsP,MAAQ9F,aAAarI,WAC5BnB,OAAO6T,QAAUhF,eAAe1N,WAChCnB,OAAOgoC,YAAc,KACrBhoC,OAAOgV,aAAe,KACtBhV,OAAO8U,iBACP9U,OAAOwK,SAAU,EACjBxK,OAAOioC,eAAiB,KACxBjoC,OAAOkoC,gBAAkB,KACzBloC,OAAOmoC,kBAAoB,KAE3BnoC,OAAOooC,mBACHxpC,KAAM,aACN4C,MAAO,cAEXxB,OAAOqoC,eACHzpC,KAAM,SACN4C,MAAO,UAIX,IAAI8mC,aACA3uB,EAAG,YACHC,EAAG,SACHG,EAAG,gBACHwuB,EAAG,OACHC,EAAG,YAIHC,YACA9uB,EAAG,UACHC,EAAG,SACHC,EAAG,kBACHC,EAAG,oBACHC,EAAG,6BACHwuB,EAAG,UACHC,EAAG,WAIP,SAAS5yB,cACLpT,OAASxC,OAAOwC,OACbA,QAAUA,OAAOF,OAChB8G,WAAW5H,MAAQgB,OAAOF,KACvBE,OAAO5D,MAAQ4D,OAAOF,OAASE,OAAO5D,OACrCwK,WAAW5H,OAAS,KAAMgB,OAAO5D,KAAO,MAMpD,SAAS8pC,mBAEmB,IADf1oC,OAAOwC,OAAOF,KAAKoJ,MAAM,KAAK,GACjC1I,QAAQ,KACVhD,OAAO2oC,UAAY,EAEnB3oC,OAAO2oC,UAAY,EAoO3B,SAASC,aAAapmC,QAClBxC,OAAOwC,OAASA,OAChBxC,OAAO4J,QAAS,EAEhBgM,cAMA,IAAIizB,aAAe,WACf7oC,OAAOwC,OAAOyM,OACVzF,aAAa/G,gBAAgBzC,OAAOwC,OAAO4I,MAAM6D,OACrDjP,OAAOwC,OAAOmS,YACZ9F,eAAepM,gBAAgBD,OAAOyM,QAAQrQ,MAapDoB,OAAOkP,OAAO,gBAAiB25B,cAC/B7oC,OAAOkP,OAAO,qBAAsB25B,cACpC7oC,OAAOkP,OAAO,cAAe25B,cAC7B7oC,OAAOkP,OAAO,mBAVG,WACb,IAAI9D,KAAO5B,aAAa/G,gBAAgBzC,OAAOwC,OAAO4I,MACtDpL,OAAOwC,OAAOkN,UACVlG,aAAayB,QAAQG,QAQ7BpL,OAAOkP,OAAO,eAfI,WACdlP,OAAOuP,MACHT,cAAcrM,gBAAgBzC,OAAOwC,OAAO+M,SAcpDvP,OAAOkP,OAAO,cAAew5B,iBA/PjC1oC,OAAO8oC,OAAS,SAAShoC,WACrB,OAAwB,IAArBd,OAAO2oC,UACC7c,iBAAiBid,cAAcjoC,UAAUqL,IAEzC2f,iBAAiBkd,WAAWloC,UAAUqL,KAKrDnM,OAAOqK,UAAYrK,OAAO8oC,OAG1B9oC,OAAOipC,aAAe,SAASC,WAC3B,IAAIC,IAAMb,YAAYY,WACtB,OAAGppC,QAAQyM,SAAS48B,KACTA,IAEA,WAIfnpC,OAAOopC,cAAgB,SAASC,QAC5B,OAAOnpC,eAAeuC,gBAAgB4mC,QAAQ/mC,MAIlDtC,OAAOspC,cAAgB,SAASxoC,WAC5B,OAAOd,OAAOipC,aAAanoC,UAAUyoC,aAIzCvpC,OAAOwpC,cAAgB,SAASr9B,IAC5B,GAAGrM,QAAQU,SAAS2L,GAAGs9B,cAAe,CAClC,IAAIC,SAAWv9B,GAAGs9B,aAAahzB,UAC3B0yB,IAAMV,WAAWiB,UACrB,OAAG5pC,QAAQyM,SAAS48B,KACTA,IAEA,UAER,OAAGrpC,QAAQU,SAAS2L,GAAGw9B,MACnB,MACD7pC,QAAQU,SAAS2L,GAAGy9B,aACnB,MAEA,WAKf5pC,OAAO6pC,aAAe,SAAS/oC,WAC3B,OAAOd,OAAOwpC,cAAc1oC,YAIhCd,OAAO8pC,UAAY,SAAShpC,WACxB,IAAIg5B,MAAQh5B,UAAU4R,KACtB,OAAG5S,QAAQyM,SAASutB,QAAUA,MAAMh4B,OAAS,EAClCg4B,MAEA,QAKf95B,OAAO+pC,YAAc,SAAS1/B,WAC1BrK,OAAOqK,UAAYA,UACnBrK,OAAOwK,SAAWxK,OAAOwK,SAI7BxK,OAAOkL,YAAc,SAASE,MAC3B,OAAO5B,aAAayB,QAAQG,OAI/BpL,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAGxBtN,OAAOgqC,YAAc,WAKjBhqC,OAAOgoC,YAAc,MAIzBhoC,OAAOwb,SAAW,WACkB,eAA7Bxb,OAAOgV,aAAapW,KACnBsB,eAAe+pC,WAAWjqC,OAAOwC,QAAQwB,KAAK,SAASua,QAChDA,QAA4C,IAAlCA,OAAO2rB,gBAAgBpoC,OAChC9B,OAAOgoC,YACH5nC,qBAAqB6D,qBACjBsa,OAAOA,SAEfve,OAAOgV,aAAe,KACtBhV,OAAOgoC,YAAc,OAE1B,SAAS1mC,OACRtB,OAAOgoC,YACH5nC,qBAAqB6D,qBAAqB3C,SAEf,WAA7BtB,OAAOgV,aAAapW,MAC1BsB,eAAeiqC,aACXnqC,OAAOwC,QAAQwB,KAAK,SAASua,QACzBve,OAAOgV,aAAe,KACtBhV,OAAOgoC,YAAc,KACrB1+B,UAAUkD,KAAK,cAChB,SAASlL,OACRtB,OAAOgoC,YACH5nC,qBAAqB6D,qBAAqB3C,UAM9DtB,OAAO+U,cAAgB,WACnB/U,OAAOgoC,YAAc,MAIzBhoC,OAAO6N,aAAe,WAClB7N,OAAOgV,aAAe,KACtBhV,OAAOgoC,YAAc,MAKzBhoC,OAAO6U,cAAgB,WAChBlI,aAAaW,cACZtN,OAAO8U,eACH9U,OAAOooC,kBACPpoC,OAAOqoC,eAGXroC,OAAO8U,kBAKf9U,OAAOoN,iBAAmB,WACtBpN,OAAO+M,aAAc,GAIzB/M,OAAOqN,gBAAkB,WACrBrN,OAAO+M,aAAc,GAKzB/M,OAAOoqC,cAAgB,SAAS5nC,OAAQ6nC,eAQpC,OANwC,IAArCA,cAAcrnC,QAAQ,YAGrBR,OAAO4I,KAAOyD,eAAepM,gBACzBD,OAAOyM,QAAQ+V,iBAEhBxiB,QAIXxC,OAAOsqC,eAAiB,WACpBtqC,OAAOkoC,gBAAkB,KACzBloC,OAAOmoC,kBAAoB,KAC3BnoC,OAAOioC,gBACHR,OAAQznC,OAAOwC,OAAO6F,GACtBkiC,WAAY,GACZC,YAAa,KACbC,OAAQ,IAKhBzqC,OAAO0qC,qBAAuB,WAC1B1qC,OAAOioC,eAAiB,MAI5BjoC,OAAO2qC,wBAA0B,SAASC,OACtC,OAAO5qC,OAAOkoC,kBAAoB0C,OAItC5qC,OAAO6qC,0BAA4B,SAASD,OACxC5qC,OAAOioC,eAAiB,KACxBjoC,OAAOmoC,kBAAoB,KACxBnoC,OAAO2qC,wBAAwBC,OAC9B5qC,OAAOkoC,gBAAmB,KAE1BloC,OAAOkoC,gBAAkB0C,OAKjC5qC,OAAO8qC,0BAA4B,SAASF,OACxC,OAAO5qC,OAAOmoC,oBAAsByC,OAIxC5qC,OAAO+qC,2BAA6B,SAASH,OACzC5qC,OAAOioC,eAAiB,KACxBjoC,OAAOkoC,gBAAkB,KACzBloC,OAAOmoC,kBAAoByC,OAI/B5qC,OAAOgrC,wBAA0B,WAC7BhrC,OAAOmoC,kBAAoB,MAI/BnoC,OAAOirC,yBAA2B,WAC9BtD,oBAAoBrF,WAAWtiC,OAAOmoC,mBAAmBnkC,KACrD,WACIhE,OAAOmoC,kBAAoB,QAyCvC/nC,qBAAqB8D,aAAalE,QAC9ByJ,eAAgBvJ,eAAgB4O,cAAetF,aAC/CmD,aAAckC,eAAgB84B,sBAC/B3jC,KAAK,WAEJhE,OAAO6U,gBACP7U,OAAO4nC,sBAAwBn+B,eAAehH,gBAC1C,6BAEJ3C,QAAQ4D,QACJ1D,OAAO4nC,sBAAsB/hC,QAAS,SAASqlC,QACxCA,OAAO,KAAOlrC,OAAO4nC,sBAAsBvoC,QAC1CW,OAAO6nC,0BAA4BqD,OAAO,MAOtD,IAAIC,aAAejrC,eAAe+N,gBAC9Bm9B,gBAAkBj9B,SAAS9E,aAAawa,UAAW,IACpDxV,MAAM+8B,iBACLx+B,aAAa0B,WAAW,8BAClBxO,QAAQU,SAAS2qC,eACvBA,aAAa9iC,KAAO+iC,gBACpBxC,aAAauC,cAEbjrC,eAAeqO,cACX68B,iBAAiBpnC,KAAK,SAASxB,QAC3BomC,aAAapmC,SACd,SAASlB,OACRsL,aAAa0B,WAAWhN,yGC1YhDxB,QAAQ1B,OAAO,QAAQ0N,OAAO,aAAc,WACxC,OAAO,SAASu/B,QAASC,MACrB,IAAI7rB,YAMJ,OALA3f,QAAQ4D,QAAQ2nC,QAAS,SAASh/B,KAC3BA,MAAQi/B,MACP7rB,SAAS3c,KAAKuJ,OAGfoT,YAIf3f,QAAQ1B,OAAO,QAAQ2B,WAAW,yBAC9B,SAAU,aAAc,eAAgB,UAAW,YACnD,eAAgB,iBAAkB,gBAAiB,iBACnD,qBAAsB,eAAgB,uBACtC,eAAgB,oBAAqB,SACjCC,OAAQoJ,WAAYC,aAAcmF,QAASlF,UAC3CE,aAActJ,eAAgB4O,cAAeD,eAC7CE,mBAAoBpC,aAAcvM,qBAAsBwM,aACxDvM,mBACA,IAAIkrC,GAAKjrB,KAELvN,aAAevE,QAAQ,gBACGA,QAAQ,2BAyZtC,SAASoH,cACL,IAAIxK,KAAOmgC,GAAGngC,KACV6D,OAASs8B,GAAGt8B,OACbnP,QAAQU,SAAS4K,OAAStL,QAAQU,SAASyO,UACrC7D,KAAKxM,KAON2sC,GAAG/pC,MAAQ4J,KAAKxM,KANA,IAAbwM,KAAK8U,IACJqrB,GAAG/pC,MAAQ,eAEX+pC,GAAG/pC,MAAQ,QAAU4J,KAAK8U,IAKlCqrB,GAAG/pC,OAAS,OAASyN,OAAOrQ,KAC5BwK,WAAW5H,MAAQ+pC,GAAG/pC,OAK9B,SAASgqC,wBACL,IAAIpgC,KAAOmgC,GAAGngC,KACVtL,QAAQU,SAAS4K,QAGlBA,KAAKiY,aACJkoB,GAAGE,YAAc18B,mBAAmBtM,gBAChC2I,KAAKiY,cAETkoB,GAAGE,YAAc,KAElBrgC,KAAKkY,eACJioB,GAAGG,cAAgB38B,mBAAmBtM,gBAClC2I,KAAKkY,gBAETioB,GAAGG,cAAgB,MAK3B,SAASC,2BACL,IAAIvgC,KAAOmgC,GAAGngC,KACd,GAAItL,QAAQU,SAAS4K,MAArB,CAGA,IAAIiE,SACJvP,QAAQ4D,QAAQ0H,KAAKwE,UAAW,SAASC,UACrC,IAAIC,KAAOf,mBAAmBtM,gBAAgBoN,UAC3C/P,QAAQU,SAASsP,OAChBT,MAAMvM,KAAKgN,QAGnBy7B,GAAGK,mBAAqBv8B,OAK5B,SAASw8B,uBACL,IAAIzgC,KAAOmgC,GAAGngC,KACd,GAAItL,QAAQU,SAAS4K,MAArB,CAGA,IAAIlK,WACJpB,QAAQ4D,QACAqP,aAAaw4B,GAAGrqC,QAASkK,MAAO,SAAS5I,QAC7C,IAAI+M,MAAQT,cAAcrM,gBAAgBD,OAAO+M,OAC7CzP,QAAQU,SAAS+O,SACjBA,OAAS3Q,KAAM,gBAEnB,IAAI6Q,KACAjN,OAAQA,OACR+M,MAAOA,OAEXrO,QAAQ4B,KAAK2M,OAEjB87B,GAAGO,eAAiB5qC,SAGxB,SAAS6qC,wBACL,IAAI3gC,KAAOmgC,GAAGngC,KACVtL,QAAQU,SAAS4K,QAKrBmgC,GAAGz2B,cAAchT,OAAS,EACvB6K,aAAaW,gBACRlC,KAAK4gC,YAYPT,GAAGz2B,cAAchS,KAAKyoC,GAAGU,mBACzBV,GAAGz2B,cAAchS,KAAKyoC,GAAGW,qBACzBX,GAAGU,kBAAkBzqC,MAAQ,2BAbT,IAAjB4J,KAAK+gC,SACJZ,GAAGa,oBAAoB5qC,MAAQ,mBAC/B+pC,GAAGz2B,cAAchS,KAAKyoC,GAAGa,qBACzBb,GAAGz2B,cAAchS,KAAKyoC,GAAGW,uBAEzBX,GAAGa,oBAAoB5qC,MAAQ,eAC/B+pC,GAAGU,kBAAkBzqC,MAAQ,aAC7B+pC,GAAGz2B,cAAchS,KAAKyoC,GAAGa,qBACzBb,GAAGz2B,cAAchS,KAAKyoC,GAAGU,oBAO3BV,GAAGc,iBACHd,GAAGz2B,cAAchS,KAAKyoC,GAAGlD,iBAMrC,SAASiE,WAAWlhC,MAChBmgC,GAAGngC,KAAOA,KACVmgC,GAAGt8B,OAASJ,eAAepM,gBAAgB2I,KAAK6D,QAChDs8B,GAAGc,gBAAkBd,GAAGt8B,OAAO+V,kBAAoBumB,GAAGngC,KAAK/C,GAC3DkjC,GAAG3hC,QAAS,EAEZgM,cACA41B,wBACAG,2BACAE,uBACAE,wBA7gBJ3iC,WAAW5H,MAAQ,aAInB4H,WAAWO,KAAO,WAElB4hC,GAAGa,qBAGCxtC,KAAM,eAEV2sC,GAAGU,mBAGCrtC,KAAM,cAEV2sC,GAAGW,qBACCttC,KAAM,eACN4C,MAAO,gBAEX+pC,GAAGlD,eACCzpC,KAAM,SACN4C,MAAO,UAIX+pC,GAAG3hC,QAAS,EACZ2hC,GAAGngC,KAAO,KACVmgC,GAAG/pC,MAAQ,KACX+pC,GAAGv2B,aAAe,KAClBu2B,GAAGz2B,iBACHy2B,GAAGv3B,YAAcxK,aACjB+hC,GAAGj8B,MAAQ9F,aAAarI,WACxBoqC,GAAGrqC,QAAUhB,eAAeiB,WAC5BoqC,GAAGx3B,OAASjF,cAAc3N,WAC1BoqC,GAAG13B,QAAUhF,eAAe1N,WAC5BoqC,GAAGp7B,YAAcpB,mBAAmB5N,WACpCoqC,GAAGvD,YAAc,KACjBuD,GAAGO,kBACHP,GAAGK,sBACHL,GAAGgB,qBACHhB,GAAGE,YAAc,KACjBF,GAAGG,cAAgB,KACnBH,GAAGx+B,aAAc,EAIjBw+B,GAAGj+B,YAAc,WACb,OAAOX,aAAaW,eAIxBi+B,GAAGn+B,iBAAmB,WAClBm+B,GAAGx+B,aAAc,GAIrBw+B,GAAGl+B,gBAAkB,WACjBk+B,GAAGx+B,aAAc,GAIrBw+B,GAAGiB,aAAe,WACd,IAAIj9B,MAAQT,cAAcrM,gBAAgB8oC,GAAGngC,KAAKmE,OAClD,OAAGA,MACMA,MAAM3Q,KAEN,eAKb2sC,GAAGkB,gBAAkB,SAAS7tC,MAC1B,IAAIP,EACJ,IAAIA,EAAI,EAAIA,EAAIktC,GAAGz2B,cAAchT,OAASzD,IACtC,GAAGktC,GAAGz2B,cAAczW,GAAGO,OAASA,KAC5B,OAAO2sC,GAAGz2B,cAAczW,GAGhC,OAAO,MAMXktC,GAAGmB,gBAAkB,SAASC,UAC1BpB,GAAGgB,qBACH,IAAI3qB,KAAO2pB,GAAGgB,kBAuBd,GAtBA3qB,KAAKpf,OAAS,KACdof,KAAKgrB,UAAY,KACb9sC,QAAQyC,SAASgpC,GAAGngC,KAAK4gC,cACzBpqB,KAAKgrB,UAAYpjC,aAAa/G,gBAC1B8oC,GAAGngC,KAAK4gC,aAEZlsC,QAAQU,SAAS+qC,GAAGE,aACpB7pB,KAAK6pB,YAAcF,GAAGE,YAAY17B,UAC5Bw7B,GAAGK,mBAAmB9pC,OAAS,IAErC8f,KAAK6pB,YAAcF,GAAGK,mBAAmB,GAAG77B,WAE5CjQ,QAAQU,SAAS+qC,GAAGG,eACpB9pB,KAAK8pB,cAAgBH,GAAGG,cAAc37B,UAChCw7B,GAAGK,mBAAmB9pC,OAAS,IAErC8f,KAAK8pB,cAAgBH,GAAGK,mBAAmB,GAAG77B,WAElD6R,KAAKirB,OAAS,EACdjrB,KAAKkrB,QAAU,KACflrB,KAAKmrB,MAAQ,KACbnrB,KAAKorB,UAAY,GACbltC,QAAQU,SAAS+qC,GAAGO,gBAAiB,CAOrC,IAAIztC,EAAGmE,OACP,IANI+oC,GAAGO,eAAehqC,OAAS,GACvBhC,QAAQU,SAAS+qC,GAAGO,eAAe,GAAGtpC,UAC1Cof,KAAKpf,OAAS+oC,GAAGO,eAAe,GAAGtpC,OAAO6F,IAE9CuZ,KAAKqrB,mBAAoB,EAEpB5uC,EAAI,EAAGA,EAAIktC,GAAGO,eAAehqC,OAAQzD,IAAK,CAM3C,IAAI6uC,SALJ1qC,OAAS+oC,GAAGO,eAAeztC,GAAGmE,QAKT2qC,WAAWC,wBAChC,IAAKttC,QAAQU,SAAS0sC,SAAU,CAM5BtrB,KAAKpf,OAASA,OAAO6F,GACrBuZ,KAAKqrB,mBAAoB,EACzB,OAQR,IAFArrB,KAAKyrB,gBAAiB,EACtBzrB,KAAK0rB,wBAAyB,EACzBjvC,EAAI,EAAGA,EAAIktC,GAAGO,eAAehqC,OAAQzD,IAEtC,GAAyB,QADzBmE,OAAS+oC,GAAGO,eAAeztC,GAAGmE,QACpB+nC,YACgB,KAAtB/nC,OAAO+nC,WAAmB,CAC1B3oB,KAAKyrB,gBAAiB,EACtB,OAMRV,WACApB,GAAGgC,oBACHhC,GAAGiC,uBAEPjC,GAAGkC,aAAad,WAIpBpB,GAAGzI,oBAAsB,WACO,gBAAzByI,GAAGv2B,aAAapW,KACf2sC,GAAGmB,iBAAgB,GACY,eAAzBnB,GAAGv2B,aAAapW,MACtB2sC,GAAGmB,iBAAgB,GAGvBnB,GAAGvD,YAAc,MAIrBuD,GAAGhwB,aAAe,WAKdgwB,GAAGv2B,aAAe,KAClBu2B,GAAGvD,YAAc,MAIrBuD,GAAGgC,kBAAoB,WACnB,IAMIlvC,EANAujB,KAAO2pB,GAAGgB,kBAOd,IAJG3qB,KAAK6pB,cAAgB7pB,KAAK8pB,gBACzB9pB,KAAK8pB,cAAgB,MAGrBrtC,EAAI,EAAIA,EAAIktC,GAAGK,mBAAmB9pC,OAASzD,IAC3C,GAAGktC,GAAGK,mBAAmBvtC,GAAG0R,YAAc6R,KAAK6pB,YAAa,CACxD7pB,KAAK8pB,cAAgBH,GAAGK,mBAAmBvtC,GAAG0R,UAC9C,QAMZw7B,GAAGiC,oBAAsB,WACrB,IAAI5rB,KAAO2pB,GAAGgB,kBAGX3qB,KAAK6pB,cAAgB7pB,KAAK8pB,gBACzB9pB,KAAK6pB,YAAc,KACnB7pB,KAAK8pB,cAAgB,OAM7BH,GAAGmC,kBAAoB,SAAS59B,MAC5B,IAAI8R,KAAO2pB,GAAGgB,kBACd,OAAOz8B,KAAKC,YAAc6R,KAAK6pB,aAInCF,GAAGkC,aAAe,SAASd,UACvB,IAAI/qB,KAAO2pB,GAAGgB,kBACV/pC,OAAStC,eAAeuC,gBAAgBmf,KAAKpf,QACjD,GAAG1C,QAAQU,SAASgC,QAAS,CACzB,IAAImrC,kBAAoB,KACpBT,QAAU,KACXptC,QAAQU,SAASgC,OAAO2qC,cACvBQ,kBAAoBnrC,OAAO2qC,WAAWQ,kBACtCT,QAAU1qC,OAAO2qC,WAAWC,yBAE7BttC,QAAQU,SAAS0sC,UAAYA,QAAQU,cAAgB,GACpDhsB,KAAKirB,OAASK,QAAQU,cACnBjB,UACC/qB,KAAKkrB,QAAU,GACflrB,KAAKmrB,MAAQ,GACbnrB,KAAKisB,iBAAmBX,QAAQY,MAAQ,aACxClsB,KAAKmsB,eAAiBb,QAAQc,IAAM,gBAEpCpsB,KAAKkrB,QAAUI,QAAQY,MACvBlsB,KAAKmrB,MAAQG,QAAQc,IACrBpsB,KAAKisB,iBAAmBX,QAAQY,MAChClsB,KAAKmsB,eAAiBb,QAAQc,OAKlCpsB,KAAKirB,OAAS,EACdjrB,KAAKkrB,QAAU,GACflrB,KAAKmrB,MAAQ,GACbnrB,KAAKisB,iBAAmB,qBACxBjsB,KAAKmsB,eAAiB,sBAEvBjuC,QAAQyM,SAASohC,mBACbhB,UACD/qB,KAAKorB,UAAY,GACjBprB,KAAKqsB,mBACDN,kBAAoB,gBAEtB/rB,KAAKorB,UAAYW,kBACjB/rB,KAAKqsB,mBAAqBN,oBAK9B/rB,KAAKorB,UAAY,GACjBprB,KAAKqsB,mBAAqB,SAK9BrsB,KAAKirB,OAAS,EACdjrB,KAAKkrB,QAAU,KACflrB,KAAKmrB,MAAQ,KACbnrB,KAAKorB,UAAY,GAElBltC,QAAQU,SAASgC,QAChBof,KAAK0rB,wBAA0BxtC,QAAQyM,SACnC/J,OAAO+nC,YAEX3oB,KAAK0rB,wBAAyB,GAEC,IAAhC1rB,KAAK0rB,yBACJ1rB,KAAKorB,UAAY,OAIzBzB,GAAGvB,YAAc,WAKbuB,GAAGvD,YAAc,MAIrBuD,GAAG2C,iBAAmB,WAClB,MAA4B,gBAAzB3C,GAAGv2B,aAAapW,KACR2sC,GAAGO,eAAehqC,OAAS,EACH,eAAzBypC,GAAGv2B,aAAapW,MACfkB,QAAQU,SAAS+qC,GAAGgB,kBAAkBK,YAOrDrB,GAAG/vB,SAAW,WAEV,GAAI+vB,GAAG2C,mBAIP,GAA4B,gBAAzB3C,GAAGv2B,aAAapW,KAAwB,CACvC,IAAIgjB,KAAO2pB,GAAGgB,kBACVp8B,eAGAsL,SAaJ,GAZAA,MAAMjZ,OAASof,KAAKpf,OACpBiZ,MAAMqyB,MAAQlsB,KAAKkrB,QACnBrxB,MAAMuyB,IAAMpsB,KAAKmrB,MACjBtxB,MAAM0yB,QAAUvsB,KAAKorB,UAClBltC,QAAQyM,SAASqV,KAAK6pB,cACrBt7B,YAAYrN,KAAK8e,KAAK6pB,aAEvB3rC,QAAQyM,SAASqV,KAAK8pB,gBACrBv7B,YAAYrN,KAAK8e,KAAK8pB,eAIA,IAAvBv7B,YAAYrO,OAGX,YAFAypC,GAAGvD,YACC,gDAGRx+B,aAAa4kC,cACT7C,GAAGngC,KAAM+E,YAAasL,OAAOzX,KAAK,WAC9BunC,GAAGv2B,aAAe,KAClBu2B,GAAGvD,YAAc,MAClB,SAASzpB,QACRgtB,GAAGvD,YAAczpB,OAAOjd,MACxBiqC,GAAGv2B,aAAeu2B,GAAGa,2BAE1B,GAA4B,eAAzBb,GAAGv2B,aAAapW,KAAuB,CAG7C,IAAIyvC,aACJA,UAAU7rC,OAAS+oC,GAAGgB,kBAAkB/pC,OACxC6rC,UAAUP,MAAQvC,GAAGgB,kBAAkBO,QACvCuB,UAAUL,IAAMzC,GAAGgB,kBAAkBQ,MACrCsB,UAAUF,QAAU5C,GAAGgB,kBAAkBS,UACzC,IAAIsB,MAAQ/C,GAAGgB,kBAAkBK,UAAUvkC,GAC3CmB,aAAa4kC,cACT7C,GAAGngC,QAAUijC,UAAWC,OAAOtqC,KAAK,WAChCunC,GAAGv2B,aAAe,KAClBu2B,GAAGvD,YAAc,MAClB,SAASzpB,QACRgtB,GAAGvD,YAAczpB,OAAOjd,MACxBiqC,GAAGv2B,aAAeu2B,GAAGU,wBAEE,iBAAzBV,GAAGv2B,aAAapW,KACtB4K,aAAa+kC,YAAYhD,GAAGngC,MAAMpH,KAAK,WACnCunC,GAAGv2B,aAAe,KAClBu2B,GAAGvD,YAAc,MAClB,SAASzpB,QACRgtB,GAAGvD,YAAczpB,OAAOjd,MACxBiqC,GAAGv2B,aAAeu2B,GAAGW,sBAEM,WAAzBX,GAAGv2B,aAAapW,MACtB4K,aAAaglC,WAAWjD,GAAGngC,MAAMpH,KAAK,WAClCsF,UAAUkD,KAAK,aACf++B,GAAGv2B,aAAe,KAClBu2B,GAAGvD,YAAc,MAClB,SAASzpB,QACRgtB,GAAGvD,YAAczpB,OAAOjd,MACxBiqC,GAAGv2B,aAAeu2B,GAAGlD,iBAMjCkD,GAAGvwB,cAAgB,WACf,OAA0B,OAAnBuwB,GAAGvD,aAIduD,GAAGkD,gBAAkB,SAAS5uB,SAC1B,IAAIzU,KAAO5B,aAAa/G,gBAAgBod,SACpC5Q,OAASJ,eAAepM,gBAAgB2I,KAAK6D,QACjD,OACIJ,eAAe5D,QAAQgE,QAAU,IACjCzF,aAAayB,QAAQG,OAI7BmgC,GAAGmD,cAAgB,WACf,OAAGnD,GAAGngC,KACDmgC,GAAGngC,KAAK+gC,QACF,UACCZ,GAAGngC,KAAK4gC,WACT,eAAiBT,GAAGkD,gBAAgBlD,GAAGngC,KAAK4gC,YAE5C,WAGF,IAgIb5rC,qBAAqB8D,aAAalE,QAC9BwJ,aAActJ,eAAgB4O,cAAeD,eAC7CE,mBAAoBpC,eACrB3I,KAAK,WAIJ,IAAI2qC,WAAanlC,aAAayE,gBAC1B2gC,cAAgBzgC,SAAS9E,aAAawW,QAAS,IAChDxR,MAAMugC,eACLhiC,aAAa0B,WAAW,4BAClBxO,QAAQU,SAASmuC,aACvBA,WAAWtmC,KAAOumC,cAClBtC,WAAWqC,YAEXnlC,aAAa+E,cACTqgC,eAAe5qC,KAAK,SAASoH,MACzBkhC,WAAWlhC,OACZ,SAAS9J,OACRsL,aAAa0B,WAAWhN,SAIpCtB,OAAOkP,OAAO,wBAAyB0G,aACvC5V,OAAOkP,OAAO,uBAAwB0G,aACtC5V,OAAOkP,OAAO,2BAA4B68B,uBAC1C/rC,OAAOkP,OACH,8BAA+B68B,uBACnC/rC,OAAOkP,OAAO,0BAA2B0G,aACzC5V,OAAOkP,OACH,gCAAiCs8B,uBACrCxrC,OAAOkP,OACH,kCAAmCs8B,uBAEvCxrC,OAAOkY,iBACH,sBAAuB2zB,sBAC3B7rC,OAAOkY,iBACH,qBAAsB2zB,sBAC1B7rC,OAAOkY,iBACH,0BAA2ByzB,0HCnlB3C7rC,QAAQ1B,OAAO,QAAQ2B,WAAW,yBAC9B,SAAU,aAAc,eAAgB,YAAa,kBACrD,iBAAkB,eAAgB,eAClC,uBAAwB,eACxB,SACIC,OAAQoJ,WAAYC,aAAcC,UAAW3E,gBAC7C1E,eAAgByE,aAAciI,aAAcvM,qBAC5CwM,cAuBA,SAASiiC,WAAW1oC,MAChBnG,OAAOmG,KAAOA,KACdnG,OAAO4J,QAAS,EANhBR,WAAW5H,MAAQxB,OAAOmG,KAAKvH,KAhBnCwK,WAAW5H,MAAQ,aAInB4H,WAAWO,KAAO,QAGlB3J,OAAO4J,QAAS,EAChB5J,OAAOmG,KAAO,KACdnG,OAAO8uC,YAAcpqC,aACrB1E,OAAO+M,aAAc,EACrB/M,OAAOqK,UAAY,OACnBrK,OAAOwK,SAAU,EAgBjBxK,OAAOoN,iBAAmB,WACtBpN,OAAO+M,aAAc,GAIzB/M,OAAOqN,gBAAkB,WACrBrN,OAAO+M,aAAc,GAIzB/M,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAIxBtN,OAAO+uC,cAAgB,WACnB,QAAGjvC,QAAQU,SAASR,OAAOmG,OACG,IAAnBnG,OAAOmG,KAAKkC,IAM3BrI,OAAOwN,aAAe,WAClB,QAAG1N,QAAQU,SAASR,OAAOmG,OACG,IAAnBnG,OAAOmG,KAAKkC,IAM3BrI,OAAO0N,aAAe,WAClB1N,OAAOsB,MAAQ,KACftB,OAAOqQ,kBAAmB,GAI9BrQ,OAAOsQ,mBAAqB,WACxBtQ,OAAOqQ,kBAAmB,GAI9BrQ,OAAO8N,oBAAsB,WACzBpJ,aAAa49B,WAAWtiC,OAAOmG,MAAMnC,KAAK,WACtChE,OAAOqQ,kBAAmB,EAC1B/G,UAAUkD,KAAK,WAChB,SAASlL,OACRtB,OAAOsB,MACHlB,qBAAqB6D,qBAAqB3C,UAKtDlB,qBAAqB8D,aACjBlE,QAAS0E,aAAciI,eAAe3I,KAAK,WAI3C,IAAIgrC,WAAatqC,aAAauJ,gBAC1BghC,cAAgB9gC,SAAS9E,aAAa83B,QAAS,IAChD9yB,MAAM4gC,eACLriC,aAAa0B,WAAW,4BAClBxO,QAAQU,SAASwuC,aACvBA,WAAW3mC,KAAO4mC,cAClBJ,WAAWG,YAEXtqC,aAAa6J,cACT0gC,eAAejrC,KAAK,SAASmC,MACzB0oC,WAAW1oC,OACZ,SAAS7E,OACRsL,aAAa0B,WAAWhN,uGC5GhDxB,QAAQ1B,OAAO,QAAQ2B,WAAW,uBAC9B,SAAU,aAAc,eAAgB,UAAW,kBACnD,iBAAkB,qBAAsB,eAAgB,kBACxD,eAAgB,uBAAwB,eACxC,SAASC,OAAQoJ,WAAYC,aAAcmF,QAAS7J,gBAChD1E,eAAgB8O,mBAAoBrK,aAAc4Q,gBAClD3I,aAAcvM,qBAAsBwM,cAGpCxD,WAAW5H,MAAQ,QACnB4H,WAAWO,KAAO,QAGlB3J,OAAO8uC,YAAcpqC,aACrB1E,OAAOgF,MAAQN,aAAavD,WAC5BnB,OAAOyO,YAAc,QACrBzO,OAAOqK,UAAY,OACnBrK,OAAOwK,SAAU,EACjBxK,OAAO0O,SAAU,EACjB1O,OAAOgN,QACLg3B,MAAM,EACN33B,QAIFrM,OAAOkvC,QAAU,WACflvC,OAAOgN,OAAOg3B,MAAO,GAIvBhkC,OAAOmvC,UAAY,WACjBnvC,OAAOgN,OAAOg3B,MAAO,EACrBhkC,OAAOgN,OAAOX,QAIhBrM,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAGxBlN,qBAAqB8D,aACjBlE,QAAS0E,aAAciI,eAAe3I,KACtC,WACIhE,OAAO0O,SAAU,8FCrCjC5O,QAAQ1B,OAAO,QAAQgxC,UAAU,gBAAiB,WAC9C,OACIC,SAAU,IACVv3B,KAAM,SAASiH,MAAOuwB,QAASC,OAI3B,IAAIC,aAAe,SAASC,KACxB,IAAI/iC,IAAM+iC,IAAI7mC,KAAK8D,IACnB5M,QAAQwvC,QAAQ5iC,KAAKgjC,YAAY,gBAIjCrS,KAAOiS,QAAQK,KAAK,uBACxB7vC,QAAQ4D,QAAQ25B,KAAM,SAAS3wB,MAC3BA,IAAM5M,QAAQwvC,QAAQ5iC,MAClBkjC,GAAG,SACHljC,IAAKA,KACN8iC,gBAIPzwB,MAAM7V,IAAI,WAAY,WAClBpJ,QAAQ4D,QAAQ25B,KAAM,SAAS3wB,KAC3B5M,QAAQwvC,QAAQ5iC,KAAKmjC,IAAI,QAASL,+GC9BtD1vC,QAAQ1B,OAAO,QAAQgxC,UAAU,wBAC7B,uBACA,SAASx+B,sBACL,OACIy+B,SAAU,IACVtwB,SACA+wB,UACI,kCACI,2CACA,iCACI,oDACA,wCACJ,UACJ,OACA,kCACI,8CACA,6BACA,iCACI,oDACA,yCACJ,UACJ,QACFxV,KAAK,IACPv6B,WAAY,SAASC,OAAQoJ,WAAY2mC,SAAUC,WAK/ChwC,OAAO4I,KAAOgI,qBAAqB1L,eAKnDpF,QAAQ1B,OAAO,QAAQgxC,UAAU,kBAC7B,UAAW,uBAAwB,eAAgB,uBACnD,SAAS5gC,QAASoC,qBACdjE,aAAcvM,sBACd,OACIivC,SAAU,IACVtwB,OACIkxB,OAAQ,MAEZC,YACI,sCACI59B,YAAY69B,cACpBpwC,WAAY,SAASC,OAAQoJ,WAAY2mC,SAAUC,WAC/ChwC,OAAO0O,SAAU,EACjB1O,OAAOowC,QAAS,EAChBpwC,OAAOqwC,UAAW,EAClBrwC,OAAOiwC,OAASjwC,OAAOiwC,QAAU,OACjCjwC,OAAO6Q,cAAgBD,qBAAqB1L,UAC5ClF,OAAOswC,gBACPtwC,OAAOynC,QACH8I,OAAO,EACPC,SAAS,EACTC,iBAAiB,EACjBC,YAAY,EACZC,aAAc,GACdC,YAAa,UACbjoC,IAAK,GACLkoC,iBAAkB,GAClBC,aAAc,GACdC,YACA9K,UACA+K,YACIC,SAAS,EACTF,YACA9K,YAGRjmC,OAAOkxC,oBACPlxC,OAAOmxC,aACHF,SAAS,EACTG,WAEJpxC,OAAOqxC,eACPrxC,OAAOsxC,OACHL,SAAS,EACTG,WAEJpxC,OAAOuxC,mBACPvxC,OAAOwxC,gBACPxxC,OAAOyxC,eAAiB,KACxBzxC,OAAO0xC,cAAgB,KAGvB1xC,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAIxBtN,OAAO2xC,aAAe,WAClB,OAA6C,IAA1C3xC,OAAO6Q,cAAcG,UAAUlP,OACvB,wBAEA,mBAKf9B,OAAO4xC,eAAiB,WACpB,MAAiC,WAA9B5xC,OAAOynC,OAAOmJ,aAQrB5wC,OAAO6xC,yBAA2B,WAC9B,OAAO7xC,OAAOynC,OAAOgJ,iBAIzBzwC,OAAO8xC,sBAAwB,WAC3B9xC,OAAOynC,OAAOgJ,iBACTzwC,OAAOynC,OAAOgJ,iBAIvBzwC,OAAO+xC,sBAAwB,WAC3B,OACI/xC,OAAOynC,OAAOoJ,iBAAiB/uC,OAAS,GACxC9B,OAAOynC,OAAOqJ,aAAahvC,OAAS,GAK5C9B,OAAOgyC,kBAAoB,WACvB,OAAOhyC,OAAOynC,OAAO8I,OAIzBvwC,OAAOiyC,cAAgB,WACnB,IAAIC,eAAiBlyC,OAAO6Q,cAAcshC,OAAOC,QACjD,GAA6B,IAA1BF,eAAepwC,OACd9B,OAAOynC,OAAO8I,OAAQ,MACnB,CACH,IAAI8B,QAAUryC,OAAOynC,OAAO8I,MAC5BvwC,OAAOynC,OAAO8I,MACVvwC,OAAOynC,OAAOmJ,cACdsB,eAAe,GAAGtB,YACW,WAA9B5wC,OAAOynC,OAAOmJ,cACb5wC,OAAOynC,OAAO8I,MAAQvwC,OAAOynC,OAAO8I,OAChCvwC,OAAOynC,OAAO9+B,MACdupC,eAAe,GAAGvpC,KAGvB0pC,UAAYryC,OAAOynC,OAAO8I,QAGzBvwC,OAAOynC,OAAO9+B,IAAMupC,eAAe,GAAGvpC,IACtC3I,OAAOynC,OAAOoJ,iBACVqB,eAAe,GAAGrB,iBACtB7wC,OAAOynC,OAAOqJ,aACVoB,eAAe,GAAGpB,cAE1B9wC,OAAOynC,OAAOsJ,YACd/wC,OAAOynC,OAAOxB,UACdjmC,OAAOynC,OAAOuJ,YACVC,SAAS,EACTF,YACA9K,WAGRjmC,OAAOsyC,eACPtyC,OAAOuyC,yBAIJvyC,OAAOynC,OAAO8I,OACiB,YAA9BvwC,OAAOynC,OAAOmJ,aACd5wC,OAAOwyC,WAKfxyC,OAAOyyC,wBAA0B,WAC7B,MAAiC,YAA9BzyC,OAAOynC,OAAOmJ,cAGL5wC,OAAO+xC,yBACkB,IAA7B/xC,OAAOynC,OAAO9+B,IAAI7G,QAClB9B,OAAOynC,OAAOiJ,aAK1B1wC,OAAO0yC,gBAAkB,WACrB,MAAiC,YAA9B1yC,OAAOynC,OAAOmJ,aAETA,YAAa,YAIbA,YAAa5wC,OAAOynC,OAAOmJ,YAC3BjoC,IAAK3I,OAAOynC,OAAO9+B,IACnBkoC,iBAAkB7wC,OAAOynC,OAAOoJ,iBAChCC,aAAc9wC,OAAOynC,OAAOqJ,eAOxC9wC,OAAO2yC,eAAiB,WACpB7yC,QAAQ4D,QAAQ1D,OAAOynC,OAAOsJ,SAAU,SAASp4B,SACzB,WAAjBA,QAAQ/Z,MACPoB,OAAOynC,OAAOuJ,WAAWD,SAASjuC,KAAK6V,WAG/C7Y,QAAQ4D,QAAQ1D,OAAOynC,OAAOxB,OAAQ,SAAS2M,MAC1B,UAAdA,KAAKh0C,MACJoB,OAAOynC,OAAOuJ,WAAW/K,OAAOnjC,KAAK8vC,SAQjD5yC,OAAOwyC,QAAU,WACb,IAAGxyC,OAAOyyC,0BAAV,CAIA,IAAIhL,OAASznC,OAAO0yC,kBACpB1yC,OAAOynC,OAAOiJ,YAAa,EAC3B1wC,OAAOynC,OAAOsJ,YACd/wC,OAAOynC,OAAOxB,UACdjmC,OAAOynC,OAAOuJ,WAAWC,SAAU,EACnCjxC,OAAOynC,OAAOuJ,WAAWD,YACzB/wC,OAAOynC,OAAOuJ,WAAW/K,UACzBjmC,OAAOuyC,yBACP3hC,qBAAqBiiC,MAAMpL,QAAQzjC,KAAK,SAAS4E,MAC7C5I,OAAOynC,OAAOiJ,YAAa,EAC3B9nC,KAAO9I,QAAQgzC,SAASlqC,MACxB5I,OAAOynC,OAAOsJ,SAAWnoC,KAAKmoC,SAC9B/wC,OAAOynC,OAAOxB,OAASr9B,KAAKq9B,OAC5BjmC,OAAO2yC,iBACP3yC,OAAOuyC,0BACR,SAASjxC,OACRtB,OAAOynC,OAAOiJ,YAAa,EAC3B1wC,OAAOynC,OAAOkJ,aAAervC,UAKrCtB,OAAO+yC,iBAAmB,WACtB,OAAO/yC,OAAOynC,OAAO+I,SACjBxwC,OAAOynC,OAAO8I,QAAUvwC,OAAOgzC,kBAKvChzC,OAAOgzC,eAAiB,WACpB,OACIhzC,OAAOynC,OAAOsJ,SAASjvC,OAAS,GAChC9B,OAAOynC,OAAOxB,OAAOnkC,OAAS,GAItC9B,OAAOizC,qBAAuB,WAC1B,IAAIlC,SAAW/wC,OAAO6Q,cAAcshC,OAAOpB,SACxC/wC,OAAOynC,OAAO8I,QACbQ,SAAW/wC,OAAOynC,OAAOsJ,UAE7B,IAAItxB,YAOJ,OANA3f,QAAQ4D,QAAQqtC,SAAU,SAASp4B,SAC3BA,QAAQu6B,UAC0B,IAAlCv6B,QAAQnX,MAAMwB,QAAQ,QACtByc,SAAS3c,KAAK6V,WAGf8G,UAIXzf,OAAOmzC,wBAA0B,WAC7B,IAAIpC,SAAW/wC,OAAO6Q,cAAcshC,OAAOpB,SACxC/wC,OAAOynC,OAAO8I,QACbQ,SAAW/wC,OAAOynC,OAAOsJ,UAE7B,IAAItxB,YAOJ,OANA3f,QAAQ4D,QAAQqtC,SAAU,SAASp4B,SAC3BA,QAAQu6B,UAC0B,IAAlCv6B,QAAQnX,MAAMwB,QAAQ,QACtByc,SAAS3c,KAAK6V,WAGf8G,UAIXzf,OAAOozC,iBAAmB,WACtB,IAAInN,OAASjmC,OAAO6Q,cAAcshC,OAAOlM,OACtCjmC,OAAOynC,OAAO8I,QACbtK,OAASjmC,OAAOynC,OAAOxB,QAE3B,IAAIxmB,YAMJ,OALA3f,QAAQ4D,QAAQuiC,OAAQ,SAAS2M,MACzBA,KAAKM,SACLzzB,SAAS3c,KAAK8vC,QAGfnzB,UAIXzf,OAAOwgC,WAAa,SAASj6B,KAAM8F,KAC/B,OAAOrM,OAAOynC,OAAOuJ,WAAWzqC,MAAMvD,QAAQqJ,MAAQ,GAI1DrM,OAAOqzC,gBAAkB,SAAS9sC,KAAM8F,KACpC,IAAI/E,IAAMtH,OAAOynC,OAAOuJ,WAAWzqC,MAAMvD,QAAQqJ,MACrC,IAAT/E,IACCtH,OAAOynC,OAAOuJ,WAAWzqC,MAAMzD,KAAKuJ,KAEpCrM,OAAOynC,OAAOuJ,WAAWzqC,MAAMrD,OAAOoE,IAAK,GAE/CtH,OAAOynC,OAAOuJ,WAAWC,SAAU,EACnCjxC,OAAOuyC,0BAIXvyC,OAAOszC,gBAAkB,WACrB,OAAGtzC,OAAOswC,aAAaxuC,OAAS,GAMxB9B,OAAOynC,OAAOxB,OAAOnkC,OAAS,GAC9B9B,OAAOynC,OAAOsJ,SAASjvC,OAAS,GAK5C9B,OAAOuyC,uBAAyB,WAC5B,IAAIgB,YAAc,WAAa,OAAO,MAClCviC,UAAYhR,OAAO6Q,cAAcG,UAAUlF,OAC3C,SAAS0nC,UACL,IACIC,YADaD,SAAS50C,KAAK8M,MAAM,KACR,GAC7B,OACuB,IAAnB8nC,SAASE,OACO,WAAhBD,cAERzzC,OAAOynC,OAAO8I,QACdgD,YAAc,SAAS56B,QAASi6B,MAC5B,IAAIv0C,EACJ,IAAIA,EAAI,EAAGA,EAAI2S,UAAUlP,OAAQzD,IAAK,CAElC,IAAIm1C,SAAYxiC,UAAU3S,GAG1B,GAFiBm1C,SAAS50C,KAAK8M,MAAM,KACH,KACViN,SACpB66B,SAASZ,OAASA,KAElB,OADA5hC,UAAU9N,OAAO7E,EAAG,GACbm1C,SAGf,OAAO,OAKfxzC,OAAOswC,aAAaxuC,OAAS,EAC7BhC,QAAQ4D,QAAQ1D,OAAOynC,OAAOuJ,WAAWD,SACrC,SAASp4B,SACL7Y,QAAQ4D,QAAQ1D,OAAOynC,OAAOuJ,WAAW/K,OACrC,SAAS2M,MACL,IAAIe,OACAC,KAAM,wBACNpyC,MAAOmX,QAAQnX,MACfoxC,KAAMA,KAAKpxC,MACX0zB,KAAM,IACNvW,OAAQ,wBACRk1B,cAAc,EACdj1C,KAAM+Z,QAAQ/Z,MAEd40C,SAAWD,YACX56B,QAAQ/Z,KAAMg0C,KAAKh0C,MACpBkB,QAAQU,SAASgzC,YAChBG,MAAMG,WAAaN,SAASnrC,GAC5BsrC,MAAMC,KACF,kBAAoBJ,SAASI,KACjCD,MAAMze,KAAOse,SAASte,KACtBye,MAAMh1B,OAAS60B,SAAS70B,OACrB60B,SAASO,cACRJ,MAAMC,MAAQ,wBAGtB5zC,OAAOswC,aAAaxtC,KAAK6wC,WAMrC3zC,OAAOynC,OAAO8I,OACdzwC,QAAQ4D,QAAQsN,UAAW,SAASwiC,UAChC,IAAIQ,WAAaR,SAAS50C,KAAK8M,MAAM,KACjCioC,OACAC,KAAM,wBACNpyC,MAAOgyC,SAAShyC,MAChBoxC,KAAMY,SAASZ,KACf1d,KAAMse,SAASte,KACfvW,OAAQ,kBACRk1B,cAAc,EACdj1C,KAAMo1C,WAAW,IAErBh0C,OAAOswC,aAAaxtC,KAAK6wC,UAMrC3zC,OAAOi0C,2BAA6B,WAChC,IAOIjjC,UACAhR,OAAO6Q,cAAcG,UAAUlF,OARhB,SAAS0nC,UACxB,IACIC,YADaD,SAAS50C,KAAK8M,MAAM,KACR,GAC7B,OACuB,IAAnB8nC,SAASE,OACO,gBAAhBD,cAsBRzzC,OAAOkxC,iBAAiBpvC,OAAS,EACjChC,QAAQ4D,QAAQ1D,OAAOmxC,YAAYC,OAC/B,SAAS8C,iBACL,GAAGA,gBAAgBC,QAAS,CACxB,IAAIH,WAAaE,gBAAgBt1C,KAAK8M,MAClC,KACAioC,OACAC,KAAM,wBACNpyC,MAAO0yC,gBAAgB1yC,MACvBoxC,KAAMoB,WAAW,GACjB9e,KAAM,IACNvW,OAAQ,wBACRk1B,cAAc,GAEdL,SAhCE,SAAS76B,QAASi6B,MAChC,IAAIv0C,EACJ,IAAIA,EAAI,EAAGA,EAAI2S,UAAUlP,OAAQzD,IAAK,CAGlC,IAAIm1C,SAAYxiC,UAAU3S,GAG1B,GAFiBm1C,SAAS50C,KAAK8M,MAAM,KACH,KACViN,SACpB66B,SAASZ,OAASA,KAElB,OADA5hC,UAAU9N,OAAO7E,EAAG,GACbm1C,SAGf,OAAO,KAkBgBD,CACXS,WAAW,GAAIA,WAAW,IAC3Bl0C,QAAQU,SAASgzC,YAChBG,MAAMC,KACF,kBAAoBJ,SAASI,KACjCD,MAAMze,KAAOse,SAASte,KACtBye,MAAMh1B,OAAS60B,SAAS70B,OACrB60B,SAASO,cACRJ,MAAMC,MAAQ,wBAGtB5zC,OAAOkxC,iBAAiBpuC,KAAK6wC,UAMzC7zC,QAAQ4D,QAAQsN,UAAW,SAASwiC,UAChC,IAAIG,OACAC,KAAM,wBACNpyC,MAAOgyC,SAAShyC,MAChBoxC,KAAMY,SAASZ,KACf1d,KAAMse,SAASte,KACfvW,OAAQ,kBACRk1B,cAAc,GAElB7zC,OAAOkxC,iBAAiBpuC,KAAK6wC,UAKrC3zC,OAAOo0C,sBAAwB,WAC3B,IASIpjC,UACAhR,OAAO6Q,cAAcG,UAAUlF,OAVrB,SAAS0nC,UACnB,IACIC,YADaD,SAAS50C,KAAK8M,MAAM,KACR,GAC7B,OACuB,IAAnB8nC,SAASE,OACO,WAAhBD,aACgB,gBAAhBA,aACgB,WAAhBA,cAsBRzzC,OAAOqxC,YAAYvvC,OAAS,EAC5BhC,QAAQ4D,QAAQ1D,OAAOsxC,MAAMF,OACzB,SAASiD,YACL,GAAGA,WAAWF,QAAS,CACnB,IAAIH,WAAaK,WAAWz1C,KAAK8M,MAAM,KACnCioC,OACAC,KAAM,wBACNpyC,MAAO6yC,WAAW7yC,MAClBoxC,KAAMoB,WAAW,GACjB9e,KAAM,IACNvW,OAAQ,wBACRk1B,cAAc,GAEdL,SA/BE,SAAS76B,QAASi6B,MAChC,IAAIv0C,EACJ,IAAIA,EAAI,EAAGA,EAAI2S,UAAUlP,OAAQzD,IAAK,CAGlC,IAAIm1C,SAAYxiC,UAAU3S,GAG1B,GAFiBm1C,SAAS50C,KAAK8M,MAAM,KACH,KACViN,SACpB66B,SAASZ,OAASA,KAElB,OADA5hC,UAAU9N,OAAO7E,EAAG,GACbm1C,SAGf,OAAO,KAiBgBD,CACXS,WAAW,GAAIA,WAAW,IAC3Bl0C,QAAQU,SAASgzC,YAChBG,MAAMC,KACF,kBAAoBJ,SAASI,KACjCD,MAAMze,KAAOse,SAASte,KACtBye,MAAMh1B,OAAS60B,SAAS70B,OACrB60B,SAASO,cACRJ,MAAMC,MAAQ,wBAGtB5zC,OAAOqxC,YAAYvuC,KAAK6wC,UAMpC7zC,QAAQ4D,QAAQsN,UAAW,SAASwiC,UAChC,IAAIG,OACAC,KAAM,wBACNpyC,MAAOgyC,SAAShyC,MAChBoxC,KAAMY,SAASZ,KACf1d,KAAMse,SAASte,KACfvW,OAAQ,kBACRk1B,cAAc,GAElB7zC,OAAOqxC,YAAYvuC,KAAK6wC,UAKhC3zC,OAAOs0C,kBAAoB,SAASZ,MAAOtC,QAEvCA,OAAOtvC,OAAS,EAChBhC,QAAQ4D,QAAQ1D,OAAO6Q,cAAcG,UACjC,SAASwiC,UACL,GAAGA,SAASE,QAAUA,MAAO,CACzB,IAAIC,OACAC,KAAM,kBAAoBJ,SAASI,KACnCpyC,MAAOgyC,SAAShyC,MAChBoxC,KAAMY,SAASZ,KACf2B,SAAUf,SAASnrC,GACnB6sB,KAAMse,SAASte,KACfvW,OAAQ60B,SAAS70B,QAElB60B,SAASO,cACRJ,MAAMC,MAAQ,uBAElBxC,OAAOtuC,KAAK6wC,WAM5B3zC,OAAOw0C,0BAA4B,WAC/Bx0C,OAAOs0C,kBAAkB,EAAGt0C,OAAOuxC,kBAIvCvxC,OAAOy0C,uBAAyB,WAC5Bz0C,OAAOs0C,kBAAkB,EAAGt0C,OAAOwxC,eAIvCxxC,OAAO00C,cAAgB,WACnB,IAAIr2C,EACJ,IAAIA,EAAI,EAAGA,EAAI2B,OAAOswC,aAAaxuC,OAAQzD,IAAK,CAE5C,IAAI2B,OAAOswC,aAAajyC,GAAGw1C,cACvB7zC,OAAOswC,aAAajyC,GAAGmD,MAAMwB,QAAQ,QAAU,EAI/C,GAFamL,SACTnO,OAAOswC,aAAajyC,GAAGmD,MAAMkK,MAAM,KAAK,GAAI,KACnC,GACT,OAAO,EAInB,OAAO,GAIX1L,OAAO20C,4BAA8B,WACjC,IAAIt2C,EACJ,IAAIA,EAAI,EAAGA,EAAI2B,OAAOswC,aAAaxuC,OAAQzD,IACvC,IAAI2B,OAAOswC,aAAajyC,GAAGw1C,cACxB7zC,OAAOswC,aAAajyC,GAAGO,OACvBoB,OAAO6Q,cAAcshC,OAAOyC,qBAC3B,OAAO,EAGf,OAAO,GAIX50C,OAAOqoB,uBAAyB,SAASsrB,OACrC,OAAOA,QAAU3zC,OAAO0xC,eAI5B1xC,OAAO4oB,YAAc,SAAS+qB,OAC1B3zC,OAAO0xC,cAAgBiC,OAI3B3zC,OAAO60C,aAAe,WAClB70C,OAAO0xC,cAAgB,MAI3B1xC,OAAO6oB,cAAgB,SAAS8qB,OACzBA,QAAU3zC,OAAO0xC,eAChB9gC,qBAAqBkkC,aAChBzsC,GAAIsrC,MAAMY,WAEnBv0C,OAAO60C,gBAIX70C,OAAO+0C,qBAAuB,WAC1B,OAAO/0C,OAAO6Q,cAAcmkC,uBAKhCh1C,OAAOi1C,kBAAoB,WACvB,OAAOj1C,OAAOszC,mBAIlBtzC,OAAOk1C,iBAAmB,WACtB,IAEI72C,EAFA82C,oCAAqC,EACrCC,4BAA8B,EAElC,IAAI/2C,EAAI,EAAGA,EAAI2B,OAAOswC,aAAaxuC,OAAQzD,IACpC2B,OAAOswC,aAAajyC,GAAGO,OACvBoB,OAAO6Q,cAAcshC,OAAOyC,sBAC3BQ,8BASR,IAAI/2C,EAAI,EAAGA,EAAI2B,OAAOswC,aAAaxuC,OAAQzD,IACvC,GAAG2B,OAAOswC,aAAajyC,GAAGw1C,cACvB7zC,OAAOswC,aAAajyC,GAAGO,OACvBoB,OAAO6Q,cAAcshC,OAAOyC,sBACI,IAAhCQ,4BAAmC,CAClCD,oCAAqC,EACrC,MAGR,OACKA,qCACAn1C,OAAOowC,SACPpwC,OAAOqwC,UACRrwC,OAAO00C,iBAIf10C,OAAOq1C,qBAAuB,WAC1B,OAAGr1C,OAAOowC,OACC,YAEA,oBAKfpwC,OAAOs1C,cAAgB,WACnB,OAAQt1C,OAAOowC,SAAWpwC,OAAOqwC,UAIrCrwC,OAAOu1C,kBAAoB,WACvB,OAAGv1C,OAAOqwC,SACC,cAEA,eAKfrwC,OAAOw1C,WAAa,WACZx1C,OAAOs1C,kBAIXt1C,OAAOqwC,UAAW,EAClBz/B,qBAAqB4kC,aAAaxxC,KAAK,WACnChE,OAAOqwC,UAAW,MAK1BrwC,OAAOy1C,cAAgB,WACnB,GAAIz1C,OAAOk1C,mBAAX,CAIA,IAAI3sC,OAASvI,OAAO0yC,kBACpBnqC,OAAOwoC,SACH/wC,OAAOynC,OAAOuJ,WAAWD,SAAS5oC,IAAI,SAASkE,KAC3C,OAAOA,IAAIzN,OAEnB2J,OAAO09B,OACHjmC,OAAOynC,OAAOuJ,WAAW/K,OAAO99B,IAAI,SAASkE,KACzC,OAAOA,IAAIzN,OAEnBoB,OAAOowC,QAAS,EAChBx/B,qBAAqB8kC,WAAWntC,QAAQvE,KAAK,WACzChE,OAAOowC,QAAS,EAChBpwC,OAAOynC,OAAO8I,OAAQ,EACtBvwC,OAAOynC,OAAOuJ,WAAWC,SAAU,EACnCjxC,OAAOsyC,mBAMftyC,OAAO21C,iBAAmB,SAASC,QAASC,eACxC,IAAIC,iBAQJ,OAPAh2C,QAAQ4D,QAAQkyC,QAAS,SAASvpC,KAC9BvM,QAAQ4D,QAAQmyC,cAAe,SAASE,WACjC1pC,IAAIzN,OAASm3C,UAAUn3C,MACtBk3C,cAAchzC,KAAKuJ,SAIxBypC,eAIX91C,OAAOsyC,aAAe,WAElB,IAAGtyC,OAAOynC,OAAO8I,MAAjB,CAIA,IAAIyF,WAAah2C,OAAO6Q,cAAcshC,OAAOC,QAAQtwC,OACrD,GAAkB,IAAfk0C,WACCh2C,OAAOynC,OAAO8I,OAAQ,EACtBvwC,OAAOynC,OAAOmJ,YAAc,SAC5B5wC,OAAOynC,OAAOkJ,aACV,mCACD,GAAkB,IAAfqF,WAAkB,CACxB,IAAIvO,OAASznC,OAAO6Q,cAAcshC,OAAOC,QAAQ,GACjDpyC,OAAOynC,OAAOmJ,YAAcnJ,OAAOmJ,YACT,YAAvBnJ,OAAOmJ,aACN5wC,OAAOynC,OAAO9+B,IAAM,GACpB3I,OAAOynC,OAAOoJ,iBAAmB,GACjC7wC,OAAOynC,OAAOqJ,aAAe,KAE7B9wC,OAAOynC,OAAO9+B,IAAM8+B,OAAO9+B,IAC3B3I,OAAOynC,OAAOoJ,iBACVpJ,OAAOoJ,iBACX7wC,OAAOynC,OAAOqJ,aAAerJ,OAAOqJ,cAExC9wC,OAAOynC,OAAOsJ,SACV/wC,OAAO6Q,cAAcshC,OAAOpB,SAChC/wC,OAAOynC,OAAOxB,OACVjmC,OAAO6Q,cAAcshC,OAAOlM,OAC5BjmC,OAAOynC,OAAOuJ,WAAWC,SAczBjxC,OAAOynC,OAAOuJ,WAAWD,SACrB/wC,OAAO21C,iBACH31C,OAAOynC,OAAOsJ,SACd/wC,OAAOynC,OAAOuJ,WAAWD,UACjC/wC,OAAOynC,OAAOuJ,WAAW/K,OACrBjmC,OAAO21C,iBACH31C,OAAOynC,OAAOxB,OACdjmC,OAAOynC,OAAOuJ,WAAW/K,UAlBjCjmC,OAAOynC,OAAOuJ,WAAWD,SACrB/wC,OAAOynC,OAAOsJ,SAASjlC,OAAO,SAASO,KACnC,OAAOA,IAAI8nC,UAEnBn0C,OAAOynC,OAAOuJ,WAAW/K,OACrBjmC,OAAOynC,OAAOxB,OAAOn6B,OAAO,SAASO,KACrC,OAAOA,IAAI8nC,WAcnBn0C,OAAOuyC,8BAIPvyC,OAAOynC,OAAO+I,SAAU,EACxBxwC,OAAOynC,OAAOsJ,SACV/wC,OAAO6Q,cAAcshC,OAAOpB,SAChC/wC,OAAOynC,OAAOxB,OACVjmC,OAAO6Q,cAAcshC,OAAOlM,OAChCjmC,OAAOynC,OAAOuJ,WAAWD,SACrB/wC,OAAOynC,OAAOsJ,SAASjlC,OAAO,SAASO,KACnC,OAAOA,IAAI8nC,UAEnBn0C,OAAOynC,OAAOuJ,WAAW/K,OACrBjmC,OAAOynC,OAAOxB,OAAOn6B,OAAO,SAASO,KACrC,OAAOA,IAAI8nC,UAEfn0C,OAAOynC,OAAOkJ,aACV,2JAIJ3wC,OAAOuyC,2BAKfvyC,OAAOi2C,0BAA4B,SAAStC,OACxC3zC,OAAOmxC,YAAYF,SAAU,EAC7B0C,MAAMQ,SAAWR,MAAMQ,QACvBn0C,OAAOi0C,8BAIXj0C,OAAOk2C,wBAA0B,WAC7B,IAAI3tC,QACA6oC,OAAQpxC,OAAOmxC,YAAYC,OAAOtlC,OAAO,SACjC6nC,OACJ,OAAOA,MAAMQ,UACdhsC,IAAI,SAASwrC,OACZ,OAAOA,MAAM/0C,QAGrBoB,OAAOowC,QAAS,EAChBx/B,qBAAqBulC,eAAe5tC,QAAQvE,KACpC,WACJhE,OAAOowC,QAAS,KAKxBpwC,OAAOo2C,qBAAuB,SAASzC,OACnC3zC,OAAOsxC,MAAML,SAAU,EACvB0C,MAAMQ,SAAWR,MAAMQ,QACvBn0C,OAAOo0C,yBAIXp0C,OAAOq2C,mBAAqB,WACxB,IAAI9tC,QACA6oC,OAAQpxC,OAAOsxC,MAAMF,OAAOtlC,OAAO,SAAS6nC,OACxC,OAAOA,MAAMQ,UACdhsC,IAAI,SAASwrC,OACZ,OAAOA,MAAM/0C,QAGrBoB,OAAOowC,QAAS,EAChBx/B,qBAAqB0lC,UAAU/tC,QAAQvE,KAAK,WACxChE,OAAOowC,QAAS,KAKxBpwC,OAAO0oB,aAAe,SAASirB,OAE3B,IAAI7zC,QAAQyC,SAASoxC,MAAMG,YACvB,OAAO,EAKX,IAAIz1C,EACA0yC,SAAW/wC,OAAO6Q,cAAcshC,OAAOpB,SACvC9K,OAASjmC,OAAO6Q,cAAcshC,OAAOlM,OACzC,IAAI5nC,EAAI,EAAGA,EAAI0yC,SAASjvC,OAAQzD,IAAK,CACjC,IAAIsa,QAAUo4B,SAAS1yC,GACvB,GAAGsa,QAAQu6B,SAAWS,MAAMnyC,QAAUmX,QAAQnX,MAC1C,OAAO,EAGf,IAAInD,EAAI,EAAGA,EAAI4nC,OAAOnkC,OAAQzD,IAAK,CAC/B,IAAIu0C,KAAO3M,OAAO5nC,GAClB,GAAGu0C,KAAKM,SAAWS,MAAMf,OAASA,KAAKh0C,KACnC,OAAO,EAGf,OAAO,GAIXoB,OAAO80C,YAAc,SAASnB,OACvB7zC,QAAQU,SAASmzC,OAChB3zC,OAAOyxC,eAAiBkC,MAAMG,WAE9B9zC,OAAOyxC,eAAiB,MAKhCzxC,OAAOu2C,mBAAqB,WAExB3lC,qBAAqBkkC,aAChBzsC,GAAIrI,OAAOyxC,iBAChBzxC,OAAOyxC,eAAiB,MAK5B,IAAI+E,MAAQ,EACZ5lC,qBAAqB5J,eAAehD,KAAK,WAExB,KADbwyC,OAAS,KAELx2C,OAAO0O,SAAU,KAGzBtO,qBAAqB6I,YACjBjJ,OAAQ2M,cAAc3I,KAAK,WAEd,KADbwyC,OAAS,KAELx2C,OAAO0O,SAAU,KAMzB1O,OAAOkP,OAAO,uBAAwB,WAC9BpP,QAAQU,SAASR,OAAO6Q,cAAcshC,SAG1CnyC,OAAOsyC,iBAIXtyC,OAAOkP,OAAO,0BAA2B,WACjCpP,QAAQiR,QAAQ/Q,OAAO6Q,cAAcG,aAGzChR,OAAOuyC,yBACPvyC,OAAOi0C,6BACPj0C,OAAOo0C,wBACPp0C,OAAOw0C,4BACPx0C,OAAOy0C,4BAGXz0C,OAAOkP,OAAO,mCAAoC,WAC9C,IAAIkiC,OAASpxC,OAAO6Q,cAAc4lC,mBAC9B32C,QAAQiR,QAAQqgC,UAGhBpxC,OAAOmxC,YAAYF,UACnBjxC,OAAOmxC,YAAYC,OAASA,QAEhCpxC,OAAOi0C,gCAGXj0C,OAAOkP,OAAO,6BAA8B,WACpCpP,QAAQiR,QAAQ/Q,OAAO6Q,cAAc6lC,gBAGrC12C,OAAOsxC,MAAML,UACbjxC,OAAOsxC,MAAMF,OAASpxC,OAAO6Q,cAAc6lC,cAE/C12C,OAAOo0C,2BAIXp0C,OAAOkJ,IAAI,WAAY,WACnB0H,qBAAqB3J,iHCv+BzCnH,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAEpDA,eAAeC,IAAI,gCACjB,kCACE,WACE,8CACA,6BACA,yBACA,wBACA,+BACF,IACE,mBACA,2CACF,YACA,4CACE,iBACA,uBACA,uBACA,uBACF,IACE,WACE,UACE,qDACF,KACA,sCACA,sCACE,+BACJ,YACF,SACF,UACAvc,KAAK,QAGXx6B,QAAQ1B,OAAO,QAAQgxC,UAAU,UAAW,WACxC,OACIC,SAAU,IACVyH,SAAS,EACTC,QAAS,UACTh4B,OACIi4B,QAAS,IACTC,QAAS,KAEb/G,YAAa,+BACbp4B,KAAO,SAASiH,MAAOuwB,QAASC,MAAO2H,aAInC,IAAIC,aAAe,cAChBr3C,QAAQyM,SAASgjC,MAAM4H,eACC,KAAvB5H,MAAM4H,eACNA,aAAe5H,MAAM4H,cAKzBp4B,MAAM0hB,WAAa,SAAS2W,QACxBr4B,MAAMs4B,OAAQ,EACdH,YAAYI,cAAcF,SAI9Br4B,MAAMw4B,SAAW,WACb,OAAGz3C,QAAQU,SAAS02C,YAAYM,cAC5BzrC,OAASmrC,YAAYM,YACrBz4B,MAAM04B,WAAY,EAGf33C,QAAQyM,SAASR,OAAOwH,eAChBxH,OAAOwH,cAEXxH,OAAOvK,QAEdud,MAAM04B,WAAY,EACXN,eAMfp4B,MAAM24B,eAAiB,SAAS3rC,QAC5B,OAAIgT,MAAM04B,WAGH33C,QAAQyM,SAASR,OAAOwH,eAChBxH,OAAOwH,cAHXxH,OAAOvK,OAatB01C,YAAYS,qBAAqB70C,KAAK,WAClCic,MAAM64B,MAAMrI,MAAMsI,aAG1B93C,WAAY,SAASC,OAAQoJ,WAAY2mC,SAAUC,WAE/ChwC,OAAOq3C,OAAQ,EACfr3C,OAAOy3C,WAAY,EAInB1H,SAAS3N,KAAK,QAAS,SAAUqN,KAC7BA,IAAIqI,oBAIR9H,UAAUL,KAAK,QAAQvN,KAAK,QAAS,WAGjCh5B,WAAW2uC,OAAO/3C,OAAOq3C,OAAQ,kGCjHjDv3C,QAAQ1B,OAAO,QAAQgxC,UAAU,kBAAmB,WAClD,SAAS4I,UACL,OACI3I,SAAU,IACVv3B,KAAM,SAASiH,MAAOuwB,QAASC,OAC7B,IAGI0I,QACF,uBAHE,yBAA2B1I,MAAM2I,eAC/B,WAAa5lC,YAAY69B,eAES,oBACxCb,QAAQ6I,KAAKF,SACbD,SAAS1I,QAAQ8I,WAAjBJ,CAA6Bj5B,oGCLxCjf,QAAQ1B,OAAO,QAAQgxC,UAAU,gBAAiB,WAC9C,OACIC,SAAU,IACVtwB,OACIs5B,cAAe,KAEnBvgC,KAAM,SAASiH,MAAOuwB,QAASgJ,YA6B3Bv5B,MAAM7P,OAAO6P,MAAMs5B,cA3BnB,WAII/I,QAAQiJ,QACRjJ,QAAQ7oC,KAAKsY,MAAMs5B,eAGnB,IAAIG,MAAQlJ,QAAQ6I,OAAOzsC,MAAM,MAC7B+sC,QAAU,GACVC,OAAS,SAIb7vC,EAAE8vC,KAAKH,MAAO,WACZE,QAAUD,QAAU,2BACpBn4B,KAAO,UACPm4B,QAAU,OAEZC,QAAU,UAGVpJ,QAAQ6I,KAAKO,2GC9B9B54C,QAAQ1B,OAAO,QAAQgxC,UAAU,kBAAmB,WAChD,OACIC,SAAU,IACV0H,QAAS,UACTh4B,OACI65B,WAAY,IACZC,YAAa,KAEjB/gC,KAAM,SAASiH,MAAOuwB,QAASC,MAAO0H,SAGlC,IAAI6B,aAAe,WACZ/5B,MAAM65B,aACLtJ,QAAQyJ,OAGRh6B,MAAMg5B,OAAOh5B,MAAM85B,gBAG3BvJ,QAAQlN,KAAK,QAAS0W,cAItB,IAAIE,cAAgB,WAChBj6B,MAAMg5B,OAAOd,QAAQK,cAAchI,QAAQ7oC,UAE/C6oC,QAAQlN,KAAK,oBAAqB4W,eAGlC/B,QAAQgC,QAAU,WACd3J,QAAQ6I,KAAKlB,QAAQiC,YAAc,KAKvCjC,QAAQU,qBAAqB70C,KAAK,WAC9Bic,MAAM64B,MAAMrI,MAAMsI,YAKtB94B,MAAM7V,IAAI,WAAY,WAClBomC,QAAQ6J,OAAO,oBAAqBH,eACpC1J,QAAQ6J,OAAO,QAASL,yHC/CvCh5C,QAAQ1B,OAAO,QAAQoZ,QAAQ,gCAC3B,WAAY,YAAa,qBAAsB,SAC5C4hC,SAAUhkC,UAAWrG,oBACxB,IAAIu8B,KAAOhrB,KAMXA,KAAKnQ,eAGLmQ,KAAK+4B,YAGL/4B,KAAKg5B,eAAiB,WAClB,IAAIC,iBACJz5C,QAAQ4D,QAAQ4nC,KAAKn7B,YAAa,SAASJ,WACvCwpC,cAAcz2C,MAAMiN,UAAWA,cAInChB,mBAAmByqC,iBAAiBD,eAAev1C,KAC3C,SAASq4B,SACbv8B,QAAQ4D,QAAQ61C,cAAe,SAASx5C,YACpC,IAAI4e,OAAS0d,QAAQt8B,WAAWgQ,WAE5Bu7B,KAAK+N,SAASt5C,WAAWgQ,WAD1B4O,QAGuC,eAOtD2B,KAAKm5B,SAAW,SAAS1pC,WACrB,IAAI2pC,MAAQpO,KAAKn7B,YAAYnN,QAAQ+M,YAAc,EAQnD,GAPI2pC,OACApO,KAAKn7B,YAAYrN,KAAKiN,WAMvBjQ,QAAQomB,UAAUolB,KAAKqO,iBAAkB,CACxC,GAAGD,MACC,OAEAtkC,UAAUjS,OAAOmoC,KAAKqO,iBACtBrO,KAAKqO,qBAAkB1yB,EAO5BnnB,QAAQomB,UAAUolB,KAAKsO,eACtBR,SAASj2C,OAAOmoC,KAAKsO,cAEzBtO,KAAKsO,aAAeR,SAAS,WACzB9N,KAAKsO,kBAAe3yB,EACpBqkB,KAAKqO,gBAAkBvkC,UAAU,WAC7Bk2B,KAAKgO,kBACNO,KACHvO,KAAKgO,kBACN,MAIPh5B,KAAKw5B,WAAa,SAAS/pC,WACxB,IAAIzI,IAAMgkC,KAAKn7B,YAAYnN,QAAQ+M,WAChCzI,KAAO,GACNgkC,KAAKn7B,YAAYjN,OAAOoE,IAAK,GAIF,IAA5BgkC,KAAKn7B,YAAYrO,SACbhC,QAAQomB,UAAUolB,KAAKsO,gBACtBR,SAASj2C,OAAOmoC,KAAKsO,cACrBtO,KAAKsO,kBAAe3yB,GAErBnnB,QAAQomB,UAAUolB,KAAKqO,mBACtBvkC,UAAUjS,OAAOmoC,KAAKqO,iBACtBrO,KAAKqO,qBAAkB1yB,KAMlC3G,KAAKy5B,YAAc,SAAShqC,WACxB,IAAI4O,OAAS2sB,KAAK+N,SAAStpC,WAC3B,OAAGjQ,QAAQyM,SAASoS,SAAsB,YAAXA,QAQnC2B,KAAK05B,eAAiB,SAASjqC,WAC3B,IAAI4O,OAAS2sB,KAAK+N,SAAStpC,WAC3B,OAAGjQ,QAAQyM,SAASoS,QACTA,OAEA,2BAKpB7e,QAAQ1B,OAAO,QAAQgxC,UAAU,6BAC5B,+BAAgC,SAC7B6K,8BAEJ,OACI5K,SAAU,IACVtwB,OACIm7B,SAAU,KAEdpK,UACI,+CACI,mCACJ,0BAA0BxV,KAAK,IACnCxiB,KAAM,SAASiH,MAAOuwB,QAASC,OAE3B,IAAI4K,QAASC,YAAa,EAC1BD,QAAUp7B,MAAM7P,OAAO,WAAY,WAC5BpP,QAAQomB,UAAUnH,MAAMm7B,YAAcE,aACrCH,6BAA6BR,SAAS16B,MAAMm7B,UAC5CE,YAAa,EACbD,aAIRp7B,MAAMg7B,YAAc,WAChB,OAAOE,6BAA6BF,YAChCh7B,MAAMm7B,WAEdn7B,MAAMi7B,eAAiB,WACnB,OAAOC,6BAA6BD,eAChCj7B,MAAMm7B,WAIdn7B,MAAM7V,IAAI,WAAY,WACfkxC,YACCH,6BAA6BH,WAAW/6B,MAAMm7B,gHCpJlEp6C,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAEpDA,eAAeC,IAAI,8CACf,SACE,mEACA,UACA,iEACF,WACFvc,KAAK,QAGXx6B,QAAQ1B,OAAO,QAAQgxC,UAAU,wBAC7B,qBAAsB,kBACtB,SAASrgC,mBAAoBuG,iBACzB,OACI+5B,SAAU,IACVtwB,OACIhf,WAAY,wBACZs6C,SAAU,kBAEdnK,YAAa,6CACbnwC,WAAY,SAASC,QAYjB,SAASs6C,SAAS9iC,SACd,MAAsB,YAAnBA,QAAQmH,OACA,UACmB,aAAnBnH,QAAQmH,OACR,UACmB,SAAnBnH,QAAQmH,OACR,QAEA,UAKf,SAAS47B,WAAWC,QAASC,YAC3B,IAAIC,QAAU,EAMd,OALA56C,QAAQ4D,QAAQ82C,QAAS,SAAS57C,MAC7BA,OAAS67C,YACVC,YAGGA,QAKT,SAASC,oBAEL,GADA36C,OAAO46C,aAAe,UACnB96C,QAAQU,SAASR,OAAOD,YAAa,CACpC,IAAIuX,SAAWvI,mBAAmBwI,YAC9BvX,OAAOD,YACX,GAAGuX,SAASxV,OAAS,EAAG,CACpB,IAAI04C,QAAUljC,SAASnP,IAAImyC,WACM,IAA9BE,QAAQx3C,QAAQ,UACfhD,OAAO46C,aAAe,cACtB56C,OAAO66C,YAAcN,WACnBC,QAAS,SAAW,UACgB,IAAhCA,QAAQx3C,QAAQ,YACtBhD,OAAO46C,aAAe,UACtB56C,OAAO66C,YAAcN,WACnBC,QAAS,WAAa,cAExBx6C,OAAO46C,aAAe,UACtB56C,OAAO66C,YAAcN,WACnBC,QAAS,WAAa,cArDxCx6C,OAAO46C,aAAe,UACtB56C,OAAOsX,SAAWhC,gBAAgBnU,WAClCnB,OAAO66C,YAAc,GAClB76C,OAAOq6C,SACRr6C,OAAOq6C,UAAW,EAElBr6C,OAAOq6C,UAAW,EAuDpBr6C,OAAOkP,OAAO,yBAA0ByrC,mBACxC36C,OAAOkY,iBAAiB,WAAYyiC,mBAGpCA,wHCnFhB76C,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAIpD,IAAIkE,aAAeC,SAASC,cAAc,SAC1CF,aAAaG,WACT,sBACI,yBACA,sBACJ,IACA,+BACI,sBACA,WACA,YACA,UACA,aACA,+BACA,6BACA,4BACA,0BACA,yBACA,qBACJ,KACF3gB,KAAK,IACPygB,SAASG,qBAAqB,QAAQ,GAAGC,YAAYL,cAGrDlE,eAAeC,IAAI,iDACf,iCACI,mCACA,gDACJ,UACFvc,KAAK,QAGXx6B,QAAQ1B,OAAO,QAAQgxC,UAAU,uBAAwB,iBACrD,SAASgM,gBACL,OACI/L,SAAU,IACVgM,YAAY,EACZvE,SAAS,EACT/3B,OACIu8B,oBAAqB,KAEzBpL,YAAa,gDACbp4B,KAAM,SAASiH,MAAOuwB,QAASC,OAI3B,IAGIgM,aAHAC,QAAUlM,QAAQK,KAAK,8BACvB0L,WAAa/L,QAAQK,KACrB,4BAA4B5sB,WAAW,GAEjB,WAAvBs4B,WAAWI,SACVF,aAAe,WAIX,IAAI9L,IAAMsL,SAASW,YAAY,eAC/BjM,IAAIkM,eACA,aAAa,GAAM,EAAMC,OAAQ,EAAG,EAAG,EAAG,EAAG,GAC7C,GAAO,GAAO,GAAO,EAAO,EAAG,MACnCP,WAAWQ,cAAcpM,MAI7B+L,QAAQM,KAAMC,OAAQ,aACO,UAAvBV,WAAWI,SACjBF,aAAe,WAEXz7C,QAAQwvC,QAAQ+L,YAAYW,eAAe,UAI/CR,QAAQM,KAAMC,OAAQ,UAEtBR,aAAe,WAEXz7C,QAAQwvC,QAAQ+L,YAAYW,eAAe,UAOnD,IAAIC,aAAe,SAASxM,KACxB8L,eACA9L,IAAIyM,iBACJzM,IAAIqI,mBAEJqE,gBAAkB,SAAS1M,KAE3B1wB,MAAMg5B,OAAOh5B,MAAMu8B,qBACnB7L,IAAIyM,iBACJzM,IAAIqI,mBAMsB,YAA3BsD,eAAegB,SACdZ,QAAQ5L,GAAG,QAASqM,cACpBT,QAAQ5L,GAAG,WAAYuM,kBAEvBX,QAAQa,SAAS,WAIrBt9B,MAAM7V,IAAI,WAAY,WAClBsyC,QAAQ3L,IAAI,QAASoM,cACrBT,QAAQ3L,IAAI,WAAYsM,2GCrH5Cr8C,QAAQ1B,OAAO,QAAQgxC,UAAU,YAAa,WAC1C,OACIC,SAAU,IACVv3B,KAAM,SAAUiH,MAAOuwB,QAASC,OAC5BD,QAAQlN,KAAK,mBAAoB,SAAUqN,KACtB,KAAdA,IAAI6M,QACHv9B,MAAMg5B,OAAO,WACTh5B,MAAM64B,MAAMrI,MAAMgN,aAEtB9M,IAAIyM,gHCJxBp8C,QAAQ1B,OAAO,QAAQgxC,UAAU,gBAAiB,WAC9C,OACIC,SAAU,IACVv3B,KAAM,SAASiH,MAAOuwB,QAASC,OAC3BD,QAAQlN,KAAK,mBAAoB,SAASqN,KACrB,KAAdA,IAAI6M,QACHhN,QAAQyJ,OACRtJ,IAAIyM,mHCPxBp8C,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAuCpD,GArCAA,eAAeC,IAAI,0CACf,uEACI,oBACI,kCACI,kDACI,yBACA,qCACJ,mBACJ,QACA,sCACI,mDACI,2BACA,6CACR,SACA,8CACI,wBACA,8CACI,0BACA,iCACU,gCACN,cACJ,OACJ,SACJ,SACJ,SACJ,YACA,+DACI,iCACJ,UACFvc,KAAK,MAQHx6B,QAAQomB,UAAU01B,OAAOY,SAAU,CACnC,IAAI7I,MAAQ,IAAI8I,MAChB9I,MAAM+I,IAAM,wCACZ/I,MAAQ,IAAI8I,OACNC,IAAM,2CAIpB58C,QAAQ1B,OAAO,QAAQgxC,UAAU,oBAC7B,UAAW,WAAY,mBAAoB,eAC3C,SAASjmC,QAASiwC,SAAUv0C,iBAAkB+H,cAC1C,OACIyiC,SAAU,IACVgM,YAAY,EACZt8B,OAAO,EACPmxB,YAAa,yCACbp4B,KAAM,SAASiH,MAAOuwB,QAASC,OAS3B,IAAIoN,iBAPJ59B,MAAM69B,WAAY,EAClB79B,MAAM89B,kBAAmB,EACzB99B,MAAM+9B,aAAc,EACpB/9B,MAAMg+B,cAAe,EAOrBh+B,MAAMrd,KAAO,WAET,QAAGqd,MAAM+9B,cAIN/9B,MAAM69B,aAIL79B,MAAMg+B,cAIHh+B,MAAM89B,mBAIjB99B,MAAMw4B,SAAW,WACb,OAAGx4B,MAAM+9B,YACE,iBACD/9B,MAAMg+B,aACL,mCAEA,iBAKfh+B,MAAM1M,OAAS,WACXlJ,QAAQiJ,SAASC,UAKrB,IAAI2qC,gBAAkB,WAElB,IAAGj+B,MAAM+9B,YAAT,CAKA,IAAIF,UAAY/3C,iBAAiBo4C,cAC9BL,YAAc79B,MAAM69B,YACnB79B,MAAM69B,UAAYA,UACdA,YACA79B,MAAM89B,kBAAmB,EAKzBF,iBAAmBvD,SAAS,WACxBr6B,MAAM89B,kBAAmB,EACzBF,sBAAmB11B,GACpB,OAMXlI,MAAMzd,MAAQuD,iBAAiBvD,OAC3Byd,MAAMg+B,cAAgBH,YACtB79B,MAAMg+B,cAAe,KAM7Bh+B,MAAM7P,OAAO,WACT,OAAOrK,iBAAiBo4C,eACzBD,iBACHj+B,MAAM7P,OAAO,WACT,OAAOrK,iBAAiBvD,OACzB07C,iBAYHj+B,MAAM7P,OAAO,WACT,OAAOtC,aAAaswC,QAVP,WACb,IAAI57C,MAAQsL,aAAaswC,OACtBp9C,QAAQyM,SAASjL,SAChByd,MAAM+9B,aAAc,EACpB/9B,MAAMzd,MAAQsL,aAAaswC,UAUnCn+B,MAAM7V,IAAI,WAAY,WACfpJ,QAAQomB,UAAUy2B,mBACjBvD,SAASj2C,OAAOw5C,mHC/JxC78C,QAAQ1B,OAAO,QAAQgxC,UAAU,mBAC7B,WAAY,mBAAoB,eAChC,SAASgK,SAAUv0C,iBAAkB+H,cACjC,OACIyiC,SAAU,IACVv3B,KAAM,SAASiH,MAAOuwB,QAASC,OAI3B,IAAI4N,oBAGAC,cAAgB,WACbt9C,QAAQomB,UAAUi3B,uBACjB/D,SAASj2C,OAAOg6C,qBAChBA,yBAAsBl2B,IAO1Bo2B,wBAA0B,WAC1B,IAAIT,UAAY/3C,iBAAiBo4C,cAC7B37C,MAAQsL,aAAaswC,OACtBN,YAAc98C,QAAQyM,SAASjL,QAC9B87C,gBACA9N,QAAQgO,YAAY,YACdx9C,QAAQyM,SAASjL,QACvB87C,gBACA9N,QAAQ+M,SAAS,YACVO,YAIPQ,gBACAD,oBAAsB/D,SAAS,WAC3B9J,QAAQ+M,SAAS,YAClB,OAMXt9B,MAAM7P,OAAO,WACT,OAAOrK,iBAAiBo4C,eACzBI,yBACHt+B,MAAM7P,OAAO,WACT,OAAOtC,aAAaswC,QACrBG,yBAGHt+B,MAAM7V,IAAI,WAAY,WAClBk0C,6GCxDpBt9C,QAAQ1B,OAAO,QAAQgxC,UAAU,gBAC7B,UAAW,kBAAmB,eAC9B,uBAAwB,mBAAoB,SACxC5gC,QAAS+uC,gBAAiB5wC,aAAcvM,qBACxC0rB,kBACA,OACIujB,SAAU,IACVtwB,OACIvc,OAAQ,IACR4I,KAAM,KAEV8kC,YACI,mCACI59B,YAAY69B,cACpBpwC,WAAY,SAASC,OAAQoJ,WAAY2mC,SAAUC,WAC/ChwC,OAAO0O,SAAU,EACjB1O,OAAOw9C,SAAWD,gBAAgBp8C,WAClCnB,OAAOy9C,eAAiBF,gBACxBv9C,OAAO09C,SAAW,KAClB19C,OAAO29C,YAAc,KACrB39C,OAAO49C,cAAgB,KAGvB59C,OAAOsN,YAAc,WACjB,OAAOX,aAAaW,eAIxBtN,OAAO69C,SAAW,SAASt3C,MACvBvG,OAAO09C,UACHn3C,KAAMA,KACNu3C,SAAU,GACVC,OAAQ,GACRC,QAAS,IAEVl+C,QAAQU,SAASR,OAAOwC,UACvBxC,OAAO09C,SAASl7C,OAASxC,OAAOwC,OAAO6F,IAExCvI,QAAQU,SAASR,OAAOoL,QACvBpL,OAAO09C,SAAStyC,KAAOpL,OAAOoL,KAAK/C,IAE3B,YAAT9B,OACCvG,OAAO09C,SAASM,QAAU,YAKlCh+C,OAAOi+C,eAAiB,WACpBj+C,OAAO09C,SAAW,MAKtB19C,OAAOk+C,qBAAuB,SAASC,OACnC,QAAGn+C,OAAOsN,eAKa,aAAf6wC,MAAM53C,MACN43C,MAAMzrC,OAAS/F,aAAamG,cAAczK,IAKtDrI,OAAOo+C,oBAAsB,SAASD,OAClC,OAAOn+C,OAAO29C,cAAgBQ,OAIlCn+C,OAAOq+C,sBAAwB,SAASF,OACpCn+C,OAAO49C,cAAgB,KACpB59C,OAAOo+C,oBAAoBD,OAC1Bn+C,OAAO29C,YAAc,KAErB39C,OAAO29C,YAAcQ,OAK7Bn+C,OAAOs+C,qBAAuB,WAC1Bt+C,OAAO29C,YAAc,MAIzB39C,OAAOu+C,sBAAwB,SAASJ,OACpC,OAAOn+C,OAAO49C,gBAAkBO,OAIpCn+C,OAAOw+C,uBAAyB,SAASL,OACrCn+C,OAAO29C,YAAc,KACrB39C,OAAO49C,cAAgBO,OAI3Bn+C,OAAOy+C,oBAAsB,WACzBz+C,OAAO49C,cAAgB,MAI3B59C,OAAO0+C,qBAAuB,WAC1BnB,gBAAgBjb,WACZtiC,OAAO49C,eAAe55C,KAAK,WACvBhE,OAAO49C,cAAgB,QAKnC59C,OAAO2+C,YAAc,SAASR,OAC1B,OAAoC,IAAjCA,MAAML,SAAS96C,QAAQ,KACf8oB,iBAAiBkd,WAAWmV,MAAML,UAElChyB,iBAAiBid,cAAcoV,MAAML,WAKpD19C,qBAAqB8D,aAAalE,QAC9Bu9C,gBAAiB5wC,eAAe3I,KAC5B,WACIhE,OAAO0O,SAAU,4FCzH7C5O,QAAQ1B,OAAO,QAAQwgD,QAAQ,YAAa,WACxC,OAAO,SAASC,WACZ,OAAO,IAAIC,OACP,IAAIC,WACJ,IAAIC,cAAcC,kBAAoBJ,UAAWA,eAE1DzP,UAAU,iBAAkB,UAAW,YACX,SAASjmC,QAAS+1C,WAC7C,OACI7P,SAAU,IACVtwB,SACA+wB,UACI,gDACA,4BACA,mDACA,qBACA,OACA,2DACA,4BACA,mDACA,uBACA,UACFxV,KAAK,IACPv6B,WAAY,SAASC,OAAQoJ,WAAY2mC,SAAUC,WAC/ChwC,OAAO2wC,aAAe,GACtB3wC,OAAOm/C,SAAW,IAClBn/C,OAAOo/C,gBAAkBrP,SAASsP,KAAK,YAEvC,IAMMC,OAASJ,UANG,SAAS59C,OACvBtB,OAAO+3C,OAAO,WACV/3C,OAAOm/C,SAAY79C,MAAMi+C,KAAKC,SAC9Bx/C,OAAO2wC,aAAe,OAIxB8O,SAAW1P,SAASsP,KAAK,aAC/BC,OAAOngD,IACH,qCACCugD,OAAU,mBACV12C,eAAgB,oBACjB,SAAS1H,MAAOq+C,UACyB,KAAjCA,SAASC,cAAcjhC,OACvB3e,OAAO+3C,OAAO,WACV/3C,OAAO2wC,aACHgP,SAASC,cAAcC,eAG/B12C,QAAQiJ,SAAS0kC,QAAQ2I,4GC5CjD3/C,QAAQ1B,OAAO,QAAQgxC,UAAU,eAAgB,cAC7C,SAAS3uB,aACL,SAASq/B,mBAAmB/gC,OACxBuB,KAAKjU,IAAM0S,MAAM1S,IACjBiU,KAAKye,QAAUhgB,MAAMggB,QACrBze,KAAKxZ,UACLwZ,KAAKvB,MAAQA,MACbuB,KAAKvB,MAAMqxB,QAAS,EACpB9vB,KAAKvB,MAAMghC,cACRjgD,QAAQU,SAAS8f,KAAKvB,MAAM1S,OAC3BiU,KAAKvB,MAAM1S,IAAIwF,UAAYyO,MAI/BA,KAAK0/B,cAAgBjhC,MAAMihC,cACxBlgD,QAAQgI,YAAYwY,KAAK0/B,iBACxB1/B,KAAK0/B,cAAgB,cAGzB,IAAI1U,KAAOhrB,KACXvB,MAAM7P,OAAO,MAAO,WAEhBo8B,KAAKj/B,IAAM0S,MAAM1S,IACdvM,QAAQU,SAAS8qC,KAAKj/B,OACrBi/B,KAAKj/B,IAAIwF,UAAYy5B,QAG7BvsB,MAAM7V,IAAI,WAAY,WAGfpJ,QAAQU,SAAS8qC,KAAKj/B,aACdi/B,KAAKj/B,IAAIwF,YA4R5B,OAtRAiuC,mBAAmBpgD,UAAU2gB,SAAW,SAAUpQ,KAC9C,IAAIpI,MAAQyY,KAAKxZ,OAAOmJ,KACxB,GAAGnQ,QAAQU,SAASqH,QAAU/H,QAAQU,SAASqH,MAAMkX,OACjD,OAAOlX,MAAMkX,MAAMsB,YAK3By/B,mBAAmBpgD,UAAU4nB,YAAc,SAAUrX,IAAK5Q,OACtD,IAAIwI,MAAQyY,KAAKxZ,OAAOmJ,KACxB,GAAGnQ,QAAQU,SAASqH,QAAU/H,QAAQU,SAASqH,MAAMkX,OACjD,OAAOlX,MAAMkX,MAAMuI,YAAYjoB,QAMvCygD,mBAAmBpgD,UAAUugD,YAAc,WACvC,GAAIngD,QAAQU,SAAS8f,KAAKjU,KAEnB,QACIiU,KAAKjU,IAAIwF,UAChB,IAAIquC,UAAYpgD,QAAQyE,KAAK+b,KAAKjU,KAElC,OADAiU,KAAKjU,IAAIwF,UAAYyO,KACd4/B,UALP,OAAO5/B,KAAKjU,KAUpByzC,mBAAmBpgD,UAAUygD,YAAc,WACvC,OAAGrgD,QAAQgI,YAAYwY,KAAKvB,MAAMqhC,YAIvB9/B,KAAKvB,MAAMqhC,WAK1BN,mBAAmBpgD,UAAU2gD,WAAa,WACtC,QAAGvgD,QAAQgI,YAAYwY,KAAKvB,MAAMshC,aAIvB//B,KAAKvB,MAAMshC,YAK1BP,mBAAmBpgD,UAAU4gD,SAAW,SAASrwC,KAC7C,OACIqQ,KAAKvB,MAAMqxB,QAAU9vB,KAAKvB,MAAMghC,WAAW/8C,QAAQiN,MAAQ,GAKnE6vC,mBAAmBpgD,UAAU6gD,gBAAkB,SAAStwC,KACpD,OAAOqQ,KAAK+/B,cAAgB//B,KAAKggC,SAASrwC,MAI9C6vC,mBAAmBpgD,UAAUoS,UAAY,WACrC,IAAIA,WAAY,EAWhB,OAVAhS,QAAQ4D,QAAQ4c,KAAKxZ,OAAQ,SAASe,OAC/BA,MAAMkX,MAAMjN,cACXA,WAAY,KAGjBhS,QAAQomB,UAAU5F,KAAKkgC,aACnBlgC,KAAKkgC,WAAW1uC,cACfA,WAAY,GAGbA,WAIXguC,mBAAmBpgD,UAAU+gD,cAAgB,SAASxwC,IAAK8O,OAEvDuB,KAAKxZ,OAAOmJ,MACRgG,SAAS,EACT8I,MAAOA,OAIX,IAAIusB,KAAOhrB,KAQX,OAPAA,KAAKvB,MAAM7P,OAAO,OAASe,IAAK,WACzBnQ,QAAQU,SAAS8qC,KAAKj/B,OAASi/B,KAAKxkC,OAAOmJ,KAAKgG,SAC/Cq1B,KAAKxkC,OAAOmJ,KAAK8O,MAAMuI,YAAYgkB,KAAKj/B,IAAI4D,QAKjDnQ,QAAQU,SAAS8f,KAAKjU,KACdiU,KAAKjU,IAAI4D,KAET,MAKf6vC,mBAAmBpgD,UAAUghD,gBAAkB,SAASzwC,YAC7CqQ,KAAKxZ,OAAOmJ,MAIvB6vC,mBAAmBpgD,UAAUihD,kBAAoB,SAAS1wC,KACtDqQ,KAAKxZ,OAAOmJ,KAAKgG,SAAU,GAI/B6pC,mBAAmBpgD,UAAUkhD,iBAAmB,SAAS3wC,IAAK5Q,OAC1D,IAAIwI,MAAQyY,KAAKxZ,OAAOmJ,KAGxB,GAAIqQ,KAAK+/B,aAAT,CAMAx4C,MAAMkX,MAAM8hC,cAGZ,IAAIC,WAAaxgC,KAAK2/B,cACtBa,WAAW7wC,KAAO5Q,MACfyhD,WAAW7wC,OAASqQ,KAAKjU,IAAI4D,MAOhCqQ,KAAKvB,MAAMqxB,QAAS,EACpB9vB,KAAKvB,MAAMghC,YAAc9vC,KACzBqQ,KAAK5V,WAAWo2C,YAAa7wC,OAPzBpI,MAAMoO,SAAU,OAZhBpO,MAAMoO,SAAU,GAuBxB6pC,mBAAmBpgD,UAAUgL,WAAa,SAASo2C,WAAY9wC,MAC3D,IAAIC,IAAMD,KAAK,GACXnI,MAAQyY,KAAKxZ,OAAOmJ,KACpBq7B,KAAOhrB,KAQX,OALGxgB,QAAQsgB,WAAWE,KAAKvB,MAAM/S,cAC7B80C,WAAaxgC,KAAKvB,MAAM/S,WAAW80C,WAAY9wC,OAI5CsQ,KAAKye,QAAQze,KAAK0/B,eACrBc,YAAY98C,KAAK,SAAS+8C,QAStB,OAPAl5C,MAAMoO,SAAU,EAChBpO,MAAMkX,MAAMuI,YAAYy5B,OAAO9wC,MAC/Bq7B,KAAKvsB,MAAMqxB,QAAS,EACpB9E,KAAKvsB,MAAMghC,cACRjgD,QAAQsgB,WAAWkrB,KAAKvsB,MAAM3S,YAC7Bk/B,KAAKvsB,MAAM3S,UAAU20C,QAElBA,QACR,SAASz/C,OACR,IAAI0/C,UAAYvgC,YAAYgL,SAASnqB,OA+BrC,OA9BGxB,QAAQU,SAASwgD,WAEhBlhD,QAAQ4D,QAAQs9C,UAAW,SAAS3hD,MAAO4Q,KACvC,IAAIgxC,WAAa3V,KAAKxkC,OAAOmJ,KACzBnQ,QAAQiR,QAAQ1R,SAChBA,OAASA,QAGVS,QAAQU,SAASygD,YAGhBA,WAAWliC,MAAMmiC,UAAU7hD,QAKhB,YAAR4Q,MACC5Q,MAAQA,MAAM8I,IAAI,SAASg5C,GACvB,OAAOlxC,IAAM,KAAOkxC,KAG5Bt5C,MAAMkX,MAAMmiC,UAAU7hD,UAK9BwI,MAAMkX,MAAMmiC,WAAW5/C,QAE3BgqC,KAAKvsB,MAAMqxB,QAAS,EACpB9E,KAAKvsB,MAAMghC,cACJz+C,SAKnBw+C,mBAAmBpgD,UAAU0hD,SAAW,WACpC,IAAIpxC,QACA8wC,WAAaxgC,KAAK2/B,cACtBngD,QAAQ4D,QAAQ4c,KAAKxZ,OAAQ,SAASzH,MAAO4Q,KACzC5Q,MAAM0f,MAAM8hC,cACZ,IAAIQ,SAAWhiD,MAAM0f,MAAMsB,WACxBvgB,QAAQomB,UAAUm7B,WACjBP,WAAW7wC,OAASoxC,WACpBP,WAAW7wC,KAAOoxC,SAClBrxC,KAAKlN,KAAKmN,QAMfnQ,QAAQsgB,WAAWE,KAAKvB,MAAM/S,cAC7B80C,WAAaxgC,KAAKvB,MAAM/S,WAAW80C,WAAY9wC,OAIhDlQ,QAAQomB,UAAU5F,KAAKkgC,aACtBlgC,KAAKkgC,WAAWK,cAGpB,IAAIvV,KAAOhrB,KAGX,OAFAA,KAAKvB,MAAMqxB,QAAS,EACpB9vB,KAAKvB,MAAMghC,WAAa/vC,KACjBsQ,KAAKye,QAAQze,KAAK0/B,eACrBc,YAAY98C,KAAK,SAAS+8C,QAMtB,OALAzV,KAAKvsB,MAAMqxB,QAAS,EACpB9E,KAAKvsB,MAAMghC,cACRjgD,QAAQsgB,WAAWkrB,KAAKvsB,MAAM3S,YAC7Bk/B,KAAKvsB,MAAM3S,UAAU20C,QAElBA,QACR,SAASz/C,OACR,IAAI0/C,UAAYvgC,YAAYgL,SAASnqB,OAwCrC,OAvCGxB,QAAQU,SAASwgD,WAEhBlhD,QAAQ4D,QAAQs9C,UAAW,SAAS3hD,MAAO4Q,KACvC,IAAIgxC,WAAa3V,KAAKxkC,OAAOmJ,KACzBnQ,QAAQiR,QAAQ1R,SAChBA,OAASA,QAGVS,QAAQU,SAASygD,YAGhBA,WAAWliC,MAAMmiC,UAAU7hD,QAEhB,YAAR4Q,MACC5Q,MAAQA,MAAM8I,IAAI,SAASg5C,GACvB,OAAOlxC,IAAM,KAAOkxC,KAKzBrhD,QAAQomB,UAAUolB,KAAKkV,YACtBlV,KAAKkV,WAAWU,UAAU7hD,OAG1B+a,QAAQC,IAAIhb,UAMrBS,QAAQomB,UAAUolB,KAAKkV,YACtBlV,KAAKkV,WAAWU,WAAW5/C,QAG3B8Y,QAAQC,IAAI/Y,OAGpBgqC,KAAKvsB,MAAMqxB,QAAS,EACpB9E,KAAKvsB,MAAMghC,cACJz+C,UAKf+tC,SAAU,IACVtwB,OACI1S,IAAK,IACL0yB,QAAS,IACTihB,cAAe,IACfh0C,WAAY,IACZI,UAAW,IACXg0C,UAAW,IACXC,WAAY,IACZiB,OAAQ,IACR1I,WAAY,KAEhByC,YAAY,EACZvL,SACI,0IAIJ/vC,YAAa,SAAU+/C,wBAInChgD,QAAQ1B,OAAO,QAAQgxC,UAAU,qBAAsB,cACnD,SAAS3uB,aAEL,SAAS8gC,oBAAoBxiC,MAAOyiC,SAChClhC,KAAKxZ,UACLwZ,KAAKvB,MAAQA,MACbuB,KAAKvB,MAAMqxB,QAAS,EACpB9vB,KAAKvB,MAAMghC,cACXz/B,KAAKkhC,QAAUA,QAEf,IAAIlW,KAAOhrB,KACXA,KAAKvB,MAAMgI,UAAY,WACnB,IAAI9Q,SAAU,EAMd,OALAnW,QAAQ4D,QAAQ4nC,KAAKxkC,OAAQ,SAASzH,OAC9B4W,UACAA,QAAU5W,MAAM4W,WAGjBA,SAyHf,OApHAsrC,oBAAoB7hD,UAAUygD,YAAc,WACxC,OAAO7/B,KAAKmhC,eAAetB,eAI/BoB,oBAAoB7hD,UAAU2gD,WAAa,WACvC,OAAO//B,KAAKmhC,eAAepB,cAI/BkB,oBAAoB7hD,UAAU4gD,SAAW,SAASrwC,KAC9C,OACIqQ,KAAKvB,MAAMqxB,QAAU9vB,KAAKvB,MAAMghC,WAAW/8C,QAAQiN,MAAQ,GAKnEsxC,oBAAoB7hD,UAAU6gD,gBAAkB,SAAStwC,KAGrD,OAAOqQ,KAAK+/B,cAAgB//B,KAAKvB,MAAMqxB,QAI3CmR,oBAAoB7hD,UAAU+gD,cAAgB,SAASxwC,IAAK8O,OAMxD,OAJAuB,KAAKxZ,OAAOmJ,MACRgG,SAAS,EACT8I,MAAOA,OAEJuB,KAAKmhC,eAAehB,cAAcxwC,IAAK8O,QAIlDwiC,oBAAoB7hD,UAAUghD,gBAAkB,SAASzwC,YAC9CqQ,KAAKxZ,OAAOmJ,KACnBqQ,KAAKmhC,eAAef,gBAAgBzwC,MAIxCsxC,oBAAoB7hD,UAAUihD,kBAAoB,SAAS1wC,KACvDqQ,KAAKxZ,OAAOmJ,KAAKgG,SAAU,EAG3B,IAAIq1B,KAAOhrB,KACXxgB,QAAQ4D,QAAQ4c,KAAKxZ,OAAQ,SAASzH,MAAO4Q,KACzCq7B,KAAKmW,eAAed,kBAAkB1wC,QAK9CsxC,oBAAoB7hD,UAAUkhD,iBAAmB,SAAS3wC,IAAK5Q,OAK3D,GAJYihB,KAAKxZ,OAAOmJ,KAClBgG,SAAU,EAGZqK,KAAK+/B,aAAT,CAMA,IAAI/U,KAAOhrB,KACXA,KAAKkhC,QAAQ,WAET,IAAIvrC,SAAU,EAMd,GALAnW,QAAQ4D,QAAQ4nC,KAAKxkC,OAAQ,SAASzH,OAC9B4W,UACAA,QAAU5W,MAAM4W,YAGrBA,QAAH,CAKA,IAAIjG,QACAihC,SAAU,EACV6P,WAAaxV,KAAKmW,eAAexB,cAWrC,GAVAngD,QAAQ4D,QAAQ4nC,KAAKxkC,OAAQ,SAASzH,MAAO4Q,KACzC5Q,MAAM0f,MAAM8hC,cACZ,IAAIQ,SAAWhiD,MAAM0f,MAAMsB,WACxBvgB,QAAQomB,UAAUm7B,WACjBP,WAAW7wC,OAASoxC,WACpBrxC,KAAKlN,KAAKmN,KACV6wC,WAAW7wC,KAAOoxC,SAClBpQ,SAAU,KAGdA,QAAJ,CAKA,IAAIyQ,OAAS1xC,KAAKhN,QAAQiN,MACX,IAAZyxC,SACC1xC,KAAK9M,OAAOw+C,OAAQ,GACpB1xC,KAAK9M,OAAO,EAAG,EAAG+M,MAItBq7B,KAAKvsB,MAAMqxB,QAAS,EACpB9E,KAAKvsB,MAAMghC,WAAa/vC,KACxBs7B,KAAKmW,eAAe/2C,WAAWo2C,WAAY9wC,MAAMhM,KAC7C,SAASqI,KAGP,OAFAi/B,KAAKvsB,MAAMqxB,QAAS,EACpB9E,KAAKvsB,MAAMghC,cACJ1zC,KACR,SAAS/K,OAGR,OAFAgqC,KAAKvsB,MAAMqxB,QAAS,EACpB9E,KAAKvsB,MAAMghC,cACJz+C,WAEd,OAIH+tC,SAAU,IACV0H,SAAU,gBAAiB,qBAC3Bh4B,SACAs8B,YAAY,EACZvL,SACI,qGAGJ/vC,YAAa,SAAU,WAAYwhD,qBACnCzpC,MACI6pC,IAAK,SAAS5iC,MAAOuwB,QAASC,MAAOp/B,aAKjCA,YAAY,GAAGsxC,eAAiBtxC,YAAY,GAG5C4O,MAAM65B,WAAazoC,YAAY,GAAG4O,MAAM65B,WAGxCzoC,YAAY,GAAG4O,MAAM7P,OAAO,MAAO,SAAS7C,KACxC0S,MAAM1S,IAAMA,YAOpCvM,QAAQ1B,OAAO,QAAQgxC,UAAU,gBAAiB,WAC9C,SAAS4I,UACL,OACI3I,SAAU,IACV0H,SAAU,gBAAiB,wBAC3Bh4B,OACI6iC,SAAU,IACVC,WAAY,KAEhBxG,YAAY,EACZvL,SACI,iCACJh4B,KAAM,SAASiH,MAAOuwB,QAASC,MAAOp/B,aAElC,IAAIpQ,WAAaoQ,YAAY,GACzBrQ,QAAQU,SAAST,cACjBA,WAAaoQ,YAAY,IAI7B4O,MAAM65B,WAAa74C,WAAWgf,MAAM65B,WAEpCtJ,QAAQ+M,SAAS,iBACG,UAAjB9M,MAAMuS,QACLxS,QAAQ+M,SAAS,uBAIrB,IAAI0F,gBAOJ,GANIjiD,QAAQyM,SAASgjC,MAAMhpC,OAA+B,IAAtBgpC,MAAMhpC,KAAKzE,QAC3CigD,aAAaj/C,KAAK,QAElBhD,QAAQyM,SAASgjC,MAAMt/B,MAA6B,IAArBs/B,MAAMt/B,IAAInO,QACzCigD,aAAaj/C,KAAK,OAEnBi/C,aAAajgD,OAAS,EACrB,MAAM,IAAI+I,MACNk3C,aAAaznB,KAAK,MAClB,oCAIRgV,QAAQK,KAAK,OAAOhnB,SAGpB,IAAIjjB,MAAQ6pC,MAAM7pC,OAAS6pC,MAAMt/B,IAEjC,GAA0B,SAAvBs/B,MAAMyS,cACgB,WAAfzS,MAAMhpC,KAAoB,CAChC,IAAI07C,aAAeniD,QAAQwvC,QAAQ,YAgBnC,GAfA2S,aAAa5C,KAAK,MAAO9P,MAAMt/B,KAC/BgyC,aAAax7C,KAAKf,OAClBu8C,aAAa5F,SAAS,iBACnB9M,MAAM2S,WACLD,aAAa5F,SAAS,OAAS9M,MAAM2S,YAErCD,aAAa5F,SAAS,mBAEH,SAApB9M,MAAM4S,YACLF,aAAa5F,SAAS,mBACtB4F,aAAa5F,SAAS,yBAE1B/M,QAAQ8S,OAAOH,cAGZniD,QAAQyM,SAASgjC,MAAM8S,YACf9S,MAAM8S,UAAUvgD,OAAS,EAAG,CACnC,IAAIwgD,YAAcxiD,QAAQwvC,QACtB,uBACJgT,YAAYjG,SAAS,kCAErB,IAAIkG,SAAWziD,QAAQwvC,QAAQ,QAC/BiT,SAASlG,SAAS,uBAClBkG,SAASlD,KACL,mBAAoB9P,MAAMt/B,IAAM,YAEpC,IAAIuyC,YAAc1iD,QAAQwvC,QAAQ,WAClCkT,YAAYnG,SAAS,sBACrBmG,YAAY/7C,KAAK8oC,MAAM8S,WACvBG,YAAYnD,KAAK,KAAM9P,MAAMt/B,IAAM,YAEnCqyC,YAAYF,OAAOG,UACnBD,YAAYF,OAAOI,aAEnBP,aAAaG,OAAOE,aAGpBC,SAASngB,KAAK,QAAS,SAAUqN,KAC7BA,IAAIyM,oBAMhB,IAAIuG,aAAe3iD,QAAQwvC,QAAQ,eACnCmT,aAAapG,SAAS,mBAEnB9M,MAAMmT,YACLD,aAAapG,SAAS,OAAS9M,MAAMmT,YAIzC,IAAIC,YAAcpT,MAAMoT,aAAej9C,MACnCk9C,aAAe,KACnB,GAAkB,SAAfrT,MAAMhpC,MAAkC,aAAfgpC,MAAMhpC,MAChB,aAAfgpC,MAAMhpC,KAAqB,CACR,SAAfgpC,MAAMhpC,KACLq8C,aAAe5K,SACX,0BAA4BzI,MAAMt/B,IAClC,kBAAoB0yC,YAAc,oCAFvB3K,CAGyBj5B,OACnB,aAAfwwB,MAAMhpC,KACZq8C,aAAe5K,SACX,iBAAmBzI,MAAMt/B,IACzB,kBAAoB0yC,YAAc,+CAFvB3K,CAIQj5B,OACF,aAAfwwB,MAAMhpC,OACZq8C,aAAe5K,SACX,8BAAgCzI,MAAMt/B,IACtC,kBAAoB0yC,YAAc,oCAFvB3K,CAGyBj5B,QAIzCwwB,MAAMsT,aACLD,aAAaxgB,KAAK,mBAAoB,SAASqN,KAC1B,KAAdA,IAAI6M,QACHsG,aAAa7J,OACbtJ,IAAIyM,oBAOhB0G,aAAaxgB,KAAK,mBAAoB,SAASqN,KAC1B,KAAdA,IAAI6M,QACHsG,aAAaE,IAAI/iD,WAAWgf,MAAM1S,IAAIkjC,MAAMt/B,MAC5C2yC,aAAa7J,OACbtJ,IAAIyM,oBAMZ,IAAI6G,aAAehjD,WAAW0gD,cAC1BlR,MAAMt/B,IAAK8O,OACf6jC,aAAaE,IAAIC,cAGjBH,aAAahT,GAAG,QAAS,WACrB7wB,MAAMg5B,OAAO,WACTh4C,WAAW4gD,kBAAkBpR,MAAMt/B,SAK3C2yC,aAAahT,GAAG,OAAQ,WACpB7wB,MAAMg5B,OAAO,WACTh4C,WAAW6gD,iBACPrR,MAAMt/B,IAAK2yC,aAAaE,WAKpC/jC,MAAMuI,YAAc,SAAS+5B,UACzBuB,aAAaE,IAAIzB,WAIrBtiC,MAAMsB,SAAW,WACb,OAAOuiC,aAAaE,YAErB,GAAkB,YAAfvT,MAAMhpC,KAAoB,CAIhC,IAAI4P,QAAUo5B,MAAMp5B,QACpB,IAAIrW,QAAQyM,SAAS4J,UAA+B,IAAnBA,QAAQrU,OACrC,MAAM,IAAI+I,MACN,sEAMR,IAAIm4C,SAAW,WACiB,SAA7BzT,MAAM0T,qBACLD,SAAW,IAOf,IAAIE,WAAankC,MAAM/d,QAAQmiD,OAC/BD,WAAWE,YAAcrkC,MAAM65B,WAC/BsK,WAAWG,aAAetjD,WAAW0gD,cACjClR,MAAMt/B,IAAK8O,OACfmkC,WAAWI,gBAAkB,WACzBvkC,MAAMwkC,UACNxjD,WAAW6gD,iBACPrR,MAAMt/B,IAAKizC,WAAWG,eAI9BT,aAAe5K,SACX,eAAiBzI,MAAMt/B,IAAM,mDAEPkG,QAAU,wFAGV6sC,SAAW,IAAML,YACvC,qBAPW3K,CAOWkL,YAG1BnkC,MAAMuI,YAAc,SAAS+5B,UACzB6B,WAAWG,aAAehC,UAI9BtiC,MAAMsB,SAAW,WACb,OAAO6iC,WAAWG,mBAEnB,GAAkB,eAAf9T,MAAMhpC,KAAuB,CAEnC,IAAIi9C,OAASjU,MAAMiU,OACnB,IAAI1jD,QAAQyM,SAASi3C,SAA6B,IAAlBA,OAAO1hD,OACnC,MAAM,IAAI+I,MACN,wEAQR,IAAI44C,WAAa1kC,MAAM/d,QAAQmiD,OAC/BM,WAAWC,gBAAkB3jD,WAAW0gD,cACpClR,MAAMt/B,IAAK8O,OACf0kC,WAAWE,SAAW,SAASb,KAC3B,OAAOW,WAAWC,gBAAgB1gD,QAAQ8/C,MAAQ,GAEtDW,WAAWG,eAAiB,SAASd,KACjC,IAAIx7C,IAAMm8C,WAAWC,gBAAgB1gD,QAAQ8/C,KAC1Cx7C,KAAO,EAENm8C,WAAWC,gBAAgBxgD,OAAOoE,IAAK,GAGvCm8C,WAAWC,gBAAgB5gD,KAAKggD,MAKxCF,aAAe9iD,QAAQwvC,SACnB,4BACI,0BAA4BkU,OAAQ,KACpC,cAAgBjU,MAAMt/B,IAAM,aACxB,uCACA,oBACA,mCACA,uCACJ,eAAiBs/B,MAAMt/B,IAAM,IACzB,cACA,2CACR,UACFqqB,KAAK,KACPsoB,aAAe5K,SAAS4K,aAAT5K,CAAuByL,YAGtC1kC,MAAMuI,YAAc,SAAS+5B,UACzBoC,WAAWC,gBAAkBrC,UAIjCtiC,MAAMsB,SAAW,WACb,OAAOojC,WAAWC,sBAEnB,GAAkB,SAAfnU,MAAMhpC,KAAiB,CAC7B,IAAIs9C,UAAY9kC,MAAMokC,OAClBlsC,KAAOlX,WAAW0gD,cAClBlR,MAAMt/B,IAAK8O,OACf8kC,UAAUC,MAAQ7sC,KAAK9O,IAAI,SAAS26C,KAChC,OAAQr8C,KAAMq8C,OAIlBF,aAAe9iD,QAAQwvC,SACnB,mCACI,iCACA,yBACJ,mBAAqBC,MAAMt/B,IAAM,KAC7B,yBACA,8BACA,gBAAkB0yC,YAAc,KAChC,8BACA,8CACNroB,KAAK,KACPsoB,aAAe5K,SAAS4K,aAAT5K,CAAuB6L,WAGtC9kC,MAAMuI,YAAc,SAAS+5B,UACzBwC,UAAUC,MAAQzC,SAASl5C,IACvB,SAAS26C,KACL,OAAQr8C,KAAMq8C,QAK1B/jC,MAAMsB,SAAW,WACb,OAAOwjC,UAAUC,MAAM37C,IACnB,SAAS26C,KACL,OAAOA,IAAIr8C,aAGpB,GAAkB,WAAf8oC,MAAMhpC,KAAmB,CAC/B,IAAIw9C,YAAchlC,MAAMokC,OACxBY,YAAYC,QAAUjkD,WAAW0gD,cAC7BlR,MAAMt/B,IAAK8O,OACf6jC,aAAe9iD,QAAQwvC,SACnB,8BAAgCC,MAAMt/B,IAAM,KAC5C,OAASs/B,MAAMt/B,IAAM,KACrB,UAAYs/B,MAAMlwC,MAAQ,KAC1B,YACFi7B,KAAK,KACPsoB,aAAe5K,SAAS4K,aAAT5K,CAAuB+L,aACtChlC,MAAMsB,SAAW,kBAAMkvB,MAAMlwC,OAC7B0f,MAAMuI,YAAc,kBAAM,UACvB,IAAkB,gBAAfioB,MAAMhpC,KAmEZ,MAAM,IAAIsE,MACN,mCAAqC0kC,MAAMhpC,MAnE/C,IAAI09C,YAAcllC,MAAMokC,OACxBc,YAAYD,QAAUjkD,WAAW0gD,cAC7BlR,MAAMt/B,IAAK8O,OACfklC,YAAYC,SAAW,WACnBnlC,MAAMwkC,UACNxjD,WAAW4gD,kBAAkBpR,MAAMt/B,KACnClQ,WAAW6gD,iBACPrR,MAAMt/B,IAAKg0C,YAAY5jC,aAI/BuiC,aAAe9iD,QAAQwvC,SACrB,8BACE,gCAAkCC,MAAMt/B,IAAM,KAC5C,gCACA,OAASs/B,MAAMt/B,IAAM,KACrB,2BACA,+BACF,0CACF,UACAqqB,KAAK,KACPsoB,aAAe5K,SAAS4K,aAAT5K,CAAuBiM,aAGtCllC,MAAMuI,YAAc,SAAS+5B,UAQtB9R,MAAM4U,SAAW5U,MAAM4U,UAAY9C,SAClC4C,YAAYD,SAAU,EAChBzU,MAAM6U,UACR7U,MAAM6U,WAAa/C,SACvB4C,YAAYD,SAAU,EAEtBC,YAAYD,QAAU3C,UAK9BtiC,MAAMsB,SAAW,WAQb,OAAG4jC,YAAYD,SACRzU,MAAM4U,SACE5U,MAAM4U,UAKd5U,MAAM6U,UACE7U,MAAM6U,UAY7BrlC,MAAMwkC,QAAU,WACTzjD,QAAQsgB,WAAWrB,MAAM6iC,WACxB7iC,MAAM6iC,SACFrS,MAAMt/B,IACNlQ,WAAWsgB,SAASkvB,MAAMt/B,KAC1BlQ,aAKTwvC,MAAM8U,YACLzB,aAAavG,SAAS9M,MAAM8U,YAEhC5B,aAAaL,OAAOQ,cAGpB,IAAI0B,cAAgBxkD,QAAQwvC,QACxB,6CAOJ,GANIvvC,WAAWogD,eACXmE,cAAcjI,SAAS,eAE3BoG,aAAaL,OAAOkC,eAGhB/U,MAAMgV,SAAU,CAChB,IAAIC,gBAAkB1kD,QAAQwvC,QAC1B,MAAQC,MAAMgV,SAAW,QAC7BC,gBAAgBnI,SAAS,oBACzBoG,aAAaL,OAAOoC,iBAyCxB,GArCAzlC,MAAM8hC,YAAc,WAChB+B,aAAatF,YAAY,YACzBsF,aAAatF,YAAY,4BACzBmF,aAAanF,YAAY,qBACzBmF,aAAanF,YAAY,YACzBmF,aAAanF,YAAY,oBACzBgH,cAAc/L,SAIlBx5B,MAAMmiC,UAAY,SAASviB,QACpBA,OAAO78B,OAAS,IACf2gD,aAAapG,SAAS,qBACtBoG,aAAapG,SAAS,YACtBoG,aAAapG,SAAS,oBACtBuG,aAAavG,SAAS,YACtBuG,aAAavG,SAAS,4BACtBv8C,QAAQ4D,QAAQi7B,OAAQ,SAASr9B,OAC7BgjD,cAAclC,OACZ,kEAC6B9gD,MAAQ,WAK3CmjD,WAAW,WACP7B,aAAa8B,SACd,KAKX3lC,MAAMjN,UAAY,WACd,OAAO2wC,aAAakC,SAAS,aAI9BpV,MAAMsS,WAAY,CACjB,IAAI+C,kBAAoB5M,SACpBl4C,QAAQwvC,QACJ,oEAFgB0I,CAGsBj5B,OAC9C0jC,aAAaL,OAAOwC,mBAExBtV,QAAQ8S,OAAOK,cAIf1jC,MAAM7P,OAAO,WACT,OAAOnP,WAAWwgD,gBAAgBhR,MAAMt/B,MACzC,SAAS5Q,OACLA,OACCojD,aAAa1/B,SACT,UAAUs5B,SAAS,yBACvBoG,aAAaL,OACT,qEAEJK,aAAapG,SAAS,aACtBoG,aAAapG,SAAS,qBACtBoG,aAAapD,KAAK,aAAc,YAElCoD,aAAa1/B,SACT,UAAUu6B,YAAY,yBACxBmF,aAAa9S,KAAK,gBAAgBhnB,SAClC85B,aAAanF,YAAY,aACzBmF,aAAanF,YAAY,oBACzBmF,aAAaoC,WAAW,iBAKhC9lC,MAAM7V,IAAI,WAAY,WAClBnJ,WAAW2gD,gBAAgBnR,MAAMt/B,YAMrDnQ,QAAQ1B,OAAO,QAAQgxC,UAAU,cAAe,WACxC,OACIC,SAAU,IACV0H,SAAU,iBACVh4B,SACAjH,KAAM,SAASiH,MAAOuwB,QAASC,MAAOp/B,aAElC,IAAIpQ,WAAaoQ,YAAY,GAC7B,GAAGpQ,WAAWsgD,aACV,MAAM,IAAIx1C,MACN,oEAIRykC,QAAQM,GAAG,QAAS,WAChB7wB,MAAMg5B,OAAO,WACTh4C,WAAWqhD,mBAOnCthD,QAAQ1B,OAAO,QAAQgxC,UAAU,gBAAiB,WAC1C,OACIC,SAAU,IACV0H,SAAU,iBACVh4B,SACA+wB,SAAU,4CACVh4B,KAAM,SAASiH,MAAOuwB,QAASC,MAAOp/B,aAElCA,YAAY,GAAGqwC,WAAazhC,MAC5B,IAAI+lC,GAAKxV,QAAQK,KAAK,MAGtB5wB,MAAM8hC,YAAc,WAChBiE,GAAGvM,SAIPx5B,MAAMmiC,UAAY,SAASviB,QACpBA,OAAO78B,OAAS,GACfhC,QAAQ4D,QAAQi7B,OAAQ,SAASr9B,OAC7BwjD,GAAG1C,OACD,0DAEA9gD,MAAQ,YAOtByd,MAAMjN,UAAY,WACd,OAAOgzC,GAAG/hC,WAAWjhB,OAAS,OAOlDhC,QAAQ1B,OAAO,QAAQgxC,UAAU,gBAAiB,WAC1C,OACIC,SAAU,IACV0H,QAAS,gBACTh4B,SACAs8B,YAAY,EACZvL,UACE,6BACE,oDACA,mCACF,WAAWxV,KAAK,IAClBxiB,KAAM,SAASiH,MAAOuwB,QAASC,MAAOxvC,YAClCgf,MAAMqxB,QAAS,EACfrxB,MAAM7P,OAAO,WACT,OAAOnP,WAAWgf,MAAMqxB,QACzB,SAAS/wC,OACR0f,MAAMqxB,OAAS/wC,YAOnCS,QAAQ1B,OAAO,QAAQgxC,UAAU,oBAAqB,WAC9C,OACIC,SAAU,IACV0H,QAAS,gBACTj/B,KAAM,SAASiH,MAAOuwB,QAASC,MAAOxvC,YAClCgf,MAAM7P,OAAO,WACT,OAAOnP,WAAWgf,MAAMqxB,QACzB,SAAS/wC,OACLA,MACCiwC,QAAQgO,YAAY,WAEpBhO,QAAQ+M,SAAS,iBAQzCv8C,QAAQ1B,OAAO,QAAQgxC,UAAU,oBAAqB,WAC9C,OACIC,SAAU,IACV0H,QAAS,gBACTj/B,KAAM,SAASiH,MAAOuwB,QAASC,MAAOxvC,YAClCgf,MAAM7P,OAAO,WACT,OAAOnP,WAAWgf,MAAMqxB,QACzB,SAAS/wC,OACLA,MACCiwC,QAAQ+M,SAAS,WAEjB/M,QAAQgO,YAAY,0GChnC5Cx9C,QAAQ1B,OAAO,QAAQgxC,UAAU,aAAc,WAC3C,OACIC,SAAU,IACV0H,QAAS,UACTj/B,KAAM,SAAUiH,MAAOgmC,IAAK1F,KAAMnI,YAAaD,SAC3C,GAAKC,YAAL,CAIA,IAII8N,iBAAmB,SAAU3lD,OAE7B,GAAKA,MAAL,CAIA,IAAI4lD,QAAU5lD,MAAMy3C,QAAQ,KAAM,IAElC,OAAIz3C,MAAMyC,OAAS,GAAM,EAEdmjD,QAAQnO,QAAQ,oBAAqB,YAFhD,IAMJI,YAAYgO,SAASpiD,KAlBC,SAAUzD,OAC5B,OAAOA,MAAMsxB,gBAkBjBumB,YAAYiO,YAAYriD,KAAKkiD,kBAE7BD,IAAInV,GAAG,QAAS,WACZ,IAAIvwC,MAAQ2lD,iBAAiBD,IAAIjC,YAEnB77B,IAAV5nB,QACA63C,YAAYI,cAAcj4C,OAC1B63C,YAAY+B,WAEhBl6B,MAAMg5B,4GChCtBj4C,QAAQ1B,OAAO,QAAQgxC,UAAU,qBAC/B,kBAAmB,iBAAkB,uBACrC,SAAUzqC,gBAAiBC,eAAgBxE,sBACzC,OACEivC,SAAU,IACVtwB,OACEtS,OAAQ,IACRmsC,WAAY,IACZnxC,gBAAiB,IACjB29C,eAAgB,KAChBC,gBAAiB,IACjBC,WAAY,IACZC,QAAS,KAEXrV,YACE,yCACE59B,YAAY69B,cAChBr4B,KAAM,SAASiH,MAAOuwB,QAASC,OAE7B,IAAIiW,kBACF,EACA,EACA,GACA,GACA,GACA,GACA,IAIFzmC,MAAM0mC,OACJv7C,OAAQ,OACRG,UAAW,OACXG,SAAS,EACTqzB,oBAAoB,EACpB/zB,SAAUnF,gBAAgBxD,WAC1BukD,oBACAptC,OAAQ1T,eAAeM,QAAQ,WAIjC6Z,MAAM4mC,iBAAmB,WAEvB,GAA2C,IAAxC5mC,MAAM0mC,MAAMC,iBAAiB5jD,OAAhC,CAMA,IAAIzD,EACJ,IAAIA,EAAI,EAAGA,EAAI0gB,MAAM0mC,MAAMC,iBAAiB5jD,OAAQzD,IAChD,IAAI0gB,MAAM0mC,MAAMC,iBAAiBrnD,GAAGswB,UAEhC,YADA5P,MAAM0mC,MAAM5nB,oBAAqB,GAIzC9e,MAAM0mC,MAAM5nB,oBAAqB,OAZ7B9e,MAAM0mC,MAAM5nB,oBAAqB,GAgBvC9e,MAAM2hB,eAAiB,WAClB3hB,MAAM0mC,MAAM5nB,mBACb/9B,QAAQ4D,QACNqb,MAAM0mC,MAAMC,iBAAkB,SAASngD,SACrCZ,gBAAgBq6B,aAAaz5B,QAAQwK,aAGzCjQ,QAAQ4D,QACNqb,MAAM0mC,MAAMC,iBAAkB,SAASngD,SACrCZ,gBAAgB87B,WAAWl7B,QAAQwK,aAGzCgP,MAAM4mC,mBACN5mC,MAAMumC,cAIRvmC,MAAMwhB,cAAgB,SAASh7B,SAC1BZ,gBAAgB67B,WAAWj7B,QAAQwK,WACpCpL,gBAAgBq6B,aAAaz5B,QAAQwK,WAErCpL,gBAAgB87B,WAAWl7B,QAAQwK,WAErCgP,MAAM4mC,mBACN5mC,MAAMwmC,SAASK,SAAUrgD,WAI3BwZ,MAAMxU,UAAY,SAASF,WACvB0U,MAAM0mC,MAAMp7C,UAAYA,UACxB0U,MAAM0mC,MAAMj7C,SAAWuU,MAAM0mC,MAAMj7C,SAIvCuU,MAAMkiB,mBAAqB,SAAS52B,WAC7B0U,MAAM0mC,MAAMv7C,SAAWG,UACtB0U,MAAM0mC,MAAMv7C,OAASG,UAErB0U,MAAMxU,UAAUF,YAKxB0U,MAAMg7B,YAAc,SAASx0C,SACzB,OAAOigD,iBAAiBxiD,QAAQuC,QAAQyW,cAAgB,GAG5D+C,MAAMC,sBAAwB,SAASzZ,SACnC,GAAGwZ,MAAMg7B,YAAYx0C,SACjB,OAAO,EAEX,OAAOA,QAAQyW,aAEX,KAAK,EAEL,KAAK,EAEL,KAAK,EAEL,KAAK,GAEL,KAAK,GACD,OAAO,EAEf,OAAOzW,QAAQ0Z,gBAEX,KAAM,EAEN,KAAK,EACD,OAAO,EAEf,OAAO,GAIXF,MAAM8mC,eAAiB,SAAStgD,SAE5B,OAAIwZ,MAAMg7B,YAAYx0C,WAClBwZ,MAAMC,sBAAsBzZ,WACE,IAA/BA,QAAQugD,mBACsB,IAA9BvgD,QAAQugD,mBAQf/mC,MAAMgnC,gBAAkB,SAASC,YAC/B,GAAGlmD,QAAQiR,QAAQgO,MAAM0mC,MAAMntC,OAAOy4B,UACpC,IAAI1yC,EAAI,EAAGA,EAAI0gB,MAAM0mC,MAAMntC,OAAOy4B,SAASjvC,OAAQzD,IAAK,CACtD,IAAIsa,QAAUoG,MAAM0mC,MAAMntC,OAAOy4B,SAAS1yC,GAC1C,GAAGsa,QAAQ,KAAOqtC,WAChB,OAAOrtC,QAAQ,GAIrB,OAAOqtC,YAITjnC,MAAMknC,cAAgB,SAAS1gD,SAE7B,IAA4C,KADzB,YAAa,YACjBvC,QAAQuC,QAAQoZ,QAC7B,OAAOpZ,QAAQoZ,OAEf,IAAIunC,aAAennC,MAAMgnC,gBACvBxgD,QAAQmT,QAAU,IAAMnT,QAAQmW,eAIlC,MAHuB,WAApBnW,QAAQmT,UACTwtC,aAAeA,aAAax6C,MAAM,KAAK,GAAGy6C,QAEtB,aAAnB5gD,QAAQoZ,OACFunC,aAEa,cAAnB3gD,QAAQoZ,OACFpZ,QAAQoZ,OAAS,IAAMunC,kBADhC,GAOJnnC,MAAM7G,iBAAiB,yBAA0B,WAC/C6G,MAAM4mC,mBACN5mC,MAAMsmC,iBAAiBe,UAAWrnC,MAAM0mC,MAAMC,qBAIhDtlD,qBAAqB8D,aACnB6a,OAAQpa,gBAAiBC,iBAAiBZ,KAAK,WAC7CY,eAAeoC,aAAa+X,MAAO,YAIvCA,MAAM7V,IAAI,WAAY,WACpBtE,eAAeqC,YAAY8X,MAAO,4GCvM5Cjf,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAEpDA,eAAeC,IAAI,0CACjB,wEACE,mEAEA,4DACE,2DACE,qDACA,0BACA,2DACE,uCACE,0DACA,oCACA,qDACF,OACF,QACF,QACF,UAEA,0CACK,yCACL,iCACI,mEACI,6CACI,2DACA,+BACA,kCACA,mCACA,uCACI,uCACA,2CACA,gDACe,oCACf,UACA,iDACA,8CACJ,OACJ,OACA,+BACI,wCACA,qDACA,yBACA,uCACI,kDACA,WACA,oCACA,qDACJ,OACA,QACJ,QACJ,SACJ,SACF,UACAvc,KAAK,QAGXx6B,QAAQ1B,OAAO,QAAQgxC,UAAU,qBAC7B,uBAAwB,uBACxB,SAASiX,qBAAsBjmD,sBAC3B,OACIivC,SAAU,IACVa,YAAa,yCACbp4B,KAAM,SAAS9X,OAAQsvC,QAASC,OAC5BnvC,qBAAqB6I,YAAYjJ,OAAQqmD,sBACzCrmD,OAAOsmD,cAAgBD,qBAAqBllD,WAC5CnB,OAAOumD,QAAUzmD,QAAQsiC,KACrBikB,qBAAsBA,qBAAqBE,SAE/CvmD,OAAOwmD,YACH,QACA,UACA,UACA,QAEJxmD,OAAOymD,gBACHnlD,MAAO,SACPolD,QAAS,WACTC,QAAS,YACTC,KAAM,kBAEV5mD,OAAO6mD,iBACHvlD,MAAO,2BACPolD,QAAS,0BACTC,QAAS,2BACTC,KAAM,kBAEV5mD,OAAO8mD,uBACHxlD,SACAolD,WACAC,WACAC,SAGJ5mD,OAAOkY,iBACH,gBAAiB,WACb,IAAI6uC,IAAM/mD,OAAO8mD,sBACjBhnD,QAAQ4D,QACJ1D,OAAOwmD,WAAY,SAASQ,UACxBD,IAAIC,UAAUllD,OAAS,IAG/BhC,QAAQ4D,QACJ1D,OAAOsmD,cAAe,SAASW,cAC3BF,IAAIE,aAAaD,UAAUlkD,KAAKmkD,8GCxGhEnnD,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAEpDA,eAAeC,IAAI,sCACf,mCACI,6CACI,mCACA,wCACA,oBACA,mDACJ,YACJ,SACA,mCACI,kDACI,mCACA,6CACA,oBACA,qDACJ,YACJ,SACA,mCACI,gEACI,oCACA,oBACA,iDACA,mBACA,2CACJ,YACJ,UACFvc,KAAK,QAGXx6B,QAAQ1B,OAAO,QAAQgxC,UAAU,eAAgB,WAC7C,OACIC,SAAU,IACV0H,QAAS,UACTh4B,OACImoC,aAAc,IACdjQ,QAAS,KAEb/G,YAAa,qCACbnwC,WAAY,SAASC,QAGjB,SAASmnD,wBACL,GAAGrnD,QAAQU,SAASR,OAAOknD,eACvBpnD,QAAQiR,QAAQ/Q,OAAOknD,aAAanW,UAAW,CAC/C,IAAI1yC,EACA6sC,OADGkc,WAAapnD,OAAOknD,aAAanW,SAC5BlrC,WACZ,IAAIxH,EAAI,EAAGA,EAAI+oD,WAAWtlD,OAAQzD,KAC9B6sC,OAASkc,WAAW/oD,IACV,GAAG2E,QAAQhD,OAAOi3C,QAAQv+B,QAAU,MAAQ,GAElD7S,QAAQ/C,KAAKooC,QAGrB,OAAOrlC,QAEX,SAIJ,SAASwhD,uBACL,GAAGvnD,QAAQU,SAASR,OAAOknD,eACvBpnD,QAAQU,SAASR,OAAOknD,aAAaI,UACrCxnD,QAAQyM,SAASvM,OAAOi3C,QAAQv+B,UAChC5Y,QAAQyM,SAASvM,OAAOi3C,QAAQt+B,SAAU,CAC1C,IAAI4uC,GAAKvnD,OAAOi3C,QAAQv+B,QACpBC,QAAU3Y,OAAOi3C,QAAQt+B,QAAQjN,MAAM,KAAK,GAC5C87C,UAAYxnD,OAAOknD,aAAaI,QAAQC,IAC5C,GAAGznD,QAAQU,SAASgnD,WAChB,OAAOA,UAAU7uC,SAGzB,SAMJ,SAAS8uC,kBAAkBC,MAAOC,aAAcC,aAC5C,IAAIvpD,EAAGwpD,MAAOC,iBAAkB,EAChC,IAAIzpD,EAAI,EAAGA,EAAIqpD,MAAM5lD,OAAQzD,IAAK,CAI9B,GAHGyB,QAAQgI,YAAY+/C,SACnBA,MAAQH,MAAMrpD,GAAG,IAElBqpD,MAAMrpD,GAAG,KAAOspD,aACf,OAAOA,aAER7nD,QAAQyM,SAASq7C,cAChBF,MAAMrpD,GAAG,KAAOupD,cAChBE,iBAAkB,GAG1B,OAAGA,gBACQF,YAER9nD,QAAQgI,YAAY+/C,OACZ,KAEJA,MASX,SAASE,aAEFjoD,QAAQyM,SAASvM,OAAOi3C,QAAQv+B,UAC/B5Y,QAAQyM,SAASvM,OAAOi3C,QAAQt+B,UAIjC7Y,QAAQgI,YAAY9H,OAAOknD,aAAac,kBACvCloD,QAAQgI,YAAY9H,OAAOknD,aAAae,mBAK5CjoD,OAAOi3C,QAAQv+B,QAAU+uC,kBACrBznD,OAAOknD,aAAa/rC,SACpBnb,OAAOknD,aAAac,gBAAiB,UACzChoD,OAAO+wC,SAAWoW,wBAClBnnD,OAAOi3C,QAAQt+B,QAAU8uC,kBACrBznD,OAAO+wC,SACP/wC,OAAOi3C,QAAQv+B,QAAU,IACzB1Y,OAAOknD,aAAae,iBACxBjoD,OAAOi3C,QAAQiR,OAAS,IAIxBpoD,QAAQU,SAASR,OAAOi3C,WACxBj3C,OAAOi3C,SACHv+B,QAAS,KACTC,QAAS,KACTC,WAAY,OAGpB5Y,OAAO+wC,SAAWoW,wBAClBnnD,OAAOmF,YAAckiD,uBAIrBrnD,OAAOi3C,QAAQ16B,OAAS,WACpBvc,OAAOi3C,QAAQv+B,QAAU,KACzB1Y,OAAOi3C,QAAQt+B,QAAU,KACzB3Y,OAAOi3C,QAAQr+B,WAAa,KAC5BmvC,cAKJ/nD,OAAOkP,OAAO,wBAAyB,WACnClP,OAAO+wC,SAAWoW,wBAClBY,eAKJ/nD,OAAOkP,OAAO,uBAAwB,WAClClP,OAAOmF,YAAckiD,uBACrBU,eAIJ/nD,OAAOmoD,kBAAoB,WACvBnoD,OAAO+wC,SAAWoW,wBAClBnnD,OAAOmF,YAAckiD,uBACrBrnD,OAAOi3C,QAAQt+B,QAAU,KACzB3Y,OAAOi3C,QAAQr+B,WAAa,KACzB5Y,OAAO+wC,SAASjvC,OAAS,IACxB9B,OAAOi3C,QAAQt+B,QAAU3Y,OAAO+wC,SAAS,GAAG,KAKpD/wC,OAAOooD,uBAAyB,WAC5BpoD,OAAOmF,YAAckiD,uBACrBrnD,OAAOi3C,QAAQr+B,WAAa,mGCjL5C9Y,QAAQ1B,OAAO,QAAQgxC,UAAU,gBAAiB,WAC9C,OACIC,SAAU,IACVtwB,OACIspC,cAAe,KAEnBvwC,KAAM,SAASiH,MAAOuwB,QAASC,OAC3BxwB,MAAM7P,OAAO,gBAAiB,WAC1BogC,QAAQ,GAAGqT,YAAc5jC,MAAMspC,gHCX/CvoD,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAEpDA,eAAeC,IAAI,2CACf,8DACE,mCACA,qCACA,gEACA,qBACF,oBACA,0BACFvc,KAAK,QAIXx6B,QAAQ1B,OAAO,QAAQgxC,UACnB,qBACI,WAAY,iBAAkB,uBAAwB,SACtD4I,SAAUpzC,eAAgBxE,sBAC9B,OACIivC,SAAU,IACV0H,QAAS,gBACTh4B,OACEupC,SAAU,KAEZpY,YAAa,0CACbp4B,KAAM,SAASiH,MAAOuwB,QAASC,MAAOxvC,YAClCgf,MAAMklB,WAAar/B,eAAeM,QAAQ,eAC1C6Z,MAAMwpC,YACNxpC,MAAMxY,KAAO,KAEb,IAAI28C,WAAYsF,cAAgB1oD,QAAQwvC,QACpCA,QAAQK,KAAK,oBAGb8Y,aAAe,SAASC,SACxB,IACIrqD,EADAkI,KAAO,KAEX,IAAIlI,EAAI,EAAGA,EAAI0gB,MAAMwpC,SAASzmD,OAAQzD,IAC/B0gB,MAAMwpC,SAASlqD,GAAGO,OAAS8pD,UAC5BniD,KAAOwY,MAAMwpC,SAASlqD,IAQ5B,GAJAmqD,cAAcjQ,QACX2K,YACDA,WAAWyF,WAEV7oD,QAAQU,SAAS+F,MAAO,CACzB,IAAI4xC,KAAO,yBACXr4C,QAAQ4D,QAAQ6C,KAAKO,OAAQ,SAASe,OACf,QAAhBA,MAAMkX,QACa,eAAflX,MAAMjJ,KACLu5C,MACI,wCAEJA,MACI,oCAERA,MAAStwC,MAAMjJ,KAAO,YAAciJ,MAAMnC,MACxC,yDAIVyyC,MAAQ,0BACR+K,WAAankC,MAAMokC,OACnB,IAAI4B,IAAMjlD,QAAQwvC,QAAQ6I,MAC1BqQ,cAAcpG,OAAO2C,KACrB/M,SAAS+M,IAAT/M,CACIkL,gBAAYj8B,GAAY2hC,YAAa7oD,eAK3C8oD,QAAU,WACV,OAAG9pC,MAAMupC,SACEvoD,WAAWsM,IAAI9F,KAEfxG,WAAWsgB,SAAS,SAKnCtB,MAAM7P,OAAO25C,QAASJ,cAGtB1pC,MAAM7G,iBAAiB,aAAc,WACjC6G,MAAMwpC,SAASzmD,OAAS,EACxBhC,QAAQ4D,QAAQqb,MAAMklB,WAAY,SAAS19B,MACf,QAArBA,KAAKuiD,aACJ/pC,MAAMwpC,SAASzlD,KAAKyD,QAG5BkiD,aAAaI,aAIjBzoD,qBAAqB6I,YAAY8V,MAAOna,mHChGpD9E,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAEpDA,eAAeC,IAAI,6CACf,8BACI,2BACQ,qDACR,wCACI,6CACI,iCACA,8CACA,gCACA,oBACA,4BACA,uDACA,sCACI,yBACJ,YACJ,YACJ,SACJ,SACA,8BACI,iDACA,iEACI,oBACJ,WACA,wCACI,mCACI,iCACA,kDACR,SACJ,UACFvc,KAAK,QAGXx6B,QAAQ1B,OAAO,QAAQgxC,UAAU,kBAAmB,WAChD,SAAS4I,UACL,OACI3I,SAAU,IACV0H,QAAS,UACTh4B,OACIlX,MAAO,IACPovC,QAAS,KAEbn/B,KAAM,SAASiH,MAAOuwB,QAASC,OAC3B,IAAIhpC,KAAOwY,MAAMlX,MAAMlC,WACnBojD,IAAMhqC,MAAMlX,MAAM/B,SAAW,uBAAyB,GACtDqyC,KAAO,GACX,GAAY,WAAT5xC,MAA8B,gBAATA,MACZ,aAATA,KAAqB,CAEpB,IAAIyiD,WAAa,cACL,aAATziD,OAICyiD,WAAa,4DAGjB7Q,KACI,UAAY6Q,WAAa,UACdjqC,MAAMlX,MAAMjJ,KAAO,KAC9BmqD,IAAM,kBAAoBxZ,MAAM0H,QAAU,uBACnB1H,MAAMqJ,WAAa,KAGlC,gBAATryC,OACC4xC,MACI,8DAGRA,MAAQ,IAGLr4C,QAAQgI,YAAYiX,MAAMk4B,WACzBl4B,MAAMk4B,QAAUl4B,MAAMlX,MAAN,aAEjB,IAAY,WAATtB,KAuBN,MAAM,IAAIsE,MAAM,uBAAwBtE,MAVpC,IAAIlI,EADR,GAVA85C,KACI,iBAAmBp5B,MAAMlX,MAAMjJ,KAAO,IACtCmqD,IAAM,kBAAoBxZ,MAAM0H,QAAU,uBACnB1H,MAAMqJ,WAAa,0EAI9CT,MAAQ,YAGLr4C,QAAQgI,YAAYiX,MAAMk4B,SAEzB,IAAI54C,EAAI,EAAGA,EAAI0gB,MAAMlX,MAAMhC,QAAQ/D,OAAQzD,IAAK,CAC5C,IAAI6sC,OAASnsB,MAAMlX,MAAMhC,QAAQxH,GACjC,GAAG0gB,MAAMlX,MAAN,UAA2BqjC,OAAO,GAAI,CACrCnsB,MAAMk4B,QAAU/L,OAChB,QAYhBoE,QAAQ2Z,YAAYjR,SAASG,KAATH,CAAej5B,MAAM/d,eAKzDlB,QAAQ1B,OAAO,QAAQgxC,UAAU,sBAAuB,WACpD,OACIC,SAAU,IACV0H,QAAS,UACTh4B,OACImqC,oBAAqB,IACrBjS,QAAS,IACT2B,WAAY,KAEhB1I,YAAa,2ICxHrBpwC,QAAQ1B,OAAO,QAAQgxC,UAAU,qBAC7B,OAAQ,iBAAkB,uBAAwB,cAClD,SAAS+Z,KAAM1/C,eAAgBrJ,qBAAsBqgB,aACjD,OACI4uB,SAAU,IACVtwB,SACAmxB,YAAa,sCACbnwC,WAAY,SAASC,OAAQoJ,WAAY2mC,SAAUC,WAC/ChwC,OAAO0O,SAAU,EACjBtO,qBAAqB6I,YACjBjJ,OAAQyJ,gBAAgBzF,KAAK,WAC7BhE,OAAO0O,SAAU,EACjB1O,OAAOwR,UAAY/H,eAAehH,gBAC9B,cACJzC,OAAOopD,gBAAkB3/C,eAAehH,gBACpC,qBACJzC,OAAOqpD,aAAe5/C,eAAehH,gBACjC,kBACAzC,OAAOopD,gBAAgB/pD,MACnBW,OAAOwR,UAAUnS,MACbW,OAAOqpD,aAAahqD,MACpBW,OAAOspD,WAAa,aAEpBtpD,OAAOspD,WAAa,iBAGxBtpD,OAAOspD,WAAa,gBAGxBtpD,OAAOspD,WAAa,4GC1B5CxpD,QAAQ1B,OAAO,QAAQgxC,UAAU,mBAC7B,iBAAkB,uBAClB,SAASxqC,eAAgBxE,sBACzB,OACIivC,SAAU,IACVtwB,OACEwqC,YAAa,oBAEfzxC,KAAM,SAASiH,MAAOuwB,QAASC,OAC3BxwB,MAAMzG,OAAS1T,eAAeM,QAAQ,UAGtC,IAaIskD,QAAU,WACVla,QAAQ7oC,KAdE,WACV,GAAG3G,QAAQiR,QAAQgO,MAAMzG,OAAOy4B,UAC9B,IAAI1yC,EAAI,EAAGA,EAAI0gB,MAAMzG,OAAOy4B,SAASjvC,OAAQzD,IAAK,CAC9C,IAAIsa,QAAUoG,MAAMzG,OAAOy4B,SAAS1yC,GACpC,GAAGsa,QAAQ,KAAOoG,MAAMwqC,YACpB,OAAO5wC,QAAQ,GAIzB,OAAOoG,MAAMwqC,YAKAt+C,KAIjB8T,MAAM7P,OAAO,cAAe,WAC1Bs6C,YAEFzqC,MAAM7G,iBAAiB,kBAAmB,WACxCsxC,YAIFppD,qBAAqB6I,YAAY8V,MAAOna,gBAAgBZ,KACpD,WACIY,eAAeoC,aAAa+X,MAAO,YAI3CA,MAAM7V,IAAI,WAAY,WACpBtE,eAAeqC,YAAY8X,MAAO,8GChDhDjf,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAEpDA,eAAeC,IAAI,4CACf,+DACI,uDACI,4DACA,0CACA,oCACJ,iDACI,+BACJ,WACJ,SACA,+DACI,yDACI,mBACA,kDACA,gDACJ,mDACI,mBACJ,WACJ,SACA,+CACI,2DACI,iDACA,gDACJ,kDACI,+BACJ,WACJ,UACFvc,KAAK,QAGXx6B,QAAQ1B,OAAO,QAAQgxC,UAAU,sBAC7B,iBAAkB,SAASxqC,gBACvB,OACIyqC,SAAU,IACVtwB,OACI0qC,mBAAoB,KAExBvZ,YAAa,2CACbp4B,KAAM,SAASiH,MAAOuwB,QAASC,OAG3BxwB,MAAM2qC,cAAgB,WACf3qC,MAAM0qC,mBAAmBxtC,OACxB8C,MAAM0qC,mBAAmBttC,YACrB4C,MAAM4qC,cAAcztC,aACxB6C,MAAM0qC,mBAAmBptC,WACrB0C,MAAM4qC,cAAcvtC,cAExB2C,MAAM0qC,mBAAmBttC,aAAc,EACvC4C,MAAM0qC,mBAAmBptC,YAAa,IAM9C0C,MAAM4qC,cAAgB/kD,eAAeM,QACjC,mBACJ6Z,MAAM7P,OAAO,gBAAiB,WACvBpP,QAAQomB,UAAUnH,MAAM4qC,cAAc1tC,SAErC8C,MAAM0qC,mBAAmBxtC,MACrB8C,MAAM4qC,cAAc1tC,MACxB8C,MAAM2qC,mBAEX,yGCjEnB5pD,QAAQ1B,OAAO,QAAQgxC,UAAU,wBAAyB,WACtD,OACIc,YACA,8CACI59B,YAAY69B,6GCLxBrwC,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAEpDA,eAAeC,IAAI,2CACf,kEACA,oDACA,+BACA,kEACA,sDACA,gEACA,2CACA,8DACA,6CACFvc,KAAK,QAGXx6B,QAAQ1B,OAAO,QAAQgxC,UAAU,oBAAqB,WAClD,OACIC,SAAU,IACV0H,SAAU,YAAa,UAAW,mBAAoB,gBACtDh4B,OACI6qC,UAAW,IACXC,QAAS,IACTC,iBAAkB,IAClBC,aAAc,KAElB7Z,YAAa,0CACbnwC,WAAY,SAASC,OAAQoV,WAGzB,SAAS40C,mBACL,IAA4B,IAAxBhqD,OAAO+pD,cAA8C,IAAxB/pD,OAAO+pD,eACpC/pD,OAAO4pD,UAAW,CAClB,IAAIK,WAAa,IAAIC,KAAK,MAC1BD,WAAWE,WAAWnqD,OAAO4pD,WAC7B,IAAIQ,QAAUn5B,KAAKo5B,OAAOH,KAAKvmB,MAAQsmB,YAAc,KACjDK,QAAUr5B,KAAKo5B,MAAMD,QAAU,IAC/BG,MAAQt5B,KAAKo5B,MAAMC,QAAU,IAC7BtvB,KAAO/J,KAAKo5B,MAAME,MAAQ,IAG9BH,QAAUA,QAAkB,GAAPpvB,KAAY,GAAK,GACzB,IAHbuvB,OAAwB,GAAPvvB,MAGC,GAAiB,IAFnCsvB,QAAUA,QAAkB,GAAPtvB,KAAY,GAAe,GAARuvB,OAGxC,IAAIC,YAAc,GAKN,IAATxvB,KACCwvB,YAAcxvB,KAAO,SAChBA,KAAO,IACZwvB,YAAcxvB,KAAO,WAEzBwvB,aAAeD,MAAQ,IAEnBC,aADDF,QAAU,GACM,IAAMA,QAAU,IAEhBA,QAAU,IAGzBE,aADDJ,QAAU,GACM,IAAMA,QAENA,QAEnBpqD,OAAO06C,QAAU8P,aApCzBxqD,OAAO06C,QAAU,UA0CjBsP,mBACA,IAAIS,QAAUr1C,UAAU40C,iBAAkB,KAC1ChqD,OAAOkJ,IAAI,WAAY,WACrBkM,UAAUjS,OAAOsnD,0GCxE/B3qD,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAEpDA,eAAeC,IAAI,0CACf,oEACQ,yDACA,uDACA,+DACA,8DACJ,6DACQ,kDACA,mDACA,8BACR,mBACJ,gBACA,wDACI,QACI,MACI,qCACJ,OACA,kCACI,uBACJ,UACJ,SACJ,cACFvc,KAAK,QAGXx6B,QAAQ1B,OAAO,QAAQgxC,UACf,oBACC,KAAM,iBAAkB,uBACzB,SAASsb,GAAIn1C,eAAgBnV,sBACjC,OACIivC,SAAU,IACV0H,QAAS,UACTh4B,OACIk4B,QAAS,IACT0T,WAAY,KAEhBza,YAAa,yCACbp4B,KAAM,SAAS9X,OAAQsvC,QAASC,MAAO2H,aAEnCl3C,OAAO4qD,WAAar1C,eAAepU,WACnCnB,OAAOuZ,WACPvZ,OAAO6qD,WAAa,SAAStwC,OAmBzB,OAlBAva,OAAOuZ,QAAQzX,OAAS,EACxBhC,QAAQ4D,QAAQ1D,OAAO4qD,WAAY,SAASE,QACrCA,OAAOjsC,cAAgB7e,OAAO2qD,YACzBG,OAAOlsD,KAAKoE,QAAQuX,QAAU,IAClCuwC,OAAOC,YAAc,GACrBjrD,QAAQ4D,QAAQonD,OAAO7zC,KAAM,SAAUoG,KACT,KAAvBytC,OAAOC,YACND,OAAOC,YAAc,IAAM1tC,IAE3BytC,OAAOC,aAAe,KAAO1tC,MAGX,KAAvBytC,OAAOC,cACND,OAAOC,aAAe,KAE1B/qD,OAAOuZ,QAAQzW,KAAKgoD,YAIxBliD,KAAM5I,OAAOuZ,UAGrBvZ,OAAOgrD,YAAc,SAAS3tC,KAC1B,YAAkB4J,IAAX5J,IAAIhV,IAGfrI,OAAOirD,QAAU,WACb,IAAIC,UAAY5b,QAAQK,KAAK,cACzBwb,eAAiBD,UAAUE,eAC/BD,eAAeE,cAAcC,MAAMC,OAAO,IAC1CJ,eAAeE,cAAcC,MAAM5G,QACnCwG,UAAUvb,KAAK,SAAS+U,SAGxB5kD,QAAQiR,QAAQ/Q,OAAOi3C,WACvBj3C,OAAOi3C,YAEX72C,qBAAqB6I,YAAYjJ,OAAQuV,gBAAgBvR,KACrD,WACIhE,OAAOi3C,QAAQn1C,OAAS,EACxBhC,QAAQ4D,QAAQ1D,OAAO4qD,WAAY,SAASE,QACrCA,OAAOjsC,cAAgB7e,OAAO2qD,YACC,IAA/BG,OAAOU,aAAa1pD,SACM,IAAtB9B,OAAO2qD,WAIN3qD,OAAOi3C,QAAQn0C,KAAKgoD,QACQ,IAAtB9qD,OAAO2qD,YACTG,OAAO7zC,KAAKjU,QAAQ,kBAAoB,GAG5ChD,OAAOi3C,QAAQn0C,KAAKgoD,6GChGpDhrD,QAAQ1B,OAAO,QAAQu4C,KAAK,iBAAkB,SAAUC,gBAEpDA,eAAeC,IAAI,0CACf,0DACFvc,KAAK,QAGXx6B,QAAQ1B,OAAO,QAAQgxC,UAAU,mBAAoB,WACjD,OACIC,SAAU,IACV0H,QAAS,eACTh4B,OACIgrC,aAAc,KAElB7Z,YAAa,yCACbnwC,WAAY,SAASC,QACjB,SAASyrD,UAEL,OADAzrD,OAAO0B,MAAO,EACP1B,OAAO+pD,cAEV,KAAK,EACD/pD,OAAO4zC,KAAO,kBACd,MAEJ,KAAK,EAEL,KAAK,EACD5zC,OAAO4zC,KAAO,kBACd,MAEJ,KAAK,EACD5zC,OAAO4zC,KAAO,eACd,MAEJ,KAAK,EAEL,KAAK,EAEL,KAAK,EAEL,KAAK,EACD5zC,OAAO4zC,KAAO,sBACd,MAEJ,KAAK,EACD5zC,OAAO4zC,KAAO,oBACd,MACJ,KAAM,EAEF5zC,OAAO0B,MAAO,EACd,MACJ,QACI1B,OAAO4zC,KAAO,gBAK1B6X,UAEAzrD,OAAOkP,OAAO,eAAgB,WAC1Bu8C,sGC5DhB3rD,QAAQ1B,OAAO,QAAQgxC,UAAU,eAC7B,OAAQ,iBAAkB,uBAAwB,cAClD,SAAS+Z,KAAMuC,eAAgBtrD,qBAAsBqgB,aACjD,OACI4uB,SAAU,IACVtwB,SACAmxB,YACI,mCACI59B,YAAY69B,cACpBpwC,WAAY,SAASC,OAAQoJ,WAAY2mC,SAAUC,WAC/ChwC,OAAO0O,SAAU,EACjB1O,OAAOgQ,KAAO07C,eAAevqD,WAC7BnB,OAAO2rD,eACP3rD,OAAO+oB,KACH0e,OAAQ,KACRmkB,OAAQ,GACR37C,IAAK,GACL3O,MAAO,KACP8uC,QAAQ,GAEZpwC,OAAO6rD,cACHC,GAAM,YACNC,GAAM,SACNC,OAAU,UAEdhsD,OAAOisD,QAAU,KACjBjsD,OAAOksD,QAAU,KAGjBlsD,OAAOmsD,YAAchD,KAAKgD,YAG1BnsD,OAAOgkC,KAAO,SAAS33B,IAAKtF,MACxB/G,OAAOisD,QAAU5/C,IAAIhE,GACrBrI,OAAOksD,QAAUnlD,MAIrB/G,OAAOosD,MAAQ,WACXpsD,OAAOisD,QAAU,MAIrBjsD,OAAOqsD,cAAgB,WACnB,OAAGrsD,OAAO+oB,IAAIqnB,SAEmB,OAAtBpwC,OAAO+oB,IAAI0e,QACI,OAAtBznC,OAAO+oB,IAAI0e,OACJznC,OAAO+oB,IAAI6iC,OAAO9pD,OAAS,EAE3B9B,OAAO+oB,IAAI9Y,IAAInO,OAAS,IAKvC9B,OAAOssD,WAAa,WACZtsD,OAAOqsD,kBAGXrsD,OAAO+oB,IAAIznB,MAAQ,KACnBtB,OAAO+oB,IAAIqnB,QAAS,EACK,OAAtBpwC,OAAO+oB,IAAI0e,QACY,OAAtBznC,OAAO+oB,IAAI0e,OACXikB,eAAeY,YACXC,SAAYvsD,OAAO+oB,IAAI0e,OACvB+kB,QAAWxsD,OAAO+oB,IAAI6iC,SACvB5nD,KAAK,WACJhE,OAAO+oB,IAAIqnB,QAAS,EACpBpwC,OAAO+oB,IAAI0e,OAAS,KACpBznC,OAAO+oB,IAAI6iC,OAAS,GACpB5rD,OAAO+oB,IAAI9Y,IAAM,IAClB,SAAS3O,OACRtB,OAAO+oB,IAAIqnB,QAAS,EACpB,IAAI4Q,UAAYvgC,YAAYgL,SAASnqB,OAClCxB,QAAQU,SAASwgD,YACblhD,QAAQiR,QAAQiwC,UAAUyL,SACzBzsD,OAAO+oB,IAAIznB,MAAQ0/C,UAAUyL,QAAQ,GAKzCzsD,OAAO+oB,IAAIznB,MAAQA,QAI3BoqD,eAAe/gD,YACXsF,IAAOjQ,OAAO+oB,IAAI9Y,MACnBjM,KAAK,WACJhE,OAAO+oB,IAAIqnB,QAAS,EACpBpwC,OAAO+oB,IAAI0e,OAAS,KACpBznC,OAAO+oB,IAAI6iC,OAAS,GACpB5rD,OAAO+oB,IAAI9Y,IAAM,IAClB,SAAS3O,OACRtB,OAAO+oB,IAAIqnB,QAAS,EACpB,IAAI4Q,UAAYvgC,YAAYgL,SAASnqB,OAClCxB,QAAQU,SAASwgD,WACblhD,QAAQiR,QAAQiwC,UAAU/wC,KACzBjQ,OAAO+oB,IAAIznB,MAAQ0/C,UAAU/wC,IAAI,GAC3BnQ,QAAQiR,QAAQiwC,UAAUyL,SAChCzsD,OAAO+oB,IAAIznB,MAAQ0/C,UAAUyL,QAAQ,GAErCzsD,OAAO+oB,IAAIznB,MAAQA,MAGvBtB,OAAO+oB,IAAIznB,MAAQA,UAOnCtB,OAAO0sD,cAAgB,SAASrgD,KAC5BvM,QAAQ4D,QAAQ2I,IAAI2D,KAAM,SAASC,KAC/By7C,eAAeppB,WAAWryB,QAKlCjQ,OAAOkY,iBAAiB,OAAQ,WAC5BlY,OAAO2rD,eACP,IAAIgB,UACJ7sD,QAAQ4D,QAAQ1D,OAAOgQ,KAAM,SAASC,KAClC,IAAI28C,SAAUC,UAAY58C,IAAI48C,UAC9B,GAAG/sD,QAAQU,SAASqsD,WAAY,CAC5B,IAAIC,aACAD,UAAUN,SAAW,IAAMM,UAAUL,QACzCI,SAAWD,OAAOG,cACfhtD,QAAQU,SAASosD,UAChBA,SAAS58C,KAAKlN,KAAKmN,MAEnB28C,UACIvkD,GAAIykD,aACJrlB,OAAQolB,UAAUN,SAClBX,OAAQiB,UAAUL,QAClBx8C,MAAOC,MAEX08C,OAAOG,cAAgBF,SACvB5sD,OAAO2rD,YAAY7oD,KAAK8pD,gBAG5BA,UACIvkD,GAAI,UAAY4H,IAAI5H,GACpBo/B,OAAQ,SACRmkB,OAAQ,GACR57C,MAAOC,MAEXjQ,OAAO2rD,YAAY7oD,KAAK8pD,cAKpCxsD,qBAAqB6I,YAAYjJ,OAAQ0rD,gBAAgB1nD,KACrD,WACIhE,OAAO0O,SAAU,qGCtJzC5O,QAAQ1B,OAAO,QAAQgxC,UAAU,qBAC/B,kBAAmB,iBAAkB,uBACrC,SAAUjS,gBAAiBv4B,eAAgBxE,sBACzC,OACEivC,SAAU,IACVtwB,OACEtS,OAAQ,IACRmsC,WAAY,IACZmU,eAAgB,IAChB3H,eAAgB,KAChBC,gBAAiB,IACjBC,WAAY,IACZC,QAAS,KAEXrV,YACE,yCACE59B,YAAY69B,cAChBr4B,KAAM,SAASiH,MAAOuwB,QAASC,OAE7B,IAAIiW,kBACF,EACA,EACA,GACA,GACA,GACA,GACA,IAIFzmC,MAAM0mC,OACJv7C,OAAQ,OACRG,UAAW,OACXG,SAAS,EACTqzB,oBAAoB,EACpBsB,SAAUhC,gBAAgBh8B,WAC1B6rD,oBACA10C,OAAQ1T,eAAeM,QAAQ,WAIjC6Z,MAAM4mC,iBAAmB,WAEvB,GAA2C,IAAxC5mC,MAAM0mC,MAAMuH,iBAAiBlrD,OAAhC,CAMA,IAAIzD,EACJ,IAAIA,EAAI,EAAGA,EAAI0gB,MAAM0mC,MAAMuH,iBAAiBlrD,OAAQzD,IAChD,IAAI0gB,MAAM0mC,MAAMuH,iBAAiB3uD,GAAGswB,UAEhC,YADA5P,MAAM0mC,MAAM5nB,oBAAqB,GAIzC9e,MAAM0mC,MAAM5nB,oBAAqB,OAZ7B9e,MAAM0mC,MAAM5nB,oBAAqB,GAgBvC9e,MAAM2hB,eAAiB,WAClB3hB,MAAM0mC,MAAM5nB,mBACb/9B,QAAQ4D,QACNqb,MAAM0mC,MAAMuH,iBAAkB,SAASC,SACrC9vB,gBAAgB6B,aAAaiuB,QAAQl9C,aAGzCjQ,QAAQ4D,QACNqb,MAAM0mC,MAAMuH,iBAAkB,SAASC,SACrC9vB,gBAAgBsD,WAAWwsB,QAAQl9C,aAGzCgP,MAAM4mC,mBACN5mC,MAAMumC,cAIRvmC,MAAMwhB,cAAgB,SAAS0sB,SAC1B9vB,gBAAgBqD,WAAWysB,QAAQl9C,WACpCotB,gBAAgB6B,aAAaiuB,QAAQl9C,WAErCotB,gBAAgBsD,WAAWwsB,QAAQl9C,WAErCgP,MAAM4mC,mBACN5mC,MAAMwmC,SAAS2H,SAAUD,WAI3BluC,MAAMxU,UAAY,SAASF,WACvB0U,MAAM0mC,MAAMp7C,UAAYA,UACxB0U,MAAM0mC,MAAMj7C,SAAWuU,MAAM0mC,MAAMj7C,SAIvCuU,MAAMkiB,mBAAqB,SAAS52B,WAC7B0U,MAAM0mC,MAAMv7C,SAAWG,UACtB0U,MAAM0mC,MAAMv7C,OAASG,UAErB0U,MAAMxU,UAAUF,YAKxB0U,MAAMg7B,YAAc,SAASkT,SAC3B,OAAOzH,iBAAiBxiD,QAAQiqD,QAAQjxC,cAAgB,GAI1D+C,MAAMgnC,gBAAkB,SAASC,YAC/B,GAAGlmD,QAAQiR,QAAQgO,MAAM0mC,MAAMntC,OAAOy4B,UACpC,IAAI1yC,EAAI,EAAGA,EAAI0gB,MAAM0mC,MAAMntC,OAAOy4B,SAASjvC,OAAQzD,IAAK,CACtD,IAAIsa,QAAUoG,MAAM0mC,MAAMntC,OAAOy4B,SAAS1yC,GAC1C,GAAGsa,QAAQ,KAAOqtC,WAChB,OAAOrtC,QAAQ,GAIrB,OAAOqtC,YAITjnC,MAAMknC,cAAgB,SAASgH,SAE7B,IAA4C,KADzB,YAAa,YACjBjqD,QAAQiqD,QAAQtuC,QAC7B,OAAOsuC,QAAQtuC,OAEf,IAAIunC,aAAennC,MAAMgnC,gBACvBkH,QAAQv0C,QAAU,IAAMu0C,QAAQvxC,eAIlC,MAHuB,WAApBuxC,QAAQv0C,UACTwtC,aAAeA,aAAax6C,MAAM,KAAK,GAAGy6C,QAEtB,aAAnB8G,QAAQtuC,OACFunC,aAEa,cAAnB+G,QAAQtuC,OACFsuC,QAAQtuC,OAAS,IAAMunC,kBADhC,GAOJnnC,MAAM7G,iBAAiB,yBAA0B,WAC/C6G,MAAM4mC,mBACN5mC,MAAMsmC,iBAAiB8H,UAAWpuC,MAAM0mC,MAAMuH,qBAIhD5sD,qBAAqB8D,aACnB6a,OAAQoe,gBAAiBv4B,iBAAiBZ,KAAK,WAC7CY,eAAeoC,aAAa+X,MAAO,YAIvCA,MAAM7V,IAAI,WAAY,WACpBtE,eAAeqC,YAAY8X,MAAO,6GC7J5Cjf,QAAQ1B,OAAO,QAAQgxC,UAAU,cAC7B,YACA,SAASY,WACL,OACIX,SAAU,IACVv3B,KAAM,SAAS9X,OAAQ+vC,SAAUqd,OAE7BptD,OAAOqtD,WAAY,EACnBrtD,OAAOstD,WAAa,WAClBttD,OAAOqtD,WAAartD,OAAOqtD,WAG7B,IAAI7d,aAAe,SAAS3xB,OACpBkyB,SAASJ,KAAK9xB,MAAM0vC,QAAQzrD,OAAS,GAGzC9B,OAAO+3C,OAAO,WACV/3C,OAAOqtD,WAAY,KAI3Brd,UAAUJ,GAAG,QAASJ,cACtBxvC,OAAOkJ,IAAI,WAAY,WACnB8mC,UAAUH,IAAI,QAASL,uGCvB3C1vC,QAAQ1B,OAAO,QAAQgxC,UAAU,SAAU,WACvC,OACIC,SAAU,IACVtwB,OACIyuC,OAAQ,KAEZ11C,KAAM,SAASiH,MAAOuwB,QAASC,OAC3BxwB,MAAM7P,OAAO,SAAU,WA0BnB,GAzBAu+C,aACI,SACA,WACA,QACA,QACA,YACA,kBACA,SACA,OACA,SACA,QACA,SACA,UACA,WACA,QACA,SACA,QACA,SACA,SACA,MACA,OACA,QACA,MACA,SAEsC,IAAvCA,YAAYzqD,QAAQ+b,MAAMyuC,QAIzB,MAAM,IAAI3iD,MAAM,uBAAyBkU,MAAMyuC,QAH/Cle,QAAQ,GAAG/oC,KAAOwY,MAAMyuC,2GC9B5C1tD,QAAQ1B,OAAO,QAAQgxC,UAAU,uBAC7B,UAAW,iBAAkB,uBAAwB,aACrD,SAASjmC,QAASvE,eAAgBxE,qBAAsBstD,YACpD,OACIre,SAAU,IACVtvC,WAAY,SAASC,QACjBA,OAAO0nC,QAAU9iC,eAAeM,QAAQ,WAGxClF,OAAO2tD,WAAa,WAEhBxkD,QAAQiJ,SAASC,QAAO,IAG5BjS,qBAAqB6I,YAAYjJ,OAAQ4E,gBAAgBZ,KACrD,WACIY,eAAegpD,kBAAiB,GAChCF,WAAW9G,KACP,sCACA5mD,OAAO6tD,KAAO,aAAc7tD,OAAO0nC,QAAQjhC,KAC3C,MAAO0C,QAAQiJ,SAAS07C,MAC5B9tD,OAAOkP,OAAO,eACV,SAASmyC,SAAU0M,UACZ1M,WAAa0M,WACZL,WAAW9G,KACP,8BACAmH,SAAW,SAAW1M,SACtB,sBACJrhD,OAAO2tD,iHCzB3C7tD,QAAQ1B,OAAO,QAAQgxC,UAAU,eAC7B,UACA,SAAUjmC,SACN,OACIkmC,SAAU,IACVv3B,KAAM,SAAS9X,OAAQsvC,QAASC,OAE5B,SAASye,WAEDhuD,OAAOiuD,cAAgB9kD,QAAQ+kD,aAC/BluD,OAAOiuD,YAAc9kD,QAAQ+kD,WAC7BluD,OAAO+3C,OAAO,WACV/3C,OAAOmuD,QAAU,qBAN7BnuD,OAAOiuD,YAAc9kD,QAAQ+kD,WAe7BpuD,QAAQwvC,QAAQnmC,SAASymC,GAAG,SAAUoe,UACtChuD,OAAOkJ,IAAI,WALX,WACIpJ,QAAQwvC,QAAQnmC,SAAS0mC,IAAI,SAAUme,2GCd3DluD,QAAQ1B,OAAO,QAAQwgD,QACnB,wBACC,KAAM,WAAY,mBAAoB,eACvC,SAAS8L,GAAItR,SAAUv0C,iBAAkB+H,cAGrC,SAASgE,uBAEL0P,KAAK8tC,SAAU,EAGf9tC,KAAK+tC,SAGL/tC,KAAKguC,UAAW,EAGhBhuC,KAAKiuC,aAAe,KAIpBjuC,KAAKkuC,aAAe,IAIpBluC,KAAKmuC,kBAAoB,IAIzBnuC,KAAKouC,kBAAoB,IAuK7B,OAnKA99C,qBAAqBlR,UAAUwF,QAAU,WACrC,OAAOob,KAAK+tC,OAIhBz9C,qBAAqBlR,UAAUivD,SAAW,WACtC,OAAOruC,KAAK8tC,SAIhBx9C,qBAAqBlR,UAAUkvD,UAAY,WACvC,OAAOtuC,KAAKguC,UAIhB19C,qBAAqBlR,UAAUsH,aAAe,WAC1C,OAAIsZ,KAAKguC,SAIEhuC,KAAKiuC,cAHZjuC,KAAKguC,UAAW,EACThuC,KAAKuuC,UAOpBj+C,qBAAqBlR,UAAUuH,YAAc,WACzCqZ,KAAKguC,UAAW,EACbxuD,QAAQU,SAAS8f,KAAKiuC,gBACrBnV,SAASj2C,OAAOmd,KAAKiuC,cACrBjuC,KAAKiuC,aAAe,OAK5B39C,qBAAqBlR,UAAUovD,UAAY,SAASxgD,YAChDA,WAAaA,aAAc,EAC3B,IAAIg9B,KAAOhrB,KACX,OAAOzb,iBAAiBkqD,WAAW,qBAAqB/qD,KACpD,SAASgrD,SAGL,OAFAlvD,QAAQyE,KAAKzE,QAAQgzC,SAASkc,SAAU1jB,KAAK+iB,OAC7C/iB,KAAK8iB,SAAU,EACR9iB,KAAK+iB,OACb,SAAS/sD,OACLgN,YACC1B,aAAa0B,WAAWhN,UAMxCsP,qBAAqBlR,UAAUuvD,WAAa,SAASzN,SACjD,IAAIlW,KAAOhrB,KAIX,OAHAA,KAAKiuC,aAAenV,SAAS,WACzB9N,KAAKujB,SACNrN,SACIlhC,KAAKiuC,cAIhB39C,qBAAqBlR,UAAUmvD,MAAQ,WACnC,IAAIvjB,KAAOhrB,KAGX,OAAIzb,iBAAiBo4C,cAId38B,KAAKwuC,WAAU,GAAO9qD,KAAK,SAASgrD,SACvC,IAAIE,YAAc5jB,KAAKkjB,aAQvB,OAPI1uD,QAAQU,SAASwuD,WACjBA,QAAQG,kBACPrvD,QAAQiR,QAAQi+C,QAAQh+C,YACI,IAA7Bg+C,QAAQh+C,UAAUlP,SAClBotD,YAAc5jB,KAAKojB,mBAEvBpjB,KAAK2jB,WAAWC,aACTF,SACR,SAAS1tD,OAER8Y,QAAQC,IAAI/Y,OACZgqC,KAAK2jB,WAAW3jB,KAAKmjB,qBAhBdnuC,KAAK2uC,WAAW3uC,KAAKmuC,oBAsBpC79C,qBAAqBlR,UAAUw7B,UAAY,WACvC,IAAIk0B,MAAQ1E,GAAG0E,QAIf,OAHA9uC,KAAKwuC,WAAU,GAAM9qD,KAAK,WACtBorD,MAAMC,YAEHD,MAAM3E,SAKjB75C,qBAAqBlR,UAAUkuD,iBAAmB,aAGlDh9C,qBAAqBlR,UAAU81C,WAAa,SAASjtC,QACjD,IAAI+iC,KAAOhrB,KACX,OAAOzb,iBAAiBkqD,WACpB,2BAA4BxmD,QAAQvE,KAChC,SAASgrD,SAGL,OAFAlvD,QAAQyE,KAAKzE,QAAQgzC,SAASkc,SAAU1jB,KAAK+iB,OAC7C/iB,KAAK8iB,SAAU,EACR9iB,KAAK+iB,SAK5Bz9C,qBAAqBlR,UAAUg2C,WAAa,SAASntC,QACjD,IAAI+iC,KAAOhrB,KACX,OAAOzb,iBAAiBkqD,WACpB,2BAA4BxmD,QAAQvE,KAChC,SAASgrD,SAGL,OAFAlvD,QAAQyE,KAAKzE,QAAQgzC,SAASkc,SAAU1jB,KAAK+iB,OAC7C/iB,KAAK8iB,SAAU,EACR9iB,KAAK+iB,SAK5Bz9C,qBAAqBlR,UAAUy2C,eAAiB,SAAS5tC,QACrD,IAAI+iC,KAAOhrB,KACX,OAAOzb,iBAAiBkqD,WACpB,gCAAiCxmD,QAAQvE,KACrC,SAASgrD,SAGL,OAFAlvD,QAAQyE,KAAKzE,QAAQgzC,SAASkc,SAAU1jB,KAAK+iB,OAC7C/iB,KAAK8iB,SAAU,EACR9iB,KAAK+iB,SAK5Bz9C,qBAAqBlR,UAAU42C,UAAY,SAAS/tC,QAChD,IAAI+iC,KAAOhrB,KACX,OAAOzb,iBAAiBkqD,WACpB,0BAA2BxmD,QAAQvE,KAC/B,SAASgrD,SAGL,OAFAlvD,QAAQyE,KAAKzE,QAAQgzC,SAASkc,SAAU1jB,KAAK+iB,OAC7C/iB,KAAK8iB,SAAU,EACR9iB,KAAK+iB,SAK5Bz9C,qBAAqBlR,UAAUmzC,MAAQ,SAASpL,QAC5C,OAAO5iC,iBAAiBkqD,WAAW,qBAAsBtnB,SAI7D72B,qBAAqBlR,UAAUo1C,YAAc,SAASvsC,QAClD,IAAI+iC,KAAOhrB,KACX,OAAOzb,iBAAiBkqD,WACpB,4BAA6BxmD,QAAQvE,KACjC,SAASgrD,SAGL,OAFAlvD,QAAQyE,KAAKzE,QAAQgzC,SAASkc,SAAU1jB,KAAK+iB,OAC7C/iB,KAAK8iB,SAAU,EACR9iB,KAAK+iB,SAIrB,IAAIz9C,4GC5MlB9Q,QAAQ1B,OAAO,QAAQwgD,QACnB,kBACC,KAAM,aAAc,mBAAoB,UAAW,SAC5C8L,GAAIthD,WAAYvE,iBAAkByqD,SAEtC,SAAS7lD,iBACL6lD,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,OACXjvC,KAAKkvC,SAAW,SAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,SAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAMlC,OAFAa,eAAe/J,UAAY,IAAI4vD,QAExB,IAAI7lD,0GCpBpB3J,QAAQ1B,OAAO,QAAQwgD,QACnB,sBACC,KAAM,aAAc,mBAAoB,eAAgB,kBACjD,SAAS8L,GAAIthD,WAAYvE,iBAAkB8qD,aAC3Cr6C,iBAEJ,SAASvG,qBACL4gD,aAAanxD,KAAK8hB,MAElBA,KAAKivC,IAAM,YACXjvC,KAAKkvC,SAAW,aAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,aAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAsBlC,OAnBAmG,mBAAmBrP,UAAY,IAAIiwD,aAEnC5gD,mBAAmBrP,UAAU6X,YAAc,SAASxX,YAChD,IAAIuX,YAOJ,OANAxX,QAAQ4D,QAAQ3D,WAAW6vD,YAAa,SAASC,YAC7C,IAAIr4C,QAAUlC,gBAAgB7S,gBAAgBotD,YAC3C/vD,QAAQU,SAASgX,UAChBF,SAASxU,KAAK0U,WAGfF,UAIXvI,mBAAmBrP,UAAU85C,iBAAmB,SAASrpC,aACrD,OAAOtL,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,gBAAiBr/C,cAGlC,IAAIpB,0GCrCnBjP,QAAQ1B,OAAO,QAAQwgD,QACnB,kBACC,KAAM,aAAc,mBAAoB,eAAgB,SACjD8L,GAAIthD,WAAYvE,iBAAkB8qD,cAEtC,SAAS1vD,iBACL0vD,aAAanxD,KAAK8hB,MAElBA,KAAKivC,IAAM,YACXjvC,KAAKkvC,SAAW,SAChBlvC,KAAKwvC,qBACDh2B,MAAS,KACT54B,QAAW,KACX+V,KAAQ,KACR9Q,KAAQ,SAAS1E,QACb,OAAOA,OAAO0E,KAAKvH,OAK3B,IAAI0sC,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,SAAU,SAASziD,OAAQpE,MACzD0iC,KAAKokB,SAAS1iD,OAAQpE,QAsC9B,OAlCA3I,eAAeP,UAAY,IAAIiwD,aAG/B1vD,eAAeP,UAAUqE,OAAS,SAAS8R,MAIvC,OAAOhR,iBAAiBkqD,WAAW,gBAAiBl5C,OAIxD5V,eAAeP,UAAUkL,gBAAkB,SAASrC,QAChD,IAAI+iC,KAAOhrB,KACX,OAAOzb,iBAAiBkqD,WACpB,0BAA2BxmD,QAAQvE,KAAK,SAASvC,QAE7C,OADA6pC,KAAKykB,aAAatuD,QACXA,UAKnBxB,eAAeP,UAAU4c,cAAgB,SACrC7a,OAAQuL,OAAQyO,OAKhB,OAHI3b,QAAQU,SAASib,SACjBA,UAEG5W,iBAAiBkqD,WAAW,iBAC/Bh/C,UAAatO,OAAOsO,UACpB/C,OAAUA,OACVyO,MAASA,SAIV,IAAIxb,2GC7DnBH,QAAQ1B,OAAO,QAAQwgD,QACnB,uBACC,KAAM,aAAc,mBAAoB,UACzC,SAAS8L,GAAIthD,WAAYvE,iBAAkByqD,SAEvC,SAAS/qB,sBACL+qB,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,cAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,cAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAYlC,OARA27B,oBAAoB7kC,UAAY,IAAI4vD,QAGpC/qB,oBAAoB7kC,UAAUqE,OAAS,SAASuiC,SAC5C,OAAOzhC,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,UAAWlpB,SAAS,IAGrC,IAAI/B,+GCtBnBzkC,QAAQ1B,OAAO,QAAQwgD,QACnB,sBACC,KAAM,aAAc,mBAAoB,iBACzC,SAAS8L,GAAIthD,WAAYvE,iBAAkBmrD,gBAEvC,SAASzmD,qBACLymD,eAAexxD,KAAK8hB,MAEpBA,KAAKivC,IAAM,aACXjvC,KAAK2vC,UAAY,aACjB3vC,KAAKkvC,SAAW,YAIhBlvC,KAAKouC,kBAAoB,IAK7B,OAFAnlD,mBAAmB7J,UAAY,IAAIswD,eAE5B,IAAIzmD,0GCxBnBzJ,QAAQ1B,OAAO,QAAQwgD,QACnB,kBACC,KAAM,aAAc,mBAAoB,UAAW,SAC5C8L,GAAIthD,WAAYvE,iBAAkByqD,SAEtC,SAASnvD,iBACLmvD,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,SAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,SAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAyDlC,OArDAzI,eAAeT,UAAY,IAAI4vD,QAG/BnvD,eAAeT,UAAUqE,OAAS,SAAStD,QAIvC,OAAOoE,iBAAiBkqD,WAAW,gBAAiBtuD,SAIxDN,eAAeT,UAAUqO,aAAe,SAAStN,QAC7C,OAAOoE,iBAAiBkqD,WAAW,gBAAiBtuD,SAIxDN,eAAeT,UAAUwwD,gBAAkB,SAASC,QAChD,MAAqB,MAAlBA,OAAOC,QAAoC,SAAlBD,OAAOC,QAC/BD,OAAOE,aAAeF,OAAOG,OAAO5kD,MAAM,SACnC7G,iBAAiBkqD,WACpB,4BAA6BoB,SAE1BtrD,iBAAiBkqD,WACpB,wBAAyBoB,SAIrChwD,eAAeT,UAAUqB,iBAAmB,WACxC,GAA0B,IAAvBuf,KAAKiwC,OAAOzuD,OACX,OAAO,KAEP,IAAIzD,EACJ,IAAIA,EAAE,EAAEA,EAAEiiB,KAAKiwC,OAAOzuD,OAAOzD,IACzB,GAAyB,IAAtBiiB,KAAKiwC,OAAOlyD,GAAGgK,GACd,OAAOiY,KAAKiwC,OAAOlyD,GAI/B,OAAOiiB,KAAKiwC,OAAO,IAGvBpwD,eAAeT,UAAU8L,gBAAkB,SAAS5M,MAE5C,IAAIP,EADR,GAAGiiB,KAAKiwC,OAAOzuD,OAAS,EAEpB,IAAIzD,EAAE,EAAEA,EAAEiiB,KAAKiwC,OAAOzuD,OAAOzD,IACzB,GAAGiiB,KAAKiwC,OAAOlyD,GAAGO,OAASA,KACvB,OAAO0hB,KAAKiwC,OAAOlyD,GAI/B,OAAO,MAGJ,IAAI8B,qGCzEnBL,QAAQ1B,OAAO,QAAQwgD,QACnB,wBACC,mBAAoB,UAAW,eAChC,SAAS/5C,iBAAkByqD,QAAS1iD,cAEhC,SAAS4jD,cAAcC,OAAQ7R,SAC3B0Q,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,QAChBlvC,KAAKowC,QAAUD,OACfnwC,KAAKqwC,SAAW/R,QAChBt+B,KAAKswC,SAAW,EAqDpB,SAAS/1B,uBAELva,KAAKuwC,aAGL,IAAIvlB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,QAAS,SAASziD,OAAQpE,MACxD0iC,KAAKokB,SAAS1iD,OAAQpE,QAsD9B,OA/GA4nD,cAAc9wD,UAAY,IAAI4vD,QAI9BkB,cAAc9wD,UAAUoxD,yBAA2B,WAC/C,OACIC,QAAWzwC,KAAKowC,QAChBM,SAAY1wC,KAAKswC,WAKzBJ,cAAc9wD,UAAU47B,QAAU,WAC9Bhb,KAAKqwC,SAASM,eAAe3wC,MAK1BA,KAAKquC,YACJ9pD,iBAAiBkqD,WAAW,eACxBgC,QAASzwC,KAAKowC,WAM1BF,cAAc9wD,UAAUu7B,eAAiB,WACrC,OAAO3a,KAAKswC,UAIhBJ,cAAc9wD,UAAU27B,gBAAkB,SAASL,MAC/C,IAAIsQ,KAAOhrB,KACP4wC,eAAiB,WACjB5lB,KAAKslB,SAAW51B,KAChBsQ,KAAKpQ,aAGN5a,KAAK6wC,YAGJ7wC,KAAK4a,YAAYl3B,KAAK,WAClBktD,mBAGJA,kBAiBRr2B,qBAAqBn7B,UAAU0xD,YAAc,SAASX,QAClD,IAAIpyD,EACJ,IAAIA,EAAI,EAAGA,EAAIiiB,KAAKuwC,UAAU/uD,OAAQzD,IAClC,GAAGiiB,KAAKuwC,UAAUxyD,GAAGqyD,UAAYD,OAC7B,OAAOnwC,KAAKuwC,UAAUxyD,GAG9B,OAAO,MAKXw8B,qBAAqBn7B,UAAUq7B,WAAa,SAAS01B,QACjD,IAAI1xB,QAAUze,KAAK8wC,YAAYX,QAC/B,OAAI3wD,QAAQU,SAASu+B,SAMdA,SAJHA,QAAU,IAAIyxB,cAAcC,OAAQnwC,MACpCA,KAAKuwC,UAAU/tD,KAAKi8B,SACbA,UAMflE,qBAAqBn7B,UAAUuxD,eAAiB,SAASlyB,SACrD,IAAIz3B,IAAMgZ,KAAKuwC,UAAU7tD,QAAQ+7B,SAC9Bz3B,KAAO,GACNgZ,KAAKuwC,UAAU3tD,OAAOoE,IAAK,IAKnCuzB,qBAAqBn7B,UAAUgwD,SAAW,SAAS1iD,OAAQpE,MACvD,GAAc,WAAXoE,OAGClN,QAAQ4D,QAAQ4c,KAAKuwC,UAAW,SAAS9xB,SACrCA,QAAQ2wB,SAAS1iD,OAAQpE,aAE1B,GAAe,WAAXoE,QAAkC,WAAXA,OAAqB,CAGnD,IAAI+xB,QAAUze,KAAK8wC,YAAYxoD,KAAKmoD,SACjCjxD,QAAQU,SAASu+B,UAChBA,QAAQ2wB,SAAS1iD,OAAQpE,QAK9B,IAAIiyB,4GC7HnB/6B,QAAQ1B,OAAO,QAAQwgD,QACnB,kBACC,KAAM,aAAc,mBAAoB,UAAW,eACpD,SACA8L,GAAIthD,WAAYvE,iBAAkByqD,QAAS9lD,cAEvC,SAASqF,iBACLygD,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,SAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,SAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAiClC,OA7BAiG,eAAenP,UAAY,IAAI4vD,QAG/BzgD,eAAenP,UAAUuL,QAAU,SAASgE,QACxC,GAAInP,QAAQU,SAASyO,QAGrB,OAAGnP,QAAQyM,SAAS0C,OAAOrQ,MAChBqQ,OAAOrQ,KAEP0hB,KAAKkvC,SAAW,IAAMvgD,OAAOqR,KAAKivC,MAKjD1gD,eAAenP,UAAU6Q,aAAe,SAAStB,QAC7C,OAAOpK,iBAAiBkqD,WACpB,iBAAmB1mD,GAAM4G,OAAO5G,KAAM,IAI9CwG,eAAenP,UAAUqE,OAAS,SAASkL,QAIvC,OAAOpK,iBAAiBkqD,WAAW,gBAAiB9/C,SAIjD,IAAIJ,sGC7CnB/O,QAAQ1B,OAAO,QAAQwgD,QACnB,kBACC,KAAM,WAAY,mBAAoB,eACvC,SAAS8L,GAAItR,SAAUv0C,iBAAkB+H,cAGrC,SAAShI,iBAEL0b,KAAK+tC,OACDgD,iBACI3oD,OAAQ,0BACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,MAEjBC,gBACI9oD,OAAQ,yBACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,MAEjBE,2BACI/oD,OAAQ,oCACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,MAEjBG,yBACIhpD,OAAQ,kCACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,MAEjBI,oCACIjpD,OAAQ,6CACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,MAEjBtsD,eACIyD,OAAQ,wBACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,MAEjB7sB,qBACIh8B,OAAQ,8BACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,MAEjB5sB,oBACIj8B,OAAQ,6BACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,MAEjB3sB,uBACIl8B,OAAQ,gCACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,MAEjBpsD,aACIuD,OAAQ,sBACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,MAEjBK,iBACIlpD,OAAQ,0BACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,MAEjBnsD,wBACIsD,OAAQ,iCACRE,MAAQnC,KAAM,IACdmD,QAAQ,EACR0nD,WACAC,YAAa,KACbM,YAAa,SAASC,QAAS9C,SAC3B8C,QAAQrrD,KAAOuoD,UAGvB12C,QACI5P,OAAQ,iBACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,KACbQ,QAAS,SAASnpD,MACd,IAAIuS,SAAWvS,KAAKuS,SACpB,OAAQrb,QAAQgI,YAAYqT,WACJ,IAApBA,SAASrZ,QAEjB+vD,YAAa,SAASC,QAAS9C,SAC3BlvD,QAAQyE,KAAKyqD,QAAS8C,WAG9BE,cACItpD,OAAQ,uBACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,KACbM,YAAa,SAASC,QAAS9C,SAC3BlvD,QAAQyE,KAAKyqD,QAAS8C,WAG9BpqB,SACIh/B,OAAQ,kBACRE,MAAQnC,KAAM,MACdmD,QAAQ,EACR0nD,WACAC,YAAa,KACbM,YAAa,SAASC,QAAS9C,SAC3B8C,QAAQrrD,KAAOuoD,UAGvB3pD,aACIqD,OAAQ,sBACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,KACbM,YAAa,SAASC,QAAS9C,SAE3B,IAAI3wD,EAAGgzB,EAAG4gC,aAAcC,aACxB,IAAI7zD,EAAI,EAAGA,EAAI2wD,QAAQltD,OAAQzD,IAAK,CAChC4zD,aAAejD,QAAQ3wD,GACvB,IAAI8zD,SAAU,EACd,IAAI9gC,EAAI,EAAGA,EAAIygC,QAAQhwD,OAAQuvB,IAE3B,GADA6gC,aAAeJ,QAAQzgC,GACpB4gC,aAAarzD,OAASszD,aAAatzD,KAAM,CACxCuzD,SAAU,EACV,MAMLA,SACCL,QAAQhvD,KAAKmvD,cAMrB,IAAI5zD,EAAIyzD,QAAQhwD,OAAS,EAAGzD,GAAK,EAAGA,IAAK,CACrC6zD,aAAeJ,QAAQzzD,GACvB,IAAI0hB,OAAQ,EACZ,IAAIsR,EAAI,EAAGA,EAAI29B,QAAQltD,OAAQuvB,IAE3B,IADA4gC,aAAejD,QAAQ39B,IACPzyB,OAASszD,aAAatzD,KAAM,CACxCmhB,OAAQ,EACR,MAMJA,OACA+xC,QAAQ5uD,OAAO7E,EAAG,MAKlC+zD,iBACI1pD,OAAQ,0BACRE,QACAgB,QAAQ,EACR0nD,WACAC,YAAa,KACbM,YAAa,SAASC,QAAS9C,SAC3BlvD,QAAQyE,KAAKyqD,QAAS8C,YAOlCxxC,KAAKkuC,aAAe,IAIpBluC,KAAKmuC,kBAAoB,IAIzBnuC,KAAKouC,kBAAoB,IAIzBpuC,KAAK+xC,aAAc,EAGnB/xC,KAAKgyC,MAAQ,SAGbhyC,KAAKiyC,WA0LT,OAvLA3tD,eAAelF,UAAU8yD,iBAAmB,SAAS5zD,MACjD,IAAIgK,KAAO0X,KAAK+tC,MAAMzvD,MACtB,GAAGkB,QAAQgI,YAAYc,MACnB,MAAM,IAAIiC,MAAM,iBAAmBjM,MAEvC,OAAOgK,MAIXhE,eAAelF,UAAUwF,QAAU,SAAStG,MACxC,OAAO0hB,KAAKkyC,iBAAiB5zD,MAAMgK,MAIvChE,eAAelF,UAAUivD,SAAW,WAChC,IAAI/kD,QAAS,EAMb,OALA9J,QAAQ4D,QAAQ4c,KAAK+tC,MAAO,SAASzlD,MAC7BA,KAAKgB,SACLA,QAAS,KAGVA,QAIXhF,eAAelF,UAAU+yD,aAAe,SAAS7zD,MAC7C,OAAO0hB,KAAKkyC,iBAAiB5zD,MAAMgL,QAIvChF,eAAelF,UAAUkvD,UAAY,WACjC,IAAI0C,SAAU,EAMd,OALAxxD,QAAQ4D,QAAQ4c,KAAK+tC,MAAO,SAASzlD,MAC9BA,KAAK0oD,QAAQxvD,OAAS,IACrBwvD,SAAU,KAGXA,SAIX1sD,eAAelF,UAAUgzD,cAAgB,SAAS9zD,MAC9C,OAAO0hB,KAAKkyC,iBAAiB5zD,MAAM0yD,SAIvC1sD,eAAelF,UAAUsH,aAAe,SAAS+X,MAAOngB,MACpD,IAAIgK,KAAO0X,KAAKkyC,iBAAiB5zD,OAErB,IADFgK,KAAK0oD,QAAQtuD,QAAQ+b,SAE3BnW,KAAK0oD,QAAQxuD,KAAKic,OACS,IAAxBnW,KAAK0oD,QAAQxvD,QAGZwe,KAAKuuC,MAAMjmD,QAMvBhE,eAAelF,UAAUuH,YAAc,SAAS8X,MAAOngB,MACnD,IAAIgK,KAAO0X,KAAKkyC,iBAAiB5zD,MAC7B0I,IAAMsB,KAAK0oD,QAAQtuD,QAAQ+b,OAC5BzX,KAAO,GACNsB,KAAK0oD,QAAQpuD,OAAOoE,IAAK,GAEF,IAAxBsB,KAAK0oD,QAAQxvD,QACZhC,QAAQU,SAASoI,KAAK2oD,eACtBnY,SAASj2C,OAAOyF,KAAK2oD,aACrB3oD,KAAK2oD,YAAc,OAK3B3sD,eAAelF,UAAUovD,UAAY,SAASlmD,KAAM0F,YAChD,IAAIujD,YAAcjpD,KAAKipD,YAYvB,OAXAvjD,WAAaA,aAAc,EAIxBxO,QAAQgI,YAAY+pD,eACnBA,YAAc,SAASC,QAAS9C,SAC5B8C,QAAQhwD,OAAS,EACjBgwD,QAAQhvD,KAAK6vD,MAAMb,QAAS9C,WAI7BnqD,iBAAiBkqD,WAAWnmD,KAAKF,QAAQ1E,KAC5C,SAASgrD,SAGL,OAFA6C,YAAYjpD,KAAKA,KAAMomD,SACvBpmD,KAAKgB,QAAS,EACPhB,KAAKA,MACb,SAAStH,OAIR,OAHGgN,YACC1B,aAAa0B,WAAWhN,OAErBA,SAInBsD,eAAelF,UAAUuvD,WAAa,SAASrmD,KAAM44C,SACjD,IAAIlW,KAAOhrB,KACX1X,KAAK2oD,YAAcnY,SAAS,WACxB9N,KAAKujB,MAAMjmD,OACZ44C,UAIP58C,eAAelF,UAAUmvD,MAAQ,SAASjmD,MACtC,IAAI0iC,KAAOhrB,KACPyxC,QAAUnpD,KAAKmpD,QAWnB,GAPGjyD,QAAQgI,YAAYiqD,WACnBA,QAAU,SAASnpD,MACf,OAAuB,IAAhBA,KAAK9G,SAKhB+C,iBAAiBo4C,cAKrB,OAAO38B,KAAKwuC,UAAUlmD,MAAM,GAAO5E,KAAK,SAASgrD,SAC7C,IAAIE,YAAc5jB,KAAKkjB,aAKvB,OAJGuD,QAAQnpD,KAAKA,QACZsmD,YAAc5jB,KAAKojB,mBAEvBpjB,KAAK2jB,WAAWrmD,KAAMsmD,aACfF,SACR,SAAS1tD,OAER8Y,QAAQC,IAAI/Y,OACZgqC,KAAK2jB,WAAWrmD,KAAM0iC,KAAKmjB,qBAd3BnuC,KAAK2uC,WAAWrmD,KAAM0X,KAAKmuC,oBAoBnC7pD,eAAelF,UAAUw7B,UAAY,WACjC,IAAIoQ,KAAOhrB,KACP8uC,MAAQ1E,GAAG0E,QACXwD,aAAe7zD,OAAOiR,KAAKsQ,KAAK+tC,OAAOvsD,OAc3C,OANAhC,QAAQ4D,QAAQ4c,KAAK+tC,MAAO,SAASzlD,MACjC0iC,KAAKwjB,UAAUlmD,MAAM,GAAM5E,KAAK,WANZ,IADpB4uD,cAAgB,IAEZxD,MAAMC,cAUPD,MAAM3E,SAIjB7lD,eAAelF,UAAUkuD,iBAAmB,WACxC,IAAIttC,KAAK+xC,YAAa,CAClB/xC,KAAK+xC,aAAc,EACnB,IAAI/mB,KAAOhrB,KACXA,KAAKuyC,YAAc,WACfvnB,KAAKpQ,aAETr2B,iBAAiBiuD,gBAAgB,OAAQxyC,KAAKuyC,eAKtDjuD,eAAelF,UAAUqzD,kBAAoB,WACtCzyC,KAAK+xC,cACJxtD,iBAAiBmuD,kBAAkB,OAAQ1yC,KAAKuyC,aAChDvyC,KAAKuyC,YAAc,KACnBvyC,KAAK+xC,aAAc,IAIpB,IAAIztD,uGCjZnB9E,QAAQ1B,OAAO,QAAQwgD,QACnB,mBACC,KAAM,aAAc,mBAAoB,UACzC,SAAS8L,GAAIthD,WAAYvE,iBAAkByqD,SAEvC,SAAS/R,kBACL+R,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,UAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,UAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAMlC,OAFA20C,gBAAgB79C,UAAY,IAAI4vD,QAEzB,IAAI/R,wGCtBnBz9C,QAAQ1B,OAAO,QAAQwgD,QACnB,mBACC,KAAM,aAAc,mBAAoB,eAAgB,SACjD8L,GAAIthD,WAAYvE,iBAAkB8qD,cAEtC,SAAShrD,kBACLgrD,aAAanxD,KAAK8hB,MAElBA,KAAKivC,IAAM,YACXjvC,KAAKkvC,SAAW,UAEhBlvC,KAAKwvC,qBACD1pD,aAAgB,KAChBuY,OAAU,KACVmb,MAAS,KACT7iB,KAAQ,KACR+qB,IAAO,SAASz8B,SACZ,YAAwB0hB,IAAhB1hB,QAAQy8B,IAAqB,GAAIz8B,QAAQy8B,IAAIpjC,MAEzDuH,KAAQ,SAASZ,SACb,OAAOA,QAAQY,KAAKvH,MAExBsC,QAAW,KACX2S,QAAW,KACXE,OAAU,KACVk/C,aAAgB,KAChBt6C,QAAW,SAASpT,SAChB,OAA2B,IAAxBA,QAAQyW,aAA6C,IAAxBzW,QAAQyW,YAC7BzW,QAAQmT,QAAU,IAAMnT,QAAQmW,cAEhC,KAMnB,IAAI4vB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,UAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QA4BlC,OAxBAjE,gBAAgBjF,UAAY,IAAIiwD,aAEhChrD,gBAAgBjF,UAAUk7B,uBACtB,SAASr1B,QAAS4nB,OAAQF,YAAagB,eACnC,IAAIvlB,OAAS4X,KAAKkvC,SAAW,iBACzBjnD,QACAwH,UAAWxK,QAAQwK,UACnBod,OAAQA,OACRF,YAAaA,YACbgB,cAAeA,eAEnB,OAAOppB,iBAAiBkqD,WAAWrmD,OAAQH,SAGnD5D,gBAAgBjF,UAAU8yB,yBACtB,SAASjtB,QAAS0nB,aACd,IAAIvkB,OAAS4X,KAAKkvC,SAAW,mBACzBjnD,QACAwH,UAAWxK,QAAQwK,UACnBkd,YAAaA,aAEjB,OAAOpoB,iBAAiBkqD,WAAWrmD,OAAQH,SAG5C,IAAI5D,4GClEnB7E,QAAQ1B,OAAO,QAAQwgD,QACnB,6BAA8B,mBAAoB,UAClD,SAAS/5C,iBAAkByqD,SAEvB,SAAS4D,mBAAmBr9C,KAAM+oC,SAC9B0Q,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,aAChBlvC,KAAK6yC,MAAQt9C,KACbyK,KAAKqwC,SAAW/R,QAGhBt+B,KAAK6b,wBAEG36B,MAAO,KACP4xD,cAAe,EACf/2B,aAGA76B,MAAO,MACP4xD,cAAe,EACf/2B,aAGA76B,MAAO,SACP4xD,cAAe,EACf/2B,aAGA76B,MAAO,UACP4xD,cAAe,EACf/2B,aAGR/b,KAAK8b,kBAEG56B,MAAO,MACP4xD,cAAe,EACf/2B,aAGA76B,MAAO,SACP4xD,cAAe,EACf/2B,aAGA76B,MAAO,UACP4xD,cAAe,EACf/2B,aAGA76B,MAAO,gBACP4xD,cAAe,EACf/2B,aAGR/b,KAAK2b,wBAKL,IAAIqP,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,aAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QA2MlC,SAAS2yB,4BAELjb,KAAKuwC,aA2CT,OApPAqC,mBAAmBxzD,UAAY,IAAI4vD,QAEnC4D,mBAAmBxzD,UAAU2zD,mBAAqB,SAASxnC,MACvD,IAAIynC,WAAa,GAUjB,MATkB,KAAfznC,KAAK9mB,QACJuuD,YAAc,UAAYznC,KAAK9mB,OAEhB,KAAhB8mB,KAAK0D,SACc,KAAf+jC,aACCA,YAAc,MAElBA,YAAc,WAAaznC,KAAK0D,QAElB,KAAf+jC,WACQ,QAAUznC,KAAKjtB,KAAO,KAAO00D,WAAa,IAE1C,QAAUznC,KAAKjtB,MAI9Bs0D,mBAAmBxzD,UAAU6zD,cAAgB,SACzCC,SAAUC,SACV3zD,QAAQ4D,QAAQ+vD,QAAS,SAASp0D,MAAO4Q,KAClCujD,SAASvjD,OAAS5Q,OAAiB,oBAAR4Q,KACnB,oBAARA,KAAqC,iBAARA,KACrB,cAARA,MACCujD,SAASvjD,KAAO5Q,UAK5B6zD,mBAAmBxzD,UAAUg0D,cAAgB,SAASr3B,QAAS9d,QAC3D,IAAIlgB,EACJ,IAAIA,EAAI,EAAGA,EAAIg+B,QAAQv6B,OAAQzD,IAC3B,GAAGg+B,QAAQh+B,GAAGO,OAAS2f,OAAO3f,KAO1B,OALA2f,OAAOoQ,UAAY0N,QAAQh+B,GAAGswB,UAC9BpQ,OAAOqe,gBAAkBP,QAAQh+B,GAAGu+B,gBACpCre,OAAOue,gBAAkBT,QAAQh+B,GAAGy+B,gBACpCve,OAAOo1C,aAAet3B,QAAQh+B,GAAGs1D,kBACjC7zD,QAAQyE,KAAKga,OAAQ8d,QAAQh+B,IAKrC,IAAIA,EAAI,EAAGA,EAAIg+B,QAAQv6B,OAAQzD,IAC3B,GAAGg+B,QAAQh+B,GAAGO,KAAO2f,OAAO3f,KAExB,YADAy9B,QAAQn5B,OAAO7E,EAAG,EAAGkgB,QAI7B8d,QAAQv5B,KAAKyb,SAGjB20C,mBAAmBxzD,UAAUk0D,aAAe,SAASr1C,QACjD,IAAI8d,QAmBAh+B,EAbJ,GALAkgB,OAAOqe,iBAAkB,EACzBre,OAAOue,iBAAkB,EACzBve,OAAOo1C,cAAe,EACtBp1C,OAAOs1C,eAAiB,UAEE,IAAvBt1C,OAAOu1C,YACNz3B,QAAU/b,KAAK6b,0BACZ,IAA0B,IAAvB5d,OAAOu1C,YAIb,YADAxzC,KAAKozC,cAAcpzC,KAAK2b,qBAAsB1d,QAK9C8d,QAAU/b,KAAK8b,gBACf7d,OAAOs1C,eAAiB,QAK5B,IAWQhoC,KAAMkoC,QAXVC,sBAAwB33B,QAAQ,GACpC,IAAIh+B,EAAI,EAAGA,EAAIg+B,QAAQv6B,OAAQzD,IAC3B,GAAGg+B,QAAQh+B,GAAG+0D,gBAAkB70C,OAAO60C,cAAe,CAClDY,sBAAwB33B,QAAQh+B,GAAGg+B,QACnC,MAIR,GAA4B,IAAzB9d,OAAO60C,eACyB,OAAhC70C,OAAO01C,sBAKN,IAAI51D,EAAI,EAAGA,EAAIiiB,KAAK6yC,MAAMznC,MAAM5pB,OAAQzD,IAEpC,IADAwtB,KAAOvL,KAAK6yC,MAAMznC,MAAMrtB,IAChBgK,KAAOkW,OAAO01C,qBAAsB,CACxCF,QAAUzzC,KAAK+yC,mBAAmBxnC,MAC9B/rB,QAAQiR,QACRijD,sBAAsBD,YAClBC,sBAAsBD,aAE9BzzC,KAAKozC,cACDM,sBAAsBD,SAAUx1C,QACpC,YAMJze,QAAQiR,QAAQijD,sBAAA,QAChBA,sBAAA,SAEJ1zC,KAAKozC,cAAcM,sBAAA,KAA6Bz1C,SAIxD20C,mBAAmBxzD,UAAU4M,YAAc,SAASiS,QAChD,IAAIjX,IAAMgZ,KAAK4zC,gBAAgB5zC,KAAKiwC,OAAQhyC,OAAOlW,IAChDf,KAAO,GACNgZ,KAAK6zC,gBAAgB7zC,KAAKiwC,OAAOjpD,KAAM,UAE3CgZ,KAAK8zC,yBAAyB9zC,KAAKiwC,OAAQhyC,OAAOlW,IAClDiY,KAAK8zC,yBAAyB9zC,KAAK+zC,eAAgB91C,OAAOlW,IAE1D,IAAIijC,KAAOhrB,KACXxgB,QAAQ4D,QAAQ4c,KAAK6b,sBAAuB,SAASm4B,SACjDx0D,QAAQ4D,QAAQ4wD,QAAQj4B,QAAS,SAASA,QAAS03B,SAC/CzoB,KAAK8oB,yBAAyB/3B,QAAS9d,OAAOlW,IACxB,IAAnBg0B,QAAQv6B,eAEAwyD,QAAQj4B,QAAQ03B,aAInCj0D,QAAQ4D,QAAQ4c,KAAK8b,gBAAiB,SAASk4B,SAC3Cx0D,QAAQ4D,QAAQ4wD,QAAQj4B,QAAS,SAASA,QAAS03B,SAC/CzoB,KAAK8oB,yBAAyB/3B,QAAS9d,OAAOlW,IACxB,IAAnBg0B,QAAQv6B,eAEAwyD,QAAQj4B,QAAQ03B,aAInCzzC,KAAK8zC,yBAAyB9zC,KAAK2b,qBAAsB1d,OAAOlW,KAKpE6qD,mBAAmBxzD,UAAUoxD,yBAA2B,WACpD,IAAIyD,KACAxkD,UAAauQ,KAAK6yC,MAAMpjD,WAa5B,MAVkB,YAAfuQ,KAAKk0C,OACJD,IAAIE,cAAe,EACnBF,IAAIT,YAAc,GACE,YAAfxzC,KAAKk0C,MACVD,IAAIT,YAAc,EACE,kBAAfxzC,KAAKk0C,MACVD,IAAIT,YAAc,EACE,SAAfxzC,KAAKk0C,QACVD,IAAIT,YAAc,GAEfS,KAIXrB,mBAAmBxzD,UAAU47B,QAAU,WAKnC,GAJAhb,KAAKqwC,SAASM,eAAe3wC,MAI1BA,KAAKquC,WAAY,CAChB,IAAIjmD,OAAS4X,KAAKkvC,SAAW,SAC7B3qD,iBAAiBkqD,WAAWrmD,QACxBqH,UAAWuQ,KAAK6yC,MAAMpjD,cAMlCmjD,mBAAmBxzD,UAAUi8B,gBAAkB,SAC3C+4B,UAAWC,WACX,IAAIjsD,OAAS4X,KAAKkvC,SAAW,mBACzBjnD,QACAF,GAAIqsD,UACJC,UAAWA,WAEf,OAAO9vD,iBAAiBkqD,WAAWrmD,OAAQH,SAI/C2qD,mBAAmBxzD,UAAUs9B,YAAc,SAAS03B,WAChD,IAAIhsD,OAAS4X,KAAKkvC,SAAW,eACzBjnD,QACAF,GAAIqsD,WAER,OAAO7vD,iBAAiBkqD,WAAWrmD,OAAQH,SAU/CgzB,0BAA0B77B,UAAU0xD,YAAc,SAASv7C,MACvD,IAAIxX,EACJ,IAAIA,EAAI,EAAGA,EAAIiiB,KAAKuwC,UAAU/uD,OAAQzD,IAClC,GAAGiiB,KAAKuwC,UAAUxyD,GAAG80D,MAAMpjD,YAAc8F,KAAK9F,UAC1C,OAAOuQ,KAAKuwC,UAAUxyD,GAG9B,OAAO,MAKXk9B,0BAA0B77B,UAAUq7B,WAAa,SAC7CllB,KAAM2C,MACN,IAAIumB,QAAUze,KAAK8wC,YAAYv7C,MAc/B,OAbI/V,QAAQU,SAASu+B,WAEjBA,QAAU,IAAIm0B,mBAAmBr9C,KAAMyK,MACvCA,KAAKuwC,UAAU/tD,KAAKi8B,UAExBA,QAAQy1B,MAAQh8C,KAEZumB,QAAQ1C,QADA,kBAAT7jB,KACmBumB,QAAQ5C,sBACZ,SAAT3jB,KACaumB,QAAQ9C,qBAER8C,QAAQ3C,gBAEvB2C,SAIXxD,0BAA0B77B,UAAUuxD,eAAiB,SAASlyB,SAC1D,IAAIz3B,IAAMgZ,KAAKuwC,UAAU7tD,QAAQ+7B,SAC9Bz3B,KAAO,GACNgZ,KAAKuwC,UAAU3tD,OAAOoE,IAAK,IAI5B,IAAIi0B,+GCxTnBz7B,QAAQ1B,OAAO,QAAQoZ,QACnB,gBACC,KAAM,aAAc,WAAY,mBAAoB,UAAW,SACxDkzC,GAAIthD,WAAYgwC,SAAUv0C,iBAAkByqD,SAEhD,SAASK,eACLL,QAAQ9wD,KAAK8hB,MA8UjB,OA3UAqvC,aAAajwD,UAAY,IAAI4vD,QAG7BK,aAAajwD,UAAUqE,OAAS,SAAS8R,MAIrC,OAAOhR,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,UAAW35C,OAInC85C,aAAajwD,UAAU4c,cAAgB,SACnCzG,KAAM7I,OAAQyO,OAId,OAHI3b,QAAQU,SAASib,SACjBA,UAEG5W,iBAAiBkqD,WAAWzuC,KAAKkvC,SAAW,WAC/Cz/C,UAAa8F,KAAK9F,UAClB/C,OAAUA,OACVyO,MAASA,SAKjBk0C,aAAajwD,UAAUya,gBAAkB,SAAStE,MAC9C,OAAOhR,iBAAiBkqD,WAAWzuC,KAAKkvC,SAAW,gBAC/Cz/C,UAAa8F,KAAK9F,YACf/L,KAAK,SAAS4wD,OAEb,OADA/+C,KAAK6E,YAAck6C,MACZA,OACR,SAAStzD,OAQR,OAPAuU,KAAK6E,YAAc,QAInBN,QAAQC,IAAI/Y,OAGL,WAKnBquD,aAAajwD,UAAU6rB,wBAA0B,SAC7C1V,KAAMtN,QAKF,OAJIzI,QAAQU,SAAS+H,UACjBA,WAEJA,OAAOwH,UAAY8F,KAAK9F,UACjBlL,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,mBAAoBjnD,SAIhDonD,aAAajwD,UAAU2pB,oBAAsB,SACzCxT,KAAMtN,QAKF,OAJIzI,QAAQU,SAAS+H,UACjBA,WAEJA,OAAOwH,UAAY8F,KAAK9F,UACjBlL,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,eAAgBjnD,SAI5ConD,aAAajwD,UAAU8qB,oBAAsB,SACzC3U,KAAMtN,QAKF,OAJIzI,QAAQU,SAAS+H,UACjBA,WAEJA,OAAOwH,UAAY8F,KAAK9F,UACjBlL,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,eAAgBjnD,SAI5ConD,aAAajwD,UAAUsrB,sBAAwB,SAC3CnV,KAAMtN,QAKF,OAJIzI,QAAQU,SAAS+H,UACjBA,WAEJA,OAAOwH,UAAY8F,KAAK9F,UACjBlL,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,iBAAkBjnD,SAI9ConD,aAAajwD,UAAUuoB,gBAAkB,SACrCpS,KAAMkS,aAAcxf,QAMhB,OALIzI,QAAQU,SAAS+H,UACjBA,WAEJA,OAAOwH,UAAY8F,KAAK9F,UACxBxH,OAAOwf,aAAeA,aACfljB,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,oBAAqBjnD,SAIjDonD,aAAajwD,UAAUm1D,oBAAsB,SACzCtsD,QACI,OAAO1D,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,oBAAqBjnD,SAIjDonD,aAAajwD,UAAUuD,gBAAkB,SACrC4S,KAAMkS,cACF,IAAIxf,QACAwH,UAAW8F,KAAK9F,UAChBgY,aAAcA,cAElB,OAAOljB,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,oBAAqBjnD,SAIjDonD,aAAajwD,UAAUyoB,WAAa,SAChCtS,KAAMkS,aAAcxf,QAMhB,OALIzI,QAAQU,SAAS+H,UACjBA,WAEJA,OAAOwH,UAAY8F,KAAK9F,UACxBxH,OAAOwf,aAAeA,aACfljB,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,eAAgBjnD,SAI5ConD,aAAajwD,UAAUopB,aAAe,SAClCjT,KAAMkS,aAAc/H,SAChB,IAAIzX,QACAwH,UAAW8F,KAAK9F,UAChBgY,aAAcA,aACd/H,QAASA,SAEb,OAAOnb,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,iBAAkBjnD,SAI9ConD,aAAajwD,UAAU0yB,iBAAmB,SACtCvc,KAAM4X,SAAUC,aAAcP,OAAQF,YAAagB,cACnDhX,MACI,IACIvO,OAAS4X,KAAKkvC,SAAW,qBACzBjnD,QACAwH,UAAW8F,KAAK9F,UAChB0d,SAAUA,SACVC,aAAcA,aACdP,OAAQA,OACRF,YAAaA,YACbgB,cAAeA,cACfhX,KAAMA,MAEV,OAAOpS,iBAAiBkqD,WAAWrmD,OAAQH,SAInDonD,aAAajwD,UAAUq1B,WAAa,SAChClf,KAAM4X,UACF,IACI/kB,OAAS4X,KAAKkvC,SAAW,eACzBjnD,QACAwH,UAAW8F,KAAK9F,UAChB0d,SAAUA,UAEd,OAAO5oB,iBAAiBkqD,WAAWrmD,OAAQH,SAInDonD,aAAajwD,UAAU+yB,gBAAkB,SACrC5c,KAAM6X,cACF,IACIhlB,OAAS4X,KAAKkvC,SAAW,oBACzBjnD,QACAwH,UAAW8F,KAAK9F,UAChB2d,aAAcA,cAElB,OAAO7oB,iBAAiBkqD,WAAWrmD,OAAQH,SAInDonD,aAAajwD,UAAUo1B,kBAAoB,SACvCjf,KAAMi/C,iBACF,IACIpsD,OAAS4X,KAAKkvC,SAAW,uBACzBjnD,QACAwH,UAAW8F,KAAK9F,UAChB+kD,gBAAiBA,iBAErB,OAAOjwD,iBAAiBkqD,WAAWrmD,OAAQH,SAInDonD,aAAajwD,UAAU82B,eAAiB,SACpC3gB,KAAM2X,cACF,IACI9kB,OAAS4X,KAAKkvC,SAAW,oBACzBjnD,QACAwH,UAAW8F,KAAK9F,UAChByd,aAAcA,cAElB,OAAO3oB,iBAAiBkqD,WAAWrmD,OAAQH,SAInDonD,aAAajwD,UAAUgzB,iBAAmB,SACtC7c,KAAMk/C,eAAgBrnC,aAAcQ,eAChC,IACIxlB,OAAS4X,KAAKkvC,SAAW,qBACzBjnD,QACAwH,UAAW8F,KAAK9F,UAChBglD,eAAgBA,eAChBrnC,aAAcA,aACdQ,cAAeA,eAEnB,OAAOrpB,iBAAiBkqD,WAAWrmD,OAAQH,SAInDonD,aAAajwD,UAAUo2B,gBAAkB,SACrCjgB,KAAM4X,SAAUyH,KAAM3sB,QACdzI,QAAQU,SAAS+H,UACjBA,WAEJ,IACIG,OAAS4X,KAAKkvC,SAAW,oBAI7B,OAHAjnD,OAAOwH,UAAY8F,KAAK9F,UACxBxH,OAAOklB,SAAWA,SAClBllB,OAAOysD,eAAiB9/B,KACjBrwB,iBAAiBkqD,WAAWrmD,OAAQH,SAInDonD,aAAajwD,UAAUg3B,eAAiB,SACpC7gB,KAAM4X,SAAUC,cACZ,IACIhlB,OAAS4X,KAAKkvC,SAAW,oBACzBjnD,QACAwH,UAAW8F,KAAK9F,UAChB0d,SAAUA,SACVC,aAAcA,cAElB,OAAO7oB,iBAAiBkqD,WAAWrmD,OAAQH,SAInDonD,aAAajwD,UAAUm3B,aAAe,SAClChhB,KAAMtN,QAKF,OAJIzI,QAAQU,SAAS+H,UACjBA,WAEJA,OAAOwH,UAAY8F,KAAK9F,UACjBlL,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,iBAAkBjnD,SAI9ConD,aAAajwD,UAAU43B,WAAa,SAChCzhB,KAAMtN,QAKF,OAJIzI,QAAQU,SAAS+H,UACjBA,WAEJA,OAAOwH,UAAY8F,KAAK9F,UACjBlL,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,eAAgBjnD,SAI5ConD,aAAajwD,UAAUq5B,kBAAoB,SACvCljB,KAAMtN,QAKF,OAJIzI,QAAQU,SAAS+H,UACjBA,WAEJA,OAAOwH,UAAY8F,KAAK9F,UACjBlL,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,uBAAwBjnD,SAIpDonD,aAAajwD,UAAUi6B,oBAAsB,SACzC9jB,KAAMi/C,gBAAiBl2D,KAAMs2B,KAAM3sB,QAC3BzI,QAAQU,SAAS+H,UACjBA,WAEJ,IACIG,OAAS4X,KAAKkvC,SAAW,yBAK7B,OAJAjnD,OAAOwH,UAAY8F,KAAK9F,UACxBxH,OAAOusD,gBAAkBA,gBACzBvsD,OAAO3J,KAAOA,KACd2J,OAAO2sB,KAAOA,KACPrwB,iBAAiBkqD,WAAWrmD,OAAQH,SAInDonD,aAAajwD,UAAUk1B,WAAa,SAChC/e,KAAM4X,SAAUllB,QAMZ,OALIzI,QAAQU,SAAS+H,UACjBA,WAEJA,OAAOwH,UAAY8F,KAAK9F,UACxBxH,OAAOklB,SAAWA,SACX5oB,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,eAAgBjnD,SAI5ConD,aAAajwD,UAAUgyB,YAAc,SACjC7b,KAAM4X,UACF,IAAIllB,QACAwH,UAAW8F,KAAK9F,UAChB0d,SAAUA,UAEd,OAAO5oB,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,iBAAkBjnD,SAG9ConD,aAAajwD,UAAU+8B,cAAgB,SAAS5mB,MAC5C,OAAOhR,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,oBACfz/C,UAAa8F,KAAK9F,aAG3B4/C,aAAajwD,UAAUg9B,eAAiB,SAAS7mB,MAC7C,OAAOhR,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,qBACfz/C,UAAa8F,KAAK9F,aAGpB4/C,0GCrVf7vD,QAAQ1B,OAAO,QAAQwgD,QACnB,wBACC,KAAM,aAAc,mBAAoB,UACxC,SAAS8L,GAAIthD,WAAYvE,iBAAkByqD,SAExC,SAASjJ,uBACLiJ,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,eAGhB3qD,iBAAiB4qD,iBACb,eAAgB3vD,QAAQsiC,KAAK9hB,KAAMA,KAAKovC,WAShD,OANArJ,qBAAqB3mD,UAAY,IAAI4vD,QACrCjJ,qBAAqB3mD,UAAU6mD,QAAU,SAASU,cAC9C,OAAOpiD,iBAAiBkqD,WACpB,wBAAyB1mD,GAAI4+C,aAAa5+C,MAG3C,IAAIg+C,wHCtBnBvmD,QAAQ1B,OAAO,QAAQwgD,QACnB,8BACC,KAAM,aAAc,mBAAoB,UACzC,SAAS8L,GAAIthD,WAAYvE,iBAAkByqD,SAEvC,SAASr+C,6BACLq+C,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,oBAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,oBAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAYlC,OARAqI,2BAA2BvR,UAAY,IAAI4vD,QAG3Cr+C,2BAA2BvR,UAAUqE,OAAS,SAASwhC,YACnD,OAAO1gC,iBAAiBkqD,WACpBzuC,KAAKkvC,SAAW,UAAWjqB,YAAY,IAGxC,IAAIt0B,+GC3BnBnR,QAAQ1B,OAAO,QAAQoZ,QACnB,eACC,KAAM,aAAc,WAAY,mBAAoB,UAAW,SACxDkzC,GAAIthD,WAAYgwC,SAAUv0C,iBAAkByqD,SAEhD,SAASvtB,cACLutB,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,MAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,MAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QA0BlC,OAtBAm5B,YAAYriC,UAAY,IAAI4vD,QAG5BvtB,YAAYriC,UAAU2iC,QAAU,SAASL,KACrC,IAAIsJ,KAAOhrB,KACX,OAAOzb,iBAAiBkqD,WAAW,cAAe/sB,KAAKh+B,KACnD,SAASg+B,KAEL,OADAsJ,KAAKykB,aAAa/tB,KACXA,OAKnBD,YAAYriC,UAAU8iC,QAAU,SAASj6B,QACrC,IAAI+iC,KAAOhrB,KACX,OAAOzb,iBAAiBkqD,WAAW,cAAexmD,QAAQvE,KACtD,SAASg+B,KAEL,OADAsJ,KAAKykB,aAAa/tB,KACXA,OAIZ,IAAID,kGC1CnBjiC,QAAQ1B,OAAO,QAAQwgD,QACnB,oBACC,KAAM,aAAc,WAAY,UAAW,WAAY,SACpD8L,GAAIthD,WAAYgwC,SAAUjwC,QAAS8rD,UAGnC,IAAIC,iBACS,EADTA,kBAEU,EAFVA,gBAGQ,EAIRC,sBACS,EADTA,oBAEO,EAIX,SAAStwD,mBACLyb,KAAK80C,aACL90C,KAAK+0C,YACL/0C,KAAKg1C,UAAY,EACjBh1C,KAAK3X,IAAM,KACX2X,KAAKi1C,UAAY,KACjBj1C,KAAKs8B,WAAY,EACjBt8B,KAAKk1C,eAAgB,EACrBl1C,KAAKm1C,aAAe,IACpBn1C,KAAKhf,MAAQ,KAKbgf,KAAKo1C,oBAAsB,KAI3Bp1C,KAAKq1C,UACD3xB,QACA1iC,SACA8qD,UAOJ9rC,KAAKs1C,aAgRT,OA5QA/wD,iBAAiBnF,UAAUm2D,aAAe,WAEtC,OADAv1C,KAAKg1C,WAAa,EACXh1C,KAAKg1C,WAIhBzwD,iBAAiBnF,UAAUozD,gBAAkB,SAAUl0D,KAAMk3D,MACzD,IAAIh2D,QAAQomB,UAAU5F,KAAKq1C,SAAS/2D,OAChC,MAAM,IAAIiM,MAAM,oBAAsBjM,MAE1C,IAAIkB,QAAQsgB,WAAW01C,MACnB,MAAM,IAAIjrD,MAAM,8CAEpByV,KAAKq1C,SAAS/2D,MAAMkE,KAAKgzD,OAI7BjxD,iBAAiBnF,UAAUszD,kBAAoB,SAAUp0D,KAAMk3D,MAC3D,IAAIh2D,QAAQomB,UAAU5F,KAAKq1C,SAAS/2D,OAChC,MAAM,IAAIiM,MAAM,oBAAsBjM,MAE1C,IAAI0I,IAAMgZ,KAAKq1C,SAAS/2D,MAAMoE,QAAQ8yD,MACnCxuD,KAAO,GACNgZ,KAAKq1C,SAAS/2D,MAAMsE,OAAOoE,IAAK,IAKxCzC,iBAAiBnF,UAAU+vD,iBAAmB,SAAS7wD,KAAMk3D,MACzD,IAAIh2D,QAAQsgB,WAAW01C,MACnB,MAAM,IAAIjrD,MAAM,+CAEjB/K,QAAQgI,YAAYwY,KAAKs1C,UAAUh3D,SAClC0hB,KAAKs1C,UAAUh3D,UAEnB0hB,KAAKs1C,UAAUh3D,MAAMkE,KAAKgzD,OAI9BjxD,iBAAiBnF,UAAUq2D,mBAAqB,SAASn3D,KAAMk3D,MAC3D,IAAGh2D,QAAQgI,YAAYwY,KAAKs1C,UAAUh3D,OAAtC,CAGA,IAAI0I,IAAMgZ,KAAKs1C,UAAUh3D,MAAMoE,QAAQ8yD,MACpCxuD,KAAO,GACNgZ,KAAKs1C,UAAUh3D,MAAMsE,OAAOoE,IAAK,KAKzCzC,iBAAiBnF,UAAUu9C,YAAc,WACrC,OAAO38B,KAAKs8B,WAIhB/3C,iBAAiBnF,UAAUs2D,YAAc,SAASrtD,KAC9C,OAAO,IAAIstD,UAAUttD,MAIzB9D,iBAAiBnF,UAAU8yC,QAAU,WACjClyB,KAAK3X,IAAM2X,KAAK41C,YAChB51C,KAAKk1C,eAAgB,EACrBl1C,KAAKi1C,UAAYj1C,KAAK01C,YAAY11C,KAAK3X,KAEvC,IAAI2iC,KAAOhrB,KACXA,KAAKi1C,UAAUY,OAAS,SAAS1mB,KAC7BnE,KAAKsR,WAAY,EACjB98C,QAAQ4D,QAAQ4nC,KAAKqqB,SAAS3xB,KAAM,SAAS8xB,MACzCA,KAAKrmB,QAGbnvB,KAAKi1C,UAAUa,QAAU,SAAS3mB,KAC9B3vC,QAAQ4D,QAAQ4nC,KAAKqqB,SAASr0D,MAAO,SAASw0D,MAC1CA,KAAKrmB,QAGbnvB,KAAKi1C,UAAUc,QAAU,SAAS5mB,KAC9BnE,KAAKsR,WAAY,EACjBtR,KAAKhqC,MAAQ,yBAA2BgqC,KAAK3iC,IAAI+C,MAAM,KAAK,GAC5D5L,QAAQ4D,QAAQ4nC,KAAKqqB,SAASvJ,MAAO,SAAS0J,MAC1CA,KAAKrmB,OAENnE,KAAKkqB,eACJpc,SAAS,WACL9N,KAAKkH,WACNlH,KAAKmqB,eAGhBn1C,KAAKi1C,UAAUe,UAAY,SAAS7mB,KAChCnE,KAAKirB,UAAUz2D,QAAQgzC,SAASrD,IAAI7mC,SAK5C/D,iBAAiBnF,UAAU0sD,MAAQ,WAC/B9rC,KAAKk1C,eAAgB,EACrBl1C,KAAKi1C,UAAUnJ,QACf9rC,KAAKi1C,UAAY,MAIrB1wD,iBAAiBnF,UAAU82D,aAAe,WACtC,OAAOrtD,QAAQiJ,SAASm6C,UAK5B1nD,iBAAiBnF,UAAUw2D,UAAY,WACnC,IAAIO,KAAOttD,QAAQiJ,SAAS7O,SACxBmzD,KAAOvtD,QAAQiJ,SAASskD,KACxBlqD,KAAOrD,QAAQiJ,SAASukD,SACxBC,MAAQ,KACgB,WAAxBt2C,KAAKk2C,iBACLI,MAAQ,OAKZ,IAyBIC,UAzBAC,KAAOh3D,QAAQwvC,QAAQ,QAC3B,GAAGxvC,QAAQomB,UAAU4wC,MAAO,CACxB,IAAIC,QAAUD,KAAKzX,KAAK,QACrBv/C,QAAQomB,UAAU6wC,WACjBvqD,KAAOuqD,SAEX,IAAIC,QAAUF,KAAKluD,KAAK,kBACrB9I,QAAQomB,UAAU8wC,WACjBN,KAAOM,SA2Bf,MAtB6B,MAA1BxqD,KAAKA,KAAK1K,OAAS,KAClB0K,MAAQ,KAIZ7D,IAAMiuD,MAAQ,MAAQH,KACnB32D,QAAQyM,SAASmqD,OAASA,KAAK50D,OAAS,IACvC6G,KAAO,IAAM+tD,MAEjB/tD,KAAO6D,KAAO,KAKVqqD,UADD/2D,QAAQsgB,WAAW60C,SAAS91D,KACf81D,SAAS91D,IAAI,aAEb81D,SAAS4B,UAEtB/2D,QAAQomB,UAAU2wC,aACjBluD,KAAO,cAAgBsuD,mBAAmBJ,YAGvCluD,KAIX9D,iBAAiBnF,UAAUw3D,eAAiB,WAExC,GAAGp3D,QAAQU,SAAS8f,KAAKo1C,qBACrB,OAAOp1C,KAAKo1C,oBAAoBjL,QAIpC,IAAI2E,MACJ,GAAG9uC,KAAK28B,cAQJ,OALAmS,MAAQ1E,GAAG0E,QAIXhW,SAASgW,MAAMC,SACRD,MAAM3E,QAIjB,IAAiB0M,QAAQC,SAArB9rB,KAAOhrB,KAiBX,OAhBA8uC,MAAQ9uC,KAAKo1C,oBAAsBhL,GAAG0E,QACtC+H,QAAS,SAAS1nB,KACdnvB,KAAKo1C,oBAAsB,KAC3BpqB,KAAK0nB,kBAAkB,OAAQmE,SAC/B7rB,KAAK0nB,kBAAkB,QAASoE,UAChChuD,WAAW2uC,OAAOqX,MAAMC,QAAQ5f,OAEpC2nB,SAAU,SAAS3nB,KACfnvB,KAAKo1C,oBAAsB,KAC3BpqB,KAAK0nB,kBAAkB,OAAQmE,SAC/B7rB,KAAK0nB,kBAAkB,QAASoE,UAChChuD,WAAW2uC,OAAOqX,MAAMiI,OAAO5nB,OAEnCnvB,KAAKwyC,gBAAgB,OAAQqE,SAC7B72C,KAAKwyC,gBAAgB,QAASsE,UAC9B92C,KAAKkyB,UACE4c,MAAM3E,SAIjB5lD,iBAAiBnF,UAAU62D,UAAY,SAASe,KAEzCA,IAAI/wD,OAAS2uD,kBACZ50C,KAAKi3C,WAAWD,KAEVA,IAAI/wD,OAAS2uD,iBACnB50C,KAAKovC,SAAS4H,MAKtBzyD,iBAAiBnF,UAAU63D,WAAa,SAASD,KAE7C,IAAIlI,MAAQ9uC,KAAK80C,UAAUkC,IAAIE,YAC3BC,mBAAqBn3C,KAAK+0C,SAASiC,IAAIE,YACxC13D,QAAQomB,UAAUkpC,SACdkI,IAAI5jB,QAAUyhB,sBAIb/rD,WAAW2uC,OAAOqX,MAAMC,QAAQiI,IAAI/4C,SAC9B+4C,IAAI5jB,QAAUyhB,sBAEjBr1D,QAAQU,SAASi3D,oBAChBruD,WAAW2uC,OAAOqX,MAAMiI,QACpB/1D,MAASg2D,IAAIh2D,MACbo2D,QAAWD,sBAGfruD,WAAW2uC,OAAOqX,MAAMiI,OAAOC,IAAIh2D,gBAIpCgf,KAAK80C,UAAUkC,IAAIE,mBACnBl3C,KAAK+0C,SAASiC,IAAIE,cAKjC3yD,iBAAiBnF,UAAUgwD,SAAW,SAAS4H,KAC3C,IAAI3B,SAAWr1C,KAAKs1C,UAAU0B,IAAI14D,MAC/BkB,QAAQiR,QAAQ4kD,WACf71D,QAAQ4D,QAAQiyD,SAAU,SAASgC,SAC/BA,QAAQL,IAAItqD,OAAQsqD,IAAI1uD,SAMpC/D,iBAAiBnF,UAAUqvD,WAAa,SAChCrmD,OAAQH,OAAQqvD,UACpB,IAAIxI,MAAQ1E,GAAG0E,QACXoI,WAAal3C,KAAKu1C,eAClB6B,SACAnxD,KAAM2uD,iBACNsC,WAAYA,WACZ9uD,OAAQA,OACRH,OAAQA,QASZ,OAPA+X,KAAK80C,UAAUoC,YAAcpI,MAGzBwI,WACAt3C,KAAK+0C,SAASmC,YAAcE,SAEhCp3C,KAAKi1C,UAAUsC,KAAK/3D,QAAQg4D,OAAOJ,UAC5BtI,MAAM3E,SAGV,IAAI5lD,wGC9TnB/E,QAAQ1B,OAAO,QAAQwgD,QACnB,kBACC,KAAM,aAAc,mBAAoB,UACzC,SAAS8L,GAAIthD,WAAYvE,iBAAkByqD,SAEvC,SAAS/5C,iBACL+5C,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,SAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,SAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAMlC,OAFA2M,eAAe7V,UAAY,IAAI4vD,QAExB,IAAI/5C,uGCtBnBzV,QAAQ1B,OAAO,QAAQwgD,QACnB,mBACC,KAAM,aAAc,mBAAoB,UAAW,SAC5C8L,GAAIthD,WAAYvE,iBAAkByqD,SAEtC,SAASh6C,kBACLg6C,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,UAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,UAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAMlC,OAFA0M,gBAAgB5V,UAAY,IAAI4vD,QAEzB,IAAIh6C,sGCpBnBxV,QAAQ1B,OAAO,QAAQwgD,QACnB,iBACC,KAAM,aAAc,mBAAoB,UAAW,iBACpD,SAAS8L,GAAIthD,WAAYvE,iBAAkByqD,QAASpvD,gBAEhD,SAAS4O,gBACLwgD,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,QAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,QAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAoBlC,OAhBAkG,cAAcpP,UAAY,IAAI4vD,QAG9BxgD,cAAcpP,UAAUqE,OAAS,SAASwL,OAItC,OAAO1K,iBAAiBkqD,WAAW,eAAgBx/C,QAKvDT,cAAcpP,UAAU2nC,YAAc,SAAS93B,OAC3C,OAAO1K,iBAAiBkqD,WAAW,eAAgBx/C,QAGhD,IAAIT,qGCnCnBhP,QAAQ1B,OAAO,QAAQwgD,QACnB,kBACC,KAAM,aAAc,mBAAoB,UACzC,SAAS8L,GAAIthD,WAAYvE,iBAAkByqD,SAEvC,SAAS5D,iBACL4D,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,SAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,SAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAclC,OAVA8iD,eAAehsD,UAAY,IAAI4vD,QAG/B5D,eAAehsD,UAAU4sD,WAAa,SAAS/jD,QAI3C,OAAO1D,iBAAiBkqD,WAAW,qBAAsBxmD,SAGtD,IAAImjD,2GC7BnB5rD,QAAQ1B,OAAO,QAAQwgD,QACnB,uBACC,KAAM,aAAc,mBAAoB,UACzC,SAAS8L,GAAIthD,WAAYvE,iBAAkByqD,SAEvC,SAAS3nB,sBACL2nB,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,cAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,cAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAMlC,OAFA++B,oBAAoBjoC,UAAY,IAAI4vD,QAE7B,IAAI3nB,2GCrBnB7nC,QAAQ1B,OAAO,QAAQwgD,QACnB,kBACC,KAAM,aAAc,mBAAoB,UAAW,SAC5C8L,GAAIthD,WAAYvE,iBAAkByqD,SAEtC,SAASpvD,iBACLovD,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,SAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,SAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAkElC,OA9DA1I,eAAeR,UAAY,IAAI4vD,QAI/BpvD,eAAeR,UAAUuL,QAAU,SAASzI,QACxC,IAAI1C,QAAQU,SAASgC,QACjB,MAAO,GAGX,IAAI5D,KAAO4D,OAAOF,KAMlB,OALGxC,QAAQyM,SAAS/J,OAAO5D,OACP,KAAhB4D,OAAO5D,MACP4D,OAAO5D,OAAS4D,OAAOF,OACvB1D,MAAQ,KAAO4D,OAAO5D,KAAO,KAE1BA,MAGXsB,eAAeR,UAAUq4D,gBAAkB,SAASv1D,QAChD,IAAIw1D,eAAiBpqB,cAAe,EAAGE,MAAO,GAAIE,IAAK,IAOvD,OANAluC,QAAQ4D,QAAQlB,OAAO2qC,WAAW8qB,OAAQ,SAAS/qB,SAC5CptC,QAAQo4D,OAAOhrB,QAAQirB,SAAU,YAC5BjrB,QAAQU,cAAgBoqB,cAAcpqB,gBAC1CoqB,cAAgB9qB,WAGjB8qB,eAGX93D,eAAeR,UAAU04D,gBAAkB,SAAS51D,QAChD,IAAInE,EACJ,IAAIA,EAAI,EAAGA,EAAImE,OAAO2qC,WAAW8qB,OAAOn2D,OAASzD,IAAK,CAElD,IAA2C,IAD7BmE,OAAO2qC,WAAW8qB,OAAO55D,GAC5B85D,QAAQn1D,QAAQ,WACvB,OAAO,EAGf,OAAO,GAIX9C,eAAeR,UAAUqE,OAAS,SAASvB,QAIvC,OAAOqC,iBAAiBkqD,WAAW,gBAAiBvsD,SAIxDtC,eAAeR,UAAUyqC,aAAe,SAAS3nC,QAC7C,OAAOqC,iBAAiBkqD,WAAW,iBAC/B1mD,GAAM7F,OAAO6F,MAKrBnI,eAAeR,UAAUuqC,WAAa,SAASznC,QAC3C,OAAOqC,iBAAiBkqD,WAAW,eAC/B1mD,GAAM7F,OAAO6F,MAId,IAAInI,uGChFnBJ,QAAQ1B,OAAO,QAAQwgD,QACnB,mBACC,KAAM,aAAc,mBAAoB,eAAgB,SACjD8L,GAAIthD,WAAYvE,iBAAkB8qD,cAEtC,SAASxyB,kBACLwyB,aAAanxD,KAAK8hB,MAElBA,KAAKivC,IAAM,YACXjvC,KAAKkvC,SAAW,SAChBlvC,KAAKwvC,qBACDh2B,MAAS,KACT54B,QAAW,KACX+V,KAAQ,KACR9Q,KAAQ,SAAS1E,QACb,OAAOA,OAAO0E,KAAKvH,OAK3B,IAAI0sC,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,SAAU,SAASziD,OAAQpE,MACzD0iC,KAAKokB,SAAS1iD,OAAQpE,QA4B9B,OAxBAu0B,gBAAgBz9B,UAAY,IAAIiwD,aAGhCxyB,gBAAgBz9B,UAAUqE,OAAS,SAAS8R,MAIxC,OAAOhR,iBAAiBkqD,WAAW,gBAAiBl5C,OAIxDsnB,gBAAgBz9B,UAAU4c,cAAgB,SACtC7a,OAAQuL,OAAQyO,OAKhB,OAHI3b,QAAQU,SAASib,SACjBA,UAEG5W,iBAAiBkqD,WAAW,iBAC/Bh/C,UAAatO,OAAOsO,UACpB/C,OAAUA,OACVyO,MAASA,SAIV,IAAI0hB,oGCnDnBr9B,QAAQ1B,OAAO,QAAQwgD,QACnB,eACC,KAAM,aAAc,mBAAoB,UAAW,SAC5C8L,GAAIthD,WAAYvE,iBAAkByqD,SAEtC,SAASj6C,cACLi6C,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,MAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,MAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAkBlC,OAdAyM,YAAY3V,UAAY,IAAI4vD,QAI5Bj6C,YAAY3V,UAAU8a,aAAe,SAASD,OAC1C,IAAI89C,YAMJ,OALAv4D,QAAQ4D,QAAQ4c,KAAKiwC,OAAQ,SAAStkD,MAC/BA,KAAKrN,KAAKoE,QAAQuX,QAAU,GAC3B89C,SAASv1D,KAAKmJ,KAAKrN,QAGpBy5D,UAGJ,IAAIhjD,iGCjCnBvV,QAAQ1B,OAAO,QAAQwgD,QACnB,gBACC,mBAAoB,UAAW,eAChC,SAAS/5C,iBAAkByqD,QAAS1iD,cAEhC,SAASD,eACL2iD,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,OAGhBlvC,KAAKg4C,UAAY,KAGjB,IAAIhtB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,OAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QA8FlC,OA1FA+D,aAAajN,UAAY,IAAI4vD,QAG7B3iD,aAAajN,UAAUoT,YAAc,WACjC,OAAOwN,KAAKg4C,WAIhB3rD,aAAajN,UAAU4N,YAAc,WACjC,IAAIssB,SAAWtZ,KAAKxN,cACpB,QAAIhT,QAAQU,SAASo5B,WAGdA,SAASC,cAKpBltB,aAAajN,UAAU2b,eAAiB,WAEpC,OADAk9C,SAAWj4C,KAAKg4C,UACZx4D,QAAQU,SAAS+3D,UAGdA,SAAS5lD,cAFL,GAMfhG,aAAajN,UAAU84D,cAAgB,WACnC,IAAIltB,KAAOhrB,KACX,OAAOzb,iBAAiBkqD,WAAW,qBAAsB/qD,KACrD,SAAS0O,MASL,OARG5S,QAAQU,SAAS8qC,KAAKgtB,WAIrBx4D,QAAQyE,KAAKmO,KAAM44B,KAAKgtB,WAExBhtB,KAAKgtB,UAAY5lD,KAEd44B,KAAKgtB,WACb,SAASh3D,OACRsL,aAAa0B,WAAWhN,UAIpCqL,aAAajN,UAAUqwD,aAAe,SAAS9jD,MAC3CqjD,QAAQ5vD,UAAUqwD,aAAavxD,KAAK8hB,KAAMrU,MAIvCnM,QAAQU,SAAS8f,KAAKg4C,YACrBh4C,KAAKg4C,UAAUh4C,KAAKivC,OAAStjD,KAAKqU,KAAKivC,MAGvCzvD,QAAQyE,KAAK0H,KAAMqU,KAAKg4C,YAIhC3rD,aAAajN,UAAUw7B,UAAY,WAG/B,OADA5a,KAAKk4C,gBACElJ,QAAQ5vD,UAAUw7B,UAAU18B,KAAK8hB,OAG5C3T,aAAajN,UAAU+4D,YAAc,WAGjC,OADAn4C,KAAKk4C,gBACElJ,QAAQ5vD,UAAU+4D,YAAYj6D,KAAK8hB,OAI9C3T,aAAajN,UAAUkT,kBAAoB,WACvC,IAAI04B,KAAOhrB,KACX,OAAOzb,iBAAiBkqD,WACpB,+BAAgC/qD,KAC5B,SAAS0O,MASL,OARG5S,QAAQU,SAAS8qC,KAAKgtB,WAIrBx4D,QAAQyE,KAAKmO,KAAM44B,KAAKgtB,WAExBhtB,KAAKgtB,UAAY5lD,KAEd44B,KAAKgtB,WACb,SAASh3D,OACRsL,aAAa0B,WAAWhN,UAIjC,IAAIqL,kGChHnB7M,QAAQ1B,OAAO,QAAQwgD,QACnB,gBACC,KAAM,aAAc,mBAAoB,UAAW,iBACpD,SAAS8L,GAAIthD,WAAYvE,iBAAkByqD,QAASpvD,gBAEhD,SAASsJ,eACL8lD,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,OAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,OAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QA6DlC,OAzDAY,aAAa9J,UAAY,IAAI4vD,QAE7B9lD,aAAa9J,UAAUuL,QAAU,SAASG,MACtC,IAAIxM,KAAOwM,KAAK8U,IAMhB,OALgB,IAAb9U,KAAK8U,IACJthB,KAAO,WACDkB,QAAQyM,SAASnB,KAAKxM,OAAuB,KAAdwM,KAAKxM,OAC1CA,MAAQ,KAAOwM,KAAKxM,KAAO,KAExBA,MAIX4K,aAAa9J,UAAU8uC,WAAa,SAASpjC,MACzC,OAAOvG,iBAAiBkqD,WACpB,eAAiB1mD,GAAM+C,KAAK/C,KAAM,IAK1CmB,aAAa9J,UAAUg5D,kBAAoB,SAASttD,KAAM0E,MACtD1E,KAAKwE,UAAU9M,KAAKgN,KAAKC,YAI7BvG,aAAa9J,UAAU0uC,cAAgB,SACpChjC,KAAM+E,YAAasL,MAAOuwB,YAC1B,IAAIzjC,QACAF,GAAM+C,KAAK/C,GACX8H,YAAeA,YACfsL,MAASA,OAKb,OAHkB,OAAfuwB,YAAuBlsC,QAAQyC,SAASypC,eACxCzjC,OAAOyjC,WAAaA,YAEhBnnC,iBAAiBkqD,WACnB,sBAAuBxmD,QAAQ,IAIvCiB,aAAa9J,UAAU6uC,YAAc,SAASnjC,MAC1C,OAAOvG,iBAAiBkqD,WACpB,uBACI1mD,GAAM+C,KAAK/C,GACX8H,eACA67B,WAAc,OACf,IAIXxiC,aAAa9J,UAAUqE,OAAS,SAASqH,MAIrC,OAAOvG,iBAAiBkqD,WAAW,cAAe3jD,OAG/C,IAAI5B,kGC5EnB1J,QAAQ1B,OAAO,QAAQwgD,QACnB,gBACC,KAAM,aAAc,mBAAoB,UAAW,SAC5C8L,GAAIthD,WAAYvE,iBAAkByqD,SAEtC,SAAS5qD,eACL4qD,QAAQ9wD,KAAK8hB,MAEbA,KAAKivC,IAAM,KACXjvC,KAAKkvC,SAAW,OAGhB,IAAIlkB,KAAOhrB,KACXzb,iBAAiB4qD,iBAAiB,OAC9B,SAASziD,OAAQpE,MACb0iC,KAAKokB,SAAS1iD,OAAQpE,QAqBlC,OAjBAlE,aAAahF,UAAY,IAAI4vD,QAG7B5qD,aAAahF,UAAUkkC,eAAiB,WACpC,GAA0B,IAAvBtjB,KAAKiwC,OAAOzuD,OACX,OAAO,KAEP,IAAIzD,EACJ,IAAIA,EAAE,EAAEA,EAAEiiB,KAAKiwC,OAAOzuD,OAAOzD,IACzB,GAAyB,IAAtBiiB,KAAKiwC,OAAOlyD,GAAGgK,GACd,OAAOiY,KAAKiwC,OAAOlyD,GAI/B,OAAOiiB,KAAKiwC,OAAO,IAGhB,IAAI7rD,oGCxCnB5E,QAAQ1B,OAAO,QAAQ0N,OAAO,iBAAkB,WAC5C,OAAO,SAASwD,MAAOL,QACnB,IACI5G,GADAoX,YAEJ,GAAG3f,QAAQU,SAASyO,QAChB5G,GAAK4G,OAAO5G,OACT,KAAGvI,QAAQyC,SAAS0M,QAGvB,OAAOwQ,SAFPpX,GAAK4G,OAST,OALAnP,QAAQ4D,QAAQ4L,MAAO,SAASlE,MACzBA,KAAK6D,SAAW5G,IACfoX,SAAS3c,KAAKsI,QAGfqU,+FChBf3f,QAAQ1B,OAAO,QAAQ0N,OAAO,gBAAiB,WAC3C,OAAO,SAASu/B,QAAS97B,OACrB,IACIlH,GADAoX,YAEJ,GAAG3f,QAAQU,SAAS+O,OAChBlH,GAAKkH,MAAMlH,OACR,KAAGvI,QAAQyC,SAASgN,OAGvB,OAAOkQ,SAFPpX,GAAKkH,MAST,OALAzP,QAAQ4D,QAAQ2nC,QAAS,SAAS7rC,QAC3BA,OAAO+P,QAAUlH,IAChBoX,SAAS3c,KAAKtD,UAGfigB,YAIf3f,QAAQ1B,OAAO,QAAQ0N,OAAO,oBAAqB,WAC/C,OAAO,SAASu/B,SACZ,IAAI5rB,YAMJ,OALA3f,QAAQ4D,QAAQ2nC,QAAS,SAAS7rC,QACV,OAAjBA,OAAO+P,OACNkQ,SAAS3c,KAAKtD,UAGfigB,gGC5Bf3f,QAAQ1B,OAAO,QAAQ0N,OAAO,iBAAkB,WAC5C,OAAO,SAAS6sD,gBAAiBn2D,OAAQyN,KACrC,IACI5H,GADAoX,YAEJ,GAAG3f,QAAQU,SAASgC,QAChB6F,GAAK7F,OAAO6F,OACT,KAAGvI,QAAQyC,SAASC,QAGvB,OAAOid,SAFPpX,GAAK7F,OAYT,OARG1C,QAAQgI,YAAYmI,OACnBA,IAAM,UAEVnQ,QAAQ4D,QAAQi1D,gBAAiB,SAAStsD,KACnCA,IAAI4D,OAAS5H,IACZoX,SAAS3c,KAAKuJ,OAGfoT,YAMf3f,QAAQ1B,OAAO,QAAQ0N,OAAO,uBAAwB,WAClD,OAAO,SAAS6sD,gBAAiBn2D,OAAQ4I,MACrC,IACI/C,GADAoX,YAEAxP,IAAM,KACV,GAAGnQ,QAAQomB,UAAU1jB,SAAsB,OAAXA,OAC5ByN,IAAM,SACHnQ,QAAQU,SAASgC,QAChB6F,GAAK7F,OAAO6F,GACNvI,QAAQyC,SAASC,UACvB6F,GAAK7F,YAEN,KAAG1C,QAAQomB,UAAU9a,OAAkB,OAATA,KAQjC,OAAOqU,SAPPxP,IAAM,OACHnQ,QAAQU,SAAS4K,MAChB/C,GAAK+C,KAAK/C,GACJvI,QAAQyC,SAAS6I,QACvB/C,GAAK+C,MAUb,OALAtL,QAAQ4D,QAAQi1D,gBAAiB,SAAStsD,KACnCA,IAAI4D,OAAS5H,IACZoX,SAAS3c,KAAKuJ,OAGfoT,8FCpDf3f,QAAQ1B,OAAO,QAAQ0N,OAAO,eAAgB,WAC1C,OAAO,SAAS5K,QAASkK,MACrB,IACI/C,GADAoX,YAEJ,GAAG3f,QAAQU,SAAS4K,MAChB/C,GAAK+C,KAAK/C,OACP,KAAGvI,QAAQyC,SAAS6I,MAGvB,OAAOqU,SAFPpX,GAAK+C,KAST,OALAtL,QAAQ4D,QAAQxC,QAAS,SAASsB,QAC3BA,OAAO4I,OAAS/C,IACfoX,SAAS3c,KAAKN,UAGfid,YAIf3f,QAAQ1B,OAAO,QAAQ0N,OAAO,0BAA2B,WACrD,OAAO,SAASqE,YAAa/E,MACzB,IAAIqU,YACJ,OAAI3f,QAAQU,SAAS4K,OAGrBtL,QAAQ4D,QAAQyM,YAAa,SAASpQ,YAQN,IAAzBA,WAAW0W,WAA4C,IAAzB1W,WAAW0W,WACxCgJ,SAAS3c,KAAK/C,cAGf0f,UAdIA,4FCxBnB3f,QAAQ1B,OAAO,QAAQ0N,OAAO,eAAgB,UAAW,gBACrD,SAAS0C,QAAS0uB,eAId,IAAI07B,eAAiBpqD,QAAQ,UAIzBqqD,UACAC,IAAK,SAASjjD,MACV,OAAOA,KAAKsJ,WAEhB45C,MAAO,SAASljD,MACZ,OAAOA,KAAKsJ,WAEhB65C,IAAK,SAASnjD,MACV,OAAOA,KAAKojD,QAEhBt4D,IAAK,SAASkV,MAIV,OAHA3P,QACAA,KAAKpD,KAAK+S,KAAK5N,SACf/B,KAAKpD,KAAK6vD,MAAMzsD,KAAM2P,KAAKpS,YACpByC,MAEXC,KAAM,SAAS0P,MACX,OAAOA,KAAK1P,KAAKvH,MAErBojC,IAAK,SAASnsB,MACV,YAAqBoR,IAAbpR,KAAKmsB,SAAqB/a,EAAYpR,KAAKmsB,IAAIpjC,MAE3Ds6D,SAAU,SAASrjD,MACf,YAAqBoR,IAAbpR,KAAKmsB,SAAqB/a,EAAYpR,KAAKmsB,IAAI35B,IAE3D/B,MAAO,SAASuP,MACZ,OAAOA,KAAK6E,aAEhB/B,QAAS,SAAS9C,MACd,OAAwB,IAArBA,KAAKmG,aAA0C,IAArBnG,KAAKmG,YACvBnG,KAAK6C,QAAU,IAAM7C,KAAK6F,cAE1B,KAMnB,SAASy9C,UAAU95D,OAEf,OAAOA,MAAQ,GAAO,EAiC1B,SAAS+5D,QAAQ/5D,MAAOg6D,UAAWC,MAAOC,QACtC,IAAI1oC,MA7BR,SAAkBxxB,MAAOg6D,UAAWC,OAChC,OAAGx5D,QAAQyC,SAASlD,OACbi6D,MACIH,UAAU95D,OACFA,QAAU8O,SAASkrD,UAAW,IAE9Bh6D,QAAUm6D,WAAWH,WAG7BF,UAAU95D,OACFA,OAAS8O,SAASkrD,UAAW,IAE7Bh6D,OAASm6D,WAAWH,WAG7Bv5D,QAAQyM,SAASlN,OACpBi6D,MACQj6D,MAAMi+B,gBAAkB+7B,UAExBh6D,MAAMi+B,cAAct6B,QAAQq2D,YAAc,EAG9Ch6D,QAAUg6D,UAOTI,CAASp6D,MAAOg6D,UAAWC,OACvC,OAAGC,QACS1oC,MAELA,MAGX,OAAO,SAASqO,MAAOzyB,QACnB,GAAG3M,QAAQgI,YAAYo3B,QACnBp/B,QAAQgI,YAAY2E,SACH,IAAjByyB,MAAMp9B,OACN,OAAOo9B,MAGX,IAAIzf,SAAWyf,MACXQ,QAAUxC,cAAc8D,kBAAkBv0B,QA4G9C,OA3GA3M,QAAQ4D,QAAQg8B,QAAS,SAASg6B,MAAOra,MACrC,GAAY,MAATA,KAGCv/C,QAAQ4D,QAAQg2D,MAAO,SAASC,MAC5Bl6C,SAAWm5C,eAAen5C,SAAUk6C,aAErC,GAAY,OAATta,KAGNv/C,QAAQ4D,QAAQg2D,MAAO,SAASC,MAC5B,IAAIC,WACJ95D,QAAQ4D,QAAQ+b,SAAU,SAAS5J,MAC5BA,KAAK8Y,WACmB,aAAvBgrC,KAAKr8B,cACLs8B,QAAQ92D,KAAK+S,MACNA,KAAK8Y,WACW,cAAvBgrC,KAAKr8B,eACLs8B,QAAQ92D,KAAK+S,QAGrB4J,SAAWm6C,cAEZ,CAEH,IAAIC,QAAUhB,SAASxZ,MAGnBua,WACJ95D,QAAQ4D,QAAQ+b,SAAU,SAAS5J,MAC/B,IAAIxW,MAYAhB,EAAGgzB,EAJP,GAPGvxB,QAAQsgB,WAAWy5C,SAClBx6D,MAAQw6D,QAAQhkD,MACVA,KAAKlW,eAAe0/C,QAC1BhgD,MAAQwW,KAAKwpC,QAIdv/C,QAAQgI,YAAYzI,OAKvB,IAAIhB,EAAI,EAAGA,EAAIq7D,MAAM53D,OAAQzD,IAAK,CAK9B,IAJA,IAAIs7D,KAAOD,MAAMr7D,GAAGi/B,cAChBg8B,OAAQ,EAAOC,QAAS,EAGA,IAAtBI,KAAK32D,QAAQ,MACfu2D,QAAUA,OACVI,KAAOA,KAAKG,UAAU,GAU1B,IANyB,IAAtBH,KAAK32D,QAAQ,OACZs2D,OAAQ,EACRK,KAAOA,KAAKG,UAAU,IAIE,IAAtBH,KAAK32D,QAAQ,MACfu2D,QAAUA,OACVI,KAAOA,KAAKG,UAAU,GAG1B,GAAGh6D,QAAQiR,QAAQ1R,QAKf,GAAGk6D,OAAQ,CAGP,IAAIQ,UAAW,EACf,IAAI1oC,EAAI,EAAGA,EAAIhyB,MAAMyC,OAAQuvB,IACzB,GAAG+nC,QACC/5D,MAAMgyB,GAAIsoC,KAAML,OAAO,GAAQ,CAC/BS,UAAW,EACX,MAGR,GAAGA,SAEC,YADAH,QAAQ92D,KAAK+S,WAIjB,IAAIwb,EAAI,EAAGA,EAAIhyB,MAAMyC,OAAQuvB,IACzB,GAAG+nC,QACC/5D,MAAMgyB,GAAIsoC,KAAML,OAAO,GAEvB,YADAM,QAAQ92D,KAAK+S,WAQzB,GAAGujD,QAAQ/5D,MAAOs6D,KAAML,MAAOC,QAE3B,YADAK,QAAQ92D,KAAK+S,SAM7B4J,SAAWm6C,WAGZn6C,qGC9MnB3f,QAAQ1B,OAAO,QAAQ0N,OAAO,cAAe,WACzC,OAAO,SAASykB,MAAO1oB,MAAOmyD,QAC1B,IAAI52B,OAAS7S,MAAM9kB,QAcnB,OAbA23B,OAAO3kB,KAAK,SAASgF,EAAGC,GAKpB,OAJAu2C,MAAQ,IAAI/P,KAAKzmC,EAAE5b,QACnBqyD,MAAQ,IAAIhQ,KAAKxmC,EAAE7b,QAGhB/H,QAAQyM,SAASytD,SAChBC,MAAME,YAAcD,MAAMC,UAEtB12C,EAAEu2C,QAAUt2C,EAAEs2C,SAAW,EAAIv2C,EAAEu2C,QAAUt2C,EAAEs2C,QAAU,EAAI,EAExDC,MAAQC,OAAS,EAAID,MAAQC,MAAQ,EAAI,IAG/C92B,wGChBftjC,QAAQ1B,OAAO,QAAQ0N,OAAO,oBAAqB,WAC/C,OAAO,SAASwD,OACZ,IAAImQ,YAMJ,OALA3f,QAAQ4D,QAAQ4L,MAAO,SAASlE,MACZ,IAAbA,KAAK8U,KACJT,SAAS3c,KAAKsI,QAGfqU,mFCJf3f,QAAQ1B,OAAO,QACV,UAAW,YAAa,aAAc,cAAe,cAAcg8D,OACpE,SAASC,qBAAsBC,eAAgBC,eAW3C,SAASC,cAAchuD,MACnB,OAAOA,KAAO,MAAQ8F,YAAY69B,cAXtCkqB,qBAAqBI,YAAY,MACjCJ,qBAAqBK,UAAU,MAI/BH,cAAcI,SAASC,eAAiB,YACxCL,cAAcI,SAASE,eAAiB,cAWxC,IAAI/M,KAAOhuD,QAAQwvC,QAAQ,QAAQ+P,KAAK,QACpC7yC,KAAOuuC,SAAS3oC,SAASukD,SAI7B,GAH6B,MAA1BnqD,KAAKA,KAAK1K,OAAS,KAClB0K,MAAQ,KAETA,OAASshD,KAAM,CACd,IAAIgN,OAASR,eACTS,KAAK,UACD7qB,YAAasqB,cACT,8BACJz6D,WAAY,oBAEhBg7D,KAAK,eACD7qB,YAAasqB,cACT,mCACJz6D,WAAY,wBAEhBg7D,KAAK,UACD7qB,YAAasqB,cACT,mCACJz6D,WAAY,wBAEhBg7D,KAAK,2CACD7qB,YAAasqB,cACT,oCACJz6D,WAAY,yBAEhBg7D,KAAK,iCACD7qB,YAAasqB,cACT,oCACJz6D,WAAY,yBAEhBg7D,KAAK,2BACD7qB,YAAasqB,cACT,oCACJz6D,WAAY,yBAEhBg7D,KAAK,0BACD7qB,YAAasqB,cACT,qCACJz6D,WAAY,0BAEhBg7D,KAAK,oBACD7qB,YAAasqB,cACT,qCACJz6D,WAAY,0BAEhBg7D,KAAK,SACD7qB,YAAasqB,cACT,kCACJz6D,WAAY,uBAEhBg7D,KAAK,YACD7qB,YAAasqB,cACT,oCACJz6D,WAAY,yBAEhBg7D,KAAK,WACD7qB,YAAasqB,cACT,+BACJz6D,WAAY,qBAEhBg7D,KAAK,YACD7qB,YAAasqB,cACT,qCACJz6D,WAAY,0BAEhBg7D,KAAK,sBACD7qB,YAAasqB,cACT,uCACJz6D,WAAY,4BAEhBg7D,KAAK,oBACD7qB,YAAasqB,cACT,sCACJz6D,WAAY,2BAEhBg7D,KAAK,sBACD7qB,YAAasqB,cACT,uCACJz6D,WAAY,4BAEhBg7D,KAAK,YACDC,WAAY,wBAEhBD,KAAK,aACD7qB,YAAasqB,cACT,sCACJz6D,WAAY,yBACZk7D,gBAAgB,IAEpBF,KAAK,sBACD7qB,YAAasqB,cACT,uCACJz6D,WAAY,4BAEhBg7D,KAAK,kBACD7qB,YAAasqB,cACT,qCACJz6D,WAAY,wBACZm7D,aAAc,gBAElBH,KAAK,sBACD7qB,YAAasqB,cACT,iCACJz6D,WAAY,uBAEhBg7D,KAAK,kBACD7qB,YAAasqB,cACT,qCACJz6D,WAAY,0BAEhBg7D,KAAK,UACD7qB,YAAasqB,cACT,mCACJz6D,WAAY,sBACZk7D,gBAAgB,IAIpBH,OAFDxoD,YAAY6oD,UAEFL,OAAOC,KAAK,cACjB7qB,YAAasqB,cACT,kCACJz6D,WAAY,wBAEhBq7D,WACIJ,WAAY,eAGPF,OAAOM,WACZJ,WAAY,cAOhCl7D,QAAQ1B,OAAO,QAAQu4C,KAAK,aAAc,YACtC,SAAUvtC,WAAYE,WAClBF,WAAWF,IAAI,oBAAqB,SAAS2U,MAAOw9C,KAAMC,SAClDhpD,YAAYC,gBAIJD,YAAYO,sBACG,wBAApBwoD,KAAKt7D,YACJuJ,UAAUkD,KAAK,eALI,oBAApB6uD,KAAKt7D,YACJuJ,UAAUkD,KAAK,eAWnC1M,QAAQ1B,OAAO,QAAQu4C,KAAK,aACxB,SAAUvtC,YACNwyC,OAAO2f,GAAK3f,OAAO2f,IAAM,YACpB3f,OAAO2f,GAAGC,EAAI5f,OAAO2f,GAAGC,OAAS14D,KAAK24D,YAE3C7f,OAAO2f,GAAGj9D,GAAK,IAAI4rD,KACnBtO,OAAO2f,GAAG,SAAU,gBAAiB,QACnCG,OAAQppD,YAAYqpD,oBAEtB/f,OAAO2f,GAAG,MAAO,aAAcjpD,YAAYo1B,SAC3CkU,OAAO2f,GAAG,MAAO,aAAcjpD,YAAYspD,MAC3CxyD,WAAWF,IAAI,sBAAuB,WAClC,IAAIsD,KAAOovC,OAAOxpC,SAASukD,SAAW/a,OAAOxpC,SAASypD,KACtDjgB,OAAO2f,GAAG,OAAQ,WAAY/uD,8FCzL1C1M,QAAQ1B,OAAO,QAAQoZ,QAAQ,kBAAmB,UAC9C,SAASrO,SA0BLmX,KAAK87B,QAAU,QAGf,IAAI9Q,KAAOhrB,KACXxgB,QAAQ4D,UArBA9E,KAAM,SACNk9D,MAAO,YAGPl9D,KAAM,SACNk9D,MAAO,YAGPl9D,KAAM,UACNk9D,MAAO,aAGPl9D,KAAM,KACNk9D,MAAO,SAQW,SAASC,SAC5BA,QAAQD,MAAMvmC,KAAKpsB,QAAQ6yD,UAAUC,YACnB,UAAjB3wB,KAAK8Q,UACL9Q,KAAK8Q,QAAU2f,QAAQn9D,gGCrCvCkB,QAAQ1B,OAAO,QAAQoZ,QAAQ,mBAAoB,WAI3C,IAAI0kD,OAAS,QAAS,KAAM,KAAM,KAAM,MAQxC57C,KAAKkY,aAAe,SAAShD,OAEtB11B,QAAQyM,SAASipB,SAChBA,MAAQrnB,SAASqnB,MAAO,KAG5B,IAAIn3B,EAAG89D,KAAMC,UAAY5mC,MACzB,IAAIn3B,EAAI,EAAGA,EAAI69D,MAAMp6D,OAAQzD,IAAK,CAE9B,GADA89D,KAAOD,MAAM79D,GACV4yB,KAAKorC,IAAID,WAAa,KAAmB,OAATD,KAAe,CAC9C,IAAI1rC,OAAS2rC,UAAUE,QAAQ,GAAK,IAAMH,KAI1C,MAHY,UAATA,OACC1rC,OAAS2rC,UAAY,IAAMD,OAG3B/tC,SAAUoH,MACV4mC,UAAWA,UACXG,MAAOJ,KACP1rC,OAAQA,QAGhB2rC,WAAa,MAKrB97C,KAAKmV,aAAe,SAAS7sB,KAAMuzD,MAK/B,OAHGr8D,QAAQyM,SAAS3D,QAChBA,KAAO4wD,WAAW5wD,OAEV,UAATuzD,KACQlrC,KAAKo5B,MAAMzhD,MACH,OAATuzD,KACClrC,KAAKo5B,MAxCL,IAwCWzhD,MACH,OAATuzD,KACClrC,KAAKo5B,MAzCL,IAyCWzhD,MACH,OAATuzD,KACClrC,KAAKo5B,MA1CL,IA0CWzhD,MACH,OAATuzD,KACClrC,KAAKo5B,MA3CL,KA2CWzhD,WADf,GAOX0X,KAAKoV,WAAa,SAAS9sB,KAAMuzD,MAK7B,OAHGr8D,QAAQyM,SAAS3D,QAChBA,KAAO4wD,WAAW5wD,OAEV,UAATuzD,KACQlrC,KAAKo5B,MAAMzhD,MACH,OAATuzD,KACClrC,KAAKo5B,MA5DL,IA4DWzhD,MAAoB,GACvB,OAATuzD,KACClrC,KAAKo5B,MA7DL,IA6DWzhD,MAAoB,IACvB,OAATuzD,KACClrC,KAAKo5B,MA9DL,IA8DWzhD,MAAoB,IACvB,OAATuzD,KACClrC,KAAKo5B,MA/DL,KA+DWzhD,MAAoB,UADnC,GAMX0X,KAAKkT,iBAAmB,SAASgC,MAAOgnC,YACpC,OAAOA,WAAavrC,KAAKo5B,MAAM70B,MAAQgnC,aAI3Cl8C,KAAKm8C,aAAe,SAAS37D,WACzB,IAAIu5B,MAAQv5B,UAAU4K,MAAM,KACxBgxD,UAIJ,OAHA58D,QAAQ4D,QAAQ22B,MAAO,SAASsiC,MAC5BD,OAAO55D,KAAKqL,SAASwuD,KAAM,OAExBD,QAIXp8C,KAAKyoB,cAAgB,SAASjoC,WAC1B,IAAI47D,OAASp8C,KAAKm8C,aAAa37D,WAC/B,OACK47D,OAAO,GAAKzrC,KAAK2rC,IAAI,IAAI,GACzBF,OAAO,GAAKzrC,KAAK2rC,IAAI,IAAI,GACb,IAAZF,OAAO,GAAYA,OAAO,IAKnCp8C,KAAK0oB,WAAa,SAASloC,WACvB,IAAIzC,EAAGw+D,gBAAkB/7D,UACzB,IAAsC,IAAnC+7D,gBAAgB75D,QAAQ,MAAc,CAGrC,IAAI0I,MAAQ5K,UAAU4K,MAAM,MACxBoxD,OAAS,EACb,IAAIz+D,EAAI,EAAGA,EAAIqN,MAAM5J,OAAQzD,IACzBy+D,QAAUpxD,MAAMrN,GAAGqN,MAAM,KAAK5J,OAGlC,IADA+6D,gBAAkBnxD,MAAM,GAAK,IACzBrN,EAAI,EAAGA,EAAI,EAAIy+D,OAAQz+D,IACvBw+D,iBAAmB,QAEvBA,iBAAmBnxD,MAAM,GAG7B,IAAIkwB,UAAavB,MAAQwiC,gBAAgBnxD,MAAM,KAI/C,OAHA5L,QAAQ4D,QAAQ22B,MAAO,SAASsiC,MAC5B/gC,OAAO94B,KAAK,OAAOi6D,OAAOJ,KAAK76D,QAAU66D,QAEtC/gC,OAAOtB,KAAK,MAIvBha,KAAK08C,aAAe,SAASl8D,WACzB,IAAIg8D,UACAziC,MAAQ/Z,KAAK0oB,WAAWloC,WAAW4K,MAAM,KAI7C,OAHA5L,QAAQ4D,QAAQ22B,MAAO,SAASsiC,MAC5BG,OAAOh6D,KAAKqL,SAASwuD,KAAM,OAExBG,2FCvInBh9D,QAAQ1B,OAAO,QAAQoZ,QAAQ,eAAgB,WAGvC8I,KAAK48B,OAAS,KAGd58B,KAAKhS,WAAa,SAAShN,OAGnBxB,QAAQyM,SAAS+T,KAAK48B,UACtB58B,KAAK48B,OAAS57C,6VCR9BxB,QAAQ1B,OAAO,QAAQoZ,QAAQ,cAAe,WAG1C8I,KAAKmL,SAAW,SAASwxC,YACrB,IACI,IAAI5wD,IAAM6wD,KAAKC,MAAMF,YAGrB,GAAI5wD,KAAsB,WAAf+wD,QAAO/wD,MAA4B,OAARA,IAClC,OAAOA,IAGf,MAAOgxD,IACP,OAAO,uFCRfv9D,QAAQ1B,OAAO,QAAQoZ,QAAQ,cAC3B,UAAW,SAASrO,SAChB,IAAImiC,KAAOhrB,KAIXgrB,KAAKgyB,SAAU,EAQfhyB,KAAKiyB,SAAW,EAGhBjyB,KAAK3H,IAAM,WACP,OAAOx6B,QAAQq0D,YAAcr0D,QAAQq0D,YAAY75B,MAAQ,GAI7D2H,KAAKmyB,OAASrjD,QAAQsjD,MACtBpyB,KAAKqyB,KAAOvjD,QAAQC,IACpBixB,KAAKsyB,MAAQxjD,QAAQwsC,KACrBtb,KAAKuyB,MAAQzjD,QAAQ0jD,KACrBxyB,KAAK4R,OAAS9iC,QAAQ9Y,MAGtBgf,KAAKy9C,mBAAqB,SAASC,cAC/B,OAAOxE,WAAWwE,aAAe,KAAQ1B,QAAQ,IAKrDh8C,KAAK29C,MAAQ,SAASzzB,YAAa0zB,OACX,IAAjB5yB,KAAKgyB,UAEJa,MAAMz+D,UAAU0+D,QAAQ5/D,KAAK0/D,KACzB,IAAM5yB,KAAKyyB,mBAAmBzyB,KAAK3H,OAAS,KAChD6G,YAAYmoB,MAAMrnB,KAAM4yB,QAKhC59C,KAAKo9C,MAAQ,WACNpyB,KAAKiyB,UAAY,GAChBjyB,KAAK2yB,MAAM3yB,KAAKmyB,OAAQhC,YAKhCn7C,KAAKjG,IAAM,WACJixB,KAAKiyB,UAAY,GAChBjyB,KAAK2yB,MAAM3yB,KAAKqyB,KAAMlC,YAK9Bn7C,KAAKsmC,KAAO,WACLtb,KAAKiyB,UAAY,GAChBjyB,KAAK2yB,MAAM3yB,KAAKsyB,MAAOnC,YAK/Bn7C,KAAKw9C,KAAO,WACLxyB,KAAKiyB,UAAY,GAChBjyB,KAAK2yB,MAAM3yB,KAAKuyB,MAAOpC,YAK/Bn7C,KAAKhf,MAAQ,WACNgqC,KAAKiyB,UAAY,GAChBjyB,KAAK2yB,MAAM3yB,KAAK4R,OAAQue,kGC9ExC37D,QAAQ1B,OAAO,QAAQoZ,QACnB,WACC,KAAM,aAAc,WAAY,mBAAoB,SAC7CkzC,GAAIthD,WAAYgwC,SAAUv0C,kBAG9B,IAAIw5D,kBACAC,OAAQ,SACRC,OAAQ,SACRr8C,OAAQ,UAIZ,SAASotC,UAELhvC,KAAKivC,IAAM,KAIXjvC,KAAK2vC,UAAY,KAGjB3vC,KAAKk+C,YAAc,OAInBl+C,KAAKkvC,SAAW,KAIhBlvC,KAAKiwC,UAOLjwC,KAAKgyC,MAAQ,SAGbhyC,KAAKiyC,WAILjyC,KAAK8tC,SAAU,EAIf9tC,KAAKm+C,YAAa,EAKlBn+C,KAAKo+C,oBAKLp+C,KAAKq+C,sBAKLr+C,KAAKs+C,gBAKLt+C,KAAK+zC,kBAIL/zC,KAAK+xC,aAAc,EAMnB/xC,KAAKu+C,YAAc,KAGnBv+C,KAAKw+C,aAKLx+C,KAAKwvC,uBAmpBT,OA/oBAR,QAAQ5vD,UAAUw0D,gBAAkB,SAASxM,MAAOqX,UAChD,IAAI1gE,EACJ,IAAIA,EAAI,EAAG2gE,IAAMtX,MAAM5lD,OAAQzD,EAAI2gE,IAAK3gE,IACpC,GAAGqpD,MAAMrpD,GAAGiiB,KAAKivC,OAASwP,SACtB,OAAO1gE,EAGf,OAAQ,GAIZixD,QAAQ5vD,UAAUu/D,oBAAsB,SAASvX,MAAOz7C,MACpD,IAAI3E,IAAMgZ,KAAK4zC,gBAAgBxM,MAAOz7C,KAAKqU,KAAKivC,MAC7CjoD,KAAO,IAEN2E,KAAK0iB,UAAY+4B,MAAMpgD,KAAKqnB,UAC5B7uB,QAAQyE,KAAK0H,KAAMy7C,MAAMpgD,QAKjCgoD,QAAQ5vD,UAAU00D,yBAA2B,SACzC1M,MAAOqX,UACP,IAAIz3D,IAAMgZ,KAAK4zC,gBAAgBxM,MAAOqX,UACnCz3D,KAAO,GACNogD,MAAMxkD,OAAOoE,IAAK,IAQ1BgoD,QAAQ5vD,UAAUoxD,yBAA2B,WACzC,UAIJxB,QAAQ5vD,UAAUw/D,gBAAkB,SAASxX,MAAOyX,YAChD,IAAI7zB,KAAOhrB,KACP8uC,MAAQ1E,GAAG0E,QACX1mD,OAAS4X,KAAKkvC,SAAW,QA6B7B,OA5BA,SAAS4P,WACL,IAAI72D,OAAS+iC,KAAKwlB,2BAClBvoD,OAAOmR,MAAQ,GAIZguC,MAAM5lD,OAAS,IACdyG,OAAOulC,MAAQ4Z,MAAMA,MAAM5lD,OAAO,GAAGwpC,KAAK2kB,YAE9CprD,iBAAiBkqD,WACbrmD,OAAQH,QAAQvE,KAAK,SAASusB,OAEvBzwB,QAAQsgB,WAAW++C,aAClBr/D,QAAQ4D,QAAQ6sB,MAAO,SAAStkB,MAC5BkzD,WAAWlzD,QAInBy7C,MAAM5kD,KAAK6vD,MAAMjL,MAAOn3B,OACJ,KAAjBA,MAAMzuB,OAELs9D,WAEAhQ,MAAMC,QAAQ3H,QAEnB0H,MAAMiI,QAEjB+H,GACOhQ,MAAM3E,SAIjB6E,QAAQ5vD,UAAU2/D,eAAiB,SAASC,YAAarzD,MACrDnM,QAAQ4D,QAAQ47D,YAAa,SAASlQ,OAClCA,MAAMC,QAAQpjD,SAKtBqjD,QAAQ5vD,UAAU6/D,cAAgB,SAASD,YAAah+D,OACpDxB,QAAQ4D,QAAQ47D,YAAa,SAASlQ,OAClCA,MAAMiI,OAAO/1D,UAKrBguD,QAAQ5vD,UAAUyB,SAAW,WACzB,OAAOmf,KAAKiwC,QAIhBjB,QAAQ5vD,UAAU8/D,MAAQ,WACtBl/C,KAAK8tC,SAAU,EACf9tC,KAAKiwC,OAAOzuD,OAAS,EACrBwe,KAAKs+C,aAAa98D,OAAS,EAC3Bwe,KAAK+zC,eAAevyD,OAAS,EAC7Bwe,KAAKu+C,YAAc,KACnBv+C,KAAKw+C,aACLx+C,KAAKwvC,oBAAoBhuD,OAAS,GAItCwtD,QAAQ5vD,UAAUw7B,UAAY,WAG1B,GAAG5a,KAAK8tC,QACJ,OAAO9tC,KAAKm4C,cAKhB,GAAGn4C,KAAKm+C,WAAY,CAChB,IAAIrP,MAAQ1E,GAAG0E,QAEf,OADA9uC,KAAKo+C,iBAAiB57D,KAAKssD,OACpBA,MAAM3E,QAGjB,IAAInf,KAAOhrB,KAEX,OADAA,KAAKm+C,YAAa,EACXn+C,KAAK4+C,gBAAgB5+C,KAAKiwC,OAAQ,SAAStkD,MAC9CA,KAAK0iB,WAAY,EACjB2c,KAAK6oB,gBAAgBloD,KAAMoyD,iBAAiBC,QAC5ChzB,KAAKsoB,aAAa3nD,QACnBjI,KAAK,WAMJ,OALAsnC,KAAK8iB,SAAU,EACf9iB,KAAKmzB,YAAa,EAClBnzB,KAAKm0B,iBACLn0B,KAAK+zB,eAAe/zB,KAAKozB,iBAAkBpzB,KAAKilB,QAChDjlB,KAAKozB,oBACEpzB,KAAKilB,QACb,SAASjvD,OAGR,OAFAgqC,KAAKi0B,cAAcj0B,KAAKozB,iBAAkBp9D,OAC1CgqC,KAAKozB,oBACEhU,GAAG2M,OAAO/1D,UAKzBguD,QAAQ5vD,UAAU+4D,YAAc,WAG5B,IAAIn4C,KAAK8tC,QACL,OAAO9tC,KAAK4a,YAKhB,GAAG5a,KAAKm+C,WAAY,CAChB,IAAIrP,MAAQ1E,GAAG0E,QAEf,OADA9uC,KAAKq+C,mBAAmB77D,KAAKssD,OACtBA,MAAM3E,QAIjB,IAAInf,KAAOhrB,KAsCX,OADAgrB,KAAKmzB,YAAa,EACXn+C,KAAK4+C,oBAA8Bl7D,KAAK,SAASusB,OAapD,OAlDJ,SAAqBA,OAIjB,IADA,IAAIlyB,EAAIitC,KAAKilB,OAAOzuD,OACdzD,KAAK,CACP,IAAI4N,KAAOq/B,KAAKilB,OAAOlyD,GACnBqhE,WAAap0B,KAAK4oB,gBAClB3jC,MAAOtkB,KAAKq/B,KAAKikB,MACrB,IAAmB,IAAhBmQ,WACCp0B,KAAK6oB,gBAAgBloD,KAAMoyD,iBAAiBn8C,QAC5CopB,KAAKilB,OAAOrtD,OAAO7E,EAAG,GACtBitC,KAAK8oB,yBACD9oB,KAAK+oB,eAAgBpoD,KAAKq/B,KAAKikB,UAChC,CACH,IAAIoQ,YAAcpvC,MAAMmvC,YACxBp0B,KAAK6oB,gBACDwL,YAAatB,iBAAiBE,QAClCoB,YAAYhxC,UAAY1iB,KAAK0iB,UAC7B7uB,QAAQyE,KAAKgsB,MAAMmvC,YAAazzD,MAChCskB,MAAMrtB,OAAOw8D,WAAY,IAKjC5/D,QAAQ4D,QAAQ6sB,MAAO,SAAStkB,MAC5Bq/B,KAAKilB,OAAOztD,KAAKmJ,MACjBq/B,KAAKsoB,aAAa3nD,QAYtB2zD,CAAYrvC,OACZ+a,KAAKmzB,YAAa,EAClBnzB,KAAKm0B,iBAIF3/D,QAAQU,SAAS8qC,KAAKuzB,cACrBvzB,KAAK/8B,cAAc+8B,KAAKuzB,YAAYvzB,KAAKikB,MAG7CjkB,KAAK+zB,eAAe/zB,KAAKqzB,mBAAoBrzB,KAAKilB,QAClDjlB,KAAKqzB,sBACErzB,KAAKilB,QACb,SAASjvD,OAGR,OAFAgqC,KAAKi0B,cAAcj0B,KAAKqzB,mBAAoBr9D,OAC5CgqC,KAAKqzB,sBACEjU,GAAG2M,OAAO/1D,UAKzBguD,QAAQ5vD,UAAUkuD,iBAAmB,WACjC,IAAIttC,KAAK+xC,YAAa,CAClB/xC,KAAK+xC,aAAc,EACnB,IAAI/mB,KAAOhrB,KACXA,KAAKuyC,YAAc,WACfvnB,KAAKmtB,eAET5zD,iBAAiBiuD,gBAAgB,OAAQxyC,KAAKuyC,eAKtDvD,QAAQ5vD,UAAUqzD,kBAAoB,WAC/BzyC,KAAK+xC,cACJxtD,iBAAiBmuD,kBAAkB,OAAQ1yC,KAAKuyC,aAChDvyC,KAAKuyC,YAAc,KACnBvyC,KAAK+xC,aAAc,IAK3B/C,QAAQ5vD,UAAUivD,SAAW,WACzB,OAAOruC,KAAK8tC,SAIhBkB,QAAQ5vD,UAAUyxD,UAAY,WAC1B,OAAO7wC,KAAKm+C,YAIhBnP,QAAQ5vD,UAAUk0D,aAAe,SAAS3nD,QAI1CqjD,QAAQ5vD,UAAUqwD,aAAe,SAAS9jD,MACtCqU,KAAK6zC,gBAAgBloD,KAAMoyD,iBAAiBE,QAC5Cj+C,KAAK2+C,oBAAoB3+C,KAAKiwC,OAAQtkD,OAI1CqjD,QAAQ5vD,UAAU4M,YAAc,SAASyyD,UACrC,IAAIz3D,IAAMgZ,KAAK4zC,gBAAgB5zC,KAAKiwC,OAAQwO,UACzCz3D,KAAO,GACNgZ,KAAK6zC,gBAAgB7zC,KAAKiwC,OAAOjpD,KAAM+2D,iBAAiBn8C,QAE5D5B,KAAK8zC,yBAAyB9zC,KAAKiwC,OAAQwO,UAC3Cz+C,KAAK8zC,yBAAyB9zC,KAAK+zC,eAAgB0K,WAKvDzP,QAAQ5vD,UAAU+C,gBAAkB,SAASs8D,UACzC,IAAIz3D,IAAMgZ,KAAK4zC,gBAAgB5zC,KAAKiwC,OAAQwO,UAC5C,OAAGz3D,KAAO,EACCgZ,KAAKiwC,OAAOjpD,KAEZ,MAKfgoD,QAAQ5vD,UAAUg8B,QAAU,SAASqjC,UACjC,IAAIzzB,KAAOhrB,KACP5X,OAAS4X,KAAKkvC,SAAW,OACzBjnD,UAEJ,OADAA,OAAO+X,KAAKivC,KAAOwP,SACZl6D,iBAAiBkqD,WACpBrmD,OAAQH,QAAQvE,KAAK,SAASiI,MAE1B,OADAq/B,KAAKykB,aAAa9jD,MACXA,QAKnBqjD,QAAQ5vD,UAAUiL,WAAa,SAASsB,MACpC,IAAIq/B,KAAOhrB,KACP5X,OAAS4X,KAAKkvC,SAAW,UAG7B,cAFAvjD,KAAOnM,QAAQyE,KAAK0H,OACR0iB,UACL9pB,iBAAiBkqD,WACpBrmD,OAAQuD,MAAMjI,KAAK,SAASiI,MAExB,OADAq/B,KAAKykB,aAAa9jD,MACXA,QAKnBqjD,QAAQ5vD,UAAUgL,WAAa,SAASuB,MACpC,IAAIq/B,KAAOhrB,KACP5X,OAAS4X,KAAKkvC,SAAW,UAG7B,cAFAvjD,KAAOnM,QAAQyE,KAAK0H,OACR0iB,UACL9pB,iBAAiBkqD,WACpBrmD,OAAQuD,MAAMjI,KAAK,SAASiI,MAExB,OADAq/B,KAAKykB,aAAa9jD,MACXA,QAKnBqjD,QAAQ5vD,UAAU4iC,WAAa,SAASr2B,MACpC,IAAIq/B,KAAOhrB,KACP5X,OAAS4X,KAAKkvC,SAAW,UACzBjnD,UAEJ,OADAA,OAAO+X,KAAKivC,KAAOtjD,KAAKqU,KAAKivC,KACtB1qD,iBAAiBkqD,WACpBrmD,OAAQH,QAAQvE,KAAK,WACjBsnC,KAAKh/B,YAAYL,KAAKq/B,KAAKikB,SAKvCD,QAAQ5vD,UAAUuO,cAAgB,WAC9B,OAAOqS,KAAKu+C,aAIhBvP,QAAQ5vD,UAAU6O,cAAgB,SAASwwD,UACvC,IAAIz+C,KAAK8tC,QACL,MAAM,IAAIvjD,MACN,wDAER,IAAIvD,IAAMgZ,KAAK4zC,gBAAgB5zC,KAAKiwC,OAAQwO,UAC5C,IAAY,IAATz3D,IAAY,CACXgZ,KAAKu+C,YAAc,KAGnB,IAAIzP,MAAQ1E,GAAG0E,QAIf,OAHAhW,SAAS,WACLgW,MAAMiI,OAAO,oBAAsB0H,YAEhC3P,MAAM3E,QAEbnqC,KAAKu+C,YAAcv+C,KAAKiwC,OAAOjpD,KAK/B,IAAIgkC,KAAOhrB,KACP5X,OAAS4X,KAAKkvC,SAAW,cACzBjnD,UAEJ,OADAA,OAAO+X,KAAKivC,KAAOwP,SACZl6D,iBAAiBkqD,WACpBrmD,OAAQH,QAAQvE,KAAK,SAASiI,MAE1B,OADAq/B,KAAKykB,aAAa9jD,MACXq/B,KAAKuzB,eAM5BvP,QAAQ5vD,UAAUmgE,gBAAkB,WAChCv/C,KAAKu+C,YAAc,MAIvBvP,QAAQ5vD,UAAUogE,kBAAoB,WAClC,OAAQx/C,KAAKm+C,YAIjBnP,QAAQ5vD,UAAUgwD,SAAW,SAAS1iD,OAAQpE,MAE1C0X,KAAKs+C,aAAa97D,MACdkK,OAAQA,OACRpE,KAAMA,OAIP0X,KAAKw/C,qBACL12D,WAAW2uC,OAAOz3B,KAAKm/C,mBAK9BnQ,QAAQ5vD,UAAU+/D,eAAiB,WAC/B,KAAMn/C,KAAKs+C,aAAa98D,OAAS,GAAG,CAChC,IAAIkL,OAASsT,KAAKs+C,aAAa12D,QAC/B,GAAqB,WAAlB8E,OAAOA,OAIIsT,KAAK4zC,gBACX5zC,KAAKiwC,OAAQvjD,OAAOpE,KAAK0X,KAAKivC,OACxB,EAGNjvC,KAAKyvC,aAAa/iD,OAAOpE,OAEzBoE,OAAOpE,KAAK+lB,WAAY,EACxBrO,KAAK6zC,gBACDnnD,OAAOpE,KAAMy1D,iBAAiBC,QAClCh+C,KAAKiwC,OAAOztD,KAAKkK,OAAOpE,OAE5B0X,KAAKszC,aAAa5mD,OAAOpE,UACD,WAAlBoE,OAAOA,QACbsT,KAAKyvC,aAAa/iD,OAAOpE,MACzB0X,KAAKszC,aAAa5mD,OAAOpE,OACD,WAAlBoE,OAAOA,QACbsT,KAAKhU,YAAYU,OAAOpE,QAMpC0mD,QAAQ5vD,UAAU6/B,iBAAmB,WACjC,OAAOjf,KAAK+zC,gBAIhB/E,QAAQ5vD,UAAU+gC,WAAa,SAASs+B,UACpC,IAAIz3D,IAAMgZ,KAAK4zC,gBAAgB5zC,KAAKiwC,OAAQwO,UAC5C,IAAY,IAATz3D,IAAH,CAOA,IAAI2E,KAAOqU,KAAKiwC,OAAOjpD,KACvB2E,KAAK0iB,WAAY,GAGL,KADZrnB,IAAMgZ,KAAK+zC,eAAerxD,QAAQiJ,QAE9BqU,KAAK+zC,eAAevxD,KAAKmJ,WAXzBmO,QAAQC,IACJ,sBAAwBiG,KAAKkvC,SAAW,IAAMuP,SAC9C,oDAcZzP,QAAQ5vD,UAAUs/B,aAAe,SAAS+/B,UACtC,IAAIz3D,IAAMgZ,KAAK4zC,gBAAgB5zC,KAAKiwC,OAAQwO,UAC5C,IAAY,IAATz3D,IAAH,CAQA,IAAI2E,KAAOqU,KAAKiwC,OAAOjpD,KACvB2E,KAAK0iB,WAAY,GAEjBrnB,IAAMgZ,KAAK+zC,eAAerxD,QAAQiJ,QACxB,GACNqU,KAAK+zC,eAAenxD,OAAOoE,IAAK,QAZhC8S,QAAQC,IACJ,yBAA2BiG,KAAKkvC,SAAW,IAC3CuP,SAAW,oDAevBzP,QAAQ5vD,UAAU8gC,WAAa,SAASu+B,UACpC,IAAIz3D,IAAMgZ,KAAK4zC,gBAAgB5zC,KAAKiwC,OAAQwO,UAC5C,OAAY,IAATz3D,KACC8S,QAAQC,IACJ,gCAAkCiG,KAAKkvC,SAAW,IAClDuP,SAAW,yDAER,IAG2B,IAA/Bz+C,KAAKiwC,OAAOjpD,KAAKqnB,WAI5B2gC,QAAQ5vD,UAAUqgE,kBAAoB,SAASC,UAAWphE,MACtD,IAAIP,EACJ,IAAIA,EAAI,EAAGA,EAAI2hE,UAAUl+D,OAAQzD,IAC7B,GAAG2hE,UAAU3hE,GAAGO,OAASA,KACrB,OAAOohE,UAAU3hE,GAGzB,OAAO,MAKXixD,QAAQ5vD,UAAUugE,kBAAoB,SAASD,UAAW3gE,OACtD,IAAImgC,SAAWlf,KAAKy/C,kBAAkBC,UAAW3gE,OAC9CmgC,SACCA,SAAS0gC,OAAS,GAElB1gC,UACI5gC,KAAMS,MACN6gE,MAAO,GAEXF,UAAUl9D,KAAK08B,YAKvB8vB,QAAQ5vD,UAAUygE,qBAAuB,SAASH,UAAW3gE,OACzD,IAAImgC,SAAWlf,KAAKy/C,kBAAkBC,UAAW3gE,OAC9CmgC,WACCA,SAAS0gC,OAAS,EACf1gC,SAAS0gC,OAAS,GACjBF,UAAU98D,OAAO88D,UAAUh9D,QAAQw8B,UAAW,KAO1D8vB,QAAQ5vD,UAAU0gE,0BAA4B,SACtCJ,UAAW3e,SAAUr0C,OAAQ+gD,UACjC,IAAIziB,KAAOhrB,KAEX,GAAGtT,SAAWqxD,iBAAiBC,OAC3Bx+D,QAAQ4D,QAAQ29C,SAAU,SAAShiD,OAElB,KAAVA,OAGHisC,KAAK20B,kBAAkBD,UAAW3gE,cAEnC,GAAG2N,SAAWqxD,iBAAiBn8C,OAClCpiB,QAAQ4D,QAAQ29C,SAAU,SAAShiD,OAC/BisC,KAAK60B,qBAAqBH,UAAW3gE,cAEtC,GAAG2N,SAAWqxD,iBAAiBE,QAClCz+D,QAAQomB,UAAU6nC,UAAW,CAG7B,IAAIsS,SACAC,SAAWxgE,QAAQyE,KAAKwpD,UAC5BjuD,QAAQ4D,QAAQ29C,SAAU,SAAShiD,OAC/B,IAAIiI,IAAMg5D,SAASt9D,QAAQ3D,QACf,IAATiI,IAEC+4D,MAAMv9D,KAAKzD,OAGXihE,SAASp9D,OAAOoE,IAAK,KAK7BxH,QAAQ4D,QAAQ28D,MAAO,SAAShhE,OAC5BisC,KAAK20B,kBAAkBD,UAAW3gE,SAItCS,QAAQ4D,QAAQ48D,SAAU,SAASjhE,OAC/BisC,KAAK60B,qBAAqBH,UAAW3gE,WAQjDiwD,QAAQ5vD,UAAU6gE,0BAA4B,SACtCP,UAAW3e,SAAUr0C,OAAQ+gD,UACjC,GAAG/gD,SAAWqxD,iBAAiBC,OAAQ,CAEnC,GAAgB,KAAbjd,SACC,OAEJ/gC,KAAK2/C,kBAAkBD,UAAW3e,eAC5Br0C,SAAWqxD,iBAAiBn8C,OAClC5B,KAAK6/C,qBAAqBH,UAAW3e,UAC/Br0C,SAAWqxD,iBAAiBE,QAClCz+D,QAAQomB,UAAU6nC,WACfA,WAAa1M,WACI,KAAb0M,UAECztC,KAAK6/C,qBAAqBH,UAAWjS,UAKzCztC,KAAKkgD,qBACDR,UAAW3e,SAAUgd,iBAAiBC,OAAQvQ,YAQ9DuB,QAAQ5vD,UAAU8gE,qBAAuB,SACjCR,UAAW3e,SAAUr0C,OAAQ+gD,UAC9BjuD,QAAQiR,QAAQswC,UACf/gC,KAAK8/C,0BACDJ,UAAW3e,SAAUr0C,OAAQ+gD,UAEjCztC,KAAKigD,0BACDP,UAAW3e,SAAUr0C,OAAQ+gD,WAKzCuB,QAAQ5vD,UAAU+/B,YAAc,WAC5B,OAAOnf,KAAKw+C,WAIhBxP,QAAQ5vD,UAAUy0D,gBAAkB,SAASloD,KAAMe,QAC/C,IACIyzD,QAASn5D,IADTgkC,KAAOhrB,KAERtT,SAAWqxD,iBAAiBE,SAG3Bj3D,IAAMgZ,KAAK4zC,gBAAgB5zC,KAAKiwC,OAAQtkD,KAAKqU,KAAKivC,QACxC,IACNkR,QAAUngD,KAAKiwC,OAAOjpD,MAG9BxH,QAAQ4D,QAAQ4c,KAAKwvC,oBAAqB,SAASgG,KAAMzW,MAIrD,IAAIgC,SAAU0M,SAHXjuD,QAAQgI,YAAYwjC,KAAKwzB,UAAUzf,SAClC/T,KAAKwzB,UAAUzf,UAGhBv/C,QAAQsgB,WAAW01C,OAClBzU,SAAWyU,KAAK7pD,MACbnM,QAAQU,SAASigE,WAChB1S,SAAW+H,KAAK2K,YAGpBpf,SAAWp1C,KAAKozC,MACbv/C,QAAQU,SAASigE,WAChB1S,SAAW0S,QAAQphB,QAG3B/T,KAAKk1B,qBACDl1B,KAAKwzB,UAAUzf,MAAOgC,SAAUr0C,OAAQ+gD,aAMpDuB,QAAQ5vD,UAAUuL,QAAU,SAASoB,KACjC,GAAIvM,QAAQU,SAAS6L,KAGrB,OAAGvM,QAAQyM,SAASF,IAAIiU,KAAKk+C,cAClBnyD,IAAIiU,KAAKk+C,kBADpB,GAKGlP,oGCzuBfxvD,QAAQ1B,OAAO,QAAQoZ,QAAQ,wBAC3B,KAAM,WAAY,eAAgB,mBAClC,SAASkzC,GAAItR,SAAUxsC,aAAc/H,kBAGjCyb,KAAKrX,YAAc,SAAS8V,MAAOggB,SAC/B,IAAIqwB,MAAQ1E,GAAG0E,QAIf,OAAGrwB,QAAQwzB,QAAQvvD,QAAQ+b,QAAU,GACjCq6B,SAAS,WACLgW,MAAMC,QAAQtwB,WAEXqwB,MAAM3E,UAKjB5lD,iBAAiBqyD,iBAAiBlzD,KAAK,WACnC,GAAqB,WAAlB+6B,QAAQuzB,MACJvzB,QAAQ4vB,WACPvV,SAAS,WACLra,QAAQwzB,QAAQzvD,KAAKic,OACrBqwC,MAAMC,QAAQtwB,WAGlBA,QAAQ7D,YAAYl3B,KAAK,WACrB+6B,QAAQwzB,QAAQzvD,KAAKic,OACrBqwC,MAAMC,QAAQtwB,UACf,SAASz9B,OACRsL,aAAa0B,WAAWhN,SAKhCy9B,QAAQ6uB,mBAGR7uC,MAAM7V,IAAI,WAAY,WAClB,IAAI5B,IAAMy3B,QAAQwzB,QAAQvvD,QAAQ+b,OAC/BzX,KAAO,GACNy3B,QAAQwzB,QAAQrvD,OAAOoE,IAAK,SAGjC,IAAqB,SAAlBy3B,QAAQuzB,MA2Bd,MAAM,IAAIznD,MAAM,yBAA2Bk0B,QAAQuzB,OA1BhDvzB,QAAQ6vB,YACPxV,SAAS,WACLra,QAAQwzB,QAAQzvD,KAAKic,OACrBqwC,MAAMC,QAAQtwB,WAGlBA,QAAQ/3B,eAAehD,KAAK,WACxB+6B,QAAQwzB,QAAQzvD,KAAKic,OACrBqwC,MAAMC,QAAQtwB,UACf,SAASz9B,OACRsL,aAAa0B,WAAWhN,SAMhCyd,MAAM7V,IAAI,WAAY,WAClB,IAAI5B,IAAMy3B,QAAQwzB,QAAQvvD,QAAQ+b,OAC/BzX,KAAO,GACNy3B,QAAQwzB,QAAQrvD,OAAOoE,IAAK,GAEF,IAA3By3B,QAAQwzB,QAAQzwD,QACfi9B,QAAQ93B,mBAOjBmoD,MAAM3E,UAIjBnqC,KAAKpc,aAAe,SAAS6a,MAAOvM,UAChC,IAAI48C,MAAQ1E,GAAG0E,QACXsR,kBASAp1B,KAAOhrB,KAOX,OANAxgB,QAAQ4D,QAAQ8O,SAAU,SAASusB,SAC/BuM,KAAKriC,YAAY8V,MAAOggB,SAAS/6B,KAAK,SAAS28D,eAC3CD,eAAe59D,KAAK69D,eARrBD,eAAe5+D,SAAW0Q,SAAS1Q,QAClCstD,MAAMC,QAAQ78C,cAWf48C,MAAM3E,SAMjBnqC,KAAKsgD,eAAiB,SAASnwC,QAC3B,IAAInvB,iBACJ,IACIA,MAAQ47D,KAAKC,MAAM1sC,QACrB,MAAM4sC,GACJ,QAAIA,eAAawD,0HACb,OAAOpwC,OAEP,MAAM4sC,EAGd,OAAO/7D,OAKXgf,KAAKwgD,mBAAqB,SAASC,KAAMC,WACrC,IAAIziD,OAAS,GAeb,OAdAze,QAAQ4D,QAAQq9D,KAAM,SAAS1hE,MAAO4Q,KAClC,IAAI3O,MAAQy/D,KAAK9wD,MACA,IAAd+wD,YACCziD,QAAUtO,IAAM,MAEjBnQ,QAAQyM,SAASjL,QAAUxB,QAAQyC,SAASjB,OAC3Cid,QAAUjd,MAAQ,KACZxB,QAAQU,SAASc,QACvBxB,QAAQ4D,QAAQpC,MAAO,SAASA,OAC5Bid,QAAUjd,MAAQ,OAG1Bid,OAASA,OAAO4nC,OAAS,OAEtB5nC,OAAO4nC,QAMlB7lC,KAAKrc,qBAAuB,SAAS3C,MAAO0/D,WAExC,OADA1/D,MAAQgf,KAAKsgD,eAAet/D,OACxBxB,QAAQU,SAASc,OAGVgf,KAAKwgD,mBAAmBx/D,MAAO0/D,WAF/B1/D,oGChJvBxB,QAAQ1B,OAAO,QAAQwgD,QACnB,kBACC,KAAM,WAAY,mBAAoB,UACvC,SAAS8L,GAAItR,SAAUv0C,iBAAkByqD,SAErC,SAASU,iBACLV,QAAQ9wD,KAAK8hB,MAKbA,KAAKgyC,MAAQ,OAGbhyC,KAAKguC,UAAW,EAGhBhuC,KAAKiuC,aAAe,KAIpBjuC,KAAKkuC,aAAe,IAIpBluC,KAAKmuC,kBAAoB,IAIzBnuC,KAAKouC,kBAAoB,IAsD7B,OAnDAsB,eAAetwD,UAAY,IAAI4vD,QAG/BU,eAAetwD,UAAUkvD,UAAY,WACjC,OAAOtuC,KAAKguC,UAIhB0B,eAAetwD,UAAUsH,aAAe,WACpC,OAAIsZ,KAAKguC,SAIEhuC,KAAKiuC,cAHZjuC,KAAKguC,UAAW,EACThuC,KAAKuuC,UAOpBmB,eAAetwD,UAAUuH,YAAc,WACnCqZ,KAAKguC,UAAW,EACbxuD,QAAQU,SAAS8f,KAAKiuC,gBACrBnV,SAASj2C,OAAOmd,KAAKiuC,cACrBjuC,KAAKiuC,aAAe,OAK5ByB,eAAetwD,UAAUuvD,WAAa,SAASzN,SAC3C,IAAIlW,KAAOhrB,KAIX,OAHAA,KAAKiuC,aAAenV,SAAS,WACzB9N,KAAKujB,SACNrN,SACIlhC,KAAKiuC,cAIhByB,eAAetwD,UAAUmvD,MAAQ,WAC7B,IAAIvjB,KAAOhrB,KACX,OAAOA,KAAKm4C,cAAcz0D,KAAK,SAASusB,OACpC,IAAI2+B,YAAc5jB,KAAKkjB,aAKvB,OAJoB,IAAjBj+B,MAAMzuB,SACLotD,YAAc5jB,KAAKojB,mBAEvBpjB,KAAK2jB,WAAWC,aACT3+B,OACR,SAASjvB,OAER,OADAgqC,KAAK2jB,WAAW3jB,KAAKmjB,mBACd/D,GAAG2M,OAAO/1D,UAIlB0uD,oGCvFflwD,QAAQ1B,OAAO,QAAQoZ,QAAQ,gBAAiB,WAG5C,IAAIypD,aAAgBC,MAGpB5gD,KAAKqf,eAAiB,WAClB,OAAO7/B,QAAQyE,KAAK08D,cASxB3gD,KAAK6gD,eAAiB,SAAS10D,QAC3B,IAAIitD,MAAQjtD,OAAOf,MAAM,KACrB01D,cACAC,qBAAsB,EA0B1B,OAzBAvhE,QAAQ4D,QAAQg2D,MAAO,SAASC,KAAMryD,KAClC,GAAG+5D,oBAGCD,WAAWA,WAAWt/D,OAAS,IAAM,IAAM63D,MAIjB,IAAvBA,KAAK32D,QAAQ,OACZq+D,qBAAsB,OAEvB,CAEHD,WAAWt+D,KAAK62D,MAEhB,IAAI2H,SAAW3H,KAAK32D,QAAQ,MACX,IAAds+D,WACqC,IAAjC3H,KAAK32D,QAAQ,IAAKs+D,YAEjBD,qBAAsB,MAMnCA,oBAEQ,KAEJD,YAIX9gD,KAAK0gB,kBAAoB,SAASv0B,QAC9B,IAAIizB,QAAUpf,KAAKqf,iBACnB,GAAqB,IAAlBlzB,OAAO3K,OACN,OAAO49B,QAEX,IAAI6hC,YAAcjhD,KAAK6gD,eAAe10D,QACtC,OAAI80D,aAGJzhE,QAAQ4D,QAAQ69D,YAAa,SAAS7H,OAElC,GAAoB,KADpBA,MAAQA,MAAMhuD,MAAM,MACX5J,QAG+B,IAAjC49B,QAAQwhC,EAAEl+D,QAAQ02D,MAAM,KACvBh6B,QAAQwhC,EAAEp+D,KAAK42D,MAAM,QAEtB,CACH,IAAI7xD,MAAQ6xD,MAAMxxD,QACds7C,OAASkW,MAAMp/B,KAAK,KAOxB,GAAqB,KAHrBkpB,QADAA,OAASA,OAAO1M,QAAQ,IAAK,KACbA,QAAQ,IAAK,KAGnBh1C,OACN,OAIJ0hD,OAASA,OAAO93C,MAAM,KAGnB5L,QAAQgI,YAAY43B,QAAQ73B,UAC3B63B,QAAQ73B,WAEZ/H,QAAQ4D,QAAQ8/C,OAAQ,SAASnkD,QACS,IAAnCqgC,QAAQ73B,OAAO7E,QAAQ3D,QACtBqgC,QAAQ73B,OAAO/E,KAAKzD,YAK7BqgC,SArCI,MAyCfpf,KAAKwgB,gBAAkB,SAASpB,SAC5B,IAAIjzB,OAAS,GAYb,OAXA3M,QAAQ4D,QAAQg8B,QAAS,SAASg6B,MAAOnzD,MAGjB,IAAjBmzD,MAAM53D,QAAyB,MAATyE,OAGzBkG,QAAUlG,KAAO,KAAOmzD,MAAMp/B,KAAK,KAAO,QAE3CoF,QAAQwhC,EAAEp/D,OAAS,IAClB2K,OAASizB,QAAQwhC,EAAE5mC,KAAK,KAAO,IAAM7tB,QAElCA,OAAO05C,QAIlB7lC,KAAKkhD,qBAAuB,SAAS9hC,QAASn5B,KAAMlH,OAChD,IAAImkD,OAAS9jB,QAAQn5B,MACrB,OAAGzG,QAAQgI,YAAY07C,SACX,EAEMA,OAAOr7C,IAAI,SAAS9I,OAClC,OAAOA,MAAMi+B,gBAEEt6B,QAAQ3D,MAAMi+B,gBAIrChd,KAAKygB,eAAiB,SAASrB,QAASn5B,KAAMlH,MAAOi6D,OACjD,IAAI9V,OAAS9jB,QAAQn5B,MACrB,OAAGzG,QAAQgI,YAAY07C,UAGpB1jD,QAAQgI,YAAYwxD,SACnBA,OAAQ,GAETA,QACCj6D,MAAQ,IAAMA,QAE0C,IAArDihB,KAAKkhD,qBAAqB9hC,QAASn5B,KAAMlH,SAIpDihB,KAAKugB,aAAe,SAASnB,QAASn5B,KAAMlH,MAAOi6D,OAC5Cx5D,QAAQgI,YAAY43B,QAAQn5B,SAC3Bm5B,QAAQn5B,UAET+yD,QACCj6D,MAAQ,IAAMA,OAElB,IAAIiI,IAAMgZ,KAAKkhD,qBAAqB9hC,QAASn5B,KAAMlH,OAMnD,OALY,IAATiI,IACCo4B,QAAQn5B,MAAMzD,KAAKzD,OAEnBqgC,QAAQn5B,MAAMrD,OAAOoE,IAAK,GAEvBo4B,SAIX,IAAI+hC,iBAGJnhD,KAAKmhB,aAAe,SAAS7iC,KAAM8gC,SAC/B+hC,cAAc7iE,MAAQ8gC,SAI1Bpf,KAAKqhB,gBAAkB,SAAS/iC,MAC5B,OAAO6iE,cAAc7iE,+FCzK7BkB,QAAQ1B,OAAO,QAAQoZ,QAAQ,qBAC3B,mBAAoB,SAASsU,kBAKzB,IAAI41C,kBACA,yCAGAC,gBACA,wDAGAC,WAAa,yCAGbC,YAAc,IAAI/wC,QAClB,6CACA,4CACA,4CACA,2CACEwJ,KAAK,KAIX,SAASwnC,YAAYC,IAAKC,IAAK9sC,KAAM+sC,MAEjC,IADA,IAAItF,KAAO,EACLsF,KAAO,GAAG,CACZ,IAAI/5D,MAAQgtB,KAAO+sC,KAOnB,GANG/5D,MAAQ,IACPA,MAAQ,GAGG65D,IAAIpF,OAASz0D,QACb85D,IAAIrF,OAASz0D,MAExB,OAAO,EAEX+5D,MAAQ/sC,KACRynC,MAAQ,EAEZ,OAAO,EAIXr8C,KAAKjc,mBAAqB,SAAS69D,YAG/B,SAAIpiE,QAAQyM,SAAS21D,aACK,IAAtBA,WAAWpgE,QAAgBogE,WAAWpgE,OAAS,MAG5C4/D,kBAAkBnsC,KAAK2sC,aAIlC5hD,KAAKve,iBAAmB,SAASwB,UAG7B,SAAIzD,QAAQyM,SAAShJ,WACG,IAApBA,SAASzB,QAAgByB,SAASzB,OAAS,KAGxC6/D,gBAAgBpsC,KAAKhyB,WAIhC+c,KAAKpe,YAAc,SAASigE,YAExB,QAAIriE,QAAQyM,SAAS41D,aAGdP,WAAWrsC,KAAK4sC,WAAWhc,SAItC7lC,KAAK8hD,aAAe,SAASthE,WAEzB,SAAIhB,QAAQyM,SAASzL,YAAmC,IAArBA,UAAUgB,SAGtC+/D,YAAYtsC,KAAKz0B,YAI5Bwf,KAAK+hD,aAAe,SAASvhE,WAGzB,IAAIhB,QAAQyM,SAASzL,YACI,IAArBA,UAAUgB,SACkB,IAA5BhB,UAAUkC,QAAQ,KAClB,OAAO,EAEX,IAOI3E,EAPAw+D,gBAAkB/wC,iBAAiBkd,WAAWloC,WAC9C47D,OAAS5wC,iBAAiBkxC,aAAaH,iBAC3C,GAAqB,IAAlBH,OAAO56D,OACN,OAAO,EAKX,IAAIzD,EAAI,EAAGA,EAAI,EAAGA,IACd,GAAGgQ,MAAMquD,OAAOr+D,KAAOq+D,OAAOr+D,GAAK,GAAKq+D,OAAOr+D,GAAK,MAEhD,OAAO,EAMf,QAAGq+D,OAAO,GAAK,GACG,QAAdA,OAAO,IACO,QAAdA,OAAO,KAOfp8C,KAAKle,WAAa,SAAStB,WACvB,OACIwf,KAAK8hD,aAAathE,YAAcwf,KAAK+hD,aAAavhE,YAI1Dwf,KAAKje,oBAAsB,SAASvB,UAAWwhE,SAC3C,IAAIC,aAAeD,QAAQ52D,MAAM,KAC7B82D,eAAiBD,aAAa,GAC9BE,SAAWt0D,SAASo0D,aAAa,GAAI,IAEzC,OAAGjiD,KAAK8hD,aAAathE,YACjBwf,KAAK8hD,aAAaI,gBACXV,YACHh2C,iBAAiB2wC,aAAa37D,WAC9BgrB,iBAAiB2wC,aAAa+F,gBAC9B,EAAGC,aACDniD,KAAK+hD,aAAavhE,aACxBwf,KAAK+hD,aAAaG,kBACXV,YACHh2C,iBAAiBkxC,aAAal8D,WAC9BgrB,iBAAiBkxC,aAAawF,gBAC9B,GAAIC,WAOhBniD,KAAKoiD,kBAAoB,SACrB5hE,UAAWwhE,QAASK,WAAYC,aAGhC,IAAItiD,KAAKje,oBAAoBvB,UAAWwhE,SACpC,OAAO,EAGX,IAAIjkE,EAAGwkE,SAAUC,UAAWC,WAC5B,GAAGziD,KAAK8hD,aAAathE,YACjBwf,KAAK8hD,aAAaO,aAClBriD,KAAK8hD,aAAaQ,aAAc,CAOhC,IAHAC,SAAW/2C,iBAAiB2wC,aAAa37D,WACzCgiE,UAAYh3C,iBAAiB2wC,aAAakG,YAC1CI,WAAaj3C,iBAAiB2wC,aAAamG,aACvCvkE,EAAI,EAAGA,EAAI,EAAGA,IACd,GAAGwkE,SAASxkE,GAAK0kE,WAAW1kE,IACxBwkE,SAASxkE,GAAKykE,UAAUzkE,GACxB,OAAO,EAGf,OAAO,EACJ,GAAGiiB,KAAK+hD,aAAavhE,YACxBwf,KAAK+hD,aAAaM,aAClBriD,KAAK+hD,aAAaO,aAAc,CAOhC,IAHAC,SAAW/2C,iBAAiBkxC,aAAal8D,WACzCgiE,UAAYh3C,iBAAiBkxC,aAAa2F,YAC1CI,WAAaj3C,iBAAiBkxC,aAAa4F,aACvCvkE,EAAI,EAAGA,EAAI,EAAGA,IACd,GAAGwkE,SAASxkE,GAAK0kE,WAAW1kE,IACxBwkE,SAASxkE,GAAKykE,UAAUzkE,GACxB,OAAO,EAGf,OAAO,EAEX,OAAO,2ECvMnB,IAiFMsmD,SAiDAqe,UAuCAC,MAeAC,SAWAC,cAnMFC,OAASA,WAObA,OAAOC,OAyGH7sB,MAlGU,SAAS8sB,KACfvoB,SAASwoB,YAAsC,aAAxBxoB,SAASyoB,WACR,YAAxBzoB,SAASyoB,YACXF,KAEAvoB,SAAS0oB,iBAAiB,mBAAoBH,KA8FhD5zB,YAlFgB,SAASg0B,GAAIC,WAC7B,QAAkB,IAAPD,IAA4B,MAANA,GAc/B,OAAO,EAbP,GAAIA,GAAGE,UACLF,GAAGE,UAAUC,OAAOF,eACf,CACL,IAAInpB,QAAUkpB,GAAGC,UAAUj4D,MAAM,KAC7Bo4D,cAAgBtpB,QAAQx3C,QAAQ2gE,WAChCG,eAAiB,EACnBtpB,QAAQt3C,OAAO4gE,cAAe,GAE9BtpB,QAAQ13C,KAAK6gE,WAEfD,GAAGC,UAAYnpB,QAAQlgB,KAAK,KAKhC,OAAO,GAkEPgjB,YAvDgB,SAASomB,GAAIC,WAC7B,YAAkB,IAAPD,IAA4B,MAANA,KAC3BA,GAAGE,UACLF,GAAGE,UAAUj7C,OAAOg7C,WAEpBD,GAAGC,UAAYD,GAAGC,UAAU7sB,QAAQ,IAAIhmB,OACtC,UAAY6yC,UAAUj4D,MAAM,KAAK4uB,KAAK,KAAO,UAAW,MAAO,MAK9D,IA6CPqqB,SAlCEA,SAAW,SAAS+e,GAAIC,WAC1B,IAAIhf,UAAW,EASf,OANEA,SADE+e,GAAGE,UACMF,GAAGE,UAAUG,SAASJ,WAEtB,IAAI7yC,OACb,QAAU6yC,UAAY,QAAS,MAAMpuC,KAAKmuC,GAAGC,WAG1Chf,UAyBPtI,SAfa,SAASqnB,GAAIC,WACrBhf,SAAS+e,GAAIC,aACZD,GAAGE,UACLF,GAAGE,UAAU76C,IAAI46C,WAEjBD,GAAGC,WAAa,IAAMA,aAkB9BP,OAAO7oC,UA6CD0oC,MAAQ,SAASplD,OACfulD,OAAOC,MAAM1e,SAASrkC,KAzCN,UA0ClB6iD,gBAEAD,SAAS5iD,MAEXzC,MAAMi6B,mBASJorB,SAAW,SAASQ,IACtBP,gBACAC,OAAOC,MAAMhnB,SAASqnB,GAzDF,WAkElBP,cAAgB,SAAStlD,OAC3BsgD,MAAMz+D,UAAUgE,QAAQlF,KAAKwkE,UAAW,SAASzoC,SAAUl8B,GAEzD+kE,OAAOC,MAAM/lB,YAAY/iB,SArEP,iBAwEA,IAAT1c,OACTA,MAAMi6B,oBAKRksB,KAtES,WAuBT,OAtBAhB,UAAYjoB,SAASkpB,iBAAiB,eAEtC9F,MAAMz+D,UAAUgE,QAAQlF,KAAKwkE,UAAW,SAASzoC,SAAUl8B,GAEzDk8B,SAASkpC,iBAAiB,QAASR,OAGnC,IAAIiB,SAAW3pC,SAAS0pC,iBAAiB,qBACzC9F,MAAMz+D,UAAUgE,QAAQlF,KAAK0lE,SAAU,SAASpsD,KAAMzZ,GACpDyZ,KAAK2rD,iBAAiB,QAASN,iBAKjCpoB,SAAS0oB,iBAAiB,QAAS,SAAS5lD,OACtB0c,SAASwpC,SAASlmD,MAAM0vC,SAE1C4V,qBAKC,KAmDXC,OAAOC,MAAM7sB,MAAM4sB,OAAO7oC,SAASypC","file":"maas-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Device Controller\n */\n\nangular.module('MAAS').controller('AddDeviceController', [\n    '$scope', 'DevicesManager', 'SubnetsManager', 'DomainsManager',\n    'ManagerHelperService', 'ValidationService', function(\n        $scope, DevicesManager, SubnetsManager, DomainsManager,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addDeviceScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addDeviceScope = $scope;\n\n        // Set initial values.\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.viewable = false;\n        $scope.error = null;\n\n        // Device ip assignment options.\n        $scope.ipAssignments = [\n            {\n                name: \"external\",\n                title: \"External\"\n            },\n            {\n                name: \"dynamic\",\n                title: \"Dynamic\"\n            },\n            {\n                name: \"static\",\n                title: \"Static\"\n            }\n        ];\n\n        // Makes a new interface.\n        function makeInterface() {\n            return {\n                mac: \"\",\n                ipAssignment: null,\n                subnetId: null,\n                ipAddress: \"\"\n            };\n        }\n\n        // Makes a new device.\n        function newDevice(cloneDevice) {\n            if(angular.isObject(cloneDevice)) {\n                return {\n                    name: \"\",\n                    domain: cloneDevice.domain,\n                    interfaces: [makeInterface()]\n                };\n            } else {\n                return {\n                    name: \"\",\n                    domain: DomainsManager.getDefaultDomain(),\n                    interfaces: [makeInterface()]\n                };\n            }\n        }\n\n        // Input values.\n        $scope.device = null;\n\n        // Converts the device information from how it is held in the UI to\n        // how it is handled over the websocket.\n        function convertDeviceToProtocol(device) {\n            // Return the new object.\n            var convertedDevice = {\n                hostname: device.name,\n                domain: device.domain,\n                primary_mac: device.interfaces[0].mac,\n                extra_macs: [],\n                interfaces: []\n            };\n            var i;\n            for(i = 1; i < device.interfaces.length; i++) {\n                convertedDevice.extra_macs.push(device.interfaces[i].mac);\n            }\n            angular.forEach(device.interfaces, function(nic) {\n                convertedDevice.interfaces.push({\n                    mac: nic.mac,\n                    ip_assignment: nic.ipAssignment.name,\n                    ip_address: nic.ipAddress,\n                    \"subnet\": nic.subnetId\n                });\n            });\n            return convertedDevice;\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function() {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n            $scope.device = newDevice();\n            $scope.viewable = true;\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            // Emit the hidden event.\n            $scope.$emit('addDeviceHidden');\n        };\n\n        // Returns true if the name is in error.\n        $scope.nameHasError = function() {\n            // If the name is empty don't show error.\n            if($scope.device === null || $scope.device.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateHostname($scope.device.name);\n        };\n\n        // Returns true if the MAC is in error.\n        $scope.macHasError = function(deviceInterface) {\n            // If the MAC is empty don't show error.\n            if(deviceInterface.mac.length === 0) {\n                return false;\n            }\n            // If the MAC is invalid show error.\n            if(!ValidationService.validateMAC(deviceInterface.mac)) {\n                return true;\n            }\n            // If the MAC is the same as another MAC show error.\n            var i;\n            for(i = 0; i < $scope.device.interfaces.length; i++) {\n                var isSelf = $scope.device.interfaces[i] === deviceInterface;\n                if(!isSelf &&\n                    $scope.device.interfaces[i].mac === deviceInterface.mac) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Returns true if the IP address is in error.\n        $scope.ipHasError = function(deviceInterface) {\n            // If the IP is empty don't show error.\n            if(deviceInterface.ipAddress.length === 0) {\n                return false;\n            }\n            // If ip address is invalid, then exit early.\n            if(!ValidationService.validateIP(deviceInterface.ipAddress)) {\n                return true;\n            }\n            var i, inNetwork;\n            if(angular.isObject(deviceInterface.ipAssignment)){\n                if(deviceInterface.ipAssignment.name === \"external\") {\n                    // External IP address cannot be within a known subnet.\n                    for(i = 0; i < $scope.subnets.length; i++) {\n                        inNetwork = ValidationService.validateIPInNetwork(\n                            deviceInterface.ipAddress,\n                            $scope.subnets[i].cidr);\n                        if(inNetwork) {\n                            return true;\n                        }\n                    }\n                } else if(deviceInterface.ipAssignment.name === \"static\" &&\n                    angular.isNumber(deviceInterface.subnetId)) {\n                    // Static IP address must be within a subnet.\n                    var subnet = SubnetsManager.getItemFromList(\n                        deviceInterface.subnetId);\n                    inNetwork = ValidationService.validateIPInNetwork(\n                        deviceInterface.ipAddress, subnet.cidr);\n                    if(!inNetwork) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return true when the device is missing information or invalid\n        // information.\n        $scope.deviceHasError = function() {\n            if($scope.device === null || $scope.device.name === '' ||\n                    $scope.nameHasError()) {\n                return true;\n            }\n\n            var i;\n            for(i = 0; i < $scope.device.interfaces.length; i++) {\n                var deviceInterface = $scope.device.interfaces[i];\n                if(deviceInterface.mac === '' ||\n                    $scope.macHasError(deviceInterface) ||\n                    !angular.isObject(deviceInterface.ipAssignment)) {\n                    return true;\n                }\n                var externalIpError = (\n                    deviceInterface.ipAssignment.name === \"external\" && (\n                        deviceInterface.ipAddress === '' ||\n                        $scope.ipHasError(deviceInterface)));\n                var staticIpError = (\n                    deviceInterface.ipAssignment.name === \"static\" && (\n                        !angular.isNumber(deviceInterface.subnetId) ||\n                        $scope.ipHasError(deviceInterface)));\n                if(externalIpError || staticIpError) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Adds new interface to device.\n        $scope.addInterface = function() {\n            $scope.device.interfaces.push(makeInterface());\n        };\n\n        // Returns true if the first interface in the device interfaces array.\n        $scope.isPrimaryInterface = function(deviceInterface) {\n            return $scope.device.interfaces.indexOf(deviceInterface) === 0;\n        };\n\n        // Removes the interface from the devices interfaces array.\n        $scope.deleteInterface = function(deviceInterface) {\n            // Don't remove the primary.\n            if($scope.isPrimaryInterface(deviceInterface)) {\n                return;\n            }\n            $scope.device.interfaces.splice(\n                $scope.device.interfaces.indexOf(deviceInterface), 1);\n        };\n\n        // Called when cancel clicked.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.device = newDevice();\n            $scope.hide();\n        };\n\n        // Called when save is clicked.\n        $scope.save = function(addAnother) {\n            // Do nothing if device in error.\n            if($scope.deviceHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Create the device.\n            var device = convertDeviceToProtocol($scope.device);\n            DevicesManager.create(device).then(function(device) {\n                if(addAnother) {\n                    $scope.device = newDevice($scope.device);\n                } else {\n                    $scope.device = newDevice();\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load subnets to get the available subnets.\n        ManagerHelperService.loadManagers(\n            $scope, [SubnetsManager, DomainsManager]).then(function() {\n                // Initial device.\n                $scope.device = newDevice();\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Domain Controller\n */\n\nangular.module('MAAS').controller('AddDomainController', [\n    '$scope', 'DomainsManager', 'ManagerHelperService',\n    'ValidationService', function($scope, DomainsManager,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addDomainScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addDomainScope = $scope;\n\n        // Set initial values.\n        $scope.viewable = false;\n        $scope.error = null;\n\n        // Makes a new domain.\n        function makeDomain() {\n            return {\n                name: \"\",\n                authoritative: true\n            };\n        }\n\n        // Initial domain.\n        $scope.domain = makeDomain();\n\n        // Converts the domain information from how it is held in the UI to\n        // how it is handled over the websocket.  Since they're identical, we\n        // just return a copy: some day, they might be different, so we retain\n        // the function against that day.\n        function convertDomainToProtocol(domain) {\n            return angular.copy(domain);\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function() {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n            $scope.domain = makeDomain();\n            $scope.viewable = true;\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            // Emit the hidden event.\n            $scope.$emit('addDomainHidden');\n        };\n\n        // Returns true if the name is in error.\n        $scope.nameHasError = function() {\n            // If the name is empty don't show error.\n            if($scope.domain.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateDomainName($scope.domain.name);\n        };\n\n        // Return true when the domain is missing information or invalid\n        // information.\n        $scope.domainHasError = function() {\n            if($scope.domain.name === '' || $scope.nameHasError()) {\n                return true;\n            }\n\n            return false;\n        };\n\n        // Called when cancel clicked.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.domain = makeDomain();\n            $scope.hide();\n        };\n\n        // Called when save is clicked.\n        $scope.save = function(addAnother) {\n            // Do nothing if domain in error.\n            if($scope.domainHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the domain.\n            $scope.error = null;\n\n            // Create the domain.\n            var domain = convertDomainToProtocol($scope.domain);\n            DomainsManager.create(domain).then(function() {\n                $scope.domain = makeDomain();\n                if(!addAnother) {\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Hardware Controller\n */\n\nangular.module('MAAS').controller('AddHardwareController', [\n    '$scope', '$http', 'ZonesManager', 'MachinesManager',\n    'GeneralManager', 'DomainsManager', 'RegionConnection',\n    'ManagerHelperService', 'ValidationService', function(\n        $scope, $http, ZonesManager, MachinesManager,\n        GeneralManager, DomainsManager, RegionConnection,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addHardwareScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addHardwareScope = $scope;\n\n        // Set initial values.\n        $scope.viewable = false;\n        $scope.model = 'machine';\n        $scope.zones = ZonesManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.architectures = GeneralManager.getData(\"architectures\");\n        $scope.hwe_kernels = GeneralManager.getData(\"hwe_kernels\");\n        $scope.default_min_hwe_kernel = GeneralManager.getData(\n            \"default_min_hwe_kernel\");\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.error = null;\n        $scope.macAddressRegex = /^([0-9A-F]{2}[::]){5}([0-9A-F]{2})$/gmi;\n\n        // Input values.\n        $scope.machine = null;\n        $scope.chassis = null;\n\n        // Hard coded chassis types. This is because there is no method in\n        // MAAS to get a full list of supported chassis. This needs to be\n        // fixed ASAP.\n        var virshFields = [\n            {\n                name: 'hostname',\n                label: 'Address',\n                field_type: 'string',\n                \"default\": '',  // Using \"default\" to make lint happy.\n                choices: [],\n                required: true\n            },\n            {\n                name: 'password',\n                label: 'Password',\n                field_type: 'string',\n                \"default\": '',\n                choices: [],\n                required: false\n            },\n            {\n                name: 'prefix_filter',\n                label: 'Prefix filter',\n                field_type: 'string',\n                \"default\": '',\n                choices: [],\n                required: false\n            }\n        ];\n        $scope.chassisPowerTypes = [\n            {\n                name: 'mscm',\n                description: 'Moonshot Chassis Manager',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Host',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'powerkvm',\n                description: 'PowerKVM',\n                fields: virshFields\n            },\n            {\n                name: 'recs_box',\n                description: 'Christmann RECS|Box',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Hostname',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'port',\n                        label: 'Port',\n                        field_type: 'string',\n                        \"default\": '80',\n                        choices: [],\n                        required: false\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'seamicro15k',\n                description: 'SeaMicro 15000',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Hostname',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'power_control',\n                        label: 'Power Control',\n                        field_type: 'choice',\n                        \"default\": 'restapi2',\n                        choices: [\n                            ['restapi2', 'REST API V2.0'],\n                            ['restapi', 'REST API V0.9'],\n                            ['ipmi', 'IPMI']\n                        ],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'ucsm',\n                description: 'UCS Chassis Manager',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'URL',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'virsh',\n                description: 'Virsh (virtual systems)',\n                fields: virshFields\n            },\n            {\n                name: 'vmware',\n                description: 'VMware',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Host',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'prefix_filter',\n                        label: 'Prefix filter',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: false\n                    }\n                ]\n            }\n        ];\n\n        // Get the default zone from the loaded zones.\n        function defaultZone() {\n            if($scope.zones.length === 0) {\n                return null;\n            } else {\n                return $scope.zones[0];\n            }\n        }\n\n        // Get the default architecture from the loaded architectures.\n        function defaultArchitecture() {\n            if($scope.architectures.length === 0) {\n                return '';\n            } else {\n                // Return amd64/generic first if available.\n                var i;\n                for(i = 0; i < $scope.architectures.length; i++) {\n                    if($scope.architectures[i] === \"amd64/generic\") {\n                        return $scope.architectures[i];\n                    }\n                }\n                return $scope.architectures[0];\n            }\n        }\n\n        // Return a new MAC address object.\n        function newMAC() {\n            return {\n                mac: '',\n                error: false\n            };\n        }\n\n        // Return a new machine object.\n        function newMachine(cloneMachine) {\n            // Clone the machine instead of just creating a new one.\n            // This helps the user by already having the previous selected\n            // items selected for the new machine.\n            if(angular.isObject(cloneMachine)) {\n                return {\n                    name: '',\n                    domain: cloneMachine.domain,\n                    macs: [newMAC()],\n                    zone: cloneMachine.zone,\n                    architecture: cloneMachine.architecture,\n                    min_hwe_kernel: cloneMachine.min_hwe_kernel,\n                    power: {\n                        type: cloneMachine.power.type,\n                        parameters: {}\n                    }\n                };\n            }\n\n            // No clone machine. So create a new blank machine.\n            return {\n                name: '',\n                domain: DomainsManager.getDefaultDomain(),\n                macs: [newMAC()],\n                zone: defaultZone(),\n                architecture: defaultArchitecture(),\n                min_hwe_kernel: $scope.default_min_hwe_kernel.text,\n                power: {\n                    type: null,\n                    parameters: {}\n                }\n            };\n        }\n\n        // Return a new chassis object.\n        function newChassis(cloneChassis) {\n            // Clone the chassis instead of just creating a new one.\n            // This helps the user by already having the previous selected\n            // items selected for the new machine.\n            if(angular.isObject(cloneChassis)) {\n                return {\n                    domain: cloneChassis.domain,\n                    power: {\n                        type: null,\n                        parameters: {}\n                    }\n                };\n            } else {\n                return {\n                    domain: DomainsManager.getDefaultDomain(),\n                    power: {\n                        type: null,\n                        parameters: {}\n                    }\n                };\n            }\n        }\n\n        // Converts the machine information from how it is held in the UI to\n        // how it is handled over the websocket.\n        function convertMachineToProtocol(machine) {\n            // Convert the mac addresses.\n            var macs = angular.copy(machine.macs);\n            var pxe_mac = macs.shift().mac;\n            var extra_macs = macs.map(function(mac) { return mac.mac; });\n\n            // Return the new object.\n            return {\n                hostname: machine.name,\n                domain: machine.domain,\n                architecture: machine.architecture,\n                min_hwe_kernel: machine.min_hwe_kernel,\n                pxe_mac: pxe_mac,\n                extra_macs: extra_macs,\n                power_type: machine.power.type.name,\n                power_parameters: angular.copy(machine.power.parameters),\n                zone: {\n                    id: machine.zone.id,\n                    name: machine.zone.name\n                }\n            };\n        }\n\n        // Validate that all the parameters are there for the given power type.\n        function powerParametersHasError(power_type, parameters) {\n            var i;\n            for(i = 0; i < power_type.fields.length; i++) {\n                var field = power_type.fields[i];\n                var value = parameters[field.name];\n                if(field.required) {\n                    if(angular.isUndefined(value) || value === '') {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function(mode) {\n            // Change the mode.\n            if($scope.mode !== mode) {\n                if($scope.mode === \"machine\") {\n                    $scope.machine = newMachine();\n                } else if($scope.mode === \"chassis\") {\n                    $scope.chassis = newChassis();\n                }\n                $scope.error = null;\n                $scope.mode = mode;\n            }\n\n            // Exit early if alreayd viewable.\n            if($scope.viewable) {\n                return;\n            }\n            $scope.viewable = true;\n\n            // Start the polling of architectures.\n            GeneralManager.startPolling($scope, \"architectures\");\n\n            // Start the polling of hwe_kernels.\n            GeneralManager.startPolling($scope, \"hwe_kernels\");\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            // Stop the polling of architectures.\n            GeneralManager.stopPolling($scope, \"architectures\");\n\n            // Stop the polling of hwe_kernels.\n            GeneralManager.stopPolling($scope, \"hwe_kernels\");\n\n            // Emit the hidden event.\n            $scope.$emit('addHardwareHidden');\n        };\n\n        // Return True when architectures loaded and in machine mode.\n        $scope.showMachine = function() {\n            if($scope.architectures.length === 0) {\n                return false;\n            }\n            return $scope.mode === \"machine\";\n        };\n\n        // Return True when architectures loaded and in chassis mode.\n        $scope.showChassis = function() {\n            if($scope.architectures.length === 0) {\n                return false;\n            }\n            return $scope.mode === \"chassis\";\n        };\n\n        // Add a new MAC address to the machine.\n        $scope.addMac = function() {\n            $scope.machine.macs.push(newMAC());\n        };\n\n        // Remove a MAC address to the machine.\n        $scope.removeMac = function(mac) {\n            var idx = $scope.machine.macs.indexOf(mac);\n            if(idx > -1) {\n                $scope.machine.macs.splice(idx, 1);\n            }\n        };\n\n        // Return true if the machine name is invalid.\n        $scope.invalidName = function() {\n            // Not invalid if empty.\n            if($scope.machine.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateHostname($scope.machine.name);\n        };\n\n        // Validate that the mac address is valid.\n        $scope.validateMac = function(mac) {\n            if(mac.mac === '') {\n                mac.error = false;\n            } else {\n                mac.error = !ValidationService.validateMAC(mac.mac);\n            }\n        };\n\n        // Return true when the machine is missing information or invalid\n        // information.\n        $scope.machineHasError = function() {\n            // Early-out for errors.\n            in_error = (\n                $scope.machine === null ||\n                $scope.machine.zone === null ||\n                $scope.machine.architecture === '' ||\n                $scope.machine.power.type === null ||\n                $scope.invalidName($scope.machine));\n            if(in_error) {\n                return in_error;\n            }\n\n            // Make sure none of the mac addresses are in error. The first one\n            // cannot be blank the remaining are allowed to be empty.\n            if($scope.machine.macs[0].mac === '' ||\n                $scope.machine.macs[0].error) {\n                return true;\n            }\n            var i;\n            for(i = 1; i < $scope.machine.macs.length; i++) {\n                var mac = $scope.machine.macs[i];\n                if(mac.mac !== '' && mac.error) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return true if the chassis has errors.\n        $scope.chassisHasErrors = function() {\n            // Early-out for errors.\n            in_error = (\n                $scope.chassis === null ||\n                $scope.chassis.power.type === null);\n            if(in_error) {\n                return in_error;\n            }\n            return powerParametersHasError(\n                $scope.chassis.power.type, $scope.chassis.power.parameters);\n        };\n\n        // Called when the cancel button is pressed.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.machine = newMachine();\n            $scope.chassis = newChassis();\n\n            // Hide the controller.\n            $scope.hide();\n        };\n\n        // Called to perform the saving of the machine.\n        $scope.saveMachine = function(addAnother) {\n            // Does nothing if machine has errors.\n            if($scope.machineHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Add the machine.\n            MachinesManager.create(\n                convertMachineToProtocol($scope.machine)).then(\n                    function() {\n                        if(addAnother) {\n                            $scope.machine = newMachine($scope.machine);\n                        } else {\n                            $scope.machine = newMachine();\n\n                            // Hide the scope if not adding another.\n                            $scope.hide();\n                        }\n                    }, function(error) {\n                        $scope.error =\n                            ManagerHelperService.parseValidationError(error);\n                    });\n        };\n\n        // Called to perform the saving of the chassis.\n        $scope.saveChassis = function(addAnother) {\n            // Does nothing if error exists.\n            if($scope.chassisHasErrors()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Create the parameters.\n            var params = angular.copy($scope.chassis.power.parameters);\n            params.chassis_type = $scope.chassis.power.type.name;\n            params.domain = $scope.chassis.domain.name;\n\n            // XXX ltrager 24-02-2016: Something is adding the username field\n            // even though its not defined in virshFields. The API rejects\n            // requests with improper fields so remove it before we send the\n            // request.\n            if(\n                    params.chassis_type === \"powerkvm\" ||\n                    params.chassis_type === \"virsh\") {\n                delete params.username;\n            }\n            // Add the chassis. For now we use the API as the websocket doesn't\n            // support probe and enlist.\n            $http({\n                method: 'POST',\n                url: 'api/2.0/machines/?op=add_chassis',\n                data: $.param(params),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function() {\n                if(addAnother) {\n                    $scope.chassis = newChassis($scope.chassis);\n                } else {\n                    $scope.chassis = newChassis();\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error.data);\n            });\n        };\n\n        // Load zones and domains. Once loaded create the first machine and\n        // chassis.\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, DomainsManager]).then(function() {\n                // Add the first machine and chassis.\n                $scope.machine = newMachine();\n                $scope.chassis = newChassis();\n            });\n\n        // Load the general manager.\n        ManagerHelperService.loadManager(\n            $scope, GeneralManager).then(function() {\n            if($scope.architectures.length > 0) {\n                // If the machine doesn't have an architecture\n                // set then it was created before all of the\n                // architectures were loaded. Set the default\n                // architecture for that machine.\n                if(angular.isObject($scope.machine) &&\n                    $scope.machine.architecture === '') {\n                    $scope.machine.architecture = defaultArchitecture();\n                }\n            }\n        });\n\n        // Stop polling when the scope is destroyed.\n        $scope.$on(\"$destroy\", function() {\n            GeneralManager.stopPolling($scope, \"architectures\");\n            GeneralManager.stopPolling($scope, \"hwe_kernels\");\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Dashboard Controller\n */\n\nangular.module('MAAS').controller('DashboardController', [\n    '$scope', '$window', '$rootScope', '$routeParams', '$location',\n    'DiscoveriesManager', 'DomainsManager', 'MachinesManager',\n    'DevicesManager', 'SubnetsManager', 'VLANsManager', 'ConfigsManager',\n    'ManagerHelperService',\n    function($scope, $window, $rootScope, $routeParams, $location,\n             DiscoveriesManager, DomainsManager, MachinesManager,\n             DevicesManager, SubnetsManager, VLANsManager, ConfigsManager,\n             ManagerHelperService) {\n\n        // Default device IP options.\n        var deviceIPOptions = [\n            ['static', 'Static'],\n            ['dynamic', 'Dynamic'],\n            ['external', 'External']\n        ];\n\n        // Set title and page.\n        $rootScope.title = \"Dashboard\";\n        $rootScope.page = \"dashboard\";\n\n        // Set initial values.\n        $scope.loaded = false;\n        $scope.discoveredDevices = DiscoveriesManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.machines = MachinesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.configManager = ConfigsManager;\n        $scope.networkDiscovery = null;\n        $scope.column = 'mac';\n        $scope.selectedDevice = null;\n        $scope.convertTo = null;\n\n        // Set default predicate to last_seen.\n        $scope.predicate = $scope.last_seen;\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Proxy manager that the maas-obj-form directive uses to call the\n        // correct method based on current type.\n        $scope.proxyManager = {\n            updateItem: function(params) {\n                if($scope.convertTo.type === 'device') {\n                    return DevicesManager.createItem(params);\n                } else if($scope.convertTo.type === 'interface') {\n                    return DevicesManager.createInterface(params);\n                } else {\n                    throw new Error(\"Unknown type: \" + $scope.convertTo.type);\n                }\n            }\n        };\n\n        // Return the name name for the Discovery.\n        $scope.getDiscoveryName = function(discovery) {\n            if(discovery.hostname === null) {\n                return 'unknown';\n            }\n            else {\n                return discovery.hostname;\n            }\n        };\n\n        // Get the name of the subnet from its ID.\n        $scope.getSubnetName = function(subnetId) {\n            var subnet = SubnetsManager.getItemFromList(subnetId);\n            return SubnetsManager.getName(subnet);\n        };\n\n        // Get the name of the VLAN from its ID.\n        $scope.getVLANName = function(vlanId) {\n            var vlan = VLANsManager.getItemFromList(vlanId);\n            return VLANsManager.getName(vlan);\n        };\n\n        // Sets selected device\n        $scope.toggleSelected = function(deviceId) {\n            if($scope.selectedDevice === deviceId) {\n                $scope.selectedDevice = null;\n            } else {\n                var discovered = DiscoveriesManager.getItemFromList(deviceId);\n                var hostname = $scope.getDiscoveryName(discovered);\n                var domain;\n                if(hostname === 'unknown') {\n                    hostname = '';\n                }\n                if(hostname.indexOf('.') > 0) {\n                    domain = DomainsManager.getDomainByName(\n                        hostname.slice(hostname.indexOf('.') + 1));\n                    hostname = hostname.split(\".\", 1)[0];\n                    if(domain === null) {\n                        domain = DomainsManager.getDefaultDomain();\n                    }\n                } else {\n                    domain = DomainsManager.getDefaultDomain();\n                }\n                $scope.convertTo = {\n                    type: 'device',\n                    hostname: hostname,\n                    domain: domain,\n                    parent: null,\n                    ip_assignment: 'dynamic',\n                    goTo: false,\n                    saved: false,\n                    deviceIPOptions: deviceIPOptions.filter(\n                        function(option) {\n                            // Filter the options to not include static if\n                            // a subnet is not defined for this discovered\n                            // item.\n                            if(option[0] === 'static' &&\n                                !angular.isNumber(discovered.subnet)) {\n                                return false;\n                            } else {\n                                return true;\n                            }\n                        })\n                };\n                $scope.selectedDevice = deviceId;\n            }\n        };\n\n        // Called before the createItem is called to adjust the values\n        // passed over the call.\n        $scope.preProcess = function(item) {\n            var discovered = DiscoveriesManager.getItemFromList(\n                $scope.selectedDevice);\n            item = angular.copy(item);\n            if($scope.convertTo.type === 'device') {\n                item.primary_mac = discovered.mac_address;\n                item.extra_macs = [];\n                item.interfaces = [{\n                    mac: discovered.mac_address,\n                    ip_assignment: item.ip_assignment,\n                    ip_address: discovered.ip,\n                    subnet: discovered.subnet\n                }];\n            } else if($scope.convertTo.type === 'interface') {\n                item.mac_address = discovered.mac_address;\n                item.ip_address = discovered.ip;\n                item.subnet = discovered.subnet;\n            }\n            return item;\n        };\n\n        // Called after the createItem has been successful.\n        $scope.afterSave = function(obj) {\n            DiscoveriesManager._removeItem($scope.selectedDevice);\n            $scope.selectedDevice = null;\n            $scope.convertTo.hostname = obj.hostname;\n            $scope.convertTo.parent = obj.parent;\n            $scope.convertTo.saved = true;\n            if($scope.convertTo.goTo) {\n                if(angular.isString(obj.parent)) {\n                    $location.path('/node/' + obj.parent);\n                } else {\n                    $location.path('/nodes').search({tab: 'devices'});\n                }\n            }\n        };\n\n        // Load all the managers and get the network discovery config item.\n        ManagerHelperService.loadManagers($scope, [\n            DiscoveriesManager, DomainsManager, MachinesManager,\n            DevicesManager, SubnetsManager, VLANsManager, ConfigsManager]).then(\n            function() {\n                $scope.loaded = true;\n                $scope.networkDiscovery = ConfigsManager.getItemFromList(\n                    'network_discovery');\n            });\n    }\n]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domain Details Controller\n */\n\nangular.module('MAAS').controller('DomainDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'DomainsManager', 'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $location,\n        DomainsManager, UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"domains\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.domain = null;\n        $scope.editSummary = false;\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.action = null;\n\n        $scope.domainsManager = DomainsManager;\n        $scope.newObject = {};\n\n        $scope.supportedRecordTypes = [\n            'A', 'AAAA', 'CNAME', 'MX', 'NS', 'SRV', 'SSHFP', 'TXT'\n        ];\n\n        // Set default predicate to name.\n        $scope.predicate = 'name';\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is clicked in the domain summary.\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.domain.displayname;\n        }\n\n        // Called when the domain has been loaded.\n        function domainLoaded(domain) {\n            $scope.domain = domain;\n            $scope.loaded = true;\n\n            updateTitle();\n        }\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default domain.\n        $scope.isDefaultDomain = function() {\n            if(angular.isObject($scope.domain)) {\n                return $scope.domain.id === 0;\n            }\n            return false;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.domain)) {\n                return $scope.domain.rrsets.length === 0;\n            }\n            return false;\n        };\n\n        // Called when the delete domain button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.actionInProgress = true;\n            $scope.action = 'delete';\n        };\n\n        // Called when the add record button is pressed.\n        $scope.addRecordButton = function() {\n            $scope.error = null;\n            $scope.actionInProgress = true;\n            $scope.action = 'add_record';\n        };\n\n        // Called when the cancel delete domain button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionInProgress = false;\n        };\n\n        // Called when the confirm delete domain button is pressed.\n        $scope.deleteConfirmButton = function() {\n            DomainsManager.deleteDomain($scope.domain).then(function() {\n                $scope.actionInProgress = false;\n                $location.path(\"/domains\");\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers(\n            $scope, [DomainsManager, UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this domain set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeDomain = DomainsManager.getActiveItem();\n            var requestedDomain = parseInt($routeParams.domain_id, 10);\n            if(isNaN(requestedDomain)) {\n                ErrorService.raiseError(\"Invalid domain identifier.\");\n            } else if(angular.isObject(activeDomain) &&\n                activeDomain.id === requestedDomain) {\n                domainLoaded(activeDomain);\n            } else {\n                DomainsManager.setActiveItem(\n                    requestedDomain).then(function(domain) {\n                        domainLoaded(domain);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domains List Controller\n */\n\nangular.module('MAAS').controller('DomainsListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', 'DomainsManager',\n    'UsersManager', 'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, $filter, DomainsManager,\n        UsersManager, ManagerHelperService) {\n\n        // Load the filters that are used inside the controller.\n\n        // Set title and page.\n        $rootScope.title = \"DNS\";\n        $rootScope.page = \"domains\";\n\n        // Set initial values.\n        $scope.domains = DomainsManager.getItems();\n        $scope.currentpage = \"domains\";\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.loading = true;\n\n        // This will hold the AddDomainController once it's initialized.  The\n        // controller will set this variable as it's always a child of this\n        // scope.\n        $scope.addDomainScope = null;\n\n        // Called when the add domain button is pressed.\n        $scope.addDomain = function() {\n            $scope.addDomainScope.show();\n        };\n\n        // Called when the cancel add domain button is pressed.\n        $scope.cancelAddDomain = function() {\n            $scope.addDomainScope.cancel();\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        ManagerHelperService.loadManagers(\n            $scope, [DomainsManager, UsersManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n        }\n    ]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Fabric Details Controller\n */\n\nangular.module('MAAS').controller('FabricDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'FabricsManager', 'VLANsManager', 'SubnetsManager', 'SpacesManager',\n    'ControllersManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        FabricsManager, VLANsManager, SubnetsManager, SpacesManager,\n        ControllersManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.fabric = null;\n        $scope.fabricManager = FabricsManager;\n        $scope.editSummary = false;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.loaded = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.fabric.name;\n        }\n\n        // Called when the \"edit\" button is cliked in the fabric summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the fabric summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Called when the fabric has been loaded.\n        function fabricLoaded(fabric) {\n            if(angular.isObject(fabric)) {\n                $scope.fabric = fabric;\n                updateTitle();\n                $scope.$watch(\"vlans\", updateVLANs, true);\n                $scope.$watch(\"subnets\", updateVLANs, true);\n                $scope.$watch(\"controllers\", updateVLANs, true);\n                $scope.loaded = true;\n                // Initial table sort order.\n                $scope.predicate = \"['vlan_name', 'vlan.id', 'subnet_name']\";\n            }\n        }\n\n        // Generate a table that can easily be rendered in the view.\n        function updateVLANs() {\n            var rows = [];\n            var racks = {};\n            angular.forEach($filter('filter')(\n                    $scope.vlans, {fabric:$scope.fabric.id}, true),\n                    function(vlan) {\n                var subnets =\n                    $filter('filter')($scope.subnets, {vlan:vlan.id}, true);\n                if(subnets.length > 0) {\n                    angular.forEach(subnets, function(subnet) {\n                        var space = SpacesManager.getItemFromList(subnet.space);\n                        var space_name = (space === null) ?\n                            \"(undefined)\" : space.name;\n                        var row = {\n                            vlan: vlan,\n                            vlan_name: VLANsManager.getName(vlan),\n                            subnet: subnet,\n                            subnet_name: SubnetsManager.getName(subnet),\n                            space: space,\n                            space_name: space_name\n                        };\n                        rows.push(row);\n                    });\n                } else {\n                    // If there are no subnets, populate a row based on the\n                    // information we have (just the VLAN).\n                    var row = {\n                        vlan: vlan,\n                        vlan_name: VLANsManager.getName(vlan),\n                        subnet: null,\n                        subnet_name: null,\n                        space: null,\n                        space_name: null\n                    };\n                    rows.push(row);\n                }\n                // Enumerate racks for vlan.\n                angular.forEach(vlan.rack_sids, function(rack_sid) {\n                    var rack = ControllersManager.getItemFromList(rack_sid);\n                    if(angular.isObject(rack)) {\n                        racks[rack.system_id] = rack;\n                    }\n                });\n            });\n            $scope.rows = rows;\n            $scope.racks = Object.keys(racks).map(function(key) {\n                return racks[key];\n            });\n        }\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default Fabric\n        $scope.isDefaultFabric = function() {\n            if(!angular.isObject($scope.fabric)) {\n                return false;\n            }\n            return $scope.fabric.id === 0;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.fabric)) {\n                return $scope.fabric.id !== 0;\n            }\n            return false;\n        };\n\n        // Called when the delete fabric button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete fabric button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete fabric button is pressed.\n        $scope.deleteConfirmButton = function() {\n            FabricsManager.deleteFabric($scope.fabric).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/networks\");\n                $location.search('by', 'fabric');\n            }, function(reply) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(reply.error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            FabricsManager, VLANsManager, SubnetsManager, SpacesManager,\n            ControllersManager, UsersManager]).then(\n            function() {\n                // Possibly redirected from another controller that already had\n                // this fabric set to active. Only call setActiveItem if not\n                // already the activeItem.\n                var activeFabric = FabricsManager.getActiveItem();\n                var requestedFabric = parseInt($routeParams.fabric_id, 10);\n\n                if(isNaN(requestedFabric)) {\n                    ErrorService.raiseError(\"Invalid fabric identifier.\");\n                } else if(angular.isObject(activeFabric) &&\n                    activeFabric.id === requestedFabric) {\n                    fabricLoaded(activeFabric);\n                } else {\n                    FabricsManager.setActiveItem(\n                        requestedFabric).then(function(fabric) {\n                            fabricLoaded(fabric);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                }\n            });\n    }\n]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Images Controller\n */\n\nangular.module('MAAS').controller('ImagesController', [\n    '$rootScope', '$scope', 'BootResourcesManager',\n    'ConfigsManager', 'UsersManager', 'ManagerHelperService', function(\n        $rootScope, $scope, BootResourcesManager,\n        ConfigsManager, UsersManager, ManagerHelperService) {\n\n            $rootScope.page = \"images\";\n            $rootScope.title = \"Loading...\";\n\n            $scope.loading = true;\n            $scope.bootResources = BootResourcesManager.getData();\n            $scope.configManager = ConfigsManager;\n            $scope.autoImport = null;\n\n            // Return true if the user is a super user.\n            $scope.isSuperUser = function() {\n                return UsersManager.isSuperUser();\n            };\n\n            // Load the required managers.\n            ManagerHelperService.loadManagers(\n                $scope, [ConfigsManager, UsersManager]).then(function() {\n                $scope.autoImport = ConfigsManager.getItemFromList(\n                    \"boot_images_auto_import\");\n            });\n\n            // The boot-images directive will load the bootResources manager,\n            // we just watch until resources is set. That means the page is\n            // loaded.\n            $scope.$watch(\"bootResources.resources\", function() {\n                if(angular.isArray($scope.bootResources.resources)) {\n                    $scope.loading = false;\n                    $rootScope.title = \"Images\";\n                }\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Intro Controller\n */\n\nangular.module('MAAS').controller('IntroController', [\n    '$rootScope', '$scope', '$window', '$location',\n    'ConfigsManager', 'PackageRepositoriesManager', 'BootResourcesManager',\n    'ManagerHelperService',\n    function(\n        $rootScope, $scope, $window, $location,\n        ConfigsManager, PackageRepositoriesManager, BootResourcesManager,\n        ManagerHelperService) {\n\n            $rootScope.page = \"intro\";\n            $rootScope.title = \"Welcome\";\n\n            $scope.loading = true;\n            $scope.configManager = ConfigsManager;\n            $scope.repoManager = PackageRepositoriesManager;\n            $scope.bootResources = BootResourcesManager.getData();\n            $scope.hasImages = false;\n            $scope.maasName = null;\n            $scope.upstreamDNS = null;\n            $scope.mainArchive = null;\n            $scope.portsArchive = null;\n            $scope.httpProxy = null;\n\n            // Set the skip function on the rootScope to allow skipping the\n            // intro view.\n            $rootScope.skip = function() {\n                $scope.clickContinue(true);\n            };\n\n            // Return true if the welcome section is not in error.\n            $scope.welcomeInError = function() {\n                var form = $scope.maasName.$maasForm;\n                if(angular.isObject(form)) {\n                    return form.hasErrors();\n                } else {\n                    return false;\n                }\n            };\n\n            // Return true if the network section is in error.\n            $scope.networkInError = function() {\n                var inError = false;\n                var objs = [\n                    $scope.upstreamDNS,\n                    $scope.mainArchive,\n                    $scope.portsArchive,\n                    $scope.httpProxy];\n                angular.forEach(objs, function(obj) {\n                    var form = obj.$maasForm;\n                    if(angular.isObject(form) && form.hasErrors()) {\n                        inError = true;\n                    }\n                });\n                return inError;\n            };\n\n            // Return true if continue can be clicked.\n            $scope.canContinue = function() {\n                return (\n                    !$scope.welcomeInError() &&\n                    !$scope.networkInError() &&\n                    $scope.hasImages);\n            };\n\n            // Called when continue button is clicked.\n            $scope.clickContinue = function(force) {\n                if(angular.isUndefined(force)) {\n                    force = false;\n                }\n                if(force || $scope.canContinue()) {\n                    ConfigsManager.updateItem({\n                        'name': 'completed_intro',\n                        'value': true\n                    }).then(function() {\n                        // Reload the whole page so that the MAAS_config will be\n                        // set to the new value.\n                        $window.location.reload();\n                    });\n                }\n            };\n\n            // If intro has been completed redirect to '/'.\n            if(MAAS_config.completed_intro) {\n                $location.path('/');\n            } else {\n                // Load the required managers.\n                var managers = [ConfigsManager, PackageRepositoriesManager];\n                ManagerHelperService.loadManagers(\n                    $scope, managers).then(function() {\n                    $scope.loading = false;\n                    $scope.maasName = ConfigsManager.getItemFromList(\n                        \"maas_name\");\n                    $scope.upstreamDNS = ConfigsManager.getItemFromList(\n                        \"upstream_dns\");\n                    $scope.httpProxy = ConfigsManager.getItemFromList(\n                        \"http_proxy\");\n                    $scope.mainArchive = (\n                        PackageRepositoriesManager.getItems().filter(\n                            function(repo) {\n                                return (repo['default'] &&\n                                    repo.name === \"main_archive\");\n                            })[0]);\n                    $scope.portsArchive = (\n                        PackageRepositoriesManager.getItems().filter(\n                            function(repo) {\n                                return (repo['default'] &&\n                                    repo.name === \"ports_archive\");\n                            })[0]);\n                });\n\n                // Don't load the boot resources as the boot-images directive\n                // performs that action. Just watch and make sure that\n                // at least one resource exists before continuing.\n                $scope.$watch(\"bootResources.resources\", function() {\n                    if(angular.isArray($scope.bootResources.resources) &&\n                        $scope.bootResources.resources.length > 0) {\n                        $scope.hasImages = true;\n                    } else {\n                        $scope.hasImages = false;\n                    }\n                });\n            }\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Intro Controller\n */\n\nangular.module('MAAS').controller('IntroUserController', [\n    '$rootScope', '$scope', '$window', '$location',\n    'UsersManager', 'ManagerHelperService',\n    function(\n        $rootScope, $scope, $window, $location,\n        UsersManager, ManagerHelperService) {\n\n            $rootScope.page = \"intro\";\n            $rootScope.title = \"Welcome\";\n\n            $scope.loading = true;\n            $scope.user = null;\n\n            // Set the skip function on the rootScope to allow skipping the\n            // intro view.\n            $rootScope.skip = function() {\n                $scope.clickContinue(true);\n            };\n\n            // Return true if super user.\n            $scope.isSuperUser = function() {\n                return UsersManager.isSuperUser();\n            };\n\n            // Return true if continue can be clicked.\n            $scope.canContinue = function() {\n                return $scope.user.sshkeys_count > 0;\n            };\n\n            // Called when continue button is clicked.\n            $scope.clickContinue = function(force) {\n                if(angular.isUndefined(force)) {\n                    force = false;\n                }\n                if(force || $scope.canContinue()) {\n                    UsersManager.markIntroComplete().then(function() {\n                        // Reload the whole page so that the MAAS_config will\n                        // be set to the new value.\n                        $window.location.reload();\n                    });\n                }\n            };\n\n            // If intro has been completed redirect to '/'.\n            if(MAAS_config.user_completed_intro) {\n                $location.path('/');\n            } else {\n                // Load the required managers.\n                ManagerHelperService.loadManager(\n                    $scope, UsersManager).then(function() {\n                        $scope.loading = false;\n                        $scope.user = UsersManager.getAuthUser();\n                    });\n            }\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Networks List Controller\n */\n\nangular.module('MAAS').controller('NetworksListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'SubnetsManager', 'FabricsManager', 'SpacesManager', 'VLANsManager',\n    'UsersManager', 'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, $filter, $location,\n             SubnetsManager, FabricsManager, SpacesManager, VLANsManager,\n             UsersManager, ManagerHelperService) {\n\n        // Load the filters that are used inside the controller.\n        var filterByVLAN = $filter('filterByVLAN');\n        var filterByFabric = $filter('filterByFabric');\n        var filterBySpace = $filter('filterBySpace');\n        var filterByNullSpace = $filter('filterByNullSpace');\n\n        // Set title and page.\n        $rootScope.title = \"Subnets\";\n        $rootScope.page = \"networks\";\n\n        // Set the initial value of $scope.groupBy based on the URL\n        // parameters, but default to the 'fabric' groupBy if it's not found.\n        $scope.getURLParameters = function() {\n            if(angular.isString($location.search().by)) {\n                $scope.groupBy = $location.search().by;\n            } else {\n                $scope.groupBy = 'fabric';\n            }\n        };\n\n        $scope.ADD_FABRIC_ACTION = {\n            name: \"add_fabric\",\n            title: \"Fabric\",\n            selectedTitle: \"Add fabric\",\n            objectName: 'fabric'\n        };\n        $scope.ADD_VLAN_ACTION = {\n            name: \"add_vlan\",\n            title: \"VLAN\",\n            selectedTitle: \"Add VLAN\",\n            objectName: 'vlan'\n        };\n        $scope.ADD_SPACE_ACTION = {\n            name: \"add_space\",\n            title: \"Space\",\n            selectedTitle: \"Add space\",\n            objectName: 'space'\n        };\n        $scope.ADD_SUBNET_ACTION = {\n            name: \"add_subnet\",\n            title: \"Subnet\",\n            selectedTitle: \"Add subnet\",\n            objectName: 'subnet'\n        };\n\n        $scope.getURLParameters();\n\n        // Set initial values.\n        $scope.subnetManager = SubnetsManager;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.fabricManager = FabricsManager;\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.spaceManager = SpacesManager;\n        $scope.spaces = SpacesManager.getItems();\n        $scope.vlanManager = VLANsManager;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.loading = true;\n\n        $scope.group = {};\n        // Used when grouping by fabrics.\n        $scope.group.fabrics = {};\n        // User when grouping by spaces.\n        $scope.group.spaces = {};\n        $scope.group.spaces.orphanVLANs = [];\n\n        // Initializers for action objects.\n        var actionObjectInitializers = {\n            fabric: function() {\n                return {};\n            },\n            vlan: function() {\n                // Set initial fabric.\n                return {\n                    fabric: $scope.fabrics[0].id\n                };\n            },\n            space: function() {\n                return {};\n            },\n            subnet: function() {\n                // Set initial VLAN and space.\n                return {\n                    vlan: $scope.fabrics[0].vlan_ids[0]\n                };\n            }\n        };\n\n        // Return the name of the subnet.\n        function getSubnetName(subnet) {\n            return SubnetsManager.getName(subnet);\n        }\n\n        // Generate a table that can be easily rendered in the view.\n        // Traverses the fabrics and VLANs in-order so that if previous\n        // fabrics and VLANs' names are identical, they can be hidden from\n        // the table cell.\n        function updateFabricsGroupBy() {\n            var rows = [];\n            var previous_fabric = {id:-1};\n            var previous_vlan = {id:-1};\n            var fabrics = $filter('orderBy')($scope.fabrics, ['name']);\n            angular.forEach(fabrics, function(fabric) {\n                var vlans = filterByFabric($scope.vlans, fabric);\n                vlans = $filter('orderBy')(vlans, ['vid']);\n                angular.forEach(vlans, function(vlan) {\n                    var subnets = filterByVLAN($scope.subnets, vlan);\n                    if(subnets.length > 0) {\n                        angular.forEach(subnets, function(subnet) {\n                            var space = SpacesManager.getItemFromList(\n                                subnet.space);\n                            var row = {\n                                fabric: fabric,\n                                fabric_name: \"\",\n                                vlan: vlan,\n                                vlan_name: \"\",\n                                space: space,\n                                subnet: subnet,\n                                subnet_name: getSubnetName(subnet)\n                            };\n                            if(fabric.id !== previous_fabric.id) {\n                                previous_fabric.id = fabric.id;\n                                row.fabric_name = fabric.name;\n                            }\n                            if(vlan.id !== previous_vlan.id) {\n                                previous_vlan.id = vlan.id;\n                                row.vlan_name = $scope.getVLANName(vlan);\n                            }\n                            rows.push(row);\n                        });\n                    } else {\n                        var row = {\n                            fabric: fabric,\n                            fabric_name: \"\",\n                            vlan: vlan,\n                            vlan_name: $scope.getVLANName(vlan)\n                        };\n                        if(fabric.id !== previous_fabric.id) {\n                            previous_fabric.id = fabric.id;\n                            row.fabric_name = fabric.name;\n                        }\n                        rows.push(row);\n                    }\n                });\n            });\n            $scope.group.fabrics.rows = rows;\n        }\n\n        // Generate a table that can be easily rendered in the view.\n        // Traverses the spaces in-order so that if the previous space's name\n        // is identical, it can be hidden from the table cell.\n        // Note that this view only shows items that can be related to a space.\n        // That is, VLANs and fabrics with no corresponding subnets (and\n        // therefore spaces) cannot be shown in this table.\n        function updateSpacesGroupBy() {\n            var rows = [];\n            var spaces = $filter('orderBy')($scope.spaces, ['name']);\n            var previous_space = {id: -1};\n            angular.forEach(spaces, function(space) {\n                var subnets = filterBySpace($scope.subnets, space);\n                subnets = $filter('orderBy')(subnets, ['cidr']);\n                var index = 0;\n                angular.forEach(subnets, function(subnet) {\n                    index++;\n                    var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                    var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                    var row = {\n                        fabric: fabric,\n                        vlan: vlan,\n                        vlan_name: $scope.getVLANName(vlan),\n                        subnet: subnet,\n                        subnet_name: getSubnetName(subnet),\n                        space: space,\n                        space_name: \"\"\n                    };\n                    if(space.id !== previous_space.id) {\n                        previous_space.id = space.id;\n                        row.space_name = space.name;\n                    }\n                    rows.push(row);\n                });\n                if(index === 0) {\n                    rows.push({\n                        space: space,\n                        space_name: space.name\n                    });\n                }\n            });\n            $scope.group.spaces.rows = rows;\n        }\n\n        function updateOrphanVLANs() {\n            var rows = [];\n            var subnets = filterByNullSpace($scope.subnets);\n            subnets = $filter('orderBy')(subnets, ['cidr']);\n            angular.forEach(subnets, function(subnet) {\n                var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                var row = {\n                    fabric: fabric,\n                    vlan: vlan,\n                    vlan_name: $scope.getVLANName(vlan),\n                    subnet: subnet,\n                    subnet_name: getSubnetName(subnet),\n                    space: null\n                };\n                rows.push(row);\n            });\n            $scope.group.spaces.orphanVLANs = rows;\n        }\n\n        // Update the \"Group by\" selection. This is called from a few places:\n        // * When the $watch notices data has changed\n        // * When the URL bar is updated, after the URL is parsed and\n        //   $scope.groupBy is updated\n        // * When the drop-down \"Group by\" selection box changes\n        $scope.updateGroupBy = function() {\n            var groupBy = $scope.groupBy;\n            if(groupBy === 'space') {\n                $location.search('by', 'space');\n                updateSpacesGroupBy();\n                updateOrphanVLANs();\n            } else {\n                // The only other option is 'fabric', but in case the user\n                // made a typo on the URL bar we just assume it was 'fabric'\n                // as a fallback.\n                $location.search('by', 'fabric');\n                updateFabricsGroupBy();\n            }\n        };\n\n        // Called when the managers load to populate the actions the user\n        // is allowed to perform.\n        $scope.updateActions = function() {\n            if(UsersManager.isSuperUser()) {\n                $scope.actionOptions = [\n                    $scope.ADD_FABRIC_ACTION,\n                    $scope.ADD_VLAN_ACTION,\n                    $scope.ADD_SPACE_ACTION,\n                    $scope.ADD_SUBNET_ACTION\n                ];\n            } else {\n                $scope.actionOptions = [];\n            }\n        };\n\n        // Called when a action is selected.\n        $scope.actionChanged = function() {\n            $scope.newObject = (\n                actionObjectInitializers[$scope.actionOption.objectName]());\n        };\n\n        // Called when the \"Cancel\" button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionOption = null;\n            $scope.newObject = null;\n        };\n\n        // Return the name name for the VLAN.\n        $scope.getVLANName = function(vlan) {\n            return VLANsManager.getName(vlan);\n        };\n\n        // Return the name of the fabric from its given ID.\n        $scope.getFabricNameById = function(fabricId) {\n            return FabricsManager.getName(\n                FabricsManager.getItemFromList(fabricId));\n        };\n\n        // Called before the subnet object is saved. Sets the fabric\n        // field to be the fabric for the selected VLAN.\n        $scope.actionSubnetPreSave = function(obj) {\n            obj.fabric = VLANsManager.getItemFromList(obj.vlan).fabric;\n            return obj;\n        };\n\n        ManagerHelperService.loadManagers($scope, [\n            SubnetsManager, FabricsManager, SpacesManager, VLANsManager,\n            UsersManager]).then(\n            function() {\n                $scope.loading = false;\n\n                $scope.updateActions();\n\n                $scope.$watch(\n                    \"[subnets, fabrics, spaces, vlans]\",\n                    $scope.updateGroupBy, true);\n\n                // If the route has been updated, a new search string must\n                // potentially be rendered.\n                $scope.$on(\"$routeUpdate\", function() {\n                    $scope.getURLParameters();\n                    $scope.updateGroupBy();\n                });\n                $scope.updateGroupBy();\n            });\n    }\n]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Details Controller\n */\n\nangular.module('MAAS').controller('NodeDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location', '$interval',\n    'DevicesManager', 'MachinesManager', 'ControllersManager', 'ZonesManager',\n    'GeneralManager', 'UsersManager', 'TagsManager', 'DomainsManager',\n    'ManagerHelperService', 'ServicesManager', 'ErrorService',\n    'ValidationService', 'ScriptsManager', function(\n        $scope, $rootScope, $routeParams, $location, $interval, DevicesManager,\n        MachinesManager, ControllersManager, ZonesManager, GeneralManager,\n        UsersManager, TagsManager, DomainsManager, ManagerHelperService,\n        ServicesManager, ErrorService, ValidationService, ScriptsManager) {\n\n        // Mapping of device.ip_assignment to viewable text.\n        var DEVICE_IP_ASSIGNMENT = {\n            external: \"External\",\n            dynamic: \"Dynamic\",\n            \"static\": \"Static\"\n        };\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"nodes\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.node = null;\n        $scope.action = {\n          option: null,\n          allOptions: null,\n          availableOptions: [],\n          error: null,\n          showing_confirmation: false\n        };\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.osinfo = GeneralManager.getData(\"osinfo\");\n        $scope.section = {\n            area: angular.isString(\n                $routeParams.area) ? $routeParams.area : \"summary\"\n        };\n        $scope.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.commissioningSelection = [];\n        $scope.testSelection = [];\n        $scope.releaseOptions = {};\n        $scope.checkingPower = false;\n        $scope.devices = [];\n        $scope.scripts = ScriptsManager.getItems();\n\n        // Node header section.\n        $scope.header = {\n            editing: false,\n            editing_domain: false,\n            hostname: {\n                value: \"\"\n            },\n            domain: {\n                selected: null,\n                options: DomainsManager.getItems()\n            }\n        };\n\n        // Summary section.\n        $scope.summary = {\n            editing: false,\n            architecture: {\n                selected: null,\n                options: GeneralManager.getData(\"architectures\")\n            },\n            min_hwe_kernel: {\n                selected: null,\n                options: GeneralManager.getData(\"min_hwe_kernels\")\n            },\n            zone: {\n                selected: null,\n                options: ZonesManager.getItems()\n            },\n            tags: []\n        };\n\n        // Service monitor section (for controllers).\n        $scope.services = {};\n\n        // Power section.\n        $scope.power = {\n            editing: false,\n            type: null,\n            bmc_node_count: 0,\n            parameters: {}\n        };\n\n        // Get the display text for device ip assignment type.\n        $scope.getDeviceIPAssignment = function(ipAssignment) {\n            return DEVICE_IP_ASSIGNMENT[ipAssignment];\n        };\n\n        // Events section.\n        $scope.events = {\n            limit: 10\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            if($scope.node && $scope.node.fqdn) {\n                $rootScope.title = $scope.node.fqdn;\n            }\n        }\n\n        function updateHeader() {\n            // Don't update the value if in editing mode. As this would\n            // overwrite the users changes.\n            if($scope.header.editing || $scope.header.editing_domain) {\n                return;\n            }\n            $scope.header.hostname.value = $scope.node.fqdn;\n            // DomainsManager gives us all Domain information while the node\n            // only contains the name and id. Because of this we need to loop\n            // through the DomainsManager options and find the option with the\n            // id matching the node id. Otherwise we end up setting our\n            // selected field to an option not from DomainsManager which\n            // doesn't work.\n            var i;\n            for(i=0;i<$scope.header.domain.options.length;i++) {\n                var option = $scope.header.domain.options[i];\n                if(option.id === $scope.node.domain.id) {\n                    $scope.header.domain.selected = option;\n                    break;\n                }\n            }\n        }\n\n        // Update the available action options for the node.\n        function updateAvailableActionOptions() {\n            $scope.action.availableOptions = [];\n            if(!angular.isObject($scope.node)) {\n                return;\n            }\n\n            // Initialize the allowed action list.\n            if($scope.action.allOptions === null) {\n                $scope.action.allOptions =\n                    $scope.getAllActionOptions($scope.node.node_type);\n            }\n\n            // Build the available action options control from the\n            // allowed actions, except set-zone which does not make\n            // sense in this view because the form has this\n            // functionality\n            angular.forEach($scope.action.allOptions, function(option) {\n                if($scope.node.actions.indexOf(option.name) >= 0\n                   && option.name !== \"set-zone\") {\n                    $scope.action.availableOptions.push(option);\n                }\n            });\n        }\n\n        // Updates the currently selected items in the power section.\n        function updatePower() {\n            // Do not update the selected items, when editing this would\n            // cause the users selection to change.\n            if($scope.power.editing) {\n                return;\n            }\n\n            var i;\n            $scope.power.type = null;\n            for(i = 0; i < $scope.power_types.length; i++) {\n                if($scope.node.power_type === $scope.power_types[i].name) {\n                    $scope.power.type = $scope.power_types[i];\n                    break;\n                }\n            }\n\n            $scope.power.bmc_node_count = $scope.node.power_bmc_node_count;\n\n            $scope.power.parameters = angular.copy(\n                $scope.node.power_parameters);\n            if(!angular.isObject($scope.power.parameters)) {\n                $scope.power.parameters = {};\n            }\n\n            // Force editing mode on, if the power_type is missing for a\n            // machine. This is placed at the bottom because we wanted the\n            // selected items to be filled in at least once.\n            if($scope.canEdit() && $scope.node.power_type === \"\" &&\n               $scope.node.node_type === 0) {\n                $scope.power.editing = true;\n            }\n        }\n\n        // Updates the currently selected items in the summary section.\n        function updateSummary() {\n            // Do not update the selected items, when editing this would\n            // cause the users selection to change.\n            if($scope.summary.editing) {\n                return;\n            }\n\n            if(angular.isObject($scope.node.zone)) {\n                $scope.summary.zone.selected = ZonesManager.getItemFromList(\n                    $scope.node.zone.id);\n            }\n            $scope.summary.architecture.selected = $scope.node.architecture;\n            $scope.summary.min_hwe_kernel.selected = $scope.node.min_hwe_kernel;\n            $scope.summary.tags = angular.copy($scope.node.tags);\n\n            // Force editing mode on, if the architecture is invalid. This is\n            // placed at the bottom because we wanted the selected items to\n            // be filled in at least once.\n            if($scope.canEdit() &&\n                $scope.hasUsableArchitectures() &&\n                $scope.hasInvalidArchitecture()) {\n                $scope.summary.editing = true;\n            }\n        }\n\n        // Updates the service monitor section.\n        function updateServices() {\n            if($scope.isController) {\n                $scope.services = {};\n                angular.forEach(ControllersManager.getServices(\n                        $scope.node), function(service) {\n                    $scope.services[service.name] = service;\n                });\n            }\n        }\n\n        // Update the devices array on the scope based on the device children\n        // on the node.\n        function updateDevices() {\n            $scope.devices = [];\n            angular.forEach($scope.node.devices, function(child) {\n                var device = {\n                    name: child.fqdn\n                };\n\n                // Add the interfaces to the device object if any exists.\n                if(angular.isArray(child.interfaces) &&\n                    child.interfaces.length > 0) {\n                    angular.forEach(child.interfaces, function(nic, nicIdx) {\n                        var deviceWithMAC = angular.copy(device);\n                        deviceWithMAC.mac_address = nic.mac_address;\n\n                        // Remove device name so it is not duplicated in the\n                        // table since this is another MAC address on this\n                        // device.\n                        if(nicIdx > 0) {\n                            deviceWithMAC.name = \"\";\n                        }\n\n                        // Add this links to the device object if any exists.\n                        if(angular.isArray(nic.links) &&\n                            nic.links.length > 0) {\n                            angular.forEach(nic.links, function(link, lIdx) {\n                                var deviceWithLink = angular.copy(\n                                    deviceWithMAC);\n                                deviceWithLink.ip_address = link.ip_address;\n\n                                // Remove the MAC address so it is not\n                                // duplicated in the table since this is\n                                // another link on this interface.\n                                if(lIdx > 0) {\n                                    deviceWithLink.mac_address = \"\";\n                                }\n\n                                $scope.devices.push(deviceWithLink);\n                            });\n                        } else {\n                            $scope.devices.push(deviceWithMAC);\n                        }\n                    });\n                } else {\n                    $scope.devices.push(device);\n                }\n            });\n        }\n\n        // Starts the watchers on the scope.\n        function startWatching() {\n            // Update the title and name when the node fqdn changes.\n            $scope.$watch(\"node.fqdn\", function() {\n                updateTitle();\n                updateHeader();\n            });\n\n            // Update the devices on the node.\n            $scope.$watch(\"node.devices\", updateDevices);\n\n            // Update the availableActionOptions when the node actions change.\n            $scope.$watch(\"node.actions\", updateAvailableActionOptions);\n\n            // Update the summary when the node or architectures list is\n            // updated.\n            $scope.$watch(\"node.architecture\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.architecture.options, updateSummary);\n\n            // Uppdate the summary when min_hwe_kernel is updated.\n            $scope.$watch(\"node.min_hwe_kernel\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.min_hwe_kernel.options, updateSummary);\n\n            // Update the summary when the node or zone list is\n            // updated.\n            $scope.$watch(\"node.zone.id\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.zone.options, updateSummary);\n\n            // Update the power when the node power_type or power_parameters\n            // are updated.\n            $scope.$watch(\"node.power_type\", updatePower);\n            $scope.$watch(\"node.power_parameters\", updatePower);\n            $scope.$watchCollection(\"power_types\", updatePower);\n\n            // Update the services when the services list is updated.\n            $scope.$watch(\"node.service_ids\", updateServices);\n        }\n\n        // Called when the node has been loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            updateTitle();\n            updateSummary();\n            updateServices();\n            startWatching();\n\n            // Tell the storageController and networkingController that the\n            // node has been loaded.\n            if(angular.isObject($scope.storageController)) {\n                $scope.storageController.nodeLoaded();\n            }\n            if(angular.isObject($scope.networkingController)) {\n                $scope.networkingController.nodeLoaded();\n            }\n        }\n\n        $scope.getAllActionOptions = function(node_type) {\n            if(typeof node_type !== 'number' ||\n                    node_type < 0 || node_type > 4) {\n                return [];\n            }\n            var actionTypeForNodeType = {\n                0: \"machine_actions\",\n                1: \"device_actions\",\n                2: \"rack_controller_actions\",\n                3: \"region_controller_actions\",\n                4: \"region_and_rack_controller_actions\"\n            };\n            return GeneralManager.getData(actionTypeForNodeType[node_type]);\n        };\n\n        // Update the node with new data on the region.\n        $scope.updateNode = function(node, queryPower) {\n            if(angular.isUndefined(queryPower)) {\n                queryPower = false;\n            }\n            return $scope.nodesManager.updateItem(node).then(function(node) {\n                updateHeader();\n                updateSummary();\n                if(queryPower) {\n                    $scope.checkPowerState();\n                }\n            }, function(error) {\n                console.log(error);\n                updateHeader();\n                updateSummary();\n            });\n        };\n\n        // Called for autocomplete when the user is typing a tag name.\n        $scope.tagsAutocomplete = function(query) {\n            return TagsManager.autocomplete(query);\n        };\n\n        $scope.getPowerStateClass = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return \"\";\n            }\n\n            if($scope.checkingPower) {\n                return \"checking\";\n            } else {\n                return $scope.node.power_state;\n            }\n        };\n\n        // Get the power state text to show.\n        $scope.getPowerStateText = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return \"\";\n            }\n\n            if($scope.checkingPower) {\n                return \"Checking power\";\n            } else if($scope.node.power_state === \"unknown\") {\n                return \"\";\n            } else {\n                return \"Power \" + $scope.node.power_state;\n            }\n        };\n\n        // Returns true when the \"check now\" button for updating the power\n        // state should be shown.\n        $scope.canCheckPowerState = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return false. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n            return (\n                $scope.node.power_state !== \"unknown\" &&\n                !$scope.checkingPower);\n        };\n\n        // Check the power state of the node.\n        $scope.checkPowerState = function() {\n            $scope.checkingPower = true;\n            $scope.nodesManager.checkPowerState($scope.node).then(function() {\n                $scope.checkingPower = false;\n            });\n        };\n\n        $scope.isUbuntuOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"ubuntu\") {\n                return true;\n            }\n            return false;\n        };\n\n        $scope.isUbuntuCoreOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"ubuntu-core\") {\n                return true;\n            }\n            return false;\n        };\n\n        $scope.isCustomOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"custom\") {\n                return true;\n            }\n            return false;\n        };\n\n        // Return true if there is an action error.\n        $scope.isActionError = function() {\n            return $scope.action.error !== null;\n        };\n\n        // Return True if in deploy action and the osinfo is missing.\n        $scope.isDeployError = function() {\n            // Never a deploy error when there is an action error.\n            if($scope.isActionError()) {\n                return false;\n            }\n\n            var missing_osinfo = (\n                angular.isUndefined($scope.osinfo.osystems) ||\n                $scope.osinfo.osystems.length === 0);\n            if(angular.isObject($scope.action.option) &&\n                $scope.action.option.name === \"deploy\" &&\n                missing_osinfo) {\n                return true;\n            }\n            return false;\n        };\n\n        // Return True if unable to deploy because of missing ssh keys.\n        $scope.isSSHKeyError = function() {\n            // Never a deploy error when there is an action error.\n            if($scope.isActionError()) {\n                return false;\n            }\n            if(angular.isObject($scope.action.option) &&\n                $scope.action.option.name === \"deploy\" &&\n                UsersManager.getSSHKeyCount() === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Called when the actionOption has changed.\n        $scope.action.optionChanged = function() {\n            // Clear the action error.\n            $scope.action.error = null;\n            $scope.action.showing_confirmation = false;\n        };\n\n        // Cancel the action.\n        $scope.actionCancel = function() {\n            $scope.action.option = null;\n            $scope.action.error = null;\n            $scope.action.showing_confirmation = false;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            var extra = {};\n            var i;\n            // Set deploy parameters if a deploy.\n            if($scope.action.option.name === \"deploy\" &&\n                angular.isString($scope.osSelection.osystem) &&\n                angular.isString($scope.osSelection.release)) {\n\n                // Set extra. UI side the release is structured os/release, but\n                // when it is sent over the websocket only the \"release\" is\n                // sent.\n                extra.osystem = $scope.osSelection.osystem;\n                var release = $scope.osSelection.release;\n                release = release.split(\"/\");\n                release = release[release.length-1];\n                extra.distro_series = release;\n                // hwe_kernel is optional so only include it if its specified\n                if(angular.isString($scope.osSelection.hwe_kernel) &&\n                   ($scope.osSelection.hwe_kernel.indexOf('hwe-') >= 0 ||\n                    $scope.osSelection.hwe_kernel.indexOf('ga-') >= 0)) {\n                    extra.hwe_kernel = $scope.osSelection.hwe_kernel;\n                }\n            } else if($scope.action.option.name === \"commission\") {\n                extra.enable_ssh = $scope.commissionOptions.enableSSH;\n                extra.skip_networking = (\n                    $scope.commissionOptions.skipNetworking);\n                extra.skip_storage = $scope.commissionOptions.skipStorage;\n                extra.commissioning_scripts = [];\n                for(i=0;i<$scope.commissioningSelection.length;i++) {\n                    extra.commissioning_scripts.push(\n                        $scope.commissioningSelection[i].id);\n                }\n                if($scope.commissionOptions.updateFirmware) {\n                    extra.commissioning_scripts.push('update_firmware')\n                }\n                if($scope.commissionOptions.configureHBA) {\n                    extra.commissioning_scripts.push('configure_hba')\n                }\n                if(extra.commissioning_scripts.length === 0) {\n                    // Tell the region not to run any custom commissioning\n                    // scripts.\n                    extra.commissioning_scripts.push('none');\n                }\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.testSelection.length;i++) {\n                    extra.testing_scripts.push($scope.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.action.option.name === \"test\") {\n                if($scope.node.status_code === 6 &&\n                        !$scope.action.showing_confirmation) {\n                    $scope.action.showing_confirmation = true;\n                    return;\n                }\n                // Set the test options.\n                extra.enable_ssh = $scope.commissionOptions.enableSSH;\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.testSelection.length;i++) {\n                    extra.testing_scripts.push($scope.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.action.option.name === \"release\") {\n                // Set the release options.\n                extra.erase = $scope.releaseOptions.erase;\n                extra.secure_erase = $scope.releaseOptions.secureErase;\n                extra.quick_erase = $scope.releaseOptions.quickErase;\n            }\n\n            $scope.nodesManager.performAction(\n                $scope.node, $scope.action.option.name, extra).then(function() {\n                    // If the action was delete, then go back to listing.\n                    if($scope.action.option.name === \"delete\") {\n                        $location.path(\"/nodes\");\n                    }\n                    $scope.action.option = null;\n                    $scope.action.error = null;\n                    $scope.action.showing_confirmation = false;\n                    $scope.osSelection.$reset();\n                    $scope.commissionOptions.enableSSH = false;\n                    $scope.commissionOptions.skipNetworking = false;\n                    $scope.commissionOptions.skipStorage = false;\n                    $scope.commissionOptions.updateFirmware = false;\n                    $scope.commissionOptions.configureHBA = false;\n                    $scope.commissioningSelection = [];\n                    $scope.testSelection = [];\n                }, function(error) {\n                    $scope.action.error = error;\n                });\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if their are usable architectures.\n        $scope.hasUsableArchitectures = function() {\n            return $scope.summary.architecture.options.length > 0;\n        };\n\n        // Return the placeholder text for the architecture dropdown.\n        $scope.getArchitecturePlaceholder = function() {\n            if($scope.hasUsableArchitectures()) {\n                return \"Choose an architecture\";\n            } else {\n                return \"-- No usable architectures --\";\n            }\n        };\n\n        // Return true if the saved architecture is invalid.\n        $scope.hasInvalidArchitecture = function() {\n            if(angular.isObject($scope.node)) {\n                return (\n                    !$scope.isDevice && (\n                        $scope.node.architecture === \"\" ||\n                        $scope.summary.architecture.options.indexOf(\n                            $scope.node.architecture) === -1));\n            } else {\n                return false;\n            }\n        };\n\n        // Return true if the current architecture selection is invalid.\n        $scope.invalidArchitecture = function() {\n            return (\n                !$scope.isDevice && !$scope.isController && (\n                    $scope.summary.architecture.selected === \"\" ||\n                    $scope.summary.architecture.options.indexOf(\n                        $scope.summary.architecture.selected) === -1));\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If power_types exist then a rack controller is connected.\n            return $scope.power_types.length > 0;\n        };\n\n        // Return true if the node is locked\n        $scope.isLocked = function() {\n            if ($scope.node === null) {\n                return false;\n            }\n\n            return $scope.node.locked;\n        };\n\n        // Return true when the edit buttons can be clicked.\n        $scope.canEdit = function() {\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser() &&\n                    ! $scope.isLocked());\n        };\n\n        // Called to edit the domain name.\n        $scope.editHeaderDomain = function() {\n            if($scope.canEdit()) {\n                return;\n            }\n\n            // Do nothing if already editing because we don't want to reset\n            // the current value.\n            if($scope.header.editing_domain) {\n                return;\n            }\n            $scope.header.editing = false;\n            $scope.header.editing_domain = true;\n\n            // Set the value to the hostname, as hostname and domain are edited\n            // using different fields.\n            $scope.header.hostname.value = $scope.node.hostname;\n        };\n\n        // Called to edit the node name.\n        $scope.editHeader = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n\n            // Do nothing if already editing because we don't want to reset\n            // the current value.\n            if($scope.header.editing) {\n                return;\n            }\n            $scope.header.editing = true;\n            $scope.header.editing_domain = false;\n\n            // Set the value to the hostname, as hostname and domain are edited\n            // using different fields.\n            $scope.header.hostname.value = $scope.node.hostname;\n        };\n\n        // Return true when the hostname or domain in the header is invalid.\n        $scope.editHeaderInvalid = function() {\n            // Not invalid unless editing.\n            if(!$scope.header.editing && !$scope.header.editing_domain) {\n                return false;\n            }\n\n            // The value cannot be blank.\n            var value = $scope.header.hostname.value;\n            if(value.length === 0) {\n                return true;\n            }\n            return !ValidationService.validateHostname(value);\n        };\n\n        // Called to cancel editing of the node hostname and domain.\n        $scope.cancelEditHeader = function() {\n            $scope.header.editing = false;\n            $scope.header.editing_domain = false;\n            updateHeader();\n        };\n\n        // Called to save editing of node hostname or domain.\n        $scope.saveEditHeader = function() {\n            // Does nothing if invalid.\n            if($scope.editHeaderInvalid()) {\n                return;\n            }\n            $scope.header.editing = false;\n            $scope.header.editing_domain = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.hostname = $scope.header.hostname.value;\n            node.domain = $scope.header.domain.selected;\n\n            // Update the node.\n            $scope.updateNode(node);\n        };\n\n        // Called to enter edit mode in the summary section.\n        $scope.editSummary = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.summary.editing = true;\n        };\n\n        // Called to cancel editing in the summary section.\n        $scope.cancelEditSummary = function() {\n            // Leave edit mode only if node has valid architecture.\n            if($scope.isDevice || $scope.isController) {\n                $scope.summary.editing = false;\n            } else if(!$scope.hasInvalidArchitecture()) {\n                $scope.summary.editing = false;\n            }\n\n            updateSummary();\n        };\n\n        // Called to save the changes made in the summary section.\n        $scope.saveEditSummary = function() {\n            // Do nothing if invalidArchitecture.\n            if($scope.invalidArchitecture()) {\n                return;\n            }\n\n            $scope.summary.editing = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.zone = angular.copy($scope.summary.zone.selected);\n            node.architecture = $scope.summary.architecture.selected;\n            if($scope.summary.min_hwe_kernel.selected === null) {\n                node.min_hwe_kernel = \"\";\n            }else{\n                node.min_hwe_kernel = $scope.summary.min_hwe_kernel.selected;\n            }\n            node.tags = [];\n            angular.forEach($scope.summary.tags, function(tag) {\n                node.tags.push(tag.text);\n            });\n\n            // Update the node.\n            $scope.updateNode(node);\n        };\n\n        // Return true if the current power type selection is invalid.\n        $scope.invalidPowerType = function() {\n            return !angular.isObject($scope.power.type);\n        };\n\n        // Called to enter edit mode in the power section.\n        $scope.editPower = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.power.editing = true;\n        };\n\n        // Called to cancel editing in the power section.\n        $scope.cancelEditPower = function() {\n            // If the node is not a machine, only leave edit mode if node has\n            // valid power type.\n            if ($scope.node.node_type !== 0 || $scope.node.power_type !== \"\") {\n                $scope.power.editing = false;\n            }\n            updatePower();\n        };\n\n        // Called to save the changes made in the power section.\n        $scope.saveEditPower = function() {\n            // Does nothing if invalid power type.\n            if($scope.invalidPowerType()) {\n                return;\n            }\n            $scope.power.editing = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.power_type = $scope.power.type.name;\n            node.power_parameters = angular.copy($scope.power.parameters);\n\n            // Update the node.\n            $scope.updateNode(node, true);\n        };\n\n        // Return true if the \"load more\" events button should be available.\n        $scope.allowShowMoreEvents = function() {\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n            if(!angular.isArray($scope.node.events)) {\n                return false;\n            }\n            return (\n                $scope.node.events.length > 0 &&\n                $scope.node.events.length > $scope.events.limit &&\n                $scope.events.limit < 50);\n        };\n\n        // Show another 10 events.\n        $scope.showMoreEvents = function() {\n            $scope.events.limit += 10;\n        };\n\n        // Return the nice text for the given event.\n        $scope.getEventText = function(event) {\n            var text = event.type.description;\n            if(angular.isString(event.description) &&\n                event.description.length > 0) {\n                text += \" - \" + event.description;\n            }\n            return text;\n        };\n\n        $scope.getPowerEventError = function() {\n            if(!angular.isObject($scope.node) ||\n                !angular.isArray($scope.node.events)) {\n                return;\n            }\n\n            var i;\n            for(i = 0; i < $scope.node.events.length; i++) {\n                var event = $scope.node.events[i];\n                if(event.type.level === \"warning\" &&\n                   event.type.description === \"Failed to query node's BMC\") {\n                    // Latest power event is an error\n                    return event;\n                } else if(event.type.level === \"info\" &&\n                          event.type.description === \"Queried node's BMC\") {\n                    // Latest power event is not an error\n                    return;\n                }\n            }\n            // No power event found, thus no error\n            return;\n        };\n\n        $scope.hasPowerEventError = function() {\n            var event = $scope.getPowerEventError();\n            return angular.isObject(event);\n        };\n\n        $scope.getPowerEventErrorText = function() {\n            var event = $scope.getPowerEventError();\n            if(angular.isObject(event)) {\n                // Return text\n                return event.description;\n            } else {\n                return \"\";\n            }\n        };\n\n        // true if power error prevents the provided action\n        $scope.hasActionPowerError = function(actionName) {\n            if(!$scope.hasPowerError()) {\n                return false; // no error, no need to check state\n            }\n            // these states attempt to manipulate power\n            var powerChangingStates = [\n                'commission',\n                'deploy',\n                'on',\n                'off',\n                'release'\n            ];\n            if(actionName && powerChangingStates.indexOf(actionName) > -1) {\n                return true;\n            }\n            return false;\n        };\n\n        // Check to see if the power type has any missing system packages.\n        $scope.hasPowerError = function() {\n            if(angular.isObject($scope.power.type)) {\n                return $scope.power.type.missing_packages.length > 0;\n            } else {\n                return false;\n            }\n        };\n\n        // Returns a formatted string of missing system packages.\n        $scope.getPowerErrors = function() {\n            var i;\n            var result = \"\";\n            if(angular.isObject($scope.power.type)) {\n                var packages = $scope.power.type.missing_packages;\n                packages.sort();\n                for(i = 0; i < packages.length; i++) {\n                    result += packages[i];\n                    if(i+2 < packages.length) {\n                        result += \", \";\n                    }\n                    else if(i+1 < packages.length) {\n                        result += \" and \";\n                    }\n                }\n                result += packages.length > 1 ? \" packages\" : \" package\";\n            }\n            return result;\n        };\n\n        // Return the class to apply to the service.\n        $scope.getServiceClass = function(service) {\n            if(!angular.isObject(service)) {\n                return \"none\";\n            } else {\n                if(service.status === \"running\") {\n                    return \"success\";\n                } else if(service.status === \"dead\") {\n                    return \"error\";\n                } else if(service.status === \"degraded\") {\n                    return \"warning\";\n                } else {\n                    return \"none\";\n                }\n            }\n        };\n\n        $scope.hasCustomCommissioningScripts = function() {\n            var i;\n            for(i=0;i<$scope.scripts.length;i++) {\n                if($scope.scripts[i].script_type === 0) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Called by the children controllers to let the parent know.\n        $scope.controllerLoaded = function(name, scope) {\n            $scope[name] = scope;\n            if(angular.isObject(scope.node)) {\n              scope.nodeLoaded();\n            }\n        };\n\n        // Only show a warning that tests have failed if there are failed tests\n        // and the node isn't currently commissioning or testing.\n        $scope.showFailedTestWarning = function() {\n            // Devices can't have failed tests and don't have status_code\n            // defined.\n            if($scope.node.node_type === 1 || !$scope.node.status_code) {\n                return false;\n            }\n            switch($scope.node.status_code) {\n                // NEW\n                case 0:\n                // COMMISSIONING\n                case 1:\n                // FAILED_COMMISSIONING\n                case 2:\n                // TESTING\n                case 21:\n                // FAILED_TESTING\n                case 22:\n                    return false;\n            }\n            switch($scope.node.testing_status) {\n                // Tests havn't been run\n                case -1:\n                // Tests have passed\n                case 2:\n                    return false;\n            }\n            return true;\n        };\n\n        // Get the subtext for the CPU card. Only nodes commissioned after\n        // MAAS 2.4 will have the CPU speed.\n        $scope.getCPUSubtext = function() {\n            var label = $scope.node.cpu_count + \" cores\";\n            if(!$scope.node.cpu_speed || $scope.node.cpu_speed === 0) {\n                return label;\n            }else if($scope.node.cpu_speed < 1000) {\n                return label + \" @ \" + $scope.node.cpu_speed + \" Mhz\";\n            }else{\n                return label + \" @ \" + ($scope.node.cpu_speed / 1000) + \" Ghz\";\n            }\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            MachinesManager,\n            DevicesManager,\n            ControllersManager,\n            ZonesManager,\n            GeneralManager,\n            UsersManager,\n            TagsManager,\n            DomainsManager,\n            ServicesManager,\n            ScriptsManager\n        ]).then(function() {\n            if('controller' === $routeParams.type) {\n                $scope.nodesManager = ControllersManager;\n                $scope.isController = true;\n                $scope.isDevice = false;\n                $scope.type_name = 'controller';\n                $scope.type_name_title = 'Controller';\n            }else if('device' === $routeParams.type) {\n                $scope.nodesManager = DevicesManager;\n                $scope.isController = false;\n                $scope.isDevice = true;\n                $scope.type_name = 'device';\n                $scope.type_name_title = 'Device';\n            }else{\n                $scope.nodesManager = MachinesManager;\n                $scope.isController = false;\n                $scope.isDevice = false;\n                $scope.type_name = 'machine';\n                $scope.type_name_title = 'Machine';\n            }\n\n            // Possibly redirected from another controller that already had\n            // this node set to active. Only call setActiveItem if not already\n            // the activeItem.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n                activeNode = $scope.nodesManager.getActiveItem();\n            }\n            if($scope.isDevice) {\n                $scope.ip_assignment = activeNode.ip_assignment;\n            }\n\n            // Poll for architectures, hwe_kernels, and osinfo the whole\n            // time. This is because the user can always see the architecture\n            // and operating system. Need to keep this information up-to-date\n            // so the user is viewing current data.\n            GeneralManager.startPolling($scope, \"architectures\");\n            GeneralManager.startPolling($scope, \"hwe_kernels\");\n            GeneralManager.startPolling($scope, \"osinfo\");\n        });\n\n        // Stop polling for architectures, hwe_kernels, and osinfo when the\n        // scope is destroyed.\n        $scope.$on(\"$destroy\", function() {\n            GeneralManager.stopPolling($scope, \"architectures\");\n            GeneralManager.stopPolling($scope, \"hwe_kernels\");\n            GeneralManager.stopPolling($scope, \"osinfo\");\n        });\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Networking Controller\n */\n\n// Filter that is specific to the NodeNetworkingController. Filters the\n// list of VLANs to be only those that are unused by the interface.\nangular.module('MAAS').filter('filterByUnusedForInterface', function() {\n    return function(vlans, nic, originalInterfaces) {\n        var filtered = [];\n        if(!angular.isObject(nic) ||\n            !angular.isObject(originalInterfaces)) {\n            return filtered;\n        }\n        var usedVLANs = [];\n        angular.forEach(originalInterfaces, function(inter) {\n            if(inter.type === \"vlan\") {\n                var parent = inter.parents[0];\n                if(parent === nic.id) {\n                    usedVLANs.push(inter.vlan_id);\n                }\n            }\n        });\n        angular.forEach(vlans, function(vlan) {\n            var idx = usedVLANs.indexOf(vlan.id);\n            if(idx === -1) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Filters the\n// list of interfaces to not include the current parent interfaces being\n// bonded together.\nangular.module('MAAS').filter('removeInterfaceParents', function() {\n    return function(interfaces, childInterface, skip) {\n        if(skip || !angular.isObject(childInterface) ||\n            !angular.isArray(childInterface.parents)) {\n            return interfaces;\n        }\n        var filtered = [];\n        angular.forEach(interfaces, function(nic) {\n            var i, parent, found = false;\n            for(i = 0; i < childInterface.parents.length; i++) {\n                parent = childInterface.parents[i];\n                if(parent.id === nic.id && parent.link_id === nic.link_id) {\n                    found = true;\n                    break;\n                }\n            }\n            if(!found) {\n                filtered.push(nic);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Remove the default\n// VLAN if the interface is a VLAN interface.\nangular.module('MAAS').filter('removeDefaultVLANIfVLAN', function() {\n    return function(vlans, interfaceType) {\n        if(!angular.isString(interfaceType)) {\n            return vlans;\n        }\n        var filtered = [];\n        angular.forEach(vlans, function(vlan) {\n            if(interfaceType !== \"vlan\") {\n                filtered.push(vlan);\n            } else if(vlan.vid !== 0) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Only provide the\n// available modes for that interface type.\nangular.module('MAAS').filter('filterLinkModes', function() {\n    return function(modes, nic) {\n        if(!angular.isObject(nic)) {\n            return modes;\n        }\n        var filtered = [];\n\n        // If this is not a $maasForm, make it work like one.\n        // We need to use getValue() to access attributes, because each\n        // type of maas-obj-form gets to define how values come out.\n        if(!angular.isFunction(nic.getValue)) {\n            nic.getValue = function(name) {\n                return this[name];\n            };\n        }\n\n        if(!angular.isObject(nic.getValue('subnet'))) {\n            // No subnet is configure so the only allowed mode\n            // is 'link_up'.\n            angular.forEach(modes, function(mode) {\n                if(mode.mode === \"link_up\") {\n                    filtered.push(mode);\n                }\n            });\n        } else {\n            // Don't add LINK_UP if more than one link exists or\n            // if the interface is an alias.\n            var links = nic.getValue('links');\n            var nicType = nic.getValue('type');\n            var allowLinkUp = (\n                (angular.isObject(links) && links.length > 1) ||\n                (nicType === \"alias\"));\n            angular.forEach(modes, function(mode) {\n                if(allowLinkUp && mode.mode === \"link_up\") {\n                    return;\n                }\n                // Can't run DHCP twice on one NIC.\n                if(nicType === \"alias\" && mode.mode === \"dhcp\") {\n                    return;\n                }\n                filtered.push(mode);\n            });\n        }\n        return filtered;\n    };\n});\n\n\nangular.module('MAAS').controller('NodeNetworkingController', [\n    '$scope', '$filter', 'FabricsManager', 'VLANsManager', 'SubnetsManager',\n    'MachinesManager', 'ControllersManager', 'DevicesManager',\n    'GeneralManager', 'UsersManager',\n    'ManagerHelperService', 'ValidationService', 'JSONService',\n    function(\n        $scope, $filter, FabricsManager, VLANsManager, SubnetsManager,\n        MachinesManager, ControllersManager, DevicesManager,\n        GeneralManager, UsersManager,\n        ManagerHelperService, ValidationService, JSONService) {\n\n        // Different interface types.\n        var INTERFACE_TYPE = {\n            PHYSICAL: \"physical\",\n            BOND: \"bond\",\n            BRIDGE: \"bridge\",\n            VLAN: \"vlan\",\n            ALIAS: \"alias\"\n        };\n        var INTERFACE_TYPE_TEXTS = {\n            \"physical\": \"Physical\",\n            \"bond\": \"Bond\",\n            \"bridge\": \"Bridge\",\n            \"vlan\": \"VLAN\",\n            \"alias\": \"Alias\"\n        };\n\n        // Different link modes for an interface.\n        var LINK_MODE = {\n            AUTO: \"auto\",\n            STATIC: \"static\",\n            DHCP: \"dhcp\",\n            LINK_UP: \"link_up\"\n        };\n        var LINK_MODE_TEXTS = {\n            \"auto\": \"Auto assign\",\n            \"static\": \"Static assign\",\n            \"dhcp\": \"DHCP\",\n            \"link_up\": \"Unconfigured\"\n        };\n\n        // Different selection modes.\n        var SELECTION_MODE = {\n            NONE: null,\n            SINGLE: \"single\",\n            MULTI: \"multi\",\n            DELETE: \"delete\",\n            ADD: \"add\",\n            CREATE_BOND: \"create-bond\",\n            CREATE_BRIDGE: \"create-bridge\",\n            CREATE_PHYSICAL: \"create-physical\",\n            EDIT: \"edit\"\n        };\n\n        var IP_ASSIGNMENT = {\n            DYNAMIC: \"dynamic\",\n            EXTERNAL: \"external\",\n            STATIC: \"static\"\n        };\n\n        // Device ip assignment options.\n        $scope.ipAssignments = [\n            {\n                name: IP_ASSIGNMENT.EXTERNAL,\n                text: \"External\"\n            },\n            {\n                name: IP_ASSIGNMENT.DYNAMIC,\n                text: \"Dynamic\"\n            },\n            {\n                name: IP_ASSIGNMENT.STATIC,\n                text: \"Static\"\n            }\n        ];\n\n        // Set the initial values for this scope.\n        $scope.loaded = false;\n        $scope.nodeHasLoaded = false;\n        $scope.managersHaveLoaded = false;\n        $scope.tableInfo = {column: 'name'};\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.vlans = VLANsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.interfaces = [];\n        $scope.interfaceLinksMap = {};\n        $scope.interfaceErrorsByLinkId = {};\n        $scope.originalInterfaces = {};\n        $scope.selectedInterfaces = [];\n        $scope.selectedMode = null;\n        $scope.newInterface = {};\n        $scope.newBondInterface = {};\n        $scope.newBridgeInterface = {};\n        $scope.editInterface = null;\n        $scope.bondOptions = GeneralManager.getData(\"bond_options\");\n        $scope.modes = [\n            {\n                mode: LINK_MODE.AUTO,\n                text: LINK_MODE_TEXTS[LINK_MODE.AUTO]\n            },\n            {\n                mode: LINK_MODE.STATIC,\n                text: LINK_MODE_TEXTS[LINK_MODE.STATIC]\n            },\n            {\n                mode: LINK_MODE.DHCP,\n                text: LINK_MODE_TEXTS[LINK_MODE.DHCP]\n            },\n            {\n                mode: LINK_MODE.LINK_UP,\n                text: LINK_MODE_TEXTS[LINK_MODE.LINK_UP]\n            }\n        ];\n\n        // Sets loaded to true if both the node has been loaded at the\n        // other required managers for this scope have been loaded.\n        function updateLoaded() {\n            $scope.loaded = $scope.nodeHasLoaded && $scope.managersHaveLoaded;\n            if($scope.loaded) {\n                updateInterfaces();\n            }\n        }\n\n        // Update the list of interfaces for the node. For each link on the\n        // interface, the interface is duplicated in the list to make render\n        // in a data-ng-repeat easier.\n        function updateInterfaces() {\n            $scope.originalInterfaces = {};\n            angular.forEach($scope.node.interfaces, function(nic) {\n                $scope.originalInterfaces[nic.id] = nic;\n            });\n\n            var interfaces = [];\n            // vlanTable contains data packaged for the 'Served VLANs' section,\n            // which is essentially Interface LEFT JOIN VLAN LEFT JOIN Subnet.\n            var vlanTable = [];\n            // Keep track of VLAN IDs we've processed.\n            var addedVlans = {};\n\n            angular.forEach($scope.node.interfaces, function(nic) {\n                // When a interface has a child that is a bond or bridge.\n                // Then that interface is not included in the interface list.\n                // Parent interface with a bond or bridge child can only have\n                // one child.\n                if(nic.children.length === 1) {\n                    var child = $scope.originalInterfaces[nic.children[0]];\n                    if(child.type === INTERFACE_TYPE.BOND ||\n                       child.type === INTERFACE_TYPE.BRIDGE) {\n                        // This parent now has a bond or bridge for a child.\n                        // If this was the editInterface, then it needs to be\n                        // unset. We only need to check the \"id\" (not\n                        // the \"link_id\"), because if this interface did have\n                        // aliases they have now been removed.\n                        if(angular.isObject($scope.editInterface) &&\n                            $scope.editInterface.id === nic.id) {\n                            $scope.editInterface = null;\n                            $scope.selectedMode = SELECTION_MODE.NONE;\n                        }\n                        return;\n                    }\n                }\n\n                // When the interface is a bond or a bridge, place the children\n                // as members for that interface.\n                if(nic.type === INTERFACE_TYPE.BOND ||\n                   nic.type === INTERFACE_TYPE.BRIDGE) {\n                    nic.members = [];\n                    angular.forEach(nic.parents, function(parent) {\n                        nic.members.push(\n                            angular.copy($scope.originalInterfaces[parent]));\n                    });\n                }\n\n                // Format the tags when they have not already been formatted.\n                if(angular.isArray(nic.tags) &&\n                    nic.tags.length > 0 &&\n                    !angular.isString(nic.tags[0].text)) {\n                    nic.tags = formatTags(nic.tags);\n                }\n\n                nic.vlan = VLANsManager.getItemFromList(nic.vlan_id);\n                if(angular.isObject(nic.vlan)) {\n                    nic.fabric = FabricsManager.getItemFromList(\n                            nic.vlan.fabric);\n\n                    // Build the vlanTable for controller detail page.\n                    if ($scope.$parent.isController) {\n                        // Skip duplicate VLANs (by id, they can share names).\n                        if(!(Object.prototype.hasOwnProperty.call(\n                                addedVlans, nic.vlan.id))) {\n                            addedVlans[nic.vlan.id] = true;\n                            var vlanRecord = {\n                                \"fabric\": nic.fabric,\n                                \"vlan\": nic.vlan,\n                                \"subnets\": $filter('filter')(\n                                    $scope.subnets, {vlan:nic.vlan.id}, true),\n                                \"primary_rack\": null,\n                                \"secondary_rack\": null,\n                                \"sort_key\": nic.fabric.name + \"|\" +\n                                    $scope.getVLANText(nic.vlan)\n                            };\n                            if(nic.vlan.primary_rack) {\n                                vlanRecord.primary_rack =\n                                    ControllersManager.getItemFromList(\n                                        nic.vlan.primary_rack);\n                            }\n                            if(nic.vlan.secondary_rack) {\n                                vlanRecord.secondary_rack =\n                                    ControllersManager.getItemFromList(\n                                        nic.vlan.secondary_rack);\n                            }\n                            vlanTable.push(vlanRecord);\n                        }\n                        // Sort the table by (VLANText, fabric.name).\n                        vlanTable.sort(function(a, b) {\n                            return a.sort_key.localeCompare(b.sort_key);\n                        });\n                    }\n                }\n\n                // Update the interface based on its links or duplicate the\n                // interface if it has multiple links.\n                if(nic.links.length === 0) {\n                    // No links on this interface. The interface is either\n                    // disabled or has no links (which means the interface\n                    // is in LINK_UP mode).\n                    nic.link_id = -1;\n                    nic.subnet = null;\n                    nic.mode = LINK_MODE.LINK_UP;\n                    nic.ip_address = \"\";\n                    interfaces.push(nic);\n                } else {\n                    var idx = 0;\n                    angular.forEach(nic.links, function(link) {\n                        var nic_copy = angular.copy(nic);\n                        nic_copy.link_id = link.id;\n                        nic_copy.subnet = SubnetsManager.getItemFromList(\n                            link.subnet_id);\n                        nic_copy.mode = link.mode;\n                        nic_copy.ip_address = link.ip_address;\n                        if(angular.isUndefined(nic_copy.ip_address)) {\n                            nic_copy.ip_address = \"\";\n                        }\n                        // We don't want to deep copy the VLAN and fabric\n                        // object so we set those back to the original.\n                        nic_copy.vlan = nic.vlan;\n                        nic_copy.fabric = nic.fabric;\n                        if(idx > 0) {\n                            // Each extra link is an alais on the original\n                            // interface.\n                            nic_copy.type = INTERFACE_TYPE.ALIAS;\n                            nic_copy.name += \":\" + idx;\n                        }\n                        idx++;\n                        interfaces.push(nic_copy);\n                    });\n                }\n            });\n\n            // Update the scopes interfaces.\n            $scope.interfaces = interfaces;\n            $scope.vlanTable = vlanTable;\n\n            // Update the scope interface links mapping.\n            $scope.interfaceLinksMap = {};\n            angular.forEach($scope.interfaces, function(nic) {\n                var linkMaps = $scope.interfaceLinksMap[nic.id];\n                if(angular.isUndefined(linkMaps)) {\n                    linkMaps = {};\n                    $scope.interfaceLinksMap[nic.id] = linkMaps;\n                }\n                linkMaps[nic.link_id] = nic;\n            });\n\n            // Clear the editInterface if it no longer exists in the\n            // interfaceLinksMap.\n            if(angular.isObject($scope.editInterface)) {\n                var links = $scope.interfaceLinksMap[$scope.editInterface.id];\n                if(angular.isUndefined(links)) {\n                    $scope.editInterface = null;\n                    $scope.selectedMode = SELECTION_MODE.NONE;\n                } else {\n                    var link = links[$scope.editInterface.link_id];\n                    if(angular.isUndefined(link)) {\n                        $scope.editInterface = null;\n                        $scope.selectedMode = SELECTION_MODE.NONE;\n                    }\n                }\n            }\n\n            // Update newInterface.parent if it has changed.\n            updateNewInterface();\n        }\n\n        // Return the original link object for the given interface.\n        function mapNICToOriginalLink(nic_id, link_id) {\n            var originalInteface = $scope.originalInterfaces[nic_id];\n            if(angular.isObject(originalInteface)) {\n                var i, link = null;\n                for(i = 0; i < originalInteface.links.length; i++) {\n                    link = originalInteface.links[i];\n                    if(link.id === link_id) {\n                        break;\n                    }\n                }\n                return link;\n            } else {\n                return null;\n            }\n        }\n\n        // Leave single selection mode.\n        function leaveSingleSelectionMode() {\n            if($scope.selectedMode === SELECTION_MODE.SINGLE ||\n                $scope.selectedMode === SELECTION_MODE.ADD ||\n                $scope.selectedMode === SELECTION_MODE.DELETE) {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            }\n        }\n\n        // Update the new interface since the interfaces list has\n        // been reloaded.\n        function updateNewInterface() {\n            if(angular.isObject($scope.newInterface.parent)) {\n                var parentId = $scope.newInterface.parent.id;\n                var linkId = $scope.newInterface.parent.link_id;\n                var links = $scope.interfaceLinksMap[parentId];\n                if(angular.isObject(links)) {\n                    var newParent = links[linkId];\n                    if(angular.isObject(newParent)) {\n                        $scope.newInterface.parent = newParent;\n\n                        var iType = $scope.newInterface.type;\n                        var isAlias = iType === INTERFACE_TYPE.ALIAS;\n                        var isVLAN = iType === INTERFACE_TYPE.VLAN;\n                        var canAddAlias = $scope.canAddAlias(newParent);\n                        var canAddVLAN = $scope.canAddVLAN(newParent);\n                        if(!canAddAlias && !canAddVLAN) {\n                            // Cannot do any adding now.\n                            $scope.newInterface = {};\n                            leaveSingleSelectionMode();\n                        } else {\n                            if(isAlias && !canAddAlias && canAddVLAN) {\n                                $scope.newInterface.type = \"vlan\";\n                                $scope.addTypeChanged();\n                            } else if(isVLAN && !canAddVLAN && canAddAlias) {\n                                $scope.newInterface.type = \"alias\";\n                                $scope.addTypeChanged();\n                            }\n                        }\n                        return;\n                    }\n                }\n\n                // Parent no longer exists. Exit the single selection modes.\n                $scope.newInterface = {};\n                leaveSingleSelectionMode();\n            }\n        }\n\n        // Return the default VLAN for a fabric.\n        function getDefaultVLAN(fabric) {\n            return VLANsManager.getItemFromList(fabric.default_vlan_id);\n        }\n\n        // Return list of unused VLANs for an interface. Also remove the\n        // ignoreVLANs from the returned list.\n        function getUnusedVLANs(nic, ignoreVLANs) {\n            var vlans = $filter('removeDefaultVLAN')($scope.vlans);\n            vlans = $filter('filterByFabric')(vlans, nic.fabric);\n            vlans = $filter('filterByUnusedForInterface')(\n                vlans, nic, $scope.originalInterfaces);\n\n            // Remove the VLAN's that should be ignored when getting the unused\n            // VLANs. This is done to help the selection of the next default.\n            if(angular.isUndefined(ignoreVLANs)) {\n                ignoreVLANs = [];\n            }\n            angular.forEach(ignoreVLANs, function(vlan) {\n                var i;\n                for(i = 0; i < vlans.length; i++) {\n                    if(vlans[i].id === vlan.id) {\n                        vlans.splice(i, 1);\n                        break;\n                    }\n                }\n            });\n            return vlans;\n        }\n\n        // Return the currently selected interface objects.\n        function getSelectedInterfaces() {\n            var interfaces = [];\n            angular.forEach($scope.selectedInterfaces, function(key) {\n                var splitKey = key.split('/');\n                var links = $scope.interfaceLinksMap[splitKey[0]];\n                if(angular.isObject(links)) {\n                    var nic = links[splitKey[1]];\n                    if(angular.isObject(nic)) {\n                        interfaces.push(nic);\n                    }\n                }\n            });\n            return interfaces;\n        }\n\n        // Get the next available name.\n        function getNextName(prefix) {\n            var idx = 0;\n            angular.forEach($scope.originalInterfaces, function(nic) {\n                if(nic.name === prefix + idx) {\n                    idx++;\n                }\n            });\n            return prefix + idx;\n        }\n\n        // Return the tags formatted for ngTagInput.\n        function formatTags(tags) {\n            var formatted = [];\n            angular.forEach(tags, function(tag) {\n                formatted.push({ text: tag });\n            });\n            return formatted;\n        }\n\n        // Called by $parent when the node has been loaded.\n        $scope.nodeLoaded = function() {\n            $scope.$watch(\"node.interfaces\", updateInterfaces);\n            // Watch subnets for the served VLANs section.\n            if ($scope.$parent.isController) {\n                $scope.$watch(\"subnets\", updateInterfaces, true);\n            }\n            $scope.nodeHasLoaded = true;\n            updateLoaded();\n        };\n\n        // Return true if only the name or mac address of an interface can\n        // be edited.\n        $scope.isLimitedEditingAllowed = function(nic) {\n            if (!$scope.isSuperUser()) {\n                // If the user is not the superuser, pretend it's not Ready.\n                return false;\n            }\n            if ($scope.$parent.isController || $scope.$parent.isDevice) {\n                // Controllers and Devices are never in limited mode.\n                return false;\n            }\n            return (\n                angular.isObject($scope.node) &&\n                $scope.node.status === \"Deployed\" &&\n                nic.type !== \"vlan\");\n        };\n\n        // Return true if the networking information cannot be edited.\n        // (it can't be changed when the node is in any state other\n        // than Ready or Broken and the user is not a superuser)\n        $scope.isAllNetworkingDisabled = function() {\n            if (!$scope.isSuperUser()) {\n                // If the user is not a superuser, disable the networking panel.\n                return true;\n            }\n            if ($scope.$parent.isController || $scope.$parent.isDevice) {\n                // Never disable the full networking panel when its a\n                // Controller or Device.\n                return false;\n            }\n            if (angular.isObject($scope.node) &&\n                    [\"Ready\", \"Allocated\", \"Broken\"].indexOf(\n                        $scope.node.status) === -1) {\n                // If a non-controller node is not ready allocated, or broken,\n                // disable networking panel.\n                return true;\n            }\n            // User must be a superuser and the node must be\n            // either ready or broken. Enable it.\n            return false;\n        };\n\n        // Return true if the interface is the boot interface or has a parent\n        // that is the boot interface.\n        $scope.isBootInterface = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            }\n\n            if(nic.is_boot && nic.type !== INTERFACE_TYPE.ALIAS) {\n                return true;\n            } else if(nic.type === INTERFACE_TYPE.BOND ||\n                      nic.type === INTERFACE_TYPE.BRIDGE) {\n                var i;\n                for(i = 0; i < nic.members.length; i++) {\n                    if(nic.members[i].is_boot) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Get the text for the type of the interface.\n        $scope.getInterfaceTypeText = function(nic) {\n            var text = INTERFACE_TYPE_TEXTS[nic.type];\n            if(angular.isDefined(text)) {\n                return text;\n            } else {\n                return nic.type;\n            }\n        };\n\n        // Get the text for the link mode of the interface.\n        $scope.getLinkModeText = function(nic) {\n            var text = LINK_MODE_TEXTS[nic.mode];\n            if(angular.isDefined(text)) {\n                return text;\n            } else {\n                return nic.mode;\n            }\n        };\n\n        // Get the text to display in the VLAN dropdown.\n        $scope.getVLANText = function(vlan) {\n            if(!angular.isObject(vlan)) {\n                return \"\";\n            }\n\n            if(vlan.vid === 0) {\n                return \"untagged\";\n            } else if(angular.isString(vlan.name) && vlan.name.length > 0) {\n                return vlan.vid + \" (\" + vlan.name + \")\";\n            } else {\n                return vlan.vid;\n            }\n        };\n\n        // Get the text to display in the subnet dropdown.\n        $scope.getSubnetText = function(subnet) {\n            if(!angular.isObject(subnet)) {\n                return \"Unconfigured\";\n            } else if(angular.isString(subnet.name) &&\n                subnet.name.length > 0 &&\n                subnet.cidr !== subnet.name) {\n                return subnet.cidr + \" (\" + subnet.name + \")\";\n            } else {\n                return subnet.cidr;\n            }\n        };\n\n        // Get the subnet from its ID.\n        $scope.getSubnet = function(subnetId) {\n            return SubnetsManager.getItemFromList(subnetId);\n        };\n\n        // Return True if the interface name that the user typed is invalid.\n        $scope.isInterfaceNameInvalid = function(nic) {\n            if(!angular.isString(nic.name) || nic.name.length === 0) {\n                return true;\n            } else if(angular.isArray($scope.node.interfaces)) {\n                var i;\n                for(i = 0; i < $scope.node.interfaces.length; i++) {\n                    var otherNic = $scope.node.interfaces[i];\n                    if(otherNic.name === nic.name && otherNic.id !== nic.id) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return True if the link mode select should be disabled.\n        $scope.isLinkModeDisabled = function(nic) {\n            // This is only disabled when a subnet has not been selected.\n            if(angular.isFunction(nic.getValue)) {\n                return !angular.isObject(nic.getValue('subnet'));\n            } else {\n                return !angular.isObject(nic.subnet);\n            }\n        };\n\n        // Return the interface errors.\n        $scope.getInterfaceError = function(nic) {\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                return $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            return null;\n        };\n\n        // Return True if the interface IP address that the user typed is\n        // invalid.\n        $scope.isIPAddressInvalid = function(nic) {\n            if(angular.isString(nic.ip_address) && nic.mode === 'static') {\n                return (\n                    !ValidationService.validateIP(nic.ip_address) ||\n                    !ValidationService.validateIPInNetwork(\n                        nic.ip_address, nic.subnet.cidr));\n            } else {\n                return false;\n            }\n        };\n\n        // Return unique key for the interface.\n        $scope.getUniqueKey = function(nic) {\n            return nic.id + \"/\" + nic.link_id;\n        };\n\n        // Toggle selection of the interface.\n        $scope.toggleInterfaceSelect = function(nic) {\n            var key = $scope.getUniqueKey(nic);\n            var idx = $scope.selectedInterfaces.indexOf(key);\n            if(idx > -1) {\n                $scope.selectedInterfaces.splice(idx, 1);\n            } else {\n                $scope.selectedInterfaces.push(key);\n            }\n\n            if($scope.selectedInterfaces.length > 1) {\n                if($scope.selectedMode !== SELECTION_MODE.BOND) {\n                    $scope.selectedMode = SELECTION_MODE.MULTI;\n                }\n            } else if($scope.selectedInterfaces.length === 1) {\n                $scope.selectedMode = SELECTION_MODE.SINGLE;\n            } else {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            }\n        };\n\n        // Return true when the interface is selected.\n        $scope.isInterfaceSelected = function(nic) {\n            return $scope.selectedInterfaces.indexOf(\n                $scope.getUniqueKey(nic)) > -1;\n        };\n\n        // Returns true if the interface is not selected\n        $scope.cannotEditInterface = function(nic) {\n            if ($scope.selectedMode === SELECTION_MODE.NONE) {\n                return false;\n            } else if (\n                  $scope.selectedMode !== SELECTION_MODE.MULTI &&\n                  $scope.isInterfaceSelected(nic)) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return true if in editing mode for the interface.\n        $scope.isEditing = function(nic) {\n            if($scope.selectedMode !== SELECTION_MODE.EDIT) {\n                return false;\n            } else {\n                return $scope.editInterface.id === nic.id;\n            }\n        };\n\n        // Start editing this interface.\n        $scope.edit = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            $scope.selectedMode = SELECTION_MODE.EDIT;\n            if($scope.$parent.isDevice) {\n                $scope.editInterface = {\n                    id: nic.id,\n                    name: nic.name,\n                    mac_address: nic.mac_address,\n                    tags: nic.tags.map(function(tag) { return tag.text; }),\n                    subnet: nic.subnet,\n                    ip_address: nic.ip_address,\n                    ip_assignment: nic.ip_assignment,\n                    link_id: nic.link_id\n                };\n                if(nic.subnet !== undefined && nic.subnet !== null) {\n                    $scope.editInterface.defaultSubnet = nic.subnet;\n                } else {\n                    $scope.editInterface.defaultSubnet = $scope.subnets[0];\n                }\n            } else {\n                $scope.editInterface = {\n                    id: nic.id,\n                    name: nic.name,\n                    mac_address: nic.mac_address,\n                    tags: nic.tags.map(function(tag) { return tag.text; }),\n                    fabric: nic.fabric,\n                    vlan: nic.vlan,\n                    subnet: nic.subnet,\n                    mode: nic.mode,\n                    ip_address: nic.ip_address,\n                    link_id: nic.link_id\n                };\n            }\n        };\n\n        // Called when the fabric is changed.\n        $scope.fabricChanged = function(nic) {\n            // Update the VLAN on the node to be the default VLAN for that\n            // fabric. The first VLAN for the fabric is the default.\n            if(nic.fabric !== null) {\n                nic.vlan = getDefaultVLAN(nic.fabric);\n            } else {\n                nic.vlan = null;\n            }\n            $scope.vlanChanged(nic);\n        };\n\n        // Called when the fabric is changed in a maas-obj-form.\n        $scope.fabricChangedForm = function(key, value, form) {\n            var vlan;\n            if(value !== null) {\n                vlan = getDefaultVLAN(value);\n            } else {\n                vlan = null;\n            }\n            form.updateValue('vlan', vlan);\n            $scope.vlanChangedForm('vlan', vlan, form);\n        };\n\n        // Called when the VLAN is changed.\n        $scope.vlanChanged = function(nic) {\n            nic.subnet = null;\n            $scope.subnetChanged(nic);\n        };\n\n        // Called when the VLAN is changed on a maas-obj-form\n        $scope.vlanChangedForm = function(key, value, form) {\n            form.updateValue('subnet', null);\n            $scope.subnetChangedForm('subnet', null, form);\n        };\n\n        // Called when the subnet is changed.\n        $scope.subnetChanged = function(nic) {\n            if(!angular.isObject(nic.subnet)) {\n                // Set to 'Unconfigured' so the link mode should be set to\n                // 'link_up'.\n                nic.mode = LINK_MODE.LINK_UP;\n            }\n            if ($scope.$parent.isDevice) {\n                nic.ip_address = null;\n            }\n            $scope.modeChanged(nic);\n        };\n\n        // Called when the subnet is changed.\n        $scope.subnetChangedForm = function(key, value, form) {\n            if(!angular.isObject(value)) {\n                // Set to 'Unconfigured' so the link mode should be set to\n                // 'link_up'.\n                form.updateValue('mode', LINK_MODE.LINK_UP);\n            }\n            mode = form.getValue('mode');\n            form.updateValue('ip_address', null);\n            $scope.modeChangedForm('mode', mode, form);\n        };\n\n        // Called when the mode is changed.\n        $scope.modeChanged = function(nic) {\n            // Clear the IP address when the mode is changed.\n            nic.ip_address = \"\";\n            if(nic.mode === 'static') {\n                var originalLink = mapNICToOriginalLink(nic.id, nic.link_id);\n                if(angular.isObject(originalLink) &&\n                    nic.subnet.id === originalLink.subnet_id) {\n                    // Set the original IP address if same subnet.\n                    nic.ip_address = originalLink.ip_address;\n                }\n            }\n        };\n\n        // Called when the mode is changed on a maas-obj-form.\n        $scope.modeChangedForm = function(key, value, form) {\n            // Clear the IP address when the mode is changed.\n            form.updateValue('ip_address', \"\");\n            if(value === 'static') {\n                var originalLink = mapNICToOriginalLink(\n                  form.getValue('id'), form.getValue('link_id'));\n                if(angular.isObject(originalLink) &&\n                    form.getValue('subnet').id === originalLink.subnet_id) {\n                    // Set the original IP address if same subnet.\n                    form.updateValue('ip_address', originalLink.ip_address);\n                }\n            }\n        };\n\n        // Called to cancel edit mode.\n        $scope.editCancel = function(nic) {\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n            $scope.editInterface = null;\n        };\n\n        // Preprocess things for updateInterfaceForm.\n        $scope.preProcessInterface = function(nic) {\n            var params = angular.copy(nic);\n\n            delete params.id;\n            params.system_id = $scope.node.system_id;\n            params.interface_id = nic.id;\n\n            // we need IDs not objects.\n            if(nic.fabric !== undefined && nic.fabric !== null) {\n                params.fabric = nic.fabric.id;\n            } else {\n                params.fabric = null;\n            }\n            if(nic.vlan !== undefined && nic.vlan !== null) {\n                params.vlan = nic.vlan.id;\n            } else {\n                params.vlan = null;\n            }\n            if(nic.subnet !== undefined && nic.subnet !== null) {\n                params.subnet = params.subnet.id;\n            } else {\n                delete params.subnet;\n            }\n\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            } else {\n                delete params.link_id;\n            }\n            if((nic.mode === LINK_MODE.STATIC ||\n                nic.ip_assignment !== IP_ASSIGNMENT.DYNAMIC) &&\n               angular.isString(nic.ip_address) &&\n               nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            } else {\n                delete params.ip_address;\n            }\n            return params;\n        };\n\n        // Save the following interface on the node.\n        $scope.saveInterface = function(nic) {\n            var params;\n            if($scope.$parent.isDevice) {\n                params = {\n                    \"name\": nic.name,\n                    \"mac_address\": nic.mac_address,\n                    \"ip_assignment\": nic.ip_assignment,\n                    \"ip_address\": nic.ip_address\n                };\n            } else {\n                params = {\n                    \"name\": nic.name,\n                    \"mac_address\": nic.mac_address,\n                    \"mode\": nic.mode,\n                    \"tags\": nic.tags.map(\n                        function(tag) { return tag.text; })\n                };\n            }\n            if(nic.fabric !== undefined && nic.fabric !== null) {\n                params.fabric = nic.fabric.id;\n            } else {\n                params.fabric = null;\n            }\n            if(nic.vlan !== undefined && nic.vlan !== null) {\n                params.vlan = nic.vlan.id;\n            } else {\n                params.vlan = null;\n            }\n            if (nic.subnet !== undefined && nic.subnet !== null) {\n                params.subnet = nic.subnet.id;\n            } else {\n                params.subnet = null;\n            }\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            if(angular.isString(nic.ip_address) && nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            }\n            return $scope.$parent.nodesManager.updateInterface(\n                $scope.node, nic.id, params).then(null, function(error) {\n                    // XXX blake_r: Just log the error in the console, but\n                    // we need to expose this as a better message to the\n                    // user.\n                    console.log(error);\n\n                    // Update the interfaces so it is back to the way it\n                    // was before the user changed it.\n                    updateInterfaces();\n                });\n        };\n\n        // Save the following link on the node.\n        $scope.saveInterfaceLink = function(nic) {\n            var params = {\n                \"mode\": nic.mode\n            };\n            if($scope.$parent.isDevice) {\n                params.ip_assignment = nic.ip_assignment;\n            }\n            if(angular.isObject(nic.subnet)) {\n                params.subnet = nic.subnet.id;\n            }\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            if(nic.mode === LINK_MODE.STATIC &&\n                angular.isString(nic.ip_address) &&\n                nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            }\n            return $scope.$parent.nodesManager.linkSubnet(\n                $scope.node, nic.id, params).then(null, function(error) {\n                    console.log(error);\n                    if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                        $scope.interfaceErrorsByLinkId[nic.link_id] = error;\n                    }\n                    // Update the interfaces so it is back to the way it\n                    // was before the user changed it.\n                    updateInterfaces();\n                    throw error;\n                });\n        };\n\n        // Called to save the interface.\n        $scope.editSave = function(editInterface) {\n            $scope.editCancel();\n            return editInterface;\n        };\n\n        // Return true if the interface delete confirm is being shown.\n        $scope.isShowingDeleteConfirm = function() {\n            return $scope.selectedMode === SELECTION_MODE.DELETE;\n        };\n\n        // Return true if the interface add interface is being shown.\n        $scope.isShowingAdd = function() {\n            return $scope.selectedMode === SELECTION_MODE.ADD;\n        };\n\n        // Return true if either an alias or VLAN can be added.\n        $scope.canAddAliasOrVLAN = function(nic) {\n            if($scope.$parent.isController) {\n                return false;\n            } else if ($scope.isAllNetworkingDisabled()) {\n                return false;\n            } else {\n                return $scope.canAddAlias(nic) || $scope.canAddVLAN(nic);\n            }\n        };\n\n        // Return true if the alias can be added to interface.\n        $scope.canAddAlias = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            } else if(nic.type === INTERFACE_TYPE.ALIAS) {\n                return false;\n            } else if(nic.links.length === 0 ||\n                nic.links[0].mode === LINK_MODE.LINK_UP) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return true if the VLAN can be added to interface.\n        $scope.canAddVLAN = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            } else if(nic.type === INTERFACE_TYPE.ALIAS ||\n                nic.type === INTERFACE_TYPE.VLAN) {\n                return false;\n            }\n            var unusedVLANs = getUnusedVLANs(nic);\n            return unusedVLANs.length > 0;\n        };\n\n        // Return true if another VLAN can be added to this already being\n        // added interface.\n        $scope.canAddAnotherVLAN = function(nic) {\n            if(!$scope.canAddVLAN(nic)) {\n                return false;\n            }\n            var unusedVLANs = getUnusedVLANs(nic);\n            return unusedVLANs.length > 1;\n        };\n\n        // Return the text to use for the remove link and message.\n        $scope.getRemoveTypeText = function(nic) {\n            if(nic.type === INTERFACE_TYPE.PHYSICAL) {\n                return \"interface\";\n            } else if(nic.type === INTERFACE_TYPE.VLAN) {\n                return \"VLAN\";\n            } else {\n                return nic.type;\n            }\n        };\n\n        // Return true if the interface can be removed.\n        $scope.canBeRemoved = function() {\n            return (\n                !$scope.$parent.isController &&\n                !$scope.isAllNetworkingDisabled());\n        };\n\n        // Enter remove mode.\n        $scope.remove = function() {\n            $scope.selectedMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter remove by selecting the node first.\n        $scope.quickRemove = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            $scope.remove();\n        };\n\n        // Cancel the current mode go back to sinle selection mode.\n        $scope.cancel = function() {\n            $scope.newInterface = {};\n            $scope.newBondInterface = {};\n            $scope.newBridgeInterface = {};\n            if($scope.selectedMode === SELECTION_MODE.CREATE_BOND) {\n                $scope.selectedMode = SELECTION_MODE.MULTI;\n            } else if($scope.selectedMode === SELECTION_MODE.CREATE_PHYSICAL) {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            } else {\n                $scope.selectedMode = SELECTION_MODE.SINGLE;\n            }\n        };\n\n        // Confirm the removal of interface.\n        $scope.confirmRemove = function(nic) {\n            $scope.selectedMode = SELECTION_MODE.NONE;\n            $scope.selectedInterfaces = [];\n            if(nic.type !== INTERFACE_TYPE.ALIAS) {\n                $scope.$parent.nodesManager.deleteInterface(\n                    $scope.node, nic.id);\n            } else {\n                $scope.$parent.nodesManager.unlinkSubnet(\n                    $scope.node, nic.id, nic.link_id);\n            }\n\n            // Remove the interface from available interfaces\n            var idx = $scope.interfaces.indexOf(nic);\n            if(idx > -1) {\n                $scope.interfaces.splice(idx, 1);\n            }\n        };\n\n        // Enter add mode.\n        $scope.add = function(type, nic) {\n            // When this is called right after another VLAN was just added, we\n            // remove its used VLAN from the available list.\n            var ignoreVLANs = [];\n            if(angular.isObject($scope.newInterface.vlan)) {\n                ignoreVLANs.push($scope.newInterface.vlan);\n            }\n\n            // Get the default VLAN for the new interface.\n            var vlans = getUnusedVLANs(nic, ignoreVLANs);\n            var defaultVLAN = null;\n            if(vlans.length > 0) {\n                defaultVLAN = vlans[0];\n            }\n            var defaultSubnet = null;\n            var defaultMode = LINK_MODE.LINK_UP;\n\n            // Alias used defaults based from its parent.\n            if(type === INTERFACE_TYPE.ALIAS) {\n                defaultVLAN = nic.vlan;\n                defaultSubnet = $filter('filter')(\n                    $scope.subnets, {vlan:defaultVLAN.id}, true)[0];\n                defaultMode = LINK_MODE.AUTO;\n            }\n\n            // Setup the new interface and enter add mode.\n            $scope.newInterface = {\n                type: type,\n                vlan: defaultVLAN,\n                subnet: defaultSubnet,\n                mode: defaultMode,\n                parent: nic,\n                tags: []\n            };\n            $scope.selectedMode = SELECTION_MODE.ADD;\n        };\n\n        // Quickly enter add by selecting the node first.\n        $scope.quickAdd = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            var type = 'alias';\n            if(!$scope.canAddAlias(nic)) {\n                type = 'vlan';\n            }\n            $scope.add(type, nic);\n        };\n\n        // Return the name of the interface being added.\n        $scope.getAddName = function() {\n            if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                var aliasIdx = $scope.newInterface.parent.links.length;\n                return $scope.newInterface.parent.name + \":\" + aliasIdx;\n            } else if ($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                return (\n                    $scope.newInterface.parent.name + \".\" +\n                    $scope.newInterface.vlan.vid);\n            }\n        };\n\n        // Called when the type of interface is changed.\n        $scope.addTypeChanged = function() {\n            if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                $scope.newInterface.vlan = $scope.newInterface.parent.vlan;\n                $scope.newInterface.subnet = $filter('filter')(\n                    $scope.subnets,\n                    {vlan:$scope.newInterface.vlan.id}, true)[0];\n                $scope.newInterface.mode = LINK_MODE.AUTO;\n            } else if($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                var vlans = getUnusedVLANs($scope.newInterface.parent);\n                $scope.newInterface.vlan = null;\n                if(vlans.length > 0) {\n                    $scope.newInterface.vlan = vlans[0];\n                }\n                $scope.newInterface.subnet = null;\n                $scope.newInterface.mode = LINK_MODE.LINK_UP;\n            }\n        };\n\n        // Perform the add action over the websocket.\n        $scope.addInterface = function(type) {\n            var nic;\n            if($scope.$parent.isDevice) {\n                nic = {\n                    id: $scope.newInterface.parent.id,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    ip_assignment: $scope.newInterface.ip_assignment,\n                    subnet: $scope.newInterface.subnet,\n                    ip_address: $scope.newInterface.ip_address\n                };\n                $scope.saveInterfaceLink(nic);\n            } else if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                // Add a link to the current interface.\n                nic = {\n                    id: $scope.newInterface.parent.id,\n                    mode: $scope.newInterface.mode,\n                    subnet: $scope.newInterface.subnet,\n                    ip_address: $scope.newInterface.ip_address\n                };\n                $scope.saveInterfaceLink(nic);\n            } else if($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                var params = {\n                    parent: $scope.newInterface.parent.id,\n                    vlan: $scope.newInterface.vlan.id,\n                    mode: $scope.newInterface.mode,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; })\n                };\n                if(angular.isObject($scope.newInterface.subnet)) {\n                    params.subnet = $scope.newInterface.subnet.id;\n                    params.ip_address = $scope.newInterface.ip_address;\n                }\n                $scope.$parent.nodesManager.createVLANInterface(\n                    $scope.node, params).then(null, function(error) {\n                        // Should do something better but for now just log\n                        // the error.\n                        console.log(error);\n                    });\n            }\n\n            // Add again based on the clicked option.\n            if(angular.isString(type)) {\n                $scope.add(type, $scope.newInterface.parent);\n            } else {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n                $scope.selectedInterfaces = [];\n                $scope.newInterface = {};\n            }\n        };\n\n        // Return true if the networking information cannot be edited\n        // or if this interface should be disabled in the list. Only\n        // returns true when in create bond mode.\n        $scope.isDisabled = function() {\n            if ($scope.isAllNetworkingDisabled()) {\n                return true;\n            } else {\n                return (\n                    $scope.selectedMode !== SELECTION_MODE.NONE &&\n                    $scope.selectedMode !== SELECTION_MODE.SINGLE &&\n                    $scope.selectedMode !== SELECTION_MODE.MULTI);\n            }\n        };\n\n        // Return true when a bond can be created based on the current\n        // selection. Only can be done if no aliases are selected and all\n        // selected interfaces are on the same VLAN.\n        $scope.canCreateBond = function() {\n            if($scope.selectedMode !== SELECTION_MODE.MULTI) {\n                return false;\n            }\n            var interfaces = getSelectedInterfaces();\n            var i, vlan;\n            for(i = 0; i < interfaces.length; i++) {\n                var nic = interfaces[i];\n                if(nic.type === INTERFACE_TYPE.ALIAS ||\n                    nic.type === INTERFACE_TYPE.BOND) {\n                    return false;\n                } else if(!angular.isObject(vlan)) {\n                    vlan = nic.vlan;\n                } else if(vlan !== nic.vlan) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        // Return true when the create bond view is being shown.\n        $scope.isShowingCreateBond = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_BOND;\n        };\n\n        // Show the create bond view.\n        $scope.showCreateBond = function() {\n            if($scope.selectedMode === SELECTION_MODE.MULTI &&\n                $scope.canCreateBond()) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_BOND;\n\n                var parents = getSelectedInterfaces();\n                $scope.newBondInterface = {\n                    name: getNextName(\"bond\"),\n                    tags: [],\n                    parents: parents,\n                    primary: parents[0],\n                    mac_address: \"\",\n                    mode: \"active-backup\",\n                    lacpRate: \"slow\",\n                    xmitHashPolicy: \"layer2\"\n                };\n            }\n        };\n\n        // Return true if the interface has a parent that is a boot interface.\n        $scope.hasBootInterface = function(nic) {\n            if(!angular.isArray(nic.parents)) {\n                return false;\n            }\n            var i;\n            for(i = 0; i < nic.parents.length; i++) {\n                if(nic.parents[i].is_boot) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return the MAC address that should be shown as a placeholder. This\n        // this is the MAC address of the primary interface.\n        $scope.getInterfacePlaceholderMACAddress = function(nic) {\n            if(!angular.isObject(nic.primary)) {\n                return \"\";\n            } else {\n                return nic.primary.mac_address;\n            }\n        };\n\n        // Return true if the user has inputed a value in the MAC address field\n        // but it is invalid.\n        $scope.isMACAddressInvalid = function(mac_address, invalidEmpty) {\n            if(angular.isUndefined(invalidEmpty)) {\n                invalidEmpty = false;\n            }\n            if(!angular.isString(mac_address) || mac_address === \"\") {\n                return invalidEmpty;\n            }\n            return !ValidationService.validateMAC(mac_address);\n        };\n\n        // Return true when the LACR rate selection should be shown.\n        $scope.showLACPRate = function() {\n            return $scope.newBondInterface.mode === \"802.3ad\";\n        };\n\n        // Return true when the XMIT hash policy should be shown.\n        $scope.showXMITHashPolicy = function() {\n            return (\n                $scope.newBondInterface.mode === \"balance-xor\" ||\n                $scope.newBondInterface.mode === \"802.3ad\" ||\n                $scope.newBondInterface.mode === \"balance-tlb\");\n        };\n\n        // Return true if cannot add the bond.\n        $scope.cannotAddBond = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newBondInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newBondInterface.mac_address));\n        };\n\n        // Actually add the bond.\n        $scope.addBond = function() {\n            if($scope.cannotAddBond()) {\n               return;\n            }\n\n            var parents = $scope.newBondInterface.parents.map(\n                function(nic) { return nic.id; });\n            var mac_address = $scope.newBondInterface.mac_address;\n            if(mac_address === \"\") {\n                mac_address = $scope.newBondInterface.primary.mac_address;\n            }\n            var vlan_id, vlan = $scope.newBondInterface.primary.vlan;\n            if(angular.isObject(vlan)) {\n                vlan_id = vlan.id;\n            } else {\n                vlan_id = null;\n            }\n            var params = {\n                name: $scope.newBondInterface.name,\n                mac_address: mac_address,\n                tags: $scope.newBondInterface.tags.map(\n                    function(tag) { return tag.text; }),\n                parents: parents,\n                vlan: vlan_id,\n                bond_mode: $scope.newBondInterface.mode,\n                bond_lacp_rate: $scope.newBondInterface.lacpRate,\n                bond_xmit_hash_policy: $scope.newBondInterface.xmitHashPolicy\n            };\n            $scope.$parent.nodesManager.createBondInterface(\n                $scope.node, params).then(null, function(error) {\n                    // Should do something better but for now just log\n                    // the error.\n                    console.log(error);\n                });\n\n            // Remove the parent interfaces so that they don't show up\n            // in the listing unti the new bond appears.\n            angular.forEach($scope.newBondInterface.parents, function(parent) {\n                var idx = $scope.interfaces.indexOf(parent);\n                if(idx > -1) {\n                    $scope.interfaces.splice(idx, 1);\n                }\n            });\n\n            // Clear the bond interface and reset the mode.\n            $scope.newBondInterface = {};\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n        };\n\n        // Return true when a bridge can be created based on the current\n        // selection. Only can be done if no aliases are selected and only\n        // one interface is selected.\n        $scope.canCreateBridge = function() {\n            if($scope.selectedMode !== SELECTION_MODE.SINGLE) {\n                return false;\n            }\n            var nic = getSelectedInterfaces()[0];\n            if(nic.type === INTERFACE_TYPE.ALIAS ||\n                nic.type === INTERFACE_TYPE.BRIDGE) {\n                return false;\n            }\n            return true;\n        };\n\n        // Return true when the create bridge view is being shown.\n        $scope.isShowingCreateBridge = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_BRIDGE;\n        };\n\n        // Show the create bridge view.\n        $scope.showCreateBridge = function() {\n            if($scope.selectedMode === SELECTION_MODE.SINGLE &&\n                $scope.canCreateBridge()) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_BRIDGE;\n\n                var parents = getSelectedInterfaces();\n                $scope.newBridgeInterface = {\n                    name: getNextName(\"br\"),\n                    tags: [],\n                    parents: parents,\n                    primary: parents[0],\n                    mac_address: \"\",\n                    bridge_stp: false,\n                    bridge_fd: 15\n                };\n            }\n        };\n\n        // Return true if cannot add the bridge.\n        $scope.cannotAddBridge = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newBridgeInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newBridgeInterface.mac_address));\n        };\n\n        // Actually add the bridge.\n        $scope.addBridge = function() {\n            if($scope.cannotAddBridge()) {\n               return;\n            }\n\n            var parents = [$scope.newBridgeInterface.primary.id];\n            var mac_address = $scope.newBridgeInterface.mac_address;\n            if(mac_address === \"\") {\n                mac_address = $scope.newBridgeInterface.primary.mac_address;\n            }\n            var params = {\n                name: $scope.newBridgeInterface.name,\n                mac_address: mac_address,\n                tags: $scope.newBridgeInterface.tags.map(\n                    function(tag) { return tag.text; }),\n                parents: parents,\n                vlan: $scope.newBridgeInterface.primary.vlan.id,\n                bridge_stp: $scope.newBridgeInterface.bridge_stp,\n                bridge_fd: $scope.newBridgeInterface.bridge_fd\n            };\n            $scope.$parent.nodesManager.createBridgeInterface(\n                $scope.node, params).then(null, function(error) {\n                    // Should do something better but for now just log\n                    // the error.\n                    console.log(error);\n                });\n\n            // Remove the parent interface so that they don't show up\n            // in the listing unti the new bond appears.\n            var idx = $scope.interfaces.indexOf(\n                $scope.newBridgeInterface.primary);\n            if(idx > -1) {\n                $scope.interfaces.splice(idx, 1);\n            }\n\n            // Clear the bridge interface and reset the mode.\n            $scope.newBridgeInterface = {};\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n        };\n\n        // Return true when the create physical interface view is being shown.\n        $scope.isShowingCreatePhysical = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_PHYSICAL;\n        };\n\n        // Show the create interface view.\n        $scope.showCreatePhysical = function() {\n            if($scope.selectedMode === SELECTION_MODE.NONE) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_PHYSICAL;\n                if($scope.$parent.isDevice) {\n                    $scope.newInterface = {\n                        name: getNextName(\"eth\"),\n                        mac_address: \"\",\n                        macError: false,\n                        tags: [],\n                        errorMsg: null,\n                        subnet: null,\n                        ip_assignment: IP_ASSIGNMENT.DYNAMIC\n                    };\n                } else {\n                    $scope.newInterface = {\n                        name: getNextName(\"eth\"),\n                        mac_address: \"\",\n                        macError: false,\n                        tags: [],\n                        errorMsg: null,\n                        fabric: $scope.fabrics[0],\n                        vlan: getDefaultVLAN($scope.fabrics[0]),\n                        subnet: null,\n                        mode: LINK_MODE.LINK_UP\n                    };\n                }\n            }\n        };\n\n        // Return true if cannot add the interface.\n        $scope.cannotAddPhysicalInterface = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newInterface.mac_address, true));\n        };\n\n        // Actually add the new physical interface.\n        $scope.addPhysicalInterface = function() {\n            if($scope.cannotAddPhysicalInterface()) {\n               return;\n            }\n\n            var params;\n            if($scope.$parent.isDevice) {\n                params = {\n                    name: $scope.newInterface.name,\n                    mac_address: $scope.newInterface.mac_address,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    ip_assignment: $scope.newInterface.ip_assignment,\n                    ip_address: $scope.newInterface.ip_address\n                };\n            } else {\n                params = {\n                    name: $scope.newInterface.name,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    mac_address: $scope.newInterface.mac_address,\n                    vlan: $scope.newInterface.vlan.id,\n                    mode: $scope.newInterface.mode\n                };\n            }\n            if(angular.isObject($scope.newInterface.subnet)) {\n                params.subnet = $scope.newInterface.subnet.id;\n            }\n            $scope.newInterface.macError = false;\n            $scope.newInterface.errorMsg = null;\n            $scope.$parent.nodesManager.createPhysicalInterface(\n                $scope.node, params).then(function() {\n                    // Clear the interface and reset the mode.\n                    $scope.newInterface = {};\n                    $scope.selectedMode = SELECTION_MODE.NONE;\n                },\n                function(errorStr) {\n                    error = JSONService.tryParse(errorStr);\n                    if(!angular.isObject(error)) {\n                        // Was not a JSON error. This is wrong here as it\n                        // should be, so just log to the console.\n                        console.log(errorStr);\n                    } else {\n                        macError = error.mac_address;\n                        if(angular.isArray(macError)) {\n                            $scope.newInterface.macError = true;\n                            $scope.newInterface.errorMsg = macError[0];\n                        }\n                    }\n                });\n        };\n\n        // Load all the required managers. NodesManager and GeneralManager\n        // are loaded by the parent controller \"NodeDetailsController\".\n        ManagerHelperService.loadManagers($scope, [\n            FabricsManager,\n            VLANsManager,\n            SubnetsManager,\n            UsersManager,\n            ControllersManager\n        ]).then(function() {\n            $scope.managersHaveLoaded = true;\n            updateLoaded();\n        });\n\n        // Tell $parent that the networkingController has been loaded.\n        $scope.$parent.controllerLoaded('networkingController', $scope);\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Storage Controller\n */\n\n\n// Filter that is specific to the NodeStorageController. Remove the available\n// disks from the list if being used in the availableNew.\nangular.module('MAAS').filter('removeAvailableByNew', function() {\n    return function(disks, availableNew) {\n        if(!angular.isObject(availableNew) || (\n            !angular.isObject(availableNew.device) &&\n            !angular.isArray(availableNew.devices))) {\n            return disks;\n        }\n\n        var filtered = [];\n        var single = true;\n        if(angular.isArray(availableNew.devices)) {\n            single = false;\n        }\n        angular.forEach(disks, function(disk) {\n            if(single) {\n                if(disk !== availableNew.device) {\n                    filtered.push(disk);\n                }\n            } else {\n                var i, found = false;\n                for(i = 0; i < availableNew.devices.length; i++) {\n                    if(disk === availableNew.devices[i]) {\n                        found = true;\n                        break;\n                    }\n                }\n                if(!found) {\n                    filtered.push(disk);\n                }\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').controller('NodeStorageController', [\n    '$scope', 'MachinesManager', 'ConverterService', 'UsersManager',\n    function($scope, MachinesManager, ConverterService, UsersManager) {\n\n        // From models/partitiontable.py - must be kept in sync.\n        var INITIAL_PARTITION_OFFSET = 4 * 1024 * 1024;\n        var END_OF_PARTITION_TABLE_SPACE = 1024 * 1024;\n        var PARTITION_TABLE_EXTRA_SPACE = INITIAL_PARTITION_OFFSET +\n            END_OF_PARTITION_TABLE_SPACE;\n        var PREP_PARTITION_SIZE = 8 * 1024 * 1024;\n\n        // From models/partition.py - must be kept in sync.\n        var PARTITION_ALIGNMENT_SIZE = 4 * 1024 * 1024;\n        var MIN_PARTITION_SIZE = PARTITION_ALIGNMENT_SIZE;\n\n        // Different selection modes.\n        var SELECTION_MODE = {\n            NONE: null,\n            SINGLE: \"single\",\n            MUTLI: \"multi\",\n            UNMOUNT: \"unmount\",\n            UNFORMAT: \"unformat\",\n            EDIT: \"edit\",\n            DELETE: \"delete\",\n            FORMAT_AND_MOUNT: \"format-mount\",\n            PARTITION: \"partition\",\n            BCACHE: \"bcache\",\n            RAID: \"raid\",\n            VOLUME_GROUP: \"volume-group\",\n            LOGICAL_VOLUME: \"logical-volume\"\n        };\n\n        // Different available raid modes.\n        var RAID_MODES = [\n            {\n                level: \"raid-0\",\n                title: \"RAID 0\",\n                min_disks: 2,\n                allows_spares: false,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * numDisks;\n                }\n            },\n            {\n                level: \"raid-1\",\n                title: \"RAID 1\",\n                min_disks: 2,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize;\n                }\n            },\n            {\n                level: \"raid-5\",\n                title: \"RAID 5\",\n                min_disks: 3,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * (numDisks - 1);\n                }\n            },\n            {\n                level: \"raid-6\",\n                title: \"RAID 6\",\n                min_disks: 4,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * (numDisks - 2);\n                }\n            },\n            {\n                level: \"raid-10\",\n                title: \"RAID 10\",\n                min_disks: 3,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * numDisks / 2;\n                }\n            }\n        ];\n\n        $scope.tableInfo = {column: 'name'};\n        $scope.has_disks = false;\n        $scope.filesystems = [];\n        $scope.filesystemsMap = {};\n        $scope.filesystemMode = SELECTION_MODE.NONE;\n        $scope.filesystemAllSelected = false;\n        $scope.cachesets = [];\n        $scope.cachesetsMap = {};\n        $scope.cachesetsMode = SELECTION_MODE.NONE;\n        $scope.cachesetsAllSelected = false;\n        $scope.available = [];\n        $scope.availableMap = {};\n        $scope.availableMode = SELECTION_MODE.NONE;\n        $scope.availableAllSelected = false;\n        $scope.availableNew = {};\n        $scope.used = [];\n        $scope.showMembers = [];\n\n        // Return True if the filesystem is mounted.\n        function isMountedFilesystem(filesystem) {\n            return angular.isObject(filesystem) &&\n                angular.isString(filesystem.mount_point) &&\n                filesystem.mount_point !== \"\";\n        }\n\n        // Return True if the item has a filesystem and it's mounted.\n        function hasMountedFilesystem(item) {\n            return angular.isObject(item) &&\n                isMountedFilesystem(item.filesystem);\n        }\n\n        // Returns the fstype if the item has a filesystem and its unmounted.\n        function hasFormattedUnmountedFilesystem(item) {\n            if(angular.isObject(item.filesystem) &&\n                angular.isString(item.filesystem.fstype) &&\n                item.filesystem.fstype !== '' &&\n                (angular.isString(item.filesystem.mount_point) === false ||\n                    item.filesystem.mount_point === '')) {\n                return item.filesystem.fstype;\n            }else{\n                return null;\n            }\n        }\n\n        // Return True if the item is in use.\n        function isInUse(item) {\n            if(item.type === \"cache-set\") {\n                return true;\n            } else if(angular.isObject(item.filesystem)) {\n                if(item.filesystem.is_format_fstype &&\n                    angular.isString(item.filesystem.mount_point) &&\n                    item.filesystem.mount_point !== \"\") {\n                    return true;\n                } else if(!item.filesystem.is_format_fstype) {\n                    return true;\n                }\n                return false;\n            }\n            return item.available_size < MIN_PARTITION_SIZE;\n        }\n\n        // Return the tags formatted for ngTagInput.\n        function getTags(disk) {\n            var tags = [];\n            angular.forEach(disk.tags, function(tag) {\n                tags.push({ text: tag });\n            });\n            return tags;\n        }\n\n        // Return a unique key that will never change.\n        function getUniqueKey(disk) {\n            if(disk.type === \"cache-set\") {\n                return \"cache-set-\" + disk.cache_set_id;\n            } else {\n                var key = disk.type + \"-\" + disk.block_id;\n                if(angular.isNumber(disk.partition_id)) {\n                    key += \"-\" + disk.partition_id;\n                }\n                return key;\n            }\n        }\n\n        // Update the list of filesystems. Only filesystems with a mount point\n        // set go here. If no mount point is set, it goes in available.\n        function updateFilesystems() {\n            // Create the new list of filesystems.\n            var filesystems = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(hasMountedFilesystem(disk)) {\n                    var data = {\n                        \"type\": \"filesystem\",\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"fstype\": disk.filesystem.fstype,\n                        \"mount_point\": disk.filesystem.mount_point,\n                        \"mount_options\": disk.filesystem.mount_options,\n                        \"block_id\": disk.id,\n                        \"partition_id\": null,\n                        \"filesystem_id\": disk.filesystem.id,\n                        \"original_type\": disk.type,\n                        \"original\": disk\n                    };\n                    if(disk.type === \"virtual\") {\n                        disk.parent_type = disk.parent.type;\n                    }\n                    filesystems.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(hasMountedFilesystem(partition)) {\n                        filesystems.push({\n                            \"type\": \"filesystem\",\n                            \"name\": partition.name,\n                            \"size_human\": partition.size_human,\n                            \"fstype\": partition.filesystem.fstype,\n                            \"mount_point\": partition.filesystem.mount_point,\n                            \"mount_options\":\n                                partition.filesystem.mount_options,\n                            \"block_id\": disk.id,\n                            \"partition_id\": partition.id,\n                            \"filesystem_id\": partition.filesystem.id,\n                            \"original_type\": \"partition\",\n                            \"original\": partition\n                        });\n                    }\n                });\n            });\n\n            // Add special filesystems to the filesystem list. A special\n            // filesystem cannot exist unless mounted, so we don't need\n            // to check.\n            angular.forEach(\n                $scope.node.special_filesystems,\n                function(filesystem) {\n                    filesystems.push({\n                        \"type\": \"filesystem\",\n                        \"name\": \"—\",\n                        \"size_human\": \"—\",\n                        \"fstype\": filesystem.fstype,\n                        \"mount_point\": filesystem.mount_point,\n                        \"mount_options\": filesystem.mount_options,\n                        \"block_id\": null,\n                        \"partition_id\": null,\n                        \"original_type\": \"special\"\n                    });\n                });\n\n            // Update the selected filesystems with the currently selected\n            // filesystems.\n            angular.forEach(filesystems, function(filesystem) {\n                var key = getUniqueKey(filesystem);\n                var oldFilesystem = $scope.filesystemsMap[key];\n                if(angular.isObject(oldFilesystem)) {\n                    filesystem.$selected = oldFilesystem.$selected;\n                } else {\n                    filesystem.$selected = false;\n                }\n            });\n\n            // Update the filesystems and filesystemsMap on the scope.\n            $scope.filesystems = filesystems;\n            $scope.filesystemsMap = {};\n            angular.forEach(filesystems, function(filesystem) {\n                $scope.filesystemsMap[getUniqueKey(filesystem)] = filesystem;\n            });\n\n            // Update the selection mode.\n            $scope.updateFilesystemSelection(false);\n        }\n\n        // Update the list of cache sets.\n        function updateCacheSets() {\n            // Create the new list of cache sets.\n            var cachesets = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(disk.type === \"cache-set\") {\n                    cachesets.push({\n                        \"type\": \"cache-set\",\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"cache_set_id\": disk.id,\n                        \"used_by\": disk.used_for\n                    });\n                }\n            });\n\n            // Update the selected cache sets with the currently selected\n            // cache sets.\n            angular.forEach(cachesets, function(cacheset) {\n                var key = getUniqueKey(cacheset);\n                var oldCacheSet = $scope.cachesetsMap[key];\n                if(angular.isObject(oldCacheSet)) {\n                    cacheset.$selected = oldCacheSet.$selected;\n                } else {\n                    cacheset.$selected = false;\n                }\n            });\n\n            // Update the cachesets and cachesetsMap on the scope.\n            $scope.cachesets = cachesets;\n            $scope.cachesetsMap = {};\n            angular.forEach(cachesets, function(cacheset) {\n                $scope.cachesetsMap[getUniqueKey(cacheset)] = cacheset;\n            });\n\n            // Update the selection mode.\n            $scope.updateCacheSetsSelection(false);\n        }\n\n        // Update list of all available disks.\n        function updateAvailable() {\n            var available = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(!isInUse(disk)) {\n                    var has_partitions = false;\n                    if(angular.isArray(disk.partitions) &&\n                        disk.partitions.length > 0) {\n                        has_partitions = true;\n                    }\n                    var data = {\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"available_size_human\": disk.available_size_human,\n                        \"used_size_human\": disk.used_size_human,\n                        \"type\": disk.type,\n                        \"model\": disk.model,\n                        \"serial\": disk.serial,\n                        \"tags\": getTags(disk),\n                        \"fstype\": hasFormattedUnmountedFilesystem(disk),\n                        \"mount_point\": null,\n                        \"mount_options\": null,\n                        \"block_id\": disk.id,\n                        \"partition_id\": null,\n                        \"has_partitions\": has_partitions,\n                        \"is_boot\": disk.is_boot,\n                        \"original\": disk,\n                        \"test_status\": disk.test_status,\n                        \"firmware_version\": disk.firmware_version\n                    };\n                    if(disk.type === \"virtual\") {\n                        data.parent_type = disk.parent.type;\n                    }\n                    available.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(!isInUse(partition)) {\n                        available.push({\n                            \"name\": partition.name,\n                            \"size_human\": partition.size_human,\n                            \"available_size_human\": (\n                                partition.available_size_human),\n                            \"used_size_human\": partition.used_size_human,\n                            \"type\": \"partition\",\n                            \"model\": \"\",\n                            \"serial\": \"\",\n                            \"tags\": [],\n                            \"fstype\":\n                                hasFormattedUnmountedFilesystem(partition),\n                            \"mount_point\": null,\n                            \"mount_options\": null,\n                            \"block_id\": disk.id,\n                            \"partition_id\": partition.id,\n                            \"has_partitions\": false,\n                            \"is_boot\": false,\n                            \"original\": partition\n                        });\n                    }\n                });\n            });\n\n            // Update the selected available disks with the currently selected\n            // available disks. Also copy the $options so they are not lost\n            // for the current action.\n            angular.forEach(available, function(disk) {\n                var key = getUniqueKey(disk);\n                var oldDisk = $scope.availableMap[key];\n                if(angular.isObject(oldDisk)) {\n                    disk.$selected = oldDisk.$selected;\n                    disk.$options = oldDisk.$options;\n                } else {\n                    disk.$selected = false;\n                    disk.$options = {};\n                }\n            });\n\n            // Update available and availableMap on the scope.\n            $scope.available = available;\n            $scope.availableMap = {};\n            angular.forEach(available, function(disk) {\n                $scope.availableMap[getUniqueKey(disk)] = disk;\n            });\n\n            // Update device or devices on the availableNew object to be\n            // there new objects.\n            if(angular.isObject($scope.availableNew)) {\n                // Update device.\n                if(angular.isObject($scope.availableNew.device)) {\n                    var key = getUniqueKey($scope.availableNew.device);\n                    $scope.availableNew.device = $scope.availableMap[key];\n                // Update devices.\n                } else if(angular.isArray($scope.availableNew.devices)) {\n                    var newDevices = [];\n                    angular.forEach(\n                        $scope.availableNew.devices, function(device) {\n                            var key = getUniqueKey(device);\n                            var newDevice = $scope.availableMap[key];\n                            if(angular.isObject(newDevice)) {\n                                newDevices.push(newDevice);\n                            }\n                        });\n                    $scope.availableNew.devices = newDevices;\n                }\n            }\n\n            // Update the selection mode.\n            $scope.updateAvailableSelection(false);\n        }\n\n        // Update list of all used disks.\n        function updateUsed() {\n            var used = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(isInUse(disk) && disk.type !== \"cache-set\") {\n                    var has_partitions = false;\n                    if(angular.isArray(disk.partitions) &&\n                        disk.partitions.length > 0) {\n                        has_partitions = true;\n                    }\n                    var data = {\n                        \"name\": disk.name,\n                        \"type\": disk.type,\n                        \"model\": disk.model,\n                        \"serial\": disk.serial,\n                        \"tags\": getTags(disk),\n                        \"used_for\": disk.used_for,\n                        \"is_boot\": disk.is_boot,\n                        \"has_partitions\": has_partitions,\n                        \"test_status\": disk.test_status,\n                        \"firmware_version\": disk.firmware_version\n                    };\n                    if(disk.type === \"virtual\") {\n                        data.parent_type = disk.parent.type;\n                    }\n                    used.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(isInUse(partition) && partition.type !== \"cache-set\") {\n                        used.push({\n                            \"name\": partition.name,\n                            \"type\": \"partition\",\n                            \"model\": \"\",\n                            \"serial\": \"\",\n                            \"tags\": [],\n                            \"used_for\": partition.used_for,\n                            \"is_boot\": false\n                        });\n                    }\n                });\n            });\n            $scope.used = used;\n        }\n\n        // Updates the filesystem, available, and used list.\n        function updateDisks() {\n            if(angular.isArray($scope.node.disks)) {\n                $scope.has_disks = $scope.node.disks.length > 0;\n                updateFilesystems();\n                updateCacheSets();\n                updateAvailable();\n                updateUsed();\n            } else {\n                $scope.has_disks = false;\n                $scope.filesystems = [];\n                $scope.filesystemsMap = {};\n                $scope.filesystemMode = SELECTION_MODE.NONE;\n                $scope.filesystemAllSelected = false;\n                $scope.cachesets = [];\n                $scope.cachesetsMap = {};\n                $scope.cachesetsMode = SELECTION_MODE.NONE;\n                $scope.cachesetsAllSelected = false;\n                $scope.available = [];\n                $scope.availableMap = {};\n                $scope.availableMode = SELECTION_MODE.NONE;\n                $scope.availableAllSelected = false;\n                $scope.availableNew = {};\n                $scope.used = [];\n            }\n        }\n\n        // Deselect all items in the array.\n        function deselectAll(items) {\n            angular.forEach(items, function(item) {\n                item.$selected = false;\n            });\n        }\n\n        // Capitalize the first letter of the string.\n        function capitalizeFirstLetter(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n\n        // Return true if the string is a number.\n        function isNumber(string) {\n            var pattern = /^-?\\d+\\.?\\d*$/;\n            return pattern.test(string);\n        }\n\n        // Extract the index from the name based on prefix.\n        function getIndexFromName(prefix, name) {\n            var pattern = new RegExp(\"^\" + prefix + \"([0-9]+)$\");\n            var match = pattern.exec(name);\n            if(angular.isArray(match) && match.length === 2) {\n                return parseInt(match[1], 10);\n            }\n        }\n\n        // Get the next device name based on prefix.\n        function getNextName(prefix) {\n            var idx = -1;\n            angular.forEach($scope.node.disks, function(disk) {\n                var dIdx = getIndexFromName(prefix, disk.name);\n                if(angular.isNumber(dIdx)) {\n                    idx = Math.max(idx, dIdx);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    dIdx = getIndexFromName(prefix, partition.name);\n                    if(angular.isNumber(dIdx)) {\n                        idx = Math.max(idx, dIdx);\n                    }\n                });\n            });\n            return prefix + (idx + 1);\n        }\n\n        // Return true if another disk exists with name.\n        function isNameAlreadyInUse(name, exclude_disk) {\n            if(!angular.isArray($scope.node.disks)) {\n                return false;\n            }\n\n            var i, j;\n            for(i = 0; i < $scope.node.disks.length; i++) {\n                var disk = $scope.node.disks[i];\n                if(disk.name === name) {\n                    if(!angular.isObject(exclude_disk) ||\n                        exclude_disk.type === \"partition\" ||\n                        exclude_disk.block_id !== disk.id) {\n                        return true;\n                    }\n                }\n                if(angular.isArray(disk.partitions)) {\n                    for(j = 0; j < disk.partitions.length; j++) {\n                        var partition = disk.partitions[j];\n                        if(partition.name === name) {\n                            if(!angular.isObject(exclude_disk) ||\n                                exclude_disk.type !== \"partition\" ||\n                                exclude_disk.partition_id !== partition.id) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        // Return true if the disk is a logical volume.\n        function isLogicalVolume(disk) {\n            return disk.type === \"virtual\" && disk.parent_type === \"lvm-vg\";\n        }\n\n        // Called by $parent when the node has been loaded.\n        $scope.nodeLoaded = function() {\n            $scope.$watch(\"node.disks\", updateDisks);\n        };\n\n        // Return true if the item can be a boot disk.\n        $scope.isBootDiskDisabled = function(item, section) {\n            // Only superusers can change the boot disk.\n            if(!$scope.isSuperUser()) {\n                return true;\n            }\n\n            // Not ready or allocated so the boot disk cannot be changed.\n            if (angular.isObject($scope.node) &&\n                [\"Ready\", \"Allocated\"].indexOf(\n                    $scope.node.status) === -1) {\n                return true;\n            }\n\n            // Only physical disks can be the boot disk.\n            if(item.type !== \"physical\") {\n                return true;\n            }\n\n            // If the disk is in the used section and does not have any\n            // partitions then it cannot be a boot disk. Boot disk either\n            // require that it be unused or that some partitions exists\n            // on the disk. This is because the boot disk has to have a\n            // partition table header.\n            if(section === \"used\") {\n                return !item.has_partitions;\n            }\n            return false;\n        };\n\n        // Called to change the disk to a boot disk.\n        $scope.setAsBootDisk = function(item) {\n            // Do nothing if already the boot disk.\n            if(item.is_boot) {\n                return;\n            }\n            // Do nothing if disabled.\n            if($scope.isBootDiskDisabled(item)) {\n                return;\n            }\n\n            MachinesManager.setBootDisk($scope.node, item.block_id);\n        };\n\n        // Return array of selected filesystems.\n        $scope.getSelectedFilesystems = function() {\n            var filesystems = [];\n            angular.forEach($scope.filesystems, function(filesystem) {\n                if(filesystem.$selected) {\n                    filesystems.push(filesystem);\n                }\n            });\n            return filesystems;\n        };\n\n        // Update the currect mode for the filesystem section and the all\n        // selected value.\n        $scope.updateFilesystemSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var filesystems = $scope.getSelectedFilesystems();\n            if(filesystems.length === 0) {\n                $scope.filesystemMode = SELECTION_MODE.NONE;\n            } else if(filesystems.length === 1 && force) {\n                $scope.filesystemMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.filesystemMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.filesystems.length === 0) {\n                $scope.filesystemAllSelected = false;\n            } else if(filesystems.length === $scope.filesystems.length) {\n                $scope.filesystemAllSelected = true;\n            } else {\n                $scope.filesystemAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the filesystem.\n        $scope.toggleFilesystemSelect = function(filesystem) {\n            filesystem.$selected = !filesystem.$selected;\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Toggle the selection of all filesystems.\n        $scope.toggleFilesystemAllSelect = function() {\n            angular.forEach($scope.filesystems, function(filesystem) {\n                if($scope.filesystemAllSelected) {\n                    filesystem.$selected = false;\n                } else {\n                    filesystem.$selected = true;\n                }\n            });\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Return true if checkboxes in the filesystem section should be\n        // disabled.\n        $scope.isFilesystemsDisabled = function() {\n            return ((\n                $scope.filesystemMode !== SELECTION_MODE.NONE &&\n                $scope.filesystemMode !== SELECTION_MODE.SINGLE &&\n                $scope.filesystemMode !== SELECTION_MODE.MUTLI) ||\n                $scope.isAllStorageDisabled());\n        };\n\n        // Cancel the current filesystem operation.\n        $scope.filesystemCancel = function() {\n            deselectAll($scope.filesystems);\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Enter unmount mode.\n        $scope.filesystemUnmount = function() {\n            $scope.filesystemMode = SELECTION_MODE.UNMOUNT;\n        };\n\n        // Quickly enter unmount by selecting the filesystem first.\n        $scope.quickFilesystemUnmount = function(filesystem) {\n            deselectAll($scope.filesystems);\n            filesystem.$selected = true;\n            $scope.updateFilesystemSelection(true);\n            $scope.filesystemUnmount();\n        };\n\n        // Confirm the unmount action for filesystem.\n        $scope.filesystemConfirmUnmount = function(filesystem) {\n            MachinesManager.updateFilesystem(\n                $scope.node,\n                filesystem.block_id, filesystem.partition_id,\n                filesystem.fstype, null, null);\n\n            var idx = $scope.filesystems.indexOf(filesystem);\n            $scope.filesystems.splice(idx, 1);\n            $scope.updateFilesystemSelection();\n        };\n\n        // Enter delete mode.\n        $scope.filesystemDelete = function() {\n            $scope.filesystemMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete by selecting the filesystem first.\n        $scope.quickFilesystemDelete = function(filesystem) {\n            deselectAll($scope.filesystems);\n            filesystem.$selected = true;\n            $scope.updateFilesystemSelection(true);\n            $scope.filesystemDelete();\n        };\n\n        // Confirm the delete action for filesystem.\n        $scope.filesystemConfirmDelete = function(filesystem) {\n            if(filesystem.original_type === \"special\") {\n                // Delete the special filesystem.\n                MachinesManager.unmountSpecialFilesystem(\n                    $scope.node, filesystem.mount_point);\n            } else if(filesystem.original_type === \"partition\") {\n                // Delete the partition.\n                MachinesManager.deletePartition(\n                    $scope.node, filesystem.original.id);\n            } else {\n                // Delete the disk.\n                MachinesManager.deleteFilesystem(\n                    $scope.node, filesystem.block_id, filesystem.partition_id,\n                    filesystem.filesystem_id);\n            }\n\n            var idx = $scope.filesystems.indexOf(filesystem);\n            $scope.filesystems.splice(idx, 1);\n            $scope.updateFilesystemSelection();\n        };\n\n        // Return true if the disk has an unmouted filesystem.\n        $scope.hasUnmountedFilesystem = function(disk) {\n            if(angular.isString(disk.fstype) && disk.fstype !== \"\") {\n                if(!angular.isString(disk.mount_point) ||\n                    disk.mount_point === \"\") {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return true if the free space label should be shown.\n        $scope.showFreeSpace = function(disk) {\n            if(disk.type === \"lvm-vg\") {\n                return true;\n            } else if(disk.type === \"physical\" || disk.type === \"virtual\") {\n                return disk.has_partitions;\n            } else {\n                return false;\n            }\n        };\n\n        // Return the device type for the disk.\n        $scope.getDeviceType = function(disk) {\n            if(angular.isUndefined(disk)) {\n                return \"\";\n            }\n\n            if(disk.type === \"virtual\") {\n                if(disk.parent_type === \"lvm-vg\") {\n                    return \"Logical volume\";\n                } else if(disk.parent_type.indexOf(\"raid-\") === 0) {\n                    return \"RAID \" + disk.parent_type.split(\"-\")[1];\n                } else {\n                    return capitalizeFirstLetter(disk.parent_type);\n                }\n            } else if(disk.type === \"lvm-vg\") {\n                return \"Volume group\";\n            } else {\n                return capitalizeFirstLetter(disk.type);\n            }\n        };\n\n        // Return array of selected available disks.\n        $scope.getSelectedAvailable = function() {\n            var available = [];\n            angular.forEach($scope.available, function(disk) {\n                if(disk.$selected) {\n                    available.push(disk);\n                }\n            });\n            return available;\n        };\n\n        // Update the currect mode for the available section and the all\n        // selected value.\n        $scope.updateAvailableSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var available = $scope.getSelectedAvailable();\n            if(available.length === 0) {\n                $scope.availableMode = SELECTION_MODE.NONE;\n            } else if(available.length === 1 && force) {\n                $scope.availableMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.availableMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.available.length === 0) {\n                $scope.availableAllSelected = false;\n            } else if(available.length === $scope.available.length) {\n                $scope.availableAllSelected = true;\n            } else {\n                $scope.availableAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the available disk.\n        $scope.toggleAvailableSelect = function(disk) {\n            disk.$selected = !disk.$selected;\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Toggle the selection of all available disks.\n        $scope.toggleAvailableAllSelect = function() {\n            angular.forEach($scope.available, function(disk) {\n                if(!$scope.availableAllSelected) {\n                    disk.$selected = true;\n                } else {\n                    disk.$selected = false;\n                }\n            });\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if checkboxes in the avaiable section should be\n        // disabled.\n        $scope.isAvailableDisabled = function() {\n            return ((\n                $scope.availableMode !== SELECTION_MODE.NONE &&\n                $scope.availableMode !== SELECTION_MODE.SINGLE &&\n                $scope.availableMode !== SELECTION_MODE.MUTLI) ||\n                $scope.isAllStorageDisabled());\n        };\n\n        // Return true if the disk can be formatted and mounted.\n        $scope.canFormatAndMount = function(disk) {\n            if($scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"lvm-vg\" || disk.has_partitions) {\n                return false;\n            } else if(disk.type === \"physical\" && disk.original.is_boot) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return the text for the partition button.\n        $scope.getPartitionButtonText = function(disk) {\n            if(disk.has_partitions) {\n                return \"Add partition\";\n            } else {\n                return \"Partition\";\n            }\n        };\n\n        $scope.availablePartitionSpace = function(disk) {\n            var space_to_reserve = 0;\n            if(!angular.isString(disk.original.partition_table_type)\n                || disk.original.partition_table_type === \"\") {\n                // Disk has no partition table, so reserve space for it.\n                space_to_reserve = PARTITION_TABLE_EXTRA_SPACE;\n                // ppc64el node requires that space be saved for the prep\n                // partition.\n                if($scope.node.architecture.indexOf(\"ppc64el\") === 0) {\n                    space_to_reserve += PREP_PARTITION_SIZE;\n                }\n            }\n            return ConverterService.roundByBlockSize(\n                disk.original.available_size - space_to_reserve,\n                PARTITION_ALIGNMENT_SIZE);\n        };\n\n        // Return true if a partition can be added to disk.\n        $scope.canAddPartition = function(disk) {\n            if(!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"partition\" || disk.type === \"lvm-vg\") {\n                return false;\n            } else if(disk.type === \"virtual\" &&\n                (disk.parent_type === \"lvm-vg\" ||\n                    disk.parent_type === \"bcache\")) {\n                return false;\n            } else if(angular.isString(disk.fstype) && disk.fstype !== \"\") {\n                return false;\n            }\n            // If we can fit a minimum partition, we're golden.\n            return ($scope.availablePartitionSpace(disk) -\n                MIN_PARTITION_SIZE) >= 0;\n        };\n\n        // Return true if the name is invalid.\n        $scope.isNameInvalid = function(disk) {\n            if(disk.name === \"\") {\n                return false;\n            } else if(isNameAlreadyInUse(disk.name, disk)) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Prevent logical volumes from changing the volume group prefix.\n        $scope.nameHasChanged = function(disk) {\n            if(isLogicalVolume(disk)) {\n                var parentName = disk.original.name.split(\"-\")[0] + \"-\";\n                var startsWith = disk.name.indexOf(parentName);\n                if(startsWith !== 0) {\n                    disk.name = parentName;\n                }\n            }\n        };\n\n        // Cancel the current available operation.\n        $scope.availableCancel = function(disk) {\n            $scope.updateAvailableSelection(true);\n            $scope.availableNew = {};\n        };\n\n        // Return true if the filesystem can be mounted at a directory.\n        $scope.usesMountPoint = function(fstype) {\n            return angular.isString(fstype) && fstype !== \"swap\";\n        };\n\n        // Return true if the filesystem uses storage (partition or\n        // block device).\n        $scope.usesStorage = function(fstype) {\n            return angular.isString(fstype) &&\n                fstype !== \"tmpfs\" && fstype !== \"ramfs\";\n        };\n\n        // Return true if the mount point is invalid.\n        $scope.isMountPointInvalid = function(mountPoint) {\n            if(angular.isUndefined(mountPoint) || mountPoint === \"\") {\n                return false;\n            } else if (mountPoint === \"none\") {\n                // XXX: Hack to allow \"swap\" filesystems to be mounted.\n                // This should be allowed only when fstype is 'swap' but\n                // doing that would require more refactoring (or more\n                // hacks) that I have time for right now.\n                return false;\n            } else if(mountPoint[0] !== \"/\") {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Return true if the disk can be deleted.\n        $scope.canDelete = function(disk) {\n            if (!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"lvm-vg\") {\n                return disk.original.used_size === 0;\n            } else {\n                return !disk.has_partitions;\n            }\n        };\n\n        // Enter delete mode.\n        $scope.availableDelete = function() {\n            $scope.availableMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete mode.\n        $scope.availableQuickDelete = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availableDelete();\n        };\n\n        // Return true if it can be edited.\n        $scope.canEdit = function(disk) {\n          if (!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n              return false;\n          } else {\n              return true;\n          }\n        };\n\n        // Enter Edit mode, disable certain fields based on disk type\n        $scope.availableEdit = function(disk) {\n            $scope.availableMode = SELECTION_MODE.EDIT;\n\n            if (disk.type === \"lvm-vg\") {\n                disk.$options = {\n                    editingTags: false,\n                    editingFilesystem: false\n                };\n            } else if (disk.type === \"partition\") {\n                disk.$options = {\n                    editingTags: false,\n                    editingFilesystem: true,\n                    fstype: disk.fstype\n                };\n            } else {\n                disk.$options = {\n                    editingFilesystem: true,\n                    editingTags: true,\n                    tags: angular.copy(disk.tags),\n                    fstype: disk.fstype\n                };\n                if (!$scope.canFormatAndMount(disk)) {\n                    disk.$options.editingFilesystem = false;\n                }\n            }\n        };\n\n        // Quickly enter Edit mode\n        $scope.availableQuickEdit = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availableEdit(disk);\n        };\n\n        // Save the disk which is in Edit mode\n        $scope.availableConfirmEdit = function(disk) {\n            var params = {\n                name: disk.name\n            };\n\n            // Do nothing if not valid.\n            if($scope.isNameInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Reset the name if its blank.\n            if(disk.name === \"\") {\n                disk.name = disk.original.name;\n            }\n\n            // Ensure logical volume has parent prefix in its name.\n            if(isLogicalVolume(disk)){\n                var parentName = disk.original.name.split(\"-\")[0] + \"-\";\n                params.name = disk.name.slice(parentName.length);\n            }\n\n            // Set filesystem options so formatting and mounting is performed.\n            if(angular.isDefined(disk.$options.fstype)) {\n                params.fstype = disk.$options.fstype;\n                params.mount_point = disk.$options.mountPoint || '';\n                params.mount_options = disk.$options.mountOptions || '';\n            }\n\n            // Update the tags for the disk.\n            if(angular.isArray(disk.$options.tags)) {\n                params.tags = disk.$options.tags.map(\n                    function(tag) { return tag.text; });\n            }\n\n            // Save the options.\n            MachinesManager.updateDisk(\n                $scope.node, disk.block_id, params);\n\n            // Set the options on the object so no flicker occurs while waiting\n            // for the new object to be received.\n            disk.fstype = disk.$options.fstype;\n            disk.mount_point = disk.$options.mountPoint;\n            disk.mount_options = disk.$options.mountOptions;\n            disk.tags = disk.$options.tags;\n            disk.$options = {};\n\n            // If the mount_point is set the we need to transition this to\n            // the filesystem section.\n            if(angular.isString(disk.mount_point) && disk.mount_point !== \"\") {\n                $scope.filesystems.push({\n                    \"name\": disk.name,\n                    \"size_human\": disk.size_human,\n                    \"fstype\": disk.fstype,\n                    \"mount_point\": disk.mount_point,\n                    \"mount_options\": disk.mount_options,\n                    \"block_id\": disk.block_id,\n                    \"partition_id\": disk.partition_id\n                });\n\n                // Remove the selected disk from available.\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n\n            // Deselect the disk after saving\n            disk.$selected = false;\n\n            // Update the current selections.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return the text for remove confirmation message.\n        $scope.getRemoveTypeText = function(disk) {\n            if(disk.type === \"filesystem\") {\n                if (angular.isObject(disk.original)) {\n                    disk = disk.original;\n                } else {\n                    return \"special filesystem\";\n                }\n            }\n\n            if(disk.type === \"physical\") {\n                return \"physical disk\";\n            } else if(disk.type === \"partition\") {\n                return \"partition\";\n            } else if(disk.type === \"lvm-vg\") {\n                return \"volume group\";\n            } else if(disk.type === \"virtual\") {\n                if(disk.parent_type === \"lvm-vg\") {\n                    return \"logical volume\";\n                } else if(disk.parent_type.indexOf(\"raid-\") === 0) {\n                    return \"RAID \" + disk.parent_type.split(\"-\")[1] + \" disk\";\n                } else {\n                    return disk.parent_type + \" disk\";\n                }\n            }\n        };\n\n        // Delete the disk, partition, or volume group.\n        $scope.availableConfirmDelete = function(disk) {\n            if(disk.type === \"lvm-vg\") {\n                // Delete the volume group.\n                MachinesManager.deleteVolumeGroup(\n                    $scope.node, disk.block_id);\n            } else if(disk.type === \"partition\") {\n                // Delete the partition.\n                MachinesManager.deletePartition(\n                    $scope.node, disk.partition_id);\n            } else {\n                // Delete the disk.\n                MachinesManager.deleteDisk(\n                    $scope.node, disk.block_id);\n            }\n\n            // Remove the selected disk from available.\n            var idx = $scope.available.indexOf(disk);\n            $scope.available.splice(idx, 1);\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Enter partition mode.\n        $scope.availablePartition = function(disk) {\n            $scope.availableMode = SELECTION_MODE.PARTITION;\n            // Set starting size to the maximum available space.\n            var size_and_units = disk.available_size_human.split(\" \");\n            disk.$options = {\n                size: size_and_units[0],\n                sizeUnits: size_and_units[1],\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\"\n            };\n        };\n\n        // Quickly enter partition mode.\n        $scope.availableQuickPartition = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availablePartition(disk);\n        };\n\n        // Get the new name of the partition.\n        $scope.getAddPartitionName = function(disk) {\n            var length, partitions = disk.original.partitions;\n            if(angular.isArray(partitions)) {\n                length = partitions.length;\n            } else {\n                length = 0;\n            }\n            if(disk.original.partition_table_type === \"mbr\" &&\n                length > 2) {\n                return disk.name + \"-part\" + (length + 2);\n            } else if($scope.node.architecture.indexOf(\"ppc64el\") === 0 &&\n                disk.original.is_boot) {\n                // Boot disk on ppc64el machines skip the first partition as\n                // its reserved for the prep partition.\n                return disk.name + \"-part\" + (length + 2);\n            } else {\n                return disk.name + \"-part\" + (length + 1);\n            }\n        };\n\n        // Return true if the size is invalid.\n        $scope.isAddPartitionSizeInvalid = function(disk) {\n            if(disk.$options.size === \"\" || !isNumber(disk.$options.size)) {\n                return true;\n            } else {\n                var bytes = ConverterService.unitsToBytes(\n                    disk.$options.size, disk.$options.sizeUnits);\n                if(bytes < MIN_PARTITION_SIZE) {\n                    return true;\n                } else if(bytes > disk.original.available_size) {\n                    // Round the size down to the lowest tolerance for that\n                    // to see if it now fits.\n                    var rounded = ConverterService.roundUnits(\n                        disk.$options.size, disk.$options.sizeUnits);\n                    if(rounded > disk.original.available_size) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        };\n\n        // Confirm the partition creation.\n        $scope.availableConfirmPartition = function(disk) {\n            // Do nothing if not valid.\n            if($scope.isAddPartitionSizeInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Get the bytes to create the partition.\n            var bytes = ConverterService.unitsToBytes(\n                disk.$options.size, disk.$options.sizeUnits);\n\n            // Accepting prefilled defaults means use whole disk (lp:1509535).\n            var size_and_units = disk.original.available_size_human.split(\" \");\n            if(disk.$options.size === size_and_units[0] &&\n               disk.$options.sizeUnits === size_and_units[1]) {\n                bytes = disk.original.available_size;\n            }\n\n            var removeDisk = false;\n            var available_space = $scope.availablePartitionSpace(disk);\n            if(bytes >= available_space) {\n                // Clamp to available space.\n                bytes = available_space;\n                // Remove the disk if partition uses all the remaining space.\n                removeDisk = true;\n            }\n\n            // Create the partition.\n            var params = {};\n            if(angular.isString(disk.$options.fstype) &&\n                disk.$options.fstype !== \"\") {\n                params.fstype = disk.$options.fstype;\n                if(disk.$options.mountPoint !== \"\") {\n                    params.mount_point = disk.$options.mountPoint;\n                    params.mount_options = disk.$options.mountOptions;\n                }\n            }\n            MachinesManager.createPartition(\n                $scope.node, disk.block_id, bytes, params);\n\n            // Remove the disk if needed.\n            if(removeDisk) {\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return array of selected cache sets.\n        $scope.getSelectedCacheSets = function() {\n            var cachesets = [];\n            angular.forEach($scope.cachesets, function(cacheset) {\n                if(cacheset.$selected) {\n                    cachesets.push(cacheset);\n                }\n            });\n            return cachesets;\n        };\n\n        // Update the currect mode for the cache sets section and the all\n        // selected value.\n        $scope.updateCacheSetsSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var cachesets = $scope.getSelectedCacheSets();\n            if(cachesets.length === 0) {\n                $scope.cachesetsMode = SELECTION_MODE.NONE;\n            } else if(cachesets.length === 1 && force) {\n                $scope.cachesetsMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.cachesetsMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.cachesets.length === 0) {\n                $scope.cachesetsAllSelected = false;\n            } else if(cachesets.length === $scope.cachesets.length) {\n                $scope.cachesetsAllSelected = true;\n            } else {\n                $scope.cachesetsAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the filesystem.\n        $scope.toggleCacheSetSelect = function(cacheset) {\n            cacheset.$selected = !cacheset.$selected;\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Toggle the selection of all filesystems.\n        $scope.toggleCacheSetAllSelect = function() {\n            angular.forEach($scope.cachesets, function(cacheset) {\n                if($scope.cachesetsAllSelected) {\n                    cacheset.$selected = false;\n                } else {\n                    cacheset.$selected = true;\n                }\n            });\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Return true if checkboxes in the cache sets section should be\n        // disabled.\n        $scope.isCacheSetsDisabled = function() {\n            return ((\n                $scope.isAllStorageDisabled() &&\n                !$scope.isSuperUser()) || (\n                $scope.cachesetsMode !== SELECTION_MODE.NONE &&\n                $scope.cachesetsMode !== SELECTION_MODE.SINGLE &&\n                $scope.cachesetsMode !== SELECTION_MODE.MUTLI));\n        };\n\n        // Cancel the current cache set operation.\n        $scope.cacheSetCancel = function() {\n            deselectAll($scope.cachesets);\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Can delete the cache set.\n        $scope.canDeleteCacheSet = function(cacheset) {\n            return (cacheset.used_by === \"\" &&\n                    !$scope.isAllStorageDisabled() &&\n                    $scope.isSuperUser());\n        };\n\n        // Enter delete mode.\n        $scope.cacheSetDelete = function() {\n            $scope.cachesetsMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete by selecting the cache set first.\n        $scope.quickCacheSetDelete = function(cacheset) {\n            deselectAll($scope.cachesets);\n            cacheset.$selected = true;\n            $scope.updateCacheSetsSelection(true);\n            $scope.cacheSetDelete();\n        };\n\n        // Confirm the delete action for cache set.\n        $scope.cacheSetConfirmDelete = function(cacheset) {\n            MachinesManager.deleteCacheSet(\n                $scope.node, cacheset.cache_set_id);\n\n            var idx = $scope.cachesets.indexOf(cacheset);\n            $scope.cachesets.splice(idx, 1);\n            $scope.updateCacheSetsSelection();\n        };\n\n        // Return true if a cache set can be created.\n        $scope.canCreateCacheSet = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length === 1) {\n                return (\n                    !selected[0].has_partitions &&\n                    !$scope.hasUnmountedFilesystem(selected[0]) &&\n                    selected[0].type !== \"lvm-vg\");\n            }\n            return false;\n        };\n\n        // Called to create a cache set.\n        $scope.createCacheSet = function() {\n            if(!$scope.canCreateCacheSet()) {\n                return;\n            }\n\n            // Create cache set.\n            var disk = $scope.getSelectedAvailable()[0];\n            MachinesManager.createCacheSet(\n                $scope.node, disk.block_id, disk.partition_id);\n\n            // Remove from available.\n            var idx = $scope.available.indexOf(disk);\n            $scope.available.splice(idx, 1);\n        };\n\n        // Return the reason a bcache device cannot be created.\n        $scope.getCannotCreateBcacheMsg = function() {\n            if($scope.cachesets.length === 0) {\n                return \"Create at least one cache set to create bcache\";\n            } else {\n                var selected = $scope.getSelectedAvailable();\n                if(selected.length === 1) {\n                    if($scope.hasUnmountedFilesystem(selected[0])) {\n                        return (\n                            \"Device is formatted; unformat the \" +\n                            \"device to create bcache\");\n                    } else if(selected[0].type === \"lvm-vg\") {\n                        return (\n                            \"Cannot use a logical volume as a backing \" +\n                            \"device for bcache.\");\n                    } else if(selected[0].has_partitions) {\n                        return (\n                            \"Device has already been partitioned; create a \" +\n                            \"new partition to use as the bcache backing \" +\n                            \"device\");\n                    } else {\n                        return null;\n                    }\n                } else {\n                    return \"Select only one available device to create bcache\";\n                }\n            }\n        };\n\n        // Return true if a bcache can be created.\n        $scope.canCreateBcache = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var msg = $scope.getCannotCreateBcacheMsg();\n            if(msg === null) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Enter bcache mode.\n        $scope.createBcache = function() {\n            if(!$scope.canCreateBcache()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.BCACHE;\n            $scope.availableNew = {\n                name: getNextName(\"bcache\"),\n                device: $scope.getSelectedAvailable()[0],\n                cacheset: $scope.cachesets[0],\n                cacheMode: \"writeback\",\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\",\n                tags: []\n            };\n        };\n\n        // Clear mount point when the fstype is changed.\n        $scope.fstypeChanged = function(options) {\n            if(options.fstype === null) {\n                options.mountPoint = \"\";\n                options.mountOptions = \"\";\n            }\n            else {\n                // Update the mount point to \"none\" if \"swap\" is\n                // selected, and vice-versa.\n                if ($scope.usesMountPoint(options.fstype)) {\n                    if (options.mountPoint === \"none\") {\n                        options.mountPoint = \"\";\n                    }\n                }\n                else {\n                    options.mountPoint = \"none\";\n                }\n            }\n        };\n\n        // Return true when the name of the new disk is invalid.\n        $scope.isNewDiskNameInvalid = function() {\n            if(!angular.isObject($scope.node) ||\n                !angular.isArray($scope.node.disks)) {\n                return true;\n            }\n\n            if($scope.availableNew.name === \"\") {\n                return true;\n            } else {\n                var i, j;\n                for(i = 0; i < $scope.node.disks.length; i++) {\n                    var disk = $scope.node.disks[i];\n                    if($scope.availableNew.name === disk.name) {\n                        return true;\n                    }\n                    if(angular.isArray(disk.partitions)) {\n                        for(j = 0; j < disk.partitions.length; j++) {\n                            var partition = disk.partitions[j];\n                            if($scope.availableNew.name === partition.name) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return true if bcache can be saved.\n        $scope.createBcacheCanSave = function() {\n            return (\n                !$scope.isNewDiskNameInvalid() &&\n                !$scope.isMountPointInvalid($scope.availableNew.mountPoint));\n        };\n\n        // Confirm and create the bcache device.\n        $scope.availableConfirmCreateBcache = function() {\n            if(!$scope.createBcacheCanSave()) {\n                return;\n            }\n\n            // Create the bcache.\n            var params = {\n                name: $scope.availableNew.name,\n                cache_set: $scope.availableNew.cacheset.cache_set_id,\n                cache_mode: $scope.availableNew.cacheMode\n            };\n            if($scope.availableNew.device.type === \"partition\") {\n                params.partition_id = $scope.availableNew.device.partition_id;\n            } else {\n                params.block_id = $scope.availableNew.device.block_id;\n            }\n            if(angular.isString($scope.availableNew.fstype) &&\n                $scope.availableNew.fstype !== \"\") {\n                params.fstype = $scope.availableNew.fstype;\n                // XXX: Inconsistent tests of mountPoint/mount_point; in\n                // places it's compared to \"\" (like here), in others\n                // it's tested with angular.isDefined(), others with\n                // angular.isString(), others angular.isString() ===\n                // false. This is *begging* for bugs.\n                if($scope.availableNew.mountPoint !== \"\") {\n                    params.mount_point = $scope.availableNew.mountPoint;\n                    params.mount_options = $scope.availableNew.mountOptions;\n                }\n            }\n            if(angular.isArray($scope.availableNew.tags)\n                && $scope.availableNew.tags.length > 0) {\n                params.tags = $scope.availableNew.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createBcache($scope.node, params);\n\n            // Remove device from available.\n            var idx = $scope.available.indexOf($scope.availableNew.device);\n            $scope.available.splice(idx, 1);\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a RAID can be created.\n        $scope.canCreateRAID = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length > 1) {\n                var i;\n                for(i = 0; i < selected.length; i++) {\n                    if($scope.hasUnmountedFilesystem(selected[i])) {\n                        return false;\n                    } else if(selected[i].type === \"lvm-vg\") {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n\n        // Called to create a RAID.\n        $scope.createRAID = function() {\n            if(!$scope.canCreateRAID()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.RAID;\n            $scope.availableNew = {\n                name: getNextName(\"md\"),\n                devices: $scope.getSelectedAvailable(),\n                mode: null,\n                spares: [],\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\",\n                tags: []\n            };\n            $scope.availableNew.mode = $scope.getAvailableRAIDModes()[0];\n        };\n\n        // Get the available RAID modes.\n        $scope.getAvailableRAIDModes = function() {\n            if(!angular.isObject($scope.availableNew) ||\n                !angular.isArray($scope.availableNew.devices)) {\n                return [];\n            }\n\n            var modes = [];\n            angular.forEach(RAID_MODES, function(mode) {\n                if($scope.availableNew.devices.length >= mode.min_disks) {\n                    modes.push(mode);\n                }\n            });\n            return modes;\n        };\n\n        // Return the total number of available spares for the current mode.\n        $scope.getTotalNumberOfAvailableSpares = function() {\n            var mode = $scope.availableNew.mode;\n            if(angular.isUndefined(mode) || !mode.allows_spares) {\n                return 0;\n            } else {\n                var diff = $scope.availableNew.devices.length - mode.min_disks;\n                if(diff < 0) {\n                    diff = 0;\n                }\n                return diff;\n            }\n        };\n\n        // Return the number of remaining spares that can be selected.\n        $scope.getNumberOfRemainingSpares = function() {\n            var allowed = $scope.getTotalNumberOfAvailableSpares();\n            if(allowed <= 0) {\n                return 0;\n            } else {\n                return allowed - $scope.availableNew.spares.length;\n            }\n        };\n\n        // Return true if the spares column should be shown.\n        $scope.showSparesColumn = function() {\n            return $scope.getTotalNumberOfAvailableSpares() > 0;\n        };\n\n        // Called when the RAID mode is changed to reset the selected spares.\n        $scope.RAIDModeChanged = function() {\n            $scope.availableNew.spares = [];\n        };\n\n        // Return true if the disk is an active RAID member.\n        $scope.isActiveRAIDMember = function(disk) {\n            if(!angular.isArray($scope.availableNew.spares)) {\n                return true;\n            } else {\n                var idx = $scope.availableNew.spares.indexOf(\n                    getUniqueKey(disk));\n                return idx === -1;\n            }\n        };\n\n        // Return true if the disk is a spare RAID member.\n        $scope.isSpareRAIDMember = function(disk) {\n            return !$scope.isActiveRAIDMember(disk);\n        };\n\n        // Set the disk as an active RAID member.\n        $scope.setAsActiveRAIDMember = function(disk) {\n            var idx = $scope.availableNew.spares.indexOf(getUniqueKey(disk));\n            if(idx > -1) {\n                $scope.availableNew.spares.splice(idx, 1);\n            }\n        };\n\n        // Set the disk as a spare RAID member.\n        $scope.setAsSpareRAIDMember = function(disk) {\n            var key = getUniqueKey(disk);\n            var idx = $scope.availableNew.spares.indexOf(key);\n            if(idx === -1) {\n                $scope.availableNew.spares.push(key);\n            }\n        };\n\n        // Return the size of the new RAID device.\n        $scope.getNewRAIDSize = function() {\n            if(angular.isUndefined($scope.availableNew.mode)) {\n                return \"\";\n            }\n            var calculateSize = $scope.availableNew.mode.calculateSize;\n            if(!angular.isFunction(calculateSize)) {\n                return \"\";\n            }\n\n            // Get the number of disks and the minimum disk size in the RAID.\n            var numDisks = (\n                $scope.availableNew.devices.length -\n                $scope.availableNew.spares.length);\n            var minSize = Number.MAX_VALUE;\n            angular.forEach($scope.availableNew.devices, function(device) {\n                // Get the size of the device. For a block device it will be\n                // at available_size and for a partition it will be at size.\n                var deviceSize = (\n                    device.original.available_size || device.original.size);\n                minSize = Math.min(minSize, deviceSize);\n            });\n\n            // Calculate the new size.\n            var size = calculateSize(minSize, numDisks);\n            return ConverterService.bytesToUnits(size).string;\n        };\n\n        // Return true if RAID can be saved.\n        $scope.createRAIDCanSave = function() {\n            return (\n                !$scope.isNewDiskNameInvalid() &&\n                !$scope.isMountPointInvalid($scope.availableNew.mountPoint));\n        };\n\n        // Confirm and create the RAID device.\n        $scope.availableConfirmCreateRAID = function() {\n            if(!$scope.createRAIDCanSave()) {\n                return;\n            }\n\n            // Create the RAID.\n            var params = {\n                name: $scope.availableNew.name,\n                level: $scope.availableNew.mode.level,\n                block_devices: [],\n                partitions: [],\n                spare_devices: [],\n                spare_partitions: []\n            };\n            angular.forEach($scope.availableNew.devices, function(device) {\n                if($scope.isActiveRAIDMember(device)) {\n                    if(device.type === \"partition\") {\n                        params.partitions.push(device.partition_id);\n                    } else {\n                        params.block_devices.push(device.block_id);\n                    }\n                } else {\n                    if(device.type === \"partition\") {\n                        params.spare_partitions.push(device.partition_id);\n                    } else {\n                        params.spare_devices.push(device.block_id);\n                    }\n                }\n            });\n            if(angular.isString($scope.availableNew.fstype) &&\n                $scope.availableNew.fstype !== \"\") {\n                params.fstype = $scope.availableNew.fstype;\n                if($scope.availableNew.mountPoint !== \"\") {\n                    params.mount_point = $scope.availableNew.mountPoint;\n                    params.mount_options = $scope.availableNew.mountOptions;\n                }\n            }\n            if(angular.isArray($scope.availableNew.tags)\n                && $scope.availableNew.tags.length > 0) {\n                params.tags = $scope.availableNew.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createRAID($scope.node, params);\n\n            // Remove devices from available.\n            angular.forEach($scope.availableNew.devices, function(device) {\n                var idx = $scope.available.indexOf($scope.availableNew.device);\n                $scope.available.splice(idx, 1);\n            });\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a volume group can be created.\n        $scope.canCreateVolumeGroup = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length > 0) {\n                var i;\n                for(i = 0; i < selected.length; i++) {\n                    if(selected[i].has_partitions) {\n                        return false;\n                    } else if($scope.hasUnmountedFilesystem(selected[i])) {\n                        return false;\n                    } else if(selected[i].type === \"lvm-vg\") {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n\n        // Called to create a volume group.\n        $scope.createVolumeGroup = function() {\n            if(!$scope.canCreateVolumeGroup()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.VOLUME_GROUP;\n            $scope.availableNew = {\n                name: getNextName(\"vg\"),\n                devices: $scope.getSelectedAvailable()\n            };\n        };\n\n        // Return the size of the new volume group.\n        $scope.getNewVolumeGroupSize = function() {\n            var total = 0;\n            angular.forEach($scope.availableNew.devices, function(device) {\n                // Add available_size or size if available_size is not set.\n                total += (\n                    device.original.available_size || device.original.size);\n            });\n            return ConverterService.bytesToUnits(total).string;\n        };\n\n        // Return true if volume group can be saved.\n        $scope.createVolumeGroupCanSave = function() {\n            return !$scope.isNewDiskNameInvalid();\n        };\n\n        // Confirm and create the volume group device.\n        $scope.availableConfirmCreateVolumeGroup = function() {\n            if(!$scope.createVolumeGroupCanSave()) {\n                return;\n            }\n\n            // Create the RAID.\n            var params = {\n                name: $scope.availableNew.name,\n                block_devices: [],\n                partitions: []\n            };\n            angular.forEach($scope.availableNew.devices, function(device) {\n                if(device.type === \"partition\") {\n                    params.partitions.push(device.partition_id);\n                } else {\n                    params.block_devices.push(device.block_id);\n                }\n            });\n            MachinesManager.createVolumeGroup($scope.node, params);\n\n            // Remove devices from available.\n            angular.forEach($scope.availableNew.devices, function(device) {\n                var idx = $scope.available.indexOf($scope.availableNew.device);\n                $scope.available.splice(idx, 1);\n            });\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a logical volume can be added to disk.\n        $scope.canAddLogicalVolume = function(disk) {\n            if(disk.type !== \"lvm-vg\") {\n                return false;\n            } else if(disk.original.available_size < MIN_PARTITION_SIZE) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Enter logical volume mode.\n        $scope.availableLogicalVolume = function(disk) {\n            $scope.availableMode = SELECTION_MODE.LOGICAL_VOLUME;\n            disk.$selected = true;\n            // Set starting size to the maximum available space.\n            var size_and_units = disk.available_size_human.split(\" \");\n            var namePrefix = disk.name + \"-lv\";\n            disk.$options = {\n                name: getNextName(namePrefix),\n                size: size_and_units[0],\n                sizeUnits: size_and_units[1],\n                fstype: null,\n                tags: []\n            };\n        };\n\n        // Return true if the name of the logical volume is invalid.\n        $scope.isLogicalVolumeNameInvalid = function(disk) {\n            if(!angular.isString(disk.$options.name)) {\n                return false;\n            }\n            var startsWith = disk.$options.name.indexOf(disk.name + \"-\");\n            return (\n                startsWith !== 0 ||\n                disk.$options.name.length <= disk.name.length + 1 ||\n                isNameAlreadyInUse(disk.$options.name));\n        };\n\n        // Don't allow the name of the logical volume to remove the volume\n        // group name.\n        $scope.newLogicalVolumeNameChanged = function(disk) {\n            if(!angular.isString(disk.$options.name)) {\n                return;\n            }\n            var startsWith = disk.$options.name.indexOf(disk.name + \"-\");\n            if(startsWith !== 0) {\n                disk.$options.name = disk.name + \"-\";\n            }\n        };\n\n        // Return true if the logical volume size is invalid.\n        $scope.isAddLogicalVolumeSizeInvalid = function(disk) {\n            // Uses the same logic as the partition size checked.\n            return $scope.isAddPartitionSizeInvalid(disk);\n        };\n\n        // Confirm the logical volume creation.\n        $scope.availableConfirmLogicalVolume = function(disk) {\n            // Do nothing if not valid.\n            if($scope.isLogicalVolumeNameInvalid(disk) ||\n                $scope.isAddLogicalVolumeSizeInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Get the bytes to create the partition.\n            var bytes = ConverterService.unitsToBytes(\n                disk.$options.size, disk.$options.sizeUnits);\n\n            // Accepting prefilled defaults means use whole disk (lp:1509535).\n            var size_and_units = disk.original.available_size_human.split(\" \");\n            if(disk.$options.size === size_and_units[0] &&\n               disk.$options.sizeUnits === size_and_units[1]) {\n                bytes = disk.original.available_size;\n            }\n\n            // Clamp to available space.\n            if(bytes > disk.original.available_size) {\n                bytes = disk.original.available_size;\n            }\n\n            // Remove the disk if it is going to use all the remaining space.\n            var removeDisk = false;\n            if(bytes === disk.original.available_size) {\n                removeDisk = true;\n            }\n\n            // Remove the volume group name from the name.\n            var name = disk.$options.name.slice(disk.name.length + 1);\n\n            // Create the logical volume.\n            var params = {};\n            if(angular.isString(disk.$options.fstype) &&\n                disk.$options.fstype !== \"\") {\n                params.fstype = disk.$options.fstype;\n                if(disk.$options.mountPoint !== \"\") {\n                    params.mount_point = disk.$options.mountPoint;\n                    params.mount_options = disk.$options.mountOptions;\n                }\n            }\n            if(angular.isArray(disk.$options.tags)\n                && disk.$options.tags.length > 0) {\n                params.tags = disk.$options.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createLogicalVolume(\n                $scope.node, disk.block_id, name, bytes, params);\n\n            // Remove the disk if needed.\n            if(removeDisk) {\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Returns true if storage cannot be edited.\n        // (it can't be changed when the node is in any state other\n        //  than Ready or Allocated)\n        $scope.isAllStorageDisabled = function() {\n            var authUser = UsersManager.getAuthUser();\n            if(!angular.isObject(authUser) || !angular.isObject($scope.node) ||\n                (!authUser.is_superuser &&\n                 authUser.username !== $scope.node.owner)) {\n                return true;\n            }else if (angular.isObject($scope.node) &&\n                [\"Ready\", \"Allocated\"].indexOf(\n                    $scope.node.status) === -1) {\n                // If the node is not ready or allocated, disable storage panel.\n                return true;\n            } else {\n                // The node must be either ready or broken. Enable it.\n                return false;\n            }\n        };\n\n        // Returns true if there are storage layout errors\n        $scope.hasStorageLayoutIssues = function() {\n            if(angular.isObject($scope.node) &&\n                angular.isArray($scope.node.storage_layout_issues)) {\n                return $scope.node.storage_layout_issues.length > 0;\n            }\n            return false;\n        };\n\n        // Tell $parent that the storageController has been loaded.\n        $scope.$parent.controllerLoaded('storageController', $scope);\n    }]);\n","/*\n * Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Manage a node's filesystems, including adding special filesystems.\n */\n\n(function() {\n\n    function SpecialFilesystem() {\n        this.fstype = \"tmpfs\";\n        this.mountPoint = \"\";\n        this.mountOptions = \"\";\n    }\n\n    SpecialFilesystem.prototype.isValid = function() {\n        return this.mountPoint.startsWith(\"/\");\n    };\n\n    SpecialFilesystem.prototype.describe = function() {\n        var parts = [this.fstype];\n        // Add the mount point if specified and valid.\n        if (this.mountPoint.startsWith(\"/\")) {\n            parts.push(\"at \" + this.mountPoint);\n        }\n        // Filesystem-specific bits.\n        switch (this.fstype) {\n        case \"tmpfs\":\n            // Extract size=n parameter from mount options. Other\n            // options could be added in the future.\n            var size = this.mountOptions.match(/\\bsize=(\\d+)(%?)/);\n            if (size !== null) {\n                if (size[2] === \"%\") {\n                    parts.push(\"limited to \" + size[1] + \"% of memory\");\n                } else {\n                    parts.push(\"limited to \" + size[1] + \" bytes\");\n                }\n            }\n            break;\n        case \"ramfs\":\n            // This filesystem does not recognise any options. Consider\n            // warning about lack of a size limit.\n            break;\n        }\n        return parts.join(\" \");\n    };\n\n    function NodeFilesystemsController($scope) {\n\n        // Which drop-down is currently selected, e.g. \"special\".\n        $scope.dropdown = null;\n\n        // Select the \"special\" drop-down.\n        $scope.addSpecialFilesystem = function() {\n            $scope.dropdown = \"special\";\n        };\n\n        // Deselect the \"special\" drop-down.\n        $scope.addSpecialFilesystemFinished = function() {\n            if ($scope.dropdown === \"special\") {\n                $scope.dropdown = null;\n            }\n        };\n    }\n\n    function NodeAddSpecialFilesystemController($scope, MachinesManager) {\n\n        $scope.filesystem = new SpecialFilesystem();\n        $scope.description = null;  // Updated by watch.\n\n        $scope.$watch(\"filesystem\", function(filesystem) {\n            $scope.description = filesystem.describe();\n        }, true);\n\n        $scope.canMount = function() {\n            return $scope.filesystem.isValid();\n        };\n\n        $scope.mount = function() {\n            MachinesManager.mountSpecialFilesystem(\n                $scope.node, $scope.filesystem.fstype,\n                $scope.filesystem.mountPoint,\n                $scope.filesystem.mountOptions);\n            $scope.addSpecialFilesystemFinished();\n        };\n\n        $scope.cancel = function() {\n            $scope.filesystem = new SpecialFilesystem();\n            $scope.addSpecialFilesystemFinished();\n        };\n    }\n\n    angular.module(\"MAAS\").controller(\n        \"NodeFilesystemsController\", [\n            \"$scope\", NodeFilesystemsController\n        ]);\n\n    angular.module(\"MAAS\").controller(\n        \"NodeAddSpecialFilesystemController\", [\n            \"$scope\", \"MachinesManager\",\n            NodeAddSpecialFilesystemController\n        ]);\n\n}());\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Events Controller\n */\n\nangular.module('MAAS').controller('NodeEventsController', [\n    '$scope', '$rootScope', '$routeParams',\n    'MachinesManager', 'ControllersManager', 'EventsManagerFactory',\n    'ManagerHelperService', 'ErrorService', function($scope, $rootScope,\n        $routeParams, MachinesManager, ControllersManager, EventsManagerFactory,\n        ManagerHelperService, ErrorService) {\n\n        // Events manager that is loaded once the node is loaded.\n        var eventsManager = null;\n\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"nodes\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.node = null;\n        $scope.events = [];\n        $scope.eventsLoaded = false;\n        $scope.days = 1;\n\n        // Called once the node is loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            // Get the events manager and load it.\n            eventsManager = EventsManagerFactory.getManager(node.id);\n            $scope.events = eventsManager.getItems();\n            $scope.days = eventsManager.getMaximumDays();\n            eventsManager.loadItems().then(function() {\n                $scope.eventsLoaded = true;\n            });\n\n            // Update the title when the fqdn of the node changes.\n            $scope.$watch(\"node.fqdn\", function() {\n                $rootScope.title = $scope.node.fqdn + \" - events\";\n            });\n        }\n\n        // Return the nice text for the given event.\n        $scope.getEventText = function(event) {\n            var text = event.type.description;\n            if(angular.isString(event.description) &&\n                event.description.length > 0) {\n                text += \" - \" + event.description;\n            }\n            return text;\n        };\n\n        // Called to load more events.\n        $scope.loadMore = function() {\n            $scope.days += 1;\n            eventsManager.loadMaximumDays($scope.days);\n        };\n\n        if($routeParams.type === 'controller') {\n            $scope.nodesManager = ControllersManager;\n            $scope.type_name = 'controller';\n        }else{\n            $scope.nodesManager = MachinesManager;\n            $scope.type_name = 'machine';\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n            // If redirected from the NodeDetailsController then the node\n            // will already be active. No need to set it active again.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n\n        // Destroy the events manager when the scope is destroyed. This is so\n        // the client will not recieve any more notifications about events\n        // for this node.\n        $scope.$on(\"$destroy\", function() {\n            if(angular.isObject(eventsManager)) {\n                eventsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Script Result Controller\n */\n\nangular.module('MAAS').controller('NodeResultController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'ControllersManager', 'NodeResultsManagerFactory',\n    'ManagerHelperService', 'ErrorService',\n    function($scope, $rootScope, $routeParams, $location, MachinesManager,\n             ControllersManager, NodeResultsManagerFactory,\n             ManagerHelperService, ErrorService) {\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"nodes\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.resultLoaded = false;\n        $scope.node = null;\n        $scope.output = 'combined';\n        $scope.result = null;\n\n        $scope.get_result_data = function(output) {\n            $scope.output = output;\n            $scope.data = \"Loading...\";\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            nodeResultsManager.get_result_data(\n                $scope.result.id, $scope.output).then(\n                    function(data) {\n                        if(data === '') {\n                            $scope.data = \"Empty file.\";\n                        }else{\n                            $scope.data = data;\n                        }\n                    });\n        };\n\n        // Called once the node is loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            // Get the NodeResultsManager and load it.\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            var requestedResult = parseInt($routeParams.id, 10);\n            nodeResultsManager.getItem(requestedResult).then(function(result) {\n                $scope.result = result;\n                $scope.get_result_data($scope.output);\n                $scope.resultLoaded = true;\n                $rootScope.title = $scope.node.fqdn + \" - \" +\n                    $scope.result.name;\n            });\n        }\n\n        // Update the title when the fqdn of the node changes.\n        $scope.$watch(\"node.fqdn\", function() {\n            if(angular.isObject($scope.node) &&\n               angular.isObject($scope.result)) {\n                $rootScope.title = $scope.node.fqdn + \" - \" +\n                    $scope.result.name;\n            }\n        });\n\n        if($routeParams.type === 'controller') {\n            $scope.nodesManager = ControllersManager;\n            $scope.type_name = 'controller';\n        }else{\n            $scope.nodesManager = MachinesManager;\n            $scope.type_name = 'machine';\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n            // If redirected from the NodeDetailsController then the node\n            // will already be active. No need to set it active again.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n\n        // Destroy the NodeResultsManager when the scope is destroyed. This is\n        // so the client will not recieve any more notifications about results\n        // from this node.\n        $scope.$on(\"$destroy\", function() {\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            if(angular.isObject(nodeResultsManager)) {\n                nodeResultsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Results Controller\n */\n\nangular.module('MAAS').controller('NodeResultsController', [\n    '$scope', '$routeParams', 'MachinesManager', 'ControllersManager',\n    'NodeResultsManagerFactory', 'ManagerHelperService', 'ErrorService',\n    function($scope, $routeParams, MachinesManager, ControllersManager,\n             NodeResultsManagerFactory, ManagerHelperService, ErrorService) {\n\n        // NodeResultsManager that is loaded once the node is loaded.\n        $scope.nodeResultsManager = null;\n        // References to manager data used in scope.\n        $scope.commissioning_results = null;\n        $scope.testing_results = null;\n        $scope.installation_results = null;\n        $scope.results = null;\n\n        // List of logs available.\n        $scope.logs = {\n            option: null,\n            availableOptions: []\n        };\n        // Log content being displayed.\n        $scope.logOutput = 'Loading...';\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.resultsLoaded = false;\n        $scope.node = null;\n\n        function updateLogs() {\n            var i;\n            var option;\n            var had_installation = $scope.logs.availableOptions.length === 3;\n            $scope.logs.availableOptions.length = 0;\n            // XXX ltrager 2017-12-01 - Only show the current installation log\n            // if the machine is deploying, deployed, or failed deploying. The\n            // logs page needs to be redesigned to show previous installation\n            // results.\n            if($scope.installation_results &&\n                    $scope.installation_results.length > 0 && (\n                        $scope.node.status_code === 6 ||\n                        $scope.node.status_code === 9 ||\n                        $scope.node.status_code === 11)) {\n                $scope.logs.availableOptions.push({\n                    'title': 'Installation output',\n                    'id': $scope.installation_results[0].id\n                });\n            }\n            $scope.logs.availableOptions.push({\n                'title': 'Machine output (YAML)',\n                'id': 'summary_yaml'\n            });\n            $scope.logs.availableOptions.push({\n                'title': 'Machine output (XML)',\n                'id': 'summary_xml'\n            });\n            if(!had_installation &&\n               $scope.logs.availableOptions.length === 3) {\n                // A new installation log has appeared, show it.\n                $scope.logs.option = $scope.logs.availableOptions[0];\n            }else if(!$scope.selectedLog || (\n                had_installation && $scope.logs.length === 2)) {\n                // No longer in a deployed state.\n                $scope.logs.option = $scope.logs.availableOptions[0];\n            }\n        }\n\n        // Called once the node has loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n            // Get the NodeResultsManager and load it.\n            $scope.nodeResultsManager = NodeResultsManagerFactory.getManager(\n                node, $scope.section.area);\n            $scope.nodeResultsManager.loadItems().then(function() {\n                $scope.commissioning_results =\n                    $scope.nodeResultsManager.commissioning_results;\n                $scope.testing_results =\n                    $scope.nodeResultsManager.testing_results;\n                $scope.installation_results =\n                    $scope.nodeResultsManager.installation_results;\n                $scope.results = $scope.nodeResultsManager.results;\n                // Only load and monitor logs when on the logs page.\n                if($scope.section.area === \"logs\") {\n                    updateLogs();\n                    $scope.$watch(\"installation_results\", updateLogs, true);\n                    $scope.$watch(\n                        \"installation_results\", $scope.updateLogOutput, true);\n                }\n                $scope.resultsLoaded = true;\n            });\n        }\n\n        if($routeParams.type === 'controller') {\n            $scope.nodesManager = ControllersManager;\n        } else {\n            $scope.nodesManager = MachinesManager;\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n                // If redirected from the NodeDetailsController then the node\n                // will already be active. No need to set it active again.\n                var activeNode = $scope.nodesManager.getActiveItem();\n                if(angular.isObject(activeNode) &&\n                   activeNode.system_id === $routeParams.system_id) {\n                    nodeLoaded(activeNode);\n                } else {\n                    $scope.nodesManager.setActiveItem(\n                        $routeParams.system_id).then(function(node) {\n                            nodeLoaded(node);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                }\n            });\n\n        $scope.updateLogOutput = function() {\n            $scope.logOutput = \"Loading...\";\n            if(!$scope.node) {\n                return;\n            }else if($scope.logs.option.id === 'summary_xml') {\n                $scope.nodesManager.getSummaryXML($scope.node).then(\n                    function(output) {\n                        $scope.logOutput = output;\n                    });\n            }else if($scope.logs.option.id === 'summary_yaml') {\n                $scope.nodesManager.getSummaryYAML($scope.node).then(\n                    function(output) {\n                        $scope.logOutput = output;\n                    });\n            } else {\n                var result = null;\n                var i;\n                // Find the installation result to be displayed.\n                for(i = 0; i < $scope.installation_results.length; i++) {\n                    if($scope.installation_results[i].id ===\n                       $scope.logs.option.id) {\n                        result = $scope.installation_results[i];\n                        break;\n                    }\n                }\n                switch(result.status) {\n                    case 0:\n                        $scope.logOutput = \"System is booting...\";\n                        break;\n                    case 1:\n                        $scope.logOutput = \"Installation has begun!\";\n                        break;\n                    case 2:\n                        $scope.nodeResultsManager.get_result_data(\n                            result.id, 'combined').then(function(output) {\n                                if(output === '') {\n                                    $scope.logOutput =\n                                        \"Installation has succeeded but \" +\n                                        \"no output was given.\";\n                                } else {\n                                    $scope.logOutput = output;\n                                }\n                            });\n                        break;\n                    case 3:\n                        $scope.nodeResultsManager.get_result_data(\n                            result.id, 'combined').then(function(output) {\n                                if(output === '') {\n                                    $scope.logOutput =\n                                        \"Installation has failed and no \" +\n                                        \"output was given.\";\n                                } else {\n                                    $scope.logOutput = output;\n                                }\n                            });\n                        break;\n                    case 4:\n                        $scope.logOutput =\n                            \"Installation failed after 40 minutes.\";\n                        break;\n                    case 5:\n                        $scope.logOutput = \"Installation was aborted.\";\n                        break;\n                    default:\n                        $scope.logOutput = \"BUG: Unknown log status \" +\n                            result.status;\n                        break;\n                }\n            }\n        };\n\n        $scope.loadHistory = function(result) {\n            result.showing_results = false;\n            // History has already been loaded, no need to request it.\n            if(angular.isArray(result.history_list)) {\n                result.showing_history = true;\n                return;\n            }\n            result.loading_history = true;\n            $scope.nodeResultsManager.get_history(result.id).then(\n                function(history) {\n                    result.history_list = history;\n                    result.loading_history = false;\n                    result.showing_history = true;\n                });\n        };\n\n        // Destroy the NodeResultsManager when the scope is destroyed. This is\n        // so the client will not recieve any more notifications about results\n        // from this node.\n        $scope.$on(\"$destroy\", function() {\n            if(angular.isObject($scope.nodeResultsManager)) {\n                $scope.nodeResultsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes List Controller\n */\n\nangular.module('MAAS').controller('NodesListController', [\n    '$scope', '$interval', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'DevicesManager', 'ControllersManager',\n    'GeneralManager', 'ManagerHelperService', 'SearchService',\n    'ZonesManager', 'UsersManager', 'ServicesManager', 'ScriptsManager',\n    'SwitchesManager',\n    function($scope, $interval, $rootScope, $routeParams, $location,\n        MachinesManager, DevicesManager, ControllersManager, GeneralManager,\n        ManagerHelperService, SearchService, ZonesManager, UsersManager,\n        ServicesManager, ScriptsManager, SwitchesManager) {\n\n        // Mapping of device.ip_assignment to viewable text.\n        var DEVICE_IP_ASSIGNMENT = {\n            external: \"External\",\n            dynamic: \"Dynamic\",\n            \"static\": \"Static\"\n        };\n\n        // Set title and page.\n        $rootScope.title = \"Nodes\";\n        $rootScope.page = \"nodes\";\n\n        // Set initial values.\n        $scope.nodes = MachinesManager.getItems();\n        $scope.zones = ZonesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.switches = SwitchesManager.getItems();\n        $scope.showswitches = $routeParams.switches === 'on';\n        $scope.currentpage = \"nodes\";\n        $scope.osinfo = GeneralManager.getData(\"osinfo\");\n        $scope.scripts = ScriptsManager.getItems();\n        $scope.loading = true;\n\n        $scope.tabs = {};\n        // Nodes tab.\n        $scope.tabs.nodes = {};\n        $scope.tabs.nodes.pagetitle = \"Machines\";\n        $scope.tabs.nodes.currentpage = \"nodes\";\n        $scope.tabs.nodes.manager = MachinesManager;\n        $scope.tabs.nodes.previous_search = \"\";\n        $scope.tabs.nodes.search = \"\";\n        $scope.tabs.nodes.searchValid = true;\n        $scope.tabs.nodes.selectedItems = MachinesManager.getSelectedItems();\n        $scope.tabs.nodes.metadata = MachinesManager.getMetadata();\n        $scope.tabs.nodes.filters = SearchService.getEmptyFilter();\n        $scope.tabs.nodes.actionOption = null;\n        $scope.tabs.nodes.takeActionOptions = GeneralManager.getData(\n            \"machine_actions\");\n        $scope.tabs.nodes.actionErrorCount = 0;\n        $scope.tabs.nodes.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.nodes.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.tabs.nodes.zoneSelection = null;\n        $scope.tabs.nodes.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.tabs.nodes.releaseOptions = {};\n        $scope.tabs.nodes.commissioningSelection = [];\n        $scope.tabs.nodes.testSelection = [];\n\n        // Device tab.\n        $scope.tabs.devices = {};\n        $scope.tabs.devices.pagetitle = \"Devices\";\n        $scope.tabs.devices.currentpage = \"devices\";\n        $scope.tabs.devices.manager = DevicesManager;\n        $scope.tabs.devices.previous_search = \"\";\n        $scope.tabs.devices.search = \"\";\n        $scope.tabs.devices.searchValid = true;\n        $scope.tabs.devices.selectedItems = DevicesManager.getSelectedItems();\n        $scope.tabs.devices.filtered_items = [];\n        $scope.tabs.devices.predicate = 'fqdn';\n        $scope.tabs.devices.allViewableChecked = false;\n        $scope.tabs.devices.metadata = DevicesManager.getMetadata();\n        $scope.tabs.devices.filters = SearchService.getEmptyFilter();\n        $scope.tabs.devices.column = 'fqdn';\n        $scope.tabs.devices.actionOption = null;\n        $scope.tabs.devices.takeActionOptions = GeneralManager.getData(\n            \"device_actions\");\n        $scope.tabs.devices.actionErrorCount = 0;\n        $scope.tabs.devices.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.devices.zoneSelection = null;\n\n        // Controller tab.\n        $scope.tabs.controllers = {};\n        $scope.tabs.controllers.pagetitle = \"Controllers\";\n        $scope.tabs.controllers.currentpage = \"controllers\";\n        $scope.tabs.controllers.manager = ControllersManager;\n        $scope.tabs.controllers.previous_search = \"\";\n        $scope.tabs.controllers.search = \"\";\n        $scope.tabs.controllers.searchValid = true;\n        $scope.tabs.controllers.selectedItems =\n            ControllersManager.getSelectedItems();\n        $scope.tabs.controllers.filtered_items = [];\n        $scope.tabs.controllers.predicate = 'fqdn';\n        $scope.tabs.controllers.allViewableChecked = false;\n        $scope.tabs.controllers.metadata = ControllersManager.getMetadata();\n        $scope.tabs.controllers.filters = SearchService.getEmptyFilter();\n        $scope.tabs.controllers.column = 'fqdn';\n        $scope.tabs.controllers.actionOption = null;\n        // Rack controllers contain all options\n        $scope.tabs.controllers.takeActionOptions = GeneralManager.getData(\n            \"rack_controller_actions\");\n        $scope.tabs.controllers.actionErrorCount = 0;\n        $scope.tabs.controllers.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.controllers.zoneSelection = null;\n        $scope.tabs.controllers.syncStatuses = {};\n        $scope.tabs.controllers.addController = false;\n        $scope.tabs.controllers.registerUrl = MAAS_config.register_url;\n        $scope.tabs.controllers.registerSecret = MAAS_config.register_secret;\n\n        // Switch tab.\n        $scope.tabs.switches = {};\n        $scope.tabs.switches.pagetitle = \"Switches\";\n        $scope.tabs.switches.currentpage = \"switches\";\n        $scope.tabs.switches.manager = SwitchesManager;\n        $scope.tabs.switches.previous_search = \"\";\n        $scope.tabs.switches.search = \"\";\n        $scope.tabs.switches.searchValid = true;\n        $scope.tabs.switches.selectedItems = SwitchesManager.getSelectedItems();\n        $scope.tabs.switches.predicate = 'fqdn';\n        $scope.tabs.switches.allViewableChecked = false;\n        $scope.tabs.switches.metadata = SwitchesManager.getMetadata();\n        $scope.tabs.switches.filters = SearchService.getEmptyFilter();\n        $scope.tabs.switches.column = 'fqdn';\n        $scope.tabs.switches.actionOption = null;\n        // XXX: Which actions should there be?\n        $scope.tabs.switches.takeActionOptions = GeneralManager.getData(\n            \"machine_actions\");\n        $scope.tabs.switches.actionErrorCount = 0;\n        $scope.tabs.switches.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.switches.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.tabs.switches.zoneSelection = null;\n        $scope.tabs.switches.commissioningSelection = [];\n        $scope.tabs.switches.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.tabs.switches.releaseOptions = {};\n\n\n        // Options for add hardware dropdown.\n        $scope.addHardwareOption = null;\n        $scope.addHardwareOptions = [\n            {\n                name: \"machine\",\n                title: \"Machine\"\n            },\n            {\n                name: \"chassis\",\n                title: \"Chassis\"\n            }\n        ];\n\n        // This will hold the AddHardwareController once it is initialized.\n        // The controller will set this variable as it's always a child of\n        // this scope.\n        $scope.addHardwareScope = null;\n\n        // This will hold the AddDeviceController once it is initialized.\n        // The controller will set this variable as it's always a child of\n        // this scope.\n        $scope.addDeviceScope = null;\n\n        // When the addHardwareScope is hidden it will emit this event. We\n        // clear the call to action button, so it can be used again.\n        $scope.$on(\"addHardwareHidden\", function() {\n            $scope.addHardwareOption = null;\n        });\n\n        // Return true if the tab is in viewing selected mode.\n        function isViewingSelected(tab) {\n            var search = $scope.tabs[tab].search.toLowerCase();\n            return search === \"in:(selected)\" || search === \"in:selected\";\n        }\n\n        // Sets the search bar to only show selected.\n        function enterViewSelected(tab) {\n            $scope.tabs[tab].previous_search = $scope.tabs[tab].search;\n            $scope.tabs[tab].search = \"in:(Selected)\";\n        }\n\n        // Clear search bar from viewing selected.\n        function leaveViewSelected(tab) {\n            if(isViewingSelected(tab)) {\n                $scope.tabs[tab].search = $scope.tabs[tab].previous_search;\n                $scope.updateFilters(tab);\n            }\n        }\n\n        // Called to update `allViewableChecked`.\n        function updateAllViewableChecked(tab) {\n            // Not checked when the filtered nodes are empty.\n            if($scope.tabs[tab].filtered_items.length === 0) {\n                $scope.tabs[tab].allViewableChecked = false;\n                return;\n            }\n\n            // Loop through all filtered nodes and see if all are checked.\n            var i;\n            for(i = 0; i < $scope.tabs[tab].filtered_items.length; i++) {\n                if(!$scope.tabs[tab].filtered_items[i].$selected) {\n                    $scope.tabs[tab].allViewableChecked = false;\n                    return;\n                }\n            }\n            $scope.tabs[tab].allViewableChecked = true;\n        }\n\n        function clearAction(tab) {\n            resetActionProgress(tab);\n            leaveViewSelected(tab);\n            $scope.tabs[tab].actionOption = null;\n            $scope.tabs[tab].zoneSelection = null;\n            if(tab === \"nodes\" || tab === \"switches\") {\n                // Possible for this to be called before the osSelect\n                // direction is initialized. In that case it has not\n                // created the $reset function on the model object.\n                if(angular.isFunction(\n                    $scope.tabs[tab].osSelection.$reset)) {\n                    $scope.tabs[tab].osSelection.$reset();\n                }\n                $scope.tabs[tab].commissionOptions.enableSSH = false;\n                $scope.tabs[tab].commissionOptions.skipNetworking = false;\n                $scope.tabs[tab].commissionOptions.skipStorage = false;\n                $scope.tabs[tab].commissionOptions.updateFirmware = false;\n                $scope.tabs[tab].commissionOptions.configureHBA = false;\n            }\n            $scope.tabs[tab].commissioningSelection = [];\n            $scope.tabs[tab].testSelection = [];\n        }\n\n        // Clear the action if required.\n        function shouldClearAction(tab) {\n            if($scope.tabs[tab].selectedItems.length === 0) {\n                clearAction(tab);\n            }\n            if($scope.tabs[tab].actionOption && !isViewingSelected(tab)) {\n                $scope.tabs[tab].actionOption = null;\n            }\n        }\n\n        // Called when the filtered_items are updated. Checks if the\n        // filtered_items are empty and if the search still matches the\n        // previous search. This will reset the search when no nodes match\n        // the current filter.\n        function removeEmptyFilter(tab) {\n            if($scope.tabs[tab].filtered_items.length === 0 &&\n                $scope.tabs[tab].search !== \"\" &&\n                $scope.tabs[tab].search === $scope.tabs[tab].previous_search) {\n                $scope.tabs[tab].search = \"\";\n                $scope.updateFilters(tab);\n            }\n        }\n\n        // Update the number of selected items which have an error based on the\n        // current selected action.\n        function updateActionErrorCount(tab) {\n            var i;\n            $scope.tabs[tab].actionErrorCount = 0;\n            for(i = 0; i < $scope.tabs[tab].selectedItems.length; i++) {\n                var supported = $scope.supportsAction(\n                    $scope.tabs[tab].selectedItems[i], tab);\n                if(!supported) {\n                    $scope.tabs[tab].actionErrorCount += 1;\n                }\n                $scope.tabs[tab].selectedItems[i].action_failed = false;\n            }\n        }\n\n        // Reset actionProgress on tab to zero.\n        function resetActionProgress(tab) {\n            var progress = $scope.tabs[tab].actionProgress;\n            progress.completed = progress.total = 0;\n            progress.errors = {};\n            progress.showing_confirmation = false;\n            progress.affected_nodes = 0;\n        }\n\n        // Add error to action progress and group error messages by nodes.\n        function addErrorToActionProgress(tab, error, node) {\n            var progress = $scope.tabs[tab].actionProgress;\n            progress.completed += 1;\n            var nodes = progress.errors[error];\n            if(angular.isUndefined(nodes)) {\n                progress.errors[error] = [node];\n            } else {\n                nodes.push(node);\n            }\n        }\n\n        // After an action has been performed check if we can leave all nodes\n        // selected or if an error occured and we should only show the failed\n        // nodes.\n        function updateSelectedItems(tab) {\n            if(!$scope.hasActionsFailed(tab)) {\n                if(!$scope.hasActionsInProgress(tab)) {\n                     clearAction(tab);\n                     enterViewSelected(tab);\n                }\n                return;\n            }\n            angular.forEach($scope.tabs[tab].manager.getItems(),\n                    function(node) {\n                if(node.action_failed === false) {\n                    $scope.tabs[tab].manager.unselectItem(node.system_id);\n                }\n            });\n        }\n\n        // Toggles between the current tab.\n        $scope.toggleTab = function(tab) {\n            $rootScope.title = $scope.tabs[tab].pagetitle;\n            $scope.currentpage = tab;\n            $location.search('tab', tab);\n        };\n\n        // Clear the search bar.\n        $scope.clearSearch = function(tab) {\n            $scope.tabs[tab].search = \"\";\n            $scope.updateFilters(tab);\n        };\n\n        // Mark a node as selected or unselected.\n        $scope.toggleChecked = function(node, tab) {\n            if(tab !== 'nodes' && tab !== 'switches') {\n                if($scope.tabs[tab].manager.isSelected(node.system_id)) {\n                    $scope.tabs[tab].manager.unselectItem(node.system_id);\n                } else {\n                    $scope.tabs[tab].manager.selectItem(node.system_id);\n                }\n                updateAllViewableChecked(tab);\n            }\n            updateActionErrorCount(tab);\n            shouldClearAction(tab);\n        };\n\n        // Select all viewable nodes or deselect all viewable nodes.\n        $scope.toggleCheckAll = function(tab) {\n            if(tab !== 'nodes' && tab !== 'switches') {\n                if($scope.tabs[tab].allViewableChecked) {\n                    angular.forEach(\n                        $scope.tabs[tab].filtered_items, function(node) {\n                            $scope.tabs[tab].manager.unselectItem(\n                                node.system_id);\n                    });\n                } else {\n                    angular.forEach(\n                        $scope.tabs[tab].filtered_items, function(node) {\n                            $scope.tabs[tab].manager.selectItem(\n                                node.system_id);\n                    });\n                }\n                updateAllViewableChecked(tab);\n            }\n            updateActionErrorCount(tab);\n            shouldClearAction(tab);\n        };\n\n        $scope.onNodeListingChanged = function(nodes, tab) {\n            if(nodes.length === 0 &&\n                $scope.tabs[tab].search !== \"\" &&\n                $scope.tabs[tab].search === $scope.tabs[tab].previous_search) {\n                $scope.tabs[tab].search = \"\";\n                $scope.updateFilters(tab);\n            }\n        };\n\n        // When the filtered nodes change update if all check buttons\n        // should be checked or not.\n        $scope.$watchCollection(\"tabs.devices.filtered_items\", function() {\n            updateAllViewableChecked(\"devices\");\n            removeEmptyFilter(\"devices\");\n        });\n        $scope.$watchCollection(\"tabs.controllers.filtered_items\", function() {\n            updateAllViewableChecked(\"controllers\");\n            removeEmptyFilter(\"controllers\");\n        });\n\n        // Shows the current selection.\n        $scope.showSelected = function(tab) {\n            enterViewSelected(tab);\n            $scope.updateFilters(tab);\n        };\n\n        // Adds or removes a filter to the search.\n        $scope.toggleFilter = function(type, value, tab) {\n            // Don't allow a filter to be changed when an action is\n            // in progress.\n            if(angular.isObject($scope.tabs[tab].actionOption)) {\n                return;\n            }\n            $scope.tabs[tab].filters = SearchService.toggleFilter(\n                $scope.tabs[tab].filters, type, value, true);\n            $scope.tabs[tab].search = SearchService.filtersToString(\n                $scope.tabs[tab].filters);\n        };\n\n        // Return True if the filter is active.\n        $scope.isFilterActive = function(type, value, tab) {\n            return SearchService.isFilterActive(\n                $scope.tabs[tab].filters, type, value, true);\n        };\n\n        // Update the filters object when the search bar is updated.\n        $scope.updateFilters = function(tab) {\n            var filters = SearchService.getCurrentFilters(\n                $scope.tabs[tab].search);\n            if(filters === null) {\n                $scope.tabs[tab].filters = SearchService.getEmptyFilter();\n                $scope.tabs[tab].searchValid = false;\n            } else {\n                $scope.tabs[tab].filters = filters;\n                $scope.tabs[tab].searchValid = true;\n            }\n            shouldClearAction(tab);\n        };\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate, tab) {\n            $scope.tabs[tab].predicate = predicate;\n            $scope.tabs[tab].reverse = !$scope.tabs[tab].reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        $scope.selectColumnOrSort = function(predicate, tab) {\n            if($scope.tabs[tab].column !== predicate) {\n                $scope.tabs[tab].column = predicate;\n            } else {\n                $scope.sortTable(predicate, tab);\n            }\n        };\n\n        // Return True if the node supports the action.\n        $scope.supportsAction = function(node, tab) {\n            if(!$scope.tabs[tab].actionOption) {\n                return true;\n            }\n            return node.actions.indexOf(\n                $scope.tabs[tab].actionOption.name) >= 0;\n        };\n\n        // Called when the action option gets changed.\n        $scope.actionOptionSelected = function(tab) {\n            updateActionErrorCount(tab);\n            enterViewSelected(tab);\n\n            // Hide the add hardware/device section.\n            if (tab === 'nodes') {\n                if(angular.isObject($scope.addHardwareScope)) {\n                    $scope.addHardwareScope.hide();\n                }\n            } else if(tab === 'devices') {\n                if(angular.isObject($scope.addDeviceScope)) {\n                    $scope.addDeviceScope.hide();\n                }\n            }\n        };\n\n        // Return True if there is an action error.\n        $scope.isActionError = function(tab) {\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                $scope.tabs[tab].actionErrorCount === 0 &&\n                ($scope.osinfo.osystems.length === 0 ||\n                UsersManager.getSSHKeyCount() === 0)) {\n                return true;\n            }\n            return $scope.tabs[tab].actionErrorCount !== 0;\n        };\n\n        // Return True if unable to deploy because of missing images.\n        $scope.isDeployError = function(tab) {\n            if($scope.tabs[tab].actionErrorCount !== 0) {\n                return false;\n            }\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                $scope.osinfo.osystems.length === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Return True if unable to deploy because of missing ssh keys.\n        $scope.isSSHKeyError = function(tab) {\n            if($scope.tabs[tab].actionErrorCount !== 0) {\n                return false;\n            }\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                UsersManager.getSSHKeyCount() === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Called when the current action is cancelled.\n        $scope.actionCancel = function(tab) {\n            resetActionProgress(tab);\n            leaveViewSelected(tab);\n            $scope.tabs[tab].actionOption = null;\n        };\n\n        // Perform the action on all nodes.\n        $scope.actionGo = function(tab) {\n            var extra = {};\n            var i;\n            // Set deploy parameters if a deploy or set zone action.\n            if($scope.tabs[tab].actionOption.name === \"deploy\" &&\n                angular.isString($scope.tabs[tab].osSelection.osystem) &&\n                angular.isString($scope.tabs[tab].osSelection.release)) {\n\n                // Set extra. UI side the release is structured os/release, but\n                // when it is sent over the websocket only the \"release\" is\n                // sent.\n                extra.osystem = $scope.tabs[tab].osSelection.osystem;\n                var release = $scope.tabs[tab].osSelection.release;\n                release = release.split(\"/\");\n                release = release[release.length-1];\n                extra.distro_series = release;\n                // hwe_kernel is optional so only include it if its specified\n                if(angular.isString($scope.tabs[tab].osSelection.hwe_kernel) &&\n                   ($scope.tabs[tab].osSelection.hwe_kernel.indexOf('hwe-')\n                    >= 0 ||\n                    $scope.tabs[tab].osSelection.hwe_kernel.indexOf('ga-')\n                    >= 0)) {\n                    extra.hwe_kernel = $scope.tabs[tab].osSelection.hwe_kernel;\n                }\n            } else if($scope.tabs[tab].actionOption.name === \"set-zone\" &&\n                angular.isNumber($scope.tabs[tab].zoneSelection.id)) {\n                // Set the zone parameter.\n                extra.zone_id = $scope.tabs[tab].zoneSelection.id;\n            } else if($scope.tabs[tab].actionOption.name === \"commission\") {\n                // Set the commission options.\n                extra.enable_ssh = (\n                    $scope.tabs[tab].commissionOptions.enableSSH);\n                extra.skip_networking = (\n                    $scope.tabs[tab].commissionOptions.skipNetworking);\n                extra.skip_storage = (\n                    $scope.tabs[tab].commissionOptions.skipStorage);\n                extra.commissioning_scripts = [];\n                for(i=0;i<$scope.tabs[tab].commissioningSelection.length;i++) {\n                    extra.commissioning_scripts.push(\n                        $scope.tabs[tab].commissioningSelection[i].id);\n                }\n                if($scope.tabs[tab].commissionOptions.updateFirmware) {\n                    extra.commissioning_scripts.push('update_firmware')\n                }\n                if($scope.tabs[tab].commissionOptions.configureHBA) {\n                    extra.commissioning_scripts.push('configure_hba')\n                }\n                if(extra.commissioning_scripts.length === 0) {\n                    // Tell the region not to run any custom commissioning\n                    // scripts.\n                    extra.commissioning_scripts.push('none');\n                }\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.tabs[tab].testSelection.length;i++) {\n                    extra.testing_scripts.push(\n                        $scope.tabs[tab].testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.tabs[tab].actionOption.name === \"test\") {\n                if(!$scope.tabs[tab].actionProgress.showing_confirmation) {\n                    var progress = $scope.tabs[tab].actionProgress;\n                    for(i=0;i<$scope.tabs[tab].selectedItems.length;i++) {\n                        if($scope.tabs[tab].selectedItems[i].status_code === 6)\n                        {\n                            progress.showing_confirmation = true;\n                            progress.affected_nodes++;\n                        }\n                    }\n                    if($scope.tabs[tab].actionProgress.affected_nodes != 0) {\n                        return;\n                    }\n                }\n                // Set the test options.\n                extra.enable_ssh = (\n                    $scope.tabs[tab].commissionOptions.enableSSH);\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.tabs[tab].testSelection.length;i++) {\n                    extra.testing_scripts.push(\n                        $scope.tabs[tab].testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.tabs[tab].actionOption.name === \"release\") {\n                // Set the release options.\n                extra.erase = (\n                    $scope.tabs[tab].releaseOptions.erase);\n                extra.secure_erase = (\n                    $scope.tabs[tab].releaseOptions.secureErase);\n                extra.quick_erase = (\n                    $scope.tabs[tab].releaseOptions.quickErase);\n            }\n\n            // Setup actionProgress.\n            resetActionProgress(tab);\n            $scope.tabs[tab].actionProgress.total =\n                $scope.tabs[tab].selectedItems.length;\n\n            // Perform the action on all selected items.\n            angular.forEach($scope.tabs[tab].selectedItems, function(node) {\n                $scope.tabs[tab].manager.performAction(\n                    node, $scope.tabs[tab].actionOption.name,\n                    extra).then(function() {\n                        $scope.tabs[tab].actionProgress.completed += 1;\n                        node.action_failed = false;\n                        updateSelectedItems(tab);\n                    }, function(error) {\n                        addErrorToActionProgress(tab, error, node);\n                        node.action_failed = true;\n                        updateSelectedItems(tab);\n                    });\n            });\n        };\n\n        // Returns true when actions are being performed.\n        $scope.hasActionsInProgress = function(tab) {\n            var progress = $scope.tabs[tab].actionProgress;\n            return progress.total > 0 && progress.completed !== progress.total;\n        };\n\n        // Returns true if any of the actions have failed.\n        $scope.hasActionsFailed = function(tab) {\n            return Object.keys(\n                $scope.tabs[tab].actionProgress.errors).length > 0;\n        };\n\n        // Called to when the addHardwareOption has changed.\n        $scope.addHardwareOptionChanged = function() {\n            if($scope.addHardwareOption) {\n                $scope.addHardwareScope.show(\n                    $scope.addHardwareOption.name);\n            }\n        };\n\n        // Called when the add device button is pressed.\n        $scope.addDevice = function() {\n            $scope.addDeviceScope.show();\n        };\n\n        // Called when the cancel add device button is pressed.\n        $scope.cancelAddDevice = function() {\n            $scope.addDeviceScope.cancel();\n        };\n\n        // Get the display text for device ip assignment type.\n        $scope.getDeviceIPAssignment = function(ipAssignment) {\n            return DEVICE_IP_ASSIGNMENT[ipAssignment];\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        $scope.hasCustomCommissioningScripts = function() {\n            var i;\n            for(i=0;i<$scope.scripts.length;i++) {\n                if($scope.scripts[i].script_type === 0) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Load the required managers for this controller. The ServicesManager\n        // is required by the maasControllerStatus directive that is used\n        // in the partial for this controller.\n        ManagerHelperService.loadManagers($scope, [\n            MachinesManager, DevicesManager, ControllersManager,\n            GeneralManager, ZonesManager, UsersManager, ServicesManager,\n            ScriptsManager, SwitchesManager]).then(function() {\n                $scope.loading = false;\n            });\n\n        // Start polling for the os information.\n        GeneralManager.startPolling($scope, \"osinfo\");\n\n        // Stop polling and save the current filter when the scope is destroyed.\n        $scope.$on(\"$destroy\", function() {\n            $interval.cancel($scope.statusPoll);\n            GeneralManager.stopPolling($scope, \"osinfo\");\n            SearchService.storeFilters(\"nodes\", $scope.tabs.nodes.filters);\n            SearchService.storeFilters(\"devices\", $scope.tabs.devices.filters);\n            SearchService.storeFilters(\n                \"controllers\", $scope.tabs.controllers.filters);\n            SearchService.storeFilters(\n                \"switches\", $scope.tabs.switches.filters);\n        });\n\n        // Restore the filters if any saved.\n        var nodesFilter = SearchService.retrieveFilters(\"nodes\");\n        if(angular.isObject(nodesFilter)) {\n            $scope.tabs.nodes.search = SearchService.filtersToString(\n                nodesFilter);\n            $scope.updateFilters(\"nodes\");\n        }\n        var devicesFilter = SearchService.retrieveFilters(\"devices\");\n        if(angular.isObject(devicesFilter)) {\n            $scope.tabs.devices.search = SearchService.filtersToString(\n                devicesFilter);\n            $scope.updateFilters(\"devices\");\n        }\n        var controllersFilter = SearchService.retrieveFilters(\"controllers\");\n        if(angular.isObject(controllersFilter)) {\n            $scope.tabs.controllers.search = SearchService.filtersToString(\n                controllersFilter);\n            $scope.updateFilters(\"controllers\");\n        }\n        var switchesFilter = SearchService.retrieveFilters(\"switches\");\n        if(angular.isObject(switchesFilter)) {\n            $scope.tabs.switches.search = SearchService.filtersToString(\n                switchesFilter);\n            $scope.updateFilters(\"switches\");\n        }\n\n\n        // Switch to the specified tab, if specified.\n        if($routeParams.tab === \"nodes\" || $routeParams.tab === \"devices\" ||\n                $routeParams.tab === \"controllers\" ||\n                $routeParams.tab === \"switches\") {\n            $scope.toggleTab($routeParams.tab);\n        }\n\n        // Set the query if the present in $routeParams.\n        var query = $routeParams.query;\n        if(angular.isString(query)) {\n            $scope.tabs[$scope.currentpage].search = query;\n            $scope.updateFilters($scope.currentpage);\n        }\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pod Details Controller\n */\n\nangular.module('MAAS').controller('PodDetailsController', [\n    '$scope', '$rootScope', '$location', '$routeParams',\n    'PodsManager', 'GeneralManager', 'UsersManager', 'DomainsManager',\n    'ZonesManager', 'ManagerHelperService', 'ErrorService', function(\n        $scope, $rootScope, $location, $routeParams,\n        PodsManager, GeneralManager, UsersManager, DomainsManager,\n        ZonesManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"pods\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.pod = null;\n        $scope.podManager = PodsManager;\n        $scope.action = {\n          option: null,\n          options: [\n            {\n              name: 'refresh',\n              title: 'Refresh',\n              sentence: 'refresh',\n              operation: angular.bind(PodsManager, PodsManager.refresh)\n            },\n            {\n              name: 'delete',\n              title: 'Delete',\n              sentence: 'delete',\n              operation: angular.bind(PodsManager, PodsManager.deleteItem)\n            }\n          ],\n          inProgress: false,\n          error: null\n        };\n        $scope.compose = {\n          action: {\n            name: 'compose',\n            title: 'Compose',\n            sentence: 'compose'\n          },\n          obj: {\n            storage: [{\n              type: 'local',\n              size: 8,\n              tags: [],\n              boot: true\n            }]\n          }\n        };\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.domains = DomainsManager.getItems();\n        $scope.zones = ZonesManager.getItems();\n        $scope.section = {\n          area: 'summary'\n        };\n        $scope.machinesSearch = 'pod-id:=invalid';\n        $scope.editing = false;\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If power_types exist then a rack controller is connected.\n            return $scope.power_types.length > 0;\n        };\n\n        // Return true when the edit buttons can be clicked.\n        $scope.canEdit = function() {\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser());\n        };\n\n        // Called to edit the pod configuration.\n        $scope.editPodConfiguration = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.editing = true;\n        };\n\n        // Called when the cancel or save button is pressed.\n        $scope.exitEditPodConfiguration = function() {\n            $scope.editing = false;\n        };\n\n        // Return true if there is an action error.\n        $scope.isActionError = function() {\n            return $scope.action.error !== null;\n        };\n\n        // Called when the action.option has changed.\n        $scope.actionOptionChanged = function() {\n            // Clear the action error.\n            $scope.action.error = null;\n        };\n\n        // Cancel the action.\n        $scope.actionCancel = function() {\n            $scope.action.option = null;\n            $scope.action.error = null;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            $scope.action.inProgress = true;\n            $scope.action.option.operation($scope.pod).then(function() {\n                  // If the action was delete, then go back to listing.\n                  if($scope.action.option.name === \"delete\") {\n                      $location.path(\"/pods\");\n                  }\n                  $scope.action.inProgress = false;\n                  $scope.action.option = null;\n                  $scope.action.error = null;\n              }, function(error) {\n                  $scope.action.inProgress = false;\n                  $scope.action.error = error;\n              });\n        };\n\n        // Return the title of the pod type.\n        $scope.getPodTypeTitle = function() {\n            var i;\n            for(i = 0; i < $scope.power_types.length; i++) {\n                var power_type = $scope.power_types[i];\n                if(power_type.name === $scope.pod.type) {\n                    return power_type.description;\n                }\n            }\n            return $scope.pod.type;\n        };\n\n        // Returns true if the pod is composable.\n        $scope.canCompose = function() {\n            if(angular.isObject($scope.pod)) {\n                return ($scope.isSuperUser() &&\n                    $scope.pod.capabilities.indexOf('composable') >= 0);\n            } else {\n                return false;\n            }\n        };\n\n        // Opens the compose action menu.\n        $scope.composeMachine = function() {\n            $scope.action.option = $scope.compose.action;\n        };\n\n        // Called before the compose params is sent over the websocket.\n        $scope.composePreProcess = function(params) {\n            params = angular.copy(params);\n            params.id = $scope.pod.id;\n            // Sort boot disk first.\n            var sorted = $scope.compose.obj.storage.sort(function(a, b) {\n              if(a.boot === b.boot) {\n                return 0;\n              } else if(a.boot && !b.boot) {\n                return -1;\n              } else {\n                return 1;\n              }\n            });\n            // Create the storage constraint.\n            var storage = [];\n            angular.forEach(sorted, function(disk, idx) {\n              var constraint = idx + ':' + disk.size;\n              var tags = disk.tags.map(function(tag) {\n                return tag.text;\n              });\n              tags.splice(0, 0, disk.type);\n              constraint += '(' + tags.join(',') + ')';\n              storage.push(constraint);\n            });\n            params.storage = storage.join(',');\n            return params;\n        };\n\n        // Called to cancel composition.\n        $scope.cancelCompose = function() {\n          $scope.compose.obj = {\n            storage: [{\n              type: 'local',\n              size: 8,\n              tags: [],\n              boot: true\n            }]\n          };\n          $scope.action.option = null;\n        };\n\n        // Add another storage device.\n        $scope.composeAddStorage = function() {\n          var storage = {\n            type: 'local',\n            size: 8,\n            tags: [],\n            boot: false\n          };\n          if($scope.pod.capabilities.indexOf('iscsi_storage') >= 0) {\n            storage.type = 'iscsi';\n          }\n          $scope.compose.obj.storage.push(storage);\n        };\n\n        // Change which disk is the boot disk.\n        $scope.composeSetBootDisk = function(storage) {\n          angular.forEach($scope.compose.obj.storage, function(disk) {\n            disk.boot = false;\n          });\n          storage.boot = true;\n        };\n\n        // Remove a disk from storage config.\n        $scope.composeRemoveDisk = function(storage) {\n          var idx = $scope.compose.obj.storage.indexOf(storage);\n          if(idx >= 0) {\n            $scope.compose.obj.storage.splice(idx, 1);\n          }\n        };\n\n        // Start watching key fields.\n        $scope.startWatching = function() {\n            $scope.$watch(\"pod.name\", function() {\n                $rootScope.title = 'Pod ' + $scope.pod.name;\n            });\n            $scope.$watch(\"pod.capabilities\", function() {\n                // Show the composable action if the pod supports composition.\n                var idx = $scope.action.options.indexOf(\n                    $scope.compose.action);\n                if(!$scope.canCompose()) {\n                    if(idx >= 0) {\n                        $scope.action.options.splice(idx, 1);\n                    }\n                } else {\n                    if(idx === -1) {\n                        $scope.action.options.splice(\n                            0, 0, $scope.compose.action);\n                    }\n                }\n            });\n            $scope.$watch(\"action.option\", function(now, then) {\n                // When the compose action is selected set the default\n                // parameters.\n                if(now && now.name === 'compose') {\n                    if(!then || then.name !== 'compose') {\n                        $scope.compose.obj.domain = (\n                            DomainsManager.getDefaultDomain().id);\n                        $scope.compose.obj.zone = (\n                            ZonesManager.getDefaultZone().id);\n                    }\n                }\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            PodsManager, GeneralManager, UsersManager,\n            DomainsManager, ZonesManager]).then(function() {\n\n            // Possibly redirected from another controller that already had\n            // this pod set to active. Only call setActiveItem if not already\n            // the activeItem.\n            var activePod = PodsManager.getActiveItem();\n            if(angular.isObject(activePod) &&\n                activePod.id === parseInt($routeParams.id, 10)) {\n                $scope.pod = activePod;\n                $scope.loaded = true;\n                $scope.machinesSearch = 'pod-id:=' + $scope.pod.id;\n                $scope.startWatching();\n            } else {\n                PodsManager.setActiveItem(\n                    parseInt($routeParams.id, 10)).then(function(pod) {\n                        $scope.pod = pod;\n                        $scope.loaded = true;\n                        $scope.machinesSearch = 'pod-id:=' + $scope.pod.id;\n                        $scope.startWatching();\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pods List Controller\n */\n\nangular.module('MAAS').controller('PodsListController', [\n    '$scope', '$rootScope',\n    'PodsManager', 'UsersManager', 'GeneralManager', 'ZonesManager',\n    'ManagerHelperService', function(\n        $scope, $rootScope, PodsManager, UsersManager, GeneralManager,\n        ZonesManager, ManagerHelperService) {\n\n        // Set title and page.\n        $rootScope.title = \"Pods\";\n        $rootScope.page = \"pods\";\n\n        // Set initial values.\n        $scope.podManager = PodsManager;\n        $scope.pods = PodsManager.getItems();\n        $scope.loading = true;\n\n        $scope.filteredItems = [];\n        $scope.selectedItems = PodsManager.getSelectedItems();\n        $scope.predicate = 'name';\n        $scope.allViewableChecked = false;\n        $scope.action = {\n          option: null,\n          options: [\n            {\n              name: 'refresh',\n              title: 'Refresh',\n              sentence: 'refresh',\n              operation: angular.bind(PodsManager, PodsManager.refresh)\n            },\n            {\n              name: 'delete',\n              title: 'Delete',\n              sentence: 'delete',\n              operation: angular.bind(PodsManager, PodsManager.deleteItem)\n            }\n          ],\n          progress: {\n              total: 0,\n              completed: 0,\n              errors: 0\n          }\n        };\n        $scope.add = {\n          open: false,\n          obj: {}\n        };\n        $scope.powerTypes = GeneralManager.getData(\"power_types\");\n        $scope.zones = ZonesManager.getItems();\n\n        // Called to update `allViewableChecked`.\n        function updateAllViewableChecked() {\n            // Not checked when no pods.\n            if($scope.pods.length === 0) {\n                $scope.allViewableChecked = false;\n                return;\n            }\n\n            // Loop through all filtered pods and see if all are checked.\n            var i;\n            for(i = 0; i < $scope.pods.length; i++) {\n                if(!$scope.pods[i].$selected) {\n                    $scope.allViewableChecked = false;\n                    return;\n                }\n            }\n            $scope.allViewableChecked = true;\n        }\n\n        function clearAction() {\n            resetActionProgress();\n            $scope.action.option = null;\n        }\n\n        // Clear the action if required.\n        function shouldClearAction() {\n            if($scope.selectedItems.length === 0) {\n                clearAction();\n                if($scope.action.option) {\n                    $scope.action.option = null;\n                }\n            }\n        }\n\n        // Reset actionProgress to zero.\n        function resetActionProgress() {\n            var progress = $scope.action.progress;\n            progress.completed = progress.total = progress.errors = 0;\n            angular.forEach($scope.pods, function(pod) {\n                delete pod.action_failed;\n            });\n        }\n\n        // After an action has been performed check if we can leave all pods\n        // selected or if an error occured and we should only show the failed\n        // pods.\n        function updateSelectedItems() {\n            if(!$scope.hasActionsFailed()) {\n                if(!$scope.hasActionsInProgress()) {\n                     clearAction();\n                }\n                return;\n            }\n            angular.forEach($scope.pods, function(pod) {\n                if(pod.action_failed === false) {\n                    PodsManager.unselectItem(pod.id);\n                }\n            });\n            shouldClearAction();\n        }\n\n        // Mark a pod as selected or unselected.\n        $scope.toggleChecked = function(pod) {\n            if(PodsManager.isSelected(pod.id)) {\n                PodsManager.unselectItem(pod.id);\n            } else {\n                PodsManager.selectItem(pod.id);\n            }\n            updateAllViewableChecked();\n            shouldClearAction();\n        };\n\n        // Select all viewable pods or deselect all viewable pods.\n        $scope.toggleCheckAll = function() {\n            if($scope.allViewableChecked) {\n                angular.forEach($scope.pods, function(pod) {\n                    PodsManager.unselectItem(pod.id);\n                });\n            } else {\n                angular.forEach($scope.pods, function(pod) {\n                    PodsManager.selectItem(pod.id);\n                });\n            }\n            updateAllViewableChecked();\n            shouldClearAction();\n        };\n\n        // When the pods change update if all check buttons should be\n        // checked or not.\n        $scope.$watchCollection(\"pods\", function() {\n            updateAllViewableChecked();\n        });\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Called when the current action is cancelled.\n        $scope.actionCancel = function() {\n            resetActionProgress();\n            $scope.action.option = null;\n        };\n\n        // Perform the action on all pods.\n        $scope.actionGo = function() {\n            var extra = {};\n\n            // Setup actionProgress.\n            resetActionProgress();\n            $scope.action.progress.total = $scope.selectedItems.length;\n\n            // Perform the action on all selected items.\n            var operation = $scope.action.option.operation;\n            angular.forEach($scope.selectedItems, function(pod) {\n                operation(pod).then(function() {\n                        $scope.action.progress.completed += 1;\n                        pod.action_failed = false;\n                        updateSelectedItems();\n                    }, function(error) {\n                        $scope.action.progress.errors += 1;\n                        pod.action_error = error;\n                        pod.action_failed = true;\n                        updateSelectedItems();\n                    });\n            });\n        };\n\n        // Returns true when actions are being performed.\n        $scope.hasActionsInProgress = function() {\n            var progress = $scope.action.progress;\n            return progress.total > 0 && (\n                progress.completed + progress.errors) !== progress.total;\n        };\n\n        // Returns true if any of the actions have failed.\n        $scope.hasActionsFailed = function() {\n            var progress = $scope.action.progress;\n            return progress.errors > 0;\n        };\n\n        // Called when the add pod button is pressed.\n        $scope.addPod = function() {\n            $scope.add.open = true;\n            $scope.add.obj.zone = ZonesManager.getDefaultZone().id;\n        };\n\n        // Called when the cancel add pod button is pressed.\n        $scope.cancelAddPod = function() {\n            $scope.add.open = false;\n            $scope.add.obj = {};\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return the title of the power type.\n        $scope.getPowerTypeTitle = function(power_type) {\n            var i;\n            for(i = 0; i < $scope.powerTypes.length; i++) {\n                var powerType = $scope.powerTypes[i];\n                if(powerType.name === power_type) {\n                    return powerType.description;\n                }\n            }\n            return power_type;\n        };\n\n        // Load the required managers for this controller.\n        ManagerHelperService.loadManagers($scope, [\n            PodsManager, UsersManager, GeneralManager, ZonesManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Preferences Controller\n */\n\nangular.module('MAAS').controller('PreferencesController', [\n    '$scope', 'UsersManager', 'ManagerHelperService',\n    function(\n        $scope, UsersManager, ManagerHelperService) {\n            $scope.loading = true;\n            ManagerHelperService.loadManager(\n                $scope, UsersManager).then(function() {\n                    $scope.loading = false;\n                });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Settings Controller\n */\n\nangular.module('MAAS').controller('SettingsController', [\n    '$scope', '$rootScope', '$routeParams', 'PackageRepositoriesManager',\n    'DHCPSnippetsManager', 'MachinesManager', 'ControllersManager',\n    'DevicesManager', 'SubnetsManager', 'GeneralManager',\n    'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, PackageRepositoriesManager,\n             DHCPSnippetsManager, MachinesManager, ControllersManager,\n             DevicesManager, SubnetsManager, GeneralManager,\n             ManagerHelperService) {\n\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"settings\";\n\n        // Initial values.\n        $scope.loading = true;\n        $scope.snippetsManager = DHCPSnippetsManager;\n        $scope.snippets = DHCPSnippetsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.machines = MachinesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.known_architectures =\n            GeneralManager.getData(\"known_architectures\");\n        $scope.pockets_to_disable =\n            GeneralManager.getData(\"pockets_to_disable\");\n        $scope.components_to_disable =\n            GeneralManager.getData(\"components_to_disable\");\n        $scope.packageRepositoriesManager = PackageRepositoriesManager;\n        $scope.repositories =\n            PackageRepositoriesManager.getItems();\n        $scope.newSnippet = null;\n        $scope.editSnippet = null;\n        $scope.deleteSnippet = null;\n        $scope.snippetTypes = [\"Global\", \"Subnet\", \"Node\"];\n        $scope.newRepository = null;\n        $scope.editRepository = null;\n        $scope.deleteRepository = null;\n\n        // Called when the enabled toggle is changed.\n        $scope.repositoryEnabledToggle = function(repository) {\n            PackageRepositoriesManager.updateItem(repository);\n        };\n\n        // Called to enter remove mode for a repository.\n        $scope.repositoryEnterRemove = function(repository) {\n            $scope.newRepository = null;\n            $scope.editRepository = null;\n            $scope.deleteRepository = repository;\n        };\n\n        // Called to exit remove mode for a repository.\n        $scope.repositoryExitRemove = function() {\n            $scope.deleteRepository = null;\n        };\n\n        // Called to confirm the removal of a repository.\n        $scope.repositoryConfirmRemove = function() {\n            PackageRepositoriesManager.deleteItem(\n                $scope.deleteRepository).then(function() {\n                    $scope.repositoryExitRemove();\n                });\n        };\n\n        // Return true if the repository is a PPA.\n        $scope.isPPA = function(data) {\n            if(!angular.isObject(data)) {\n                return false;\n            }\n            if(!angular.isString(data.url)) {\n                return false;\n            }\n            return data.url.indexOf(\"ppa:\") === 0 ||\n                data.url.indexOf(\"ppa.launchpad.net\") > -1;\n        };\n\n        // Return true if the repository is a mirror.\n        $scope.isMirror = function(data) {\n            if(!angular.isObject(data)) {\n                return false;\n            }\n            if(!angular.isString(data.name)) {\n                return false;\n            }\n            return data.name === \"main_archive\" ||\n                data.name === \"ports_archive\";\n        };\n\n        // Called to enter edit mode for a repository.\n        $scope.repositoryEnterEdit = function(repository) {\n            $scope.newRepository = null;\n            $scope.deleteRepository = null;\n            $scope.editRepository = repository;\n        };\n\n        // Called to exit edit mode for a repository.\n        $scope.repositoryExitEdit = function() {\n            $scope.editRepository = null;\n        };\n\n        // Called to start adding a new repository.\n        $scope.repositoryAdd = function(isPPA) {\n            var repo = {\n                name: \"\",\n                enabled: true,\n                url: \"\",\n                key: \"\",\n                arches: [\"i386\", \"amd64\"],\n                distributions: [],\n                components: []\n            };\n            if (isPPA) {\n                repo.url = \"ppa:\";\n            }\n            $scope.newRepository = repo;\n        };\n\n        // Called to cancel addind a new repository.\n        $scope.repositoryAddCancel = function() {\n            $scope.newRepository = null;\n        };\n\n        // Return the node from either the machines, devices, or controllers\n        // manager.\n        function getNode(system_id) {\n            var node = MachinesManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n            node = DevicesManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n            node = ControllersManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n        }\n\n        // Return the name of the subnet.\n        $scope.getSubnetName = function(subnet) {\n            return SubnetsManager.getName(subnet);\n        };\n\n        // Return the text for the type of snippet.\n        $scope.getSnippetTypeText = function(snippet) {\n            if(angular.isString(snippet.node)) {\n                return \"Node\";\n            } else if(angular.isNumber(snippet.subnet)) {\n                return \"Subnet\";\n            } else {\n                return \"Global\";\n            }\n        };\n\n        // Return the object the snippet applies to.\n        $scope.getSnippetAppliesToObject = function(snippet) {\n            if(angular.isString(snippet.node)) {\n                return getNode(snippet.node);\n            } else if(angular.isNumber(snippet.subnet)) {\n                return SubnetsManager.getItemFromList(snippet.subnet);\n            }\n        };\n\n        // Return the applies to text that is disabled in none edit mode.\n        $scope.getSnippetAppliesToText = function(snippet) {\n            var obj = $scope.getSnippetAppliesToObject(snippet);\n            if(angular.isString(snippet.node) && angular.isObject(obj)) {\n                return obj.fqdn;\n            } else if(angular.isNumber(snippet.subnet) &&\n                angular.isObject(obj)) {\n                return SubnetsManager.getName(obj);\n            } else {\n                return \"\";\n            }\n        };\n\n        // Called to enter remove mode for a DHCP snippet.\n        $scope.snippetEnterRemove = function(snippet) {\n            $scope.newSnippet = null;\n            $scope.editSnippet = null;\n            $scope.deleteSnippet = snippet;\n        };\n\n        // Called to exit remove mode for a DHCP snippet.\n        $scope.snippetExitRemove = function() {\n            $scope.deleteSnippet = null;\n        };\n\n        // Called to confirm the removal of a snippet.\n        $scope.snippetConfirmRemove = function() {\n            DHCPSnippetsManager.deleteItem($scope.deleteSnippet).then(\n                function() {\n                    $scope.snippetExitRemove();\n                });\n        };\n\n        // Called to enter edit mode for a DHCP snippet.\n        $scope.snippetEnterEdit = function(snippet) {\n            $scope.newSnippet = null;\n            $scope.deleteSnippet = null;\n            $scope.editSnippet = snippet;\n            $scope.editSnippet.type = $scope.getSnippetTypeText(snippet);\n        };\n\n        // Called to exit edit mode for a DHCP snippet.\n        $scope.snippetExitEdit = function() {\n            $scope.editSnippet = null;\n        };\n\n        // Called when the active toggle is changed.\n        $scope.snippetToggle = function(snippet) {\n            DHCPSnippetsManager.updateItem(snippet).then(null,\n                function(error) {\n                    // Revert state change and clear toggling.\n                    snippet.enabled = !snippet.enabled;\n                    console.log(error);\n                });\n        };\n\n        // Called to start adding a new snippet.\n        $scope.snippetAdd = function() {\n            $scope.editSnippet = null;\n            $scope.deleteSnippet = null;\n            $scope.newSnippet = {\n                name: \"\",\n                type: \"Global\",\n                enabled: true\n            };\n        };\n\n        // Called to cancel addind a new snippet.\n        $scope.snippetAddCancel = function() {\n            $scope.newSnippet = null;\n        };\n\n        // Setup page variables based on section.\n        if($routeParams.section === \"dhcp\") {\n            $rootScope.title = \"DHCP snippets\";\n            $scope.currentpage = 'dhcp';\n        }\n        else if($routeParams.section === \"repositories\") {\n            $rootScope.title = \"Package repositories\";\n            $scope.currentpage = 'repositories';\n        }\n\n        // Load the required managers.\n        ManagerHelperService.loadManagers($scope, [\n                PackageRepositoriesManager, DHCPSnippetsManager,\n                MachinesManager, DevicesManager, ControllersManager,\n                SubnetsManager, GeneralManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Details Controller\n */\n\nangular.module('MAAS').controller('SpaceDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'SpacesManager', 'VLANsManager', 'SubnetsManager', 'FabricsManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        SpacesManager, VLANsManager, SubnetsManager, FabricsManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.space = null;\n        $scope.spaceManager = SpacesManager;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.loaded = false;\n        $scope.editSummary = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.space.name;\n        }\n\n        // Called when the space has been loaded.\n        function spaceLoaded(space) {\n            $scope.space = space;\n            updateTitle();\n            $scope.predicate = \"[subnet_name, vlan_name]\";\n            $scope.$watch(\"subnets\", updateSubnets, true);\n            updateSubnets();\n            $scope.loaded = true;\n        }\n\n        // Generate a table that can easily be rendered in the view.\n        function updateSubnets() {\n            var rows = [];\n            angular.forEach($filter('filter')(\n                    $scope.subnets, {space:$scope.space.id}, true),\n                    function(subnet) {\n                var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                var row = {\n                    vlan: vlan,\n                    vlan_name: VLANsManager.getName(vlan),\n                    subnet: subnet,\n                    subnet_name: SubnetsManager.getName(subnet),\n                    fabric: fabric,\n                    fabric_name: fabric.name\n                };\n                rows.push(row);\n            });\n            $scope.rows = rows;\n        }\n\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Called when the \"edit\" button is cliked in the space summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the space summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Return true if this is the default Space\n        $scope.isDefaultSpace = function() {\n            if(!angular.isObject($scope.space)) {\n                return false;\n            }\n            return $scope.space.id === 0;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.space)) {\n                return $scope.space.subnet_ids.length === 0;\n            }\n            return false;\n        };\n\n        // Called when the delete space button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete space button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete space button is pressed.\n        $scope.deleteConfirmButton = function() {\n            SpacesManager.deleteSpace($scope.space).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/networks\");\n                $location.search('by', 'space');\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            SpacesManager, SubnetsManager, VLANsManager, FabricsManager,\n            UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this space set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeSpace = SpacesManager.getActiveItem();\n            var requestedSpace = parseInt($routeParams.space_id, 10);\n            if(isNaN(requestedSpace)) {\n                ErrorService.raiseError(\"Invalid space identifier.\");\n            } else if(angular.isObject(activeSpace) &&\n                activeSpace.id === requestedSpace) {\n                spaceLoaded(activeSpace);\n            } else {\n                SpacesManager.setActiveItem(\n                    requestedSpace).then(function(space) {\n                        spaceLoaded(space);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Subnet Details Controller\n */\n\nangular.module('MAAS').filter('filterSource', ['ValidationService',\n    function() {\n        return function(subnets, source) {\n            var filtered = [];\n            angular.forEach(subnets, function(subnet) {\n                if(subnet.id !== source.id &&\n                    subnet.version === source.version) {\n                    filtered.push(subnet);\n                }\n            });\n            return filtered;\n        };\n    }]);\n\nangular.module('MAAS').controller('SubnetDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'ConfigsManager', 'SubnetsManager', 'SpacesManager', 'VLANsManager',\n    'UsersManager', 'FabricsManager', 'StaticRoutesManager',\n    'ManagerHelperService', 'ErrorService', 'ConverterService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location, ConfigsManager,\n        SubnetsManager, SpacesManager, VLANsManager, UsersManager,\n        FabricsManager, StaticRoutesManager, ManagerHelperService, ErrorService,\n        ConverterService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.subnet = null;\n        $scope.editSummary = false;\n        $scope.active_discovery_data = null;\n        $scope.active_discovery_interval = null;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.subnetManager = SubnetsManager;\n        $scope.staticRoutes = StaticRoutesManager.getItems();\n        $scope.staticRoutesManager = StaticRoutesManager;\n        $scope.space = null;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.actionError = null;\n        $scope.actionOption = null;\n        $scope.actionOptions = [];\n        $scope.reverse = false;\n        $scope.newStaticRoute = null;\n        $scope.editStaticRoute = null;\n        $scope.deleteStaticRoute = null;\n\n        $scope.MAP_SUBNET_ACTION = {\n            name: \"map_subnet\",\n            title: \"Map subnet\"\n        };\n        $scope.DELETE_ACTION = {\n            name: \"delete\",\n            title: \"Delete\"\n        };\n\n        // Alloc type mapping.\n        var ALLOC_TYPES = {\n            0: 'Automatic',\n            1: 'Static',\n            4: 'User reserved',\n            5: 'DHCP',\n            6: 'Observed'\n        };\n\n        // Node type mapping.\n        var NODE_TYPES = {\n            0: 'Machine',\n            1: 'Device',\n            2: 'Rack controller',\n            3: 'Region controller',\n            4: 'Rack and region controller',\n            5: 'Chassis',\n            6: 'Storage'\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            subnet = $scope.subnet;\n            if(subnet && subnet.cidr) {\n                $rootScope.title = subnet.cidr;\n                if(subnet.name && subnet.cidr !== subnet.name) {\n                    $rootScope.title += \" (\" +subnet.name + \")\";\n                }\n            }\n        }\n\n        // Update the IP version of the CIDR.\n        function updateIPVersion() {\n            var ip = $scope.subnet.cidr.split('/')[0];\n            if(ip.indexOf(':') === -1) {\n                $scope.ipVersion = 4;\n            } else {\n                $scope.ipVersion = 6;\n            }\n        }\n\n        // Sort for IP address.\n        $scope.ipSort = function(ipAddress) {\n            if($scope.ipVersion === 4) {\n                return ConverterService.ipv4ToInteger(ipAddress.ip);\n            } else {\n                return ConverterService.ipv6Expand(ipAddress.ip);\n            }\n        };\n\n        // Set default predicate to the ipSort function.\n        $scope.predicate = $scope.ipSort;\n\n        // Return the name of the allocation type.\n        $scope.getAllocType = function(allocType) {\n            var str = ALLOC_TYPES[allocType];\n            if(angular.isString(str)) {\n                return str;\n            } else {\n                return \"Unknown\";\n            }\n        };\n\n        $scope.getSubnetCIDR = function(destId) {\n            return SubnetsManager.getItemFromList(destId).cidr;\n        };\n\n        // Sort based on the name of the allocation type.\n        $scope.allocTypeSort = function(ipAddress) {\n            return $scope.getAllocType(ipAddress.alloc_type);\n        };\n\n        // Return the name of the node type for the given IP.\n        $scope.getUsageForIP = function(ip) {\n            if(angular.isObject(ip.node_summary)) {\n                var nodeType = ip.node_summary.node_type;\n                var str = NODE_TYPES[nodeType];\n                if(angular.isString(str)) {\n                    return str;\n                } else {\n                    return \"Unknown\";\n                }\n            } else if(angular.isObject(ip.bmcs)) {\n                return \"BMC\";\n            } else if(angular.isObject(ip.dns_records)) {\n                return \"DNS\";\n            } else {\n                return \"Unknown\";\n            }\n        };\n\n        // Sort based on the node type string.\n        $scope.nodeTypeSort = function(ipAddress) {\n            return $scope.getUsageForIP(ipAddress);\n        };\n\n        // Sort based on the owner name.\n        $scope.ownerSort = function(ipAddress) {\n            var owner = ipAddress.user;\n            if(angular.isString(owner) && owner.length > 0) {\n                return owner;\n            } else {\n                return \"MAAS\";\n            }\n        };\n\n        // Called to change the sort order of the IP table.\n        $scope.sortIPTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Return the name of the VLAN.\n        $scope.getVLANName = function(vlan) {\n           return VLANsManager.getName(vlan);\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        $scope.actionRetry = function() {\n            // When we clear actionError, the HTML will be re-rendered to\n            // hide the error message (and the user will be taken back to\n            // the previous action they were performing, since we reset\n            // the actionOption in the error handler.\n            $scope.actionError = null;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            if($scope.actionOption.name === \"map_subnet\") {\n                SubnetsManager.scanSubnet($scope.subnet).then(function(result) {\n                    if(result && result.scan_started_on.length === 0) {\n                        $scope.actionError =\n                            ManagerHelperService.parseValidationError(\n                                result.result);\n                    } else {\n                        $scope.actionOption = null;\n                        $scope.actionError = null;\n                    }\n                }, function(error) {\n                    $scope.actionError =\n                        ManagerHelperService.parseValidationError(error);\n                });\n            } else if($scope.actionOption.name === \"delete\") {\n                SubnetsManager.deleteSubnet(\n                    $scope.subnet).then(function(result) {\n                        $scope.actionOption = null;\n                        $scope.actionError = null;\n                        $location.path(\"/networks\");\n                    }, function(error) {\n                        $scope.actionError =\n                            ManagerHelperService.parseValidationError(error);\n                });\n            }\n        };\n\n        // Called when a action is selected.\n        $scope.actionChanged = function() {\n            $scope.actionError = null;\n        };\n\n        // Called when the \"Cancel\" button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionOption = null;\n            $scope.actionError = null;\n        };\n\n        // Called when the managers load to populate the actions the user\n        // is allowed to perform.\n        $scope.updateActions = function() {\n            if(UsersManager.isSuperUser()) {\n                $scope.actionOptions = [\n                    $scope.MAP_SUBNET_ACTION,\n                    $scope.DELETE_ACTION\n                ];\n            } else {\n                $scope.actionOptions = [];\n            }\n        };\n\n        // Called when the \"edit\" button is cliked in the subnet summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the subnet summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Called by maas-obj-form before it saves the subnet. The passed\n        // subnet is the object right before its sent over the websocket.\n        $scope.subnetPreSave = function(subnet, changedFields) {\n            // Adjust the subnet object if the fabric changed.\n            if(changedFields.indexOf(\"fabric\") !== -1) {\n                // Fabric changed, the websocket expects VLAN to be updated, so\n                // we set the VLAN to the default VLAN for the new fabric.\n                subnet.vlan = FabricsManager.getItemFromList(\n                    subnet.fabric).default_vlan_id;\n            }\n            return subnet;\n        };\n\n        // Called to start adding a new static route.\n        $scope.addStaticRoute = function() {\n            $scope.editStaticRoute = null;\n            $scope.deleteStaticRoute = null;\n            $scope.newStaticRoute = {\n                source: $scope.subnet.id,\n                gateway_ip: \"\",\n                destination: null,\n                metric: 0\n            };\n        };\n\n        // Cancel adding the new static route.\n        $scope.cancelAddStaticRoute = function() {\n            $scope.newStaticRoute = null;\n        };\n\n        // Return true if the static route is in edit mode.\n        $scope.isStaticRouteInEditMode = function(route) {\n            return $scope.editStaticRoute === route;\n        };\n\n        // Toggle edit mode for the static route.\n        $scope.staticRouteToggleEditMode = function(route) {\n            $scope.newStaticRoute = null;\n            $scope.deleteStaticRoute = null;\n            if($scope.isStaticRouteInEditMode(route)) {\n                $scope.editStaticRoute  = null;\n            } else {\n                $scope.editStaticRoute = route;\n            }\n        };\n\n        // Return true if the static route is in delete mode.\n        $scope.isStaticRouteInDeleteMode = function(route) {\n            return $scope.deleteStaticRoute === route;\n        };\n\n        // Enter delete mode for the static route.\n        $scope.staticRouteEnterDeleteMode = function(route) {\n            $scope.newStaticRoute = null;\n            $scope.editStaticRoute = null;\n            $scope.deleteStaticRoute = route;\n        };\n\n        // Exit delete mode for the statc route.\n        $scope.staticRouteCancelDelete = function() {\n            $scope.deleteStaticRoute = null;\n        };\n\n        // Perform the delete operation on the static route.\n        $scope.staticRouteConfirmDelete = function() {\n            StaticRoutesManager.deleteItem($scope.deleteStaticRoute).then(\n                function() {\n                    $scope.deleteStaticRoute = null;\n                });\n        };\n\n        // Called when the subnet has been loaded.\n        function subnetLoaded(subnet) {\n            $scope.subnet = subnet;\n            $scope.loaded = true;\n\n            updateTitle();\n\n            // Watch the vlan and fabric field so if its changed on the subnet\n            // we make sure that the fabric is updated. It is possible that\n            // fabric is removed from the subnet since it is injected from this\n            // controller, so when it is removed we add it back.\n            var updateFabric = function() {\n                $scope.subnet.fabric = (\n                    VLANsManager.getItemFromList($scope.subnet.vlan).fabric);\n                $scope.subnet.fabric_name = (\n                  FabricsManager.getItemFromList(subnet.fabric).name);\n            };\n            var updateSpace = function() {\n                $scope.space = (\n                    SpacesManager.getItemFromList($scope.subnet.space));\n            };\n            var updateVlan = function() {\n                var vlan = VLANsManager.getItemFromList($scope.subnet.vlan);\n                $scope.subnet.vlan_name = (\n                    VLANsManager.getName(vlan)\n                );\n            };\n\n            $scope.$watch(\"subnet.fabric\", updateFabric);\n            $scope.$watch(\"subnet.fabric_name\", updateFabric);\n            $scope.$watch(\"subnet.vlan\", updateFabric);\n            $scope.$watch(\"subnet.vlan_name\", updateVlan);\n            $scope.$watch(\"subnet.space\", updateSpace);\n            $scope.$watch(\"subnet.cidr\", updateIPVersion);\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            ConfigsManager, SubnetsManager, SpacesManager, VLANsManager,\n            UsersManager, FabricsManager, StaticRoutesManager\n        ]).then(function() {\n\n            $scope.updateActions();\n            $scope.active_discovery_data = ConfigsManager.getItemFromList(\n                \"active_discovery_interval\");\n            // Find active discovery interval\n            angular.forEach(\n                $scope.active_discovery_data.choices, function(choice) {\n                    if(choice[0] === $scope.active_discovery_data.value) {\n                        $scope.active_discovery_interval = choice[1];\n                    }\n                });\n\n            // Possibly redirected from another controller that already had\n            // this subnet set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeSubnet = SubnetsManager.getActiveItem();\n            var requestedSubnet = parseInt($routeParams.subnet_id, 10);\n            if(isNaN(requestedSubnet)) {\n                ErrorService.raiseError(\"Invalid subnet identifier.\");\n            } else if(angular.isObject(activeSubnet) &&\n                activeSubnet.id === requestedSubnet) {\n                subnetLoaded(activeSubnet);\n            } else {\n                SubnetsManager.setActiveItem(\n                    requestedSubnet).then(function(subnet) {\n                        subnetLoaded(subnet);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS VLAN Details Controller\n */\n\nangular.module('MAAS').filter('ignoreSelf', function () {\n    return function(objects, self) {\n        var filtered = [];\n        angular.forEach(objects, function(obj) {\n            if(obj !== self) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').controller('VLANDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'VLANsManager', 'SubnetsManager', 'SpacesManager', 'FabricsManager',\n    'ControllersManager', 'UsersManager', 'ManagerHelperService',\n    'ErrorService', 'ValidationService', function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        VLANsManager, SubnetsManager, SpacesManager, FabricsManager,\n        ControllersManager, UsersManager, ManagerHelperService, ErrorService,\n        ValidationService) {\n        var vm = this;\n\n        var filterByVLAN = $filter('filterByVLAN');\n        var filterControllersByVLAN = $filter('filterControllersByVLAN');\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        vm.PROVIDE_DHCP_ACTION = {\n            // Note: 'title' is set dynamically depending on whether or not\n            // DHCP is already enabled on this VLAN.\n            name: \"enable_dhcp\"\n        };\n        vm.RELAY_DHCP_ACTION = {\n            // Note: 'title' is set ndynamically depending on whether or not\n            // DHCP relay is already enabled on this VLAN.\n            name: \"relay_dhcp\"\n        };\n        vm.DISABLE_DHCP_ACTION = {\n            name: \"disable_dhcp\",\n            title: \"Disable DHCP\"\n        };\n        vm.DELETE_ACTION = {\n            name: \"delete\",\n            title: \"Delete\"\n        };\n\n        // Initial values.\n        vm.loaded = false;\n        vm.vlan = null;\n        vm.title = null;\n        vm.actionOption = null;\n        vm.actionOptions = [];\n        vm.vlanManager = VLANsManager;\n        vm.vlans = VLANsManager.getItems();\n        vm.subnets = SubnetsManager.getItems();\n        vm.spaces = SpacesManager.getItems();\n        vm.fabrics = FabricsManager.getItems();\n        vm.controllers = ControllersManager.getItems();\n        vm.actionError = null;\n        vm.relatedSubnets = [];\n        vm.relatedControllers = [];\n        vm.provideDHCPAction = {};\n        vm.primaryRack = null;\n        vm.secondaryRack = null;\n        vm.editSummary = false;\n\n\n        // Return true if the authenticated user is super user.\n        vm.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Called when the \"edit\" button is cliked in the vlan summary\n        vm.enterEditSummary = function() {\n            vm.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the vlan summary\n        vm.exitEditSummary = function() {\n            vm.editSummary = false;\n        };\n\n        // Get the space name for the VLAN.\n        vm.getSpaceName = function() {\n            var space = SpacesManager.getItemFromList(vm.vlan.space);\n            if(space) {\n              return space.name;\n            } else {\n              return \"(undefined)\";\n            }\n        };\n\n        // Get the aciton structure for the action with the specified name.\n        vm.getActionByName = function(name) {\n            var i;\n            for(i = 0 ; i < vm.actionOptions.length ; i++) {\n                if(vm.actionOptions[i].name === name) {\n                    return vm.actionOptions[i];\n                }\n            }\n            return null;\n        };\n\n        // Initialize the provideDHCPAction structure with the current primary\n        // and secondary rack, plus an indication regarding whether or not\n        // adding a dynamic IP range is required.\n        vm.initProvideDHCP = function(forRelay) {\n            vm.provideDHCPAction = {};\n            var dhcp = vm.provideDHCPAction;\n            dhcp.subnet = null;\n            dhcp.relayVLAN = null;\n            if (angular.isNumber(vm.vlan.relay_vlan)) {\n                dhcp.relayVLAN = VLANsManager.getItemFromList(\n                    vm.vlan.relay_vlan);\n            }\n            if (angular.isObject(vm.primaryRack)) {\n                dhcp.primaryRack = vm.primaryRack.system_id;\n            } else if(vm.relatedControllers.length > 0) {\n                // Select the primary controller arbitrarily by default.\n                dhcp.primaryRack = vm.relatedControllers[0].system_id;\n            }\n            if (angular.isObject(vm.secondaryRack)) {\n                dhcp.secondaryRack = vm.secondaryRack.system_id;\n            } else if(vm.relatedControllers.length > 1) {\n                // Select the secondary controller arbitrarily by default.\n                dhcp.secondaryRack = vm.relatedControllers[1].system_id;\n            }\n            dhcp.maxIPs = 0;\n            dhcp.startIP = null;\n            dhcp.endIP = null;\n            dhcp.gatewayIP = \"\";\n            if (angular.isObject(vm.relatedSubnets)) {\n                // Select a subnet arbitrarily by default.\n                if (vm.relatedSubnets.length > 0 &&\n                        angular.isObject(vm.relatedSubnets[0].subnet)) {\n                    dhcp.subnet = vm.relatedSubnets[0].subnet.id;\n                }\n                dhcp.needsDynamicRange = true;\n                var i, subnet;\n                for (i = 0; i < vm.relatedSubnets.length; i++) {\n                    subnet = vm.relatedSubnets[i].subnet;\n                    // If any related subnet already has a dynamic range, we\n                    // cannot prompt the user to enter one here. If a\n                    // suggestion does not exist, a range does not exist\n                    // already.\n                    var iprange = subnet.statistics.suggested_dynamic_range;\n                    if (!angular.isObject(iprange)) {\n                        // If there is already a dynamic range on one of the\n                        // subnets, it's the \"subnet of least surprise\" if\n                        // the user is choosing to reconfigure their rack\n                        // controllers. (if they want DHCP on *another* subnet,\n                        // they should need to be explicit about it.)\n                        dhcp.subnet = subnet.id;\n                        dhcp.needsDynamicRange = false;\n                        break;\n                    }\n                }\n                // We must prompt the user for a subnet and a gateway IP\n                // address if any subnet does not yet contain a gateway IP\n                // address.\n                dhcp.needsGatewayIP = false;\n                dhcp.subnetMissingGatewayIP = true;\n                for (i = 0; i < vm.relatedSubnets.length; i++) {\n                    subnet = vm.relatedSubnets[i].subnet;\n                    if(subnet.gateway_ip === null ||\n                        subnet.gateway_ip === '') {\n                        dhcp.needsGatewayIP = true;\n                        break;\n                    }\n                }\n            }\n            // Since we are setting default values for these three options,\n            // ensure all the appropriate updates occur.\n            if(!forRelay) {\n                vm.updatePrimaryRack();\n                vm.updateSecondaryRack();\n            }\n            vm.updateSubnet(forRelay);\n        };\n\n        // Called when the actionOption has changed.\n        vm.actionOptionChanged = function() {\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                vm.initProvideDHCP(false);\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                vm.initProvideDHCP(true);\n            }\n            // Clear the action error.\n            vm.actionError = null;\n        };\n\n        // Cancel the action.\n        vm.actionCancel = function() {\n            // When the user wants to cancel an action, we need to clear out\n            // both the actionOption (so that the action screen will not be\n            // presented again) and the actionError (so that the error screen\n            // is hidden).\n            vm.actionOption = null;\n            vm.actionError = null;\n        };\n\n        // Called from the Provide DHCP form when the primary rack changes.\n        vm.updatePrimaryRack = function() {\n            var dhcp = vm.provideDHCPAction;\n            // If the user selects the secondary controller to be the primary,\n            // then the primary controller needs to be cleared out.\n            if(dhcp.primaryRack === dhcp.secondaryRack) {\n                dhcp.secondaryRack = null;\n            }\n            var i;\n            for(i = 0 ; i < vm.relatedControllers.length ; i++) {\n                if(vm.relatedControllers[i].system_id !== dhcp.primaryRack) {\n                    dhcp.secondaryRack = vm.relatedControllers[i].system_id;\n                    break;\n                }\n            }\n        };\n\n        // Called from the Provide DHCP form when the secondary rack changes.\n        vm.updateSecondaryRack = function() {\n            var dhcp = vm.provideDHCPAction;\n            // This should no longer be possible due to the filters on the\n            // drop-down boxes, but just in case.\n            if(dhcp.primaryRack === dhcp.secondaryRack) {\n                dhcp.primaryRack = null;\n                dhcp.secondaryRack = null;\n            }\n        };\n\n        // Called from the view to exclude the primary rack when selecting\n        // the secondary rack controller.\n        vm.filterPrimaryRack = function(rack) {\n            var dhcp = vm.provideDHCPAction;\n            return rack.system_id !== dhcp.primaryRack;\n        };\n\n        // Called from the Provide DHCP form when the subnet selection changes.\n        vm.updateSubnet = function(forRelay) {\n            var dhcp = vm.provideDHCPAction;\n            var subnet = SubnetsManager.getItemFromList(dhcp.subnet);\n            if(angular.isObject(subnet)) {\n                var suggested_gateway = null;\n                var iprange = null;\n                if(angular.isObject(subnet.statistics)) {\n                    suggested_gateway = subnet.statistics.suggested_gateway;\n                    iprange = subnet.statistics.suggested_dynamic_range;\n                }\n                if(angular.isObject(iprange) && iprange.num_addresses > 0) {\n                    dhcp.maxIPs = iprange.num_addresses;\n                    if(forRelay) {\n                        dhcp.startIP = \"\";\n                        dhcp.endIP = \"\";\n                        dhcp.startPlaceholder = iprange.start + \"(optional)\";\n                        dhcp.endPlaceholder = iprange.end + \" (optional)\";\n                    } else {\n                        dhcp.startIP = iprange.start;\n                        dhcp.endIP = iprange.end;\n                        dhcp.startPlaceholder = iprange.start;\n                        dhcp.endPlaceholder = iprange.end;\n                    }\n                } else {\n                    // Need to add a dynamic range, but according to our data,\n                    // there is no room on the subnet for a dynamic range.\n                    dhcp.maxIPs = 0;\n                    dhcp.startIP = \"\";\n                    dhcp.endIP = \"\";\n                    dhcp.startPlaceholder = \"(no available IPs)\";\n                    dhcp.endPlaceholder = \"(no available IPs)\";\n                }\n                if(angular.isString(suggested_gateway)) {\n                    if(forRelay) {\n                      dhcp.gatewayIP = \"\";\n                      dhcp.gatewayPlaceholder = (\n                          suggested_gateway + \" (optional)\");\n                    } else {\n                        dhcp.gatewayIP = suggested_gateway;\n                        dhcp.gatewayPlaceholder = suggested_gateway;\n                    }\n                } else {\n                    // This means the subnet already has a gateway, so don't\n                    // bother populating it.\n                    dhcp.gatewayIP = \"\";\n                    dhcp.gatewayPlaceholder = \"\";\n                }\n            } else {\n                // Don't need to add a dynamic range, so ensure these fields\n                // are cleared out.\n                dhcp.maxIPs = 0;\n                dhcp.startIP = null;\n                dhcp.endIP = null;\n                dhcp.gatewayIP = \"\";\n            }\n            if(angular.isObject(subnet)) {\n                dhcp.subnetMissingGatewayIP = !angular.isString(\n                    subnet.gateway_ip);\n            } else {\n                dhcp.subnetMissingGatewayIP = false;\n            }\n            if(dhcp.subnetMissingGatewayIP === false) {\n                dhcp.gatewayIP = null;\n            }\n       };\n\n        vm.actionRetry = function() {\n            // When we clear actionError, the HTML will be re-rendered to\n            // hide the error message (and the user will be taken back to\n            // the previous action they were performing, since we reset\n            // the actionOption in the error handler.\n            vm.actionError = null;\n        };\n\n        // Return True if the current action can be performed.\n        vm.canPerformAction = function() {\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                return vm.relatedSubnets.length > 0;\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                return angular.isObject(vm.provideDHCPAction.relayVLAN);\n            } else {\n                return true;\n            }\n        };\n\n        // Perform the action.\n        vm.actionGo = function() {\n            // Do nothing if action cannot be performed.\n            if(!vm.canPerformAction()) {\n               return;\n            }\n\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                var dhcp = vm.provideDHCPAction;\n                var controllers = [];\n                // These will be undefined if they don't exist, and the region\n                // will simply get an empty dictionary.\n                var extra = {};\n                extra.subnet = dhcp.subnet;\n                extra.start = dhcp.startIP;\n                extra.end = dhcp.endIP;\n                extra.gateway = dhcp.gatewayIP;\n                if(angular.isString(dhcp.primaryRack)) {\n                    controllers.push(dhcp.primaryRack);\n                }\n                if(angular.isString(dhcp.secondaryRack)) {\n                    controllers.push(dhcp.secondaryRack);\n                }\n                // Abort the action without calling down to the region if\n                // the user didn't select a controller.\n                if(controllers.length === 0) {\n                    vm.actionError =\n                        \"A primary rack controller must be specified.\";\n                    return;\n                }\n                VLANsManager.configureDHCP(\n                    vm.vlan, controllers, extra).then(function() {\n                        vm.actionOption = null;\n                        vm.actionError = null;\n                    }, function(result) {\n                        vm.actionError = result.error;\n                        vm.actionOption = vm.PROVIDE_DHCP_ACTION;\n                    });\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                // These will be undefined if they don't exist, and the region\n                // will simply get an empty dictionary.\n                var extraDHCP = {};\n                extraDHCP.subnet = vm.provideDHCPAction.subnet;\n                extraDHCP.start = vm.provideDHCPAction.startIP;\n                extraDHCP.end = vm.provideDHCPAction.endIP;\n                extraDHCP.gateway = vm.provideDHCPAction.gatewayIP;\n                var relay = vm.provideDHCPAction.relayVLAN.id;\n                VLANsManager.configureDHCP(\n                    vm.vlan, [], extraDHCP, relay).then(function() {\n                        vm.actionOption = null;\n                        vm.actionError = null;\n                    }, function(result) {\n                        vm.actionError = result.error;\n                        vm.actionOption = vm.RELAY_DHCP_ACTION;\n                    });\n            } else if(vm.actionOption.name === \"disable_dhcp\") {\n                VLANsManager.disableDHCP(vm.vlan).then(function() {\n                    vm.actionOption = null;\n                    vm.actionError = null;\n                }, function(result) {\n                    vm.actionError = result.error;\n                    vm.actionOption = vm.DISABLE_DHCP_ACTION;\n                });\n            } else if(vm.actionOption.name === \"delete\") {\n                VLANsManager.deleteVLAN(vm.vlan).then(function() {\n                    $location.path(\"/networks\");\n                    vm.actionOption = null;\n                    vm.actionError = null;\n                }, function(result) {\n                    vm.actionError = result.error;\n                    vm.actionOption = vm.DELETE_ACTION;\n                });\n            }\n        };\n\n        // Return true if there is an action error.\n        vm.isActionError = function() {\n            return vm.actionError !== null;\n        };\n\n        // Return the name of the VLAN.\n        vm.getFullVLANName = function(vlan_id) {\n            var vlan = VLANsManager.getItemFromList(vlan_id);\n            var fabric = FabricsManager.getItemFromList(vlan.fabric);\n            return (\n                FabricsManager.getName(fabric) + \".\" +\n                VLANsManager.getName(vlan));\n        };\n\n        // Return the current DHCP status.\n        vm.getDHCPStatus = function() {\n            if(vm.vlan) {\n              if(vm.vlan.dhcp_on) {\n                return \"Enabled\";\n              } else if(vm.vlan.relay_vlan) {\n                return \"Relayed via \" + vm.getFullVLANName(vm.vlan.relay_vlan);\n              } else {\n                return \"Disabled\";\n              }\n            } else {\n              return \"\";\n            }\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            var vlan = vm.vlan;\n            var fabric = vm.fabric;\n            if(angular.isObject(vlan) && angular.isObject(fabric)) {\n                if (!vlan.name) {\n                    if(vlan.vid === 0) {\n                        vm.title = \"Default VLAN\";\n                    } else {\n                        vm.title = \"VLAN \" + vlan.vid;\n                    }\n                } else {\n                    vm.title = vlan.name;\n                }\n                vm.title += \" in \" + fabric.name;\n                $rootScope.title = vm.title;\n            }\n        }\n\n        // Called from a $watch when the management racks are updated.\n        function updateManagementRacks() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            if(vlan.primary_rack) {\n                vm.primaryRack = ControllersManager.getItemFromList(\n                    vlan.primary_rack);\n            } else {\n                vm.primaryRack = null;\n            }\n            if(vlan.secondary_rack) {\n                vm.secondaryRack = ControllersManager.getItemFromList(\n                    vlan.secondary_rack);\n            } else {\n                vm.secondaryRack = null;\n            }\n        }\n\n        // Called from a $watch when the related controllers may have changed.\n        function updateRelatedControllers() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            var racks = [];\n            angular.forEach(vlan.rack_sids, function(rack_sid) {\n                var rack = ControllersManager.getItemFromList(rack_sid);\n                if(angular.isObject(rack)) {\n                    racks.push(rack);\n                }\n            });\n            vm.relatedControllers = racks;\n        }\n\n        // Called from a $watch when the related subnets or spaces may have\n        // changed.\n        function updateRelatedSubnets() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            var subnets = [];\n            angular.forEach(\n                    filterByVLAN(vm.subnets, vlan), function(subnet) {\n                var space = SpacesManager.getItemFromList(subnet.space);\n                if(!angular.isObject(space)) {\n                    space = {name: \"(undefined)\"};\n                }\n                var row = {\n                    subnet: subnet,\n                    space: space\n                };\n                subnets.push(row);\n            });\n            vm.relatedSubnets = subnets;\n        }\n\n        function updatePossibleActions() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            // Clear out the actionOptions array. (this needs to be the same\n            // object, since it's watched from $scope.)\n            vm.actionOptions.length = 0;\n            if(UsersManager.isSuperUser()) {\n                if(!vlan.relay_vlan) {\n                  if(vlan.dhcp_on === true) {\n                      vm.PROVIDE_DHCP_ACTION.title = \"Reconfigure DHCP\";\n                      vm.actionOptions.push(vm.PROVIDE_DHCP_ACTION);\n                      vm.actionOptions.push(vm.DISABLE_DHCP_ACTION);\n                  } else {\n                      vm.PROVIDE_DHCP_ACTION.title = \"Provide DHCP\";\n                      vm.RELAY_DHCP_ACTION.title = \"Relay DHCP\";\n                      vm.actionOptions.push(vm.PROVIDE_DHCP_ACTION);\n                      vm.actionOptions.push(vm.RELAY_DHCP_ACTION);\n                  }\n                } else {\n                  vm.actionOptions.push(vm.RELAY_DHCP_ACTION);\n                  vm.actionOptions.push(vm.DISABLE_DHCP_ACTION);\n                  vm.RELAY_DHCP_ACTION.title = \"Reconfigure DHCP relay\";\n                }\n                if(!vm.isFabricDefault) {\n                    vm.actionOptions.push(vm.DELETE_ACTION);\n                }\n            }\n        }\n\n        // Called when the vlan has been loaded.\n        function vlanLoaded(vlan) {\n            vm.vlan = vlan;\n            vm.fabric = FabricsManager.getItemFromList(vlan.fabric);\n            vm.isFabricDefault = vm.fabric.default_vlan_id === vm.vlan.id;\n            vm.loaded = true;\n\n            updateTitle();\n            updateManagementRacks();\n            updateRelatedControllers();\n            updateRelatedSubnets();\n            updatePossibleActions();\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            VLANsManager, SubnetsManager, SpacesManager, FabricsManager,\n            ControllersManager, UsersManager\n        ]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this vlan set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeVLAN = VLANsManager.getActiveItem();\n            var requestedVLAN = parseInt($routeParams.vlan_id, 10);\n            if(isNaN(requestedVLAN)) {\n                ErrorService.raiseError(\"Invalid VLAN identifier.\");\n            } else if(angular.isObject(activeVLAN) &&\n                activeVLAN.id === requestedVLAN) {\n                vlanLoaded(activeVLAN);\n            } else {\n                VLANsManager.setActiveItem(\n                    requestedVLAN).then(function(vlan) {\n                        vlanLoaded(vlan);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n\n            $scope.$watch(\"vlanDetails.vlan.name\", updateTitle);\n            $scope.$watch(\"vlanDetails.vlan.vid\", updateTitle);\n            $scope.$watch(\"vlanDetails.vlan.dhcp_on\", updatePossibleActions);\n            $scope.$watch(\n                \"vlanDetails.vlan.relay_vlan\", updatePossibleActions);\n            $scope.$watch(\"vlanDetails.fabric.name\", updateTitle);\n            $scope.$watch(\n                \"vlanDetails.vlan.primary_rack\", updateManagementRacks);\n            $scope.$watch(\n                \"vlanDetails.vlan.secondary_rack\", updateManagementRacks);\n\n            $scope.$watchCollection(\n                \"vlanDetails.subnets\", updateRelatedSubnets);\n            $scope.$watchCollection(\n                \"vlanDetails.spaces\", updateRelatedSubnets);\n            $scope.$watchCollection(\n                \"vlanDetails.controllers\", updateRelatedControllers);\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zone Details Controller\n */\n\nangular.module('MAAS').controller('ZoneDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location', 'MachinesManager',\n    'DevicesManager', 'ZonesManager', 'UsersManager',\n    'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $location, MachinesManager,\n        DevicesManager, ZonesManager, UsersManager, ManagerHelperService,\n        ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"zones\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.zone = null;\n        $scope.zoneManager = ZonesManager;\n        $scope.editSummary = false;\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.zone.name;\n        }\n\n        // Called when the zone has been loaded.\n        function zoneLoaded(zone) {\n            $scope.zone = zone;\n            $scope.loaded = true;\n            updateTitle();\n        }\n\n\n        // Called when the \"edit\" button is cliked in the zone summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the zone summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default zone.\n        $scope.isDefaultZone = function() {\n            if(angular.isObject($scope.zone)) {\n                return $scope.zone.id === 1;\n            }\n            return false;\n        };\n\n        // Called to check if the zone can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.zone)) {\n                return $scope.zone.id !== 0;\n            }\n            return false;\n        };\n\n        // Called when the delete zone button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete zone button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete space button is pressed.\n        $scope.deleteConfirmButton = function() {\n            ZonesManager.deleteItem($scope.zone).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/zones\");\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this zone set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeZone = ZonesManager.getActiveItem();\n            var requestedZone = parseInt($routeParams.zone_id, 10);\n            if(isNaN(requestedZone)) {\n                ErrorService.raiseError(\"Invalid zone identifier.\");\n            } else if(angular.isObject(activeZone) &&\n                activeZone.id === requestedZone) {\n                zoneLoaded(activeZone);\n            } else {\n                ZonesManager.setActiveItem(\n                    requestedZone).then(function(zone) {\n                        zoneLoaded(zone);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zones List Controller\n */\n\nangular.module('MAAS').controller('ZonesListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', 'MachinesManager',\n    'DevicesManager', 'ControllersManager', 'ZonesManager', 'ServicesManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function($scope, $rootScope, $routeParams, $filter, MachinesManager,\n        DevicesManager, ControllersManager, ZonesManager, ServicesManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Zones\";\n        $rootScope.page = \"zones\";\n\n        // Set initial values.\n        $scope.zoneManager = ZonesManager;\n        $scope.zones = ZonesManager.getItems();\n        $scope.currentpage = \"zones\";\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.loading = true;\n        $scope.action = {\n          open: false,\n          obj: {}\n        };\n\n        // Open add zone view.\n        $scope.addZone = function() {\n          $scope.action.open = true;\n        };\n\n        // Saving has completed.\n        $scope.closeZone = function() {\n          $scope.action.open = false;\n          $scope.action.obj = {};\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, UsersManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n        }\n    ]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Accordion directive.\n *\n * Provides an accordion effect to an element with maas-accordion class and\n * all child elements with maas-accordion-tab. Only one accordion tab is open\n * at a time, selecting another accordion will set \"active\" on that\n * accordion tab.\n */\n\n\nangular.module('MAAS').directive('maasAccordion', function() {\n    return {\n        restrict: \"C\",\n        link: function(scope, element, attrs) {\n\n            // Called when accordion tabs are clicked. Removes active on\n            // all other tabs except to the tab that was clicked.\n            var clickHandler = function(evt) {\n                var tab = evt.data.tab;\n                angular.element(tab).toggleClass(\"is-selected\");\n            };\n\n            // Listen for the click event on all tabs in the accordion.\n            var tabs = element.find(\".maas-accordion-tab\");\n            angular.forEach(tabs, function(tab) {\n                tab = angular.element(tab);\n                tab.on(\"click\", {\n                    tab: tab\n                }, clickHandler);\n            });\n\n            // Remove the handlers when the scope is destroyed.\n            scope.$on(\"$destroy\", function() {\n                angular.forEach(tabs, function(tab) {\n                    angular.element(tab).off(\"click\", clickHandler);\n                });\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Boot images directive.\n*/\n\nangular.module('MAAS').directive('maasBootImagesStatus', [\n    'BootResourcesManager',\n    function(BootResourcesManager) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            template: [\n                '<p class=\"page-header__status\" ',\n                    'data-ng-if=\"data.region_import_running\">',\n                    '<span class=\"u-text--loading\">',\n                        '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                        'Step 1/2: Region controller importing',\n                    '</span>',\n                '</p>',\n                '<p class=\"page-header__status\" ',\n                    'data-ng-if=\"!data.region_import_running && ',\n                    'data.rack_import_running\">',\n                    '<span class=\"u-text--loading\">',\n                        '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                        'Step 2/2: Rack controller(s) importing',\n                    '</span>',\n                '</p>'\n            ].join(''),\n            controller: function($scope, $rootScope, $element, $document) {\n                // This controller doesn't start the polling. The\n                // `maasBootImages` controller should be used on the page to\n                // start the polling. This just presents a nice status spinner\n                // when the polling is enabled.\n                $scope.data = BootResourcesManager.getData();\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasBootImages', [\n    '$filter', 'BootResourcesManager', 'UsersManager', 'ManagerHelperService',\n    function($filter, BootResourcesManager,\n        UsersManager, ManagerHelperService) {\n        return {\n            restrict: \"E\",\n            scope: {\n                design: \"=?\"\n            },\n            templateUrl: (\n                'static/partials/boot-images.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.saving = false;\n                $scope.stopping = false;\n                $scope.design = $scope.design || 'page';\n                $scope.bootResources = BootResourcesManager.getData();\n                $scope.ubuntuImages = [];\n                $scope.source = {\n                    isNew: false,\n                    tooMany: false,\n                    showingAdvanced: false,\n                    connecting: false,\n                    errorMessage: \"\",\n                    source_type: 'maas.io',\n                    url: '',\n                    keyring_filename: '',\n                    keyring_data: '',\n                    releases: [],\n                    arches: [],\n                    selections: {\n                        changed: false,\n                        releases: [],\n                        arches: []\n                    }\n                };\n                $scope.ubuntuCoreImages = [];\n                $scope.ubuntu_core = {\n                    changed: false,\n                    images: []\n                };\n                $scope.otherImages = [];\n                $scope.other = {\n                    changed: false,\n                    images: []\n                };\n                $scope.generatedImages = [];\n                $scope.customImages = [];\n                $scope.ubuntuDeleteId = null;\n                $scope.removingImage = null;\n\n                // Return true if the authenticated user is super user.\n                $scope.isSuperUser = function() {\n                    return UsersManager.isSuperUser();\n                };\n\n                // Return the overall title icon.\n                $scope.getTitleIcon = function() {\n                    if($scope.bootResources.resources.length === 0) {\n                        return 'p-icon--success-muted';\n                    } else {\n                        return 'p-icon--success';\n                    }\n                };\n\n                // Return true if the mirror path section should be shown.\n                $scope.showMirrorPath = function() {\n                    if($scope.source.source_type === 'custom') {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                };\n\n                // Return true if the advanced options are shown.\n                $scope.isShowingAdvancedOptions = function() {\n                    return $scope.source.showingAdvanced;\n                };\n\n                // Toggle showing the advanced options.\n                $scope.toggleAdvancedOptions = function() {\n                    $scope.source.showingAdvanced = (\n                        !$scope.source.showingAdvanced);\n                };\n\n                // Return true if both keyring options are set.\n                $scope.bothKeyringOptionsSet = function() {\n                    return (\n                        $scope.source.keyring_filename.length > 0 &&\n                        $scope.source.keyring_data.length > 0);\n                };\n\n                // Return true when the connect button for the mirror path\n                // should be shown.\n                $scope.showConnectButton = function() {\n                    return $scope.source.isNew;\n                };\n\n                // Called when the source radio chanaged.\n                $scope.sourceChanged = function() {\n                    var currentSources = $scope.bootResources.ubuntu.sources;\n                    if(currentSources.length === 0) {\n                        $scope.source.isNew = true;\n                    } else {\n                        var prevNew = $scope.source.isNew;\n                        $scope.source.isNew = (\n                            $scope.source.source_type !==\n                            currentSources[0].source_type);\n                        if($scope.source.source_type === 'custom') {\n                            $scope.source.isNew = $scope.source.isNew || (\n                                $scope.source.url !==\n                                currentSources[0].url\n                            );\n                        }\n                        if(prevNew && !$scope.source.isNew) {\n                            // No longer a new source set url and keyring to\n                            // original.\n                            $scope.source.url = currentSources[0].url;\n                            $scope.source.keyring_filename = (\n                                currentSources[0].keyring_filename);\n                            $scope.source.keyring_data = (\n                                currentSources[0].keyring_data);\n                        }\n                        $scope.source.releases = [];\n                        $scope.source.arches = [];\n                        $scope.source.selections = {\n                            changed: false,\n                            releases: [],\n                            arches: []\n                        };\n                    }\n                    $scope.updateSource();\n                    $scope.regenerateUbuntuImages();\n\n                    // When the source is new and its maas.io automatically\n                    // fetch the source information.\n                    if($scope.source.isNew &&\n                        $scope.source.source_type === 'maas.io') {\n                        $scope.connect();\n                    }\n                };\n\n                // Return true when the connect button should be disabled.\n                $scope.isConnectButtonDisabled = function() {\n                    if($scope.source.source_type === 'maas.io') {\n                        return false;\n                    } else {\n                        return ($scope.bothKeyringOptionsSet() ||\n                            $scope.source.url.length === 0 ||\n                            $scope.source.connecting);\n                    }\n                };\n\n                // Return the source parameters.\n                $scope.getSourceParams = function() {\n                    if($scope.source.source_type === 'maas.io') {\n                        return {\n                            source_type: 'maas.io'\n                        };\n                    } else {\n                        return {\n                            source_type: $scope.source.source_type,\n                            url: $scope.source.url,\n                            keyring_filename: $scope.source.keyring_filename,\n                            keyring_data: $scope.source.keyring_data\n                        };\n                    }\n                };\n\n                // Select the default images that should be selected. Current\n                // defaults are '16.04 LTS' and 'amd64'.\n                $scope.selectDefaults = function() {\n                    angular.forEach($scope.source.releases, function(release) {\n                        if(release.name === \"xenial\") {\n                            $scope.source.selections.releases.push(release);\n                        }\n                    });\n                    angular.forEach($scope.source.arches, function(arch) {\n                        if(arch.name === \"amd64\") {\n                            $scope.source.selections.arches.push(arch);\n                        }\n                    });\n                };\n\n                // Connected to the simplestreams endpoint. This only gets the\n                // information from the endpoint it does not save it into the\n                // database.\n                $scope.connect = function() {\n                    if($scope.isConnectButtonDisabled()) {\n                        return;\n                    }\n\n                    var source = $scope.getSourceParams();\n                    $scope.source.connecting = true;\n                    $scope.source.releases = [];\n                    $scope.source.arches = [];\n                    $scope.source.selections.changed = true;\n                    $scope.source.selections.releases = [];\n                    $scope.source.selections.arches = [];\n                    $scope.regenerateUbuntuImages();\n                    BootResourcesManager.fetch(source).then(function(data) {\n                        $scope.source.connecting = false;\n                        data = angular.fromJson(data);\n                        $scope.source.releases = data.releases;\n                        $scope.source.arches = data.arches;\n                        $scope.selectDefaults();\n                        $scope.regenerateUbuntuImages();\n                    }, function(error) {\n                        $scope.source.connecting = false;\n                        $scope.source.errorMessage = error;\n                    });\n                };\n\n                // Return true if the connect block should be shown.\n                $scope.showConnectBlock = function() {\n                    return $scope.source.tooMany || (\n                        $scope.source.isNew && !$scope.showSelections());\n                };\n\n                // Return true if the release and architecture selection\n                // should be shown.\n                $scope.showSelections = function() {\n                    return (\n                        $scope.source.releases.length > 0 &&\n                        $scope.source.arches.length > 0);\n                };\n\n                // Return the Ubuntu LTS releases.\n                $scope.getUbuntuLTSReleases = function() {\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    if($scope.source.isNew) {\n                        releases = $scope.source.releases;\n                    }\n                    var filtered = [];\n                    angular.forEach(releases, function(release) {\n                        if(!release.deleted &&\n                            release.title.indexOf('LTS') !== -1) {\n                            filtered.push(release);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return the Ubuntu non-LTS releases.\n                $scope.getUbuntuNonLTSReleases = function() {\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    if($scope.source.isNew) {\n                        releases = $scope.source.releases;\n                    }\n                    var filtered = [];\n                    angular.forEach(releases, function(release) {\n                        if(!release.deleted &&\n                            release.title.indexOf('LTS') === -1) {\n                            filtered.push(release);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return the available architectures.\n                $scope.getArchitectures = function() {\n                    var arches = $scope.bootResources.ubuntu.arches;\n                    if($scope.source.isNew) {\n                        arches = $scope.source.arches;\n                    }\n                    var filtered = [];\n                    angular.forEach(arches, function(arch) {\n                        if(!arch.deleted) {\n                            filtered.push(arch);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return true if the source has this selected.\n                $scope.isSelected = function(type, obj) {\n                    return $scope.source.selections[type].indexOf(obj) >= 0;\n                };\n\n                // Toggle the selection of the release or the architecture.\n                $scope.toggleSelection = function(type, obj) {\n                    var idx = $scope.source.selections[type].indexOf(obj);\n                    if(idx === -1) {\n                        $scope.source.selections[type].push(obj);\n                    } else {\n                        $scope.source.selections[type].splice(idx, 1);\n                    }\n                    $scope.source.selections.changed = true;\n                    $scope.regenerateUbuntuImages();\n                };\n\n                // Return true if the images table should be shown.\n                $scope.showImagesTable = function() {\n                    if($scope.ubuntuImages.length > 0) {\n                        return true;\n                    } else {\n                        // Show the images table source has\n                        // releases and architectures.\n                        return (\n                            $scope.source.arches.length > 0 &&\n                            $scope.source.releases.length > 0);\n                    }\n                };\n\n                // Regenerates the Ubuntu images list for the directive.\n                $scope.regenerateUbuntuImages = function() {\n                    var getResource = function() { return null; };\n                    var resources = $scope.bootResources.resources.filter(\n                        function(resource) {\n                            var name_split = resource.name.split('/');\n                            var resource_os = name_split[0];\n                            return (\n                                resource.rtype === 0 &&\n                                resource_os === 'ubuntu');\n                        });\n                    if(!$scope.source.isNew) {\n                        getResource = function(release, arch) {\n                            var i;\n                            for(i = 0; i < resources.length; i++) {\n                                // Only care about Ubuntu images.\n                                var resource = (resources[i]);\n                                var name_split = resource.name.split('/');\n                                var resource_release = name_split[1];\n                                if(resource_release === release &&\n                                    resource.arch === arch) {\n                                    resources.splice(i, 1);\n                                    return resource;\n                                }\n                            }\n                            return null;\n                        };\n                    }\n\n                    // Create the images based on the selections.\n                    $scope.ubuntuImages.length = 0;\n                    angular.forEach($scope.source.selections.releases,\n                        function(release) {\n                            angular.forEach($scope.source.selections.arches,\n                                function(arch) {\n                                    var image = {\n                                        icon: 'p-icon--status-queued',\n                                        title: release.title,\n                                        arch: arch.title,\n                                        size: '-',\n                                        status: 'Selected for download',\n                                        beingDeleted: false,\n                                        name: release.name\n                                    };\n                                    var resource = getResource(\n                                        release.name, arch.name);\n                                    if(angular.isObject(resource)) {\n                                        image.resourceId = resource.id;\n                                        image.icon = (\n                                            'p-icon--status-' + resource.icon);\n                                        image.size = resource.size;\n                                        image.status = resource.status;\n                                        if(resource.downloading) {\n                                            image.icon += ' u-animation--pulse';\n                                        }\n                                    }\n                                    $scope.ubuntuImages.push(image);\n                                });\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    if(!$scope.source.isNew) {\n                        angular.forEach(resources, function(resource) {\n                            var name_split = resource.name.split('/');\n                            var image = {\n                                icon: 'p-icon--status-failed',\n                                title: resource.title,\n                                arch: resource.arch,\n                                size: resource.size,\n                                status: 'Will be deleted',\n                                beingDeleted: true,\n                                name: name_split[1]\n                            };\n                            $scope.ubuntuImages.push(image);\n                        });\n                    }\n                };\n\n                // Regenerates the Ubuntu Core images list for the directive.\n                $scope.regenerateUbuntuCoreImages = function() {\n                    var isUbuntuCore = function(resource) {\n                        var name_split = resource.name.split('/');\n                        var resource_os = name_split[0];\n                        return (\n                            resource.rtype === 0 &&\n                            resource_os === 'ubuntu-core');\n                    };\n                    var resources = (\n                        $scope.bootResources.resources.filter(isUbuntuCore));\n                    var getResource = function(release, arch) {\n                        var i;\n                        for(i = 0; i < resources.length; i++) {\n                            // Only care about other images. Removing custom,\n                            // bootloaders, and Ubuntu images.\n                            var resource = (resources[i]);\n                            var name_split = resource.name.split('/');\n                            var resource_release = name_split[1];\n                            if(resource_release === release &&\n                                resource.arch === arch) {\n                                resources.splice(i, 1);\n                                return resource;\n                            }\n                        }\n                        return null;\n                    };\n\n                    // Create the images based on the selections.\n                    $scope.ubuntuCoreImages.length = 0;\n                    angular.forEach($scope.ubuntu_core.images,\n                        function(ubuntuCoreImage) {\n                            if(ubuntuCoreImage.checked) {\n                                var name_split = ubuntuCoreImage.name.split(\n                                    '/');\n                                var image = {\n                                    icon: 'p-icon--status-queued',\n                                    title: ubuntuCoreImage.title,\n                                    arch: name_split[1],\n                                    size: '-',\n                                    status: 'Selected for download',\n                                    beingDeleted: false\n                                };\n                                var resource = getResource(\n                                    name_split[3], name_split[1]);\n                                if(angular.isObject(resource)) {\n                                    image.icon = (\n                                        'p-icon--status-' + resource.icon);\n                                    image.size = resource.size;\n                                    image.status = resource.status;\n                                    if(resource.downloading) {\n                                        image.icon += ' u-animation--pulse';\n                                    }\n                                }\n                                $scope.ubuntuCoreImages.push(image);\n                            }\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    angular.forEach(resources, function(resource) {\n                        var image = {\n                            icon: 'p-icon--status-failed',\n                            title: resource.title,\n                            arch: resource.arch,\n                            size: resource.size,\n                            status: 'Will be deleted',\n                            beingDeleted: true\n                        };\n                        $scope.ubuntuCoreImages.push(image);\n                    });\n                };\n\n                // Regenerates the other images list for the directive.\n                $scope.regenerateOtherImages = function() {\n                    var isOther = function(resource) {\n                        var name_split = resource.name.split('/');\n                        var resource_os = name_split[0];\n                        return (\n                            resource.rtype === 0 &&\n                            resource_os !== 'ubuntu' &&\n                            resource_os !== 'ubuntu-core' &&\n                            resource_os !== 'custom');\n                    };\n                    var resources = (\n                        $scope.bootResources.resources.filter(isOther));\n                    var getResource = function(release, arch) {\n                        var i;\n                        for(i = 0; i < resources.length; i++) {\n                            // Only care about other images. Removing custom,\n                            // bootloaders, and Ubuntu images.\n                            var resource = (resources[i]);\n                            var name_split = resource.name.split('/');\n                            var resource_release = name_split[1];\n                            if(resource_release === release &&\n                                resource.arch === arch) {\n                                resources.splice(i, 1);\n                                return resource;\n                            }\n                        }\n                        return null;\n                    };\n\n                    // Create the images based on the selections.\n                    $scope.otherImages.length = 0;\n                    angular.forEach($scope.other.images,\n                        function(otherImage) {\n                            if(otherImage.checked) {\n                                var name_split = otherImage.name.split('/');\n                                var image = {\n                                    icon: 'p-icon--status-queued',\n                                    title: otherImage.title,\n                                    arch: name_split[1],\n                                    size: '-',\n                                    status: 'Selected for download',\n                                    beingDeleted: false\n                                };\n                                var resource = getResource(\n                                    name_split[3], name_split[1]);\n                                if(angular.isObject(resource)) {\n                                    image.icon = (\n                                        'p-icon--status-' + resource.icon);\n                                    image.size = resource.size;\n                                    image.status = resource.status;\n                                    if(resource.downloading) {\n                                        image.icon += ' u-animation--pulse';\n                                    }\n                                }\n                                $scope.otherImages.push(image);\n                            }\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    angular.forEach(resources, function(resource) {\n                        var image = {\n                            icon: 'p-icon--status-failed',\n                            title: resource.title,\n                            arch: resource.arch,\n                            size: resource.size,\n                            status: 'Will be deleted',\n                            beingDeleted: true\n                        };\n                        $scope.otherImages.push(image);\n                    });\n                };\n\n                // Helper for basic image generation.\n                $scope._regenerateImages = function(rtype, images) {\n                    // Create the generated images list.\n                    images.length = 0;\n                    angular.forEach($scope.bootResources.resources,\n                        function(resource) {\n                            if(resource.rtype === rtype) {\n                                var image = {\n                                    icon: 'p-icon--status-' + resource.icon,\n                                    title: resource.title,\n                                    arch: resource.arch,\n                                    image_id: resource.id,\n                                    size: resource.size,\n                                    status: resource.status\n                                };\n                                if(resource.downloading) {\n                                    image.icon += ' u-animation--pulse';\n                                }\n                                images.push(image);\n                            }\n                        });\n                };\n\n                // Regenerates the generated images list for the directive.\n                $scope.regenerateGeneratedImages = function() {\n                    $scope._regenerateImages(1, $scope.generatedImages);\n                };\n\n                // Regenerates the custom images list for the directive.\n                $scope.regenerateCustomImages = function() {\n                    $scope._regenerateImages(2, $scope.customImages);\n                };\n\n                // Returns true if at least one LTS is selected.\n                $scope.ltsIsSelected = function() {\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        // Must have LTS in the title and not being deleted.\n                        if(!$scope.ubuntuImages[i].beingDeleted &&\n                            $scope.ubuntuImages[i].title.indexOf('LTS') >= 0) {\n                            // Must be greater than Ubuntu series 14.\n                            var series = parseInt(\n                                $scope.ubuntuImages[i].title.split('.')[0], 10);\n                            if(series >= 14) {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                };\n\n                // Returns true if the commission series is selected\n                $scope.commissioningSeriesSelected = function() {\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if(!$scope.ubuntuImages[i].beingDeleted &&\n                           $scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n\n                // Return if we are asking about deleting this image.\n                $scope.isShowingDeleteConfirm = function(image) {\n                    return image === $scope.removingImage;\n                };\n\n                // Mark the image for deletion.\n                $scope.quickRemove = function(image) {\n                    $scope.removingImage = image;\n                };\n\n                // Cancel image deletion.\n                $scope.cancelRemove = function() {\n                    $scope.removingImage = null;\n                };\n\n                // Mark the image for deletion.\n                $scope.confirmRemove = function(image) {\n                    if(image === $scope.removingImage) {\n                        BootResourcesManager.deleteImage(\n                            {id: image.image_id});\n                    }\n                    $scope.cancelRemove();\n                };\n\n                // Return true if the stop import button should be shown.\n                $scope.showStopImportButton = function() {\n                    return $scope.bootResources.region_import_running;\n                };\n\n                // Return true if should show save selection button, this\n                // doesn't mean it can actually be clicked.\n                $scope.showSaveSelection = function() {\n                    return $scope.showImagesTable();\n                };\n\n                // Return true if can save the current selection.\n                $scope.canSaveSelection = function() {\n                    var commissioning_series_being_deleted = false;\n                    var commissioning_series_arches = 0;\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if($scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series) {\n                            commissioning_series_arches++;\n                        }\n                    }\n                    // Only prevent the current commissioning series from\n                    // being deleted if it isn't the commissioning series isn't\n                    // available on another architecture.. If the current\n                    // commissioning series isn't currently selected another\n                    // LTS may be choosen, downloaded, and configured as the\n                    // commissioning series.\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if($scope.ubuntuImages[i].beingDeleted &&\n                           $scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series &&\n                           commissioning_series_arches === 1) {\n                            commissioning_series_being_deleted = true;\n                            break;\n                        }\n                    }\n                    return (\n                        !commissioning_series_being_deleted &&\n                        !$scope.saving &&\n                        !$scope.stopping &&\n                        $scope.ltsIsSelected());\n                };\n\n                // Return the text for the save selection button.\n                $scope.getSaveSelectionText = function() {\n                    if($scope.saving) {\n                        return \"Saving...\";\n                    } else {\n                        return \"Update selection\";\n                    }\n                };\n\n                // Return true if can stop current import.\n                $scope.canStopImport = function() {\n                    return !$scope.saving && !$scope.stopping;\n                };\n\n                // Return the text for the stop import button.\n                $scope.getStopImportText = function() {\n                    if($scope.stopping) {\n                        return \"Stopping...\";\n                    } else {\n                        return \"Stop import\";\n                    }\n                };\n\n                // Called to stop the import.\n                $scope.stopImport = function() {\n                    if(!$scope.canStopImport()) {\n                        return;\n                    }\n\n                    $scope.stopping = true;\n                    BootResourcesManager.stopImport().then(function() {\n                        $scope.stopping = false;\n                    });\n                };\n\n                // Save the selections into boot selections.\n                $scope.saveSelection = function() {\n                    if(!$scope.canSaveSelection()) {\n                        return;\n                    }\n\n                    var params = $scope.getSourceParams();\n                    params.releases = (\n                        $scope.source.selections.releases.map(function(obj) {\n                            return obj.name;\n                        }));\n                    params.arches = (\n                        $scope.source.selections.arches.map(function(obj) {\n                            return obj.name;\n                        }));\n                    $scope.saving = true;\n                    BootResourcesManager.saveUbuntu(params).then(function() {\n                        $scope.saving = false;\n                        $scope.source.isNew = false;\n                        $scope.source.selections.changed = false;\n                        $scope.updateSource();\n                    });\n                };\n\n                // Re-create an array with the new objects using the old\n                // selected array.\n                $scope.getNewSelections = function(newObjs, oldSelections) {\n                    var newSelections = [];\n                    angular.forEach(newObjs, function(obj) {\n                        angular.forEach(oldSelections, function(selection) {\n                            if(obj.name === selection.name) {\n                                newSelections.push(obj);\n                            }\n                        });\n                    });\n                    return newSelections;\n                };\n\n                // Update the source information.\n                $scope.updateSource = function() {\n                    // Do not update if the source is new.\n                    if($scope.source.isNew) {\n                        return;\n                    }\n\n                    var source_len = $scope.bootResources.ubuntu.sources.length;\n                    if(source_len === 0) {\n                        $scope.source.isNew = true;\n                        $scope.source.source_type = 'custom';\n                        $scope.source.errorMessage = (\n                            \"Currently no source exists.\");\n                    } else if(source_len === 1) {\n                        var source = $scope.bootResources.ubuntu.sources[0];\n                        $scope.source.source_type = source.source_type;\n                        if(source.source_type === \"maas.io\") {\n                            $scope.source.url = \"\";\n                            $scope.source.keyring_filename = \"\";\n                            $scope.source.keyring_data = \"\";\n                        } else {\n                            $scope.source.url = source.url;\n                            $scope.source.keyring_filename = (\n                                source.keyring_filename);\n                            $scope.source.keyring_data = source.keyring_data;\n                        }\n                        $scope.source.releases = (\n                            $scope.bootResources.ubuntu.releases);\n                        $scope.source.arches = (\n                            $scope.bootResources.ubuntu.arches);\n                        if(!$scope.source.selections.changed) {\n                            // User didn't make a change update to the\n                            // current selections server side.\n                            $scope.source.selections.releases = (\n                                $scope.source.releases.filter(function(obj) {\n                                    return obj.checked;\n                                }));\n                            $scope.source.selections.arches = (\n                                $scope.source.arches.filter(function(obj) {\n                                return obj.checked;\n                            }));\n                        } else {\n                            // Update the objects to be the new objects, with\n                            // the same selections.\n                            $scope.source.selections.releases = (\n                                $scope.getNewSelections(\n                                    $scope.source.releases,\n                                    $scope.source.selections.releases));\n                            $scope.source.selections.arches = (\n                                $scope.getNewSelections(\n                                    $scope.source.arches,\n                                    $scope.source.selections.arches));\n                        }\n                        $scope.regenerateUbuntuImages();\n                    } else {\n                        // Having more than one source prevents modification\n                        // of the sources.\n                        $scope.source.tooMany = true;\n                        $scope.source.releases = (\n                            $scope.bootResources.ubuntu.releases);\n                        $scope.source.arches = (\n                            $scope.bootResources.ubuntu.arches);\n                        $scope.source.selections.releases = (\n                            $scope.source.releases.filter(function(obj) {\n                                return obj.checked;\n                            }));\n                        $scope.source.selections.arches = (\n                            $scope.source.arches.filter(function(obj) {\n                            return obj.checked;\n                        }));\n                        $scope.source.errorMessage = (\n                            \"More than one image source exists. UI does not \" +\n                            \"support modification of sources when more than \" +\n                            \"one has been defined. Used the API to adjust \" +\n                            \"your sources.\");\n                        $scope.regenerateUbuntuImages();\n                    }\n                };\n\n                // Toggle the selection of Ubuntu Core images.\n                $scope.toggleUbuntuCoreSelection = function(image) {\n                    $scope.ubuntu_core.changed = true;\n                    image.checked = !image.checked;\n                    $scope.regenerateUbuntuCoreImages();\n                };\n\n                // Save the Ubuntu Core image selections into boot selections.\n                $scope.saveUbuntuCoreSelection = function() {\n                    var params = {\n                        images: $scope.ubuntu_core.images.filter(function(\n                                image) {\n                            return image.checked;\n                        }).map(function(image) {\n                            return image.name;\n                        })\n                    };\n                    $scope.saving = true;\n                    BootResourcesManager.saveUbuntuCore(params).then(\n                            function() {\n                        $scope.saving = false;\n                    });\n                };\n\n                // Toggle the selection of other images.\n                $scope.toggleOtherSelection = function(image) {\n                    $scope.other.changed = true;\n                    image.checked = !image.checked;\n                    $scope.regenerateOtherImages();\n                };\n\n                // Save the other image selections into boot selections.\n                $scope.saveOtherSelection = function() {\n                    var params = {\n                        images: $scope.other.images.filter(function(image) {\n                            return image.checked;\n                        }).map(function(image) {\n                            return image.name;\n                        })\n                    };\n                    $scope.saving = true;\n                    BootResourcesManager.saveOther(params).then(function() {\n                        $scope.saving = false;\n                    });\n                };\n\n                // Return True if the Ubuntu image can be removed.\n                $scope.canBeRemoved = function(image) {\n                    // Image must have a resourceId to be able to be removed.\n                    if(!angular.isNumber(image.resourceId)) {\n                        return false;\n                    }\n\n                    // If the release or architecture is set to deleted\n                    // then this image can be deleted.\n                    var i;\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    var arches = $scope.bootResources.ubuntu.arches;\n                    for(i = 0; i < releases.length; i++) {\n                        var release = releases[i];\n                        if(release.deleted && image.title === release.title) {\n                            return true;\n                        }\n                    }\n                    for(i = 0; i < arches.length; i++) {\n                        var arch = arches[i];\n                        if(arch.deleted && image.arch === arch.name) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n\n                // Deletes the give image.\n                $scope.deleteImage = function(image) {\n                    if(angular.isObject(image)) {\n                        $scope.ubuntuDeleteId = image.resourceId;\n                    } else {\n                        $scope.ubuntuDeleteId = null;\n                    }\n                };\n\n                // Deletes the give image.\n                $scope.confirmDeleteImage = function() {\n                    // Delete the image by its resourceId.\n                    BootResourcesManager.deleteImage(\n                        {id: $scope.ubuntuDeleteId});\n                    $scope.ubuntuDeleteId = null;\n                };\n\n                // Start polling now that the directive is viewable and ensure\n                // the UserManager is loaded.\n                var ready = 2;\n                BootResourcesManager.startPolling().then(function() {\n                    ready -= 1;\n                    if(ready === 0) {\n                        $scope.loading = false;\n                    }\n                });\n                ManagerHelperService.loadManager(\n                    $scope, UsersManager).then(function() {\n                    ready -= 1;\n                    if(ready === 0) {\n                        $scope.loading = false;\n                    }\n                });\n\n                // Update the source information with the ubuntu source\n                // information changes.\n                $scope.$watch(\"bootResources.ubuntu\", function() {\n                    if(!angular.isObject($scope.bootResources.ubuntu)) {\n                        return;\n                    }\n                    $scope.updateSource();\n                });\n\n                // Regenerate the images array when the resources change.\n                $scope.$watch(\"bootResources.resources\", function() {\n                    if(!angular.isArray($scope.bootResources.resources)) {\n                        return;\n                    }\n                    $scope.regenerateUbuntuImages();\n                    $scope.regenerateUbuntuCoreImages();\n                    $scope.regenerateOtherImages();\n                    $scope.regenerateGeneratedImages();\n                    $scope.regenerateCustomImages();\n                });\n\n                $scope.$watch(\"bootResources.ubuntu_core_images\", function() {\n                    var images = $scope.bootResources.ubuntu_core_images;\n                    if(!angular.isArray(images)) {\n                        return;\n                    }\n                    if(!$scope.ubuntu_core.changed) {\n                        $scope.ubuntu_core.images = images;\n                    }\n                    $scope.regenerateUbuntuCoreImages();\n                });\n\n                $scope.$watch(\"bootResources.other_images\", function() {\n                    if(!angular.isArray($scope.bootResources.other_images)) {\n                        return;\n                    }\n                    if(!$scope.other.changed) {\n                        $scope.other.images = $scope.bootResources.other_images;\n                    }\n                    $scope.regenerateOtherImages();\n                });\n\n                // Stop polling when the directive is destroyed.\n                $scope.$on('$destroy', function() {\n                    BootResourcesManager.stopPolling();\n                });\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Call to action directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the cta.html into the template cache.\n    $templateCache.put('directive/templates/cta.html', [\n      '<div class=\"p-contextual-menu\">',\n        '<button ',\n          'class=\"p-button p-contextual-menu__toggle\" ',\n          'aria-controls=\"#cta-menu\" ',\n          'aria-expanded=\"false\" ',\n          'aria-haspopup=\"true\" ',\n          'data-ng-click=\"shown=!shown\"',\n        '>',\n          '{$ getTitle() $}',\n          '<i class=\"p-icon--chevron on-right\"></i>',\n        '</button>',\n        '<div class=\"p-contextual-menu__dropdown\" ',\n          'id=\"cta-menu\" ',\n          'aria-hidden=\"false\" ',\n          'aria-label=\"submenu\"',\n          'data-ng-show=\"shown\"',\n        '>',\n          '<button ',\n            'class=\"',\n              'p-button u-no-margin--left p-contextual-menu__link',\n            '\" ',\n            'data-ng-repeat=\"select in maasCta\" ',\n            'data-ng-click=\"selectItem(select)\">',\n              '{$ getOptionTitle(select) $}',\n          '</button>',\n        '</div>',\n      '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasCta', function() {\n    return {\n        restrict: \"A\",\n        replace: true,\n        require: \"ngModel\",\n        scope: {\n            maasCta: '=',\n            ngModel: '='\n        },\n        templateUrl: 'directive/templates/cta.html',\n        link : function(scope, element, attrs, ngModelCtrl) {\n            // Use the link function to grab the ngModel controller.\n\n            // Title of the button when not active.\n            var defaultTitle = \"Take action\";\n            if(angular.isString(attrs.defaultTitle) &&\n                attrs.defaultTitle !== \"\") {\n                defaultTitle = attrs.defaultTitle;\n            }\n\n            // When an item is selected in the list set the title, hide the\n            // dropdown, and set the value to the given model.\n            scope.selectItem = function(select) {\n                scope.shown = false;\n                ngModelCtrl.$setViewValue(select);\n            };\n\n            // Return the title of the dropdown button.\n            scope.getTitle = function() {\n                if(angular.isObject(ngModelCtrl.$modelValue)) {\n                    option = ngModelCtrl.$modelValue;\n                    scope.secondary = true;\n                    // Some designs have the requirement that the title of\n                    // the menu option change if it is selected.\n                    if(angular.isString(option.selectedTitle)) {\n                        return option.selectedTitle;\n                    }\n                    return option.title;\n                } else {\n                    scope.secondary = false;\n                    return defaultTitle;\n                }\n            };\n\n            // Called to get the title for each option. (Sometimes the title\n            // of an option is different when it is selected.)\n            scope.getOptionTitle = function(option) {\n                if(!scope.secondary) {\n                    return option.title;\n                } else {\n                    if(angular.isString(option.selectedTitle)) {\n                        return option.selectedTitle;\n                    } else {\n                        return option.title;\n                    }\n                }\n            };\n\n            // When the model changes in the above selectItem function this\n            // function will be called causing the ngChange directive to be\n            // fired.\n            ngModelCtrl.$viewChangeListeners.push(function() {\n                scope.$eval(attrs.ngChange);\n            });\n        },\n        controller: function($scope, $rootScope, $element, $document) {\n            // Default dropdown is hidden.\n            $scope.shown = false;\n            $scope.secondary = false;\n\n            // Don't propagate the element click. This stops the click event\n            // from firing on the body element.\n            $element.bind('click', function (evt) {\n                evt.stopPropagation();\n            });\n\n            // If a click makes it to the body element then hide the dropdown.\n            $document.find('body').bind('click', function () {\n                // Use $apply because this function will be called outside\n                // of the digest cycle.\n                $rootScope.$apply($scope.shown = false);\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller status icon. Used in the controllers listing on the nodes page.\n */\n\nangular.module('MAAS').directive('maasCardLoader', ['$compile',\n  function($compile) {\n      return {\n          restrict: \"A\",\n          link: function(scope, element, attrs) {\n            var templateUrl = (\n                'static/partials/cards/' + attrs.maasCardLoader + (\n                  '.html?v=' + MAAS_config.files_version));\n            var include = (\n              '<ng-include src=\"\\'' + templateUrl + '\\'\"></ng-include>');\n            element.html(include);\n            $compile(element.contents())(scope);\n          }\n      };\n  }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Accordion directive.\n *\n * Provides an accordion effect to an element with maas-accordion class and\n * all child elements with maas-accordion-tab. Only one accordion tab is open\n * at a time, selecting another accordion will set \"active\" on that\n * accordion tab.\n */\n\n\n angular.module('MAAS').directive('maasCodeLines', function () {\n     return {\n         restrict: \"A\",\n         scope: {\n             maasCodeLines: '&'\n         },\n         link: function(scope, element, attributes) {\n\n             function insertContent() {\n\n                 // Empty the element contents and include again, this asures\n                 // its the most up-to-date content\n                 element.empty();\n                 element.text(scope.maasCodeLines);\n\n                 // Count the line contents\n                 var lines = element.html().split('\\n'),\n                     newLine = '',\n                     insert = \"<code>\";\n\n                 // Each line is to be wrapped by a span which is style & given\n                 // its appropriate line number\n                 $.each(lines, function() {\n                   insert += newLine + '<span class=\"code-line\">' +\n                   this + '</span>';\n                   newLine = '\\n';\n                 });\n                 insert += \"</code>\";\n\n                 // Re-insert the contents\n                 element.html(insert);\n             }\n\n             // Watch the contents of the element so when it changes to\n             // re-add the line numbers.\n             scope.$watch(scope.maasCodeLines, insertContent);\n         }\n     };\n });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Content editable directive.\n *\n * HTML provides a feature that allows any element to be editable with\n * contenteditable attribute. This directive uses that attribute to link\n * the contents of that element to a model. This directive is not prefixed\n * with maas so Angular can identify all elements with this attribute.\n */\n\n\nangular.module('MAAS').directive('contenteditable', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            ngDisabled: \"&\",\n            maasEditing: \"&\"\n        },\n        link: function(scope, element, attrs, ngModel) {\n\n            // If the element is disabled then make the element lose focus.\n            var focusHandler = function() {\n                if(scope.ngDisabled()) {\n                    element.blur();\n                } else {\n                    // Didn't lose focus, so its now editing.\n                    scope.$apply(scope.maasEditing());\n                }\n            };\n            element.bind(\"focus\", focusHandler);\n\n            // Update the value of the model when events occur that\n            // can change the value of the model.\n            var changeHandler = function() {\n                scope.$apply(ngModel.$setViewValue(element.text()));\n            };\n            element.bind(\"blur keyup change\", changeHandler);\n\n            // When the model changes set the html content for that element.\n            ngModel.$render = function() {\n                element.html(ngModel.$viewValue || \"\");\n            };\n\n            // When the model changes this function will be called causing the\n            // ngChange directive to be fired.\n            ngModel.$viewChangeListeners.push(function() {\n                scope.$eval(attrs.ngChange);\n            });\n\n            // Remove the event handler on the element when the scope is\n            // destroyed.\n            scope.$on(\"$destroy\", function() {\n                element.unbind(\"blur keyup change\", changeHandler);\n                element.unbind(\"focus\", focusHandler);\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller image status directive.\n *\n * Shows the image status for a controller.\n */\n\n angular.module('MAAS').service('ControllerImageStatusService',\n    ['$timeout', '$interval', 'ControllersManager', function(\n        $timeout, $interval, ControllersManager) {\n     var self = this;\n\n     // How often to check the sync status of a controller in seconds.\n     var CHECK_INTERVAL = 30;\n\n     // List of controllers that need to have the image status updated.\n     this.controllers = [];\n\n     // List of current controller statues.\n     this.statuses = {};\n\n     // Interval function that is called to update the statuses.\n     this.updateStatuses = function() {\n         var controllerIds = [];\n         angular.forEach(self.controllers, function(system_id) {\n             controllerIds.push({system_id: system_id});\n         });\n\n         // Check the image states.\n         ControllersManager.checkImageStates(controllerIds).then(\n                 function(results) {\n             angular.forEach(controllerIds, function(controller) {\n                 var status = results[controller.system_id];\n                 if(status) {\n                     self.statuses[controller.system_id] = status;\n                 } else {\n                     self.statuses[controller.system_id] = \"Unknown\";\n                 }\n             });\n         });\n     };\n\n     // Register this controller system_id.\n     this.register = function(system_id) {\n         var known = self.controllers.indexOf(system_id) >= 0;\n         if(!known) {\n             self.controllers.push(system_id);\n         }\n\n         // When the interval is already running and its a new controller then\n         // the interval needs to be reset. When it already exists it doesn't\n         // need to be reset.\n         if(angular.isDefined(self.runningInterval)) {\n             if(known) {\n                 return;\n             } else {\n                 $interval.cancel(self.runningInterval);\n                 self.runningInterval = undefined;\n             }\n         }\n\n         // If its not running and the timeout has been started we re-create\n         // the timeout. This delays the start of the interval until the\n         // all directives on the page have been fully loaded.\n         if(angular.isDefined(self.startTimeout)) {\n             $timeout.cancel(self.startTimeout);\n         }\n         self.startTimeout = $timeout(function() {\n             self.startTimeout = undefined;\n             self.runningInterval = $interval(function() {\n                 self.updateStatuses();\n             }, CHECK_INTERVAL * 1000);\n             self.updateStatuses();\n         }, 100);\n     };\n\n     // Unregister the controller.\n     this.unregister = function(system_id) {\n        var idx = self.controllers.indexOf(system_id);\n        if(idx > -1) {\n            self.controllers.splice(idx, 1);\n        }\n\n        // If no controllers are left stop all intervals and timeouts.\n        if(self.controllers.length === 0) {\n            if(angular.isDefined(self.startTimeout)) {\n                $timeout.cancel(self.startTimeout);\n                self.startTimeout = undefined;\n            }\n            if(angular.isDefined(self.runningInterval)) {\n                $interval.cancel(self.runningInterval);\n                self.runningInterval = undefined;\n            }\n        }\n     };\n\n     // Return true if the spinner should be shown.\n     this.showSpinner = function(system_id) {\n         var status = self.statuses[system_id];\n         if(angular.isString(status) && status !== \"Syncing\") {\n             return false;\n         } else {\n             return true;\n         }\n     };\n\n     // Get the image status.\n     this.getImageStatus = function(system_id) {\n         var status = self.statuses[system_id];\n         if(angular.isString(status)) {\n             return status;\n         } else {\n             return \"Asking for status...\";\n         }\n     };\n}]);\n\nangular.module('MAAS').directive('maasControllerImageStatus',\n    ['ControllerImageStatusService', function(\n        ControllerImageStatusService) {\n\n    return {\n        restrict: \"E\",\n        scope: {\n            systemId: \"=\"\n        },\n        template: [\n            '<i class=\"p-icon--loading u-animation--spin\"',\n                'data-ng-if=\"showSpinner()\"></i> ',\n            '{$ getImageStatus() $}'].join(''),\n        link: function(scope, element, attrs) {\n            // Don't register until the systemId is set.\n            var unwatch, registered = false;\n            unwatch = scope.$watch(\"systemId\", function() {\n                if(angular.isDefined(scope.systemId) && !registered) {\n                    ControllerImageStatusService.register(scope.systemId);\n                    registered = true;\n                    unwatch();\n                }\n            });\n\n            scope.showSpinner = function() {\n                return ControllerImageStatusService.showSpinner(\n                    scope.systemId);\n            };\n            scope.getImageStatus = function() {\n                return ControllerImageStatusService.getImageStatus(\n                    scope.systemId);\n            };\n\n            // Unregister when destroyed.\n            scope.$on(\"$destroy\", function() {\n                if(registered) {\n                    ControllerImageStatusService.unregister(scope.systemId);\n                }\n            });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller status icon. Used in the controllers listing on the nodes page.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the controller-status.html into the template cache.\n    $templateCache.put('directive/templates/controller-status.html', [\n        '<span>',\n          '<span class=\"p-icon--{$ serviceClass $}\" data-ng-if=\"!textOnly\">',\n          '</span>',\n          '<span data-ng-if=\"textOnly\" data-ng-bind=\"serviceText\"></span>',\n        '</span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasControllerStatus', [\n    \"ControllersManager\", \"ServicesManager\",\n    function(ControllersManager, ServicesManager) {\n        return {\n            restrict: \"A\",\n            scope: {\n                controller: '=maasControllerStatus',\n                textOnly: '=?maasTextOnly'\n            },\n            templateUrl: 'directive/templates/controller-status.html',\n            controller: function($scope) {\n\n                $scope.serviceClass = \"unknown\";\n                $scope.services = ServicesManager.getItems();\n                $scope.serviceText = \"\";\n                if($scope.textOnly) {\n                  $scope.textOnly = true;\n                } else {\n                  $scope.textOnly = false;\n                }\n\n                // Return the status class for the service.\n                function getClass(service) {\n                    if(service.status === \"running\") {\n                        return \"success\";\n                    } else if (service.status === \"degraded\") {\n                        return \"warning\";\n                    } else if (service.status === \"dead\") {\n                        return \"error\";\n                    } else {\n                        return \"unknown\";\n                    }\n                }\n\n                // Return the number of times class is displayed.\n                function countClass(classes, class_name) {\n                  var counter = 0;\n                  angular.forEach(classes, function(name) {\n                    if(name === class_name) {\n                      counter++;\n                    }\n                  });\n                  return counter;\n                }\n\n                // Update the class based on status of the services on the\n                // controller.\n                function updateStatusClass() {\n                    $scope.serviceClass = \"unknown\";\n                    if(angular.isObject($scope.controller)) {\n                        var services = ControllersManager.getServices(\n                            $scope.controller);\n                        if(services.length > 0) {\n                            var classes = services.map(getClass);\n                            if(classes.indexOf(\"error\") !== -1) {\n                                $scope.serviceClass = \"power-error\";\n                                $scope.serviceText = countClass(\n                                  classes, \"error\") + \" dead\";\n                            } else if(classes.indexOf(\"warning\") !== -1) {\n                                $scope.serviceClass = \"warning\";\n                                $scope.serviceText = countClass(\n                                  classes, \"warning\") + \" degraded\";\n                            } else {\n                                $scope.serviceClass = \"success\";\n                                $scope.serviceText = countClass(\n                                  classes, \"success\") + \" running\";\n                            }\n                        }\n                    }\n                }\n\n                // Watch the services array and the services on the controller,\n                // if any changes then update the status.\n                $scope.$watch(\"controller.service_ids\", updateStatusClass);\n                $scope.$watchCollection(\"services\", updateStatusClass);\n\n                // Update on creation.\n                updateStatusClass();\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Double click overlay directive.\n *\n * Provides the ability for a disabled element to still accept the\n * double click event. By default if an element is disabled then it will\n * receive no click events. This overlays the element with another element\n * that will still receive click events.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the style for the maas-dbl-overlay class. We inject the style\n    // instead of placing it in maas-styles.css because it is required for\n    // this directive to work at all.\n    var styleElement = document.createElement('style');\n    styleElement.innerHTML = [\n        '.maas-dbl-overlay {',\n            'display: inline-block;',\n            'position: relative;',\n        '}',\n        '.maas-dbl-overlay--overlay {',\n            'position: absolute;',\n            'left: 0;',\n            'right: 0;',\n            'top: 0;',\n            'bottom: 0;',\n            '-webkit-touch-callout: none;',\n            '-webkit-user-select: none;',\n            '-khtml-user-select: none;',\n            '-moz-user-select: none;',\n            '-ms-user-select: none;',\n            'user-select: none;',\n        '}'\n    ].join('');\n    document.getElementsByTagName('head')[0].appendChild(styleElement);\n\n    // Inject the double_click_overlay.html into the template cache.\n    $templateCache.put('directive/templates/double_click_overlay.html', [\n        '<div class=\"maas-dbl-overlay\">',\n            '<span data-ng-transclude></span>',\n            '<div class=\"maas-dbl-overlay--overlay\"></div>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasDblClickOverlay', ['BrowserService',\n    function(BrowserService) {\n        return {\n            restrict: \"A\",\n            transclude: true,\n            replace: true,\n            scope: {\n                maasDblClickOverlay: '&'\n            },\n            templateUrl: 'directive/templates/double_click_overlay.html',\n            link: function(scope, element, attrs) {\n                // Create the click function that will be called when the\n                // overlay is clicked. This changes based on the element that\n                // is transcluded into this directive.\n                var overlay = element.find(\".maas-dbl-overlay--overlay\");\n                var transclude = element.find(\n                    \"span[data-ng-transclude]\").children()[0];\n                var clickElement;\n                if(transclude.tagName === \"SELECT\") {\n                    clickElement = function() {\n                        // Have to create a custom mousedown event for the\n                        // select click to be handled. Using 'click()' or\n                        //'focus()' will not work.\n                        var evt = document.createEvent('MouseEvents');\n                        evt.initMouseEvent(\n                            'mousedown', true, true, window, 0, 0, 0, 0, 0,\n                            false, false, false, false, 0, null);\n                        transclude.dispatchEvent(evt);\n                    };\n\n                    // Selects use a pointer for the cursor.\n                    overlay.css({ cursor: \"pointer\" });\n                } else if(transclude.tagName === \"INPUT\") {\n                    clickElement = function() {\n                        // An input will become in focus when clicked.\n                        angular.element(transclude).triggerHandler('focus');\n                    };\n\n                    // Inputs use a text for the cursor.\n                    overlay.css({ cursor: \"text\" });\n                } else {\n                    clickElement = function() {\n                        // Standard element just call click on that element.\n                        angular.element(transclude).triggerHandler('click');\n                    };\n\n                    // Don't set cursor on other element types.\n                }\n\n                // Add the click and double click handlers.\n                var overlayClick = function(evt) {\n                    clickElement();\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                };\n                var overlayDblClick = function(evt) {\n                    // Call the double click handler with in the scope.\n                    scope.$apply(scope.maasDblClickOverlay);\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                };\n\n                // Enable the handlers if not Firefox. It firefox, then hide\n                // the overlay as Firefox does not allow sending click events\n                // to select elements.\n                if(BrowserService.browser !== \"firefox\") {\n                    overlay.on(\"click\", overlayClick);\n                    overlay.on(\"dblclick\", overlayDblClick);\n                } else {\n                    overlay.addClass(\"ng-hide\");\n                }\n\n                // Remove the handlers when the scope is destroyed.\n                scope.$on(\"$destroy\", function() {\n                    overlay.off(\"click\", overlayClick);\n                    overlay.off(\"dblclick\", overlayDblClick);\n                });\n            }\n        };\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n*/\n\nangular.module('MAAS').directive('maasEnter', function () {\n    return {\n        restrict: \"A\",\n        link: function (scope, element, attrs) {\n            element.bind(\"keydown keypress\", function (evt) {\n                if(evt.which === 13) {\n                    scope.$apply(function () {\n                        scope.$eval(attrs.maasEnter);\n                    });\n                    evt.preventDefault();\n                }\n            });\n        }\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Enter blur directive.\n *\n * When the enter key is pressed make the element lose focus (aka. blur event).\n */\n\n\nangular.module('MAAS').directive('maasEnterBlur', function() {\n    return {\n        restrict: \"A\",\n        link: function(scope, element, attrs) {\n            element.bind(\"keydown keypress\", function(evt) {\n                if(evt.which === 13) {\n                    element.blur();\n                    evt.preventDefault();\n                }\n            });\n        }\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Error overlay.\n *\n * Directive overrides the entire transcluded element if an error occurs or\n * connection to the region over the websocket fails or becomes disconnected.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the error_overlay.html into the template cache.\n    $templateCache.put('directive/templates/error_overlay.html', [\n        '<header id=\"error-header\" class=\"page-header\" data-ng-show=\"show()\">',\n            '<div class=\"row\">',\n                '<h1 class=\"page-header__title\">',\n                    '<span class=\"p-icon--loading u-animation--spin ',\n                        'u-margin--right-small\"',\n                        'data-ng-hide=\"clientError\"></span>',\n                    '{$ getTitle() $}',\n                '</h1>',\n                '<div class=\"page-header__controls\">',\n                    '<button class=\"button--secondary button--inline\"',\n                        'data-ng-click=\"reload()\"',\n                        'data-ng-show=\"clientError\">Reload</button>',\n                '</div>',\n                '<div class=\"page-header__dropdown is-open\" ',\n                    'data-ng-show=\"error\">',\n                    '<div class=\"page-header__section twelve-col',\n                        'u-margin--bottom-none\">',\n                        '<p class=\"page-header__message',\n                                  'page-header__message--error\">',\n                            '{$ error $}',\n                        '</p>',\n                    '</div>',\n                '</div>',\n            '</div>',\n        '</header>',\n        '<div class=\"ng-hide u-no-margin--top\" data-ng-hide=\"show()\">',\n            '<div data-ng-transclude></div>',\n        '</div>'\n    ].join(''));\n\n    // Preload the svg and png error icon. Its possible that it has never been\n    // loaded by the browser and if the region connection goes down and the\n    // directive gets shown with an error the icon will be missing.\n    //\n    // Note: This is skipped if unit testing because it will throw 404 errors\n    // continuously.\n    if(!angular.isDefined(window.jasmine)) {\n        var image = new Image();\n        image.src = \"static/assets/images/icons/error.svg\";\n        image = new Image();\n        image.src = \"static/assets/images/icons/error.png\";\n    }\n}]);\n\nangular.module('MAAS').directive('maasErrorOverlay', [\n    '$window', '$timeout', 'RegionConnection', 'ErrorService',\n    function($window, $timeout, RegionConnection, ErrorService) {\n        return {\n            restrict: \"A\",\n            transclude: true,\n            scope: true,\n            templateUrl: 'directive/templates/error_overlay.html',\n            link: function(scope, element, attrs) {\n\n                scope.connected = false;\n                scope.showDisconnected = false;\n                scope.clientError = false;\n                scope.wasConnected = false;\n\n                // Holds the promise that sets showDisconnected to true. Will\n                // be cleared when the scope is destroyed.\n                var markDisconnected;\n\n                // Returns true when the overlay should be shown.\n                scope.show = function() {\n                    // Always show if clientError.\n                    if(scope.clientError) {\n                        return true;\n                    }\n                    // Never show if connected.\n                    if(scope.connected) {\n                        return false;\n                    }\n                    // Never been connected then always show.\n                    if(!scope.wasConnected) {\n                        return true;\n                    }\n                    // Not connected.\n                    return scope.showDisconnected;\n                };\n\n                // Returns the title for the header.\n                scope.getTitle = function() {\n                    if(scope.clientError) {\n                        return \"Error occurred\";\n                    } else if(scope.wasConnected) {\n                        return \"Connection lost, reconnecting...\";\n                    } else {\n                        return \"Connecting...\";\n                    }\n                };\n\n                // Called to reload the page.\n                scope.reload = function() {\n                    $window.location.reload();\n                };\n\n                // Called to when the connection status of the region\n                // changes. Updates the scope connected and error values.\n                var watchConnection = function() {\n                    // Do nothing if already a client error.\n                    if(scope.clientError) {\n                        return;\n                    }\n\n                    // Set connected and the time it changed.\n                    var connected = RegionConnection.isConnected();\n                    if(connected !== scope.connected) {\n                        scope.connected = connected;\n                        if(!connected) {\n                            scope.showDisconnected = false;\n\n                            // Show disconnected after 1/2 second. This removes\n                            // the flicker that can occur, if it disconnecets\n                            // and reconnected quickly.\n                            markDisconnected = $timeout(function() {\n                                scope.showDisconnected = true;\n                                markDisconnected = undefined;\n                            }, 500);\n                        }\n                    }\n\n                    // Set error and whether of not the connection\n                    // has ever been made.\n                    scope.error = RegionConnection.error;\n                    if(!scope.wasConnected && connected) {\n                        scope.wasConnected = true;\n                    }\n                };\n\n                // Watch the isConnected and error value on the\n                // RegionConnection.\n                scope.$watch(function() {\n                    return RegionConnection.isConnected();\n                }, watchConnection);\n                scope.$watch(function() {\n                    return RegionConnection.error;\n                }, watchConnection);\n\n                // Called then the error value on the ErrorService changes.\n                var watchError = function() {\n                    var error = ErrorService._error;\n                    if(angular.isString(error)) {\n                        scope.clientError = true;\n                        scope.error = ErrorService._error;\n                    }\n                };\n\n                // Watch _error on the ErrorService.\n                scope.$watch(function() {\n                    return ErrorService._error;\n                }, watchError);\n\n                // Cancel the timeout on scope destroy.\n                scope.$on(\"$destroy\", function() {\n                    if(angular.isDefined(markDisconnected)) {\n                        $timeout.cancel(markDisconnected);\n                    }\n                });\n            }\n        };\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Error toggle.\n *\n * Hides the element if an error occurs or no connection to the region\n * is present.\n */\n\nangular.module('MAAS').directive('maasErrorToggle', [\n    '$timeout', 'RegionConnection', 'ErrorService',\n    function($timeout, RegionConnection, ErrorService) {\n        return {\n            restrict: \"A\",\n            link: function(scope, element, attrs) {\n\n                // Holds timeout promise for setting ng-hide when\n                // connection is lost.\n                var disconnectedPromise;\n\n                // Cancel the disconnected timeout.\n                var cancelTimeout = function() {\n                    if(angular.isDefined(disconnectedPromise)) {\n                        $timeout.cancel(disconnectedPromise);\n                        disconnectedPromise = undefined;\n                    }\n                };\n\n                // Called to when the connection status of the region\n                // changes or the error on the ErrorService is set.\n                // The element is shown when connected and no errors.\n                var watchConnectionAndError = function() {\n                    var connected = RegionConnection.isConnected();\n                    var error = ErrorService._error;\n                    if(connected && !angular.isString(error)) {\n                        cancelTimeout();\n                        element.removeClass(\"ng-hide\");\n                    } else if(angular.isString(error)) {\n                        cancelTimeout();\n                        element.addClass(\"ng-hide\");\n                    } else if(!connected) {\n                        // Hide the element after 1/2 second. This stops\n                        // flickering when the connection goes down and\n                        // reconnects quickly.\n                        cancelTimeout();\n                        disconnectedPromise = $timeout(function() {\n                            element.addClass(\"ng-hide\");\n                        }, 500);\n                    }\n                };\n\n                // Watch the RegionConnection.isConnected() and\n                // ErrorService._error value.\n                scope.$watch(function() {\n                    return RegionConnection.isConnected();\n                }, watchConnectionAndError);\n                scope.$watch(function() {\n                    return ErrorService._error;\n                }, watchConnectionAndError);\n\n                // Cancel disconnect timeout on destroy.\n                scope.$on(\"$destroy\", function() {\n                    cancelTimeout();\n                });\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * IP Ranges directive.\n*/\n\nangular.module('MAAS').directive('maasIpRanges', [\n    '$filter', 'IPRangesManager', 'UsersManager',\n    'ManagerHelperService', 'ConverterService', function(\n        $filter, IPRangesManager, UsersManager, ManagerHelperService,\n        ConverterService) {\n        return {\n            restrict: \"E\",\n            scope: {\n                subnet: \"=\",\n                vlan: \"=\"\n            },\n            templateUrl: (\n                'static/partials/ipranges.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.ipranges = IPRangesManager.getItems();\n                $scope.iprangeManager = IPRangesManager;\n                $scope.newRange = null;\n                $scope.editIPRange = null;\n                $scope.deleteIPRange = null;\n\n                // Return true if the authenticated user is super user.\n                $scope.isSuperUser = function() {\n                    return UsersManager.isSuperUser();\n                };\n\n                // Called to start adding a new IP range.\n                $scope.addRange = function(type) {\n                    $scope.newRange = {\n                        type: type,\n                        start_ip: \"\",\n                        end_ip: \"\",\n                        comment: \"\"\n                    };\n                    if(angular.isObject($scope.subnet)) {\n                        $scope.newRange.subnet = $scope.subnet.id;\n                    }\n                    if(angular.isObject($scope.vlan)) {\n                        $scope.newRange.vlan = $scope.vlan.id;\n                    }\n                    if(type === \"dynamic\") {\n                        $scope.newRange.comment = \"Dynamic\";\n                    }\n                };\n\n                // Cancel adding the new IP range.\n                $scope.cancelAddRange = function() {\n                    $scope.newRange = null;\n                };\n\n                // Return true if the IP range can be modified by the\n                // authenticated user.\n                $scope.ipRangeCanBeModified = function(range) {\n                    if($scope.isSuperUser()) {\n                        return true;\n                    } else {\n                        // Can only modify reserved and same user.\n                        return (\n                            range.type === \"reserved\" &&\n                            range.user === UsersManager.getAuthUser().id);\n                    }\n                };\n\n                // Return true if the IP range is in edit mode.\n                $scope.isIPRangeInEditMode = function(range) {\n                    return $scope.editIPRange === range;\n                };\n\n                // Toggle edit mode for the IP range.\n                $scope.ipRangeToggleEditMode = function(range) {\n                    $scope.deleteIPRange = null;\n                    if($scope.isIPRangeInEditMode(range)) {\n                        $scope.editIPRange = null;\n                    } else {\n                        $scope.editIPRange = range;\n                    }\n                };\n\n                // Clear edit mode for the IP range.\n                $scope.ipRangeClearEditMode = function() {\n                    $scope.editIPRange = null;\n                };\n\n                // Return true if the IP range is in delete mode.\n                $scope.isIPRangeInDeleteMode = function(range) {\n                    return $scope.deleteIPRange === range;\n                };\n\n                // Enter delete mode for the IP range.\n                $scope.ipRangeEnterDeleteMode = function(range) {\n                    $scope.editIPRange = null;\n                    $scope.deleteIPRange = range;\n                };\n\n                // Exit delete mode for the IP range.\n                $scope.ipRangeCancelDelete = function() {\n                    $scope.deleteIPRange = null;\n                };\n\n                // Perform the delete operation on the IP range.\n                $scope.ipRangeConfirmDelete = function() {\n                    IPRangesManager.deleteItem(\n                        $scope.deleteIPRange).then(function() {\n                            $scope.deleteIPRange = null;\n                    });\n                };\n\n                // Sort ranges by starting IP address.\n                $scope.ipRangeSort = function(range) {\n                    if(range.start_ip.indexOf(':') !== -1) {\n                        return ConverterService.ipv6Expand(range.start_ip);\n                    } else {\n                        return ConverterService.ipv4ToInteger(range.start_ip);\n                    }\n                };\n\n                // Load the reqiured managers.\n                ManagerHelperService.loadManagers($scope, [\n                    IPRangesManager, UsersManager]).then(\n                        function() {\n                            $scope.loading = false;\n                        });\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Login button for external authentication.\n */\n\nangular.module('MAAS').factory('getBakery', function() {\n    return function(visitPage) {\n        return new Bakery(\n            new WebHandler(),\n            new BakeryStorage(localStorage, {}), {visitPage: visitPage});\n    };\n}).directive('externalLogin', ['$window', 'getBakery',\n                               function($window, getBakery) {\n    return {\n        restrict: 'E',\n        scope: {},\n        template: [\n            '<a target=\"_blank\" class=\"p-button--positive\"',\n            '    href=\"{{ loginURL }}\"',\n            '    title=\"Login through {{ externalAuthURL }}\">',\n            '  Go to login page',\n            '</a>',\n            '<div id=\"login-error\" class=\"p-form-validation__message\"',\n            '    ng-if=\"errorMessage\">',\n            '  <strong>Error getting login link:</strong><br>',\n            '  {{ errorMessage }}',\n            '</div>',\n        ].join(''),\n        controller: function($scope, $rootScope, $element, $document) {\n            $scope.errorMessage = '';\n            $scope.loginURL = '#';\n            $scope.externalAuthURL = $element.attr('auth-url');\n\n            const visitPage = function(error) {\n                $scope.$apply(function() {\n                    $scope.loginURL =  error.Info.VisitURL;\n                    $scope.errorMessage = '';\n                });\n            }\n            const bakery = getBakery(visitPage);\n            const nextPath = $element.attr('next-path');\n            bakery.get(\n                '/MAAS/accounts/discharge-request/',\n                {'Accept': 'application/json',\n                 'Content-Type': 'application/json'},\n                function(error, response) {\n                    if (response.currentTarget.status != 200) {\n                        $scope.$apply(function() {\n                            $scope.errorMessage = (\n                                response.currentTarget.responseText);\n                        });\n                    } else {\n                        $window.location.replace(nextPath);\n                    }\n                });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS object directive.\n *\n * Directive that connects a field to an object from the websocket. The field\n * is an instant save on blur.\n */\n\nangular.module('MAAS').directive('maasObjForm', ['JSONService',\n    function(JSONService) {\n        function MAASFormController(scope) {\n            this.obj = scope.obj;\n            this.manager = scope.manager;\n            this.fields = {};\n            this.scope = scope;\n            this.scope.saving = false;\n            this.scope.savingKeys = [];\n            if(angular.isObject(this.scope.obj)) {\n                this.scope.obj.$maasForm = this;\n            }\n\n            // Set the managerMethod.\n            this.managerMethod = scope.managerMethod;\n            if(angular.isUndefined(this.managerMethod)) {\n                this.managerMethod = \"updateItem\";\n            }\n\n            var self = this;\n            scope.$watch(\"obj\", function() {\n                // Update the object when it changes.\n                self.obj = scope.obj;\n                if(angular.isObject(self.obj)) {\n                    self.obj.$maasForm = self;\n                }\n            });\n            scope.$on(\"$destroy\", function() {\n                // Remove the $maasForm from the object when directive is\n                // deleted.\n                if(angular.isObject(self.obj)) {\n                    delete self.obj.$maasForm;\n                }\n            });\n        }\n\n        // Get the current value for a field in the form.\n        MAASFormController.prototype.getValue = function (key) {\n            var field = this.fields[key];\n            if(angular.isObject(field) && angular.isObject(field.scope)) {\n                return field.scope.getValue();\n            }\n        };\n\n        // Update the current value for a field in the form.\n        MAASFormController.prototype.updateValue = function (key, value) {\n            var field = this.fields[key];\n            if(angular.isObject(field) && angular.isObject(field.scope)) {\n                return field.scope.updateValue(value);\n            }\n        };\n\n        // Clone the current object for this form without the $maasForm\n        // property set.\n        MAASFormController.prototype.cloneObject = function() {\n            if(!angular.isObject(this.obj)) {\n                return this.obj;\n            } else {\n                delete this.obj.$maasForm;\n                var clonedObj = angular.copy(this.obj);\n                this.obj.$maasForm = this;\n                return clonedObj;\n            }\n        };\n\n        // Return true if table form.\n        MAASFormController.prototype.isTableForm = function () {\n            if(angular.isUndefined(this.scope.tableForm)) {\n                // Default is not a table form.\n                return false;\n            } else {\n                return this.scope.tableForm;\n            }\n        };\n\n        // Return true if the form should be saved on blur.\n        MAASFormController.prototype.saveOnBlur = function() {\n            if(angular.isUndefined(this.scope.saveOnBlur)) {\n                // Default is save on blur.\n                return true;\n            } else {\n                return this.scope.saveOnBlur;\n            }\n        };\n\n        // Return true if the form is saving this field.\n        MAASFormController.prototype.isSaving = function(key) {\n            return (\n                this.scope.saving && this.scope.savingKeys.indexOf(key) >= 0);\n        };\n\n        // Return true if the input should show the saving spinner. This is\n        // only show on inputs in forms that are using save on blur.\n        MAASFormController.prototype.showInputSaving = function(key) {\n            return this.saveOnBlur() && this.isSaving(key);\n        };\n\n        // Return true if any field in the form as an error.\n        MAASFormController.prototype.hasErrors = function() {\n            var hasErrors = false;\n            angular.forEach(this.fields, function(field) {\n                if(field.scope.hasErrors()) {\n                    hasErrors = true;\n                }\n            });\n            if(angular.isDefined(this.errorScope)) {\n                if(this.errorScope.hasErrors()) {\n                    hasErrors = true;\n                }\n            }\n            return hasErrors;\n        };\n\n        // Called by maas-obj-field to register it as a editable field.\n        MAASFormController.prototype.registerField = function(key, scope) {\n            // Store the state of the field and its scope.\n            this.fields[key] = {\n                editing: false,\n                scope: scope\n            };\n\n            // Watch for changes on the value of the object.\n            var self = this;\n            this.scope.$watch(\"obj.\" + key, function() {\n                if(angular.isObject(self.obj) && !self.fields[key].editing) {\n                    self.fields[key].scope.updateValue(self.obj[key]);\n                }\n            });\n\n            // Return the current value for the field.\n            if(angular.isObject(this.obj)) {\n                return this.obj[key];\n            } else {\n                return null;\n            }\n        };\n\n        // Called by maas-obj-field to unregister it as a editable field.\n        MAASFormController.prototype.unregisterField = function(key) {\n            delete this.fields[key];\n        };\n\n        // Called by maas-obj-field to place field in edit mode.\n        MAASFormController.prototype.startEditingField = function(key) {\n            this.fields[key].editing = true;\n        };\n\n        // Called by maas-obj-field to end edit mode for the field.\n        MAASFormController.prototype.stopEditingField = function(key, value) {\n            var field = this.fields[key];\n\n            // Do nothing if not save on blur.\n            if(!this.saveOnBlur()) {\n                field.editing = false;\n                return;\n            }\n\n            // Clear errors before saving.\n            field.scope.clearErrors();\n\n            // Copy the object and update the editing field.\n            var updatedObj = this.cloneObject();\n            updatedObj[key] = value;\n            if(updatedObj[key] === this.obj[key]) {\n                // Nothing changed.\n                field.editing = false;\n                return;\n            }\n\n            // Update the item in the manager.\n            this.scope.saving = true;\n            this.scope.savingKeys = [key];\n            this.updateItem(updatedObj, [key]);\n        };\n\n        // Update the item using the manager.\n        MAASFormController.prototype.updateItem = function(updatedObj, keys) {\n            var key = keys[0];\n            var field = this.fields[key];\n            var self = this;\n\n            // Pre-process the updatedObj if one is defined.\n            if(angular.isFunction(this.scope.preProcess)) {\n                updatedObj = this.scope.preProcess(updatedObj, keys);\n            }\n\n            // Update the item with the manager.\n            return this.manager[this.managerMethod](\n                updatedObj).then(function(newObj) {\n                    // Update the value of the element.\n                    field.editing = false;\n                    field.scope.updateValue(newObj[key]);\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    if(angular.isFunction(self.scope.afterSave)) {\n                        self.scope.afterSave(newObj);\n                    }\n                    return newObj;\n                }, function(error) {\n                    var errorJson = JSONService.tryParse(error);\n                    if(angular.isObject(errorJson)) {\n                        // Add the error to each field it matches.\n                        angular.forEach(errorJson, function(value, key) {\n                            var errorField = self.fields[key];\n                            if(!angular.isArray(value)) {\n                                value = [value];\n                            }\n\n                            if(angular.isObject(errorField)) {\n                                // Error on a field we know about, place the\n                                // error on that field.\n                                errorField.scope.setErrors(value);\n                            } else {\n                                // Error on a field we don't know about, place\n                                // the error on the editing field. Prefixing\n                                // the error with the field.\n                                if(key !== \"__all__\") {\n                                    value = value.map(function(v) {\n                                        return key + \": \" + v;\n                                    });\n                                }\n                                field.scope.setErrors(value);\n                            }\n                        });\n                    } else {\n                        // Add the string error to just the field error.\n                        field.scope.setErrors([error]);\n                    }\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    return error;\n                });\n        };\n\n        // Called when saveOnBlur is false to save the whole form.\n        MAASFormController.prototype.saveForm = function () {\n            var keys = [];\n            var updatedObj = this.cloneObject();\n            angular.forEach(this.fields, function(value, key) {\n                value.scope.clearErrors();\n                var newValue = value.scope.getValue();\n                if(angular.isDefined(newValue) &&\n                    updatedObj[key] !== newValue) {\n                    updatedObj[key] = newValue;\n                    keys.push(key);\n                }\n            });\n\n\n            // Pre-process the updatedObj if one is defined.\n            if(angular.isFunction(this.scope.preProcess)) {\n                updatedObj = this.scope.preProcess(updatedObj, keys);\n            }\n\n            // Clear the errors on the errorScope before save.\n            if(angular.isDefined(this.errorScope)) {\n                this.errorScope.clearErrors();\n            }\n\n            var self = this;\n            this.scope.saving = true;\n            this.scope.savingKeys = keys;\n            return this.manager[this.managerMethod](\n                updatedObj).then(function(newObj) {\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    if(angular.isFunction(self.scope.afterSave)) {\n                        self.scope.afterSave(newObj);\n                    }\n                    return newObj;\n                }, function(error) {\n                    var errorJson = JSONService.tryParse(error);\n                    if(angular.isObject(errorJson)) {\n                        // Add the error to each field it matches.\n                        angular.forEach(errorJson, function(value, key) {\n                            var errorField = self.fields[key];\n                            if(!angular.isArray(value)) {\n                                value = [value];\n                            }\n\n                            if(angular.isObject(errorField)) {\n                                // Error on a field we know about, place the\n                                // error on that field.\n                                errorField.scope.setErrors(value);\n                            } else {\n                                if(key !== \"__all__\") {\n                                    value = value.map(function(v) {\n                                        return key + \": \" + v;\n                                    });\n                                }\n                                // Error on a field we don't know about, place\n                                // the error on errorScope if set.\n                                if(angular.isDefined(self.errorScope)) {\n                                    self.errorScope.setErrors(value);\n                                } else {\n                                    // No error scope, just log to console.\n                                    console.log(value);\n                                }\n                            }\n                        });\n                    } else {\n                        // Add the string error to just the field error.\n                        if(angular.isDefined(self.errorScope)) {\n                            self.errorScope.setErrors([error]);\n                        } else {\n                            // No error scope, just log to console.\n                            console.log(error);\n                        }\n                    }\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    return error;\n                });\n        };\n\n        return {\n            restrict: \"E\",\n            scope: {\n                obj: \"=\",\n                manager: \"=\",\n                managerMethod: \"@\",\n                preProcess: \"=\",\n                afterSave: \"=\",\n                tableForm: \"=\",\n                saveOnBlur: \"=\",\n                inline: \"=\",\n                ngDisabled: \"&\"\n            },\n            transclude: true,\n            template: (\n                '<form class=\"p-form\" data-ng-class=\"{saving: saving, ' +\n                '\\'p-form--inline\\': inline, ' +\n                '\\'p-form--stacked\\': tableForm}\" ' +\n                'ng-transclude></form>'),\n            controller: ['$scope', MAASFormController]\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjFieldGroup', ['JSONService',\n    function(JSONService) {\n        // Controller for this directive.\n        function MAASGroupController(scope, timeout) {\n            this.fields = {};\n            this.scope = scope;\n            this.scope.saving = false;\n            this.scope.savingKeys = [];\n            this.timeout = timeout;\n\n            var self = this;\n            this.scope.isEditing = function() {\n                var editing = false;\n                angular.forEach(self.fields, function(value) {\n                    if(!editing) {\n                        editing = value.editing;\n                    }\n                });\n                return editing;\n            };\n        }\n\n        // Return true if table form.\n        MAASGroupController.prototype.isTableForm = function () {\n            return this.formController.isTableForm();\n        };\n\n        // Return true if should save on blur.\n        MAASGroupController.prototype.saveOnBlur = function () {\n            return this.formController.saveOnBlur();\n        };\n\n        // Return true if group is saving.\n        MAASGroupController.prototype.isSaving = function(key) {\n            return (\n                this.scope.saving && this.scope.savingKeys.indexOf(key) >= 0);\n        };\n\n        // Return true if the input should show the saving spinner. This is\n        // only show on inputs in forms that are using save on blur.\n        MAASGroupController.prototype.showInputSaving = function(key) {\n            // In a group we say the entire group is saving, not just that\n            // one key in the field is being saved.\n            return this.saveOnBlur() && this.scope.saving;\n        };\n\n        // Called by maas-obj-field to register it as a editable field.\n        MAASGroupController.prototype.registerField = function(key, scope) {\n            // Store the state of the field and its scope.\n            this.fields[key] = {\n                editing: false,\n                scope: scope\n            };\n            return this.formController.registerField(key, scope);\n        };\n\n        // Called by maas-obj-field to unregister it as a editable field.\n        MAASGroupController.prototype.unregisterField = function(key) {\n            delete this.fields[key];\n            this.formController.unregisterField(key);\n        };\n\n        // Called by maas-obj-field to place field in edit mode.\n        MAASGroupController.prototype.startEditingField = function(key) {\n            this.fields[key].editing = true;\n\n            // Set all fields in the group as editing in the formController.\n            var self = this;\n            angular.forEach(this.fields, function(value, key) {\n                self.formController.startEditingField(key);\n            });\n        };\n\n        // Called by maas-obj-field to exit edit mode for the field.\n        MAASGroupController.prototype.stopEditingField = function(key, value) {\n            var field = this.fields[key];\n            field.editing = false;\n\n            // Exit early if not save on blur.\n            if(!this.saveOnBlur()) {\n                return;\n            }\n\n            // Delay the handling of stop to make sure start is not called on\n            // the next field in the group.\n            var self = this;\n            this.timeout(function() {\n                // If any other fields are in edit mode then nothing to do.\n                var editing = false;\n                angular.forEach(self.fields, function(value) {\n                    if(!editing) {\n                        editing = value.editing;\n                    }\n                });\n                if(editing) {\n                    return;\n                }\n\n                // Copy the object and update the editing fields.\n                var keys = [];\n                var changed = false;\n                var updatedObj = self.formController.cloneObject();\n                angular.forEach(self.fields, function(value, key) {\n                    value.scope.clearErrors();\n                    var newValue = value.scope.getValue();\n                    if(angular.isDefined(newValue) &&\n                        updatedObj[key] !== newValue) {\n                        keys.push(key);\n                        updatedObj[key] = newValue;\n                        changed = true;\n                    }\n                });\n                if(!changed) {\n                    return;\n                }\n\n                // Place the field that actually triggered the update first.\n                var keyIdx = keys.indexOf(key);\n                if(keyIdx !== -1) {\n                    keys.splice(keyIdx, 1);\n                    keys.splice(0, 0, key);\n                }\n\n                // Save the object.\n                self.scope.saving = true;\n                self.scope.savingKeys = keys;\n                self.formController.updateItem(updatedObj, keys).then(\n                    function(obj) {\n                      self.scope.saving = false;\n                      self.scope.savingKeys = [];\n                      return obj;\n                  }, function(error) {\n                      self.scope.saving = false;\n                      self.scope.savingKeys = [];\n                      return error;\n                  });\n            }, 10); // Really short has to be next click.\n        };\n\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\", \"maasObjFieldGroup\"],\n            scope: {},\n            transclude: true,\n            template: (\n                '<div class=\"form__siblings\" ' +\n                'data-ng-class=\"{\\'is-active\\': isEditing()}\" ' +\n                'data-ng-transclude></div>'),\n            controller: ['$scope', '$timeout', MAASGroupController],\n            link: {\n                pre: function(scope, element, attrs, controllers) {\n                    // Set formController on the MAASGroupController to\n                    // point to its parent MAASFormController. This is done in\n                    // pre-link so the controller has the formController before\n                    // registerField is called.\n                    controllers[1].formController = controllers[0];\n\n                    // Set ngDisabled on this scope from the form controller.\n                    scope.ngDisabled = controllers[0].scope.ngDisabled;\n\n                    // Set the object to always be the same on the scope.\n                    controllers[0].scope.$watch(\"obj\", function(obj) {\n                        scope.obj = obj;\n                    });\n                }\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjField', ['$compile',\n    function($compile) {\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\", \"?^^maasObjFieldGroup\"],\n            scope: {\n                onChange: \"=\",\n                subtleText: \"@\"\n            },\n            transclude: true,\n            template: (\n                '<div data-ng-transclude></div>'),\n            link: function(scope, element, attrs, controllers) {\n                // Select the controller based on which is available.\n                var controller = controllers[1];\n                if(!angular.isObject(controller)) {\n                    controller = controllers[0];\n                }\n\n                // Set ngDisabled from the parent controller.\n                scope.ngDisabled = controller.scope.ngDisabled;\n\n                element.addClass(\"p-form__group\");\n                if(attrs.subtle !== \"false\") {\n                    element.addClass(\"form__group--subtle\");\n                }\n\n                // type and key required.\n                var missingAttrs = [];\n                if(!angular.isString(attrs.type) || attrs.type.length === 0) {\n                    missingAttrs.push(\"type\");\n                }\n                if(!angular.isString(attrs.key) || attrs.key.length === 0) {\n                    missingAttrs.push(\"key\");\n                }\n                if(missingAttrs.length > 0) {\n                    throw new Error(\n                        missingAttrs.join(\", \") +\n                        \" are required on maas-obj-field.\");\n                }\n\n                // Remove transcluded element.\n                element.find(\"div\").remove();\n\n                // Render the label.\n                var label = attrs.label || attrs.key;\n\n                if(attrs.disableLabel !== \"true\" &&\n                        !(attrs.type === \"hidden\")) {\n                    var labelElement = angular.element('<label/>');\n                    labelElement.attr('for', attrs.key);\n                    labelElement.text(label);\n                    labelElement.addClass('p-form__label');\n                    if(attrs.labelWidth) {\n                        labelElement.addClass(\"col-\" + attrs.labelWidth);\n                    } else {\n                        labelElement.addClass(\"u-margin--right\");\n                    }\n                    if(attrs.labelLeft === \"true\") {\n                        labelElement.addClass('u-padding--left');\n                        labelElement.addClass('u-position--relative');\n                    }\n                    element.append(labelElement);\n\n                    // Add a label info icon with tooltip.\n                    if(angular.isString(attrs.labelInfo)\n                            && attrs.labelInfo.length > 0) {\n                        var infoWrapper = angular.element(\n                            '<span>&nbsp;</span>');\n                        infoWrapper.addClass('p-tooltip p-tooltip--btm-right');\n\n                        var infoIcon = angular.element('<i/>');\n                        infoIcon.addClass('p-icon--information');\n                        infoIcon.attr(\n                            'aria-describedby', attrs.key + '-tooptip');\n\n                        var infoTooltip = angular.element('<p></p>');\n                        infoTooltip.addClass('p-tooltip__message');\n                        infoTooltip.text(attrs.labelInfo);\n                        infoTooltip.attr('id', attrs.key + '-tooptip');\n\n                        infoWrapper.append(infoIcon);\n                        infoWrapper.append(infoTooltip);\n\n                        labelElement.append(infoWrapper);\n\n                        // prevents the icon from being clickable\n                        infoIcon.bind('click', function (evt) {\n                            evt.preventDefault();\n                        });\n                    }\n                }\n\n                // Add the wrapper for the input.\n                var inputWrapper = angular.element('<div></div>');\n                inputWrapper.addClass(\"p-form__control\");\n\n                if(attrs.inputWidth) {\n                    inputWrapper.addClass(\"col-\" + attrs.inputWidth);\n                }\n\n                // Render the input based on the type.\n                var placeholder = attrs.placeholder || label;\n                var inputElement = null;\n                if(attrs.type === \"text\" || attrs.type === \"textarea\" ||\n                   attrs.type === \"password\") {\n                    if(attrs.type === \"text\") {\n                        inputElement = $compile(\n                            '<input type=\"text\" id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">')(scope);\n                    } else if(attrs.type === \"textarea\") {\n                        inputElement = $compile(\n                            '<textarea id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">' +\n                                '</textarea>')(scope);\n                    } else if(attrs.type === \"password\") {\n                        inputElement = $compile(\n                            '<input type=\"password\" id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">')(scope);\n                    }\n\n                    // Allow enter on blur, by default.\n                    if(attrs.blurOnEnter) {\n                        inputElement.bind(\"keydown keypress\", function(evt) {\n                            if(evt.which === 13) {\n                                inputElement.blur();\n                                evt.preventDefault();\n                            }\n                        });\n                    }\n\n                    // Revert value on esc.\n                    var self = this;\n                    inputElement.bind(\"keydown keypress\", function(evt) {\n                        if(evt.which === 27) {\n                            inputElement.val(controller.scope.obj[attrs.key]);\n                            inputElement.blur();\n                            evt.preventDefault();\n                        }\n                    });\n\n                    // Register the field with the controller and set the\n                    // current value for the field.\n                    var currentValue = controller.registerField(\n                        attrs.key, scope);\n                    inputElement.val(currentValue);\n\n                    // When element is in focus then editing is on.\n                    inputElement.on(\"focus\", function() {\n                        scope.$apply(function() {\n                            controller.startEditingField(attrs.key);\n                        });\n                    });\n\n                    // When element is not in focus then editing is done.\n                    inputElement.on(\"blur\", function() {\n                        scope.$apply(function() {\n                            controller.stopEditingField(\n                                attrs.key, inputElement.val());\n                        });\n                    });\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        inputElement.val(newValue);\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return inputElement.val();\n                    };\n                } else if(attrs.type === \"options\") {\n                    // Requires the options attribute on the element. This\n                    // is copied directly into the ngOptions directive on\n                    // the select.\n                    var options = attrs.options;\n                    if(!angular.isString(options) || options.length === 0) {\n                        throw new Error(\n                            \"options attribute is required on type \" +\n                            \"'options' on maas-obj-field.\");\n                    }\n\n                    // Placeholder by default is disabled, allow it to be\n                    // enabled.\n                    var disabled = \"disabled\";\n                    if(attrs.placeholderEnabled === \"true\") {\n                        disabled = \"\";\n                    }\n\n                    // Create a child scope of the parent scope for this\n                    // directive. Since this directive is created with an\n                    // isolated scope we need the child to use the parent so\n                    // ngOptions can use properties defined in that scope.\n                    var childScope = scope.$parent.$new();\n                    childScope._ngDisabled = scope.ngDisabled;\n                    childScope._selectValue = controller.registerField(\n                        attrs.key, scope);\n                    childScope._selectNgChange = function() {\n                        scope._change();\n                        controller.stopEditingField(\n                            attrs.key, childScope._selectValue);\n                    };\n\n                    // Construct the select.\n                    inputElement = $compile(\n                        '<select id=\"' + attrs.key + '\" ' +\n                        'data-ng-model=\"_selectValue\" ' +\n                        'data-ng-options=\"' + options + '\"' +\n                        'data-ng-change=\"_selectNgChange()\"' +\n                        'data-ng-disabled=\"_ngDisabled()\">' +\n                        '<option value=\"\" ' + disabled + '>' + placeholder +\n                        '</option></select>')(childScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        childScope._selectValue = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return childScope._selectValue;\n                    };\n                } else if(attrs.type === \"checkboxes\") {\n                    // Requires the values attribute on the element.\n                    var values = attrs.values;\n                    if(!angular.isString(values) || values.length === 0) {\n                        throw new Error(\n                            \"values attribute is required on type \" +\n                            \"'checkboxes' on maas-obj-field.\");\n                    }\n\n                    // Create a child scope of the parent scope for this\n                    // directive. Since this directive is created with an\n                    // isolated scope we need the child to use the parent so\n                    // values can come from the parent scope.\n                    var checkScope = scope.$parent.$new();\n                    checkScope._selectedValues = controller.registerField(\n                        attrs.key, scope);\n                    checkScope._checked = function(val) {\n                        return checkScope._selectedValues.indexOf(val) > -1;\n                    };\n                    checkScope._toggleChecked = function(val) {\n                        var idx = checkScope._selectedValues.indexOf(val);\n                        if(idx > -1) {\n                            // Uncheck.\n                            checkScope._selectedValues.splice(idx, 1);\n                        } else {\n                            // Check.\n                            checkScope._selectedValues.push(val);\n                        }\n                    };\n\n                    // Construct the checkbox list.\n                    inputElement = angular.element([\n                        '<div class=\"width--full\" ',\n                            'data-ng-repeat=\"val in ' + values +'\">',\n                            '<input id=\"' + attrs.key + '_' + '{$ val $}',\n                                '\" type=\"checkbox\" value=\"{$ val $}\" ',\n                                'class=\"checkbox\" ',\n                                'data-ng-checked=\"_checked(val)\" ',\n                                'data-ng-click=\"_toggleChecked(val)\">',\n                            '<label for=\"' + attrs.key + '_',\n                                '{$ val $}' + '\" ',\n                                'class=\"checkbox-label\">{$ val $}</label>',\n                        '</div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(checkScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        checkScope._selectedValues = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return checkScope._selectedValues;\n                    };\n                } else if(attrs.type === \"tags\") {\n                    var tagsScope = scope.$new();\n                    var tags = controller.registerField(\n                        attrs.key, scope);\n                    tagsScope._tags = tags.map(function(val) {\n                        return {text: val};\n                    });\n\n                    // Construct the tags input.\n                    inputElement = angular.element([\n                        '<span data-ng-if=\"ngDisabled()\" ',\n                            'data-ng-repeat=\"tag in _tags\">',\n                            '{$ tag.text $} </span>',\n                        '<tags-input id=\"' + attrs.key + '\" ',\n                            'data-ng-model=\"_tags\" ',\n                            'data-ng-if=\"!ngDisabled()\" ',\n                            'placeholder=\"' + placeholder + '\" ',\n                            'data-ng-change=\"_change()\" ',\n                            'allow-tags-pattern=\"[\\\\w-]+\"></tags-input>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(tagsScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        tagsScope._tags = newValue.map(\n                            function(val) {\n                                return {text: val};\n                            });\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return tagsScope._tags.map(\n                            function(val) {\n                                return val.text;\n                            });\n                    };\n                } else if(attrs.type === \"hidden\") {\n                    var hiddenScope = scope.$new();\n                    hiddenScope._toggle = controller.registerField(\n                        attrs.key, scope);\n                    inputElement = angular.element([\n                        '<input type=\"hidden\" name=\"' + attrs.key + '\" ',\n                        'id=\"' + attrs.key + '\" ',\n                        'value=\"' + attrs.value + '\">',\n                        '</input>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(hiddenScope);\n                    scope.getValue = () => attrs.value;\n                    scope.updateValue = () => null;\n                } else if(attrs.type === \"onoffswitch\") {\n                    var switchScope = scope.$new();\n                    switchScope._toggle = controller.registerField(\n                        attrs.key, scope);\n                    switchScope._changed = function() {\n                        scope._change();\n                        controller.startEditingField(attrs.key);\n                        controller.stopEditingField(\n                            attrs.key, switchScope.getValue());\n                    };\n\n                    // Construct the on and off toggle.\n                    inputElement = angular.element([\n                      '<div class=\"maas-p-switch\">',\n                        '<input type=\"checkbox\" name=\"' + attrs.key + '\" ',\n                          'class=\"maas-p-switch--input\" ',\n                          'id=\"' + attrs.key + '\" ',\n                          'data-ng-model=\"_toggle\" ',\n                          'data-ng-change=\"_changed()\">',\n                        '<div class=\"maas-p-switch--mask\"></div>',\n                      '</div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(switchScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        // WARNING: This code is difficult to unit test, since\n                        // we could not figure out how to get the\n                        // isolateScope() from the transcluded element. Be sure\n                        // to manually test versions of this toggle with and\n                        // without the on-value and off-value attributes, such\n                        // as by verifying that both the on/off toggle on both\n                        // the discovery page and the subnet details page work.\n                        if(attrs.onValue && attrs.onValue === newValue) {\n                            switchScope._toggle = true;\n                        } else if(attrs.offValue &&\n                                attrs.offValue === newValue) {\n                            switchScope._toggle = false;\n                        } else {\n                            switchScope._toggle = newValue;\n                        }\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        // WARNING: This code is difficult to unit test, since\n                        // we could not figure out how to get the\n                        // isolateScope() from the transcluded element. Be sure\n                        // to manually test versions of this toggle with and\n                        // without the on-value and off-value attributes, such\n                        // as by verifying that both the on/off toggle on both\n                        // the discovery page and the subnet details page work.\n                        if(switchScope._toggle) {\n                            if(attrs.onValue) {\n                                return attrs.onValue;\n                            } else {\n                                return true;\n                            }\n                        } else {\n                            if(attrs.offValue) {\n                                return attrs.offValue;\n                            } else {\n                                return false;\n                            }\n                        }\n                    };\n                } else {\n                    throw new Error(\n                        \"Unknown type on maas-obj-field: \" + attrs.type);\n                }\n\n                // Called on change.\n                scope._change = function() {\n                    if(angular.isFunction(scope.onChange)) {\n                        scope.onChange(\n                            attrs.key,\n                            controller.getValue(attrs.key),\n                            controller);\n                    }\n                };\n\n                // Copy input class to the input element.\n                if(attrs.inputClass) {\n                    inputElement.addClass(attrs.inputClass);\n                }\n                inputWrapper.append(inputElement);\n\n                // Errors element.\n                var errorsElement = angular.element(\n                    '<ul class=\"p-list u-no-margin--top\"></ul>');\n                if(!controller.isTableForm()) {\n                    errorsElement.addClass(\"form__error\");\n                }\n                inputWrapper.append(errorsElement);\n\n                // Help text elements\n                if (attrs.helpText) {\n                    var helpTextElement = angular.element(\n                        '<p>' + attrs.helpText + '</p>');\n                    helpTextElement.addClass(\"p-form-help-text\");\n                    inputWrapper.append(helpTextElement);\n                }\n\n                // Called by controller to clear all errors.\n                scope.clearErrors = function() {\n                    inputElement.removeClass(\"ng-dirty\");\n                    inputElement.removeClass(\"p-form-validation__input\");\n                    inputWrapper.removeClass(\"p-form-validation\");\n                    inputWrapper.removeClass(\"is-error\");\n                    inputWrapper.removeClass(\"u-no-margin--top\");\n                    errorsElement.empty();\n                };\n\n                // Called by controller to set errors.\n                scope.setErrors = function(errors) {\n                    if(errors.length > 0) {\n                        inputWrapper.addClass(\"p-form-validation\");\n                        inputWrapper.addClass(\"is-error\");\n                        inputWrapper.addClass(\"u-no-margin--top\");\n                        inputElement.addClass(\"ng-dirty\");\n                        inputElement.addClass(\"p-form-validation__input\");\n                        angular.forEach(errors, function(error) {\n                            errorsElement.append(\n                              '<li class=\"p-form-validation__message\">' +\n                              '<strong>Error:</strong> ' + error + '</li>'\n                            );\n                        });\n                        // Set the input in focus but outside of the current\n                        // digest cycle.\n                        setTimeout(function() {\n                            inputElement.focus();\n                        }, 1);\n                    }\n                };\n\n                // Called by controller to see if error is set on field.\n                scope.hasErrors = function() {\n                    return inputWrapper.hasClass(\"is-error\");\n                };\n\n                // Subtle text element.\n                if(attrs.subtleText) {\n                    var subtleTextElement = $compile(\n                        angular.element(\n                            '<span class=\"p-form-help-text\" ' +\n                            'data-ng-bind=\"subtleText\"></span>'))(scope);\n                    inputWrapper.append(subtleTextElement);\n                }\n                element.append(inputWrapper);\n\n                // Watch the showing of saving spinner. Update the elements\n                // correctly to show the saving.\n                scope.$watch(function() {\n                    return controller.showInputSaving(attrs.key);\n                }, function(value) {\n                    if(value) {\n                        inputWrapper.children(\n                            ':first').addClass('u-border--information');\n                        inputWrapper.append(\n                            '<i class=\"obj-saving icon ' +\n                            'p-icon--spinner u-animation--spin\"></i>');\n                        inputWrapper.addClass('p-tooltip');\n                        inputWrapper.addClass('p-tooltip--bottom');\n                        inputWrapper.attr('aria-label', 'Saving');\n                    } else {\n                      inputWrapper.children(\n                          ':first').removeClass('u-border--information');\n                        inputWrapper.find('i.obj-saving').remove();\n                        inputWrapper.removeClass('p-tooltip');\n                        inputWrapper.removeClass('p-tooltip--right');\n                        inputWrapper.removeAttr('aria-label');\n                    }\n                });\n\n                // Called when the scope is destroyed.\n                scope.$on(\"$destroy\", function() {\n                    controller.unregisterField(attrs.key);\n                });\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjSave', function() {\n        return {\n            restrict: \"A\",\n            require: [\"^^maasObjForm\"],\n            scope: {},\n            link: function(scope, element, attrs, controllers) {\n                // Only allow maas-obj-save when saveOnBlur is false.\n                var controller = controllers[0];\n                if(controller.saveOnBlur()) {\n                    throw new Error(\n                        \"maas-obj-save is only allowed when save-on-blur is \" +\n                        \"set to false.\");\n                }\n\n                element.on(\"click\", function() {\n                    scope.$apply(function() {\n                        controller.saveForm();\n                    });\n                });\n            }\n        };\n    });\n\nangular.module('MAAS').directive('maasObjErrors', function() {\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\"],\n            scope: {},\n            template: '<ul class=\"p-list u-no-margin--top\"></ul>',\n            link: function(scope, element, attrs, controllers) {\n                // Set on the controller the global error handler.\n                controllers[0].errorScope = scope;\n                var ul = element.find(\"ul\");\n\n                // Called by controller to clear all errors.\n                scope.clearErrors = function() {\n                    ul.empty();\n                };\n\n                // Called by controller to set errors.\n                scope.setErrors = function(errors) {\n                    if(errors.length > 0) {\n                        angular.forEach(errors, function(error) {\n                            ul.append(\n                              '<li class=\"p-list__item\">' +\n                              '<i class=\"p-icon--error\"></i> ' +\n                              error + '</li>'\n                            );\n                        });\n                    }\n                };\n\n                // Called by controller to see if error is set on field.\n                scope.hasErrors = function() {\n                    return ul.children().length > 0;\n                };\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjSaving', function() {\n        return {\n            restrict: \"E\",\n            require: \"^^maasObjForm\",\n            scope: {},\n            transclude: true,\n            template: [\n              '<span data-ng-if=\"saving\">',\n                '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                '<span data-ng-transclude></span>',\n              '</span>'].join(''),\n            link: function(scope, element, attrs, controller) {\n                scope.saving = false;\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    scope.saving = value;\n                });\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjShowSaving', function() {\n        return {\n            restrict: \"A\",\n            require: \"^^maasObjForm\",\n            link: function(scope, element, attrs, controller) {\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    if(value) {\n                        element.removeClass(\"ng-hide\");\n                    } else {\n                        element.addClass(\"ng-hide\");\n                    }\n                });\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjHideSaving', function() {\n        return {\n            restrict: \"A\",\n            require: \"^^maasObjForm\",\n            link: function(scope, element, attrs, controller) {\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    if(value) {\n                        element.addClass(\"ng-hide\");\n                    } else {\n                        element.removeClass(\"ng-hide\");\n                    }\n                });\n            }\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Creates the auto-formatting for MAC address inputs.\n */\n\nangular.module('MAAS').directive('macAddress', function () {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: function (scope, ele, attr, ngModelCtrl, ngModel) {\n            if (!ngModelCtrl) {\n              return;\n            }\n\n            var macAddressParse = function (value) {\n                return value.toUpperCase();\n            };\n\n            var macAddressFormat = function (value) {\n\n                if (!value) {\n                  return undefined;\n                }\n\n                var numbers = value.replace(/:/g, \"\");\n\n                if (value.length % 3 === 0) {\n\n                    return numbers.replace(/([0-9A-Za-z]{2})/g, \"$1:\");\n                }\n            };\n\n            ngModelCtrl.$parsers.push(macAddressParse);\n            ngModelCtrl.$formatters.push(macAddressFormat);\n\n            ele.on('input', function () {\n                var value = macAddressFormat(ele.val());\n\n                if (value !== undefined) {\n                    ngModelCtrl.$setViewValue(value);\n                    ngModelCtrl.$render();\n                }\n                scope.$apply();\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Machines listing directive.\n*\n* Renders the machines listing.\n*/\n// testing\n\n\n\nangular.module('MAAS').directive('maasMachinesTable', [\n  'MachinesManager', 'GeneralManager', 'ManagerHelperService',\n  function (MachinesManager, GeneralManager, ManagerHelperService) {\n    return {\n      restrict: \"E\",\n      scope: {\n        search: \"=\",\n        ngDisabled: \"&\",\n        machineHasError: \"&\",\n        hideCheckboxes: \"=?\",\n        onListingChange: \"&\",\n        onCheckAll: \"&\",\n        onCheck: \"&\"\n      },\n      templateUrl: (\n        'static/partials/machines-table.html?v=' + (\n          MAAS_config.files_version)),\n      link: function(scope, element, attrs) {\n        // Statuses that should show spinner.\n        var SPINNER_STATUSES = [\n          1,   // commissioning\n          9,   // deploying\n          12,  // releasing\n          14,  // disk erasing\n          17,  // entering rescue mode\n          19,  // exiting rescue mode\n          21   // testing\n        ];\n\n        // Scope variables.\n        scope.table = {\n          column: 'fqdn',\n          predicate: 'fqdn',\n          reverse: false,\n          allViewableChecked: false,\n          machines: MachinesManager.getItems(),\n          filteredMachines: [],\n          osinfo: GeneralManager.getData(\"osinfo\")\n        };\n\n        // Ensures that the checkbox for select all is the correct value.\n        scope.updateAllChecked = function() {\n          // Not checked when the filtered machines are empty.\n          if(scope.table.filteredMachines.length === 0) {\n              scope.table.allViewableChecked = false;\n              return;\n          }\n\n          // Loop through all filtered machines and see if all are checked.\n          var i;\n          for(i = 0; i < scope.table.filteredMachines.length; i++) {\n              if(!scope.table.filteredMachines[i].$selected) {\n                  scope.table.allViewableChecked = false;\n                  return;\n              }\n          }\n          scope.table.allViewableChecked = true;\n        };\n\n        // Selects and deselects visible machines.\n        scope.toggleCheckAll = function() {\n          if(scope.table.allViewableChecked) {\n            angular.forEach(\n              scope.table.filteredMachines, function(machine) {\n                MachinesManager.unselectItem(machine.system_id);\n              });\n          } else {\n            angular.forEach(\n              scope.table.filteredMachines, function(machine) {\n                MachinesManager.selectItem(machine.system_id);\n              });\n          }\n          scope.updateAllChecked();\n          scope.onCheckAll();\n        };\n\n        // Selects and unselects machine.\n        scope.toggleChecked = function(machine) {\n          if(MachinesManager.isSelected(machine.system_id)) {\n            MachinesManager.unselectItem(machine.system_id);\n          } else {\n            MachinesManager.selectItem(machine.system_id);\n          }\n          scope.updateAllChecked();\n          scope.onCheck({$machine: machine});\n        };\n\n        // Sorts the table by predicate.\n        scope.sortTable = function(predicate) {\n            scope.table.predicate = predicate;\n            scope.table.reverse = !scope.table.reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        scope.selectColumnOrSort = function(predicate) {\n            if(scope.table.column !== predicate) {\n                scope.table.column = predicate;\n            } else {\n                scope.sortTable(predicate);\n            }\n        };\n\n        // Return true if spinner should be shown.\n        scope.showSpinner = function(machine) {\n            return SPINNER_STATUSES.indexOf(machine.status_code) > -1;\n        };\n\n        scope.showFailedTestWarning = function(machine) {\n            if(scope.showSpinner(machine)) {\n                return false;\n            }\n            switch(machine.status_code) {\n                // NEW\n                case 0:\n                // COMMISSIONING\n                case 1:\n                // FAILED_COMMISSIONING\n                case 2:\n                // TESTING\n                case 21:\n                // FAILED_TESTING\n                case 22:\n                    return false;\n            }\n            switch(machine.testing_status) {\n                // Tests havn't been run\n                case -1:\n                // Tests have passed\n                case 2:\n                    return false;\n            }\n            return true;\n        };\n\n        // Return true if the other node status should be shown.\n        scope.showNodeStatus = function(machine) {\n            // -1 means tests havn't been run, 2 means tests have passed.\n            if(!scope.showSpinner(machine) &&\n               !scope.showFailedTestWarning(machine) &&\n               machine.other_test_status !== -1 &&\n               machine.other_test_status !== 2) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Returns the release title from osinfo.\n        scope.getReleaseTitle = function(os_release) {\n          if(angular.isArray(scope.table.osinfo.releases)) {\n            for(i = 0; i < scope.table.osinfo.releases.length; i++) {\n              var release = scope.table.osinfo.releases[i];\n              if(release[0] === os_release) {\n                return release[1];\n              }\n            }\n          }\n          return os_release;\n        };\n\n        // Returns the status text to show.\n        scope.getStatusText = function(machine) {\n          var showRelease = ['Deploying', 'Deployed'];\n          if(showRelease.indexOf(machine.status) === -1) {\n            return machine.status;\n          } else {\n            var releaseTitle = scope.getReleaseTitle(\n              machine.osystem + '/' + machine.distro_series);\n            if(machine.osystem === \"ubuntu\") {\n              releaseTitle = releaseTitle.split('\"')[0].trim();\n            }\n            if(machine.status === \"Deployed\") {\n              return releaseTitle;\n            }\n            if(machine.status === \"Deploying\") {\n              return machine.status + ' ' + releaseTitle;\n            }\n          }\n        };\n\n        // When the list of filtered machines change update the all checkbox.\n        scope.$watchCollection(\"table.filteredMachines\", function() {\n          scope.updateAllChecked();\n          scope.onListingChange({$machines: scope.table.filteredMachines});\n        });\n\n        // Load the required managers and start polling for osinfo.\n        ManagerHelperService.loadManagers(\n          scope, [MachinesManager, GeneralManager]).then(function() {\n            GeneralManager.startPolling(scope, \"osinfo\");\n          });\n\n        // Stop polling when the scope is destroyed.\n        scope.$on(\"$destroy\", function() {\n          GeneralManager.stopPolling(scope, \"osinfo\");\n        });\n      }\n    };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Notifications.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject notifications.html into the template cache.\n    $templateCache.put('directive/templates/notifications.html', [\n      '<div class=\"u-no-margin--top\" data-ng-repeat=\"category in categories\"',\n        ' data-ng-init=\"notifications = categoryNotifications[category]\">',\n        // 1 notification.\n        '<span class=\"row\" data-ng-if=\"notifications.length == 1\">',\n          '<ul class=\"p-list\" data-ng-class=\"{\\'is-open\\': shown}\">',\n            '<li data-ng-repeat=\"notification in notifications\"',\n            ' class=\"p-notification\"',\n            ' data-ng-class=\"categoryClasses[notification.category]\">',\n              '<p class=\"p-notification__response\">',\n                '<span data-ng-bind-html=\"notification.message\"></span> ',\n                '<a class=\"p-notification__action\"',\n                ' data-ng-click=\"dismiss(notification)\">Dismiss</a>',\n              '</p>',\n            '</li>',\n          '</ul>',\n        '</span>',\n        // 2 or more notifications.\n        '<div class=\"row p-notification--group\" ',\n             'data-ng-if=\"notifications.length >= 2\"',\n        ' data-ng-init=\"shown = false\">',\n            '<div data-ng-class=\"categoryClasses[notifications[0].category]\">',\n                '<a aria-label=\"{$ notifications.length $} ',\n                    '{$ categoryTitles[category] $}, click to open messages.\"',\n                    ' maas-enter=\"shown = !shown\"',\n                    ' class=\"p-notification__toggle\"',\n                    ' data-ng-click=\"shown = !shown\">',\n                    '<p class=\"p-notification__response\">',\n                        '<span class=\"p-notification__status\"',\n                        ' data-count=\"{$ notifications.length $}\"',\n                        ' data-ng-bind=\"notifications.length + \\' \\' + ',\n                                       'categoryTitles[category]\"></span>',\n                        '<small>',\n                        '<i data-ng-class=\"{ \\'p-icon--expand\\': !shown,',\n                        ' \\'p-icon--collapse\\': shown }\"></i></small>',\n                    '</p>',\n                '</a>',\n                '<ul class=\"p-list--divided\" ',\n                    'data-ng-class=\"{\\'u-hide\\': !shown}\">',\n                    '<li data-ng-repeat=\"notification in notifications\"',\n                    ' class=\"p-list__item\">',\n                    '<p class=\"p-notification__response\">',\n                        '<span data-ng-bind-html=\"notification.message\">',\n                        '</span> ',\n                        '<a class=\"p-notification__action\"',\n                        ' data-ng-click=\"dismiss(notification)\">Dismiss</a>',\n                    '</p>',\n                    '</li>',\n                '</ul>',\n            '</div>',\n        '</div>',\n      '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasNotifications', [\n    \"NotificationsManager\", \"ManagerHelperService\",\n    function(NotificationsManager, ManagerHelperService) {\n        return {\n            restrict: \"E\",\n            templateUrl: 'directive/templates/notifications.html',\n            link: function($scope, element, attrs) {\n                ManagerHelperService.loadManager($scope, NotificationsManager);\n                $scope.notifications = NotificationsManager.getItems();\n                $scope.dismiss = angular.bind(\n                    NotificationsManager, NotificationsManager.dismiss);\n\n                $scope.categories = [\n                    \"error\",\n                    \"warning\",\n                    \"success\",\n                    \"info\"\n                ];\n                $scope.categoryTitles = {\n                    error: \"Errors\",\n                    warning: \"Warnings\",\n                    success: \"Successes\",\n                    info: \"Other messages\"\n                };\n                $scope.categoryClasses = {\n                    error: \"p-notification--negative\",\n                    warning: \"p-notification--caution\",\n                    success: \"p-notification--positive\",\n                    info: \"p-notification\"  // No suffix.\n                };\n                $scope.categoryNotifications = {\n                    error: [],\n                    warning: [],\n                    success: [],\n                    info: []\n                };\n\n                $scope.$watchCollection(\n                    \"notifications\", function() {\n                        var cns = $scope.categoryNotifications;\n                        angular.forEach(\n                            $scope.categories, function(category) {\n                                cns[category].length = 0;\n                            }\n                        );\n                        angular.forEach(\n                            $scope.notifications, function(notification) {\n                                cns[notification.category].push(notification);\n                            }\n                        );\n                    }\n                );\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * OS/Release select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the os-select.html into the template cache.\n    $templateCache.put('directive/templates/os-select.html', [\n        '<div class=\"form__group-input\"> ',\n            '<select name=\"os\" class=\"u-margin--right\" ',\n                'data-ng-model=\"ngModel.osystem\" ',\n                'data-ng-change=\"selectedOSChanged()\" ',\n                'data-ng-options=\"',\n                'os[0] as os[1] for os in maasOsSelect.osystems\">',\n            '</select>',\n        '</div>',\n        '<div class=\"form__group-input\"> ',\n            '<select name=\"release\" class=\"u-margin--right\" ',\n                'data-ng-model=\"ngModel.release\" ',\n                'data-ng-change=\"selectedReleaseChanged()\" ',\n                'data-ng-options=\"',\n                'release[0] as release[1] for release in releases\">',\n            '</select>',\n        '</div>',\n        '<div class=\"form__group-input\"> ',\n            '<select name=\"hwe_kernel\" data-ng-model=\"ngModel.hwe_kernel\" ',\n                'data-ng-show=\"hwe_kernels.length\"',\n                'data-ng-options=\"',\n                'hwe_kernel[0] as hwe_kernel[1] for hwe_kernel ',\n                'in hwe_kernels\">',\n                '<option value=\"\">Default kernel</option>',\n            '</select>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasOsSelect', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            maasOsSelect: '=',\n            ngModel: '='\n        },\n        templateUrl: 'directive/templates/os-select.html',\n        controller: function($scope) {\n\n            // Return only the selectable releases based on the selected os.\n            function getSelectableReleases() {\n                if(angular.isObject($scope.maasOsSelect) &&\n                    angular.isArray($scope.maasOsSelect.releases)) {\n                    var i, allChoices = $scope.maasOsSelect.releases;\n                    var choice, choices = [];\n                    for(i = 0; i < allChoices.length; i++) {\n                        choice = allChoices[i];\n                        if(choice[0].indexOf($scope.ngModel.osystem + '/') > -1)\n                        {\n                            choices.push(choice);\n                        }\n                    }\n                    return choices;\n                }\n                return [];\n            }\n\n            // Return only the selectable kernels based on the selected os.\n            function getSelectableKernels() {\n                if(angular.isObject($scope.maasOsSelect) &&\n                    angular.isObject($scope.maasOsSelect.kernels) &&\n                    angular.isString($scope.ngModel.osystem) &&\n                    angular.isString($scope.ngModel.release)) {\n                    var os = $scope.ngModel.osystem;\n                    var release = $scope.ngModel.release.split('/')[1];\n                    var osKernels = $scope.maasOsSelect.kernels[os];\n                    if(angular.isObject(osKernels)) {\n                        return osKernels[release];\n                    }\n                }\n                return [];\n            }\n\n            // Returns the defaultValue if its in the choices array. Otherwise\n            // it returns the weighted choice if present, followed by the\n            // first choice.\n            function getDefaultOrFirst(array, defaultValue, weightValue) {\n                var i, first, weightedPresent = false;\n                for(i = 0; i < array.length; i++) {\n                    if(angular.isUndefined(first)) {\n                        first = array[i][0];\n                    }\n                    if(array[i][0] === defaultValue) {\n                        return defaultValue;\n                    }\n                    if(angular.isString(weightValue) &&\n                        array[i][0] === weightValue) {\n                        weightedPresent = true;\n                    }\n                }\n                if(weightedPresent) {\n                    return weightValue;\n                }\n                if(angular.isUndefined(first)) {\n                    return null;\n                }\n                return first;\n            }\n\n            // Sets the default selected values for the ngModel. Only sets the\n            // values once the maasOsSelect is populated. Sets the selected\n            // osystem to default_osystem if present, followed by 'ubuntu' if\n            // present, followed by the first available. Sets the selected\n            // release to the default_release if present, followed by the first\n            // available.\n            function setDefault() {\n                // Do nothing if model is already set.\n                if(angular.isString($scope.ngModel.osystem) &&\n                    angular.isString($scope.ngModel.release)) {\n                    return;\n                }\n                // Do nothing if the default is not set.\n                if(angular.isUndefined($scope.maasOsSelect.default_osystem) ||\n                    angular.isUndefined($scope.maasOsSelect.default_release)) {\n                    return;\n                }\n\n                // Set the intial defaults.\n                $scope.ngModel.osystem = getDefaultOrFirst(\n                    $scope.maasOsSelect.osystems,\n                    $scope.maasOsSelect.default_osystem, \"ubuntu\");\n                $scope.releases = getSelectableReleases();\n                $scope.ngModel.release = getDefaultOrFirst(\n                    $scope.releases,\n                    $scope.ngModel.osystem + \"/\" +\n                    $scope.maasOsSelect.default_release);\n                $scope.ngModel.kernel = \"\";\n            }\n\n            // Defaults\n            if(!angular.isObject($scope.ngModel)) {\n                $scope.ngModel = {\n                    osystem: null,\n                    release: null,\n                    hwe_kernel: null\n                };\n            }\n            $scope.releases = getSelectableReleases();\n            $scope.hwe_kernels = getSelectableKernels();\n\n            // Add the reset function to ngModel, allowing users to call\n            // this function to reset the defauls.\n            $scope.ngModel.$reset = function() {\n                $scope.ngModel.osystem = null;\n                $scope.ngModel.release = null;\n                $scope.ngModel.hwe_kernel = null;\n                setDefault();\n            };\n\n            // If the available os change update the available releases and\n            // set the default.\n            $scope.$watch(\"maasOsSelect.releases\", function() {\n                $scope.releases = getSelectableReleases();\n                setDefault();\n            });\n\n            // If the available release change update the available kernels and\n            // set the default.\n            $scope.$watch(\"maasOsSelect.kernels\", function() {\n                $scope.hwe_kernels = getSelectableKernels();\n                setDefault();\n            });\n\n            // Updates the default and selectable releases.\n            $scope.selectedOSChanged = function() {\n                $scope.releases = getSelectableReleases();\n                $scope.hwe_kernels = getSelectableKernels();\n                $scope.ngModel.release = null;\n                $scope.ngModel.hwe_kernel = null;\n                if($scope.releases.length > 0) {\n                    $scope.ngModel.release = $scope.releases[0][0];\n                }\n            };\n\n            // Updates the default and selectable kernels.\n            $scope.selectedReleaseChanged = function() {\n                $scope.hwe_kernels = getSelectableKernels();\n                $scope.ngModel.hwe_kernel = null;\n            };\n        }\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Placeholder directive.\n *\n * Allows the placeholder attribute on an element to be dynamic.\n */\n\n\nangular.module('MAAS').directive('ngPlaceholder', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            ngPlaceholder: \"=\"\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('ngPlaceholder', function() {\n                element[0].placeholder = scope.ngPlaceholder;\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Pod parameters directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the power-parameters.html into the template cache.\n    $templateCache.put('directive/templates/pod-parameters.html', [\n        '<maas-obj-field type=\"options\" key=\"type\" label=\"Pod type\" ',\n          'label-width=\"2\" input-width=\"5\" ',\n          'placeholder=\"Select the pod type\" ',\n          'options=\"type.name as type.description for type in podTypes\" ',\n          'ng-if=\"!hideType\">',\n        '</maas-obj-field>',\n        '<div pod-fields></div>'\n    ].join(''));\n}]);\n\n\nangular.module('MAAS').directive(\n    'maasPodParameters', [\n        '$compile', 'GeneralManager', 'ManagerHelperService', function(\n        $compile, GeneralManager, ManagerHelperService) {\n    return {\n        restrict: \"E\",\n        require: \"^^maasObjForm\",\n        scope: {\n          hideType: '='\n        },\n        templateUrl: 'directive/templates/pod-parameters.html',\n        link: function(scope, element, attrs, controller) {\n            scope.powerTypes = GeneralManager.getData('power_types');\n            scope.podTypes = [];\n            scope.type = null;\n\n            var childScope, fieldsElement = angular.element(\n                element.find('div[pod-fields]'));\n\n            // Function to update the editable fields.\n            var updateFields = function(podType) {\n                var type = null;\n                var i;\n                for(i = 0; i < scope.podTypes.length; i++) {\n                    if(scope.podTypes[i].name === podType) {\n                      type = scope.podTypes[i];\n                    }\n                }\n\n                fieldsElement.empty();\n                if(childScope) {\n                  childScope.$destroy();\n                }\n                if(angular.isObject(type)) {\n                  var html = '<maas-obj-field-group>';\n                  angular.forEach(type.fields, function(field) {\n                      if(field.scope === 'bmc') {\n                          if(field.name === 'power_pass') {\n                              html += (\n                                  '<maas-obj-field type=\"password\" key=\"');\n                          } else {\n                              html += (\n                                  '<maas-obj-field type=\"text\" key=\"');\n                          }\n                          html += (field.name + '\" label=\"' + field.label +\n                            '\" ' + 'label-width=\"2\" input-width=\"5\">' +\n                            '</maas-obj-field>');\n                      }\n                  });\n                  html += '</maas-obj-field-group>';\n                  childScope = scope.$new();\n                  var ele = angular.element(html);\n                  fieldsElement.append(ele);\n                  $compile(ele)(\n                      childScope, undefined, {maasObjForm: controller});\n                }\n            };\n\n            // Return the selected type.\n            var getType = function() {\n                if(scope.hideType) {\n                    return controller.obj.type;\n                } else {\n                    return controller.getValue('type');\n                }\n            };\n\n            // Update the fields when the type changes.\n            scope.$watch(getType, updateFields);\n\n            // Update the pod types when the power types is updated.\n            scope.$watchCollection(\"powerTypes\", function() {\n                scope.podTypes.length = 0;\n                angular.forEach(scope.powerTypes, function(type) {\n                    if(type.driver_type === \"pod\") {\n                        scope.podTypes.push(type);\n                    }\n                });\n                updateFields(getType());\n            });\n\n            // Load the general manager.\n            ManagerHelperService.loadManager(scope, GeneralManager);\n        }\n    };\n}]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Power parameters directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the power-parameters.html into the template cache.\n    $templateCache.put('directive/templates/power-parameters.html', [\n        '<div class=\"p-form__group\">',\n            '<label for=\"power-type\" ',\n                    'class=\"form__group-label col-2\">Power type</label>',\n            '<div class=\"form__group-input col-3\">',\n                '<select name=\"power-type\" id=\"power-type\" ',\n                    'data-ng-disabled=\"ngDisabled\" ',\n                    'data-ng-class=\"{ invalid: !ngModel.type }\" ',\n                    'data-ng-model=\"ngModel.type\" ',\n                    'data-ng-options=\"',\n                    'type as type.description ',\n                    'for type in maasPowerParameters track by type.name\">',\n                    '<option value=\"\" disabled selected>',\n                        'Select your power type',\n                    '</option>',\n                '</select>',\n            '</div>',\n        '</div>',\n        '<div class=\"p-form__group\" ',\n            'data-ng-repeat=\"field in ngModel.type.fields\">',\n            '<label for=\"{$ field.name $}\" class=\"form__group-label col-2\">',\n                '{$ field.label $}',\n            '</label>',\n            '<div class=\"form__group-input col-3\">',\n                '<maas-power-input field=\"field\" ',\n                    'data-ng-disabled=\"ngDisabled\" ',\n                    'data-ng-model=\"ngModel.parameters[field.name]\">',\n            '</div>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasPowerInput', ['$compile',\n    function($compile) {\n        return {\n            restrict: \"E\",\n            require: \"ngModel\",\n            scope: {\n                field: '=',\n                ngModel: '='\n            },\n            link: function(scope, element, attrs) {\n                var type = scope.field.field_type;\n                var req = scope.field.required ? 'required=\"required\" ' : '';\n                var html = \"\";\n                if(type === \"string\" || type === \"mac_address\" ||\n                   type === \"password\") {\n                    // Build an input element with the correct attributes.\n                    var input_type = 'type=\"text\"';\n                    if(type === \"password\") {\n                        // If the input field is a password field, display it\n                        // as text or password depending on if we're editing\n                        // the fields.\n                        input_type = \"data-ng-type=\\\"ngModel.editing && \" +\n                            \"'text' || 'password'\\\"\";\n                    }\n                    html =\n                        '<input ' + input_type + ' ' +\n                        'name=\"' + scope.field.name + '\" ' +\n                        req + 'data-ng-model=\"' + attrs.ngModel + '\" ' +\n                        'data-ng-disabled=\"' + attrs.ngDisabled + '\" ';\n\n                    // Add mac address validation.\n                    if(type === \"mac_address\") {\n                        html +=\n                            'data-ng-pattern=\"' +\n                            '/^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$/\"';\n                    }\n                    html += '>';\n\n                    // Set the default value for the input on the model.\n                    if(angular.isUndefined(scope.ngModel)) {\n                        scope.ngModel = scope.field[\"default\"];\n                    }\n                } else if(type === \"choice\") {\n                    // Build a select element with the correct attributes.\n                    html =\n                        '<select name=\"' + scope.field.name + '\"' +\n                        req + 'data-ng-model=\"' + attrs.ngModel + '\" ' +\n                        'data-ng-disabled=\"' + attrs.ngDisabled + '\" ' +\n                        'data-ng-options=\"' +\n                        'choice[0] as choice[1] for choice in field.choices' +\n                        '\">';\n                    html += '</select>';\n\n                    // Set the default choice on the model.\n                    if(angular.isUndefined(scope.ngModel)) {\n                        var i;\n                        for(i = 0; i < scope.field.choices.length; i++) {\n                            var choice = scope.field.choices[i];\n                            if(scope.field[\"default\"] === choice[0]) {\n                                scope.ngModel = choice;\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    throw new Error(\"Unknown power_type: \"+ type);\n                }\n\n                // Replace the element with the compiled html using the parents\n                // scope. The parent scope is used because we want to build the\n                // element as if it was in the parent scope, not the scope that\n                // is defined in this directive.\n                element.replaceWith($compile(html)(scope.$parent));\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasPowerParameters', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            maasPowerParameters: '=',\n            ngModel: '=',\n            ngDisabled: '='\n        },\n        templateUrl: 'directive/templates/power-parameters.html'\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Proxy settings directive.\n*/\n\nangular.module('MAAS').directive('maasProxySettings', [\n    '$sce', 'ConfigsManager', 'ManagerHelperService', 'JSONService',\n    function($sce, ConfigsManager, ManagerHelperService, JSONService) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            templateUrl: 'static/partials/proxy-settings.html',\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                ManagerHelperService.loadManager(\n                    $scope, ConfigsManager).then(function() {\n                    $scope.loading = false;\n                    $scope.httpProxy = ConfigsManager.getItemFromList(\n                        \"http_proxy\");\n                    $scope.enableHttpProxy = ConfigsManager.getItemFromList(\n                        \"enable_http_proxy\");\n                    $scope.usePeerProxy = ConfigsManager.getItemFromList(\n                        \"use_peer_proxy\");\n                    if ($scope.enableHttpProxy.value) {\n                        if ($scope.httpProxy.value) {\n                            if ($scope.usePeerProxy.value) {\n                                $scope.proxy_type = \"peer-proxy\";\n                            } else {\n                                $scope.proxy_type = \"external-proxy\";\n                            }\n                        } else {\n                            $scope.proxy_type = \"builtin-proxy\";\n                        }\n                    } else {\n                        $scope.proxy_type = \"no-proxy\";\n                    }\n                });\n            }\n        };\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Release name.\n *\n * Converts the provided release name into the release title.\n */\n\n\nangular.module('MAAS').directive('maasReleaseName', [\n    'GeneralManager', 'ManagerHelperService',\n    function(GeneralManager, ManagerHelperService) {\n    return {\n        restrict: \"A\",\n        scope: {\n          releaseName: \"=maasReleaseName\"\n        },\n        link: function(scope, element, attrs) {\n            scope.osinfo = GeneralManager.getData(\"osinfo\");\n\n            // Gets the release name.\n            var getName = function() {\n                if(angular.isArray(scope.osinfo.releases)) {\n                  for(i = 0; i < scope.osinfo.releases.length; i++) {\n                      var release = scope.osinfo.releases[i];\n                      if(release[0] === scope.releaseName) {\n                          return release[1];\n                      }\n                  }\n                }\n                return scope.releaseName;\n            };\n\n            // Sets the text inside the element.\n            var setText = function() {\n                element.text(getName());\n            };\n\n            // Update the text when the release name or osinfo changes.\n            scope.$watch('releaseName', function() {\n              setText();\n            });\n            scope.$watchCollection('osinfo.releases', function() {\n              setText();\n            });\n\n            // Load the manager and start polling.\n            ManagerHelperService.loadManager(scope, GeneralManager).then(\n                function() {\n                    GeneralManager.startPolling(scope, 'osinfo');\n                });\n\n            // Stop polling when the scope is destroyed.\n            scope.$on('$destroy', function() {\n              GeneralManager.stopPolling(scope, 'osinfo');\n            });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Release options directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the release-options.html into the template cache.\n    $templateCache.put('directive/templates/release-options.html', [\n        '<div class=\"form__group u-margin--right u-margin--top-tiny\">',\n            '<input class=\"checkbox margin-right\" id=\"diskErase\" ',\n                'type=\"checkbox\" data-ng-model=\"maasReleaseOptions.erase\" ',\n                'data-ng-disabled=\"globalOptions.erase\" ',\n                'data-ng-change=\"onEraseChange()\">',\n            '<label class=\"checkbox-label\" for=\"diskErase\">',\n                'Erase disks before releasing',\n            '</label>',\n        '</div>',\n        '<div class=\"form__group u-margin--right u-margin--top-tiny\">',\n            '<input class=\"checkbox margin-right\" id=\"secureErase\" ',\n                'type=\"checkbox\" ',\n                'data-ng-model=\"maasReleaseOptions.secureErase\" ',\n                'data-ng-disabled=\"!maasReleaseOptions.erase\">',\n            '<label class=\"checkbox-label\" for=\"secureErase\">',\n                'Use secure erase',\n            '</label>',\n        '</div>',\n        '<div class=\"form__group u-margin--top-tiny\">',\n            '<input class=\"checkbox\" id=\"quickErase\" type=\"checkbox\" ',\n                'data-ng-model=\"maasReleaseOptions.quickErase\" ',\n                'data-ng-disabled=\"!maasReleaseOptions.erase\">',\n            '<label class=\"checkbox-label\" for=\"quickErase\">',\n                'Use quick erase (not secure)',\n            '</label>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasReleaseOptions', [\n    'GeneralManager', function(GeneralManager) {\n        return {\n            restrict: \"A\",\n            scope: {\n                maasReleaseOptions: '='\n            },\n            templateUrl: 'directive/templates/release-options.html',\n            link: function(scope, element, attrs) {\n                // On click of enabling erasing set the others to the\n                // global default value.\n                scope.onEraseChange = function() {\n                    if(scope.maasReleaseOptions.erase) {\n                        scope.maasReleaseOptions.secureErase = (\n                            scope.globalOptions.secure_erase);\n                        scope.maasReleaseOptions.quickErase = (\n                            scope.globalOptions.quick_erase);\n                    } else {\n                        scope.maasReleaseOptions.secureErase = false;\n                        scope.maasReleaseOptions.quickErase = false;\n                    }\n                };\n\n                // Watch the global options. Once set update the defaults\n                // of maasReleaseOptions.\n                scope.globalOptions = GeneralManager.getData(\n                    \"release_options\");\n                scope.$watch('globalOptions', function() {\n                    if(angular.isDefined(scope.globalOptions.erase)) {\n                        // Set the initial defauls for the release options.\n                        scope.maasReleaseOptions.erase = (\n                            scope.globalOptions.erase);\n                        scope.onEraseChange();\n                    }\n                }, true);\n            }\n        };\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Script results listing directive.\n*\n*/\n\nangular.module('MAAS').directive('maasScriptResultsList', function() {\n    return {\n        templateUrl: (\n        'static/partials/script-results-list.html?v=' + (\n            MAAS_config.files_version))\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script runtime counter directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script_runtime.html into the template cache.\n    $templateCache.put('directive/templates/script_runtime.html', [\n        '<span data-ng-if=\"(scriptStatus === 1 || scriptStatus === 7) &&',\n        \" estimatedRunTime !== 'Unknown'\" + '\">{{counter}} of ',\n        '~{{estimatedRunTime}}</span>',\n        '<span data-ng-if=\"(scriptStatus === 1 || scriptStatus === 7) &&',\n        \" estimatedRunTime == 'Unknown'\" + '\">{{counter}}</span>',\n        '<span data-ng-if=\"scriptStatus === 0 && estimatedRunTime !== ',\n        \"'Unknown'\" + '\">~{{estimatedRunTime}}</span>',\n        '<span data-ng-if=\"scriptStatus !== 0 && scriptStatus !== 1 ',\n        '&& scriptStatus !== 7\">{{runTime}}</span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasScriptRunTime', function() {\n    return {\n        restrict: \"A\",\n        require: [\"startTime\", \"runTime\", \"estimatedRunTime\", \"scriptStatus\"],\n        scope: {\n            startTime: '=',\n            runTime: '@',\n            estimatedRunTime: '@',\n            scriptStatus: '='\n        },\n        templateUrl: 'directive/templates/script_runtime.html',\n        controller: function($scope, $interval) {\n            $scope.counter = \"0:00:00\";\n\n            function incrementCounter() {\n                if(($scope.scriptStatus === 1 || $scope.scriptStatus === 7) &&\n                    $scope.startTime) {\n                    var start_date = new Date(null);\n                    start_date.setSeconds($scope.startTime);\n                    var seconds = Math.floor((Date.now() - start_date) / 1000);\n                    var minutes = Math.floor(seconds / 60);\n                    var hours = Math.floor(minutes / 60);\n                    var days = Math.floor(hours / 24);\n                    hours = hours - (days * 24);\n                    minutes = minutes - (days * 24 * 60) - (hours * 60);\n                    seconds = seconds - (days * 24 * 60 * 60) -\n                        (hours * 60 * 60) - (minutes * 60);\n                    var new_counter = \"\";\n                    // This outputs the same format used by Python. It is\n                    // import to use the same format as when scripts are not\n                    // running runtime is taken from the region using Python's\n                    // format.\n                    if(days === 1) {\n                        new_counter = days + \" day, \";\n                    }else if(days > 1) {\n                        new_counter = days + \" days, \";\n                    }\n                    new_counter += hours + \":\";\n                    if(minutes < 10) {\n                        new_counter += \"0\" + minutes + \":\";\n                    } else {\n                        new_counter += minutes + \":\";\n                    }\n                    if(seconds < 10) {\n                        new_counter += \"0\" + seconds;\n                    } else {\n                        new_counter += seconds;\n                    }\n                    $scope.counter = new_counter;\n                }\n            }\n\n            // Update the counter on init, start the interval and stop it when\n            // the directive is destroyed.\n            incrementCounter();\n            var promise = $interval(incrementCounter, 1000);\n            $scope.$on('$destroy', function() {\n              $interval.cancel(promise);\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script-select.html into the template cache.\n    $templateCache.put('directive/templates/script-select.html', [\n        '<tags-input data-ng-model=\"ngModel\" placeholder=\"Select scripts\" ',\n                'key-property=\"id\" display-property=\"name\" min-length=1',\n                'on-tag-adding=\"onTagAdding($tag)\" spellcheck=\"false\"',\n                'add-from-autocomplete-only=\"true\" on-tag-removed=\"refocus()\"',\n                'on-tag-adding=\"onTagAdding($tag)\" on-tag-added=\"refocus()\">',\n            '<auto-complete source=\"getScripts($query)\" min-length=\"0\" ',\n                    'load-on-down-arrow=\"true\" load-on-focus=\"true\" ',\n                    'load-on-empty=\"true\" template=\"script-template\" ',\n                    'max-results-to-show=\"1000\">',\n            '</auto-complete>',\n        '</tags-input>',\n        '<script type=\"text/ng-template\" id=\"script-template\">',\n            '<div>',\n                '<p>',\n                    '{{data.name}} {{data.tags_string}}',\n                '</p>',\n                '<span class=\"p-form-help-text\">',\n                    '{{data.description}}',\n                '</span>',\n            '</div>',\n        '</script>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive(\n        'maasScriptSelect',\n        ['$q', 'ScriptsManager', 'ManagerHelperService',\n        function($q, ScriptsManager, ManagerHelperService) {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            ngModel: '=',\n            scriptType: '='\n        },\n        templateUrl: 'directive/templates/script-select.html',\n        link: function($scope, element, attrs, ngModelCtrl) {\n\n            $scope.allScripts = ScriptsManager.getItems();\n            $scope.scripts = [];\n            $scope.getScripts = function(query) {\n                $scope.scripts.length = 0;\n                angular.forEach($scope.allScripts, function(script) {\n                    if(script.script_type === $scope.scriptType &&\n                            script.name.indexOf(query) >= 0) {\n                        script.tags_string = '';\n                        angular.forEach(script.tags, function (tag) {\n                            if(script.tags_string === '') {\n                                script.tags_string = '(' + tag;\n                            } else {\n                                script.tags_string += ', ' + tag;\n                            }\n                        });\n                        if(script.tags_string !== '') {\n                            script.tags_string += ')';\n                        }\n                        $scope.scripts.push(script);\n                    }\n                });\n                return {\n                    data: $scope.scripts\n                };\n            };\n            $scope.onTagAdding = function(tag) {\n                return tag.id !== undefined;\n            };\n\n            $scope.refocus = function() {\n                var tagsInput = element.find('tags-input');\n                var tagsInputScope = tagsInput.isolateScope();\n                tagsInputScope.eventHandlers.input.change('');\n                tagsInputScope.eventHandlers.input.focus();\n                tagsInput.find('input').focus();\n            };\n\n            if(!angular.isArray($scope.ngModel)) {\n                $scope.ngModel = [];\n            }\n            ManagerHelperService.loadManager($scope, ScriptsManager).then(\n                function() {\n                    $scope.ngModel.length = 0;\n                    angular.forEach($scope.allScripts, function(script) {\n                        if(script.script_type === $scope.scriptType &&\n                           script.for_hardware.length === 0) {\n                            if($scope.scriptType === 0) {\n                                // By default MAAS runs all custom\n                                // commissioning scripts in addition to all\n                                // builtin commissioning scripts.\n                                $scope.ngModel.push(script);\n                            } else if($scope.scriptType === 2 &&\n                                    script.tags.indexOf('commissioning') >= 0) {\n                                // By default MAAS runs testing scripts which\n                                // have been tagged 'commissioning'\n                                $scope.ngModel.push(script);\n                            }\n                        }\n                    });\n                }\n            );\n        }\n    };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script status icon select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script_status.html into the template cache.\n    $templateCache.put('directive/templates/script_status.html', [\n        '<span data-ng-class=\"icon\" data-ng-show=\"show\"></span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasScriptStatus', function() {\n    return {\n        restrict: \"A\",\n        require: \"scriptStatus\",\n        scope: {\n            scriptStatus: '='\n        },\n        templateUrl: 'directive/templates/script_status.html',\n        controller: function($scope) {\n            function getIcon() {\n                $scope.show = true;\n                switch($scope.scriptStatus) {\n                    // SCRIPT_STATUS.PENDING\n                    case 0:\n                        $scope.icon = 'p-icon--pending';\n                        break;\n                    // SCRIPT_STATUS.RUNNING\n                    case 1:\n                    // SCRIPT_STATUS.INSTALLING\n                    case 7:\n                        $scope.icon = 'p-icon--running';\n                        break;\n                    // SCRIPT_STATUS.PASSED\n                    case 2:\n                        $scope.icon = 'p-icon--pass';\n                        break;\n                    // SCRIPT_STATUS.FAILED\n                    case 3:\n                    // SCRIPT_STATUS.ABORTED\n                    case 5:\n                    // SCRIPT_STATUS.DEGRADED\n                    case 6:\n                    // SCRIPT_STATUS.FAILED_INSTALLING\n                    case 8:\n                        $scope.icon = 'p-icon--power-error';\n                        break;\n                    // SCRIPT_STATUS.TIMEDOUT\n                    case 4:\n                        $scope.icon = 'p-icon--timed-out';\n                        break;\n                    case -1:\n                        // No scripts have been run.\n                        $scope.show = false;\n                        break;\n                    default:\n                        $scope.icon = 'p-icon--help';\n                        break;\n                }\n            }\n\n            getIcon();\n\n            $scope.$watch(\"scriptStatus\", function() {\n                getIcon();\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * SSH keys directive.\n*/\n\nangular.module('MAAS').directive('maasSshKeys', [\n    '$sce', 'SSHKeysManager', 'ManagerHelperService', 'JSONService',\n    function($sce, SSHKeysManager, ManagerHelperService, JSONService) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            templateUrl: (\n                'static/partials/ssh-keys.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.keys = SSHKeysManager.getItems();\n                $scope.groupedKeys = [];\n                $scope.add = {\n                    source: 'lp',\n                    authId: '',\n                    key: '',\n                    error: null,\n                    saving: false\n                };\n                $scope.sourceTitles = {\n                    'lp': 'Launchpad',\n                    'gh': 'Github',\n                    'upload': 'Upload'\n                };\n                $scope.openRow = null;\n                $scope.rowMode = null;\n\n                // Expose trustAsHtml on the scope for the view to use.\n                $scope.trustAsHtml = $sce.trustAsHtml;\n\n                // Open a row.\n                $scope.open = function(obj, mode) {\n                    $scope.openRow = obj.id;\n                    $scope.rowMode = mode;\n                };\n\n                // Close the open row.\n                $scope.close = function() {\n                    $scope.openRow = null;\n                };\n\n                // Returns true if the key can be imported.\n                $scope.canImportKeys = function() {\n                    if($scope.add.saving) {\n                        return false;\n                    } else if ($scope.add.source === 'lp' ||\n                        $scope.add.source === 'gh') {\n                        return $scope.add.authId.length > 0;\n                    } else {\n                        return $scope.add.key.length > 0;\n                    }\n                };\n\n                // Called to import the key.\n                $scope.importKeys = function() {\n                    if(!$scope.canImportKeys()) {\n                        return;\n                    }\n                    $scope.add.error = null;\n                    $scope.add.saving = true;\n                    if($scope.add.source === 'lp' ||\n                        $scope.add.source === 'gh') {\n                        SSHKeysManager.importKeys({\n                            'protocol': $scope.add.source,\n                            'auth_id': $scope.add.authId\n                        }).then(function() {\n                            $scope.add.saving = false;\n                            $scope.add.source = 'lp';\n                            $scope.add.authId = '';\n                            $scope.add.key = '';\n                        }, function(error) {\n                            $scope.add.saving = false;\n                            var errorJson = JSONService.tryParse(error);\n                            if(angular.isObject(errorJson)) {\n                                if(angular.isArray(errorJson.__all__)) {\n                                    $scope.add.error = errorJson.__all__[0];\n                                } else {\n                                    $scope.add.error = error;\n                                }\n                            } else {\n                                $scope.add.error = error;\n                            }\n                        });\n                    } else {\n                        SSHKeysManager.createItem({\n                            'key': $scope.add.key\n                        }).then(function() {\n                            $scope.add.saving = false;\n                            $scope.add.source = 'lp';\n                            $scope.add.authId = '';\n                            $scope.add.key = '';\n                        }, function(error) {\n                            $scope.add.saving = false;\n                            var errorJson = JSONService.tryParse(error);\n                            if(angular.isObject(errorJson)) {\n                                if(angular.isArray(errorJson.key)) {\n                                    $scope.add.error = errorJson.key[0];\n                                } else if(angular.isArray(errorJson.__all__)) {\n                                    $scope.add.error = errorJson.__all__[0];\n                                } else {\n                                    $scope.add.error = error;\n                                }\n                            } else {\n                                $scope.add.error = error;\n                            }\n                        });\n                    }\n                };\n\n                // Called to delete the selected group of keys.\n                $scope.confirmDelete = function(obj) {\n                    angular.forEach(obj.keys, function(key) {\n                        SSHKeysManager.deleteItem(key);\n                    });\n                };\n\n                // Updates the groupedKeys that is used to render the table.\n                $scope.$watchCollection(\"keys\", function() {\n                    $scope.groupedKeys = [];\n                    var keyMap = {};\n                    angular.forEach($scope.keys, function(key) {\n                        var groupObj, keysource = key.keysource;\n                        if(angular.isObject(keysource)) {\n                            var keysourceKey = (\n                                keysource.protocol + '/' + keysource.auth_id);\n                            groupObj = keyMap[keysourceKey];\n                            if(angular.isObject(groupObj)) {\n                                groupObj.keys.push(key);\n                            } else {\n                                groupObj = {\n                                    id: keysourceKey,\n                                    source: keysource.protocol,\n                                    authId: keysource.auth_id,\n                                    keys: [key]\n                                };\n                                keyMap[keysourceKey] = groupObj;\n                                $scope.groupedKeys.push(groupObj);\n                            }\n                        } else {\n                            groupObj = {\n                                id: 'upload/' + key.id,\n                                source: 'upload',\n                                authId: '',\n                                keys: [key]\n                            };\n                            $scope.groupedKeys.push(groupObj);\n                        }\n                    });\n                });\n\n                ManagerHelperService.loadManager($scope, SSHKeysManager).then(\n                    function() {\n                        $scope.loading = false;\n                    });\n            }\n        };\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Switches listing directive.\n*\n* Renders the switches listing.\n*/\n\n\nangular.module('MAAS').directive('maasSwitchesTable', [\n  'SwitchesManager', 'GeneralManager', 'ManagerHelperService',\n  function (SwitchesManager, GeneralManager, ManagerHelperService) {\n    return {\n      restrict: \"E\",\n      scope: {\n        search: \"=\",\n        ngDisabled: \"&\",\n        switchHasError: \"&\",\n        hideCheckboxes: \"=?\",\n        onListingChange: \"&\",\n        onCheckAll: \"&\",\n        onCheck: \"&\"\n      },\n      templateUrl: (\n        'static/partials/switches-table.html?v=' + (\n          MAAS_config.files_version)),\n      link: function(scope, element, attrs) {\n        // Statuses that should show spinner.\n        var SPINNER_STATUSES = [\n          1,   // commissioning\n          9,   // deploying\n          12,  // releasing\n          14,  // disk erasing\n          17,  // entering rescue mode\n          19,  // exiting rescue mode\n          21   // testing\n        ];\n\n        // Scope variables.\n        scope.table = {\n          column: 'fqdn',\n          predicate: 'fqdn',\n          reverse: false,\n          allViewableChecked: false,\n          switches: SwitchesManager.getItems(),\n          filteredSwitches: [],\n          osinfo: GeneralManager.getData(\"osinfo\")\n        };\n\n        // Ensures that the checkbox for select all is the correct value.\n        scope.updateAllChecked = function() {\n          // Not checked when the filtered switches are empty.\n          if(scope.table.filteredSwitches.length === 0) {\n              scope.table.allViewableChecked = false;\n              return;\n          }\n\n          // Loop through all filtered switches and see if all are checked.\n          var i;\n          for(i = 0; i < scope.table.filteredSwitches.length; i++) {\n              if(!scope.table.filteredSwitches[i].$selected) {\n                  scope.table.allViewableChecked = false;\n                  return;\n              }\n          }\n          scope.table.allViewableChecked = true;\n        };\n\n        // Selects and deselects visible switches.\n        scope.toggleCheckAll = function() {\n          if(scope.table.allViewableChecked) {\n            angular.forEach(\n              scope.table.filteredSwitches, function(switch_) {\n                SwitchesManager.unselectItem(switch_.system_id);\n              });\n          } else {\n            angular.forEach(\n              scope.table.filteredSwitches, function(switch_) {\n                SwitchesManager.selectItem(switch_.system_id);\n              });\n          }\n          scope.updateAllChecked();\n          scope.onCheckAll();\n        };\n\n        // Selects and unselects switch.\n        scope.toggleChecked = function(switch_) {\n          if(SwitchesManager.isSelected(switch_.system_id)) {\n            SwitchesManager.unselectItem(switch_.system_id);\n          } else {\n            SwitchesManager.selectItem(switch_.system_id);\n          }\n          scope.updateAllChecked();\n          scope.onCheck({$switch_: switch_});\n        };\n\n        // Sorts the table by predicate.\n        scope.sortTable = function(predicate) {\n            scope.table.predicate = predicate;\n            scope.table.reverse = !scope.table.reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        scope.selectColumnOrSort = function(predicate) {\n            if(scope.table.column !== predicate) {\n                scope.table.column = predicate;\n            } else {\n                scope.sortTable(predicate);\n            }\n        };\n\n        // Return true if spinner should be shown.\n        scope.showSpinner = function(switch_) {\n          return SPINNER_STATUSES.indexOf(switch_.status_code) > -1;\n        };\n\n        // Returns the release title from osinfo.\n        scope.getReleaseTitle = function(os_release) {\n          if(angular.isArray(scope.table.osinfo.releases)) {\n            for(i = 0; i < scope.table.osinfo.releases.length; i++) {\n              var release = scope.table.osinfo.releases[i];\n              if(release[0] === os_release) {\n                return release[1];\n              }\n            }\n          }\n          return os_release;\n        };\n\n        // Returns the status text to show.\n        scope.getStatusText = function(switch_) {\n          var showRelease = ['Deploying', 'Deployed'];\n          if(showRelease.indexOf(switch_.status) === -1) {\n            return switch_.status;\n          } else {\n            var releaseTitle = scope.getReleaseTitle(\n              switch_.osystem + '/' + switch_.distro_series);\n            if(switch_.osystem === \"ubuntu\") {\n              releaseTitle = releaseTitle.split('\"')[0].trim();\n            }\n            if(switch_.status === \"Deployed\") {\n              return releaseTitle;\n            }\n            if(switch_.status === \"Deploying\") {\n              return switch_.status + ' ' + releaseTitle;\n            }\n          }\n        };\n\n        // When the list of filtered switches change update the all checkbox.\n        scope.$watchCollection(\"table.filteredSwitches\", function() {\n          scope.updateAllChecked();\n          scope.onListingChange({$switches: scope.table.filteredSwitches});\n        });\n\n        // Load the required managers and start polling for osinfo.\n        ManagerHelperService.loadManagers(\n          scope, [SwitchesManager, GeneralManager]).then(function() {\n            GeneralManager.startPolling(scope, \"osinfo\");\n          });\n\n        // Stop polling when the scope is destroyed.\n        scope.$on(\"$destroy\", function() {\n          GeneralManager.stopPolling(scope, \"osinfo\");\n        });\n      }\n    };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Toggle control.\n */\n\nangular.module('MAAS').directive('toggleCtrl',[\n    '$document',\n    function($document) {\n        return {\n            restrict: 'A',\n            link: function($scope, $element, $attr){\n\n                $scope.isToggled = false;\n                $scope.toggleMenu = function() {\n                  $scope.isToggled = !$scope.isToggled;\n                };\n\n                var clickHandler = function(event) {\n                    if ($element.find(event.target).length > 0) {\n                        return;\n                    }\n                    $scope.$apply(function() {\n                        $scope.isToggled = false;\n                    });\n                };\n\n                $document.on('click', clickHandler);\n                $scope.$on('$destroy', function() {\n                    $document.off('click', clickHandler);\n                });\n            }\n        };\n}]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Type directive.\n */\n\nangular.module('MAAS').directive('ngType', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            ngType: \"=\"\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('ngType', function() {\n                valid_types = [\n                    'button',\n                    'checkbox',\n                    'color',\n                    'date ',\n                    'datetime ',\n                    'datetime-local ',\n                    'email ',\n                    'file',\n                    'hidden',\n                    'image',\n                    'month ',\n                    'number ',\n                    'password',\n                    'radio',\n                    'range ',\n                    'reset',\n                    'search',\n                    'submit',\n                    'tel',\n                    'text',\n                    'time ',\n                    'url',\n                    'week'\n                ];\n                if(valid_types.indexOf(scope.ngType) !== -1) {\n                    element[0].type = scope.ngType;\n                }\n                else {\n                    throw new Error(\"Invalid input type: \" + scope.ngType);\n                }\n\n            });\n        }\n    };\n});","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Version reloader.\n *\n * Watches the version reported by the GeneralManager if it changes then\n * the entire page is reloaded by-passing the local browser cache.\n */\n\n\nangular.module('MAAS').directive('maasVersionReloader', [\n    '$window', 'GeneralManager', 'ManagerHelperService', 'LogService',\n    function($window, GeneralManager, ManagerHelperService, LogService) {\n        return {\n            restrict: \"A\",\n            controller: function($scope) {\n                $scope.version = GeneralManager.getData(\"version\");\n\n                // Reload the page by-passing the browser cache.\n                $scope.reloadPage = function() {\n                    // Force cache reload by passing true.\n                    $window.location.reload(true);\n                };\n\n                ManagerHelperService.loadManager($scope, GeneralManager).then(\n                    function() {\n                        GeneralManager.enableAutoReload(true);\n                        LogService.info(\n                            'Version reloader: Monitoring MAAS \"' +\n                            $scope.site + '\"; version', $scope.version.text,\n                            \"via\", $window.location.href);\n                        $scope.$watch(\"version.text\",\n                            function(newValue, oldValue) {\n                                if(newValue !== oldValue) {\n                                    LogService.info(\n                                        \"MAAS version changed from '\" +\n                                        oldValue + \"' to '\" + newValue +\n                                        \"'; forcing reload.\");\n                                    $scope.reloadPage();\n                                }\n                            });\n                    });\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Window Width.\n *\n * Watches the window width and calculates what the inner width of the window.\n * Applying the attribute window-wdith on the parent element and calling\n * data-ng-if=\"width > 768\" you can use this to hide / show elements for mobile\n * development.\n *\n */\n\n\nangular.module('MAAS').directive('windowWidth', [\n    '$window',\n    function ($window) {\n        return {\n            restrict: 'A',\n            link: function($scope, element, attrs){\n                $scope.windowWidth = $window.innerWidth;\n                function onResize(){\n                    // uncomment for only fire when $window.innerWidth change\n                    if ($scope.windowWidth !== $window.innerWidth) {\n                        $scope.windowWidth = $window.innerWidth;\n                        $scope.$apply(function () {\n                            $scope.message = \"Timeout called!\";\n                        });\n                    }\n                }\n\n                function cleanUp() {\n                    angular.element($window).off('resize', onResize);\n                }\n\n                angular.element($window).on('resize', onResize);\n                $scope.$on('$destroy', cleanUp);\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS BootResource Manager\n *\n * Manager for the boot resources. This manager is unique from all the other\n * managers because it uses polling instead of having the region push the\n * information.\n *\n * Why is it polling?\n * The boot resource information is split between the region controller and\n * all rack controllers. The region controller does not cache any information\n * about a rack controllers images it contacts the rack as its source of truth.\n * This means that the client needs to use polling so the region controller\n * can ask each rack controller what is the status of your images.\n */\n\nangular.module('MAAS').factory(\n    'BootResourcesManager',\n    ['$q', '$timeout', 'RegionConnection', 'ErrorService',\n    function($q, $timeout, RegionConnection, ErrorService) {\n\n        // Constructor\n        function BootResourcesManager() {\n            // Set true once been loaded the first time.\n            this._loaded = false;\n\n            // Holds the data recieved from polling.\n            this._data = {};\n\n            // Set to true when polling has been enabled.\n            this._polling = false;\n\n            // The next promise for the polling interval.\n            this._nextPromise = null;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 500;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n        }\n\n        // Return the data.\n        BootResourcesManager.prototype.getData = function() {\n            return this._data;\n        };\n\n        // Return true when data has been loaded.\n        BootResourcesManager.prototype.isLoaded = function() {\n            return this._loaded;\n        };\n\n        // Returns true when currently polling.\n        BootResourcesManager.prototype.isPolling = function() {\n            return this._polling;\n        };\n\n        // Starts the polling for data.\n        BootResourcesManager.prototype.startPolling = function() {\n            if(!this._polling) {\n                this._polling = true;\n                return this._poll();\n            } else {\n                return this._nextPromise;\n            }\n        };\n\n        // Stops the polling for data.\n        BootResourcesManager.prototype.stopPolling = function() {\n            this._polling = false;\n            if(angular.isObject(this._nextPromise)) {\n                $timeout.cancel(this._nextPromise);\n                this._nextPromise = null;\n            }\n        };\n\n        // Load the data from the region.\n        BootResourcesManager.prototype._loadData = function(raiseError) {\n            raiseError = raiseError || false;\n            var self = this;\n            return RegionConnection.callMethod(\"bootresource.poll\").then(\n                function(newData) {\n                    angular.copy(angular.fromJson(newData), self._data);\n                    self._loaded = true;\n                    return self._data;\n                }, function(error) {\n                    if(raiseError) {\n                        ErrorService.raiseError(error);\n                    }\n                });\n        };\n\n        // Registers the next polling attempt.\n        BootResourcesManager.prototype._pollAgain = function(timeout) {\n            var self = this;\n            this._nextPromise = $timeout(function() {\n                self._poll();\n            }, timeout);\n            return this._nextPromise;\n        };\n\n        // Polls for the data from the region.\n        BootResourcesManager.prototype._poll = function() {\n            var self = this;\n\n            // Can only poll if connected.\n            if(!RegionConnection.isConnected()) {\n                return this._pollAgain(this._pollErrorTimeout);\n            }\n\n            return this._loadData(false).then(function(newData) {\n                var pollTimeout = self._pollTimeout;\n                if(!angular.isObject(newData) ||\n                    newData.connection_error ||\n                    !angular.isArray(newData.resources) ||\n                    newData.resources.length === 0) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(pollTimeout);\n                return newData;\n            }, function(error) {\n                // Don't raise the error, just log it and try again.\n                console.log(error);\n                self._pollAgain(self._pollErrorTimeout);\n            });\n        };\n\n        // Loads the resources. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest.\n        BootResourcesManager.prototype.loadItems = function() {\n            var defer = $q.defer();\n            this._loadData(true).then(function() {\n                defer.resolve();\n            });\n            return defer.promise;\n        };\n\n        // Does nothing. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest.\n        BootResourcesManager.prototype.enableAutoReload = function() { };\n\n        // Stop the running image import process.\n        BootResourcesManager.prototype.stopImport = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.stop_import\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the ubuntu options and start the import process.\n        BootResourcesManager.prototype.saveUbuntu = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_ubuntu\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the Ubuntu Core images and start the import process.\n        BootResourcesManager.prototype.saveUbuntuCore = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_ubuntu_core\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the other images and start the import process.\n        BootResourcesManager.prototype.saveOther = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_other\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Fetch the releases and arches from the provided source.\n        BootResourcesManager.prototype.fetch = function(source) {\n            return RegionConnection.callMethod(\"bootresource.fetch\", source);\n        };\n\n        // Delete an image.\n        BootResourcesManager.prototype.deleteImage = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.delete_image\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        return new BootResourcesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Configs Manager\n *\n * Manages all of the config values in the browser. This manager is used for\n * the first-user journey and the settings page.\n */\n\n angular.module('MAAS').factory(\n     'ConfigsManager',\n     ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n             $q, $rootScope, RegionConnection, Manager) {\n\n         function ConfigsManager() {\n             Manager.call(this);\n\n             this._pk = \"name\";\n             this._handler = \"config\";\n\n             // Listen for notify events for the config object.\n             var self = this;\n             RegionConnection.registerNotifier(\"config\",\n                 function(action, data) {\n                     self.onNotify(action, data);\n                 });\n         }\n\n         ConfigsManager.prototype = new Manager();\n\n         return new ConfigsManager();\n     }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Controllers Manager\n *\n * Manages all of the controllers in the browser. This manager is used for the\n * controller listing and view pages. The manager is a subclass of\n * NodesManager.\n */\n\nangular.module('MAAS').factory(\n    'ControllersManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', 'ServicesManager',\n            function($q, $rootScope, RegionConnection, NodesManager,\n            ServicesManager) {\n\n        function ControllersManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"controller\";\n\n            // Listen for notify events for the controller object.\n            var self = this;\n            RegionConnection.registerNotifier(\"controller\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n        ControllersManager.prototype = new NodesManager();\n\n        ControllersManager.prototype.getServices = function(controller) {\n            var services = [];\n            angular.forEach(controller.service_ids, function(service_id) {\n                var service = ServicesManager.getItemFromList(service_id);\n                if(angular.isObject(service)) {\n                    services.push(service);\n                }\n            });\n            return services;\n        };\n\n        // Check the boot image import status.\n        ControllersManager.prototype.checkImageStates = function(controllers) {\n            return RegionConnection.callMethod(\n                this._handler + \".check_images\", controllers);\n        };\n\n        return new ControllersManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Devices Manager\n *\n * Manages all of the devices in the browser. This manager is used for the\n * device listing and the device view page. The manager uses the\n * RegionConnection to load the devices, update the devices, and listen for\n * notification events about devices.\n */\n\nangular.module('MAAS').factory(\n    'DevicesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function DevicesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"device\";\n            this._metadataAttributes = {\n                \"owner\": null,\n                \"subnets\": null,\n                \"tags\": null,\n                \"zone\": function(device) {\n                    return device.zone.name;\n                }\n            };\n\n            // Listen for notify events for the device object.\n            var self = this;\n            RegionConnection.registerNotifier(\"device\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        DevicesManager.prototype = new NodesManager();\n\n        // Create a device.\n        DevicesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the device to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"device.create\", node);\n        };\n\n        // Create an interface on device.\n        DevicesManager.prototype.createInterface = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"device.create_interface\", params).then(function(device) {\n                    self._replaceItem(device);\n                    return device;\n                });\n        };\n\n        // Perform the action on the device.\n        DevicesManager.prototype.performAction = function(\n            device, action, extra) {\n\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(\"device.action\", {\n                \"system_id\": device.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        return new DevicesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS DHCPSnippet Manager\n *\n * Manages all of the DHCPSnippets in the browser. The manager uses the\n * RegionConnection to load the DHCPSnippets, update the DHCPSnippets, and\n * listen for notification events about DHCPSnippets.\n */\n\nangular.module('MAAS').factory(\n    'DHCPSnippetsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function DHCPSnippetsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"dhcpsnippet\";\n\n            // Listen for notify events for the DHCPSnippet object.\n            var self = this;\n            RegionConnection.registerNotifier(\"dhcpsnippet\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        DHCPSnippetsManager.prototype = new Manager();\n\n        // Create the snippet.\n        DHCPSnippetsManager.prototype.create = function(snippet) {\n            return RegionConnection.callMethod(\n                this._handler + \".create\", snippet, true);\n        };\n\n        return new DHCPSnippetsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Discovery Manager\n *\n * A Discovery is a MAC, IP binding with an optional hostname that MAAS\n * believes it has discovered. It is associated with a particular fabric and\n * VLAN, and is aware of which rack or region interface most recently\n * discovered it.\n *\n * This class manages all of the discoveries in the browser. It uses the\n * RegionConnection to load the discoveries and listen for notification events\n * about discoveries.\n */\n\nangular.module('MAAS').factory(\n    'DiscoveriesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'PollingManager',\n    function($q, $rootScope, RegionConnection, PollingManager) {\n\n        function DiscoveriesManager() {\n            PollingManager.call(this);\n\n            this._pk = \"first_seen\";\n            this._batchKey = \"first_seen\";\n            this._handler = \"discovery\";\n\n            // Poll every 10 seconds when its empty as its okay for\n            // this to be empty.\n            this._pollEmptyTimeout = 5000;\n        }\n\n        DiscoveriesManager.prototype = new PollingManager();\n\n        return new DiscoveriesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domain Manager\n *\n * Manages all of the domains in the browser. The manager uses the\n * RegionConnection to load the domains, update the domains, and listen for\n * notification events about domains.\n */\n\nangular.module('MAAS').factory(\n    'DomainsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function DomainsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"domain\";\n\n            // Listen for notify events for the domain object.\n            var self = this;\n            RegionConnection.registerNotifier(\"domain\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        DomainsManager.prototype = new Manager();\n\n        // Create a domain.\n        DomainsManager.prototype.create = function(domain) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"domain.create\", domain);\n        };\n\n        // Delete the domain.\n        DomainsManager.prototype.deleteDomain = function(domain) {\n            return RegionConnection.callMethod(\"domain.delete\", domain);\n        };\n\n        // Create a DNS record.\n        DomainsManager.prototype.createDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.create_dnsresource\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.create_dnsdata\", record);\n            }\n        };\n\n        DomainsManager.prototype.getDefaultDomain = function() {\n            if(this._items.length === 0) {\n                return null;\n            } else {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].id === 0) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return this._items[0];\n        };\n\n        DomainsManager.prototype.getDomainByName = function(name) {\n            if(this._items.length > 0) {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].name === name) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return null;\n        };\n\n        return new DomainsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Event Manager Factory\n *\n * Manages all of the events for a node in the browser. The manager uses the\n * RegionConnection to load the events and listen for event notifications.\n */\n\nangular.module('MAAS').factory(\n    'EventsManagerFactory',\n    ['RegionConnection', 'Manager', 'ErrorService',\n    function(RegionConnection, Manager, ErrorService) {\n\n        function EventsManager(nodeId, factory) {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"event\";\n            this._nodeId = nodeId;\n            this._factory = factory;\n            this._maxDays = 1;\n        }\n\n        EventsManager.prototype = new Manager();\n\n        // Return the initial batch parameters with the id of the node\n        // and the maximum number of days to load.\n        EventsManager.prototype._initBatchLoadParameters = function() {\n            return {\n                \"node_id\": this._nodeId,\n                \"max_days\": this._maxDays\n            };\n        };\n\n        // Destroys its self. Removes self from the EventsManagerFactory.\n        EventsManager.prototype.destroy = function(){\n            this._factory.destroyManager(this);\n\n            // If this manager has ever loaded then the region is sending\n            // events about this node. Tell the RegionConnection not to\n            // stop sending notification for events from this node.\n            if(this.isLoaded()) {\n                RegionConnection.callMethod(\"event.clear\", {\n                    node_id: this._nodeId\n                });\n            }\n        };\n\n        // Get the maximum number of days the manager will load.\n        EventsManager.prototype.getMaximumDays = function() {\n            return this._maxDays;\n        };\n\n        // Changes the maximum number of days to load and loads the items.\n        EventsManager.prototype.loadMaximumDays = function(days) {\n            var self = this;\n            var setMaximumDays = function() {\n                self._maxDays = days;\n                self.loadItems();\n            };\n\n            if(this.isLoading()) {\n                // Call loadItems to get an extra defer to know when\n                // the loading is done.\n                this.loadItems().then(function() {\n                    setMaximumDays();\n                });\n            } else {\n                setMaximumDays();\n            }\n        };\n\n        // Factory that holds all created EventsManagers.\n        function EventsManagerFactory() {\n            // Holds a list of all EventsManager that have been created.\n            this._managers = [];\n\n            // Listen for notify events for the event object.\n            var self = this;\n            RegionConnection.registerNotifier(\"event\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        // Gets the EventManager for the nodes with node_id.\n        EventsManagerFactory.prototype._getManager = function(nodeId) {\n            var i;\n            for(i = 0; i < this._managers.length; i++) {\n                if(this._managers[i]._nodeId === nodeId) {\n                    return this._managers[i];\n                }\n            }\n            return null;\n        };\n\n        // Gets the EventManager for the nodes node_id. Creates a new manager\n        // if one does not exist.\n        EventsManagerFactory.prototype.getManager = function(nodeId) {\n            var manager = this._getManager(nodeId);\n            if(!angular.isObject(manager)) {\n                // Not created so create it.\n                manager = new EventsManager(nodeId, this);\n                this._managers.push(manager);\n                return manager;\n            }\n            return manager;\n        };\n\n        // Destroy the EventManager.\n        EventsManagerFactory.prototype.destroyManager = function(manager) {\n            var idx = this._managers.indexOf(manager);\n            if(idx >= 0) {\n                this._managers.splice(idx, 1);\n            }\n        };\n\n        // Called when the RegionConnection gets a notification for an event.\n        EventsManagerFactory.prototype.onNotify = function(action, data) {\n            if(action === \"delete\") {\n                // Send all delete actions to all managers. Only one will\n                // remove the event with the given id.\n                angular.forEach(this._managers, function(manager) {\n                    manager.onNotify(action, data);\n                });\n            } else if (action === \"create\" || action === \"update\") {\n                // Get the manager based on the node_id in data, and send\n                // it the notification.\n                var manager = this._getManager(data.node_id);\n                if(angular.isObject(manager)) {\n                    manager.onNotify(action, data);\n                }\n            }\n        };\n\n        return new EventsManagerFactory();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Fabric Manager\n *\n * Manages all of the fabrics in the browser. The manager uses the\n * RegionConnection to load the fabrics, update the fabrics, and listen for\n * notification events about fabrics.\n */\n\nangular.module('MAAS').factory(\n    'FabricsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'VLANsManager',\n    function(\n    $q, $rootScope, RegionConnection, Manager, VLANsManager) {\n\n        function FabricsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"fabric\";\n\n            // Listen for notify events for the fabric object.\n            var self = this;\n            RegionConnection.registerNotifier(\"fabric\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        FabricsManager.prototype = new Manager();\n\n        // Given a Fabric object, returns its display name.\n        FabricsManager.prototype.getName = function(fabric) {\n            if(!angular.isObject(fabric)) {\n                return;\n            }\n            if(angular.isString(fabric.name)) {\n                return fabric.name;\n            } else {\n                return this._handler + \"-\" + fabric[this._pk];\n            }\n        };\n\n        // Delete the Fabric.\n        FabricsManager.prototype.deleteFabric = function(fabric) {\n            return RegionConnection.callMethod(\n                \"fabric.delete\", { \"id\": fabric.id }, true);\n        };\n\n        // Create a Fabric.\n        FabricsManager.prototype.create = function(fabric) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"fabric.create\", fabric);\n        };\n\n\n        return new FabricsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS General Manager\n *\n * Manager for general information from the region. The general handler on the\n * region side does not push information to the client. This manager uses\n * polling to grab this data periodically from the region.\n *\n * This manage provides different pieces of data and is structure differently\n * than extending the Manager service. It still provides the Manager service\n * interface allowing the ManagerHelperService to load this manager.\n */\n\nangular.module('MAAS').factory(\n    'GeneralManager',\n    ['$q', '$timeout', 'RegionConnection', 'ErrorService',\n    function($q, $timeout, RegionConnection, ErrorService) {\n\n        // Constructor\n        function GeneralManager() {\n            // Holds the available endpoints and its data.\n            this._data = {\n                machine_actions: {\n                    method: \"general.machine_actions\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                device_actions: {\n                    method: \"general.device_actions\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                region_controller_actions: {\n                    method: \"general.region_controller_actions\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                rack_controller_actions: {\n                    method: \"general.rack_controller_actions\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                region_and_rack_controller_actions: {\n                    method: \"general.region_and_rack_controller_actions\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                architectures: {\n                    method: \"general.architectures\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                known_architectures: {\n                    method: \"general.known_architectures\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                pockets_to_disable: {\n                    method: \"general.pockets_to_disable\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                components_to_disable: {\n                    method: \"general.components_to_disable\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                hwe_kernels: {\n                    method: \"general.hwe_kernels\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                min_hwe_kernels: {\n                    method: \"general.min_hwe_kernels\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                default_min_hwe_kernel: {\n                    method: \"general.default_min_hwe_kernel\",\n                    data: { text: '' },\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        oldData.text = newData;\n                    }\n                },\n                osinfo: {\n                    method: \"general.osinfo\",\n                    data: {},\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    isEmpty: function(data) {\n                        var osystems = data.osystems;\n                        return (angular.isUndefined(osystems) ||\n                            osystems.length === 0);\n                    },\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                },\n                bond_options: {\n                    method: \"general.bond_options\",\n                    data: {},\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                },\n                version: {\n                    method: \"general.version\",\n                    data: { text: null },\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        oldData.text = newData;\n                    }\n                },\n                power_types: {\n                    method: \"general.power_types\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        // Add new power types.\n                        var i, j, newPowerType, oldPowerType;\n                        for(i = 0; i < newData.length; i++) {\n                            newPowerType = newData[i];\n                            var newItem = true;\n                            for(j = 0; j < oldData.length; j++) {\n                                oldPowerType = oldData[j];\n                                if(newPowerType.name === oldPowerType.name) {\n                                    newItem = false;\n                                    break;\n                                }\n                            }\n\n                            // Item was previously not in the list so it is\n                            // inserted into the array.\n                            if(newItem) {\n                                oldData.push(newPowerType);\n                            }\n                        }\n\n                        // Remove any power types that are not included in\n                        // the newData.\n                        for(i = oldData.length - 1; i >= 0; i--) {\n                            oldPowerType = oldData[i];\n                            var found = false;\n                            for(j = 0; j < newData.length; j++) {\n                                newPowerType = newData[j];\n                                if(newPowerType.name === oldPowerType.name) {\n                                    found = true;\n                                    break;\n                                }\n                            }\n\n                            // Item was previously not in the list so it is\n                            // inserted into the array.\n                            if(!found) {\n                                oldData.splice(i, 1);\n                            }\n                        }\n                    }\n                },\n                release_options: {\n                    method: \"general.release_options\",\n                    data: {},\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                }\n            };\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 3000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n\n            // Set to true when the items list should reload upon re-connection\n            // to the region.\n            this._autoReload = false;\n\n            // Use the same notify type as a default manager.\n            this._type = 'notify';\n\n            // The scopes that have loaded this manager.\n            this._scopes = [];\n        }\n\n        GeneralManager.prototype._getInternalData = function(name) {\n            var data = this._data[name];\n            if(angular.isUndefined(data)) {\n                throw new Error(\"Unknown data: \" + name);\n            }\n            return data;\n        };\n\n        // Return loaded data.\n        GeneralManager.prototype.getData = function(name) {\n            return this._getInternalData(name).data;\n        };\n\n        // Return true when all data has been loaded.\n        GeneralManager.prototype.isLoaded = function() {\n            var loaded = true;\n            angular.forEach(this._data, function(data) {\n                if(!data.loaded) {\n                    loaded = false;\n                }\n            });\n            return loaded;\n        };\n\n        // Return true when data has been loaded.\n        GeneralManager.prototype.isDataLoaded = function(name) {\n            return this._getInternalData(name).loaded;\n        };\n\n        // Returns true when the manager is currently polling.\n        GeneralManager.prototype.isPolling = function() {\n            var polling = false;\n            angular.forEach(this._data, function(data) {\n                if(data.polling.length > 0) {\n                    polling = true;\n                }\n            });\n            return polling;\n        };\n\n        // Returns true when the manager is currently polling for that data.\n        GeneralManager.prototype.isDataPolling = function(name) {\n            return this._getInternalData(name).polling;\n        };\n\n        // Starts the manager polling for data.\n        GeneralManager.prototype.startPolling = function(scope, name) {\n            var data = this._getInternalData(name);\n            var idx = data.polling.indexOf(scope);\n            if(idx === -1) {\n                data.polling.push(scope);\n                if(data.polling.length === 1) {\n                    // Polling needs to be started. This is the first scope\n                    // that is requesting for polling to be performed.\n                    this._poll(data);\n                }\n            }\n        };\n\n        // Stops the manager polling for data.\n        GeneralManager.prototype.stopPolling = function(scope, name) {\n            var data = this._getInternalData(name);\n            var idx = data.polling.indexOf(scope);\n            if(idx >= 0) {\n                data.polling.splice(idx, 1);\n            }\n            if(data.polling.length === 0 &&\n                angular.isObject(data.nextPromise)) {\n                $timeout.cancel(data.nextPromise);\n                data.nextPromise = null;\n            }\n        };\n\n        // Load the data from the region.\n        GeneralManager.prototype._loadData = function(data, raiseError) {\n            var replaceData = data.replaceData;\n            raiseError = raiseError || false;\n\n            // Set default replaceData function if data doesn't provide its\n            // own function.\n            if(angular.isUndefined(replaceData)) {\n                replaceData = function(oldData, newData) {\n                    oldData.length = 0;\n                    oldData.push.apply(oldData, newData);\n                };\n            }\n\n            return RegionConnection.callMethod(data.method).then(\n                function(newData) {\n                    replaceData(data.data, newData);\n                    data.loaded = true;\n                    return data.data;\n                }, function(error) {\n                    if(raiseError) {\n                        ErrorService.raiseError(error);\n                    }\n                    return error;\n                });\n        };\n\n        GeneralManager.prototype._pollAgain = function(data, timeout) {\n            var self = this;\n            data.nextPromise = $timeout(function() {\n                self._poll(data);\n            }, timeout);\n        };\n\n        // Polls for the data from the region.\n        GeneralManager.prototype._poll = function(data) {\n            var self = this;\n            var isEmpty = data.isEmpty;\n\n            // Set default isEmpty function if data doesn't provide its\n            // own function.\n            if(angular.isUndefined(isEmpty)) {\n                isEmpty = function(data) {\n                    return data.length === 0;\n                };\n            }\n\n            // Can only poll if connected.\n            if(!RegionConnection.isConnected()) {\n                this._pollAgain(data, this._pollErrorTimeout);\n                return;\n            }\n\n            return this._loadData(data, false).then(function(newData) {\n                var pollTimeout = self._pollTimeout;\n                if(isEmpty(data.data)) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(data, pollTimeout);\n                return newData;\n            }, function(error) {\n                // Don't raise the error, just log it and try again.\n                console.log(error);\n                self._pollAgain(data, self._pollErrorTimeout);\n            });\n        };\n\n        // Loads all the items. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest.\n        GeneralManager.prototype.loadItems = function() {\n            var self = this;\n            var defer = $q.defer();\n            var waitingCount = Object.keys(this._data).length;\n            var done = function() {\n                waitingCount -= 1;\n                if(waitingCount === 0) {\n                    defer.resolve();\n                }\n            };\n\n            angular.forEach(this._data, function(data) {\n                self._loadData(data, true).then(function() {\n                    done();\n                });\n            });\n\n            return defer.promise;\n        };\n\n        // Enables auto reloading of the item list on connection to region.\n        GeneralManager.prototype.enableAutoReload = function() {\n            if(!this._autoReload) {\n                this._autoReload = true;\n                var self = this;\n                this._reloadFunc = function() {\n                    self.loadItems();\n                };\n                RegionConnection.registerHandler(\"open\", this._reloadFunc);\n            }\n        };\n\n        // Disable auto reloading of the item list on connection to region.\n        GeneralManager.prototype.disableAutoReload = function() {\n            if(this._autoReload) {\n                RegionConnection.unregisterHandler(\"open\", this._reloadFunc);\n                this._reloadFunc = null;\n                this._autoReload = false;\n            }\n        };\n\n        return new GeneralManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS IPRange Manager\n *\n * Manages all of the IPRanges in the browser. The manager uses the\n * RegionConnection to load the IPRanges, update the IPRanges, and listen for\n * notification events about IPRanges.\n */\n\nangular.module('MAAS').factory(\n    'IPRangesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function IPRangesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"iprange\";\n\n            // Listen for notify events for the iprange object.\n            var self = this;\n            RegionConnection.registerNotifier(\"iprange\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        IPRangesManager.prototype = new Manager();\n\n        return new IPRangesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Machines Manager\n *\n * Manages all of the machines in the browser. This manager is used for the\n * machine listing and view pages. The manager is a subclass of NodesManager.\n */\n\nangular.module('MAAS').factory(\n    'MachinesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function MachinesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"machine\";\n\n            this._metadataAttributes = {\n                \"architecture\": null,\n                \"status\": null,\n                \"owner\": null,\n                \"tags\": null,\n                \"pod\": function(machine) {\n                    return (machine.pod === undefined) ? '' :machine.pod.name;\n                },\n                \"zone\": function(machine) {\n                    return machine.zone.name;\n                },\n                \"subnets\": null,\n                \"fabrics\": null,\n                \"spaces\": null,\n                \"storage_tags\": null,\n                \"release\": function(machine) {\n                    if(machine.status_code === 6 || machine.status_code === 9) {\n                        return machine.osystem + \"/\" + machine.distro_series;\n                    } else {\n                        return '';\n                    }\n                }\n            };\n\n            // Listen for notify events for the machine object.\n            var self = this;\n            RegionConnection.registerNotifier(\"machine\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n\n        }\n        MachinesManager.prototype = new NodesManager();\n\n        MachinesManager.prototype.mountSpecialFilesystem =\n            function(machine, fstype, mount_point, mount_options) {\n                var method = this._handler + \".mount_special\";\n                var params = {\n                    system_id: machine.system_id,\n                    fstype: fstype,\n                    mount_point: mount_point,\n                    mount_options: mount_options\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        MachinesManager.prototype.unmountSpecialFilesystem =\n            function(machine, mount_point) {\n                var method = this._handler + \".unmount_special\";\n                var params = {\n                    system_id: machine.system_id,\n                    mount_point: mount_point\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        return new MachinesManager();\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS NodeResultsManager Manager\n *\n * Manages all of the NodeResults in the browser. The manager uses the\n * RegionConnection to load the NodeResults, and listen for\n * notification events about NodeResults.\n */\n\nangular.module('MAAS').factory(\n    'NodeResultsManagerFactory', ['RegionConnection', 'Manager',\n    function(RegionConnection, Manager) {\n\n        function NodeResultsManager(node, factory) {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"noderesult\";\n            this._node = node;\n            this._factory = factory;\n\n            // Store as an array to preserve order.\n            this.commissioning_results = [\n                {\n                    title: null,\n                    hardware_type: 0,\n                    results: {}\n                },\n                {\n                    title: \"CPU\",\n                    hardware_type: 1,\n                    results: {}\n                },\n                {\n                    title: \"Memory\",\n                    hardware_type: 2,\n                    results: {}\n                },\n                {\n                    title: \"Storage\",\n                    hardware_type: 3,\n                    results: {}\n                }\n            ];\n            this.testing_results = [\n                {\n                    title: \"CPU\",\n                    hardware_type: 1,\n                    results: {}\n                },\n                {\n                    title: \"Memory\",\n                    hardware_type: 2,\n                    results: {}\n                },\n                {\n                    title: \"Storage\",\n                    hardware_type: 3,\n                    results: {}\n                },\n                {\n                    title: \"Other Results\",\n                    hardware_type: 0,\n                    results: {}\n                }\n            ];\n            this.installation_results = [];\n\n            // Listen for notify events for the ScriptResult object.\n            // This is noderesult instead of scriptresult because the\n            // class name is NodeResultHandler.\n            var self = this;\n            RegionConnection.registerNotifier(\"noderesult\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        NodeResultsManager.prototype = new Manager();\n\n        NodeResultsManager.prototype._getStorageSubtext = function(disk) {\n            var deviceinfo = '';\n            if(disk.model !== '') {\n                deviceinfo += \"Model: \" + disk.model;\n            }\n            if(disk.serial !== '') {\n                if(deviceinfo !== '') {\n                    deviceinfo += ', ';\n                }\n                deviceinfo += \"Serial: \" + disk.serial;\n            }\n            if(deviceinfo !== '') {\n                return '/dev/' + disk.name + ' (' + deviceinfo + ')';\n            }else{\n                return '/dev/' + disk.name;\n            }\n        };\n\n        NodeResultsManager.prototype._updateObject = function(\n            existing, updated) {\n            angular.forEach(updated, function(value, key) {\n                if(existing[key] !== value && key !== 'showing_results' &&\n                   key !== 'showing_history' && key !== 'showing_menu' &&\n                   key !== '$selected') {\n                    existing[key] = value;\n                }\n            });\n        };\n\n        NodeResultsManager.prototype._addOrReplace = function(results, result) {\n            var i;\n            for(i = 0; i < results.length; i++) {\n                if(results[i].name === result.name) {\n                    // Object already exists, update fields.\n                    result.$selected = results[i].$selected;\n                    result.showing_results = results[i].showing_results;\n                    result.showing_history = results[i].showing_history;\n                    result.showing_menu = results[i].showing_menu;\n                    angular.copy(result, results[i]);\n                    return;\n                }\n            }\n            // No result with the same name exists, add it to the sorted list.\n            for(i = 0; i < results.length; i++) {\n                if(results[i].name > result.name) {\n                    results.splice(i, 0, result);\n                    return;\n                }\n            }\n            results.push(result);\n        };\n\n        NodeResultsManager.prototype._processItem = function(result) {\n            var results;\n            result.showing_results = false;\n            result.showing_history = false;\n            result.showing_menu = false;\n            result.result_section = \"scripts\";\n\n            if(result.result_type === 0) {\n                results = this.commissioning_results;\n            } else if(result.result_type === 1) {\n                // Installation results are not split into hardware types or\n                // have subtext labels.\n                this._addOrReplace(this.installation_results, result);\n                return;\n            } else {\n                // Store all remaining result types as test results in case\n                // another result type is ever added.\n                results = this.testing_results;\n                result.result_section = \"tests\";\n            }\n            var i;\n            // Fallback to storing results in other results incase a new type\n            // is added\n            var hardware_type_results = results[3];\n            for(i = 0; i < results.length; i++) {\n                if(results[i].hardware_type === result.hardware_type) {\n                    hardware_type_results = results[i].results;\n                    break;\n                }\n            }\n\n            if(result.hardware_type === 3 &&\n               result.physical_blockdevice !== null) {\n                // Storage results are split into individual components.\n                var disk, subtext;\n                // If the storage result is associated with a specific\n                // component generate subtext for that component.\n                for(i = 0; i < this._node.disks.length; i++) {\n                    disk = this._node.disks[i];\n                    if(disk.id === result.physical_blockdevice) {\n                        subtext = this._getStorageSubtext(disk);\n                        if(!angular.isArray(\n                            hardware_type_results[subtext])) {\n                                hardware_type_results[subtext] = [];\n                        }\n                        this._addOrReplace(\n                            hardware_type_results[subtext], result);\n                        break;\n                    }\n                }\n            } else {\n                // Other hardware types are not split into individual\n                // components.\n                if(!angular.isArray(hardware_type_results[null])) {\n                    hardware_type_results[null] = [];\n                }\n                this._addOrReplace(hardware_type_results[null], result);\n            }\n        };\n\n        NodeResultsManager.prototype._removeItem = function(result) {\n            var idx = this._getIndexOfItem(this._items, result.id);\n            if(idx >= 0) {\n                this._updateMetadata(this._items[idx], \"delete\");\n            }\n            this._removeItemByIdFromArray(this._items, result.id);\n            this._removeItemByIdFromArray(this._selectedItems, result.id);\n\n            var self = this;\n            angular.forEach(this.commissioning_results, function(hw_type) {\n                angular.forEach(hw_type.results, function(results, subtext) {\n                    self._removeItemByIdFromArray(results, result.id);\n                    if(results.length === 0)\n                    {\n                        delete hw_type.results[subtext];\n                    }\n                });\n            });\n            angular.forEach(this.testing_results, function(hw_type) {\n                angular.forEach(hw_type.results, function(results, subtext) {\n                    self._removeItemByIdFromArray(results, result.id);\n                    if(results.length === 0)\n                    {\n                        delete hw_type.results[subtext];\n                    }\n                });\n            });\n            this._removeItemByIdFromArray(this.installation_results, result.id);\n        };\n\n        // Return the list of ScriptResults for the given node when retrieving\n        // the initial list.\n        NodeResultsManager.prototype._initBatchLoadParameters = function() {\n            var ret = {\n                \"system_id\": this._node.system_id\n            };\n            // Limit the results returned to what can be viewed.\n            if(this._area === \"summary\") {\n                ret.has_surfaced = true;\n                ret.result_type = 2;\n            }else if(this._area === \"testing\") {\n                ret.result_type = 2;\n            }else if(this._area === \"commissioning\") {\n                ret.result_type = 0;\n            }else if(this._area === \"logs\") {\n                ret.result_type = 1;\n            }\n            return ret;\n        };\n\n        // Destroys itself. Removes self from the NodeResultsManagerFactory.\n        NodeResultsManager.prototype.destroy = function() {\n            this._factory.destroyManager(this);\n\n            // If this manager has ever loaded then the region is sending\n            // results from this node. Tell the RegionConnection to stop.\n            if(this.isLoaded()) {\n                var method = this._handler + \".clear\";\n                RegionConnection.callMethod(method, {\n                    system_id: this._node.system_id\n                });\n            }\n        };\n\n        // Get result data.\n        NodeResultsManager.prototype.get_result_data = function(\n            script_id, data_type) {\n            var method = this._handler + \".get_result_data\";\n            var params = {\n                id: script_id,\n                data_type: data_type\n            };\n            return RegionConnection.callMethod(method, params);\n        };\n\n        // Get historic data.\n        NodeResultsManager.prototype.get_history = function(script_id) {\n            var method = this._handler + \".get_history\";\n            var params = {\n                id: script_id,\n            };\n            return RegionConnection.callMethod(method, params);\n        };\n\n        // Factory that holds all created NodeResultsManagers.\n        function NodeResultsManagerFactory() {\n            // Holds a list of all NodeResultsManagers that have been created.\n            this._managers = [];\n        }\n\n        // Gets the NodeResultsManager for the nodes with node_system_id.\n        NodeResultsManagerFactory.prototype._getManager = function(node) {\n            var i;\n            for(i = 0; i < this._managers.length; i++) {\n                if(this._managers[i]._node.system_id === node.system_id) {\n                    return this._managers[i];\n                }\n            }\n            return null;\n        };\n\n        // Gets the NodeResultsManager for the nodes system_id. Creates a new\n        // manager if one does not exist.\n        NodeResultsManagerFactory.prototype.getManager = function(\n            node, area) {\n            var manager = this._getManager(node);\n            if(!angular.isObject(manager)) {\n                // Not created so create it.\n                manager = new NodeResultsManager(node, this);\n                this._managers.push(manager);\n            }\n            manager._area = area;\n            if(area === \"commissioning\") {\n                manager.results = manager.commissioning_results;\n            }else if(area === \"logs\") {\n                manager.results = manager.installation_results;\n            }else{\n                manager.results = manager.testing_results;\n            }\n            return manager;\n        };\n\n        // Destroy the NodeResultsManager.\n        NodeResultsManagerFactory.prototype.destroyManager = function(manager) {\n            var idx = this._managers.indexOf(manager);\n            if(idx >= 0) {\n                this._managers.splice(idx, 1);\n            }\n        };\n\n        return new NodeResultsManagerFactory();\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Manager\n *\n * Manages all of the nodes in the browser. This manager is used for the\n * machine and controller listing and view pages (as machines and controllers\n * are both Nodes).  The manager uses the RegionConnection to load the nodes,\n * update the nodes, and listen for notification events about nodes.\n */\n\nangular.module('MAAS').service(\n    'NodesManager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, $timeout, RegionConnection, Manager) {\n\n        function NodesManager() {\n            Manager.call(this);\n        }\n\n        NodesManager.prototype = new Manager();\n\n        // Create a node.\n        NodesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the node to the list. Adding it here will cause angular\n            // to complain because the same object exist in the list.\n            return RegionConnection.callMethod(\n                this._handler + \".create\", node);\n        };\n\n        // Perform the action on the node.\n        NodesManager.prototype.performAction = function(\n            node, action, extra) {\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(this._handler + \".action\", {\n                \"system_id\": node.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        // Check the power state for the node.\n        NodesManager.prototype.checkPowerState = function(node) {\n            return RegionConnection.callMethod(this._handler + \".check_power\", {\n                \"system_id\": node.system_id\n                }).then(function(state) {\n                    node.power_state = state;\n                    return state;\n                }, function(error) {\n                    node.power_state = \"error\";\n\n                    // Already been logged server side, but log it client\n                    // side so if they really care they can see why.\n                    console.log(error);\n\n                    // Return the state as error to the remaining callbacks.\n                    return \"error\";\n                });\n        };\n\n        // Create the physical interface on the node.\n        NodesManager.prototype.createPhysicalInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_physical\", params);\n            };\n\n        // Create the VLAN interface on the node.\n        NodesManager.prototype.createVLANInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_vlan\", params);\n            };\n\n        // Create the bond interface on the node.\n        NodesManager.prototype.createBondInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bond\", params);\n            };\n\n        // Create the bridge interface on the node.\n        NodesManager.prototype.createBridgeInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bridge\", params);\n            };\n\n        // Update the interface for the node.\n        NodesManager.prototype.updateInterface = function(\n            node, interface_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.interface_id = interface_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".update_interface\", params);\n            };\n\n        // Update an interface from a maas-obj-form.\n        NodesManager.prototype.updateInterfaceForm = function(\n            params) {\n                return RegionConnection.callMethod(\n                    this._handler + \".update_interface\", params);\n            };\n\n        // Delete the interface for the node.\n        NodesManager.prototype.deleteInterface = function(\n            node, interface_id) {\n                var params = {\n                    system_id: node.system_id,\n                    interface_id: interface_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".delete_interface\", params);\n            };\n\n        // Create or update the link to the subnet for the interface.\n        NodesManager.prototype.linkSubnet = function(\n            node, interface_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.interface_id = interface_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".link_subnet\", params);\n            };\n\n        // Remove the link to the subnet for the interface.\n        NodesManager.prototype.unlinkSubnet = function(\n            node, interface_id, link_id) {\n                var params = {\n                    system_id: node.system_id,\n                    interface_id: interface_id,\n                    link_id: link_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".unlink_subnet\", params);\n            };\n\n        // Send the update information to the region.\n        NodesManager.prototype.updateFilesystem = function(\n            node, block_id, partition_id, fstype, mount_point, mount_options,\n            tags) {\n                var self = this;\n                var method = this._handler + \".update_filesystem\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id,\n                    partition_id: partition_id,\n                    fstype: fstype,\n                    mount_point: mount_point,\n                    mount_options: mount_options,\n                    tags: tags\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the disk.\n        NodesManager.prototype.deleteDisk = function(\n            node, block_id) {\n                var self = this;\n                var method = this._handler + \".delete_disk\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the partition.\n        NodesManager.prototype.deletePartition = function(\n            node, partition_id) {\n                var self = this;\n                var method = this._handler + \".delete_partition\";\n                var params = {\n                    system_id: node.system_id,\n                    partition_id: partition_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the disk or partition.\n        NodesManager.prototype.deleteVolumeGroup = function(\n            node, volume_group_id) {\n                var self = this;\n                var method = this._handler + \".delete_volume_group\";\n                var params = {\n                    system_id: node.system_id,\n                    volume_group_id: volume_group_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete a cache set.\n        NodesManager.prototype.deleteCacheSet = function(\n            node, cache_set_id) {\n                var self = this;\n                var method = this._handler + \".delete_cache_set\";\n                var params = {\n                    system_id: node.system_id,\n                    cache_set_id: cache_set_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete a filesystem.\n        NodesManager.prototype.deleteFilesystem = function(\n            node, blockdevice_id, partition_id, filesystem_id) {\n                var self = this;\n                var method = this._handler + \".delete_filesystem\";\n                var params = {\n                    system_id: node.system_id,\n                    blockdevice_id: blockdevice_id,\n                    partition_id: partition_id,\n                    filesystem_id: filesystem_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new partition.\n        NodesManager.prototype.createPartition = function(\n            node, block_id, size, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                var self = this;\n                var method = this._handler + \".create_partition\";\n                params.system_id = node.system_id;\n                params.block_id = block_id;\n                params.partition_size = size;\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new cache set.\n        NodesManager.prototype.createCacheSet = function(\n            node, block_id, partition_id) {\n                var self = this;\n                var method = this._handler + \".create_cache_set\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id,\n                    partition_id: partition_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new bcache device.\n        NodesManager.prototype.createBcache = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bcache\", params);\n            };\n\n        // Create a new RAID device.\n        NodesManager.prototype.createRAID = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_raid\", params);\n            };\n\n        // Create a new volume group.\n        NodesManager.prototype.createVolumeGroup = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_volume_group\", params);\n            };\n\n        // Create a new logical volume.\n        NodesManager.prototype.createLogicalVolume = function(\n            node, volume_group_id, name, size, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                var self = this;\n                var method = this._handler + \".create_logical_volume\";\n                params.system_id = node.system_id;\n                params.volume_group_id = volume_group_id;\n                params.name = name;\n                params.size = size;\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Update a disk.\n        NodesManager.prototype.updateDisk = function(\n            node, block_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.block_id = block_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".update_disk\", params);\n            };\n\n        // Set disk as the boot disk.\n        NodesManager.prototype.setBootDisk = function(\n            node, block_id) {\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".set_boot_disk\", params);\n            };\n\n        NodesManager.prototype.getSummaryXML = function(node) {\n            return RegionConnection.callMethod(\n                this._handler + \".get_summary_xml\",\n                {\"system_id\": node.system_id});\n        };\n\n        NodesManager.prototype.getSummaryYAML = function(node) {\n            return RegionConnection.callMethod(\n                this._handler + \".get_summary_yaml\",\n                {\"system_id\": node.system_id});\n        };\n\n        return NodesManager;\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Notifications Manager.\n *\n * Manages notifications in the browser. Uses RegionConnection to load\n * notifications, await new, updated, and deleted notifications, and to\n * dismiss them.\n */\n\nangular.module('MAAS').factory(\n    'NotificationsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n     function($q, $rootScope, RegionConnection, Manager) {\n\n        function NotificationsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"notification\";\n\n            // Listen for notify events for the notification object.\n            RegionConnection.registerNotifier(\n                \"notification\", angular.bind(this, this.onNotify));\n        }\n\n        NotificationsManager.prototype = new Manager();\n        NotificationsManager.prototype.dismiss = function(notification) {\n            return RegionConnection.callMethod(\n                \"notification.dismiss\", {id: notification.id});\n        };\n\n        return new NotificationsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS PackageRepositories Manager\n *\n * Manages all of the PackageRepositories in the browser. The manager uses the\n * RegionConnection to load the PackageRepositories, update them, and listen\n * for notification events about them.\n */\n\nangular.module('MAAS').factory(\n    'PackageRepositoriesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function PackageRepositoriesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"packagerepository\";\n\n            // Listen for notify events for the PackageRepository object.\n            var self = this;\n            RegionConnection.registerNotifier(\"packagerepository\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        PackageRepositoriesManager.prototype = new Manager();\n\n        // Create the repository.\n        PackageRepositoriesManager.prototype.create = function(repository) {\n            return RegionConnection.callMethod(\n                this._handler + \".create\", repository, true);\n        };\n\n        return new PackageRepositoriesManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pods Manager\n *\n * Manages all of the pods in the browser. The manager uses the\n * RegionConnection to load the pods, update the pods, and listen for\n * notification events about pods.\n */\n\nangular.module('MAAS').service(\n    'PodsManager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, $timeout, RegionConnection, Manager) {\n\n        function PodsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"pod\";\n\n            // Listen for notify events for the pod object.\n            var self = this;\n            RegionConnection.registerNotifier(\"pod\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        PodsManager.prototype = new Manager();\n\n        // Refresh the pod information\n        PodsManager.prototype.refresh = function(pod) {\n            var self = this;\n            return RegionConnection.callMethod(\"pod.refresh\", pod).then(\n                function(pod) {\n                    self._replaceItem(pod);\n                    return pod;\n                });\n        };\n\n        // Compose a machine in the pod.\n        PodsManager.prototype.compose = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\"pod.compose\", params).then(\n                function(pod) {\n                    self._replaceItem(pod);\n                    return pod;\n                });\n        };\n\n        return new PodsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Region Connection\n *\n * Provides the websocket connection between the client and the MAAS regiond\n * service.\n */\n\nangular.module('MAAS').factory(\n    'RegionConnection',\n    ['$q', '$rootScope', '$timeout', '$window', '$cookies', function(\n        $q, $rootScope, $timeout, $window, $cookies) {\n\n        // Message types\n        var MSG_TYPE = {\n            REQUEST: 0,\n            RESPONSE: 1,\n            NOTIFY: 2\n        };\n\n        // Response types\n        var RESPONSE_TYPE = {\n            SUCCESS: 0,\n            ERROR: 1\n        };\n\n        // Constructor\n        function RegionConnection() {\n            this.callbacks = {};\n            this.requests = {};\n            this.requestId = 0;\n            this.url = null;\n            this.websocket = null;\n            this.connected = false;\n            this.autoReconnect = true;\n            this.retryTimeout = 5000;\n            this.error = null;\n\n            // Defer used for defaultConnect. If defaultConnect is called\n            // quickly only the first one will start the connection. The\n            // remaining will recieve this defer.\n            this.defaultConnectDefer = null;\n\n            // List of functions to call when a WebSocket event occurs. Each\n            // function will get the WebSocket event passed to it.\n            this.handlers = {\n                open: [],\n                error: [],\n                close: []\n            };\n\n            // Object containing a fields with list of functions. When\n            // a NOTIFY message is received it will match the name to a field\n            // in this object. If the field exists in the object the list\n            // of functions will be called with the action and obj_id.\n            this.notifiers = {};\n        }\n\n        // Return a new request id.\n        RegionConnection.prototype.newRequestId = function() {\n            this.requestId += 1;\n            return this.requestId;\n        };\n\n        // Register event handler.\n        RegionConnection.prototype.registerHandler = function (name, func) {\n            if(!angular.isDefined(this.handlers[name])) {\n                throw new Error(\"Invalid handler: \" + name);\n            }\n            if(!angular.isFunction(func)) {\n                throw new Error(\"Requires a function to register a handler.\");\n            }\n            this.handlers[name].push(func);\n        };\n\n        // Unregister event handler.\n        RegionConnection.prototype.unregisterHandler = function (name, func) {\n            if(!angular.isDefined(this.handlers[name])) {\n                throw new Error(\"Invalid handler: \" + name);\n            }\n            var idx = this.handlers[name].indexOf(func);\n            if(idx >= 0) {\n                this.handlers[name].splice(idx, 1);\n            }\n        };\n\n        // Register notification handler.\n        RegionConnection.prototype.registerNotifier = function(name, func) {\n            if(!angular.isFunction(func)) {\n                throw new Error(\"Requires a function to register a notifier.\");\n            }\n            if(angular.isUndefined(this.notifiers[name])) {\n                this.notifiers[name] = [];\n            }\n            this.notifiers[name].push(func);\n        };\n\n        // Unregister notification handler.\n        RegionConnection.prototype.unregisterNotifier = function(name, func) {\n            if(angular.isUndefined(this.notifiers[name])) {\n                return;\n            }\n            var idx = this.notifiers[name].indexOf(func);\n            if(idx >= 0) {\n                this.notifiers[name].splice(idx, 1);\n            }\n        };\n\n        // Return True if currently connected to region.\n        RegionConnection.prototype.isConnected = function() {\n            return this.connected;\n        };\n\n        // Builds the websocket connection.\n        RegionConnection.prototype.buildSocket = function(url) {\n            return new WebSocket(url);\n        };\n\n        // Opens the websocket connection.\n        RegionConnection.prototype.connect = function() {\n            this.url = this._buildUrl();\n            this.autoReconnect = true;\n            this.websocket = this.buildSocket(this.url);\n\n            var self = this;\n            this.websocket.onopen = function(evt) {\n                self.connected = true;\n                angular.forEach(self.handlers.open, function(func) {\n                    func(evt);\n                });\n            };\n            this.websocket.onerror = function(evt) {\n                angular.forEach(self.handlers.error, function(func) {\n                    func(evt);\n                });\n            };\n            this.websocket.onclose = function(evt) {\n                self.connected = false;\n                self.error = \"Unable to connect to: \" + self.url.split(\"?\")[0];\n                angular.forEach(self.handlers.close, function(func) {\n                    func(evt);\n                });\n                if(self.autoReconnect) {\n                    $timeout(function() {\n                        self.connect();\n                    }, self.retryTimeout);\n                }\n            };\n            this.websocket.onmessage = function(evt) {\n                self.onMessage(angular.fromJson(evt.data));\n            };\n        };\n\n        // Closes the websocket connection.\n        RegionConnection.prototype.close = function() {\n            this.autoReconnect = false;\n            this.websocket.close();\n            this.websocket = null;\n        };\n\n        // Return the protocol used for the websocket connection.\n        RegionConnection.prototype._getProtocol = function() {\n            return $window.location.protocol;\n        };\n\n        // Return connection url to websocket from current location and\n        // html options.\n        RegionConnection.prototype._buildUrl = function() {\n            var host = $window.location.hostname;\n            var port = $window.location.port;\n            var path = $window.location.pathname;\n            var proto = 'ws';\n            if (this._getProtocol() === 'https:') {\n                proto = 'wss';\n            }\n\n            // Path and port can be overridden by href and data-websocket-port\n            // in the base element respectively.\n            var base = angular.element(\"base\");\n            if(angular.isDefined(base)) {\n                var newPath = base.attr(\"href\");\n                if(angular.isDefined(newPath)) {\n                    path = newPath;\n                }\n                var newPort = base.data(\"websocket-port\");\n                if(angular.isDefined(newPort)) {\n                    port = newPort;\n                }\n            }\n\n            // Append final '/' if missing from end of path.\n            if(path[path.length - 1] !== '/') {\n                path += '/';\n            }\n\n            // Build the URL. Include the :port only if it has a value.\n            url = proto + \"://\" + host;\n            if(angular.isString(port) && port.length > 0){\n                url += \":\" + port;\n            }\n            url += path + \"ws\";\n\n            // Include the csrftoken in the URL if it's defined.\n            var csrftoken;\n            if(angular.isFunction($cookies.get)) {\n                csrftoken = $cookies.get('csrftoken');\n            } else {\n                csrftoken = $cookies.csrftoken;\n            }\n            if(angular.isDefined(csrftoken)) {\n                url += '?csrftoken=' + encodeURIComponent(csrftoken);\n            }\n\n            return url;\n        };\n\n        // Opens the default websocket connection.\n        RegionConnection.prototype.defaultConnect = function() {\n            // Already been called but the connection has not been completed.\n            if(angular.isObject(this.defaultConnectDefer)) {\n                return this.defaultConnectDefer.promise;\n            }\n\n            // Already connected.\n            var defer;\n            if(this.isConnected()) {\n                // Create a new defer as the defaultConnectDefer would\n                // have already been resolved.\n                defer = $q.defer();\n\n                // Cannot resolve the defer inline as it hasn't been given\n                // back to the caller. It will be called in the next loop.\n                $timeout(defer.resolve);\n                return defer.promise;\n            }\n\n            // Start the connection.\n            var self = this, opened, errored;\n            defer = this.defaultConnectDefer = $q.defer();\n            opened = function(evt) {\n                this.defaultConnectDefer = null;\n                self.unregisterHandler(\"open\", opened);\n                self.unregisterHandler(\"error\", errored);\n                $rootScope.$apply(defer.resolve(evt));\n            };\n            errored = function(evt) {\n                this.defaultConnectDefer = null;\n                self.unregisterHandler(\"open\", opened);\n                self.unregisterHandler(\"error\", errored);\n                $rootScope.$apply(defer.reject(evt));\n            };\n            this.registerHandler(\"open\", opened);\n            this.registerHandler(\"error\", errored);\n            this.connect();\n            return defer.promise;\n        };\n\n        // Called when a message is received.\n        RegionConnection.prototype.onMessage = function(msg) {\n            // Response\n            if(msg.type === MSG_TYPE.RESPONSE) {\n                this.onResponse(msg);\n            // Notify\n            } else if(msg.type === MSG_TYPE.NOTIFY) {\n                this.onNotify(msg);\n            }\n        };\n\n        // Called when a response message is recieved.\n        RegionConnection.prototype.onResponse = function(msg) {\n            // Grab the registered defer from the callbacks list.\n            var defer = this.callbacks[msg.request_id];\n            var remembered_request = this.requests[msg.request_id];\n            if(angular.isDefined(defer)) {\n                if(msg.rtype === RESPONSE_TYPE.SUCCESS) {\n                    // Resolve the defer inside of the digest cycle, so any\n                    // update to an object or collection will trigger a\n                    // watcher.\n                    $rootScope.$apply(defer.resolve(msg.result));\n                } else if(msg.rtype === RESPONSE_TYPE.ERROR) {\n                    // Reject the defer since an error occurred.\n                    if(angular.isObject(remembered_request)) {\n                        $rootScope.$apply(defer.reject({\n                            \"error\": msg.error,\n                            \"request\": remembered_request\n                        }));\n                    } else {\n                        $rootScope.$apply(defer.reject(msg.error));\n                    }\n                }\n                // Remove the defer from the callback list.\n                delete this.callbacks[msg.request_id];\n                delete this.requests[msg.request_id];\n            }\n        };\n\n        // Called when a notify response is recieved.\n        RegionConnection.prototype.onNotify = function(msg) {\n            var handlers = this.notifiers[msg.name];\n            if(angular.isArray(handlers)) {\n                angular.forEach(handlers, function(handler) {\n                    handler(msg.action, msg.data);\n                });\n            }\n        };\n\n        // Call method on the region.\n        RegionConnection.prototype.callMethod = function(\n                method, params, remember) {\n            var defer = $q.defer();\n            var request_id = this.newRequestId();\n            var request = {\n                type: MSG_TYPE.REQUEST,\n                request_id: request_id,\n                method: method,\n                params: params\n            };\n            this.callbacks[request_id] = defer;\n            // If requested, remember what the details of the request were,\n            // so that the controller can refresh its memory.\n            if (remember) {\n                this.requests[request_id] = request;\n            }\n            this.websocket.send(angular.toJson(request));\n            return defer.promise;\n        };\n\n        return new RegionConnection();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS ScriptsManager Manager\n *\n * Manages all of the Scripts in the browser. The manager uses the\n * RegionConnection to load the Scripts, and listen for notification\n * events about Scripts.\n */\n\nangular.module('MAAS').factory(\n    'ScriptsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function ScriptsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"script\";\n\n            // Listen for notify events for the Script object.\n            var self = this;\n            RegionConnection.registerNotifier(\"script\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ScriptsManager.prototype = new Manager();\n\n        return new ScriptsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Service Manager\n *\n * Manages all of the services for a node in the browser. The manager uses the\n * RegionConnection to load the services and listen for service notifications.\n */\n\nangular.module('MAAS').factory(\n    'ServicesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function ServicesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"service\";\n\n            // Listen for notify events for the service object.\n            var self = this;\n            RegionConnection.registerNotifier(\"service\",\n                function(action, data) {\n                    self.onNotify(action, data);\n            });\n        }\n\n        ServicesManager.prototype = new Manager();\n\n        return new ServicesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Manager\n *\n * Manages all of the spaces in the browser. The manager uses the\n * RegionConnection to load the spaces, update the spaces, and listen for\n * notification events about spaces.\n */\n\nangular.module('MAAS').factory(\n    'SpacesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'SubnetsManager',\n    function($q, $rootScope, RegionConnection, Manager, SubnetsManager) {\n\n        function SpacesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"space\";\n\n            // Listen for notify events for the space object.\n            var self = this;\n            RegionConnection.registerNotifier(\"space\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SpacesManager.prototype = new Manager();\n\n        // Create a space.\n        SpacesManager.prototype.create = function(space) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"space.create\", space);\n        };\n\n\n        // Delete the space.\n        SpacesManager.prototype.deleteSpace = function(space) {\n            return RegionConnection.callMethod(\"space.delete\", space);\n        };\n\n        return new SpacesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS SSHKey Manager\n *\n * Manages all of the SSHKeys in the browser. The manager uses the\n * RegionConnection to load the SSHKeys, update the SSHKeys, and\n * listen for notification events about SSHKeys.\n */\n\nangular.module('MAAS').factory(\n    'SSHKeysManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function SSHKeysManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"sshkey\";\n\n            // Listen for notify events for the sshkey object.\n            var self = this;\n            RegionConnection.registerNotifier(\"sshkey\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SSHKeysManager.prototype = new Manager();\n\n        // Imports SSH keys from a launchpad and github.\n        SSHKeysManager.prototype.importKeys = function(params) {\n            // We don't add the results to the list because a NOTIFY event will\n            // add the ssh key to the list. Adding it here will cause angular\n            // to complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"sshkey.import_keys\", params);\n        };\n\n        return new SSHKeysManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS StaticRoute Manager\n *\n * Manages all of the StaticRoutes in the browser. The manager uses the\n * RegionConnection to load the StaticRoutes, update the StaticRoutes, and\n * listen for notification events about StaticRoutes.\n */\n\nangular.module('MAAS').factory(\n    'StaticRoutesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function StaticRoutesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"staticroute\";\n\n            // Listen for notify events for the staticroute object.\n            var self = this;\n            RegionConnection.registerNotifier(\"staticroute\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        StaticRoutesManager.prototype = new Manager();\n\n        return new StaticRoutesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Subnet Manager\n *\n * Manages all of the subnets in the browser. The manager uses the\n * RegionConnection to load the subnets, update the subnets, and listen for\n * notification events about subnets.\n */\n\nangular.module('MAAS').factory(\n    'SubnetsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function SubnetsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"subnet\";\n\n            // Listen for notify events for the subnet object.\n            var self = this;\n            RegionConnection.registerNotifier(\"subnet\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SubnetsManager.prototype = new Manager();\n\n        // Return the name of the subnet. Will include the name of the subnet\n        // in '(', ')' if it exists and not the same as the cidr.\n        SubnetsManager.prototype.getName = function(subnet) {\n            if(!angular.isObject(subnet)) {\n                return \"\";\n            }\n\n            var name = subnet.cidr;\n            if(angular.isString(subnet.name) &&\n                subnet.name !== \"\" &&\n                subnet.name !== subnet.cidr) {\n                name += \" (\" + subnet.name + \")\";\n            }\n            return name;\n        };\n\n        SubnetsManager.prototype.getLargestRange = function(subnet) {\n            var largest_range = {num_addresses: 0, start: \"\", end: \"\"};\n            angular.forEach(subnet.statistics.ranges, function(iprange) {\n                if(angular.equals(iprange.purpose, [\"unused\"]) &&\n                        iprange.num_addresses > largest_range.num_addresses) {\n                    largest_range = iprange;\n                }\n            });\n            return largest_range;\n        };\n\n        SubnetsManager.prototype.hasDynamicRange = function(subnet) {\n            var i;\n            for(i = 0; i < subnet.statistics.ranges.length ; i++) {\n                var iprange = subnet.statistics.ranges[i];\n                if(iprange.purpose.indexOf(\"dynamic\") !== -1) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Create a subnet.\n        SubnetsManager.prototype.create = function(subnet) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"subnet.create\", subnet);\n        };\n\n        // Delete the subnet.\n        SubnetsManager.prototype.deleteSubnet = function(subnet) {\n            return RegionConnection.callMethod(\"subnet.delete\", {\n                \"id\": subnet.id\n            });\n        };\n\n        // Perform a neighbour discovery scan on the subnet.\n        SubnetsManager.prototype.scanSubnet = function(subnet) {\n            return RegionConnection.callMethod(\"subnet.scan\", {\n                \"id\": subnet.id\n            });\n        };\n\n        return new SubnetsManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Switches Manager\n *\n * Manages all of the switches in the browser. This manager is used for the\n * switches listing and the switches view page. The manager uses the\n * RegionConnection to load the switches, update the switches, and listen for\n * notification events about switches.\n */\n\nangular.module('MAAS').factory(\n    'SwitchesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function SwitchesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"switch\";\n            this._metadataAttributes = {\n                \"owner\": null,\n                \"subnets\": null,\n                \"tags\": null,\n                \"zone\": function(device) {\n                    return device.zone.name;\n                }\n            };\n\n            // Listen for notify events for the switch object.\n            var self = this;\n            RegionConnection.registerNotifier(\"switch\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        SwitchesManager.prototype = new NodesManager();\n\n        // Create a switch.\n        SwitchesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the device to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"switch.create\", node);\n        };\n\n        // Perform the action on the switch.\n        SwitchesManager.prototype.performAction = function(\n            device, action, extra) {\n\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(\"switch.action\", {\n                \"system_id\": device.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        return new SwitchesManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Tag Manager\n *\n * Manages all of the tags in the browser. The manager uses the\n * RegionConnection to load the tags, update the tags, and listen for\n * notification events about tags.\n */\n\nangular.module('MAAS').factory(\n    'TagsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function TagsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"tag\";\n\n            // Listen for notify events for the tag object.\n            var self = this;\n            RegionConnection.registerNotifier(\"tag\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        TagsManager.prototype = new Manager();\n\n        // Helper for autocomplete that will return a string of tags that\n        // contain the query text.\n        TagsManager.prototype.autocomplete = function(query) {\n            var matching = [];\n            angular.forEach(this._items, function(item) {\n                if(item.name.indexOf(query) > -1) {\n                    matching.push(item.name);\n                }\n            });\n            return matching;\n        };\n\n        return new TagsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS User Manager\n *\n * Manages all of the users in the browser. The manager uses the\n * RegionConnection to load the users, update the users, and listen for\n * notification events about users.\n */\n\nangular.module('MAAS').factory(\n    'UsersManager',\n    ['RegionConnection', 'Manager', 'ErrorService',\n    function(RegionConnection, Manager, ErrorService) {\n\n        function UsersManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"user\";\n\n            // Holds the authenticated user for the connection.\n            this._authUser = null;\n\n            // Listen for notify events for the user object.\n            var self = this;\n            RegionConnection.registerNotifier(\"user\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        UsersManager.prototype = new Manager();\n\n        // Get the authenticated user for the connection.\n        UsersManager.prototype.getAuthUser = function() {\n            return this._authUser;\n        };\n\n        // Return true if the authenticated user is super user.\n        UsersManager.prototype.isSuperUser = function() {\n            var authUser = this.getAuthUser();\n            if(!angular.isObject(authUser)) {\n                return false;\n            }\n            return authUser.is_superuser;\n        };\n\n        // Return true if the authenticated user has uploaded at\n        // least one SSH key.\n        UsersManager.prototype.getSSHKeyCount = function() {\n            authuser = this._authUser;\n            if(!angular.isObject(authuser)) {\n                return 0;\n            }\n            return authuser.sshkeys_count;\n        };\n\n        // Load the authenticated user.\n        UsersManager.prototype._loadAuthUser = function() {\n            var self = this;\n            return RegionConnection.callMethod(\"user.auth_user\", {}).then(\n                function(user) {\n                    if(angular.isObject(self._authUser)) {\n                        // Copy the user into the authUser. This keeps the\n                        // reference the same, not requiring another call to\n                        // getAuthUser.\n                        angular.copy(user, self._authUser);\n                    } else {\n                        self._authUser = user;\n                    }\n                    return self._authUser;\n                }, function(error) {\n                    ErrorService.raiseError(error);\n                });\n        };\n\n        UsersManager.prototype._replaceItem = function(item) {\n            Manager.prototype._replaceItem.call(this, item);\n\n            // Update the authenticated user if updated item has the\n            // same primary key.\n            if(angular.isObject(this._authUser) &&\n                this._authUser[this._pk] === item[this._pk]) {\n                // Copy the item into the authUser. This keeps the reference\n                // the same, not requiring another call to getAuthUser.\n                angular.copy(item, this._authUser);\n            }\n        };\n\n        UsersManager.prototype.loadItems = function() {\n            // Load the auth user when all the items are loaded as well.\n            this._loadAuthUser();\n            return Manager.prototype.loadItems.call(this);\n        };\n\n        UsersManager.prototype.reloadItems = function() {\n            // Load the auth user when all the items are reloaded as well.\n            this._loadAuthUser();\n            return Manager.prototype.reloadItems.call(this);\n        };\n\n        // Mark the user as completed the intro.\n        UsersManager.prototype.markIntroComplete = function() {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"user.mark_intro_complete\", {}).then(\n                    function(user) {\n                        if(angular.isObject(self._authUser)) {\n                            // Copy the user into the authUser. This keeps the\n                            // reference the same, not requiring another call\n                            // to getAuthUser.\n                            angular.copy(user, self._authUser);\n                        } else {\n                            self._authUser = user;\n                        }\n                        return self._authUser;\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n        };\n\n        return new UsersManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS VLAN Manager\n *\n * Manages all of the VLANs in the browser. The manager uses the\n * RegionConnection to load the VLANs, update the VLANs, and listen for\n * notification events about VLANs.\n */\n\nangular.module('MAAS').factory(\n    'VLANsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'SubnetsManager',\n    function($q, $rootScope, RegionConnection, Manager, SubnetsManager) {\n\n        function VLANsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"vlan\";\n\n            // Listen for notify events for the vlan object.\n            var self = this;\n            RegionConnection.registerNotifier(\"vlan\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        VLANsManager.prototype = new Manager();\n\n        VLANsManager.prototype.getName = function(vlan) {\n            var name = vlan.vid;\n            if(vlan.vid === 0) {\n                name = \"untagged\";\n            } else if(angular.isString(vlan.name) && vlan.name !== \"\") {\n                name += \" (\" + vlan.name + \")\";\n            }\n            return name;\n        };\n\n        // Delete the VLAN.\n        VLANsManager.prototype.deleteVLAN = function(vlan) {\n            return RegionConnection.callMethod(\n                \"vlan.delete\", { \"id\": vlan.id }, true);\n        };\n\n        // This is needed for testing: in the normal course of things,\n        // rack_sids is generated entirely by the websocket handler.\n        VLANsManager.prototype.addRackController = function(vlan, rack) {\n            vlan.rack_sids.push(rack.system_id);\n        };\n\n        // Configure DHCP on the VLAN\n        VLANsManager.prototype.configureDHCP = function(\n           vlan, controllers, extra, relay_vlan) {\n           var params = {\n               \"id\": vlan.id,\n               \"controllers\": controllers,\n               \"extra\": extra\n           };\n           if(relay_vlan === null || angular.isNumber(relay_vlan)) {\n              params.relay_vlan = relay_vlan;\n           }\n           return RegionConnection.callMethod(\n                \"vlan.configure_dhcp\", params, true);\n        };\n\n        // Disable DHCP on the VLAN\n        VLANsManager.prototype.disableDHCP = function(vlan) {\n            return RegionConnection.callMethod(\n                \"vlan.configure_dhcp\", {\n                    \"id\": vlan.id,\n                    \"controllers\": [],\n                    \"relay_vlan\": null\n                }, true);\n        };\n\n        // Create a VLAN.\n        VLANsManager.prototype.create = function(vlan) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"vlan.create\", vlan);\n        };\n\n        return new VLANsManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zone Manager\n *\n * Manages all of the zones in the browser. The manager uses the\n * RegionConnection to load the zones, update the zones, and listen for\n * notification events about zones.\n */\n\nangular.module('MAAS').factory(\n    'ZonesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function ZonesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"zone\";\n\n            // Listen for notify events for the zone object.\n            var self = this;\n            RegionConnection.registerNotifier(\"zone\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ZonesManager.prototype = new Manager();\n\n        // Return the default zone.\n        ZonesManager.prototype.getDefaultZone = function() {\n            if(this._items.length === 0) {\n                return null;\n            } else {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].id === 0) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return this._items[0];\n        };\n\n        return new ZonesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter VLANs by Fabric.\n */\n\nangular.module('MAAS').filter('filterByFabric', function() {\n    return function(vlans, fabric) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(fabric)) {\n            id = fabric.id;\n        } else if(angular.isNumber(fabric)) {\n            id = fabric;\n        } else {\n            return filtered;\n        }\n        angular.forEach(vlans, function(vlan) {\n            if(vlan.fabric === id) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by Space.\n */\n\nangular.module('MAAS').filter('filterBySpace', function() {\n    return function(objects, space) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(space)) {\n            id = space.id;\n        } else if(angular.isNumber(space)) {\n            id = space;\n        } else {\n            return filtered;\n        }\n        angular.forEach(objects, function(object) {\n            if(object.space === id) {\n                filtered.push(object);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').filter('filterByNullSpace', function() {\n    return function(objects) {\n        var filtered = [];\n        angular.forEach(objects, function(object) {\n            if(object.space === null) {\n                filtered.push(object);\n            }\n        });\n        return filtered;\n    };\n});","/* Copyright 2016-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Filter objects with subnet foreign key references by a particular subnet.\n */\n\nangular.module('MAAS').filter('filterBySubnet', function() {\n    return function(foreign_objects, subnet, key) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(subnet)) {\n            id = subnet.id;\n        } else if(angular.isNumber(subnet)) {\n            id = subnet;\n        } else {\n            return filtered;\n        }\n        if(angular.isUndefined(key)) {\n            key = 'subnet';\n        }\n        angular.forEach(foreign_objects, function(obj) {\n            if(obj[key] === id) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n\n// Filters by subnet, unless the subnet is not defined. If the subnet is not\n// defined, filters by VLAN.\nangular.module('MAAS').filter('filterBySubnetOrVlan', function() {\n    return function(foreign_objects, subnet, vlan) {\n        var filtered = [];\n        var id;\n        var key = null;\n        if(angular.isDefined(subnet) && subnet !== null) {\n            key = 'subnet';\n            if(angular.isObject(subnet)) {\n                id = subnet.id;\n            } else if(angular.isNumber(subnet)) {\n                id = subnet;\n            }\n        } else if(angular.isDefined(vlan) && vlan !== null) {\n            key = 'vlan';\n            if(angular.isObject(vlan)) {\n                id = vlan.id;\n            } else if(angular.isNumber(vlan)) {\n                id = vlan;\n            }\n        } else {\n            return filtered;\n        }\n        angular.forEach(foreign_objects, function(obj) {\n            if(obj[key] === id) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by VLAN.\n */\n\nangular.module('MAAS').filter('filterByVLAN', function() {\n    return function(subnets, vlan) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(vlan)) {\n            id = vlan.id;\n        } else if(angular.isNumber(vlan)) {\n            id = vlan;\n        } else {\n            return filtered;\n        }\n        angular.forEach(subnets, function(subnet) {\n            if(subnet.vlan === id) {\n                filtered.push(subnet);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').filter('filterControllersByVLAN', function() {\n    return function(controllers, vlan) {\n        var filtered = [];\n        if(!angular.isObject(vlan)) {\n            return filtered;\n        }\n        angular.forEach(controllers, function(controller) {\n            // XXX mpontillo disable VLAN check until VLAN is populated\n            // on the rack controller's interfaces.\n            // if(controller.vlan_ids.indexOf(vlan.id) != -1) {\n\n            // XXX mpontillo 2016-02-22 this is a hack to prevent too many\n            // nodes from being sent through the filter; we have a bug which\n            // sends nodes in which are not controllers.\n            if(controller.node_type === 2 || controller.node_type === 4) {\n                filtered.push(controller);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Filter\n */\n\nangular.module('MAAS').filter('nodesFilter', ['$filter', 'SearchService',\n    function($filter, SearchService) {\n\n        // Default filter built-in angular. Used on all extra filters that do\n        // not specify a specific type.\n        var standardFilter = $filter('filter');\n\n        // Helpers that convert the pseudo field on node to an actual\n        // value from the node.\n        var mappings = {\n            cpu: function(node) {\n                return node.cpu_count;\n            },\n            cores: function(node) {\n                return node.cpu_count;\n            },\n            ram: function(node) {\n                return node.memory;\n            },\n            mac: function(node) {\n                macs = [];\n                macs.push(node.pxe_mac);\n                macs.push.apply(macs, node.extra_macs);\n                return macs;\n            },\n            zone: function(node) {\n                return node.zone.name;\n            },\n            pod: function(node) {\n                return (node.pod === undefined) ? undefined : node.pod.name;\n            },\n            'pod-id': function(node) {\n                return (node.pod === undefined) ? undefined : node.pod.id;\n            },\n            power: function(node) {\n                return node.power_state;\n            },\n            release: function(node) {\n                if(node.status_code === 6 || node.status_code === 9) {\n                    return node.osystem + \"/\" + node.distro_series;\n                } else {\n                    return '';\n                }\n            }\n        };\n\n        // Return true when value is an integer.\n        function isInteger(value) {\n            // +1 done to silence js-lint.\n            return value % +1 === 0;\n        }\n\n        // Return true when lowercase value contains the already\n        // lowercased lowerTerm.\n        function _matches(value, lowerTerm, exact) {\n            if(angular.isNumber(value)) {\n                if(exact) {\n                    if(isInteger(value)) {\n                        return value === parseInt(lowerTerm, 10);\n                    } else {\n                        return value === parseFloat(lowerTerm);\n                    }\n                } else {\n                    if(isInteger(value)) {\n                        return value >= parseInt(lowerTerm, 10);\n                    } else {\n                        return value >= parseFloat(lowerTerm);\n                    }\n                }\n            } else if(angular.isString(value)) {\n                if(exact) {\n                    return value.toLowerCase() === lowerTerm;\n                } else {\n                    return value.toLowerCase().indexOf(lowerTerm) >= 0;\n                }\n            } else {\n                return value === lowerTerm;\n            }\n        }\n\n        // Return true if value matches lowerTerm, unless negate is true then\n        // return false if matches.\n        function matches(value, lowerTerm, exact, negate) {\n            var match = _matches(value, lowerTerm, exact);\n            if(negate) {\n                return !match;\n            }\n            return match;\n        }\n\n        return function(nodes, search) {\n            if(angular.isUndefined(nodes) ||\n                angular.isUndefined(search) ||\n                nodes.length === 0) {\n                return nodes;\n            }\n\n            var filtered = nodes;\n            var filters = SearchService.getCurrentFilters(search);\n            angular.forEach(filters, function(terms, attr) {\n                if(attr === '_') {\n                    // Use the standard filter on terms that do not specify\n                    // an attribute.\n                    angular.forEach(terms, function(term) {\n                        filtered = standardFilter(filtered, term);\n                    });\n                } else if(attr === 'in') {\n                    // \"in:\" is used to filter the nodes by those that are\n                    // currently selected.\n                    angular.forEach(terms, function(term) {\n                        var matched = [];\n                        angular.forEach(filtered, function(node) {\n                            if(node.$selected &&\n                                term.toLowerCase() === \"selected\") {\n                                matched.push(node);\n                            } else if(!node.$selected &&\n                                term.toLowerCase() === \"!selected\") {\n                                matched.push(node);\n                            }\n                        });\n                        filtered = matched;\n                    });\n                } else {\n                    // Mapping function for the attribute.\n                    var mapFunc = mappings[attr];\n\n                    // Loop through each item and only select the matching.\n                    var matched = [];\n                    angular.forEach(filtered, function(node) {\n                        var value;\n                        if(angular.isFunction(mapFunc)) {\n                            value = mapFunc(node);\n                        } else if(node.hasOwnProperty(attr)) {\n                            value = node[attr];\n                        }\n\n                        // Unable to get value for this node. So skip it.\n                        if(angular.isUndefined(value)) {\n                            return;\n                        }\n\n                        var i, j;\n                        for(i = 0; i < terms.length; i++) {\n                            var term = terms[i].toLowerCase();\n                            var exact = false, negate = false;\n\n                            // '!' at the beginning means the term is negated.\n                            while(term.indexOf('!') === 0) {\n                                negate = !negate;\n                                term = term.substring(1);\n                            }\n\n                            // '=' at the beginning means to match exactly.\n                            if(term.indexOf('=') === 0) {\n                                exact = true;\n                                term = term.substring(1);\n                            }\n\n                            // Allow '!' after the '=' as well.\n                            while(term.indexOf('!') === 0) {\n                                negate = !negate;\n                                term = term.substring(1);\n                            }\n\n                            if(angular.isArray(value)) {\n                                // If value is an array check if the\n                                // term matches any value in the\n                                // array. If negated, check whether no\n                                // value in the array matches.\n                                if(negate) {\n                                    // Push to matched only if no value in\n                                    // the array matches term.\n                                    var no_match = true;\n                                    for(j = 0; j < value.length; j++) {\n                                        if(matches(\n                                            value[j], term, exact, false)) {\n                                            no_match = false;\n                                            break; // Skip remaining tests.\n                                        }\n                                    }\n                                    if(no_match) {\n                                        matched.push(node);\n                                        return;\n                                    }\n                                } else {\n                                    for(j = 0; j < value.length; j++) {\n                                        if(matches(\n                                            value[j], term, exact, false)) {\n                                            matched.push(node);\n                                            return;\n                                        }\n                                    }\n                                }\n                            } else {\n                                // Standard value check that it matches the\n                                // term.\n                                if(matches(value, term, exact, negate)) {\n                                    matched.push(node);\n                                    return;\n                                }\n                            }\n                        }\n                    });\n                    filtered = matched;\n                }\n            });\n            return filtered;\n        };\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by VLAN.\n */\n\nangular.module('MAAS').filter('orderByDate', function() {\n    return function(items, field, field2) {\n        var sorted = items.slice();\n        sorted.sort(function(a, b) {\n            aDate = new Date(a[field]);\n            bDate = new Date(b[field]);\n\n            // Sort by ID as well if equal.\n            if(angular.isString(field2) &&\n                aDate.getTime() === bDate.getTime()) {\n                return (\n                    a[field2] > b[field2] ? -1 : a[field2] < b[field2] ? 1 : 0);\n            } else {\n              return aDate > bDate ? -1 : aDate < bDate ? 1 : 0;\n            }\n        });\n        return sorted;\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter to remove the default VLAN as an option.\n */\n\nangular.module('MAAS').filter('removeDefaultVLAN', function() {\n    return function(vlans) {\n        var filtered = [];\n        angular.forEach(vlans, function(vlan) {\n            if(vlan.vid !== 0) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Module\n *\n * Initializes the MAAS module with its required dependencies and sets up\n * the interpolater to use '{$' and '$}' instead of '{{' and '}}' as this\n * conflicts with Django templates.\n */\n\nangular.module('MAAS',\n    ['ngRoute', 'ngCookies', 'ngSanitize', 'ngTagsInput', 'vs-repeat']).config(\n    function($interpolateProvider, $routeProvider, $httpProvider) {\n        $interpolateProvider.startSymbol('{$');\n        $interpolateProvider.endSymbol('$}');\n\n        // Set the $httpProvider to send the csrftoken in the header of any\n        // http request.\n        $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n        $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n        // Helper that wrappers the templateUrl to append the files version\n        // to the path. Used to override client cache.\n        function versionedPath(path) {\n            return path + \"?v=\" + MAAS_config.files_version;\n        }\n\n        // Setup routes only for the index page, all remaining pages should\n        // not use routes. Once all pages are converted to using Angular this\n        // will go away. Causing the page to never have to reload.\n        var href = angular.element(\"base\").attr('href');\n        var path = document.location.pathname;\n        if(path[path.length - 1] !== '/') {\n            path += '/';\n        }\n        if(path === href) {\n            var routes = $routeProvider.\n                when('/intro', {\n                    templateUrl: versionedPath(\n                        'static/partials/intro.html'),\n                    controller: 'IntroController'\n                }).\n                when('/intro/user', {\n                    templateUrl: versionedPath(\n                        'static/partials/intro-user.html'),\n                    controller: 'IntroUserController'\n                }).\n                when('/nodes', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/node/:type/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/node/:type/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/node/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/node/:type/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/node/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/pods', {\n                    templateUrl: versionedPath(\n                        'static/partials/pods-list.html'),\n                    controller: 'PodsListController'\n                }).\n                when('/pod/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/pod-details.html'),\n                    controller: 'PodDetailsController'\n                }).\n                when('/images', {\n                    templateUrl: versionedPath(\n                        'static/partials/images.html'),\n                    controller: 'ImagesController'\n                }).\n                when('/domains', {\n                    templateUrl: versionedPath(\n                        'static/partials/domains-list.html'),\n                    controller: 'DomainsListController'\n                }).\n                when('/domain/:domain_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/domain-details.html'),\n                    controller: 'DomainDetailsController'\n                }).\n                when('/space/:space_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/space-details.html'),\n                    controller: 'SpaceDetailsController'\n                }).\n                when('/fabric/:fabric_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/fabric-details.html'),\n                    controller: 'FabricDetailsController'\n                }).\n                when('/subnets', {\n                    redirectTo: '/networks?by=fabric'\n                }).\n                when('/networks', {\n                    templateUrl: versionedPath(\n                        'static/partials/networks-list.html'),\n                    controller: 'NetworksListController',\n                    reloadOnSearch: false\n                }).\n                when('/subnet/:subnet_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/subnet-details.html'),\n                    controller: 'SubnetDetailsController'\n                }).\n                when('/vlan/:vlan_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/vlan-details.html'),\n                    controller: 'VLANDetailsController',\n                    controllerAs: 'vlanDetails'\n                }).\n                when('/settings/:section', {\n                    templateUrl: versionedPath(\n                        'static/partials/settings.html'),\n                    controller: 'SettingsController'\n                }).\n                when('/zone/:zone_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/zone-details.html'),\n                    controller: 'ZoneDetailsController'\n                }).\n                when('/zones', {\n                    templateUrl: versionedPath(\n                        'static/partials/zones-list.html'),\n                    controller: 'ZonesListController',\n                    reloadOnSearch: false\n                });\n            if(MAAS_config.superuser) {\n                // Only superuser's can access the dashboard at the moment.\n                routes = routes.when('/dashboard', {\n                    templateUrl: versionedPath(\n                        'static/partials/dashboard.html'),\n                    controller: 'DashboardController'\n                }).\n                otherwise({\n                    redirectTo: '/dashboard'\n                });\n            } else {\n                routes = routes.otherwise({\n                    redirectTo: '/nodes'\n                });\n            }\n        }\n    });\n\n// Force users to #/intro when it has not been completed.\nangular.module('MAAS').run(['$rootScope', '$location',\n    function ($rootScope, $location) {\n        $rootScope.$on('$routeChangeStart', function(event, next, current) {\n            if(!MAAS_config.completed_intro) {\n                if(next.controller !== 'IntroController') {\n                    $location.path('/intro');\n                }\n            } else if (!MAAS_config.user_completed_intro) {\n                if(next.controller !== 'IntroUserController') {\n                    $location.path('/intro/user');\n                }\n            }\n        });\n    }]);\n\n// Send pageview to Google Anayltics when the route has changed.\nangular.module('MAAS').run(['$rootScope',\n    function ($rootScope) {\n        window.ga = window.ga || function() {\n            (window.ga.q = window.ga.q || []).push(arguments);\n        };\n        window.ga.l = +new Date();\n        window.ga('create', 'UA-1018242-63', 'auto', {\n          userId: MAAS_config.analytics_user_id\n        });\n        window.ga('set', 'dimension1', MAAS_config.version);\n        window.ga('set', 'dimension2', MAAS_config.uuid);\n        $rootScope.$on('$routeChangeSuccess', function() {\n            var path = window.location.pathname + window.location.hash;\n            window.ga('send', 'pageview', path);\n        });\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Browser Service\n *\n * Detects the browser used by the client. This is very simple case, because\n * at the moment we really only care about if the browser is Firefox. This\n * could be improved for other browsers, but this should only be used as a\n * last resort to prevent something bad happening on a misbehaving browser.\n */\n\nangular.module('MAAS').service('BrowserService', ['$window',\n    function($window) {\n\n        // The first items in the array will be matched first. So if the user\n        // agent for the browser contains both you need to make the more\n        // specific one first. E.g. Chrome contains both \"Chrome\" and \"Safari\"\n        // in its user-agent string. Since \"Safari\" does not chrome comes first\n        // so it matches that browser more specifically.\n        var BROWSERS = [\n            {\n                name: \"chrome\",\n                regex: /chrome/i\n            },\n            {\n                name: \"safari\",\n                regex: /safari/i\n            },\n            {\n                name: \"firefox\",\n                regex: /firefox/i\n            },\n            {\n                name: \"ie\",\n                regex: /MSIE/\n            }\n        ];\n\n        this.browser = \"other\";\n\n        // Set the browser if a regex matches. The first to match wins.\n        var self = this;\n        angular.forEach(BROWSERS, function(matcher) {\n            if(matcher.regex.test($window.navigator.userAgent) &&\n                self.browser === \"other\") {\n                self.browser = matcher.name;\n            }\n        });\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Converter Service\n *\n * Used by controllers to convert user inputs.\n */\n\nangular.module('MAAS').service('ConverterService', function() {\n\n        // Case is important: 1kB is 1000 bytes, whereas 1KB is 1024 bytes.\n        // See https://en.wikipedia.org/wiki/Byte#Unit_symbol\n        var UNITS = ['bytes', 'kB', 'MB', 'GB', 'TB'];\n\n        var KILOBYTE = 1000.0;\n        var MEGABYTE = 1000.0 * 1000.0;\n        var GIGABYTE = 1000.0 * 1000.0 * 1000.0;\n        var TERABYTE = 1000.0 * 1000.0 * 1000.0 * 1000.0;\n\n        // Convert the bytes to a unit.\n        this.bytesToUnits = function(bytes) {\n            // Support string being passed.\n            if(angular.isString(bytes)) {\n                bytes = parseInt(bytes, 10);\n            }\n\n            var i, unit, converted = bytes;\n            for(i = 0; i < UNITS.length; i++) {\n                unit = UNITS[i];\n                if(Math.abs(converted) < 1000.0 || unit === 'TB') {\n                    var string = converted.toFixed(1) + \" \" + unit;\n                    if(unit === 'bytes') {\n                        string = converted + \" \" + unit;\n                    }\n                    return {\n                        original: bytes,\n                        converted: converted,\n                        units: unit,\n                        string: string\n                    };\n                }\n                converted /= 1000.0;\n            }\n        };\n\n        // Convert the data based on the unit to bytes.\n        this.unitsToBytes = function(data, unit) {\n            // Support string being passed.\n            if(angular.isString(data)) {\n                data = parseFloat(data);\n            }\n            if(unit === 'bytes') {\n                return Math.floor(data);\n            } else if(unit === 'kB') {\n                return Math.floor(data * KILOBYTE);\n            } else if(unit === 'MB') {\n                return Math.floor(data * MEGABYTE);\n            } else if(unit === 'GB') {\n                return Math.floor(data * GIGABYTE);\n            } else if(unit === 'TB') {\n                return Math.floor(data * TERABYTE);\n            }\n        };\n\n        // Convert the data based on unit down to the lowest tolerance to still\n        // be the same value in that unit.\n        this.roundUnits = function(data, unit) {\n            // Support string being passed.\n            if(angular.isString(data)) {\n                data = parseFloat(data);\n            }\n            if(unit === 'bytes') {\n                return Math.floor(data);\n            } else if(unit === 'kB') {\n                return Math.floor(data * KILOBYTE) - (0.05 * KILOBYTE);\n            } else if(unit === 'MB') {\n                return Math.floor(data * MEGABYTE) - (0.05 * MEGABYTE);\n            } else if(unit === 'GB') {\n                return Math.floor(data * GIGABYTE) - (0.05 * GIGABYTE);\n            } else if(unit === 'TB') {\n                return Math.floor(data * TERABYTE) - (0.05 * TERABYTE);\n            }\n        };\n\n        // Round the bytes down to size based on the block size.\n        this.roundByBlockSize = function(bytes, block_size) {\n            return block_size * Math.floor(bytes / block_size);\n        };\n\n        // Convert string ipv4 address into octets array.\n        this.ipv4ToOctets = function(ipAddress) {\n            var parts = ipAddress.split('.');\n            var octets = [];\n            angular.forEach(parts, function(part) {\n                octets.push(parseInt(part, 10));\n            });\n            return octets;\n        };\n\n        // Convert string ipv4 address into integer.\n        this.ipv4ToInteger = function(ipAddress) {\n            var octets = this.ipv4ToOctets(ipAddress);\n            return (\n                (octets[0] * Math.pow(256,3)) +\n                (octets[1] * Math.pow(256,2)) +\n                (octets[2] * 256) + octets[3]);\n        };\n\n        // Convert ipv6 address to a full ipv6 address, removing the\n        // '::' shortcut and padding each group with zeros.\n        this.ipv6Expand = function(ipAddress) {\n            var i, expandedAddress = ipAddress;\n            if(expandedAddress.indexOf(\"::\") !== -1) {\n                // '::' is present so replace it with the required\n                // number of '0000:' based on its location in the string.\n                var split = ipAddress.split(\"::\");\n                var groups = 0;\n                for(i = 0; i < split.length; i++) {\n                    groups += split[i].split(\":\").length;\n                }\n                expandedAddress = split[0] + \":\";\n                for(i = 0; i < 8 - groups; i++) {\n                    expandedAddress += \"0000:\";\n                }\n                expandedAddress += split[1];\n            }\n            // Pad the output of each part with zeros.\n            var output = [], parts = expandedAddress.split(\":\");\n            angular.forEach(parts, function(part) {\n                output.push(\"0000\".substr(part.length) + part);\n            });\n            return output.join(\":\");\n        };\n\n        // Convert string ipv6 into groups array.\n        this.ipv6ToGroups = function(ipAddress) {\n            var groups = [];\n            var parts = this.ipv6Expand(ipAddress).split(\":\");\n            angular.forEach(parts, function(part) {\n                groups.push(parseInt(part, 16));\n            });\n            return groups;\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Error Service\n */\n\nangular.module('MAAS').service('ErrorService', function() {\n\n        // Holds the client error.\n        this._error = null;\n\n        // Raise this error in the UI.\n        this.raiseError = function(error) {\n            // Possible that this method is called more than once.\n            // Only take the first error.\n            if(!angular.isString(this._error)) {\n                this._error = error;\n            }\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS JSON Service\n *\n * Used by controllers to parse JSON.\n */\n\nangular.module('MAAS').service('JSONService', function() {\n\n    // Return the JSON for the string or null if it cannot be parsed.\n    this.tryParse = function(jsonString) {\n        try {\n            var obj = JSON.parse(jsonString);\n            // JSON.parse(false) or JSON.parse(1234) will throw errors, but\n            // JSON.parse(null) returns 'null', and typeof null === \"object\".\n            if (obj && typeof obj === \"object\" && obj !== null) {\n                return obj;\n            }\n        }\n        catch (e) { }\n        return null;\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Log Service\n *\n * Allows logging to be enabled or disabled, and allows a particular log level\n * to be set, which will allow logs of a specified importance (or more) to be\n * seen.\n *\n * Also appends a time index (in seconds, accurate to milliseconds) to the\n * beginning of the log string.\n */\n\nangular.module('MAAS').service('LogService', [\n    '$window', function($window) {\n        var self = this;\n\n        // Global enable/disable for MAAS logging. If set to `false`, this\n        // value takes precedence over the logLevel.\n        self.logging = true;\n\n        // Specifies the log level.\n        // Level 1: error() logging\n        // Level 2: error() and warn() logging\n        // Level 3: all of the above, plus info()\n        // Level 4: all of the above, plus log()\n        // Level 5: all of the above, plus debug()\n        self.logLevel = 5;\n\n        // Returns a monotonic time (in milliseconds) since page load.\n        self.now = function() {\n            return $window.performance ? $window.performance.now() : 0;\n        };\n\n        // Standard logging functions.\n        self._debug = console.debug;\n        self._log = console.log;\n        self._info = console.info;\n        self._warn = console.warn;\n        self._error = console.error;\n\n        // Formats the specified time (in milliseconds) in seconds.\n        this.formatMilliseconds = function(milliseconds) {\n            return parseFloat(milliseconds / 1000.0).toFixed(3);\n        };\n\n        // Internal function to log using the specified destination, with the\n        // specified list of arguments.\n        this.__log = function(destination, args) {\n            if(self.logging === true) {\n                // Add time index to the beginning of the log.\n                Array.prototype.unshift.call(args,\n                    \"[\" + self.formatMilliseconds(self.now()) + \"]\");\n                destination.apply(self, args);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._debug().\n        this.debug = function() {\n            if(self.logLevel >= 5) {\n                self.__log(self._debug, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._log().\n        this.log = function() {\n            if(self.logLevel >= 4) {\n                self.__log(self._log, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._info().\n        this.info = function() {\n            if(self.logLevel >= 3) {\n                self.__log(self._info, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._warn().\n        this.warn = function() {\n            if(self.logLevel >= 2) {\n                self.__log(self._warn, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._err().\n        this.error = function() {\n            if(self.logLevel >= 1) {\n                self.__log(self._error, arguments);\n            }\n        };\n    }\n]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Base Manager\n *\n * Manages a collection of items from the websocket in the browser. The manager\n * uses the RegionConnection to load the items, update the items, and listen\n * for notification events about the items.\n */\n\nangular.module('MAAS').service(\n    'Manager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', function(\n            $q, $rootScope, $timeout, RegionConnection) {\n\n        // Actions that are used to update the statuses metadata.\n        var METADATA_ACTIONS = {\n            CREATE: \"create\",\n            UPDATE: \"update\",\n            DELETE: \"delete\"\n        };\n\n        // Constructor\n        function Manager() {\n            // Primary key on the items in the list. Used to match items.\n            this._pk = \"id\";\n\n            // Key used when loading batches. Typically the same as _pk\n            // but not always.\n            this._batchKey = \"id\";\n\n            // The field from which to get a human-readable name.\n            this._name_field = \"name\";\n\n            // Handler on the region to call to list, create, update, delete,\n            // and listen for notifications. Must be set by overriding manager.\n            this._handler = null;\n\n            // Holds all items in the system. This list must always be the same\n            // object.\n            this._items = [];\n\n            // The way this manager recieves its updated information. 'notify'\n            // means this manager recieved notify messages from the websocket.\n            // See PollingManager for the other possible type. This is only\n            // used by the `ManagerHelperService` to identify how updating\n            // the data should be handled.\n            this._type = 'notify';\n\n            // Holds list of scopes that currently have this manager loaded.\n            this._scopes = [];\n\n            // True when all of the items have been loaded. This is done on\n            // intial connection to the region.\n            this._loaded = false;\n\n            // True when the items list is currently being loaded or reloaded.\n            // Actions will not be processed while this is false.\n            this._isLoading = false;\n\n            // Holds list of defers that need to be called once the loading of\n            // items has finished. This is used when a caller calls loadItems\n            // when its already loading.\n            this._extraLoadDefers = [];\n\n            // Holds list of defers that need to be called once the reloading\n            // of items has finished. This is used when a caller calls\n            // reloadItems when its already reloading.\n            this._extraReloadDefers = [];\n\n            // Holds all of the notify actions that need to be processed. This\n            // is used to hold the actions while the items are being loaded.\n            // Once all of the items are loaded the queue will be processed.\n            this._actionQueue = [];\n\n            // Holds list of all of the currently selected items. This is held\n            // in a seperate list to remove the need to loop through the full\n            // listing to grab the selected items.\n            this._selectedItems = [];\n\n            // Set to true when the items list should reload upon re-connection\n            // to the region.\n            this._autoReload = false;\n\n            // Holds the item that is currenly being viewed. This object will\n            // be updated if any notify events are recieved for it. This allows\n            // the ability of not having to keep pulling the item out of the\n            // items list.\n            this._activeItem = null;\n\n            // Holds metadata information that is used to helper filtering.\n            this._metadata = {};\n\n            // List of attributes to track on the loaded items. Each attribute\n            // in this list will be placed in _metadata to track its currect\n            // values and the number of items with that value.\n            this._metadataAttributes = [];\n        }\n\n        // Return index of the item in the given array.\n        Manager.prototype._getIndexOfItem = function(array, pk_value) {\n            var i;\n            for(i = 0, len = array.length; i < len; i++) {\n                if(array[i][this._pk] === pk_value) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n\n        // Replace the item in the array at the same index.\n        Manager.prototype._replaceItemInArray = function(array, item) {\n            var idx = this._getIndexOfItem(array, item[this._pk]);\n            if(idx >= 0) {\n                // Keep the current selection on the item.\n                item.$selected = array[idx].$selected;\n                angular.copy(item, array[idx]);\n            }\n        };\n\n        // Remove the item from the array.\n        Manager.prototype._removeItemByIdFromArray = function(\n            array, pk_value) {\n            var idx = this._getIndexOfItem(array, pk_value);\n            if(idx >= 0) {\n                array.splice(idx, 1);\n            }\n        };\n\n        // Return the parameters that should be used for the batch load\n        // request. Should be used by subclass that want to add extra\n        // parameters to the batch request. By default it returns an empty\n        // object.\n        Manager.prototype._initBatchLoadParameters = function() {\n            return {};\n        };\n\n        // Batch load items from the region in groups of 50.\n        Manager.prototype._batchLoadItems = function(array, extra_func) {\n            var self = this;\n            var defer = $q.defer();\n            var method = this._handler + \".list\";\n            function callLoad() {\n                var params = self._initBatchLoadParameters();\n                params.limit = 50;\n\n                // Get the last batchKey in the list so the region knows to\n                // start at that offset.\n                if(array.length > 0) {\n                    params.start = array[array.length-1][self._batchKey];\n                }\n                RegionConnection.callMethod(\n                    method, params).then(function(items) {\n                        // Pass each item to extra_func function if given.\n                        if(angular.isFunction(extra_func)) {\n                            angular.forEach(items, function(item) {\n                                extra_func(item);\n                            });\n                        }\n\n                        array.push.apply(array, items);\n                        if(items.length === 50) {\n                            // Could be more items, request the next 50.\n                            callLoad(array);\n                        } else {\n                            defer.resolve(array);\n                        }\n                    }, defer.reject);\n            }\n            callLoad();\n            return defer.promise;\n        };\n\n        // Resolves array of defers with item.\n        Manager.prototype._resolveDefers = function(defersArray, item) {\n            angular.forEach(defersArray, function(defer) {\n                defer.resolve(item);\n            });\n        };\n\n        // Rejects array of defers with error.\n        Manager.prototype._rejectDefers = function(defersArray, error) {\n            angular.forEach(defersArray, function(defer) {\n                defer.reject(error);\n            });\n        };\n\n        // Return list of items.\n        Manager.prototype.getItems = function() {\n            return this._items;\n        };\n\n        // Clears the currect state of the manager.\n        Manager.prototype.clear = function() {\n            this._loaded = false;\n            this._items.length = 0;\n            this._actionQueue.length = 0;\n            this._selectedItems.length = 0;\n            this._activeItem = null;\n            this._metadata = {};\n            this._metadataAttributes.length = 0;\n        };\n\n        // Load all the items.\n        Manager.prototype.loadItems = function() {\n            // If the items have already been loaded then, we need to\n            // reload the items list not load the initial list.\n            if(this._loaded) {\n                return this.reloadItems();\n            }\n\n            // If its already loading then the caller just needs to be informed\n            // of when it has finished loading.\n            if(this._isLoading) {\n                var defer = $q.defer();\n                this._extraLoadDefers.push(defer);\n                return defer.promise;\n            }\n\n            var self = this;\n            this._isLoading = true;\n            return this._batchLoadItems(this._items, function(item) {\n                item.$selected = false;\n                self._updateMetadata(item, METADATA_ACTIONS.CREATE);\n                self._processItem(item);\n            }).then(function() {\n                self._loaded = true;\n                self._isLoading = false;\n                self.processActions();\n                self._resolveDefers(self._extraLoadDefers, self._items);\n                self._extraLoadDefers = [];\n                return self._items;\n            }, function(error) {\n                self._rejectDefers(self._extraLoadDefers, error);\n                self._extraLoadDefers = [];\n                return $q.reject(error);\n            });\n        };\n\n        // Reload the items list.\n        Manager.prototype.reloadItems = function() {\n            // If the items have not been loaded then, we need to\n            // load the initial list.\n            if(!this._loaded) {\n                return this.loadItems();\n            }\n\n            // If its already reloading then the caller just needs to be\n            // informed of when it has refinished loading.\n            if(this._isLoading) {\n                var defer = $q.defer();\n                this._extraReloadDefers.push(defer);\n                return defer.promise;\n            }\n\n            // Updates the items list with the reloaded items.\n            var self = this;\n            function updateItems(items) {\n                // Iterate in reverse so we can remove items inline, without\n                // having to adjust the index.\n                var i = self._items.length;\n                while(i--) {\n                    var item = self._items[i];\n                    var updatedIdx = self._getIndexOfItem(\n                        items, item[self._pk]);\n                    if(updatedIdx === -1) {\n                        self._updateMetadata(item, METADATA_ACTIONS.DELETE);\n                        self._items.splice(i, 1);\n                        self._removeItemByIdFromArray(\n                            self._selectedItems, item[self._pk]);\n                    } else {\n                        var updatedItem = items[updatedIdx];\n                        self._updateMetadata(\n                            updatedItem, METADATA_ACTIONS.UPDATE);\n                        updatedItem.$selected = item.$selected;\n                        angular.copy(items[updatedIdx], item);\n                        items.splice(updatedIdx, 1);\n                    }\n                }\n\n                // The remain items in items array are the new items.\n                angular.forEach(items, function(item) {\n                    self._items.push(item);\n                    self._processItem(item);\n                });\n            }\n\n            // The reload action loads all of the items into this list\n            // instead of the items list. This list will then be used to\n            // update the items list.\n            var currentItems = [];\n\n            // Start the reload process and once complete call updateItems.\n            self._isLoading = true;\n            return this._batchLoadItems(currentItems).then(function(items) {\n                updateItems(items);\n                self._isLoading = false;\n                self.processActions();\n\n                // Set the activeItem again so the region knows that its\n                // the active item.\n                if(angular.isObject(self._activeItem)) {\n                    self.setActiveItem(self._activeItem[self._pk]);\n                }\n\n                self._resolveDefers(self._extraReloadDefers, self._items);\n                self._extraReloadDefers = [];\n                return self._items;\n            }, function(error) {\n                self._rejectDefers(self._extraReloadDefers, error);\n                self._extraReloadDefers = [];\n                return $q.reject(error);\n            });\n        };\n\n        // Enables auto reloading of the item list on connection to region.\n        Manager.prototype.enableAutoReload = function() {\n            if(!this._autoReload) {\n                this._autoReload = true;\n                var self = this;\n                this._reloadFunc = function() {\n                    self.reloadItems();\n                };\n                RegionConnection.registerHandler(\"open\", this._reloadFunc);\n            }\n        };\n\n        // Disable auto reloading of the item list on connection to region.\n        Manager.prototype.disableAutoReload = function() {\n            if(this._autoReload) {\n                RegionConnection.unregisterHandler(\"open\", this._reloadFunc);\n                this._reloadFunc = null;\n                this._autoReload = false;\n            }\n        };\n\n        // True when the initial item list has finished loading.\n        Manager.prototype.isLoaded = function() {\n            return this._loaded;\n        };\n\n        // True when the item list is currently being loaded or reloaded.\n        Manager.prototype.isLoading = function() {\n            return this._isLoading;\n        };\n\n        // Allow for extra processing of items as they are added or updated.\n        Manager.prototype._processItem = function(item) {\n        };\n\n        // Replace item in the items and selectedItems list.\n        Manager.prototype._replaceItem = function(item) {\n            this._updateMetadata(item, METADATA_ACTIONS.UPDATE);\n            this._replaceItemInArray(this._items, item);\n        };\n\n        // Remove item in the items and selectedItems list.\n        Manager.prototype._removeItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx >= 0) {\n                this._updateMetadata(this._items[idx], METADATA_ACTIONS.DELETE);\n            }\n            this._removeItemByIdFromArray(this._items, pk_value);\n            this._removeItemByIdFromArray(this._selectedItems, pk_value);\n        };\n\n        // Get the item from the list. Does not make a get request to the\n        // region to load more data.\n        Manager.prototype.getItemFromList = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx >= 0) {\n                return this._items[idx];\n            } else {\n                return null;\n            }\n        };\n\n        // Get the item from the region.\n        Manager.prototype.getItem = function(pk_value) {\n            var self = this;\n            var method = this._handler + \".get\";\n            var params = {};\n            params[this._pk] = pk_value;\n            return RegionConnection.callMethod(\n                method, params).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the create information to the region.\n        Manager.prototype.createItem = function(item) {\n            var self = this;\n            var method = this._handler + \".create\";\n            item = angular.copy(item);\n            delete item.$selected;\n            return RegionConnection.callMethod(\n                method, item).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the update information to the region.\n        Manager.prototype.updateItem = function(item) {\n            var self = this;\n            var method = this._handler + \".update\";\n            item = angular.copy(item);\n            delete item.$selected;\n            return RegionConnection.callMethod(\n                method, item).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the delete call for item to the region.\n        Manager.prototype.deleteItem = function(item) {\n            var self = this;\n            var method = this._handler + \".delete\";\n            var params = {};\n            params[this._pk] = item[this._pk];\n            return RegionConnection.callMethod(\n                method, params).then(function() {\n                    self._removeItem(item[self._pk]);\n                });\n        };\n\n        // Return the active item.\n        Manager.prototype.getActiveItem = function() {\n            return this._activeItem;\n        };\n\n        // Set the active item.\n        Manager.prototype.setActiveItem = function(pk_value) {\n            if(!this._loaded) {\n                throw new Error(\n                    \"Cannot set active item unless the manager is loaded.\");\n            }\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                this._activeItem = null;\n                // Item with pk_value does not exists. Reject the returned\n                // deferred.\n                var defer = $q.defer();\n                $timeout(function() {\n                    defer.reject(\"No item with pk: \" + pk_value);\n                });\n                return defer.promise;\n            } else {\n                this._activeItem = this._items[idx];\n                // Data that is loaded from the list call is limited and\n                // doesn't contain all of the needed data for an activeItem.\n                // Call set_active on the handler for the region to know\n                // this item needs all information when updated.\n                var self = this;\n                var method = this._handler + \".set_active\";\n                var params = {};\n                params[this._pk] = pk_value;\n                return RegionConnection.callMethod(\n                    method, params).then(function(item) {\n                        self._replaceItem(item);\n                        return self._activeItem;\n                    });\n            }\n        };\n\n        // Clears the active item.\n        Manager.prototype.clearActiveItem = function() {\n            this._activeItem = null;\n        };\n\n        // True when the item list is stable and not being loaded or reloaded.\n        Manager.prototype.canProcessActions = function() {\n            return !this._isLoading;\n        };\n\n        // Handle notify from RegionConnection about an item.\n        Manager.prototype.onNotify = function(action, data) {\n            // Place the notification in the action queue.\n            this._actionQueue.push({\n                action: action,\n                data: data\n            });\n            // Processing incoming actions is enabled. Otherwise they\n            // will be queued until processActions is called.\n            if(this.canProcessActions()) {\n               $rootScope.$apply(this.processActions());\n            }\n        };\n\n        // Process all actions to keep the item information up-to-date.\n        Manager.prototype.processActions = function() {\n            while(this._actionQueue.length > 0) {\n                var action = this._actionQueue.shift();\n                if(action.action === \"create\") {\n                    // Check that the received data doesn't already exists\n                    // in the _items list. If it does then this is actually\n                    // an update action not a create action.\n                    var idx = this._getIndexOfItem(\n                        this._items, action.data[this._pk]);\n                    if(idx >= 0) {\n                        // Actually this is an update action not a create\n                        // action. So replace the item instead of adding it.\n                        this._replaceItem(action.data);\n                    } else {\n                        action.data.$selected = false;\n                        this._updateMetadata(\n                            action.data, METADATA_ACTIONS.CREATE);\n                        this._items.push(action.data);\n                    }\n                    this._processItem(action.data);\n                } else if(action.action === \"update\") {\n                    this._replaceItem(action.data);\n                    this._processItem(action.data);\n                } else if(action.action === \"delete\") {\n                    this._removeItem(action.data);\n                }\n            }\n        };\n\n        // Return list of selected items.\n        Manager.prototype.getSelectedItems = function() {\n            return this._selectedItems;\n        };\n\n        // Mark the given item as selected.\n        Manager.prototype.selectItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: selection of \" + this._handler + \"(\" + pk_value +\n                    \") failed because its missing in the items list.\");\n                return;\n            }\n\n            var item = this._items[idx];\n            item.$selected = true;\n\n            idx = this._selectedItems.indexOf(item);\n            if(idx === -1) {\n                this._selectedItems.push(item);\n            }\n        };\n\n        // Mark the given item as unselected.\n        Manager.prototype.unselectItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: de-selection of \" + this._handler + \"(\" +\n                    pk_value + \") failed because its missing in the \" +\n                    \"nodes list.\");\n                return;\n            }\n\n            var item = this._items[idx];\n            item.$selected = false;\n\n            idx = this._selectedItems.indexOf(item);\n            if(idx >= 0) {\n                this._selectedItems.splice(idx, 1);\n            }\n        };\n\n        // Determine if a item is selected.\n        Manager.prototype.isSelected = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: unable to determine if \" + this._handler + \"(\" +\n                    pk_value + \") is selected because its missing in the \" +\n                    \"nodes list.\");\n                return false;\n            }\n\n            return this._items[idx].$selected === true;\n        };\n\n        // Return the metadata object value from `metadatas` matching `name`.\n        Manager.prototype._getMetadataValue = function(metadatas, name) {\n            var i;\n            for(i = 0; i < metadatas.length; i++) {\n                if(metadatas[i].name === name) {\n                    return metadatas[i];\n                }\n            }\n            return null;\n        };\n\n        // Add new value to metadatas if it doesnt exists or increment the\n        // count if it already does.\n        Manager.prototype._addMetadataValue = function(metadatas, value) {\n            var metadata = this._getMetadataValue(metadatas, value);\n            if(metadata) {\n                metadata.count += 1;\n            } else {\n                metadata = {\n                    name: value,\n                    count: 1\n                };\n                metadatas.push(metadata);\n            }\n        };\n\n        // Remove value from metadatas.\n        Manager.prototype._removeMetadataValue = function(metadatas, value) {\n            var metadata = this._getMetadataValue(metadatas, value);\n            if(metadata) {\n                metadata.count -= 1;\n                if(metadata.count <= 0) {\n                    metadatas.splice(metadatas.indexOf(metadata), 1);\n                }\n            }\n        };\n\n        // Update the metadata entry in `metadatas` for the array value and\n        // based on the action.\n        Manager.prototype._updateMetadataArrayEntry = function(\n                metadatas, newValue, action, oldValue) {\n            var self = this;\n\n            if(action === METADATA_ACTIONS.CREATE) {\n                angular.forEach(newValue, function(value) {\n                    // On create ignore empty values.\n                    if(value === '') {\n                        return;\n                    }\n                    self._addMetadataValue(metadatas, value);\n                });\n            } else if(action === METADATA_ACTIONS.DELETE) {\n                angular.forEach(newValue, function(value) {\n                    self._removeMetadataValue(metadatas, value);\n                });\n            } else if(action === METADATA_ACTIONS.UPDATE &&\n                angular.isDefined(oldValue)) {\n                // Any values in added are new on the item, and any values left\n                // in oldArray have been removed.\n                var added = [];\n                var oldArray = angular.copy(oldValue);\n                angular.forEach(newValue, function(value) {\n                    var idx = oldArray.indexOf(value);\n                    if(idx === -1) {\n                        // Value not in oldArray so it has been added.\n                        added.push(value);\n                    } else {\n                        // Value already in oldArray so its already tracked.\n                        oldArray.splice(idx, 1);\n                    }\n                });\n\n                // Add the new values.\n                angular.forEach(added, function(value) {\n                    self._addMetadataValue(metadatas, value);\n                });\n\n                // Remove the old values.\n                angular.forEach(oldArray, function(value) {\n                    self._removeMetadataValue(metadatas, value);\n                });\n            }\n        };\n\n        // Update the metadata entry in `metadatas` for the newValue and based\n        // on the action. Method does not work with array values, use\n        // _updateMetadataArrayEntry for values that are arrays.\n        Manager.prototype._updateMetadataValueEntry = function(\n                metadatas, newValue, action, oldValue) {\n            if(action === METADATA_ACTIONS.CREATE) {\n                // On create ignore empty values.\n                if(newValue === '') {\n                    return;\n                }\n                this._addMetadataValue(metadatas, newValue);\n            } else if(action === METADATA_ACTIONS.DELETE) {\n                this._removeMetadataValue(metadatas, newValue);\n            } else if(action === METADATA_ACTIONS.UPDATE &&\n                angular.isDefined(oldValue)) {\n                if(oldValue !== newValue) {\n                    if(oldValue !== \"\") {\n                        // Decrement the old value\n                        this._removeMetadataValue(metadatas, oldValue);\n                    }\n\n                    // Increment the new value with the \"create\"\n                    // operation.\n                    this._updateMetadataEntry(\n                        metadatas, newValue, METADATA_ACTIONS.CREATE, oldValue);\n                }\n            }\n        };\n\n        // Update the metadata entry in `metadatas` with the newValue and based\n        // on the action. Update action will use the oldValue to remove it from\n        // the metadata.\n        Manager.prototype._updateMetadataEntry = function(\n                metadatas, newValue, action, oldValue) {\n            if(angular.isArray(newValue)) {\n                this._updateMetadataArrayEntry(\n                    metadatas, newValue, action, oldValue);\n            } else {\n                this._updateMetadataValueEntry(\n                    metadatas, newValue, action, oldValue);\n            }\n        };\n\n        // Return the metadata object.\n        Manager.prototype.getMetadata = function() {\n            return this._metadata;\n        };\n\n        // Update the metadata objects based on the given item and action.\n        Manager.prototype._updateMetadata = function(item, action) {\n            var self = this;\n            var oldItem, idx;\n            if(action === METADATA_ACTIONS.UPDATE) {\n                // Update actions require the oldItem if it exist in the\n                // current item listing.\n                idx = this._getIndexOfItem(this._items, item[this._pk]);\n                if(idx >= 0) {\n                    oldItem = this._items[idx];\n                }\n            }\n            angular.forEach(this._metadataAttributes, function(func, attr) {\n                if(angular.isUndefined(self._metadata[attr])) {\n                    self._metadata[attr] = [];\n                }\n                var newValue, oldValue;\n                if(angular.isFunction(func)) {\n                    newValue = func(item);\n                    if(angular.isObject(oldItem)) {\n                        oldValue = func(oldItem);\n                    }\n                } else {\n                    newValue = item[attr];\n                    if(angular.isObject(oldItem)) {\n                        oldValue = oldItem[attr];\n                    }\n                }\n                self._updateMetadataEntry(\n                    self._metadata[attr], newValue, action, oldValue);\n            });\n        };\n\n        // Default implementation of getName(): returns the default name for\n        // this object, if it exists.\n        Manager.prototype.getName = function(obj) {\n            if(!angular.isObject(obj)) {\n                return;\n            }\n            if(angular.isString(obj[this._name_field])) {\n                return obj[this._name_field];\n            }\n        };\n\n        return Manager;\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Manager Helper Service\n *\n * Used by controllers to load managers. It helps the initialization of\n * managers and makes sure that all items in the manager are loaded\n * before resolving the defer.\n */\n\nangular.module('MAAS').service('ManagerHelperService', [\n    '$q', '$timeout', 'ErrorService', 'RegionConnection',\n    function($q, $timeout, ErrorService, RegionConnection) {\n\n        // Loads the manager.\n        this.loadManager = function(scope, manager) {\n            var defer = $q.defer();\n\n            // If the manager already has this scope loaded then nothing needs\n            // to be done.\n            if(manager._scopes.indexOf(scope) > -1) {\n                $timeout(function() {\n                    defer.resolve(manager);\n                });\n                return defer.promise;\n            }\n\n            // Do this entire operation with in the context of the region\n            // connection is connected.\n            RegionConnection.defaultConnect().then(function() {\n                if(manager._type === 'notify') {\n                    if(manager.isLoaded()) {\n                        $timeout(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        });\n                    } else {\n                        manager.loadItems().then(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                    }\n                    // Always enable auto reload. This will make sure the items\n                    // are reloaded if the connection goes down.\n                    manager.enableAutoReload();\n\n                    // Remove the scope for the loaded scopes for the manager.\n                    scope.$on(\"$destroy\", function() {\n                        var idx = manager._scopes.indexOf(scope);\n                        if(idx > -1) {\n                            manager._scopes.splice(idx, 1);\n                        }\n                    });\n                } else if(manager._type === 'poll') {\n                    if(manager.isPolling()) {\n                        $timeout(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        });\n                    } else {\n                        manager.startPolling().then(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                    }\n\n                    // Stop the polling when the scope is destroyed and its\n                    // not in use by any other scopes.\n                    scope.$on(\"$destroy\", function() {\n                        var idx = manager._scopes.indexOf(scope);\n                        if(idx > -1) {\n                            manager._scopes.splice(idx, 1);\n                        }\n                        if(manager._scopes.length === 0) {\n                            manager.stopPolling();\n                        }\n                    });\n                } else {\n                    throw new Error(\"Unknown manager type: \" + manager._type);\n                }\n            });\n            return defer.promise;\n        };\n\n        // Gets the list of managers.\n        this.loadManagers = function(scope, managers) {\n            var defer = $q.defer();\n            var loadedManagers = [];\n\n            // Resolves the defer if all managers are loaded.\n            var resolveAllLoaded = function() {\n                if(loadedManagers.length === managers.length) {\n                    defer.resolve(managers);\n                }\n            };\n\n            var self = this;\n            angular.forEach(managers, function(manager) {\n                self.loadManager(scope, manager).then(function(loadedManager) {\n                    loadedManagers.push(loadedManager);\n                    resolveAllLoaded();\n                });\n            });\n            return defer.promise;\n        };\n\n        // Tries to parse the specified string as JSON. If parsing fails,\n        // returns the original string. (This is useful since some manager\n        // calls return an error that could be either plain text, or JSON.)\n        this.tryParsingJSON = function(string) {\n            var error;\n            try {\n                error = JSON.parse(string);\n            } catch(e) {\n                if (e instanceof SyntaxError) {\n                    return string;\n                } else {\n                    throw e;\n                }\n            }\n            return error;\n        };\n\n        // Returns a printable version of the specified dictionary (useful\n        // for displaying an error to the user).\n        this.getPrintableString = function(dict, showNames) {\n            var result = '';\n            angular.forEach(dict, function(value, key) {\n                var error = dict[key];\n                if(showNames === true) {\n                    result += key + \": \";\n                }\n                if(angular.isString(error) || angular.isNumber(error)) {\n                    result += error + \"  \";\n                } else if(angular.isObject(error)) {\n                    angular.forEach(error, function(error) {\n                        result += error + \"  \";\n                    });\n                }\n                result = result.trim() + \"\\n\";\n            });\n            return result.trim();\n        };\n\n        // Convert the Python dict error message to displayed message.\n        // We know it's probably a form ValidationError dictionary, so just use\n        // it as such, and recover if that doesn't parse as JSON.\n        this.parseValidationError = function(error, showNames) {\n            error = this.tryParsingJSON(error);\n            if(!angular.isObject(error)) {\n                return error;\n            } else {\n                return this.getPrintableString(error, showNames);\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Manager\n *\n * Manages all of the spaces in the browser. The manager uses the\n * RegionConnection to load the spaces, update the spaces, and listen for\n * notification events about spaces.\n */\n\nangular.module('MAAS').factory(\n    'PollingManager',\n    ['$q', '$timeout', 'RegionConnection', 'Manager',\n    function($q, $timeout, RegionConnection, Manager) {\n\n        function PollingManager() {\n            Manager.call(this);\n\n            // The way this manager recieves its updated information. 'poll'\n            // means this manager periodicly polls for new data from the\n            // websocket.\n            this._type = 'poll';\n\n            // Set to true when polling has been enabled.\n            this._polling = false;\n\n            // The next promise for the polling interval.\n            this._nextPromise = null;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 3000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n        }\n\n        PollingManager.prototype = new Manager();\n\n        // Returns true when currently polling.\n        PollingManager.prototype.isPolling = function() {\n            return this._polling;\n        };\n\n        // Starts the polling.\n        PollingManager.prototype.startPolling = function() {\n            if(!this._polling) {\n                this._polling = true;\n                return this._poll();\n            } else {\n                return this._nextPromise;\n            }\n        };\n\n        // Stops the polling.\n        PollingManager.prototype.stopPolling = function() {\n            this._polling = false;\n            if(angular.isObject(this._nextPromise)) {\n                $timeout.cancel(this._nextPromise);\n                this._nextPromise = null;\n            }\n        };\n\n        // Registers the next polling attempt.\n        PollingManager.prototype._pollAgain = function(timeout) {\n            var self = this;\n            this._nextPromise = $timeout(function() {\n                self._poll();\n            }, timeout);\n            return this._nextPromise;\n        };\n\n        // Polls for the data from the region.\n        PollingManager.prototype._poll = function() {\n            var self = this;\n            return this.reloadItems().then(function(items) {\n                var pollTimeout = self._pollTimeout;\n                if(items.length === 0) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(pollTimeout);\n                return items;\n            }, function(error) {\n                self._pollAgain(self._pollErrorTimeout);\n                return $q.reject(error);\n            });\n        };\n\n        return PollingManager;\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Search Services\n */\n\nangular.module('MAAS').service('SearchService', function() {\n\n    // Holds an empty filter object.\n    var emptyFilter = { _: [] };\n\n    // Return a new empty filter;\n    this.getEmptyFilter = function() {\n        return angular.copy(emptyFilter);\n    };\n\n    // Splits the search string into different terms based on white space.\n    // This handles the ability for whitespace to be inside of '(', ')'.\n    //\n    // XXX blake_r 28-01-15: This could be improved with a regex, but was\n    // unable to come up with one that would allow me to validate the end\n    // ')' in the string.\n    this.getSplitSearch = function(search) {\n        var terms = search.split(' ');\n        var fixedTerms = [];\n        var spanningParentheses = false;\n        angular.forEach(terms, function(term, idx) {\n            if(spanningParentheses) {\n                // Previous term had an opening '(' but not a ')'. This\n                // term should join that previous term.\n                fixedTerms[fixedTerms.length - 1] += ' ' + term;\n\n                // If the term contains the ending ')' then its the last\n                // in the group.\n                if(term.indexOf(')') !== -1) {\n                    spanningParentheses = false;\n                }\n            } else {\n                // Term is not part of a previous '(' span.\n                fixedTerms.push(term);\n\n                var startIdx = term.indexOf('(');\n                if(startIdx !== -1) {\n                    if(term.indexOf(')', startIdx) === -1) {\n                        // Contains a starting '(' but not a ending ')'.\n                        spanningParentheses = true;\n                    }\n                }\n            }\n        });\n\n        if(spanningParentheses) {\n            // Missing ending parentheses so error with terms.\n            return null;\n        }\n        return fixedTerms;\n    };\n\n    // Return all of the currently active filters for the given search.\n    this.getCurrentFilters = function(search) {\n        var filters = this.getEmptyFilter();\n        if(search.length === 0) {\n            return filters;\n        }\n        var searchTerms = this.getSplitSearch(search);\n        if(!searchTerms) {\n            return null;\n        }\n        angular.forEach(searchTerms, function(terms) {\n            terms = terms.split(':');\n            if(terms.length === 1) {\n                // Search term is not specifing a specific field. Gets\n                // add to the '_' section of the filters.\n                if(filters._.indexOf(terms[0]) === -1) {\n                    filters._.push(terms[0]);\n                }\n            } else {\n                var field = terms.shift();\n                var values = terms.join(\":\");\n\n                // Remove the starting '(' and ending ')'.\n                values = values.replace('(', '');\n                values = values.replace(')', '');\n\n                // If empty values then do nothing.\n                if(values.length === 0) {\n                    return;\n                }\n\n                // Split the values based on comma.\n                values = values.split(',');\n\n                // Add the values to filters.\n                if(angular.isUndefined(filters[field])) {\n                    filters[field] = [];\n                }\n                angular.forEach(values, function(value) {\n                    if(filters[field].indexOf(value) === -1) {\n                        filters[field].push(value);\n                    }\n                });\n            }\n        });\n        return filters;\n    };\n\n    // Convert \"filters\" into a search string.\n    this.filtersToString = function(filters) {\n        var search = \"\";\n        angular.forEach(filters, function(terms, type) {\n            // Skip empty and skip \"_\" as it gets appended at the\n            // beginning of the search.\n            if(terms.length === 0 || type === \"_\") {\n                return;\n            }\n            search += type + \":(\" + terms.join(\",\") + \") \";\n        });\n        if(filters._.length > 0) {\n            search = filters._.join(\" \") + \" \" + search;\n        }\n        return search.trim();\n    };\n\n    // Return the index of the value in the type for the filter.\n    this._getFilterValueIndex = function(filters, type, value) {\n        var values = filters[type];\n        if(angular.isUndefined(values)) {\n            return -1;\n        }\n        var lowerValues = values.map(function(value) {\n            return value.toLowerCase();\n        });\n        return lowerValues.indexOf(value.toLowerCase());\n    };\n\n    // Return true if the type and value are in the filters.\n    this.isFilterActive = function(filters, type, value, exact) {\n        var values = filters[type];\n        if(angular.isUndefined(values)) {\n            return false;\n        }\n        if(angular.isUndefined(exact)) {\n            exact = false;\n        }\n        if(exact) {\n            value = \"=\" + value;\n        }\n        return this._getFilterValueIndex(filters, type, value) !== -1;\n    };\n\n    // Toggles a filter on or off based on type and value.\n    this.toggleFilter = function(filters, type, value, exact) {\n        if(angular.isUndefined(filters[type])) {\n            filters[type] = [];\n        }\n        if(exact) {\n            value = \"=\" + value;\n        }\n        var idx = this._getFilterValueIndex(filters, type, value);\n        if(idx === -1) {\n            filters[type].push(value);\n        } else {\n            filters[type].splice(idx, 1);\n        }\n        return filters;\n    };\n\n    // Holds all stored filters.\n    var storedFilters = {};\n\n    // Store a filter for later.\n    this.storeFilters = function(name, filters) {\n        storedFilters[name] = filters;\n    };\n\n    // Retrieve a stored fitler.\n    this.retrieveFilters = function(name) {\n        return storedFilters[name];\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Validation Service\n *\n * Used by controllers to validate user inputs.\n */\n\nangular.module('MAAS').service('ValidationService', [\n    'ConverterService', function(ConverterService) {\n\n        // Pattern that matches a domainname.\n        // XXX 2016-02-24 lamont: This also matches \"example.com.\",\n        // which is wrong.\n        var domainnamePattern =\n            /^([a-z\\d]|[a-z\\d][a-z\\d-.]*[a-z\\d])*$/i;\n\n        // Pattern that matches a hostname.\n        var hostnamePattern =\n            /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])*$/;\n\n        // Pattern that matches a MAC.\n        var macPattern = /^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$/;\n\n        // Pattern used to match IPv4.\n        var ipv4Pattern = new RegExp([\n            '^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n            ].join(''));\n\n        // Returns true if the octets in one equal two with the cidr mask in\n        // bits applied to both.\n        function cidrMatcher(one, two, size, bits) {\n            var part = 0;\n            while(bits > 0) {\n                var shift = size - bits;\n                if(shift < 0) {\n                    shift = 0;\n                }\n\n                var oneShift = one[part] >> shift;\n                var twoShift = two[part] >> shift;\n                if(oneShift !== twoShift) {\n                    return false;\n                }\n                bits -= size;\n                part += 1;\n            }\n            return true;\n        }\n\n        // Return true if the domainname is valid, false otherwise.\n        this.validateDomainName = function(domainname) {\n            // Invalid if the domain is not a string, empty, or more than\n            // 253 characters.\n            if(!angular.isString(domainname) ||\n                domainname.length === 0 || domainname.length > 253) {\n                return false;\n            }\n            return domainnamePattern.test(domainname);\n        };\n\n        // Return true if the hostname is valid, false otherwise.\n        this.validateHostname = function(hostname) {\n            // Invalid if the hostname is not a string, empty, or more than\n            // 63 characters.\n            if(!angular.isString(hostname) ||\n                hostname.length === 0 || hostname.length > 63) {\n                return false;\n            }\n            return hostnamePattern.test(hostname);\n        };\n\n        // Return true if the MAC is valid, false otherwise.\n        this.validateMAC = function(macAddress) {\n            // Invalid if the macAddress is not a string.\n            if(!angular.isString(macAddress)) {\n                return false;\n            }\n            return macPattern.test(macAddress.trim());\n        };\n\n        // Return true if the IP is valid IPv4 address, false otherwise.\n        this.validateIPv4 = function(ipAddress) {\n            // Invalid if the ipAddress is not a string or empty.\n            if(!angular.isString(ipAddress) || ipAddress.length === 0) {\n                return false;\n            }\n            return ipv4Pattern.test(ipAddress);\n        };\n\n        // Return true if the IP is valid IPv6 address, false otherwise.\n        this.validateIPv6 = function(ipAddress) {\n            // Invalid if the ipAddress is not a string, empty, or missing\n            // at least one ':'.\n            if(!angular.isString(ipAddress) ||\n                ipAddress.length === 0 ||\n                ipAddress.indexOf(':') === -1) {\n                return false;\n            }\n            var expandedAddress = ConverterService.ipv6Expand(ipAddress);\n            var octets = ConverterService.ipv6ToGroups(expandedAddress);\n            if(octets.length !== 8) {\n                return false;\n            }\n\n            // Make sure all octets are in range.\n            var i;\n            for(i = 0; i < 8; i++) {\n                if(isNaN(octets[i]) || octets[i] < 0 || octets[i] > 0xffff) {\n                    // Out of range.\n                    return false;\n                }\n            }\n\n            // Don't allow unspecified, loopback, multicast, link-local\n            // unicast, or anything out of range.\n            if(octets[0] < 1 ||\n                octets[0] === 0xff00 ||\n                octets[0] === 0xfe80) {\n                return false;\n            }\n            return true;\n        };\n\n        // Return true if the IP is valid, false otherwise.\n        this.validateIP = function(ipAddress) {\n            return (\n                this.validateIPv4(ipAddress) || this.validateIPv6(ipAddress));\n        };\n\n        // Return true if the ipAddress is in the network.\n        this.validateIPInNetwork = function(ipAddress, network) {\n            var networkSplit = network.split('/');\n            var networkAddress = networkSplit[0];\n            var cidrBits = parseInt(networkSplit[1], 10);\n\n            if(this.validateIPv4(ipAddress) &&\n                this.validateIPv4(networkAddress)) {\n                return cidrMatcher(\n                    ConverterService.ipv4ToOctets(ipAddress),\n                    ConverterService.ipv4ToOctets(networkAddress),\n                    8, cidrBits);\n            } else if(this.validateIPv6(ipAddress) &&\n                this.validateIPv6(networkAddress)) {\n                return cidrMatcher(\n                    ConverterService.ipv6ToGroups(ipAddress),\n                    ConverterService.ipv6ToGroups(networkAddress),\n                    16, cidrBits);\n            }\n            return false;\n        };\n\n        // Return true if the ipAddress is in the network and between the\n        // lowAddress and highAddress inclusive.\n        this.validateIPInRange = function(\n            ipAddress, network, lowAddress, highAddress) {\n            // If the ip address is not even in the network then its\n            // not in the range.\n            if(!this.validateIPInNetwork(ipAddress, network)) {\n                return false;\n            }\n\n            var i, ipOctets, lowOctets, highOctets;\n            if(this.validateIPv4(ipAddress) &&\n                this.validateIPv4(lowAddress) &&\n                this.validateIPv4(highAddress)) {\n\n                // Check that each octet is of the ip address is more or equal\n                // to the low address and less or equal to the high address.\n                ipOctets = ConverterService.ipv4ToOctets(ipAddress);\n                lowOctets = ConverterService.ipv4ToOctets(lowAddress);\n                highOctets = ConverterService.ipv4ToOctets(highAddress);\n                for(i = 0; i < 4; i++) {\n                    if(ipOctets[i] > highOctets[i] ||\n                        ipOctets[i] < lowOctets[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            } else if(this.validateIPv6(ipAddress) &&\n                this.validateIPv6(lowAddress) &&\n                this.validateIPv6(highAddress)) {\n\n                // Check that each octet is of the ip address is more or equal\n                // to the low address and less or equal to the high address.\n                ipOctets = ConverterService.ipv6ToGroups(ipAddress);\n                lowOctets = ConverterService.ipv6ToGroups(lowAddress);\n                highOctets = ConverterService.ipv6ToGroups(highAddress);\n                for(i = 0; i < 8; i++) {\n                    if(ipOctets[i] > highOctets[i] ||\n                        ipOctets[i] < lowOctets[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n    }]);\n","var MAASUI = MAASUI || {};\n\n/**\n * A set of framework-agnostic JavaScript utilities for the MAAS UI\n * @namespace MAASUI.utils\n * @return {Object} public methods\n */\nMAASUI.utils = (function() {\n  /**\n   * Run the supplied function when page content is loaded\n   * @namespace MAASUI.utils\n   * @method ready\n   * @param {Object} fn - the function to run\n   */\n  var ready = function(fn) {\n    if (document.attachEvent ? document.readyState === \"complete\" :\n        document.readyState !== \"loading\") {\n      fn();\n    } else {\n      document.addEventListener('DOMContentLoaded', fn);\n    }\n  };\n\n  /**\n   * Toggle a specified class on the provided element\n   * @namespace MAASUI.utils\n   * @method toggleClass\n   * @param {Object} el - a DOM element\n   * @param {String} className - the class name to toggle\n   * @return {bool} true for success or false if incorrect params are given\n   */\n  var toggleClass = function(el, className) {\n    if (typeof(el) != 'undefined' && el != null) {\n      if (el.classList) {\n        el.classList.toggle(className);\n      } else {\n        var classes = el.className.split(' ');\n        var existingIndex = classes.indexOf(className);\n        if (existingIndex >= 0) {\n          classes.splice(existingIndex, 1);\n        } else {\n          classes.push(className);\n        }\n        el.className = classes.join(' ');\n      }\n    } else {\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Remove a specified class from the provided element\n   * @namespace MAASUI.utils\n   * @method removeClass\n   * @param {Object} el - a DOM element\n   * @param {String} className - the class name to remove\n   * @return {bool} true for success or false if incorrect params are given\n   */\n  var removeClass = function(el, className) {\n    if (typeof(el) != 'undefined' && el != null) {\n      if (el.classList) {\n        el.classList.remove(className);\n      } else {\n        el.className = el.className.replace(new RegExp(\n          '(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    } else {\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Check if a DOM element has a class\n   * @namespace MAASUI.utils\n   * @method hasClass\n   * @param {Object} el - a DOM element\n   * @param {String} className - the class name to check\n   * @return {bool} is the class present\n   */\n  var hasClass = function(el, className) {\n    var hasClass = false;\n\n    if (el.classList) {\n      hasClass = el.classList.contains(className);\n    } else {\n      hasClass = new RegExp(\n        '(^| )' + className + '( |$)', 'gi').test(el.className);\n    }\n\n    return hasClass;\n  };\n\n  /**\n   * Remove a specified class from the provided element\n   * @namespace MAASUI.utils\n   * @method addClass\n   * @param {Object} el - a DOM element\n   * @param {String} className - the class name to add\n   */\n  var addClass = function(el, className) {\n    if (!hasClass(el, className)) {\n      if (el.classList) {\n        el.classList.add(className);\n      } else {\n        el.className += ' ' + className;\n      }\n    }\n  };\n\n  return {\n    ready: ready,\n    toggleClass: toggleClass,\n    removeClass: removeClass,\n    hasClass: hasClass,\n    addClass: addClass\n  };\n})();\n\n/**\n * A handler for toggleable menus\n * @namespace MAASUI.dropdown\n */\nMAASUI.dropdown = (function() {\n  var wrapperClassname = \"p-dropdown\";\n  var toggleClassName = \"p-dropdown__toggle\";\n  var menuClassName = \"p-dropdown__menu\";\n  var menuItemClassName =\"p-dropdown__item\";\n  var activeClassName = \"active\"\n  var dropdowns;\n\n  /**\n   * Initialise the menu and toggle events\n   * @namespace MAASUI.dropdown\n   * @method init\n   */\n  var init = function() {\n    dropdowns = document.querySelectorAll('.' + wrapperClassname);\n\n    Array.prototype.forEach.call(dropdowns, function(dropdown, i) {\n      // Add click event for dropdown toggling.\n      dropdown.addEventListener(\"click\", click);\n\n      // Add click event to all dropdown links to close menus.\n      var sublinks = dropdown.querySelectorAll('.' + menuItemClassName);\n      Array.prototype.forEach.call(sublinks, function(link, i) {\n        link.addEventListener(\"click\", closeAllMenus);\n      });\n\n      // Add click event for whole document to close all menus when\n      // anything else is clicked.\n      document.addEventListener('click', function(event) {\n        var isClickInside = dropdown.contains(event.target);\n        if (!isClickInside) {\n          closeAllMenus();\n        }\n      });\n    });\n\n    return true;\n  }\n\n  /**\n   * A handler for a toggle menu click (intended for use on click events)\n   * @namespace MAASUI.dropdown\n   * @method click\n   * @param {Object} event - a click event\n   */\n  var click = function(event) {\n    if (MAASUI.utils.hasClass(this, activeClassName)) {\n      closeAllMenus();\n    } else {\n      openMenu(this);\n    }\n    event.stopPropagation();\n  }\n\n  /**\n   * Opens the menu for the provided dropdown element\n   * @namespace MAASUI.dropdown\n   * @method openMenu\n   * @param {Object} el - the dropdown element\n   */\n  var openMenu = function(el) {\n    closeAllMenus();\n    MAASUI.utils.addClass(el, activeClassName);\n  }\n\n  /**\n   * Closes all open menus and deactivates all toggles\n   * @namespace MAASUI.dropdown\n   * @method closeAllMenus\n   * @param {Object} event - a click event (optional)\n   */\n  var closeAllMenus = function(event) {\n    Array.prototype.forEach.call(dropdowns, function(dropdown, i) {\n      //Deactive all toggle buttons\n      MAASUI.utils.removeClass(dropdown, activeClassName);\n    });\n\n    if (typeof event != 'undefined') {\n      event.stopPropagation();\n    }\n  }\n\n  return {\n    init: init\n  };\n})();\n\nMAASUI.utils.ready(MAASUI.dropdown.init);\n"],"sourceRoot":""}