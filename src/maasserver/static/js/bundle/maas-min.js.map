{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/maasserver/static/js/angular/controllers/add_device.js","webpack:///./src/maasserver/static/js/angular/controllers/add_domain.js","webpack:///./src/maasserver/static/js/angular/controllers/add_hardware.js","webpack:///./src/maasserver/static/js/angular/controllers/dashboard.js","webpack:///./src/maasserver/static/js/angular/controllers/domain_details.js","webpack:///./src/maasserver/static/js/angular/controllers/domains_list.js","webpack:///./src/maasserver/static/js/angular/controllers/fabric_details.js","webpack:///./src/maasserver/static/js/angular/controllers/images.js","webpack:///./src/maasserver/static/js/angular/controllers/intro.js","webpack:///./src/maasserver/static/js/angular/controllers/intro_user.js","webpack:///./src/maasserver/static/js/angular/controllers/networks_list.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_networking.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_storage.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_storage_filesystems.js","webpack:///./src/maasserver/static/js/angular/controllers/node_events.js","webpack:///./src/maasserver/static/js/angular/controllers/node_result.js","webpack:///./src/maasserver/static/js/angular/controllers/node_results.js","webpack:///./src/maasserver/static/js/angular/controllers/nodes_list.js","webpack:///./src/maasserver/static/js/angular/controllers/pod_details.js","webpack:///./src/maasserver/static/js/angular/controllers/pods_list.js","webpack:///./src/maasserver/static/js/angular/controllers/prefs.js","webpack:///./src/maasserver/static/js/angular/controllers/settings.js","webpack:///./src/maasserver/static/js/angular/controllers/space_details.js","webpack:///./src/maasserver/static/js/angular/controllers/subnet_details.js","webpack:///./src/maasserver/static/js/angular/controllers/vlan_details.js","webpack:///./src/maasserver/static/js/angular/controllers/zone_details.js","webpack:///./src/maasserver/static/js/angular/controllers/zones_list.js","webpack:///./src/maasserver/static/js/angular/directives/accordion.js","webpack:///./src/maasserver/static/js/angular/directives/boot_images.js","webpack:///./src/maasserver/static/js/angular/directives/call_to_action.js","webpack:///./src/maasserver/static/js/angular/directives/card_loader.js","webpack:///./src/maasserver/static/js/angular/directives/code_lines.js","webpack:///./src/maasserver/static/js/angular/directives/contenteditable.js","webpack:///./src/maasserver/static/js/angular/directives/controller_image_status.js","webpack:///./src/maasserver/static/js/angular/directives/controller_status.js","webpack:///./src/maasserver/static/js/angular/directives/dbl_click_overlay.js","webpack:///./src/maasserver/static/js/angular/directives/default_os_select.js","webpack:///./src/maasserver/static/js/angular/directives/enter.js","webpack:///./src/maasserver/static/js/angular/directives/enter_blur.js","webpack:///./src/maasserver/static/js/angular/directives/error_overlay.js","webpack:///./src/maasserver/static/js/angular/directives/error_toggle.js","webpack:///./src/maasserver/static/js/angular/directives/ipranges.js","webpack:///./src/maasserver/static/js/angular/directives/login.js","webpack:///./src/maasserver/static/js/angular/directives/maas_obj_form.js","webpack:///./src/maasserver/static/js/angular/directives/mac_address.js","webpack:///./src/maasserver/static/js/angular/directives/machines_table.js","webpack:///./src/maasserver/static/js/angular/directives/navigation_dropdown.js","webpack:///./src/maasserver/static/js/angular/directives/navigation_mobile.js","webpack:///./src/maasserver/static/js/angular/directives/notifications.js","webpack:///./src/maasserver/static/js/angular/directives/os_select.js","webpack:///./src/maasserver/static/js/angular/directives/placeholder.js","webpack:///./src/maasserver/static/js/angular/directives/pod_parameters.js","webpack:///./src/maasserver/static/js/angular/directives/power_parameters.js","webpack:///./src/maasserver/static/js/angular/directives/pref_keys.js","webpack:///./src/maasserver/static/js/angular/directives/proxy_settings.js","webpack:///./src/maasserver/static/js/angular/directives/release_name.js","webpack:///./src/maasserver/static/js/angular/directives/release_options.js","webpack:///./src/maasserver/static/js/angular/directives/script_expander.js","webpack:///./src/maasserver/static/js/angular/directives/script_results_list.js","webpack:///./src/maasserver/static/js/angular/directives/script_runtime.js","webpack:///./src/maasserver/static/js/angular/directives/script_select.js","webpack:///./src/maasserver/static/js/angular/directives/script_status.js","webpack:///./src/maasserver/static/js/angular/directives/ssh_keys.js","webpack:///./src/maasserver/static/js/angular/directives/switches_table.js","webpack:///./src/maasserver/static/js/angular/directives/toggle_control.js","webpack:///./src/maasserver/static/js/angular/directives/type.js","webpack:///./src/maasserver/static/js/angular/directives/version_reloader.js","webpack:///./src/maasserver/static/js/angular/directives/window_width.js","webpack:///./src/maasserver/static/js/angular/factories/bootresources.js","webpack:///./src/maasserver/static/js/angular/factories/configs.js","webpack:///./src/maasserver/static/js/angular/factories/controllers.js","webpack:///./src/maasserver/static/js/angular/factories/devices.js","webpack:///./src/maasserver/static/js/angular/factories/dhcpsnippets.js","webpack:///./src/maasserver/static/js/angular/factories/discoveries.js","webpack:///./src/maasserver/static/js/angular/factories/domains.js","webpack:///./src/maasserver/static/js/angular/factories/events.js","webpack:///./src/maasserver/static/js/angular/factories/fabrics.js","webpack:///./src/maasserver/static/js/angular/factories/general.js","webpack:///./src/maasserver/static/js/angular/factories/ipranges.js","webpack:///./src/maasserver/static/js/angular/factories/machines.js","webpack:///./src/maasserver/static/js/angular/factories/node_results.js","webpack:///./src/maasserver/static/js/angular/factories/nodes.js","webpack:///./src/maasserver/static/js/angular/factories/notifications.js","webpack:///./src/maasserver/static/js/angular/factories/packagerepositories.js","webpack:///./src/maasserver/static/js/angular/factories/pods.js","webpack:///./src/maasserver/static/js/angular/factories/region.js","webpack:///./src/maasserver/static/js/angular/factories/resourcepools.js","webpack:///./src/maasserver/static/js/angular/factories/scripts.js","webpack:///./src/maasserver/static/js/angular/factories/services.js","webpack:///./src/maasserver/static/js/angular/factories/spaces.js","webpack:///./src/maasserver/static/js/angular/factories/sshkeys.js","webpack:///./src/maasserver/static/js/angular/factories/staticroutes.js","webpack:///./src/maasserver/static/js/angular/factories/subnets.js","webpack:///./src/maasserver/static/js/angular/factories/switches.js","webpack:///./src/maasserver/static/js/angular/factories/tags.js","webpack:///./src/maasserver/static/js/angular/factories/users.js","webpack:///./src/maasserver/static/js/angular/factories/vlans.js","webpack:///./src/maasserver/static/js/angular/factories/zones.js","webpack:///./src/maasserver/static/js/angular/filters/by_fabric.js","webpack:///./src/maasserver/static/js/angular/filters/by_space.js","webpack:///./src/maasserver/static/js/angular/filters/by_subnet.js","webpack:///./src/maasserver/static/js/angular/filters/by_vlan.js","webpack:///./src/maasserver/static/js/angular/filters/nodes.js","webpack:///./src/maasserver/static/js/angular/filters/order_by_date.js","webpack:///./src/maasserver/static/js/angular/filters/remove_default_vlan.js","webpack:///./src/maasserver/static/js/angular/maas.js","webpack:///./src/maasserver/static/js/angular/services/browser.js","webpack:///./src/maasserver/static/js/angular/services/converter.js","webpack:///./src/maasserver/static/js/angular/services/error.js","webpack:///./src/maasserver/static/js/angular/services/json.js","webpack:///./src/maasserver/static/js/angular/services/log.js","webpack:///./src/maasserver/static/js/angular/services/manager.js","webpack:///./src/maasserver/static/js/angular/services/managerhelper.js","webpack:///./src/maasserver/static/js/angular/services/pollingmanager.js","webpack:///./src/maasserver/static/js/angular/services/search.js","webpack:///./src/maasserver/static/js/angular/services/validation.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","angular","controller","$scope","DevicesManager","SubnetsManager","DomainsManager","ManagerHelperService","ValidationService","newDevice","cloneDevice","isObject","domain","interfaces","mac","ipAssignment","subnetId","ipAddress","getDefaultDomain","$parent","addDeviceScope","subnets","getItems","domains","viewable","error","ipAssignments","title","device","show","loadManagers","then","hide","unloadManagers","$emit","nameHasError","length","validateHostname","macHasError","deviceInterface","validateMAC","ipHasError","validateIP","validateIPInNetwork","cidr","isNumber","subnet","getItemFromList","deviceHasError","externalIpError","staticIpError","addInterface","push","isPrimaryInterface","indexOf","deleteInterface","splice","cancel","save","addAnother","convertedDevice","hostname","primary_mac","extra_macs","forEach","nic","ip_assignment","ip_address","convertDeviceToProtocol","create","parseValidationError","addDomainScope","authoritative","validateDomainName","domainHasError","copy","convertDomainToProtocol","$q","$http","ZonesManager","ResourcePoolsManager","MachinesManager","GeneralManager","RegionConnection","addHardwareScope","model","zones","pools","architectures","getData","hwe_kernels","default_min_hwe_kernel","power_types","macAddressRegex","machine","chassis","virshFields","label","field_type","default","choices","required","defaultArchitecture","newMachine","cloneMachine","macs","zone","pool","architecture","min_hwe_kernel","power","type","parameters","text","newChassis","cloneChassis","chassisPowerTypes","description","fields","mode","loadedItems","loadedManagers","defer","promise","loadItems","resolve","showMachine","showChassis","addMac","removeMac","idx","invalidName","validateMac","machineHasError","in_error","chassisHasErrors","power_type","field","isUndefined","powerParametersHasError","saveMachine","pxe_mac","shift","map","power_parameters","id","saveChassis","params","chassis_type","username","method","url","data","$","param","headers","Content-Type","$window","$rootScope","$routeParams","$location","DiscoveriesManager","VLANsManager","ConfigsManager","deviceIPOptions","page","loaded","discoveredDevices","machines","devices","configManager","networkDiscovery","column","selectedDevice","convertTo","predicate","last_seen","sortTable","reverse","proxyManager","updateItem","createItem","createInterface","Error","getDiscoveryName","discovery","getSubnetName","getName","getVLANName","vlanId","vlan","toggleSelected","deviceId","discovered","getDomainByName","slice","split","parent","goTo","saved","filter","option","preProcess","item","mac_address","ip","afterSave","obj","_removeItem","isString","path","UsersManager","ErrorService","domainLoaded","displayname","editSummary","action","editRow","deleteRow","domainsManager","newObject","supportedRecordTypes","enterEditSummary","exitEditSummary","isRecordAutogenerated","row","dnsresource_id","editRecord","previous_rrdata","rrdata","previous_rrtype","rrtype","previous_name","previous_ttl","ttl","removeRecord","confirmRemoveRecord","deleteDNSRecord","stopEditingRow","isSuperUser","isDefaultDomain","canBeDeleted","rrsets","deleteButton","actionInProgress","addRecordButton","cancelAction","deleteConfirmButton","deleteDomain","activeDomain","getActiveItem","requestedDomain","parseInt","domain_id","isNaN","raiseError","setActiveItem","$filter","currentpage","loading","addDomain","cancelAddDomain","FabricsManager","SpacesManager","ControllersManager","fabricLoaded","fabric","$watch","updateVLANs","rows","racks","vlans","space","space_name","vlan_name","subnet_name","rack_sids","rack_sid","rack","system_id","keys","key","fabricManager","controllers","isDefaultFabric","confirmingDelete","cancelDeleteButton","deleteFabric","search","reply","activeFabric","requestedFabric","fabric_id","BootResourcesManager","bootResources","autoImport","isArray","resources","PackageRepositoriesManager","repoManager","hasImages","maasName","upstreamDNS","mainArchive","portsArchive","httpProxy","skip","clickContinue","welcomeInError","form","$maasForm","hasErrors","networkInError","inError","objs","canContinue","force","location","reload","MAAS_config","completed_intro","managers","repo","user","sshkeys_count","markIntroComplete","user_completed_intro","loadManager","getAuthUser","filterByVLAN","filterByFabric","filterBySpace","filterByNullSpace","getURLParameters","by","groupBy","ADD_FABRIC_ACTION","selectedTitle","objectName","ADD_VLAN_ACTION","ADD_SPACE_ACTION","ADD_SUBNET_ACTION","subnetManager","fabrics","spaceManager","spaces","vlanManager","group","orphanVLANs","actionObjectInitializers","vlan_ids","updateGroupBy","previous_space","index","updateOrphanVLANs","previous_fabric","previous_vlan","fabric_name","updateFabricsGroupBy","updateActions","actionOptions","actionChanged","actionOption","getFabricNameById","fabricId","actionSubnetPreSave","$on","$interval","TagsManager","ServicesManager","ScriptsManager","page_managers","DEVICE_IP_ASSIGNMENT","external","dynamic","static","updateTitle","node","fqdn","updateHeader","header","editing","editing_domain","options","selected","updateAvailableActionOptions","actionTypeForNodeType","0","1","2","3","4","isDataLoaded","node_type","allOptions","availableOptions","actions","updatePower","bmc_node_count","power_bmc_node_count","canEdit","in_pod","isDefined","pod","updateSummary","summary","tags","hasUsableArchitectures","hasInvalidArchitecture","updateServices","isController","services","getServices","service","updateDevices","child","nicIdx","deviceWithMAC","links","link","lIdx","deviceWithLink","nodeLoaded","$watchCollection","storageController","networkingController","showing_confirmation","osinfo","section","area","osSelection","osystem","release","hwe_kernel","commissionOptions","enableSSH","skipNetworking","skipStorage","updateFirmware","configureHBA","commissioningSelection","testSelection","releaseOptions","checkingPower","scripts","getDeviceIPAssignment","events","limit","updateNode","queryPower","nodesManager","checkPowerState","console","log","tagsAutocomplete","query","autocomplete","getPowerStateClass","power_state","getPowerStateText","canCheckPowerState","isUbuntuOS","isUbuntuCoreOS","isCustomOS","isActionError","isDeployError","missing_osinfo","osystems","isSSHKeyError","getSSHKeyCount","optionChanged","actionCancel","actionGo","extra","distro_series","enable_ssh","skip_networking","skip_storage","commissioning_scripts","testing_scripts","status_code","erase","secure_erase","secureErase","quick_erase","quickErase","performAction","$reset","getArchitecturePlaceholder","isDevice","invalidArchitecture","isRackControllerConnected","isLocked","locked","editHeaderDomain","editHeader","editHeaderInvalid","cancelEditHeader","saveEditHeader","cancelEditSummary","saveEditSummary","tag","invalidPowerType","editPower","cancelEditPower","saveEditPower","allowShowMoreEvents","showMoreEvents","getEventText","event","getPowerEventError","level","hasPowerEventError","getPowerEventErrorText","hasActionPowerError","actionName","hasPowerError","missing_packages","getPowerErrors","result","packages","sort","getServiceClass","status","hasCustomCommissioningScripts","script_type","controllerLoaded","scope","showFailedTestWarning","testing_status","getCPUSubtext","cpu_count","cpu_speed","type_name","type_name_title","concat","activeNode","originalInterfaces","filtered","usedVLANs","inter","parents","vlan_id","childInterface","found","link_id","interfaceType","vid","modes","isFunction","getValue","this","nicType","allowLinkUp","JSONService","INTERFACE_TYPE","PHYSICAL","BOND","BRIDGE","VLAN","ALIAS","INTERFACE_TYPE_TEXTS","physical","bond","bridge","alias","LINK_MODE","AUTO","STATIC","DHCP","LINK_UP","LINK_MODE_TEXTS","auto","dhcp","link_up","SELECTION_MODE","NONE","SINGLE","MULTI","DELETE","ADD","CREATE_BOND","CREATE_BRIDGE","CREATE_PHYSICAL","EDIT","IP_ASSIGNMENT","updateLoaded","nodeHasLoaded","managersHaveLoaded","updateInterfaces","vlanTable","addedVlans","children","editInterface","selectedMode","formatted","members","vlanRecord","primary_rack","secondary_rack","sort_key","getVLANText","a","b","localeCompare","nic_copy","subnet_id","interfaceLinksMap","linkMaps","newInterface","parentId","linkId","newParent","iType","isAlias","isVLAN","canAddAlias","canAddVLAN","addTypeChanged","leaveSingleSelectionMode","updateNewInterface","mapNICToOriginalLink","nic_id","originalInteface","getDefaultVLAN","default_vlan_id","getUnusedVLANs","ignoreVLANs","getSelectedInterfaces","selectedInterfaces","splitKey","getNextName","prefix","tableInfo","interfaceErrorsByLinkId","newBondInterface","newBridgeInterface","bondOptions","isLimitedEditingAllowed","isAllNetworkingDisabled","isBootInterface","is_boot","getInterfaceTypeText","getLinkModeText","getSubnetText","getSubnet","isInterfaceNameInvalid","otherNic","isLinkModeDisabled","getInterfaceError","isIPAddressInvalid","getUniqueKey","toggleInterfaceSelect","isInterfaceSelected","cannotEditInterface","isEditing","edit","undefined","defaultSubnet","fabricChanged","vlanChanged","fabricChangedForm","updateValue","vlanChangedForm","subnetChanged","subnetChangedForm","modeChanged","modeChangedForm","originalLink","editCancel","preProcessInterface","interface_id","saveInterface","updateInterface","saveInterfaceLink","linkSubnet","editSave","isShowingDeleteConfirm","isShowingAdd","canAddAliasOrVLAN","canAddAnotherVLAN","getRemoveTypeText","canBeRemoved","remove","quickRemove","confirmRemove","unlinkSubnet","add","defaultVLAN","defaultMode","quickAdd","getAddName","aliasIdx","createVLANInterface","isDisabled","canCreateBond","isShowingCreateBond","showCreateBond","primary","lacpRate","xmitHashPolicy","hasBootInterface","getInterfacePlaceholderMACAddress","isMACAddressInvalid","invalidEmpty","showLACPRate","showXMITHashPolicy","cannotAddBond","addBond","bond_mode","bond_lacp_rate","bond_xmit_hash_policy","createBondInterface","canCreateBridge","isShowingCreateBridge","showCreateBridge","bridge_stp","bridge_fd","cannotAddBridge","addBridge","createBridgeInterface","isShowingCreatePhysical","showCreatePhysical","macError","errorMsg","cannotAddPhysicalInterface","addPhysicalInterface","createPhysicalInterface","errorStr","tryParse","disks","availableNew","single","disk","ConverterService","MIN_PARTITION_SIZE","MUTLI","UNMOUNT","UNFORMAT","FORMAT_AND_MOUNT","PARTITION","BCACHE","RAID","VOLUME_GROUP","LOGICAL_VOLUME","RAID_MODES","min_disks","allows_spares","calculateSize","minSize","numDisks","hasMountedFilesystem","filesystem","mount_point","hasFormattedUnmountedFilesystem","fstype","isInUse","is_format_fstype","available_size","getTags","cache_set_id","block_id","partition_id","updateDisks","used","cachesets","filesystems","has_disks","size_human","mount_options","filesystem_id","original_type","original","parent_type","partitions","partition","special_filesystems","oldFilesystem","filesystemsMap","$selected","updateFilesystemSelection","used_by","used_for","cacheset","oldCacheSet","cachesetsMap","updateCacheSetsSelection","available","has_partitions","available_size_human","used_size_human","serial","test_status","firmware_version","oldDisk","availableMap","$options","newDevices","updateAvailableSelection","updateAvailable","filesystemMode","filesystemAllSelected","cachesetsMode","cachesetsAllSelected","availableMode","availableAllSelected","deselectAll","items","capitalizeFirstLetter","string","charAt","toUpperCase","getIndexFromName","match","RegExp","exec","dIdx","Math","max","isNameAlreadyInUse","exclude_disk","j","isLogicalVolume","showMembers","isBootDiskDisabled","setAsBootDisk","setBootDisk","getSelectedFilesystems","toggleFilesystemSelect","toggleFilesystemAllSelect","isFilesystemsDisabled","isAllStorageDisabled","filesystemCancel","filesystemUnmount","quickFilesystemUnmount","filesystemConfirmUnmount","updateFilesystem","filesystemDelete","quickFilesystemDelete","filesystemConfirmDelete","unmountSpecialFilesystem","deletePartition","deleteFilesystem","hasUnmountedFilesystem","showFreeSpace","getDeviceType","getSelectedAvailable","toggleAvailableSelect","toggleAvailableAllSelect","isAvailableDisabled","canFormatAndMount","getPartitionButtonText","availablePartitionSpace","space_to_reserve","partition_table_type","INITIAL_PARTITION_OFFSET","roundByBlockSize","canAddPartition","isNameInvalid","nameHasChanged","parentName","availableCancel","usesMountPoint","usesStorage","isMountPointInvalid","mountPoint","canDelete","used_size","availableDelete","availableQuickDelete","availableEdit","editingTags","editingFilesystem","availableQuickEdit","availableConfirmEdit","mountOptions","updateDisk","availableConfirmDelete","deleteVolumeGroup","deleteDisk","availablePartition","size_and_units","size","sizeUnits","availableQuickPartition","getAddPartitionName","isAddPartitionSizeInvalid","test","bytes","unitsToBytes","roundUnits","availableConfirmPartition","removeDisk","available_space","createPartition","getSelectedCacheSets","toggleCacheSetSelect","toggleCacheSetAllSelect","isCacheSetsDisabled","cacheSetCancel","canDeleteCacheSet","cacheSetDelete","quickCacheSetDelete","cacheSetConfirmDelete","deleteCacheSet","canCreateCacheSet","createCacheSet","getCannotCreateBcacheMsg","canCreateBcache","createBcache","cacheMode","fstypeChanged","isNewDiskNameInvalid","createBcacheCanSave","availableConfirmCreateBcache","cache_set","cache_mode","canCreateRAID","createRAID","spares","getAvailableRAIDModes","getTotalNumberOfAvailableSpares","diff","getNumberOfRemainingSpares","allowed","showSparesColumn","RAIDModeChanged","isActiveRAIDMember","isSpareRAIDMember","setAsActiveRAIDMember","setAsSpareRAIDMember","getNewRAIDSize","Number","MAX_VALUE","deviceSize","min","bytesToUnits","createRAIDCanSave","availableConfirmCreateRAID","block_devices","spare_devices","spare_partitions","canCreateVolumeGroup","createVolumeGroup","getNewVolumeGroupSize","total","createVolumeGroupCanSave","availableConfirmCreateVolumeGroup","canAddLogicalVolume","availableLogicalVolume","namePrefix","isLogicalVolumeNameInvalid","newLogicalVolumeNameChanged","isAddLogicalVolumeSizeInvalid","availableConfirmLogicalVolume","createLogicalVolume","authUser","is_superuser","owner","hasStorageLayoutIssues","storage_layout_issues","SpecialFilesystem","isValid","startsWith","describe","parts","join","dropdown","addSpecialFilesystem","addSpecialFilesystemFinished","canMount","mount","mountSpecialFilesystem","EventsManagerFactory","eventsManager","getManager","days","getMaximumDays","eventsLoaded","loadMore","loadMaximumDays","destroy","NodeResultsManagerFactory","nodeResultsManager","requestedResult","getItem","get_result_data","output","resultLoaded","updateLogs","had_installation","logs","installation_results","selectedLog","commissioning_results","testing_results","results","updateLogOutput","resultsLoaded","logOutput","getSummaryXML","getSummaryYAML","loadHistory","showing_results","history_list","showing_history","loading_history","get_history","history","SearchService","SwitchesManager","isViewingSelected","tab","tabs","toLowerCase","enterViewSelected","previous_search","leaveViewSelected","updateFilters","updateAllViewableChecked","filtered_items","allViewableChecked","clearAction","resetActionProgress","zoneSelection","poolSelection","poolAction","newPool","shouldClearAction","selectedItems","removeEmptyFilter","updateActionErrorCount","actionErrorCount","supportsAction","action_failed","progress","actionProgress","completed","errors","affected_nodes","addErrorToActionProgress","nodes","updateSelectedItems","hasActionsFailed","manager","unselectItem","hasActionsInProgress","switches","showswitches","pluralize","verb","pagetitle","searchValid","getSelectedItems","metadata","getMetadata","filters","getEmptyFilter","takeActionOptions","addPool","cancelAddPool","activeTarget","activeTargetAction","actionErrorMessage","initiatePoolAction","cancelPoolAction","editingPool","isPoolAction","actionConfirmEditPool","actionConfirmDeletePool","deleteItem","goToPoolMachines","clearSearch","toggleFilter","toggleTab","isDefaultPool","syncStatuses","addController","registerUrl","register_url","registerSecret","register_secret","addHardwareOption","addHardwareOptions","toggleChecked","isSelected","selectItem","toggleCheckAll","onNodeListingChanged","showSelected","filtersToString","isFilterActive","getCurrentFilters","selectColumnOrSort","actionOptionSelected","tabName","deferred","preAction","zone_id","pool_id","addHardwareOptionChanged","addDevice","cancelAddDevice","statusPoll","storeFilters","machinesFilter","retrieveFilters","devicesFilter","controllersFilter","switchesFilter","PodsManager","podManager","sentence","operation","bind","refresh","inProgress","compose","storage","boot","machinesSearch","editPodConfiguration","exitEditPodConfiguration","actionOptionChanged","getPodTypeTitle","canCompose","capabilities","composeMachine","composePreProcess","sorted","constraint","cancelCompose","composeAddStorage","composeSetBootDisk","composeRemoveDisk","startWatching","now","getDefaultZone","default_pool","activePod","pods","filteredItems","open","cpu_over_commit_ratio","memory_over_commit_ratio","powerTypes","action_error","addPod","getDefaultPool","cancelAddPod","canAddPod","getPowerTypeTitle","powerType","DHCPSnippetsManager","snippetsManager","snippets","known_architectures","pockets_to_disable","components_to_disable","packageRepositoriesManager","repositories","newSnippet","editSnippet","deleteSnippet","snippetTypes","newRepository","editRepository","deleteRepository","repositoryEnabledToggle","repository","repositoryEnterRemove","repositoryExitRemove","repositoryConfirmRemove","isPPA","isMirror","repositoryEnterEdit","repositoryExitEdit","repositoryAdd","enabled","arches","distributions","components","repositoryAddCancel","getSnippetTypeText","snippet","getSnippetAppliesToObject","getSnippetAppliesToText","snippetEnterRemove","snippetExitRemove","snippetConfirmRemove","snippetEnterEdit","snippetExitEdit","snippetToggle","snippetAdd","snippetAddCancel","spaceLoaded","updateSubnets","isDefaultSpace","subnet_ids","deleteSpace","activeSpace","requestedSpace","space_id","source","version","StaticRoutesManager","active_discovery_data","active_discovery_interval","staticRoutes","staticRoutesManager","actionError","newStaticRoute","editStaticRoute","deleteStaticRoute","MAP_SUBNET_ACTION","DELETE_ACTION","ALLOC_TYPES","5","6","NODE_TYPES","updateIPVersion","ipVersion","subnetLoaded","updateFabric","ipSort","ipv4ToInteger","ipv6Expand","getAllocType","allocType","str","getSubnetCIDR","destId","allocTypeSort","alloc_type","getUsageForIP","node_summary","isContainer","is_container","nodeType","bmcs","dns_records","nodeTypeSort","ownerSort","sortIPTable","actionRetry","scanSubnet","scan_started_on","deleteSubnet","subnetPreSave","changedFields","addStaticRoute","gateway_ip","destination","metric","cancelAddStaticRoute","isStaticRouteInEditMode","route","staticRouteToggleEditMode","isStaticRouteInDeleteMode","staticRouteEnterDeleteMode","staticRouteCancelDelete","staticRouteConfirmDelete","choice","activeSubnet","requestedSubnet","objects","self","vm","updateManagementRacks","primaryRack","secondaryRack","updateRelatedControllers","relatedControllers","updateRelatedSubnets","relatedSubnets","updatePossibleActions","relay_vlan","RELAY_DHCP_ACTION","DISABLE_DHCP_ACTION","dhcp_on","PROVIDE_DHCP_ACTION","isFabricDefault","vlanLoaded","provideDHCPAction","getSpaceName","getActionByName","initProvideDHCP","forRelay","relayVLAN","maxIPs","startIP","endIP","gatewayIP","needsDynamicRange","iprange","statistics","suggested_dynamic_range","needsGatewayIP","subnetMissingGatewayIP","updatePrimaryRack","updateSecondaryRack","updateSubnet","filterPrimaryRack","suggested_gateway","num_addresses","startPlaceholder","start","endPlaceholder","end","gatewayPlaceholder","canPerformAction","gateway","configureDHCP","extraDHCP","relay","disableDHCP","deleteVLAN","getFullVLANName","getDHCPStatus","activeVLAN","requestedVLAN","zoneLoaded","zoneManager","isDefaultZone","activeZone","requestedZone","addZone","closeZone","directive","restrict","element","attrs","clickHandler","evt","toggleClass","find","on","off","template","$element","$document","design","templateUrl","files_version","saving","stopping","ubuntuImages","isNew","tooMany","showingAdvanced","connecting","errorMessage","source_type","keyring_filename","keyring_data","releases","selections","changed","ubuntuCoreImages","ubuntu_core","images","otherImages","other","generatedImages","customImages","ubuntuDeleteId","removingImage","getTitleIcon","showMirrorPath","isShowingAdvancedOptions","toggleAdvancedOptions","bothKeyringOptionsSet","showConnectButton","sourceChanged","currentSources","ubuntu","sources","prevNew","updateSource","regenerateUbuntuImages","connect","isConnectButtonDisabled","getSourceParams","selectDefaults","arch","fetch","fromJson","showConnectBlock","showSelections","getUbuntuLTSReleases","deleted","getUbuntuNonLTSReleases","getArchitectures","toggleSelection","showImagesTable","getResource","resource","resource_os","rtype","image","icon","beingDeleted","resourceId","downloading","name_split","regenerateUbuntuCoreImages","ubuntuCoreImage","checked","regenerateOtherImages","otherImage","_regenerateImages","image_id","regenerateGeneratedImages","regenerateCustomImages","ltsIsSelected","commissioningSeriesSelected","commissioning_series","cancelRemove","deleteImage","showStopImportButton","region_import_running","showSaveSelection","canSaveSelection","commissioning_series_being_deleted","commissioning_series_arches","getSaveSelectionText","canStopImport","getStopImportText","stopImport","saveSelection","saveUbuntu","getNewSelections","newObjs","oldSelections","newSelections","selection","source_len","toggleUbuntuCoreSelection","saveUbuntuCoreSelection","saveUbuntuCore","toggleOtherSelection","saveOtherSelection","saveOther","confirmDeleteImage","ready","startPolling","ubuntu_core_images","other_images","stopPolling","run","$templateCache","put","replace","require","maasCta","ngModel","ngModelCtrl","defaultTitle","select","shown","$setViewValue","getTitle","$modelValue","secondary","getOptionTitle","$viewChangeListeners","$eval","ngChange","stopPropagation","$apply","$compile","include","maasCardLoader","html","contents","maasCodeLines","attributes","empty","lines","newLine","insert","each","ngDisabled","maasEditing","focusHandler","blur","changeHandler","$render","$viewValue","unbind","$timeout","statuses","updateStatuses","controllerIds","checkImageStates","register","known","runningInterval","startTimeout","CHECK_INTERVAL","unregister","showSpinner","getImageStatus","ControllerImageStatusService","systemId","unwatch","registered","textOnly","getClass","countClass","classes","class_name","counter","updateStatusClass","serviceClass","serviceText","styleElement","document","createElement","innerHTML","getElementsByTagName","appendChild","BrowserService","transclude","maasDblClickOverlay","clickElement","overlay","tagName","createEvent","initMouseEvent","window","dispatchEvent","css","cursor","triggerHandler","overlayClick","preventDefault","overlayDblClick","browser","addClass","osInput","seriesInput","$attrs","osElement","seriesElement","switchTo","newOSValue","initialSkip","sel","val","split_value","removeClass","attr","modifyOption","first_option","hasClass","selectVisableOption","which","maasEnter","jasmine","Image","src","markDisconnected","connected","showDisconnected","clientError","wasConnected","watchConnection","isConnected","_error","disconnectedPromise","cancelTimeout","watchConnectionAndError","IPRangesManager","ipranges","iprangeManager","newRange","editIPRange","deleteIPRange","addRange","start_ip","end_ip","comment","cancelAddRange","ipRangeCanBeModified","range","isIPRangeInEditMode","ipRangeToggleEditMode","ipRangeClearEditMode","isIPRangeInDeleteMode","ipRangeEnterDeleteMode","ipRangeCancelDelete","ipRangeConfirmDelete","ipRangeSort","factory","visitPage","Bakery","WebHandler","BakeryStorage","localStorage","getBakery","loginURL","externalAuthURL","bakery","Info","VisitURL","nextPath","Accept","response","currentTarget","responseText","MAASFormController","savingKeys","managerMethod","cloneObject","clonedObj","isTableForm","tableForm","saveOnBlur","isSaving","showInputSaving","errorScope","registerField","unregisterField","startEditingField","stopEditingField","clearErrors","updatedObj","newObj","errorJson","errorField","setErrors","v","saveForm","newValue","inline","MAASGroupController","timeout","formController","keyIdx","pre","onChange","subtleText","subtle","missingAttrs","disabled","disableLabel","labelElement","labelWidth","labelLeft","append","labelInfo","infoWrapper","infoIcon","infoTooltip","inputWrapper","inputWidth","placeholder","inputElement","blurOnEnter","currentValue","placeholderEnabled","childScope","$new","_ngDisabled","_selectValue","_selectNgChange","_change","values","checkScope","_selectedValues","_checked","_toggleChecked","tagsScope","_tags","hiddenScope","_toggle","switchScope","_changed","onValue","offValue","sliderScope","_slider","inputClass","errorsElement","helpText","helpTextElement","setTimeout","focus","subtleTextElement","removeAttr","ul","ele","macAddressFormat","numbers","$parsers","$formatters","hideCheckboxes","onListingChange","onCheckAll","onCheck","SPINNER_STATUSES","table","filteredMachines","updateAllChecked","$machine","showNodeStatus","other_test_status","getReleaseTitle","os_release","getStatusText","releaseTitle","trim","$machines","e","NotificationsManager","notifications","dismiss","categories","categoryTitles","warning","success","info","categoryClasses","categoryNotifications","cns","category","notification","maasOsSelect","getSelectableReleases","allChoices","getSelectableKernels","kernels","os","osKernels","getDefaultOrFirst","array","defaultValue","weightValue","first","weightedPresent","setDefault","default_osystem","default_release","kernel","selectedOSChanged","selectedReleaseChanged","ngPlaceholder","hideType","podTypes","fieldsElement","updateFields","podType","$destroy","hideSlider","maasObjForm","getType","driver_type","req","input_type","replaceWith","maasPowerParameters","addKey","defaultConnect","createAuthorisationToken","token","injector","deleteKey","deleteAuthorisationToken","newScope","newElement","spinElement","prepend","prefsController","$sce","enableHttpProxy","usePeerProxy","proxy_type","releaseName","setText","maasReleaseOptions","onEraseChange","globalOptions","target","startTime","runTime","estimatedRunTime","scriptStatus","incrementCounter","seconds","floor","Date","minutes","hours","new_counter","scriptType","allScripts","getScripts","script","tags_string","onTagAdding","refocus","tagsInput","tagsInputScope","isolateScope","eventHandlers","input","change","for_hardware","getIcon","SSHKeysManager","groupedKeys","authId","sourceTitles","lp","gh","upload","openRow","rowMode","trustAsHtml","close","canImportKeys","importKeys","protocol","auth_id","__all__","confirmDelete","keyMap","groupObj","keysource","keysourceKey","switchHasError","filteredSwitches","switch_","$switch_","$switches","$attr","isToggled","toggleMenu","ngType","valid_types","LogService","reloadPage","enableAutoReload","site","href","oldValue","onResize","windowWidth","innerWidth","message","_loaded","_data","_polling","_nextPromise","_pollTimeout","_pollErrorTimeout","_pollEmptyTimeout","isLoaded","isPolling","_poll","_loadData","callMethod","newData","_pollAgain","pollTimeout","connection_error","Manager","_pk","_handler","registerNotifier","onNotify","NodesManager","service_ids","service_id","_metadataAttributes","_replaceItem","PollingManager","_batchKey","createDNSRecord","record","ip_addresses","updateDNSRecord","_items","EventsManager","nodeId","_nodeId","_factory","_maxDays","_managers","_initBatchLoadParameters","node_id","max_days","destroyManager","setMaximumDays","isLoading","_getManager","machine_actions","requested","polling","nextPromise","device_actions","request","region_controller_actions","rack_controller_actions","region_and_rack_controller_actions","min_hwe_kernels","replaceData","oldData","isEmpty","bond_options","newPowerType","oldPowerType","newItem","release_options","_autoReload","_type","_scopes","_getInternalData","isDataPolling","apply","waitingCount","_reloadFunc","registerHandler","disableAutoReload","unregisterHandler","storage_tags","NodeResultsManager","_node","hardware_type","_getStorageSubtext","deviceinfo","_updateObject","existing","updated","_addOrReplace","showing_menu","_processItem","result_section","result_type","subtext","hardware_type_results","physical_blockdevice","_getIndexOfItem","_updateMetadata","_removeItemByIdFromArray","_selectedItems","hw_type","ret","_area","has_surfaced","script_id","data_type","state","updateInterfaceForm","volume_group_id","blockdevice_id","partition_size","$cookies","MSG_TYPE","RESPONSE_TYPE","callbacks","requests","requestId","websocket","autoReconnect","retryTimeout","defaultConnectDefer","handlers","notifiers","newRequestId","func","unregisterNotifier","buildSocket","WebSocket","_buildUrl","onopen","onerror","onclose","onmessage","onMessage","_getProtocol","host","port","pathname","proto","csrftoken","base","newPath","newPort","encodeURIComponent","opened","errored","reject","msg","onResponse","request_id","remembered_request","handler","remember","send","toJson","getLargestRange","largest_range","ranges","equals","purpose","hasDynamicRange","matching","_authUser","authuser","_loadAuthUser","reloadItems","catch","addRackController","foreign_objects","standardFilter","mappings","cpu","cores","ram","memory","pod-id","isInteger","matches","lowerTerm","exact","negate","parseFloat","_matches","terms","term","matched","mapFunc","substring","no_match","field2","aDate","bDate","getTime","config","$interpolateProvider","$routeProvider","$httpProvider","versionedPath","startSymbol","endSymbol","defaults","xsrfCookieName","xsrfHeaderName","routes","when","redirectTo","reloadOnSearch","controllerAs","superuser","otherwise","next","current","ga","q","arguments","userId","analytics_user_id","uuid","hash","regex","matcher","navigator","userAgent","UNITS","unit","converted","abs","toFixed","units","block_size","ipv4ToOctets","octets","part","pow","expandedAddress","groups","substr","ipv6ToGroups","jsonString","JSON","parse","_typeof","logging","logLevel","performance","_debug","debug","_log","_info","_warn","warn","formatMilliseconds","milliseconds","__log","args","Array","unshift","METADATA_ACTIONS","CREATE","UPDATE","_name_field","_isLoading","_extraLoadDefers","_extraReloadDefers","_actionQueue","_activeItem","_metadata","pk_value","len","_replaceItemInArray","_batchLoadItems","extra_func","callLoad","_resolveDefers","defersArray","_rejectDefers","clear","processActions","updatedIdx","updatedItem","updateItems","clearActiveItem","canProcessActions","_getMetadataValue","metadatas","_addMetadataValue","count","_removeMetadataValue","_updateMetadataArrayEntry","added","oldArray","_updateMetadataValueEntry","_updateMetadataEntry","oldItem","unloadManager","loadedManager","tryParsingJSON","SyntaxError","getPrintableString","dict","showNames","emptyFilter","_","getSplitSearch","fixedTerms","spanningParentheses","startIdx","searchTerms","_getFilterValueIndex","storedFilters","domainnamePattern","hostnamePattern","macPattern","ipv4Pattern","cidrMatcher","one","two","bits","domainname","macAddress","validateIPv4","validateIPv6","network","networkSplit","networkAddress","cidrBits","validateIPInRange","lowAddress","highAddress","ipOctets","lowOctets","highOctets"],"mappings":"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","file":"maas-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Device Controller\n */\n\nangular.module('MAAS').controller('AddDeviceController', [\n    '$scope', 'DevicesManager', 'SubnetsManager', 'DomainsManager',\n    'ManagerHelperService', 'ValidationService', function(\n        $scope, DevicesManager, SubnetsManager, DomainsManager,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addDeviceScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addDeviceScope = $scope;\n\n        // Set initial values.\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.viewable = false;\n        $scope.error = null;\n\n        // Device ip assignment options.\n        $scope.ipAssignments = [\n            {\n                name: \"external\",\n                title: \"External\"\n            },\n            {\n                name: \"dynamic\",\n                title: \"Dynamic\"\n            },\n            {\n                name: \"static\",\n                title: \"Static\"\n            }\n        ];\n\n        // Makes a new interface.\n        function makeInterface() {\n            return {\n                mac: \"\",\n                ipAssignment: null,\n                subnetId: null,\n                ipAddress: \"\"\n            };\n        }\n\n        // Makes a new device.\n        function newDevice(cloneDevice) {\n            if(angular.isObject(cloneDevice)) {\n                return {\n                    name: \"\",\n                    domain: cloneDevice.domain,\n                    interfaces: [makeInterface()]\n                };\n            } else {\n                return {\n                    name: \"\",\n                    domain: DomainsManager.getDefaultDomain(),\n                    interfaces: [makeInterface()]\n                };\n            }\n        }\n\n        // Input values.\n        $scope.device = null;\n\n        // Converts the device information from how it is held in the UI to\n        // how it is handled over the websocket.\n        function convertDeviceToProtocol(device) {\n            // Return the new object.\n            var convertedDevice = {\n                hostname: device.name,\n                domain: device.domain,\n                primary_mac: device.interfaces[0].mac,\n                extra_macs: [],\n                interfaces: []\n            };\n            var i;\n            for(i = 1; i < device.interfaces.length; i++) {\n                convertedDevice.extra_macs.push(device.interfaces[i].mac);\n            }\n            angular.forEach(device.interfaces, function(nic) {\n                convertedDevice.interfaces.push({\n                    mac: nic.mac,\n                    ip_assignment: nic.ipAssignment.name,\n                    ip_address: nic.ipAddress,\n                    \"subnet\": nic.subnetId\n                });\n            });\n            return convertedDevice;\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function() {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n            // Load subnets to get the available subnets.\n            ManagerHelperService.loadManagers(\n                    $scope, [SubnetsManager, DomainsManager]).then(function() {\n                $scope.device = newDevice($scope.device);\n                $scope.viewable = true;\n            });\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            ManagerHelperService.unloadManagers(\n                $scope, [SubnetsManager, DomainsManager]);\n            // Emit the hidden event.\n            $scope.$emit('addDeviceHidden');\n        };\n\n        // Returns true if the name is in error.\n        $scope.nameHasError = function() {\n            // If the name is empty don't show error.\n            if($scope.device === null || $scope.device.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateHostname($scope.device.name);\n        };\n\n        // Returns true if the MAC is in error.\n        $scope.macHasError = function(deviceInterface) {\n            // If the MAC is empty don't show error.\n            if(deviceInterface.mac.length === 0) {\n                return false;\n            }\n            // If the MAC is invalid show error.\n            if(!ValidationService.validateMAC(deviceInterface.mac)) {\n                return true;\n            }\n            // If the MAC is the same as another MAC show error.\n            var i;\n            for(i = 0; i < $scope.device.interfaces.length; i++) {\n                var isSelf = $scope.device.interfaces[i] === deviceInterface;\n                if(!isSelf &&\n                    $scope.device.interfaces[i].mac === deviceInterface.mac) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Returns true if the IP address is in error.\n        $scope.ipHasError = function(deviceInterface) {\n            // If the IP is empty don't show error.\n            if(deviceInterface.ipAddress.length === 0) {\n                return false;\n            }\n            // If ip address is invalid, then exit early.\n            if(!ValidationService.validateIP(deviceInterface.ipAddress)) {\n                return true;\n            }\n            var i, inNetwork;\n            if(angular.isObject(deviceInterface.ipAssignment)){\n                if(deviceInterface.ipAssignment.name === \"external\") {\n                    // External IP address cannot be within a known subnet.\n                    for(i = 0; i < $scope.subnets.length; i++) {\n                        inNetwork = ValidationService.validateIPInNetwork(\n                            deviceInterface.ipAddress,\n                            $scope.subnets[i].cidr);\n                        if(inNetwork) {\n                            return true;\n                        }\n                    }\n                } else if(deviceInterface.ipAssignment.name === \"static\" &&\n                    angular.isNumber(deviceInterface.subnetId)) {\n                    // Static IP address must be within a subnet.\n                    var subnet = SubnetsManager.getItemFromList(\n                        deviceInterface.subnetId);\n                    inNetwork = ValidationService.validateIPInNetwork(\n                        deviceInterface.ipAddress, subnet.cidr);\n                    if(!inNetwork) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return true when the device is missing information or invalid\n        // information.\n        $scope.deviceHasError = function() {\n            if($scope.device === null || $scope.device.name === '' ||\n                    $scope.nameHasError()) {\n                return true;\n            }\n\n            var i;\n            for(i = 0; i < $scope.device.interfaces.length; i++) {\n                var deviceInterface = $scope.device.interfaces[i];\n                if(deviceInterface.mac === '' ||\n                    $scope.macHasError(deviceInterface) ||\n                    !angular.isObject(deviceInterface.ipAssignment)) {\n                    return true;\n                }\n                var externalIpError = (\n                    deviceInterface.ipAssignment.name === \"external\" && (\n                        deviceInterface.ipAddress === '' ||\n                        $scope.ipHasError(deviceInterface)));\n                var staticIpError = (\n                    deviceInterface.ipAssignment.name === \"static\" && (\n                        !angular.isNumber(deviceInterface.subnetId) ||\n                        $scope.ipHasError(deviceInterface)));\n                if(externalIpError || staticIpError) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Adds new interface to device.\n        $scope.addInterface = function() {\n            $scope.device.interfaces.push(makeInterface());\n        };\n\n        // Returns true if the first interface in the device interfaces array.\n        $scope.isPrimaryInterface = function(deviceInterface) {\n            return $scope.device.interfaces.indexOf(deviceInterface) === 0;\n        };\n\n        // Removes the interface from the devices interfaces array.\n        $scope.deleteInterface = function(deviceInterface) {\n            // Don't remove the primary.\n            if($scope.isPrimaryInterface(deviceInterface)) {\n                return;\n            }\n            $scope.device.interfaces.splice(\n                $scope.device.interfaces.indexOf(deviceInterface), 1);\n        };\n\n        // Called when cancel clicked.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.device = newDevice();\n            $scope.hide();\n        };\n\n        // Called when save is clicked.\n        $scope.save = function(addAnother) {\n            // Do nothing if device in error.\n            if($scope.deviceHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Create the device.\n            var device = convertDeviceToProtocol($scope.device);\n            DevicesManager.create(device).then(function(device) {\n                if(addAnother) {\n                    $scope.device = newDevice($scope.device);\n                } else {\n                    $scope.device = newDevice();\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Domain Controller\n */\n\nangular.module('MAAS').controller('AddDomainController', [\n    '$scope', 'DomainsManager', 'ManagerHelperService',\n    'ValidationService', function($scope, DomainsManager,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addDomainScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addDomainScope = $scope;\n\n        // Set initial values.\n        $scope.viewable = false;\n        $scope.error = null;\n\n        // Makes a new domain.\n        function makeDomain() {\n            return {\n                name: \"\",\n                authoritative: true\n            };\n        }\n\n        // Initial domain.\n        $scope.domain = makeDomain();\n\n        // Converts the domain information from how it is held in the UI to\n        // how it is handled over the websocket.  Since they're identical, we\n        // just return a copy: some day, they might be different, so we retain\n        // the function against that day.\n        function convertDomainToProtocol(domain) {\n            return angular.copy(domain);\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function() {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n            $scope.domain = makeDomain();\n            $scope.viewable = true;\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            // Emit the hidden event.\n            $scope.$emit('addDomainHidden');\n        };\n\n        // Returns true if the name is in error.\n        $scope.nameHasError = function() {\n            // If the name is empty don't show error.\n            if($scope.domain.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateDomainName($scope.domain.name);\n        };\n\n        // Return true when the domain is missing information or invalid\n        // information.\n        $scope.domainHasError = function() {\n            if($scope.domain.name === '' || $scope.nameHasError()) {\n                return true;\n            }\n\n            return false;\n        };\n\n        // Called when cancel clicked.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.domain = makeDomain();\n            $scope.hide();\n        };\n\n        // Called when save is clicked.\n        $scope.save = function(addAnother) {\n            // Do nothing if domain in error.\n            if($scope.domainHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the domain.\n            $scope.error = null;\n\n            // Create the domain.\n            var domain = convertDomainToProtocol($scope.domain);\n            DomainsManager.create(domain).then(function() {\n                $scope.domain = makeDomain();\n                if(!addAnother) {\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Hardware Controller\n */\n\nangular.module('MAAS').controller('AddHardwareController', [\n    '$q', '$scope', '$http', 'ZonesManager', 'ResourcePoolsManager',\n    'MachinesManager', 'GeneralManager', 'DomainsManager',\n    'RegionConnection', 'ManagerHelperService', 'ValidationService',\n    function(\n        $q, $scope, $http, ZonesManager, ResourcePoolsManager,\n        MachinesManager, GeneralManager, DomainsManager, RegionConnection,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addHardwareScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addHardwareScope = $scope;\n\n        // Set initial values.\n        $scope.viewable = false;\n        $scope.model = 'machine';\n        $scope.zones = ZonesManager.getItems();\n        $scope.pools = ResourcePoolsManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.architectures = GeneralManager.getData(\"architectures\");\n        $scope.hwe_kernels = GeneralManager.getData(\"hwe_kernels\");\n        $scope.default_min_hwe_kernel = GeneralManager.getData(\n            \"default_min_hwe_kernel\");\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.error = null;\n        $scope.macAddressRegex = /^([0-9A-F]{2}[::]){5}([0-9A-F]{2})$/gmi;\n\n        // Input values.\n        $scope.machine = null;\n        $scope.chassis = null;\n\n        // Hard coded chassis types. This is because there is no method in\n        // MAAS to get a full list of supported chassis. This needs to be\n        // fixed ASAP.\n        var virshFields = [\n            {\n                name: 'hostname',\n                label: 'Address',\n                field_type: 'string',\n                \"default\": '',  // Using \"default\" to make lint happy.\n                choices: [],\n                required: true\n            },\n            {\n                name: 'password',\n                label: 'Password',\n                field_type: 'string',\n                \"default\": '',\n                choices: [],\n                required: false\n            },\n            {\n                name: 'prefix_filter',\n                label: 'Prefix filter',\n                field_type: 'string',\n                \"default\": '',\n                choices: [],\n                required: false\n            }\n        ];\n        $scope.chassisPowerTypes = [\n            {\n                name: 'mscm',\n                description: 'Moonshot Chassis Manager',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Host',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'powerkvm',\n                description: 'PowerKVM',\n                fields: virshFields\n            },\n            {\n                name: 'recs_box',\n                description: 'Christmann RECS|Box',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Hostname',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'port',\n                        label: 'Port',\n                        field_type: 'string',\n                        \"default\": '80',\n                        choices: [],\n                        required: false\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'seamicro15k',\n                description: 'SeaMicro 15000',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Hostname',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'power_control',\n                        label: 'Power Control',\n                        field_type: 'choice',\n                        \"default\": 'restapi2',\n                        choices: [\n                            ['restapi2', 'REST API V2.0'],\n                            ['restapi', 'REST API V0.9'],\n                            ['ipmi', 'IPMI']\n                        ],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'ucsm',\n                description: 'UCS Chassis Manager',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'URL',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'virsh',\n                description: 'Virsh (virtual systems)',\n                fields: virshFields\n            },\n            {\n                name: 'vmware',\n                description: 'VMware',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Host',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'prefix_filter',\n                        label: 'Prefix filter',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: false\n                    }\n                ]\n            }\n        ];\n\n        // Get the default zone from the loaded zones.\n        function defaultZone() {\n            if($scope.zones.length === 0) {\n                return null;\n            } else {\n                return $scope.zones[0];\n            }\n        }\n\n        // Get the default resource pools from loaded pools.\n        function defaultResourcePool() {\n            if($scope.pools.length === 0) {\n                return null;\n            } else {\n                return $scope.pools[0];\n            }\n        }\n\n        // Get the default architecture from the loaded architectures.\n        function defaultArchitecture() {\n            if($scope.architectures.length === 0) {\n                return '';\n            } else {\n                // Return amd64/generic first if available.\n                var i;\n                for(i = 0; i < $scope.architectures.length; i++) {\n                    if($scope.architectures[i] === \"amd64/generic\") {\n                        return $scope.architectures[i];\n                    }\n                }\n                return $scope.architectures[0];\n            }\n        }\n\n        // Return a new MAC address object.\n        function newMAC() {\n            return {\n                mac: '',\n                error: false\n            };\n        }\n\n        // Return a new machine object.\n        function newMachine(cloneMachine) {\n            // Clone the machine instead of just creating a new one.\n            // This helps the user by already having the previous selected\n            // items selected for the new machine.\n            if(angular.isObject(cloneMachine)) {\n                return {\n                    name: '',\n                    domain: cloneMachine.domain,\n                    macs: [newMAC()],\n                    zone: cloneMachine.zone,\n                    pool: cloneMachine.pool,\n                    architecture: cloneMachine.architecture,\n                    min_hwe_kernel: cloneMachine.min_hwe_kernel,\n                    power: {\n                        type: cloneMachine.power.type,\n                        parameters: {}\n                    }\n                };\n            }\n\n            // No clone machine. So create a new blank machine.\n            return {\n                name: '',\n                domain: DomainsManager.getDefaultDomain(),\n                macs: [newMAC()],\n                zone: defaultZone(),\n                pool: defaultResourcePool(),\n                architecture: defaultArchitecture(),\n                min_hwe_kernel: $scope.default_min_hwe_kernel.text,\n                power: {\n                    type: null,\n                    parameters: {}\n                }\n            };\n        }\n\n        // Return a new chassis object.\n        function newChassis(cloneChassis) {\n            // Clone the chassis instead of just creating a new one.\n            // This helps the user by already having the previous selected\n            // items selected for the new machine.\n            if(angular.isObject(cloneChassis)) {\n                return {\n                    domain: cloneChassis.domain,\n                    power: {\n                        type: null,\n                        parameters: {}\n                    }\n                };\n            } else {\n                return {\n                    domain: DomainsManager.getDefaultDomain(),\n                    power: {\n                        type: null,\n                        parameters: {}\n                    }\n                };\n            }\n        }\n\n        // Converts the machine information from how it is held in the UI to\n        // how it is handled over the websocket.\n        function convertMachineToProtocol(machine) {\n            // Convert the mac addresses.\n            var macs = angular.copy(machine.macs);\n            var pxe_mac = macs.shift().mac;\n            var extra_macs = macs.map(function(mac) { return mac.mac; });\n\n            // Return the new object.\n            return {\n                hostname: machine.name,\n                domain: machine.domain,\n                architecture: machine.architecture,\n                min_hwe_kernel: machine.min_hwe_kernel,\n                pxe_mac: pxe_mac,\n                extra_macs: extra_macs,\n                power_type: machine.power.type.name,\n                power_parameters: angular.copy(machine.power.parameters),\n                zone: {\n                    id: machine.zone.id,\n                    name: machine.zone.name\n                },\n                pool: {\n                    id: machine.pool.id,\n                    name: machine.pool.name\n                }\n            };\n        }\n\n        // Validate that all the parameters are there for the given power type.\n        function powerParametersHasError(power_type, parameters) {\n            var i;\n            for(i = 0; i < power_type.fields.length; i++) {\n                var field = power_type.fields[i];\n                var value = parameters[field.name];\n                if(field.required) {\n                    if(angular.isUndefined(value) || value === '') {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function(mode) {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n\n            $scope.mode = mode;\n\n            var loadedItems = false, loadedManagers = false;\n            var defer = $q.defer();\n            defer.promise.then(function() {\n                   // Add the first machine and chassis.\n                $scope.machine = newMachine($scope.machine);\n                $scope.chassis = newChassis($scope.chassis);\n                $scope.error = null;\n\n                // If the machine doesn't have an architecture\n                // set then it was created before all of the\n                // architectures were loaded. Set the default\n                // architecture for that machine.\n                if(angular.isObject($scope.machine) &&\n                    $scope.machine.architecture === '') {\n                    $scope.machine.architecture = defaultArchitecture();\n                }\n                $scope.viewable = true;\n            });\n\n            // The parent scope has already loaded the GeneralManager. If the\n            // general manager is reloaded all items from the parents scope\n            // will be reloaded as well. Call loadItems so only the items\n            // the add hardware form cares about are loaded.\n            GeneralManager.loadItems([\n                \"architectures\", \"hwe_kernels\", \"default_min_hwe_kernel\"\n            ]).then(function() {\n                loadedItems = true;\n                if(loadedManagers) {\n                    defer.resolve();\n                }\n            });\n            ManagerHelperService.loadManagers(\n                $scope, [ZonesManager, DomainsManager]).then(function() {\n                    loadedManagers = true;\n                    if(loadedItems) {\n                        defer.resolve();\n                    }\n                });\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            ManagerHelperService.unloadManagers(\n                $scope, [ZonesManager, DomainsManager]);\n\n            // Emit the hidden event.\n            $scope.$emit('addHardwareHidden');\n        };\n\n        // Return True when architectures loaded and in machine mode.\n        $scope.showMachine = function() {\n            if($scope.architectures.length === 0) {\n                return false;\n            }\n            return $scope.mode === \"machine\";\n        };\n\n        // Return True when architectures loaded and in chassis mode.\n        $scope.showChassis = function() {\n            if($scope.architectures.length === 0) {\n                return false;\n            }\n            return $scope.mode === \"chassis\";\n        };\n\n        // Add a new MAC address to the machine.\n        $scope.addMac = function() {\n            $scope.machine.macs.push(newMAC());\n        };\n\n        // Remove a MAC address to the machine.\n        $scope.removeMac = function(mac) {\n            var idx = $scope.machine.macs.indexOf(mac);\n            if(idx > -1) {\n                $scope.machine.macs.splice(idx, 1);\n            }\n        };\n\n        // Return true if the machine name is invalid.\n        $scope.invalidName = function() {\n            // Not invalid if empty.\n            if($scope.machine.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateHostname($scope.machine.name);\n        };\n\n        // Validate that the mac address is valid.\n        $scope.validateMac = function(mac) {\n            if(mac.mac === '') {\n                mac.error = false;\n            } else {\n                mac.error = !ValidationService.validateMAC(mac.mac);\n            }\n        };\n\n        // Return true when the machine is missing information or invalid\n        // information.\n        $scope.machineHasError = function() {\n            // Early-out for errors.\n            in_error = (\n                $scope.machine === null ||\n                $scope.machine.zone === null ||\n                $scope.machine.pool === null ||\n                $scope.machine.architecture === '' ||\n                $scope.machine.power.type === null ||\n                $scope.invalidName($scope.machine));\n            if(in_error) {\n                return in_error;\n            }\n\n            // Make sure none of the mac addresses are in error. The first one\n            // cannot be blank the remaining are allowed to be empty.\n            if($scope.machine.macs[0].mac === '' ||\n                $scope.machine.macs[0].error) {\n                return true;\n            }\n            var i;\n            for(i = 1; i < $scope.machine.macs.length; i++) {\n                var mac = $scope.machine.macs[i];\n                if(mac.mac !== '' && mac.error) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return true if the chassis has errors.\n        $scope.chassisHasErrors = function() {\n            // Early-out for errors.\n            in_error = (\n                $scope.chassis === null ||\n                $scope.chassis.power.type === null);\n            if(in_error) {\n                return in_error;\n            }\n            return powerParametersHasError(\n                $scope.chassis.power.type, $scope.chassis.power.parameters);\n        };\n\n        // Called when the cancel button is pressed.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.machine = newMachine();\n            $scope.chassis = newChassis();\n\n            // Hide the controller.\n            $scope.hide();\n        };\n\n        // Called to perform the saving of the machine.\n        $scope.saveMachine = function(addAnother) {\n            // Does nothing if machine has errors.\n            if($scope.machineHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Add the machine.\n            MachinesManager.create(\n                convertMachineToProtocol($scope.machine)).then(\n                    function() {\n                        if(addAnother) {\n                            $scope.machine = newMachine($scope.machine);\n                        } else {\n                            $scope.machine = newMachine();\n\n                            // Hide the scope if not adding another.\n                            $scope.hide();\n                        }\n                    }, function(error) {\n                        $scope.error =\n                            ManagerHelperService.parseValidationError(error);\n                    });\n        };\n\n        // Called to perform the saving of the chassis.\n        $scope.saveChassis = function(addAnother) {\n            // Does nothing if error exists.\n            if($scope.chassisHasErrors()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Create the parameters.\n            var params = angular.copy($scope.chassis.power.parameters);\n            params.chassis_type = $scope.chassis.power.type.name;\n            params.domain = $scope.chassis.domain.name;\n\n            // XXX ltrager 24-02-2016: Something is adding the username field\n            // even though its not defined in virshFields. The API rejects\n            // requests with improper fields so remove it before we send the\n            // request.\n            if(\n                    params.chassis_type === \"powerkvm\" ||\n                    params.chassis_type === \"virsh\") {\n                delete params.username;\n            }\n            // Add the chassis. For now we use the API as the websocket doesn't\n            // support probe and enlist.\n            $http({\n                method: 'POST',\n                url: 'api/2.0/machines/?op=add_chassis',\n                data: $.param(params),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function() {\n                if(addAnother) {\n                    $scope.chassis = newChassis($scope.chassis);\n                } else {\n                    $scope.chassis = newChassis();\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error.data);\n            });\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Dashboard Controller\n */\n\nangular.module('MAAS').controller('DashboardController', [\n    '$scope', '$window', '$rootScope', '$routeParams', '$location',\n    'DiscoveriesManager', 'DomainsManager', 'MachinesManager',\n    'DevicesManager', 'SubnetsManager', 'VLANsManager', 'ConfigsManager',\n    'ManagerHelperService',\n    function($scope, $window, $rootScope, $routeParams, $location,\n             DiscoveriesManager, DomainsManager, MachinesManager,\n             DevicesManager, SubnetsManager, VLANsManager, ConfigsManager,\n             ManagerHelperService) {\n\n        // Default device IP options.\n        var deviceIPOptions = [\n            ['static', 'Static'],\n            ['dynamic', 'Dynamic'],\n            ['external', 'External']\n        ];\n\n        // Set title and page.\n        $rootScope.title = \"Dashboard\";\n        $rootScope.page = \"dashboard\";\n\n        // Set initial values.\n        $scope.loaded = false;\n        $scope.discoveredDevices = DiscoveriesManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.machines = MachinesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.configManager = ConfigsManager;\n        $scope.networkDiscovery = null;\n        $scope.column = 'mac';\n        $scope.selectedDevice = null;\n        $scope.convertTo = null;\n\n        // Set default predicate to last_seen.\n        $scope.predicate = $scope.last_seen;\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Proxy manager that the maas-obj-form directive uses to call the\n        // correct method based on current type.\n        $scope.proxyManager = {\n            updateItem: function(params) {\n                if($scope.convertTo.type === 'device') {\n                    return DevicesManager.createItem(params);\n                } else if($scope.convertTo.type === 'interface') {\n                    return DevicesManager.createInterface(params);\n                } else {\n                    throw new Error(\"Unknown type: \" + $scope.convertTo.type);\n                }\n            }\n        };\n\n        // Return the name name for the Discovery.\n        $scope.getDiscoveryName = function(discovery) {\n            if(discovery.hostname === null) {\n                return 'unknown';\n            }\n            else {\n                return discovery.hostname;\n            }\n        };\n\n        // Get the name of the subnet from its ID.\n        $scope.getSubnetName = function(subnetId) {\n            var subnet = SubnetsManager.getItemFromList(subnetId);\n            return SubnetsManager.getName(subnet);\n        };\n\n        // Get the name of the VLAN from its ID.\n        $scope.getVLANName = function(vlanId) {\n            var vlan = VLANsManager.getItemFromList(vlanId);\n            return VLANsManager.getName(vlan);\n        };\n\n        // Sets selected device\n        $scope.toggleSelected = function(deviceId) {\n            if($scope.selectedDevice === deviceId) {\n                $scope.selectedDevice = null;\n            } else {\n                var discovered = DiscoveriesManager.getItemFromList(deviceId);\n                var hostname = $scope.getDiscoveryName(discovered);\n                var domain;\n                if(hostname === 'unknown') {\n                    hostname = '';\n                }\n                if(hostname.indexOf('.') > 0) {\n                    domain = DomainsManager.getDomainByName(\n                        hostname.slice(hostname.indexOf('.') + 1));\n                    hostname = hostname.split(\".\", 1)[0];\n                    if(domain === null) {\n                        domain = DomainsManager.getDefaultDomain();\n                    }\n                } else {\n                    domain = DomainsManager.getDefaultDomain();\n                }\n                $scope.convertTo = {\n                    type: 'device',\n                    hostname: hostname,\n                    domain: domain,\n                    parent: null,\n                    ip_assignment: 'dynamic',\n                    goTo: false,\n                    saved: false,\n                    deviceIPOptions: deviceIPOptions.filter(\n                        function(option) {\n                            // Filter the options to not include static if\n                            // a subnet is not defined for this discovered\n                            // item.\n                            if(option[0] === 'static' &&\n                                !angular.isNumber(discovered.subnet)) {\n                                return false;\n                            } else {\n                                return true;\n                            }\n                        })\n                };\n                $scope.selectedDevice = deviceId;\n            }\n        };\n\n        // Called before the createItem is called to adjust the values\n        // passed over the call.\n        $scope.preProcess = function(item) {\n            var discovered = DiscoveriesManager.getItemFromList(\n                $scope.selectedDevice);\n            item = angular.copy(item);\n            if($scope.convertTo.type === 'device') {\n                item.primary_mac = discovered.mac_address;\n                item.extra_macs = [];\n                item.interfaces = [{\n                    mac: discovered.mac_address,\n                    ip_assignment: item.ip_assignment,\n                    ip_address: discovered.ip,\n                    subnet: discovered.subnet\n                }];\n            } else if($scope.convertTo.type === 'interface') {\n                item.mac_address = discovered.mac_address;\n                item.ip_address = discovered.ip;\n                item.subnet = discovered.subnet;\n            }\n            return item;\n        };\n\n        // Called after the createItem has been successful.\n        $scope.afterSave = function(obj) {\n            DiscoveriesManager._removeItem($scope.selectedDevice);\n            $scope.selectedDevice = null;\n            $scope.convertTo.hostname = obj.hostname;\n            $scope.convertTo.parent = obj.parent;\n            $scope.convertTo.saved = true;\n            if($scope.convertTo.goTo) {\n                if(angular.isString(obj.parent)) {\n                    $location.path('/device/' + obj.parent);\n                } else {\n                    $location.path('/devices/');\n                }\n            }\n        };\n\n        // Load all the managers and get the network discovery config item.\n        ManagerHelperService.loadManagers($scope, [\n            DiscoveriesManager, DomainsManager, MachinesManager,\n            DevicesManager, SubnetsManager, VLANsManager, ConfigsManager]).then(\n            function() {\n                $scope.loaded = true;\n                $scope.networkDiscovery = ConfigsManager.getItemFromList(\n                    'network_discovery');\n            });\n    }\n]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domain Details Controller\n */\n\nangular.module('MAAS').controller('DomainDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'DomainsManager', 'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $location,\n        DomainsManager, UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"domains\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.domain = null;\n        $scope.editSummary = false;\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.action = null;\n        $scope.editRow = null;\n        $scope.deleteRow = null;\n\n        $scope.domainsManager = DomainsManager;\n        $scope.newObject = {};\n\n        $scope.supportedRecordTypes = [\n            'A', 'AAAA', 'CNAME', 'MX', 'NS', 'SRV', 'SSHFP', 'TXT'\n        ];\n\n        // Set default predicate to name.\n        $scope.predicate = 'name';\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is clicked in the domain summary.\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        $scope.isRecordAutogenerated = function(row) {\n            // We can't edit records that don't have a dnsresource_id.\n            // (If the row doesn't have one, it has probably been automatically\n            // generated by means of a deployed node, or some other reason.)\n            return !row.dnsresource_id;\n        };\n\n        $scope.editRecord = function(row) {\n            $scope.editRow = row;\n            // We'll need the original values to determine if an update is\n            // required.\n            row.previous_rrdata = row.rrdata;\n            row.previous_rrtype = row.rrtype;\n            row.previous_name = row.name;\n            row.previous_ttl = row.ttl;\n            $scope.deleteRow = null;\n        };\n\n        $scope.removeRecord = function(row) {\n            $scope.deleteRow = row;\n            $scope.editRow = null;\n        };\n\n        $scope.confirmRemoveRecord = function(row) {\n            // The websocket handler needs the domain ID, so add it in.\n            row.domain = $scope.domain.id;\n            $scope.domainsManager.deleteDNSRecord(row);\n            $scope.stopEditingRow();\n        };\n\n        $scope.stopEditingRow = function() {\n            $scope.editRow = null;\n            $scope.deleteRow = null;\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.domain.displayname;\n        }\n\n        // Called when the domain has been loaded.\n        function domainLoaded(domain) {\n            $scope.domain = domain;\n            $scope.loaded = true;\n\n            updateTitle();\n        }\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default domain.\n        $scope.isDefaultDomain = function() {\n            if(angular.isObject($scope.domain)) {\n                return $scope.domain.id === 0;\n            }\n            return false;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.domain)) {\n                return $scope.domain.rrsets.length === 0;\n            }\n            return false;\n        };\n\n        // Called when the delete domain button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.actionInProgress = true;\n            $scope.action = 'delete';\n        };\n\n        // Called when the add record button is pressed.\n        $scope.addRecordButton = function() {\n            $scope.error = null;\n            $scope.actionInProgress = true;\n            $scope.action = 'add_record';\n        };\n\n        // Called when the cancel delete domain button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionInProgress = false;\n        };\n\n        // Called when the confirm delete domain button is pressed.\n        $scope.deleteConfirmButton = function() {\n            DomainsManager.deleteDomain($scope.domain).then(function() {\n                $scope.actionInProgress = false;\n                $location.path(\"/domains\");\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers(\n            $scope, [DomainsManager, UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this domain set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeDomain = DomainsManager.getActiveItem();\n            var requestedDomain = parseInt($routeParams.domain_id, 10);\n            if(isNaN(requestedDomain)) {\n                ErrorService.raiseError(\"Invalid domain identifier.\");\n            } else if(angular.isObject(activeDomain) &&\n                activeDomain.id === requestedDomain) {\n                domainLoaded(activeDomain);\n            } else {\n                DomainsManager.setActiveItem(\n                    requestedDomain).then(function(domain) {\n                        domainLoaded(domain);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domains List Controller\n */\n\nangular.module('MAAS').controller('DomainsListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', 'DomainsManager',\n    'UsersManager', 'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, $filter, DomainsManager,\n        UsersManager, ManagerHelperService) {\n\n        // Load the filters that are used inside the controller.\n\n        // Set title and page.\n        $rootScope.title = \"DNS\";\n        $rootScope.page = \"domains\";\n\n        // Set initial values.\n        $scope.domains = DomainsManager.getItems();\n        $scope.currentpage = \"domains\";\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.loading = true;\n\n        // This will hold the AddDomainController once it's initialized.  The\n        // controller will set this variable as it's always a child of this\n        // scope.\n        $scope.addDomainScope = null;\n\n        // Called when the add domain button is pressed.\n        $scope.addDomain = function() {\n            $scope.addDomainScope.show();\n        };\n\n        // Called when the cancel add domain button is pressed.\n        $scope.cancelAddDomain = function() {\n            $scope.addDomainScope.cancel();\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        ManagerHelperService.loadManagers(\n            $scope, [DomainsManager, UsersManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n        }\n    ]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Fabric Details Controller\n */\n\nangular.module('MAAS').controller('FabricDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'FabricsManager', 'VLANsManager', 'SubnetsManager', 'SpacesManager',\n    'ControllersManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        FabricsManager, VLANsManager, SubnetsManager, SpacesManager,\n        ControllersManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.fabric = null;\n        $scope.fabricManager = FabricsManager;\n        $scope.editSummary = false;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.loaded = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.fabric.name;\n        }\n\n        // Called when the \"edit\" button is cliked in the fabric summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the fabric summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Called when the fabric has been loaded.\n        function fabricLoaded(fabric) {\n            if(angular.isObject(fabric)) {\n                $scope.fabric = fabric;\n                updateTitle();\n                $scope.$watch(\"vlans\", updateVLANs, true);\n                $scope.$watch(\"subnets\", updateVLANs, true);\n                $scope.$watch(\"controllers\", updateVLANs, true);\n                $scope.loaded = true;\n                // Initial table sort order.\n                $scope.predicate = \"['vlan_name', 'vlan.id', 'subnet_name']\";\n            }\n        }\n\n        // Generate a table that can easily be rendered in the view.\n        function updateVLANs() {\n            var rows = [];\n            var racks = {};\n            angular.forEach($filter('filter')(\n                    $scope.vlans, {fabric:$scope.fabric.id}, true),\n                    function(vlan) {\n                var subnets =\n                    $filter('filter')($scope.subnets, {vlan:vlan.id}, true);\n                if(subnets.length > 0) {\n                    angular.forEach(subnets, function(subnet) {\n                        var space = SpacesManager.getItemFromList(subnet.space);\n                        var space_name = (space === null) ?\n                            \"(undefined)\" : space.name;\n                        var row = {\n                            vlan: vlan,\n                            vlan_name: VLANsManager.getName(vlan),\n                            subnet: subnet,\n                            subnet_name: SubnetsManager.getName(subnet),\n                            space: space,\n                            space_name: space_name\n                        };\n                        rows.push(row);\n                    });\n                } else {\n                    // If there are no subnets, populate a row based on the\n                    // information we have (just the VLAN).\n                    var row = {\n                        vlan: vlan,\n                        vlan_name: VLANsManager.getName(vlan),\n                        subnet: null,\n                        subnet_name: null,\n                        space: null,\n                        space_name: null\n                    };\n                    rows.push(row);\n                }\n                // Enumerate racks for vlan.\n                angular.forEach(vlan.rack_sids, function(rack_sid) {\n                    var rack = ControllersManager.getItemFromList(rack_sid);\n                    if(angular.isObject(rack)) {\n                        racks[rack.system_id] = rack;\n                    }\n                });\n            });\n            $scope.rows = rows;\n            $scope.racks = Object.keys(racks).map(function(key) {\n                return racks[key];\n            });\n        }\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default Fabric\n        $scope.isDefaultFabric = function() {\n            if(!angular.isObject($scope.fabric)) {\n                return false;\n            }\n            return $scope.fabric.id === 0;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.fabric)) {\n                return $scope.fabric.id !== 0;\n            }\n            return false;\n        };\n\n        // Called when the delete fabric button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete fabric button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete fabric button is pressed.\n        $scope.deleteConfirmButton = function() {\n            FabricsManager.deleteFabric($scope.fabric).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/networks\");\n                $location.search('by', 'fabric');\n            }, function(reply) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(reply.error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            FabricsManager, VLANsManager, SubnetsManager, SpacesManager,\n            ControllersManager, UsersManager]).then(\n            function() {\n                // Possibly redirected from another controller that already had\n                // this fabric set to active. Only call setActiveItem if not\n                // already the activeItem.\n                var activeFabric = FabricsManager.getActiveItem();\n                var requestedFabric = parseInt($routeParams.fabric_id, 10);\n\n                if(isNaN(requestedFabric)) {\n                    ErrorService.raiseError(\"Invalid fabric identifier.\");\n                } else if(angular.isObject(activeFabric) &&\n                    activeFabric.id === requestedFabric) {\n                    fabricLoaded(activeFabric);\n                } else {\n                    FabricsManager.setActiveItem(\n                        requestedFabric).then(function(fabric) {\n                            fabricLoaded(fabric);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                }\n            });\n    }\n]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Images Controller\n */\n\nangular.module('MAAS').controller('ImagesController', [\n    '$rootScope', '$scope', 'BootResourcesManager',\n    'ConfigsManager', 'UsersManager', 'ManagerHelperService', function(\n        $rootScope, $scope, BootResourcesManager,\n        ConfigsManager, UsersManager, ManagerHelperService) {\n\n            $rootScope.page = \"images\";\n            $rootScope.title = \"Loading...\";\n\n            $scope.loading = true;\n            $scope.bootResources = BootResourcesManager.getData();\n            $scope.configManager = ConfigsManager;\n            $scope.autoImport = null;\n\n            // Return true if the user is a super user.\n            $scope.isSuperUser = function() {\n                return UsersManager.isSuperUser();\n            };\n\n            // Load the required managers.\n            ManagerHelperService.loadManagers(\n                $scope, [ConfigsManager, UsersManager]).then(function() {\n                $scope.autoImport = ConfigsManager.getItemFromList(\n                    \"boot_images_auto_import\");\n            });\n\n            // The boot-images directive will load the bootResources manager,\n            // we just watch until resources is set. That means the page is\n            // loaded.\n            $scope.$watch(\"bootResources.resources\", function() {\n                if(angular.isArray($scope.bootResources.resources)) {\n                    $scope.loading = false;\n                    $rootScope.title = \"Images\";\n                }\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Intro Controller\n */\n\nangular.module('MAAS').controller('IntroController', [\n    '$rootScope', '$scope', '$window', '$location',\n    'ConfigsManager', 'PackageRepositoriesManager', 'BootResourcesManager',\n    'ManagerHelperService',\n    function(\n        $rootScope, $scope, $window, $location,\n        ConfigsManager, PackageRepositoriesManager, BootResourcesManager,\n        ManagerHelperService) {\n\n            $rootScope.page = \"intro\";\n            $rootScope.title = \"Welcome\";\n\n            $scope.loading = true;\n            $scope.configManager = ConfigsManager;\n            $scope.repoManager = PackageRepositoriesManager;\n            $scope.bootResources = BootResourcesManager.getData();\n            $scope.hasImages = false;\n            $scope.maasName = null;\n            $scope.upstreamDNS = null;\n            $scope.mainArchive = null;\n            $scope.portsArchive = null;\n            $scope.httpProxy = null;\n\n            // Set the skip function on the rootScope to allow skipping the\n            // intro view.\n            $rootScope.skip = function() {\n                $scope.clickContinue(true);\n            };\n\n            // Return true if the welcome section is not in error.\n            $scope.welcomeInError = function() {\n                var form = $scope.maasName.$maasForm;\n                if(angular.isObject(form)) {\n                    return form.hasErrors();\n                } else {\n                    return false;\n                }\n            };\n\n            // Return true if the network section is in error.\n            $scope.networkInError = function() {\n                var inError = false;\n                var objs = [\n                    $scope.upstreamDNS,\n                    $scope.mainArchive,\n                    $scope.portsArchive,\n                    $scope.httpProxy];\n                angular.forEach(objs, function(obj) {\n                    var form = obj.$maasForm;\n                    if(angular.isObject(form) && form.hasErrors()) {\n                        inError = true;\n                    }\n                });\n                return inError;\n            };\n\n            // Return true if continue can be clicked.\n            $scope.canContinue = function() {\n                return (\n                    !$scope.welcomeInError() &&\n                    !$scope.networkInError() &&\n                    $scope.hasImages);\n            };\n\n            // Called when continue button is clicked.\n            $scope.clickContinue = function(force) {\n                if(angular.isUndefined(force)) {\n                    force = false;\n                }\n                if(force || $scope.canContinue()) {\n                    ConfigsManager.updateItem({\n                        'name': 'completed_intro',\n                        'value': true\n                    }).then(function() {\n                        // Reload the whole page so that the MAAS_config will be\n                        // set to the new value.\n                        $window.location.reload();\n                    });\n                }\n            };\n\n            // If intro has been completed redirect to '/'.\n            if(MAAS_config.completed_intro) {\n                $location.path('/');\n            } else {\n                // Load the required managers.\n                var managers = [ConfigsManager, PackageRepositoriesManager];\n                ManagerHelperService.loadManagers(\n                    $scope, managers).then(function() {\n                    $scope.loading = false;\n                    $scope.maasName = ConfigsManager.getItemFromList(\n                        \"maas_name\");\n                    $scope.upstreamDNS = ConfigsManager.getItemFromList(\n                        \"upstream_dns\");\n                    $scope.httpProxy = ConfigsManager.getItemFromList(\n                        \"http_proxy\");\n                    $scope.mainArchive = (\n                        PackageRepositoriesManager.getItems().filter(\n                            function(repo) {\n                                return (repo['default'] &&\n                                    repo.name === \"main_archive\");\n                            })[0]);\n                    $scope.portsArchive = (\n                        PackageRepositoriesManager.getItems().filter(\n                            function(repo) {\n                                return (repo['default'] &&\n                                    repo.name === \"ports_archive\");\n                            })[0]);\n                });\n\n                // Don't load the boot resources as the boot-images directive\n                // performs that action. Just watch and make sure that\n                // at least one resource exists before continuing.\n                $scope.$watch(\"bootResources.resources\", function() {\n                    if(angular.isArray($scope.bootResources.resources) &&\n                        $scope.bootResources.resources.length > 0) {\n                        $scope.hasImages = true;\n                    } else {\n                        $scope.hasImages = false;\n                    }\n                });\n            }\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Intro Controller\n */\n\nangular.module('MAAS').controller('IntroUserController', [\n    '$rootScope', '$scope', '$window', '$location',\n    'UsersManager', 'ManagerHelperService',\n    function(\n        $rootScope, $scope, $window, $location,\n        UsersManager, ManagerHelperService) {\n\n            $rootScope.page = \"intro\";\n            $rootScope.title = \"Welcome\";\n\n            $scope.loading = true;\n            $scope.user = null;\n\n            // Set the skip function on the rootScope to allow skipping the\n            // intro view.\n            $rootScope.skip = function() {\n                $scope.clickContinue(true);\n            };\n\n            // Return true if super user.\n            $scope.isSuperUser = function() {\n                return UsersManager.isSuperUser();\n            };\n\n            // Return true if continue can be clicked.\n            $scope.canContinue = function() {\n                return $scope.user.sshkeys_count > 0;\n            };\n\n            // Called when continue button is clicked.\n            $scope.clickContinue = function(force) {\n                if(angular.isUndefined(force)) {\n                    force = false;\n                }\n                if(force || $scope.canContinue()) {\n                    UsersManager.markIntroComplete().then(function() {\n                        // Reload the whole page so that the MAAS_config will\n                        // be set to the new value.\n                        $window.location.reload();\n                    });\n                }\n            };\n\n            // If intro has been completed redirect to '/'.\n            if(MAAS_config.user_completed_intro) {\n                $location.path('/');\n            } else {\n                // Load the required managers.\n                ManagerHelperService.loadManager(\n                    $scope, UsersManager).then(function() {\n                        $scope.loading = false;\n                        $scope.user = UsersManager.getAuthUser();\n                    });\n            }\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Networks List Controller\n */\n\nangular.module('MAAS').controller('NetworksListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'SubnetsManager', 'FabricsManager', 'SpacesManager', 'VLANsManager',\n    'UsersManager', 'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, $filter, $location,\n             SubnetsManager, FabricsManager, SpacesManager, VLANsManager,\n             UsersManager, ManagerHelperService) {\n\n        // Load the filters that are used inside the controller.\n        var filterByVLAN = $filter('filterByVLAN');\n        var filterByFabric = $filter('filterByFabric');\n        var filterBySpace = $filter('filterBySpace');\n        var filterByNullSpace = $filter('filterByNullSpace');\n\n        // Set title and page.\n        $rootScope.title = \"Subnets\";\n        $rootScope.page = \"networks\";\n\n        // Set the initial value of $scope.groupBy based on the URL\n        // parameters, but default to the 'fabric' groupBy if it's not found.\n        $scope.getURLParameters = function() {\n            if(angular.isString($location.search().by)) {\n                $scope.groupBy = $location.search().by;\n            } else {\n                $scope.groupBy = 'fabric';\n            }\n        };\n\n        $scope.ADD_FABRIC_ACTION = {\n            name: \"add_fabric\",\n            title: \"Fabric\",\n            selectedTitle: \"Add fabric\",\n            objectName: 'fabric'\n        };\n        $scope.ADD_VLAN_ACTION = {\n            name: \"add_vlan\",\n            title: \"VLAN\",\n            selectedTitle: \"Add VLAN\",\n            objectName: 'vlan'\n        };\n        $scope.ADD_SPACE_ACTION = {\n            name: \"add_space\",\n            title: \"Space\",\n            selectedTitle: \"Add space\",\n            objectName: 'space'\n        };\n        $scope.ADD_SUBNET_ACTION = {\n            name: \"add_subnet\",\n            title: \"Subnet\",\n            selectedTitle: \"Add subnet\",\n            objectName: 'subnet'\n        };\n\n        $scope.getURLParameters();\n\n        // Set initial values.\n        $scope.subnetManager = SubnetsManager;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.fabricManager = FabricsManager;\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.spaceManager = SpacesManager;\n        $scope.spaces = SpacesManager.getItems();\n        $scope.vlanManager = VLANsManager;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.loading = true;\n\n        $scope.group = {};\n        // Used when grouping by fabrics.\n        $scope.group.fabrics = {};\n        // User when grouping by spaces.\n        $scope.group.spaces = {};\n        $scope.group.spaces.orphanVLANs = [];\n\n        // Initializers for action objects.\n        var actionObjectInitializers = {\n            fabric: function() {\n                return {};\n            },\n            vlan: function() {\n                // Set initial fabric.\n                return {\n                    fabric: $scope.fabrics[0].id\n                };\n            },\n            space: function() {\n                return {};\n            },\n            subnet: function() {\n                // Set initial VLAN and space.\n                return {\n                    vlan: $scope.fabrics[0].vlan_ids[0]\n                };\n            }\n        };\n\n        // Return the name of the subnet.\n        function getSubnetName(subnet) {\n            return SubnetsManager.getName(subnet);\n        }\n\n        // Generate a table that can be easily rendered in the view.\n        // Traverses the fabrics and VLANs in-order so that if previous\n        // fabrics and VLANs' names are identical, they can be hidden from\n        // the table cell.\n        function updateFabricsGroupBy() {\n            var rows = [];\n            var previous_fabric = {id:-1};\n            var previous_vlan = {id:-1};\n            var fabrics = $filter('orderBy')($scope.fabrics, ['name']);\n            angular.forEach(fabrics, function(fabric) {\n                var vlans = filterByFabric($scope.vlans, fabric);\n                vlans = $filter('orderBy')(vlans, ['vid']);\n                angular.forEach(vlans, function(vlan) {\n                    var subnets = filterByVLAN($scope.subnets, vlan);\n                    if(subnets.length > 0) {\n                        angular.forEach(subnets, function(subnet) {\n                            var space = SpacesManager.getItemFromList(\n                                subnet.space);\n                            var row = {\n                                fabric: fabric,\n                                fabric_name: \"\",\n                                vlan: vlan,\n                                vlan_name: \"\",\n                                space: space,\n                                subnet: subnet,\n                                subnet_name: getSubnetName(subnet)\n                            };\n                            if(fabric.id !== previous_fabric.id) {\n                                previous_fabric.id = fabric.id;\n                                row.fabric_name = fabric.name;\n                            }\n                            if(vlan.id !== previous_vlan.id) {\n                                previous_vlan.id = vlan.id;\n                                row.vlan_name = $scope.getVLANName(vlan);\n                            }\n                            rows.push(row);\n                        });\n                    } else {\n                        var row = {\n                            fabric: fabric,\n                            fabric_name: \"\",\n                            vlan: vlan,\n                            vlan_name: $scope.getVLANName(vlan)\n                        };\n                        if(fabric.id !== previous_fabric.id) {\n                            previous_fabric.id = fabric.id;\n                            row.fabric_name = fabric.name;\n                        }\n                        rows.push(row);\n                    }\n                });\n            });\n            $scope.group.fabrics.rows = rows;\n        }\n\n        // Generate a table that can be easily rendered in the view.\n        // Traverses the spaces in-order so that if the previous space's name\n        // is identical, it can be hidden from the table cell.\n        // Note that this view only shows items that can be related to a space.\n        // That is, VLANs and fabrics with no corresponding subnets (and\n        // therefore spaces) cannot be shown in this table.\n        function updateSpacesGroupBy() {\n            var rows = [];\n            var spaces = $filter('orderBy')($scope.spaces, ['name']);\n            var previous_space = {id: -1};\n            angular.forEach(spaces, function(space) {\n                var subnets = filterBySpace($scope.subnets, space);\n                subnets = $filter('orderBy')(subnets, ['cidr']);\n                var index = 0;\n                angular.forEach(subnets, function(subnet) {\n                    index++;\n                    var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                    var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                    var row = {\n                        fabric: fabric,\n                        vlan: vlan,\n                        vlan_name: $scope.getVLANName(vlan),\n                        subnet: subnet,\n                        subnet_name: getSubnetName(subnet),\n                        space: space,\n                        space_name: \"\"\n                    };\n                    if(space.id !== previous_space.id) {\n                        previous_space.id = space.id;\n                        row.space_name = space.name;\n                    }\n                    rows.push(row);\n                });\n                if(index === 0) {\n                    rows.push({\n                        space: space,\n                        space_name: space.name\n                    });\n                }\n            });\n            $scope.group.spaces.rows = rows;\n        }\n\n        function updateOrphanVLANs() {\n            var rows = [];\n            var subnets = filterByNullSpace($scope.subnets);\n            subnets = $filter('orderBy')(subnets, ['cidr']);\n            angular.forEach(subnets, function(subnet) {\n                var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                var row = {\n                    fabric: fabric,\n                    vlan: vlan,\n                    vlan_name: $scope.getVLANName(vlan),\n                    subnet: subnet,\n                    subnet_name: getSubnetName(subnet),\n                    space: null\n                };\n                rows.push(row);\n            });\n            $scope.group.spaces.orphanVLANs = rows;\n        }\n\n        // Update the \"Group by\" selection. This is called from a few places:\n        // * When the $watch notices data has changed\n        // * When the URL bar is updated, after the URL is parsed and\n        //   $scope.groupBy is updated\n        // * When the drop-down \"Group by\" selection box changes\n        $scope.updateGroupBy = function() {\n            var groupBy = $scope.groupBy;\n            if(groupBy === 'space') {\n                $location.search('by', 'space');\n                updateSpacesGroupBy();\n                updateOrphanVLANs();\n            } else {\n                // The only other option is 'fabric', but in case the user\n                // made a typo on the URL bar we just assume it was 'fabric'\n                // as a fallback.\n                $location.search('by', 'fabric');\n                updateFabricsGroupBy();\n            }\n        };\n\n        // Called when the managers load to populate the actions the user\n        // is allowed to perform.\n        $scope.updateActions = function() {\n            if(UsersManager.isSuperUser()) {\n                $scope.actionOptions = [\n                    $scope.ADD_FABRIC_ACTION,\n                    $scope.ADD_VLAN_ACTION,\n                    $scope.ADD_SPACE_ACTION,\n                    $scope.ADD_SUBNET_ACTION\n                ];\n            } else {\n                $scope.actionOptions = [];\n            }\n        };\n\n        // Called when a action is selected.\n        $scope.actionChanged = function() {\n            $scope.newObject = (\n                actionObjectInitializers[$scope.actionOption.objectName]());\n        };\n\n        // Called when the \"Cancel\" button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionOption = null;\n            $scope.newObject = null;\n        };\n\n        // Return the name name for the VLAN.\n        $scope.getVLANName = function(vlan) {\n            return VLANsManager.getName(vlan);\n        };\n\n        // Return the name of the fabric from its given ID.\n        $scope.getFabricNameById = function(fabricId) {\n            return FabricsManager.getName(\n                FabricsManager.getItemFromList(fabricId));\n        };\n\n        // Called before the subnet object is saved. Sets the fabric\n        // field to be the fabric for the selected VLAN.\n        $scope.actionSubnetPreSave = function(obj) {\n            obj.fabric = VLANsManager.getItemFromList(obj.vlan).fabric;\n            return obj;\n        };\n\n        ManagerHelperService.loadManagers($scope, [\n            SubnetsManager, FabricsManager, SpacesManager, VLANsManager,\n            UsersManager]).then(\n            function() {\n                $scope.loading = false;\n\n                $scope.updateActions();\n\n                $scope.$watch(\n                    \"[subnets, fabrics, spaces, vlans]\",\n                    $scope.updateGroupBy, true);\n\n                // If the route has been updated, a new search string must\n                // potentially be rendered.\n                $scope.$on(\"$routeUpdate\", function() {\n                    $scope.getURLParameters();\n                    $scope.updateGroupBy();\n                });\n                $scope.updateGroupBy();\n            });\n    }\n]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Details Controller\n */\n\nangular.module('MAAS').controller('NodeDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location', '$interval',\n    'DevicesManager', 'MachinesManager', 'ControllersManager', 'ZonesManager',\n    'GeneralManager', 'UsersManager', 'TagsManager', 'DomainsManager',\n    'ManagerHelperService', 'ServicesManager', 'ErrorService',\n    'ValidationService', 'ScriptsManager', 'ResourcePoolsManager', function(\n        $scope, $rootScope, $routeParams, $location, $interval, DevicesManager,\n        MachinesManager, ControllersManager, ZonesManager, GeneralManager,\n        UsersManager, TagsManager, DomainsManager, ManagerHelperService,\n        ServicesManager, ErrorService, ValidationService, ScriptsManager,\n        ResourcePoolsManager) {\n\n        // Mapping of device.ip_assignment to viewable text.\n        var DEVICE_IP_ASSIGNMENT = {\n            external: \"External\",\n            dynamic: \"Dynamic\",\n            \"static\": \"Static\"\n        };\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.MAAS_config = MAAS_config;\n        $scope.loaded = false;\n        $scope.node = null;\n        $scope.action = {\n          option: null,\n          allOptions: null,\n          availableOptions: [],\n          error: null,\n          showing_confirmation: false\n        };\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.osinfo = GeneralManager.getData(\"osinfo\");\n        $scope.section = {\n            area: angular.isString(\n                $routeParams.area) ? $routeParams.area : \"summary\"\n        };\n        $scope.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.commissioningSelection = [];\n        $scope.testSelection = [];\n        $scope.releaseOptions = {};\n        $scope.checkingPower = false;\n        $scope.devices = [];\n        $scope.scripts = ScriptsManager.getItems();\n\n        // Node header section.\n        $scope.header = {\n            editing: false,\n            editing_domain: false,\n            hostname: {\n                value: \"\"\n            },\n            domain: {\n                selected: null,\n                options: DomainsManager.getItems()\n            }\n        };\n\n        // Summary section.\n        $scope.summary = {\n            editing: false,\n            architecture: {\n                selected: null,\n                options: GeneralManager.getData(\"architectures\")\n            },\n            min_hwe_kernel: {\n                selected: null,\n                options: GeneralManager.getData(\"min_hwe_kernels\")\n            },\n            zone: {\n                selected: null,\n                options: ZonesManager.getItems()\n            },\n            pool: {\n                selected: null,\n                options: ResourcePoolsManager.getItems()\n            },\n            tags: []\n        };\n\n        // Service monitor section (for controllers).\n        $scope.services = {};\n\n        // Power section.\n        $scope.power = {\n            editing: false,\n            type: null,\n            bmc_node_count: 0,\n            parameters: {},\n            in_pod: false\n        };\n\n        // Get the display text for device ip assignment type.\n        $scope.getDeviceIPAssignment = function(ipAssignment) {\n            return DEVICE_IP_ASSIGNMENT[ipAssignment];\n        };\n\n        // Events section.\n        $scope.events = {\n            limit: 10\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            if($scope.node && $scope.node.fqdn) {\n                $rootScope.title = $scope.node.fqdn;\n            }\n        }\n\n        function updateHeader() {\n            // Don't update the value if in editing mode. As this would\n            // overwrite the users changes.\n            if($scope.header.editing || $scope.header.editing_domain) {\n                return;\n            }\n            $scope.header.hostname.value = $scope.node.fqdn;\n            // DomainsManager gives us all Domain information while the node\n            // only contains the name and id. Because of this we need to loop\n            // through the DomainsManager options and find the option with the\n            // id matching the node id. Otherwise we end up setting our\n            // selected field to an option not from DomainsManager which\n            // doesn't work.\n            var i;\n            for(i=0;i<$scope.header.domain.options.length;i++) {\n                var option = $scope.header.domain.options[i];\n                if(option.id === $scope.node.domain.id) {\n                    $scope.header.domain.selected = option;\n                    break;\n                }\n            }\n        }\n\n        // Update the available action options for the node.\n        function updateAvailableActionOptions() {\n            if(!angular.isObject($scope.node)) {\n                return;\n            }\n            var actionTypeForNodeType = {\n                0: \"machine_actions\",\n                1: \"device_actions\",\n                2: \"rack_controller_actions\",\n                3: \"region_controller_actions\",\n                4: \"region_and_rack_controller_actions\"\n            };\n            if(GeneralManager.isDataLoaded(\n                    actionTypeForNodeType[$scope.node.node_type])) {\n                // Build the available action options control from the\n                // allowed actions, except set-zone which does not make\n                // sense in this view because the form has this\n                // functionality\n                $scope.action.allOptions = GeneralManager.getData(\n                    actionTypeForNodeType[$scope.node.node_type]);\n                $scope.action.availableOptions.length = 0;\n                angular.forEach($scope.action.allOptions, function(option) {\n                    if($scope.node.actions.indexOf(option.name) >= 0\n                       && option.name !== \"set-zone\"\n                       && option.name !== \"set-pool\") {\n                        $scope.action.availableOptions.push(option);\n                    }\n                });\n            } else {\n                // The GeneralManager only loads data requested on load. This\n                // isn't called until after load as its triggered on the loaded\n                // node's actions. If the node's action list isn't loaded load\n                // it then update the available options.\n                var self = updateAvailableActionOptions;\n                GeneralManager.loadItems(\n                    [actionTypeForNodeType[$scope.node.node_type]]).then(\n                    updateAvailableActionOptions);\n            }\n        }\n\n        // Updates the currently selected items in the power section.\n        function updatePower() {\n            // Do not update the selected items, when editing this would\n            // cause the users selection to change.\n            if($scope.power.editing) {\n                return;\n            }\n\n            var i;\n            $scope.power.type = null;\n            for(i = 0; i < $scope.power_types.length; i++) {\n                if($scope.node.power_type === $scope.power_types[i].name) {\n                    $scope.power.type = $scope.power_types[i];\n                    break;\n                }\n            }\n\n            $scope.power.bmc_node_count = $scope.node.power_bmc_node_count;\n\n            $scope.power.parameters = angular.copy(\n                $scope.node.power_parameters);\n            if(!angular.isObject($scope.power.parameters)) {\n                $scope.power.parameters = {};\n            }\n\n            // Force editing mode on, if the power_type is missing for a\n            // machine. This is placed at the bottom because we wanted the\n            // selected items to be filled in at least once.\n            if($scope.canEdit() && $scope.node.power_type === \"\" &&\n               $scope.node.node_type === 0) {\n                $scope.power.editing = true;\n            }\n\n            $scope.power.in_pod = angular.isDefined($scope.node.pod);\n        }\n\n        // Updates the currently selected items in the summary section.\n        function updateSummary() {\n            // Do not update the selected items, when editing this would\n            // cause the users selection to change.\n            if($scope.summary.editing) {\n                return;\n            }\n\n            if(angular.isObject($scope.node.zone)) {\n                $scope.summary.zone.selected = ZonesManager.getItemFromList(\n                    $scope.node.zone.id);\n            }\n            if(angular.isObject($scope.node.pool)) {\n                $scope.summary.pool.selected = (\n                    ResourcePoolsManager.getItemFromList($scope.node.pool.id));\n            }\n            $scope.summary.architecture.selected = $scope.node.architecture;\n            $scope.summary.min_hwe_kernel.selected = $scope.node.min_hwe_kernel;\n            $scope.summary.tags = angular.copy($scope.node.tags);\n\n            // Force editing mode on, if the architecture is invalid. This is\n            // placed at the bottom because we wanted the selected items to\n            // be filled in at least once.\n            if($scope.canEdit() &&\n                $scope.hasUsableArchitectures() &&\n                $scope.hasInvalidArchitecture()) {\n                $scope.summary.editing = true;\n            }\n        }\n\n        // Updates the service monitor section.\n        function updateServices() {\n            if($scope.isController) {\n                $scope.services = {};\n                angular.forEach(ControllersManager.getServices(\n                        $scope.node), function(service) {\n                    $scope.services[service.name] = service;\n                });\n            }\n        }\n\n        // Update the devices array on the scope based on the device children\n        // on the node.\n        function updateDevices() {\n            $scope.devices = [];\n            angular.forEach($scope.node.devices, function(child) {\n                var device = {\n                    name: child.fqdn\n                };\n\n                // Add the interfaces to the device object if any exists.\n                if(angular.isArray(child.interfaces) &&\n                    child.interfaces.length > 0) {\n                    angular.forEach(child.interfaces, function(nic, nicIdx) {\n                        var deviceWithMAC = angular.copy(device);\n                        deviceWithMAC.mac_address = nic.mac_address;\n\n                        // Remove device name so it is not duplicated in the\n                        // table since this is another MAC address on this\n                        // device.\n                        if(nicIdx > 0) {\n                            deviceWithMAC.name = \"\";\n                        }\n\n                        // Add this links to the device object if any exists.\n                        if(angular.isArray(nic.links) &&\n                            nic.links.length > 0) {\n                            angular.forEach(nic.links, function(link, lIdx) {\n                                var deviceWithLink = angular.copy(\n                                    deviceWithMAC);\n                                deviceWithLink.ip_address = link.ip_address;\n\n                                // Remove the MAC address so it is not\n                                // duplicated in the table since this is\n                                // another link on this interface.\n                                if(lIdx > 0) {\n                                    deviceWithLink.mac_address = \"\";\n                                }\n\n                                $scope.devices.push(deviceWithLink);\n                            });\n                        } else {\n                            $scope.devices.push(deviceWithMAC);\n                        }\n                    });\n                } else {\n                    $scope.devices.push(device);\n                }\n            });\n        }\n\n        // Starts the watchers on the scope.\n        function startWatching() {\n            // Update the title and name when the node fqdn changes.\n            $scope.$watch(\"node.fqdn\", function() {\n                updateTitle();\n                updateHeader();\n            });\n\n            // Update the devices on the node.\n            $scope.$watch(\"node.devices\", updateDevices);\n\n            // Update the availableActionOptions when the node actions change.\n            $scope.$watch(\"node.actions\", updateAvailableActionOptions);\n\n            // Update the summary when the node or architectures list is\n            // updated.\n            $scope.$watch(\"node.architecture\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.architecture.options, updateSummary);\n\n            // Uppdate the summary when min_hwe_kernel is updated.\n            $scope.$watch(\"node.min_hwe_kernel\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.min_hwe_kernel.options, updateSummary);\n\n            // Update the summary when the node or zone list is\n            // updated.\n            $scope.$watch(\"node.zone.id\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.zone.options, updateSummary);\n\n            // Update the summary when the node or the resouce pool list is\n            // updated.\n            $scope.$watch(\"node.pool.id\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.pool.options, updateSummary);\n\n            // Update the power when the node power_type or power_parameters\n            // are updated.\n            $scope.$watch(\"node.power_type\", updatePower);\n            $scope.$watch(\"node.power_parameters\", updatePower);\n            $scope.$watchCollection(\"power_types\", updatePower);\n\n            // Update the services when the services list is updated.\n            $scope.$watch(\"node.service_ids\", updateServices);\n        }\n\n        // Called when the node has been loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            updateTitle();\n            updateSummary();\n            updateServices();\n            startWatching();\n\n            // Tell the storageController and networkingController that the\n            // node has been loaded.\n            if(angular.isObject($scope.storageController)) {\n                $scope.storageController.nodeLoaded();\n            }\n            if(angular.isObject($scope.networkingController)) {\n                $scope.networkingController.nodeLoaded();\n            }\n        }\n\n        // Update the node with new data on the region.\n        $scope.updateNode = function(node, queryPower) {\n            if(angular.isUndefined(queryPower)) {\n                queryPower = false;\n            }\n            return $scope.nodesManager.updateItem(node).then(function(node) {\n                updateHeader();\n                updateSummary();\n                if(queryPower) {\n                    $scope.checkPowerState();\n                }\n            }, function(error) {\n                console.log(error);\n                updateHeader();\n                updateSummary();\n            });\n        };\n\n        // Called for autocomplete when the user is typing a tag name.\n        $scope.tagsAutocomplete = function(query) {\n            return TagsManager.autocomplete(query);\n        };\n\n        $scope.getPowerStateClass = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return \"\";\n            }\n\n            if($scope.checkingPower) {\n                return \"checking\";\n            } else {\n                return $scope.node.power_state;\n            }\n        };\n\n        // Get the power state text to show.\n        $scope.getPowerStateText = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return \"\";\n            }\n\n            if($scope.checkingPower) {\n                return \"Checking power\";\n            } else if($scope.node.power_state === \"unknown\") {\n                return \"\";\n            } else {\n                return \"Power \" + $scope.node.power_state;\n            }\n        };\n\n        // Returns true when the \"check now\" button for updating the power\n        // state should be shown.\n        $scope.canCheckPowerState = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return false. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n            return (\n                $scope.node.power_state !== \"unknown\" &&\n                !$scope.checkingPower);\n        };\n\n        // Check the power state of the node.\n        $scope.checkPowerState = function() {\n            $scope.checkingPower = true;\n            $scope.nodesManager.checkPowerState($scope.node).then(function() {\n                $scope.checkingPower = false;\n            });\n        };\n\n        $scope.isUbuntuOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"ubuntu\") {\n                return true;\n            }\n            return false;\n        };\n\n        $scope.isUbuntuCoreOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"ubuntu-core\") {\n                return true;\n            }\n            return false;\n        };\n\n        $scope.isCustomOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"custom\") {\n                return true;\n            }\n            return false;\n        };\n\n        // Return true if there is an action error.\n        $scope.isActionError = function() {\n            return $scope.action.error !== null;\n        };\n\n        // Return True if in deploy action and the osinfo is missing.\n        $scope.isDeployError = function() {\n            // Never a deploy error when there is an action error.\n            if($scope.isActionError()) {\n                return false;\n            }\n\n            var missing_osinfo = (\n                angular.isUndefined($scope.osinfo.osystems) ||\n                $scope.osinfo.osystems.length === 0);\n            if(angular.isObject($scope.action.option) &&\n                $scope.action.option.name === \"deploy\" &&\n                missing_osinfo) {\n                return true;\n            }\n            return false;\n        };\n\n        // Return True if unable to deploy because of missing ssh keys.\n        $scope.isSSHKeyError = function() {\n            // Never a deploy error when there is an action error.\n            if($scope.isActionError()) {\n                return false;\n            }\n            if(angular.isObject($scope.action.option) &&\n                $scope.action.option.name === \"deploy\" &&\n                UsersManager.getSSHKeyCount() === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Called when the actionOption has changed.\n        $scope.action.optionChanged = function() {\n            // Clear the action error.\n            $scope.action.error = null;\n            $scope.action.showing_confirmation = false;\n        };\n\n        // Cancel the action.\n        $scope.actionCancel = function() {\n            $scope.action.option = null;\n            $scope.action.error = null;\n            $scope.action.showing_confirmation = false;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            var extra = {};\n            var i;\n            // Set deploy parameters if a deploy.\n            if($scope.action.option.name === \"deploy\" &&\n                angular.isString($scope.osSelection.osystem) &&\n                angular.isString($scope.osSelection.release)) {\n\n                // Set extra. UI side the release is structured os/release, but\n                // when it is sent over the websocket only the \"release\" is\n                // sent.\n                extra.osystem = $scope.osSelection.osystem;\n                var release = $scope.osSelection.release;\n                release = release.split(\"/\");\n                release = release[release.length-1];\n                extra.distro_series = release;\n                // hwe_kernel is optional so only include it if its specified\n                if(angular.isString($scope.osSelection.hwe_kernel) &&\n                   ($scope.osSelection.hwe_kernel.indexOf('hwe-') >= 0 ||\n                    $scope.osSelection.hwe_kernel.indexOf('ga-') >= 0)) {\n                    extra.hwe_kernel = $scope.osSelection.hwe_kernel;\n                }\n            } else if($scope.action.option.name === \"commission\") {\n                extra.enable_ssh = $scope.commissionOptions.enableSSH;\n                extra.skip_networking = (\n                    $scope.commissionOptions.skipNetworking);\n                extra.skip_storage = $scope.commissionOptions.skipStorage;\n                extra.commissioning_scripts = [];\n                for(i=0;i<$scope.commissioningSelection.length;i++) {\n                    extra.commissioning_scripts.push(\n                        $scope.commissioningSelection[i].id);\n                }\n                if($scope.commissionOptions.updateFirmware) {\n                    extra.commissioning_scripts.push('update_firmware')\n                }\n                if($scope.commissionOptions.configureHBA) {\n                    extra.commissioning_scripts.push('configure_hba')\n                }\n                if(extra.commissioning_scripts.length === 0) {\n                    // Tell the region not to run any custom commissioning\n                    // scripts.\n                    extra.commissioning_scripts.push('none');\n                }\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.testSelection.length;i++) {\n                    extra.testing_scripts.push($scope.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.action.option.name === \"test\") {\n                if($scope.node.status_code === 6 &&\n                        !$scope.action.showing_confirmation) {\n                    $scope.action.showing_confirmation = true;\n                    return;\n                }\n                // Set the test options.\n                extra.enable_ssh = $scope.commissionOptions.enableSSH;\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.testSelection.length;i++) {\n                    extra.testing_scripts.push($scope.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.action.option.name === \"release\") {\n                // Set the release options.\n                extra.erase = $scope.releaseOptions.erase;\n                extra.secure_erase = $scope.releaseOptions.secureErase;\n                extra.quick_erase = $scope.releaseOptions.quickErase;\n            }\n\n            $scope.nodesManager.performAction(\n                $scope.node, $scope.action.option.name, extra).then(function() {\n                    // If the action was delete, then go back to listing.\n                    if($scope.action.option.name === \"delete\") {\n                        $location.path(\"/machines\");\n                    }\n                    $scope.action.option = null;\n                    $scope.action.error = null;\n                    $scope.action.showing_confirmation = false;\n                    $scope.osSelection.$reset();\n                    $scope.commissionOptions.enableSSH = false;\n                    $scope.commissionOptions.skipNetworking = false;\n                    $scope.commissionOptions.skipStorage = false;\n                    $scope.commissionOptions.updateFirmware = false;\n                    $scope.commissionOptions.configureHBA = false;\n                    $scope.commissioningSelection = [];\n                    $scope.testSelection = [];\n                }, function(error) {\n                    $scope.action.error = error;\n                });\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if their are usable architectures.\n        $scope.hasUsableArchitectures = function() {\n            return $scope.summary.architecture.options.length > 0;\n        };\n\n        // Return the placeholder text for the architecture dropdown.\n        $scope.getArchitecturePlaceholder = function() {\n            if($scope.hasUsableArchitectures()) {\n                return \"Choose an architecture\";\n            } else {\n                return \"-- No usable architectures --\";\n            }\n        };\n\n        // Return true if the saved architecture is invalid.\n        $scope.hasInvalidArchitecture = function() {\n            if(angular.isObject($scope.node)) {\n                return (\n                    !$scope.isDevice && (\n                        $scope.node.architecture === \"\" ||\n                        $scope.summary.architecture.options.indexOf(\n                            $scope.node.architecture) === -1));\n            } else {\n                return false;\n            }\n        };\n\n        // Return true if the current architecture selection is invalid.\n        $scope.invalidArchitecture = function() {\n            return (\n                !$scope.isDevice && !$scope.isController && (\n                    $scope.summary.architecture.selected === \"\" ||\n                    $scope.summary.architecture.options.indexOf(\n                        $scope.summary.architecture.selected) === -1));\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If power_types exist then a rack controller is connected.\n            return $scope.power_types.length > 0;\n        };\n\n        // Return true if the node is locked\n        $scope.isLocked = function() {\n            if ($scope.node === null) {\n                return false;\n            }\n\n            return $scope.node.locked;\n        };\n\n        // Return true when the edit buttons can be clicked.\n        $scope.canEdit = function() {\n            // Devices can be edited, since either the user is a super\n            // user, or he owns the device (since he can't see devices\n            // that he doesn't own).\n            if ($scope.isDevice) {\n                return true;\n            }\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser() &&\n                    ! $scope.isLocked());\n        };\n\n        // Called to edit the domain name.\n        $scope.editHeaderDomain = function() {\n            if($scope.canEdit()) {\n                return;\n            }\n\n            // Do nothing if already editing because we don't want to reset\n            // the current value.\n            if($scope.header.editing_domain) {\n                return;\n            }\n            $scope.header.editing = false;\n            $scope.header.editing_domain = true;\n\n            // Set the value to the hostname, as hostname and domain are edited\n            // using different fields.\n            $scope.header.hostname.value = $scope.node.hostname;\n        };\n\n        // Called to edit the node name.\n        $scope.editHeader = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n\n            // Do nothing if already editing because we don't want to reset\n            // the current value.\n            if($scope.header.editing) {\n                return;\n            }\n            $scope.header.editing = true;\n            $scope.header.editing_domain = false;\n\n            // Set the value to the hostname, as hostname and domain are edited\n            // using different fields.\n            $scope.header.hostname.value = $scope.node.hostname;\n        };\n\n        // Return true when the hostname or domain in the header is invalid.\n        $scope.editHeaderInvalid = function() {\n            // Not invalid unless editing.\n            if(!$scope.header.editing && !$scope.header.editing_domain) {\n                return false;\n            }\n\n            // The value cannot be blank.\n            var value = $scope.header.hostname.value;\n            if(value.length === 0) {\n                return true;\n            }\n            return !ValidationService.validateHostname(value);\n        };\n\n        // Called to cancel editing of the node hostname and domain.\n        $scope.cancelEditHeader = function() {\n            $scope.header.editing = false;\n            $scope.header.editing_domain = false;\n            updateHeader();\n        };\n\n        // Called to save editing of node hostname or domain.\n        $scope.saveEditHeader = function() {\n            // Does nothing if invalid.\n            if($scope.editHeaderInvalid()) {\n                return;\n            }\n            $scope.header.editing = false;\n            $scope.header.editing_domain = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.hostname = $scope.header.hostname.value;\n            node.domain = $scope.header.domain.selected;\n\n            // Update the node.\n            $scope.updateNode(node);\n        };\n\n        // Called to enter edit mode in the summary section.\n        $scope.editSummary = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.summary.editing = true;\n        };\n\n        // Called to cancel editing in the summary section.\n        $scope.cancelEditSummary = function() {\n            // Leave edit mode only if node has valid architecture.\n            if($scope.isDevice || $scope.isController) {\n                $scope.summary.editing = false;\n            } else if(!$scope.hasInvalidArchitecture()) {\n                $scope.summary.editing = false;\n            }\n\n            updateSummary();\n        };\n\n        // Called to save the changes made in the summary section.\n        $scope.saveEditSummary = function() {\n            // Do nothing if invalidArchitecture.\n            if($scope.invalidArchitecture()) {\n                return;\n            }\n\n            $scope.summary.editing = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.zone = angular.copy($scope.summary.zone.selected);\n            node.pool = angular.copy($scope.summary.pool.selected);\n            node.architecture = $scope.summary.architecture.selected;\n            if($scope.summary.min_hwe_kernel.selected === null) {\n                node.min_hwe_kernel = \"\";\n            } else {\n                node.min_hwe_kernel = $scope.summary.min_hwe_kernel.selected;\n            }\n            node.tags = [];\n            angular.forEach($scope.summary.tags, function(tag) {\n                node.tags.push(tag.text);\n            });\n\n            // Update the node.\n            $scope.updateNode(node);\n        };\n\n        // Return true if the current power type selection is invalid.\n        $scope.invalidPowerType = function() {\n            return !angular.isObject($scope.power.type);\n        };\n\n        // Called to enter edit mode in the power section.\n        $scope.editPower = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.power.editing = true;\n        };\n\n        // Called to cancel editing in the power section.\n        $scope.cancelEditPower = function() {\n            // If the node is not a machine, only leave edit mode if node has\n            // valid power type.\n            if ($scope.node.node_type !== 0 || $scope.node.power_type !== \"\") {\n                $scope.power.editing = false;\n            }\n            updatePower();\n        };\n\n        // Called to save the changes made in the power section.\n        $scope.saveEditPower = function() {\n            // Does nothing if invalid power type.\n            if($scope.invalidPowerType()) {\n                return;\n            }\n            $scope.power.editing = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.power_type = $scope.power.type.name;\n            node.power_parameters = angular.copy($scope.power.parameters);\n\n            // Update the node.\n            $scope.updateNode(node, true);\n        };\n\n        // Return true if the \"load more\" events button should be available.\n        $scope.allowShowMoreEvents = function() {\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n            if(!angular.isArray($scope.node.events)) {\n                return false;\n            }\n            return (\n                $scope.node.events.length > 0 &&\n                $scope.node.events.length > $scope.events.limit &&\n                $scope.events.limit < 50);\n        };\n\n        // Show another 10 events.\n        $scope.showMoreEvents = function() {\n            $scope.events.limit += 10;\n        };\n\n        // Return the nice text for the given event.\n        $scope.getEventText = function(event) {\n            var text = event.type.description;\n            if(angular.isString(event.description) &&\n                event.description.length > 0) {\n                text += \" - \" + event.description;\n            }\n            return text;\n        };\n\n        $scope.getPowerEventError = function() {\n            if(!angular.isObject($scope.node) ||\n                !angular.isArray($scope.node.events)) {\n                return;\n            }\n\n            var i;\n            for(i = 0; i < $scope.node.events.length; i++) {\n                var event = $scope.node.events[i];\n                if(event.type.level === \"warning\" &&\n                   event.type.description === \"Failed to query node's BMC\") {\n                    // Latest power event is an error\n                    return event;\n                } else if(event.type.level === \"info\" &&\n                          event.type.description === \"Queried node's BMC\") {\n                    // Latest power event is not an error\n                    return;\n                }\n            }\n            // No power event found, thus no error\n            return;\n        };\n\n        $scope.hasPowerEventError = function() {\n            var event = $scope.getPowerEventError();\n            return angular.isObject(event);\n        };\n\n        $scope.getPowerEventErrorText = function() {\n            var event = $scope.getPowerEventError();\n            if(angular.isObject(event)) {\n                // Return text\n                return event.description;\n            } else {\n                return \"\";\n            }\n        };\n\n        // true if power error prevents the provided action\n        $scope.hasActionPowerError = function(actionName) {\n            if(!$scope.hasPowerError()) {\n                return false; // no error, no need to check state\n            }\n            // these states attempt to manipulate power\n            var powerChangingStates = [\n                'commission',\n                'deploy',\n                'on',\n                'off',\n                'release'\n            ];\n            if(actionName && powerChangingStates.indexOf(actionName) > -1) {\n                return true;\n            }\n            return false;\n        };\n\n        // Check to see if the power type has any missing system packages.\n        $scope.hasPowerError = function() {\n            if(angular.isObject($scope.power.type)) {\n                return $scope.power.type.missing_packages.length > 0;\n            } else {\n                return false;\n            }\n        };\n\n        // Returns a formatted string of missing system packages.\n        $scope.getPowerErrors = function() {\n            var i;\n            var result = \"\";\n            if(angular.isObject($scope.power.type)) {\n                var packages = $scope.power.type.missing_packages;\n                packages.sort();\n                for(i = 0; i < packages.length; i++) {\n                    result += packages[i];\n                    if(i+2 < packages.length) {\n                        result += \", \";\n                    }\n                    else if(i+1 < packages.length) {\n                        result += \" and \";\n                    }\n                }\n                result += packages.length > 1 ? \" packages\" : \" package\";\n            }\n            return result;\n        };\n\n        // Return the class to apply to the service.\n        $scope.getServiceClass = function(service) {\n            if(!angular.isObject(service)) {\n                return \"none\";\n            } else {\n                if(service.status === \"running\") {\n                    return \"success\";\n                } else if(service.status === \"dead\") {\n                    return \"error\";\n                } else if(service.status === \"degraded\") {\n                    return \"warning\";\n                } else {\n                    return \"none\";\n                }\n            }\n        };\n\n        $scope.hasCustomCommissioningScripts = function() {\n            var i;\n            for(i=0;i<$scope.scripts.length;i++) {\n                if($scope.scripts[i].script_type === 0) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Called by the children controllers to let the parent know.\n        $scope.controllerLoaded = function(name, scope) {\n            $scope[name] = scope;\n            if(angular.isObject(scope.node)) {\n              scope.nodeLoaded();\n            }\n        };\n\n        // Only show a warning that tests have failed if there are failed tests\n        // and the node isn't currently commissioning or testing.\n        $scope.showFailedTestWarning = function() {\n            // Devices can't have failed tests and don't have status_code\n            // defined.\n            if($scope.node.node_type === 1 || !$scope.node.status_code) {\n                return false;\n            }\n            switch($scope.node.status_code) {\n                // NEW\n                case 0:\n                // COMMISSIONING\n                case 1:\n                // FAILED_COMMISSIONING\n                case 2:\n                // TESTING\n                case 21:\n                // FAILED_TESTING\n                case 22:\n                    return false;\n            }\n            switch($scope.node.testing_status) {\n                // Tests havn't been run\n                case -1:\n                // Tests have passed\n                case 2:\n                    return false;\n            }\n            return true;\n        };\n\n        // Get the subtext for the CPU card. Only nodes commissioned after\n        // MAAS 2.4 will have the CPU speed.\n        $scope.getCPUSubtext = function() {\n            var label = $scope.node.cpu_count + \" cores\";\n            if(!$scope.node.cpu_speed || $scope.node.cpu_speed === 0) {\n                return label;\n            } else if($scope.node.cpu_speed < 1000) {\n                return label + \" @ \" + $scope.node.cpu_speed + \" Mhz\";\n            } else {\n                return label + \" @ \" + ($scope.node.cpu_speed / 1000) + \" Ghz\";\n            }\n        }\n\n        // Reload osinfo when the page reloads\n        $scope.$on(\"$routeUpdate\", function () {\n            GeneralManager.loadItems(\n                [\"osinfo\", \"architectures\", \"min_hwe_kernels\"]);\n        });\n\n        var page_managers;\n        if($location.path().indexOf('/controller') !== -1) {\n            $scope.nodesManager = ControllersManager;\n            page_managers = [ControllersManager, ScriptsManager];\n            $scope.isController = true;\n            $scope.isDevice = false;\n            $scope.type_name = 'controller';\n            $scope.type_name_title = 'Controller';\n            $rootScope.page = 'controllers';\n        } else if($location.path().indexOf('/device') !== -1) {\n            $scope.nodesManager = DevicesManager;\n            page_managers = [DevicesManager];\n            $scope.isController = false;\n            $scope.isDevice = true;\n            $scope.type_name = 'device';\n            $scope.type_name_title = 'Device';\n            $rootScope.page = 'devices';\n        } else {\n            $scope.nodesManager = MachinesManager;\n            page_managers = [MachinesManager, ScriptsManager];\n            $scope.isController = false;\n            $scope.isDevice = false;\n            $scope.type_name = 'machine';\n            $scope.type_name_title = 'Machine';\n            $rootScope.page = 'machines';\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            ZonesManager,\n            GeneralManager,\n            UsersManager,\n            TagsManager,\n            DomainsManager,\n            ServicesManager,\n            ResourcePoolsManager,\n        ].concat(page_managers)).then(function() {\n            // Possibly redirected from another controller that already had\n            // this node set to active. Only call setActiveItem if not already\n            // the activeItem.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n                activeNode = $scope.nodesManager.getActiveItem();\n            }\n            if($scope.isDevice) {\n                $scope.ip_assignment = activeNode.ip_assignment;\n            }\n        });\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Networking Controller\n */\n\n// Filter that is specific to the NodeNetworkingController. Filters the\n// list of VLANs to be only those that are unused by the interface.\nangular.module('MAAS').filter('filterByUnusedForInterface', function() {\n    return function(vlans, nic, originalInterfaces) {\n        var filtered = [];\n        if(!angular.isObject(nic) ||\n            !angular.isObject(originalInterfaces)) {\n            return filtered;\n        }\n        var usedVLANs = [];\n        angular.forEach(originalInterfaces, function(inter) {\n            if(inter.type === \"vlan\") {\n                var parent = inter.parents[0];\n                if(parent === nic.id) {\n                    usedVLANs.push(inter.vlan_id);\n                }\n            }\n        });\n        angular.forEach(vlans, function(vlan) {\n            var idx = usedVLANs.indexOf(vlan.id);\n            if(idx === -1) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Filters the\n// list of interfaces to not include the current parent interfaces being\n// bonded together.\nangular.module('MAAS').filter('removeInterfaceParents', function() {\n    return function(interfaces, childInterface, skip) {\n        if(skip || !angular.isObject(childInterface) ||\n            !angular.isArray(childInterface.parents)) {\n            return interfaces;\n        }\n        var filtered = [];\n        angular.forEach(interfaces, function(nic) {\n            var i, parent, found = false;\n            for(i = 0; i < childInterface.parents.length; i++) {\n                parent = childInterface.parents[i];\n                if(parent.id === nic.id && parent.link_id === nic.link_id) {\n                    found = true;\n                    break;\n                }\n            }\n            if(!found) {\n                filtered.push(nic);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Remove the default\n// VLAN if the interface is a VLAN interface.\nangular.module('MAAS').filter('removeDefaultVLANIfVLAN', function() {\n    return function(vlans, interfaceType) {\n        if(!angular.isString(interfaceType)) {\n            return vlans;\n        }\n        var filtered = [];\n        angular.forEach(vlans, function(vlan) {\n            if(interfaceType !== \"vlan\") {\n                filtered.push(vlan);\n            } else if(vlan.vid !== 0) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Only provide the\n// available modes for that interface type.\nangular.module('MAAS').filter('filterLinkModes', function() {\n    return function(modes, nic) {\n        if(!angular.isObject(nic)) {\n            return modes;\n        }\n        var filtered = [];\n\n        // If this is not a $maasForm, make it work like one.\n        // We need to use getValue() to access attributes, because each\n        // type of maas-obj-form gets to define how values come out.\n        if(!angular.isFunction(nic.getValue)) {\n            nic.getValue = function(name) {\n                return this[name];\n            };\n        }\n\n        if(!angular.isObject(nic.getValue('subnet'))) {\n            // No subnet is configure so the only allowed mode\n            // is 'link_up'.\n            angular.forEach(modes, function(mode) {\n                if(mode.mode === \"link_up\") {\n                    filtered.push(mode);\n                }\n            });\n        } else {\n            // Don't add LINK_UP if more than one link exists or\n            // if the interface is an alias.\n            var links = nic.getValue('links');\n            var nicType = nic.getValue('type');\n            var allowLinkUp = (\n                (angular.isObject(links) && links.length > 1) ||\n                (nicType === \"alias\"));\n            angular.forEach(modes, function(mode) {\n                if(allowLinkUp && mode.mode === \"link_up\") {\n                    return;\n                }\n                // Can't run DHCP twice on one NIC.\n                if(nicType === \"alias\" && mode.mode === \"dhcp\") {\n                    return;\n                }\n                filtered.push(mode);\n            });\n        }\n        return filtered;\n    };\n});\n\n\nangular.module('MAAS').controller('NodeNetworkingController', [\n    '$scope', '$filter', 'FabricsManager', 'VLANsManager', 'SubnetsManager',\n    'MachinesManager', 'ControllersManager', 'DevicesManager',\n    'GeneralManager', 'UsersManager',\n    'ManagerHelperService', 'ValidationService', 'JSONService',\n    function(\n        $scope, $filter, FabricsManager, VLANsManager, SubnetsManager,\n        MachinesManager, ControllersManager, DevicesManager,\n        GeneralManager, UsersManager,\n        ManagerHelperService, ValidationService, JSONService) {\n\n        // Different interface types.\n        var INTERFACE_TYPE = {\n            PHYSICAL: \"physical\",\n            BOND: \"bond\",\n            BRIDGE: \"bridge\",\n            VLAN: \"vlan\",\n            ALIAS: \"alias\"\n        };\n        var INTERFACE_TYPE_TEXTS = {\n            \"physical\": \"Physical\",\n            \"bond\": \"Bond\",\n            \"bridge\": \"Bridge\",\n            \"vlan\": \"VLAN\",\n            \"alias\": \"Alias\"\n        };\n\n        // Different link modes for an interface.\n        var LINK_MODE = {\n            AUTO: \"auto\",\n            STATIC: \"static\",\n            DHCP: \"dhcp\",\n            LINK_UP: \"link_up\"\n        };\n        var LINK_MODE_TEXTS = {\n            \"auto\": \"Auto assign\",\n            \"static\": \"Static assign\",\n            \"dhcp\": \"DHCP\",\n            \"link_up\": \"Unconfigured\"\n        };\n\n        // Different selection modes.\n        var SELECTION_MODE = {\n            NONE: null,\n            SINGLE: \"single\",\n            MULTI: \"multi\",\n            DELETE: \"delete\",\n            ADD: \"add\",\n            CREATE_BOND: \"create-bond\",\n            CREATE_BRIDGE: \"create-bridge\",\n            CREATE_PHYSICAL: \"create-physical\",\n            EDIT: \"edit\"\n        };\n\n        var IP_ASSIGNMENT = {\n            DYNAMIC: \"dynamic\",\n            EXTERNAL: \"external\",\n            STATIC: \"static\"\n        };\n\n        // Device ip assignment options.\n        $scope.ipAssignments = [\n            {\n                name: IP_ASSIGNMENT.EXTERNAL,\n                text: \"External\"\n            },\n            {\n                name: IP_ASSIGNMENT.DYNAMIC,\n                text: \"Dynamic\"\n            },\n            {\n                name: IP_ASSIGNMENT.STATIC,\n                text: \"Static\"\n            }\n        ];\n\n        // Set the initial values for this scope.\n        $scope.loaded = false;\n        $scope.nodeHasLoaded = false;\n        $scope.managersHaveLoaded = false;\n        $scope.tableInfo = {column: 'name'};\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.vlans = VLANsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.interfaces = [];\n        $scope.interfaceLinksMap = {};\n        $scope.interfaceErrorsByLinkId = {};\n        $scope.originalInterfaces = {};\n        $scope.selectedInterfaces = [];\n        $scope.selectedMode = null;\n        $scope.newInterface = {};\n        $scope.newBondInterface = {};\n        $scope.newBridgeInterface = {};\n        $scope.editInterface = null;\n        $scope.bondOptions = GeneralManager.getData(\"bond_options\");\n        $scope.modes = [\n            {\n                mode: LINK_MODE.AUTO,\n                text: LINK_MODE_TEXTS[LINK_MODE.AUTO]\n            },\n            {\n                mode: LINK_MODE.STATIC,\n                text: LINK_MODE_TEXTS[LINK_MODE.STATIC]\n            },\n            {\n                mode: LINK_MODE.DHCP,\n                text: LINK_MODE_TEXTS[LINK_MODE.DHCP]\n            },\n            {\n                mode: LINK_MODE.LINK_UP,\n                text: LINK_MODE_TEXTS[LINK_MODE.LINK_UP]\n            }\n        ];\n\n        // Sets loaded to true if both the node has been loaded at the\n        // other required managers for this scope have been loaded.\n        function updateLoaded() {\n            $scope.loaded = $scope.nodeHasLoaded && $scope.managersHaveLoaded;\n            if($scope.loaded) {\n                updateInterfaces();\n            }\n        }\n\n        // Update the list of interfaces for the node. For each link on the\n        // interface, the interface is duplicated in the list to make render\n        // in a data-ng-repeat easier.\n        function updateInterfaces() {\n            $scope.originalInterfaces = {};\n            angular.forEach($scope.node.interfaces, function(nic) {\n                $scope.originalInterfaces[nic.id] = nic;\n            });\n\n            var interfaces = [];\n            // vlanTable contains data packaged for the 'Served VLANs' section,\n            // which is essentially Interface LEFT JOIN VLAN LEFT JOIN Subnet.\n            var vlanTable = [];\n            // Keep track of VLAN IDs we've processed.\n            var addedVlans = {};\n\n            angular.forEach($scope.node.interfaces, function(nic) {\n                // When a interface has a child that is a bond or bridge.\n                // Then that interface is not included in the interface list.\n                // Parent interface with a bond or bridge child can only have\n                // one child.\n                if(nic.children.length === 1) {\n                    var child = $scope.originalInterfaces[nic.children[0]];\n                    if(child.type === INTERFACE_TYPE.BOND ||\n                       child.type === INTERFACE_TYPE.BRIDGE) {\n                        // This parent now has a bond or bridge for a child.\n                        // If this was the editInterface, then it needs to be\n                        // unset. We only need to check the \"id\" (not\n                        // the \"link_id\"), because if this interface did have\n                        // aliases they have now been removed.\n                        if(angular.isObject($scope.editInterface) &&\n                            $scope.editInterface.id === nic.id) {\n                            $scope.editInterface = null;\n                            $scope.selectedMode = SELECTION_MODE.NONE;\n                        }\n                        return;\n                    }\n                }\n\n                // When the interface is a bond or a bridge, place the children\n                // as members for that interface.\n                if(nic.type === INTERFACE_TYPE.BOND ||\n                   nic.type === INTERFACE_TYPE.BRIDGE) {\n                    nic.members = [];\n                    angular.forEach(nic.parents, function(parent) {\n                        nic.members.push(\n                            angular.copy($scope.originalInterfaces[parent]));\n                    });\n                }\n\n                // Format the tags when they have not already been formatted.\n                if(angular.isArray(nic.tags) &&\n                    nic.tags.length > 0 &&\n                    !angular.isString(nic.tags[0].text)) {\n                    nic.tags = formatTags(nic.tags);\n                }\n\n                nic.vlan = VLANsManager.getItemFromList(nic.vlan_id);\n                if(angular.isObject(nic.vlan)) {\n                    nic.fabric = FabricsManager.getItemFromList(\n                            nic.vlan.fabric);\n\n                    // Build the vlanTable for controller detail page.\n                    if ($scope.$parent.isController) {\n                        // Skip duplicate VLANs (by id, they can share names).\n                        if(!(Object.prototype.hasOwnProperty.call(\n                                addedVlans, nic.vlan.id))) {\n                            addedVlans[nic.vlan.id] = true;\n                            var vlanRecord = {\n                                \"fabric\": nic.fabric,\n                                \"vlan\": nic.vlan,\n                                \"subnets\": $filter('filter')(\n                                    $scope.subnets, {vlan:nic.vlan.id}, true),\n                                \"primary_rack\": null,\n                                \"secondary_rack\": null,\n                                \"sort_key\": nic.fabric.name + \"|\" +\n                                    $scope.getVLANText(nic.vlan)\n                            };\n                            if(nic.vlan.primary_rack) {\n                                vlanRecord.primary_rack =\n                                    ControllersManager.getItemFromList(\n                                        nic.vlan.primary_rack);\n                            }\n                            if(nic.vlan.secondary_rack) {\n                                vlanRecord.secondary_rack =\n                                    ControllersManager.getItemFromList(\n                                        nic.vlan.secondary_rack);\n                            }\n                            vlanTable.push(vlanRecord);\n                        }\n                        // Sort the table by (VLANText, fabric.name).\n                        vlanTable.sort(function(a, b) {\n                            return a.sort_key.localeCompare(b.sort_key);\n                        });\n                    }\n                }\n\n                // Update the interface based on its links or duplicate the\n                // interface if it has multiple links.\n                if(nic.links.length === 0) {\n                    // No links on this interface. The interface is either\n                    // disabled or has no links (which means the interface\n                    // is in LINK_UP mode).\n                    nic.link_id = -1;\n                    nic.subnet = null;\n                    nic.mode = LINK_MODE.LINK_UP;\n                    nic.ip_address = \"\";\n                    interfaces.push(nic);\n                } else {\n                    var idx = 0;\n                    angular.forEach(nic.links, function(link) {\n                        var nic_copy = angular.copy(nic);\n                        nic_copy.link_id = link.id;\n                        nic_copy.subnet = SubnetsManager.getItemFromList(\n                            link.subnet_id);\n                        nic_copy.mode = link.mode;\n                        nic_copy.ip_address = link.ip_address;\n                        if(angular.isUndefined(nic_copy.ip_address)) {\n                            nic_copy.ip_address = \"\";\n                        }\n                        // We don't want to deep copy the VLAN and fabric\n                        // object so we set those back to the original.\n                        nic_copy.vlan = nic.vlan;\n                        nic_copy.fabric = nic.fabric;\n                        if(idx > 0) {\n                            // Each extra link is an alais on the original\n                            // interface.\n                            nic_copy.type = INTERFACE_TYPE.ALIAS;\n                            nic_copy.name += \":\" + idx;\n                        }\n                        idx++;\n                        interfaces.push(nic_copy);\n                    });\n                }\n            });\n\n            // Update the scopes interfaces.\n            $scope.interfaces = interfaces;\n            $scope.vlanTable = vlanTable;\n\n            // Update the scope interface links mapping.\n            $scope.interfaceLinksMap = {};\n            angular.forEach($scope.interfaces, function(nic) {\n                var linkMaps = $scope.interfaceLinksMap[nic.id];\n                if(angular.isUndefined(linkMaps)) {\n                    linkMaps = {};\n                    $scope.interfaceLinksMap[nic.id] = linkMaps;\n                }\n                linkMaps[nic.link_id] = nic;\n            });\n\n            // Clear the editInterface if it no longer exists in the\n            // interfaceLinksMap.\n            if(angular.isObject($scope.editInterface)) {\n                var links = $scope.interfaceLinksMap[$scope.editInterface.id];\n                if(angular.isUndefined(links)) {\n                    $scope.editInterface = null;\n                    $scope.selectedMode = SELECTION_MODE.NONE;\n                } else {\n                    var link = links[$scope.editInterface.link_id];\n                    if(angular.isUndefined(link)) {\n                        $scope.editInterface = null;\n                        $scope.selectedMode = SELECTION_MODE.NONE;\n                    }\n                }\n            }\n\n            // Update newInterface.parent if it has changed.\n            updateNewInterface();\n        }\n\n        // Return the original link object for the given interface.\n        function mapNICToOriginalLink(nic_id, link_id) {\n            var originalInteface = $scope.originalInterfaces[nic_id];\n            if(angular.isObject(originalInteface)) {\n                var i, link = null;\n                for(i = 0; i < originalInteface.links.length; i++) {\n                    link = originalInteface.links[i];\n                    if(link.id === link_id) {\n                        break;\n                    }\n                }\n                return link;\n            } else {\n                return null;\n            }\n        }\n\n        // Leave single selection mode.\n        function leaveSingleSelectionMode() {\n            if($scope.selectedMode === SELECTION_MODE.SINGLE ||\n                $scope.selectedMode === SELECTION_MODE.ADD ||\n                $scope.selectedMode === SELECTION_MODE.DELETE) {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            }\n        }\n\n        // Update the new interface since the interfaces list has\n        // been reloaded.\n        function updateNewInterface() {\n            if(angular.isObject($scope.newInterface.parent)) {\n                var parentId = $scope.newInterface.parent.id;\n                var linkId = $scope.newInterface.parent.link_id;\n                var links = $scope.interfaceLinksMap[parentId];\n                if(angular.isObject(links)) {\n                    var newParent = links[linkId];\n                    if(angular.isObject(newParent)) {\n                        $scope.newInterface.parent = newParent;\n\n                        var iType = $scope.newInterface.type;\n                        var isAlias = iType === INTERFACE_TYPE.ALIAS;\n                        var isVLAN = iType === INTERFACE_TYPE.VLAN;\n                        var canAddAlias = $scope.canAddAlias(newParent);\n                        var canAddVLAN = $scope.canAddVLAN(newParent);\n                        if(!canAddAlias && !canAddVLAN) {\n                            // Cannot do any adding now.\n                            $scope.newInterface = {};\n                            leaveSingleSelectionMode();\n                        } else {\n                            if(isAlias && !canAddAlias && canAddVLAN) {\n                                $scope.newInterface.type = \"vlan\";\n                                $scope.addTypeChanged();\n                            } else if(isVLAN && !canAddVLAN && canAddAlias) {\n                                $scope.newInterface.type = \"alias\";\n                                $scope.addTypeChanged();\n                            }\n                        }\n                        return;\n                    }\n                }\n\n                // Parent no longer exists. Exit the single selection modes.\n                $scope.newInterface = {};\n                leaveSingleSelectionMode();\n            }\n        }\n\n        // Return the default VLAN for a fabric.\n        function getDefaultVLAN(fabric) {\n            return VLANsManager.getItemFromList(fabric.default_vlan_id);\n        }\n\n        // Return list of unused VLANs for an interface. Also remove the\n        // ignoreVLANs from the returned list.\n        function getUnusedVLANs(nic, ignoreVLANs) {\n            var vlans = $filter('removeDefaultVLAN')($scope.vlans);\n            vlans = $filter('filterByFabric')(vlans, nic.fabric);\n            vlans = $filter('filterByUnusedForInterface')(\n                vlans, nic, $scope.originalInterfaces);\n\n            // Remove the VLAN's that should be ignored when getting the unused\n            // VLANs. This is done to help the selection of the next default.\n            if(angular.isUndefined(ignoreVLANs)) {\n                ignoreVLANs = [];\n            }\n            angular.forEach(ignoreVLANs, function(vlan) {\n                var i;\n                for(i = 0; i < vlans.length; i++) {\n                    if(vlans[i].id === vlan.id) {\n                        vlans.splice(i, 1);\n                        break;\n                    }\n                }\n            });\n            return vlans;\n        }\n\n        // Return the currently selected interface objects.\n        function getSelectedInterfaces() {\n            var interfaces = [];\n            angular.forEach($scope.selectedInterfaces, function(key) {\n                var splitKey = key.split('/');\n                var links = $scope.interfaceLinksMap[splitKey[0]];\n                if(angular.isObject(links)) {\n                    var nic = links[splitKey[1]];\n                    if(angular.isObject(nic)) {\n                        interfaces.push(nic);\n                    }\n                }\n            });\n            return interfaces;\n        }\n\n        // Get the next available name.\n        function getNextName(prefix) {\n            var idx = 0;\n            angular.forEach($scope.originalInterfaces, function(nic) {\n                if(nic.name === prefix + idx) {\n                    idx++;\n                }\n            });\n            return prefix + idx;\n        }\n\n        // Return the tags formatted for ngTagInput.\n        function formatTags(tags) {\n            var formatted = [];\n            angular.forEach(tags, function(tag) {\n                formatted.push({ text: tag });\n            });\n            return formatted;\n        }\n\n        // Called by $parent when the node has been loaded.\n        $scope.nodeLoaded = function() {\n            $scope.$watch(\"node.interfaces\", updateInterfaces);\n            // Watch subnets for the served VLANs section.\n            if ($scope.$parent.isController) {\n                $scope.$watch(\"subnets\", updateInterfaces, true);\n            }\n            $scope.nodeHasLoaded = true;\n            updateLoaded();\n        };\n\n        // Return true if only the name or mac address of an interface can\n        // be edited.\n        $scope.isLimitedEditingAllowed = function(nic) {\n            if (!$scope.isSuperUser()) {\n                // If the user is not the superuser, pretend it's not Ready.\n                return false;\n            }\n            if ($scope.$parent.isController || $scope.$parent.isDevice) {\n                // Controllers and Devices are never in limited mode.\n                return false;\n            }\n            return (\n                angular.isObject($scope.node) &&\n                $scope.node.status === \"Deployed\" &&\n                nic.type !== \"vlan\");\n        };\n\n        // Return true if the networking information cannot be edited.\n        // (it can't be changed when the node is in any state other\n        // than Ready or Broken and the user is not a superuser)\n        $scope.isAllNetworkingDisabled = function() {\n            if (!$scope.isSuperUser() && !$scope.$parent.isDevice) {\n                // If the user is not a superuser and not looking at a\n                // device, disable the networking panel.\n                return true;\n            }\n            if ($scope.$parent.isController || $scope.$parent.isDevice) {\n                // Never disable the full networking panel when its a\n                // Controller or Device.\n                return false;\n            }\n            if (angular.isObject($scope.node) &&\n                    [\"New\", \"Ready\", \"Allocated\", \"Broken\"].indexOf(\n                        $scope.node.status) === -1) {\n                // If a non-controller node is not ready allocated, or broken,\n                // disable networking panel.\n                return true;\n            }\n            // User must be a superuser and the node must be\n            // either ready or broken. Enable it.\n            return false;\n        };\n\n        // Return true if the interface is the boot interface or has a parent\n        // that is the boot interface.\n        $scope.isBootInterface = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            }\n\n            if(nic.is_boot && nic.type !== INTERFACE_TYPE.ALIAS) {\n                return true;\n            } else if(nic.type === INTERFACE_TYPE.BOND ||\n                      nic.type === INTERFACE_TYPE.BRIDGE) {\n                var i;\n                for(i = 0; i < nic.members.length; i++) {\n                    if(nic.members[i].is_boot) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Get the text for the type of the interface.\n        $scope.getInterfaceTypeText = function(nic) {\n            var text = INTERFACE_TYPE_TEXTS[nic.type];\n            if(angular.isDefined(text)) {\n                return text;\n            } else {\n                return nic.type;\n            }\n        };\n\n        // Get the text for the link mode of the interface.\n        $scope.getLinkModeText = function(nic) {\n            var text = LINK_MODE_TEXTS[nic.mode];\n            if(angular.isDefined(text)) {\n                return text;\n            } else {\n                return nic.mode;\n            }\n        };\n\n        // Get the text to display in the VLAN dropdown.\n        $scope.getVLANText = function(vlan) {\n            if(!angular.isObject(vlan)) {\n                return \"\";\n            }\n\n            if(vlan.vid === 0) {\n                return \"untagged\";\n            } else if(angular.isString(vlan.name) && vlan.name.length > 0) {\n                return vlan.vid + \" (\" + vlan.name + \")\";\n            } else {\n                return vlan.vid;\n            }\n        };\n\n        // Get the text to display in the subnet dropdown.\n        $scope.getSubnetText = function(subnet) {\n            if(!angular.isObject(subnet)) {\n                return \"Unconfigured\";\n            } else if(angular.isString(subnet.name) &&\n                subnet.name.length > 0 &&\n                subnet.cidr !== subnet.name) {\n                return subnet.cidr + \" (\" + subnet.name + \")\";\n            } else {\n                return subnet.cidr;\n            }\n        };\n\n        // Get the subnet from its ID.\n        $scope.getSubnet = function(subnetId) {\n            return SubnetsManager.getItemFromList(subnetId);\n        };\n\n        // Return True if the interface name that the user typed is invalid.\n        $scope.isInterfaceNameInvalid = function(nic) {\n            if(!angular.isObject(nic) || !nic.hasOwnProperty('name') ||\n                    nic.name.length === 0) {\n                return true;\n            } else if(angular.isArray($scope.node.interfaces)) {\n                var i;\n                for(i = 0; i < $scope.node.interfaces.length; i++) {\n                    var otherNic = $scope.node.interfaces[i];\n                    if(otherNic.name === nic.name && otherNic.id !== nic.id) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return True if the link mode select should be disabled.\n        $scope.isLinkModeDisabled = function(nic) {\n            // This is only disabled when a subnet has not been selected.\n            if(angular.isFunction(nic.getValue)) {\n                return !angular.isObject(nic.getValue('subnet'));\n            } else {\n                return !angular.isObject(nic.subnet);\n            }\n        };\n\n        // Return the interface errors.\n        $scope.getInterfaceError = function(nic) {\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                return $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            return null;\n        };\n\n        // Return True if the interface IP address that the user typed is\n        // invalid.\n        $scope.isIPAddressInvalid = function(nic) {\n            if(angular.isString(nic.ip_address) && nic.mode === 'static') {\n                return (\n                    !ValidationService.validateIP(nic.ip_address) ||\n                    !ValidationService.validateIPInNetwork(\n                        nic.ip_address, nic.subnet.cidr));\n            } else {\n                return false;\n            }\n        };\n\n        // Return unique key for the interface.\n        $scope.getUniqueKey = function(nic) {\n            return nic.id + \"/\" + nic.link_id;\n        };\n\n        // Toggle selection of the interface.\n        $scope.toggleInterfaceSelect = function(nic) {\n            var key = $scope.getUniqueKey(nic);\n            var idx = $scope.selectedInterfaces.indexOf(key);\n            if(idx > -1) {\n                $scope.selectedInterfaces.splice(idx, 1);\n            } else {\n                $scope.selectedInterfaces.push(key);\n            }\n\n            if($scope.selectedInterfaces.length > 1) {\n                if($scope.selectedMode !== SELECTION_MODE.BOND) {\n                    $scope.selectedMode = SELECTION_MODE.MULTI;\n                }\n            } else if($scope.selectedInterfaces.length === 1) {\n                $scope.selectedMode = SELECTION_MODE.SINGLE;\n            } else {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            }\n        };\n\n        // Return true when the interface is selected.\n        $scope.isInterfaceSelected = function(nic) {\n            return $scope.selectedInterfaces.indexOf(\n                $scope.getUniqueKey(nic)) > -1;\n        };\n\n        // Returns true if the interface is not selected\n        $scope.cannotEditInterface = function(nic) {\n            if ($scope.selectedMode === SELECTION_MODE.NONE) {\n                return false;\n            } else if (\n                  $scope.selectedMode !== SELECTION_MODE.MULTI &&\n                  $scope.isInterfaceSelected(nic)) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return true if in editing mode for the interface.\n        $scope.isEditing = function(nic) {\n            if($scope.selectedMode !== SELECTION_MODE.EDIT) {\n                return false;\n            } else {\n                return $scope.editInterface.id === nic.id;\n            }\n        };\n\n        // Start editing this interface.\n        $scope.edit = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            $scope.selectedMode = SELECTION_MODE.EDIT;\n            if($scope.$parent.isDevice) {\n                $scope.editInterface = {\n                    id: nic.id,\n                    name: nic.name,\n                    mac_address: nic.mac_address,\n                    tags: nic.tags.map(function(tag) { return tag.text; }),\n                    subnet: nic.subnet,\n                    ip_address: nic.ip_address,\n                    ip_assignment: nic.ip_assignment,\n                    link_id: nic.link_id\n                };\n                if(nic.subnet !== undefined && nic.subnet !== null) {\n                    $scope.editInterface.defaultSubnet = nic.subnet;\n                } else {\n                    $scope.editInterface.defaultSubnet = $scope.subnets[0];\n                }\n            } else {\n                $scope.editInterface = {\n                    id: nic.id,\n                    name: nic.name,\n                    mac_address: nic.mac_address,\n                    tags: nic.tags.map(function(tag) { return tag.text; }),\n                    fabric: nic.fabric,\n                    vlan: nic.vlan,\n                    subnet: nic.subnet,\n                    mode: nic.mode,\n                    ip_address: nic.ip_address,\n                    link_id: nic.link_id\n                };\n            }\n        };\n\n        // Called when the fabric is changed.\n        $scope.fabricChanged = function(nic) {\n            // Update the VLAN on the node to be the default VLAN for that\n            // fabric. The first VLAN for the fabric is the default.\n            if(nic.fabric !== null) {\n                nic.vlan = getDefaultVLAN(nic.fabric);\n            } else {\n                nic.vlan = null;\n            }\n            $scope.vlanChanged(nic);\n        };\n\n        // Called when the fabric is changed in a maas-obj-form.\n        $scope.fabricChangedForm = function(key, value, form) {\n            var vlan;\n            if(value !== null) {\n                vlan = getDefaultVLAN(value);\n            } else {\n                vlan = null;\n            }\n            form.updateValue('vlan', vlan);\n            $scope.vlanChangedForm('vlan', vlan, form);\n        };\n\n        // Called when the VLAN is changed.\n        $scope.vlanChanged = function(nic) {\n            nic.subnet = null;\n            $scope.subnetChanged(nic);\n        };\n\n        // Called when the VLAN is changed on a maas-obj-form\n        $scope.vlanChangedForm = function(key, value, form) {\n            form.updateValue('subnet', null);\n            $scope.subnetChangedForm('subnet', null, form);\n        };\n\n        // Called when the subnet is changed.\n        $scope.subnetChanged = function(nic) {\n            if(!angular.isObject(nic.subnet)) {\n                // Set to 'Unconfigured' so the link mode should be set to\n                // 'link_up'.\n                nic.mode = LINK_MODE.LINK_UP;\n            }\n            if ($scope.$parent.isDevice) {\n                nic.ip_address = null;\n            }\n            $scope.modeChanged(nic);\n        };\n\n        // Called when the subnet is changed.\n        $scope.subnetChangedForm = function(key, value, form) {\n            if(!angular.isObject(value)) {\n                // Set to 'Unconfigured' so the link mode should be set to\n                // 'link_up'.\n                form.updateValue('mode', LINK_MODE.LINK_UP);\n            }\n            mode = form.getValue('mode');\n            form.updateValue('ip_address', null);\n            $scope.modeChangedForm('mode', mode, form);\n        };\n\n        // Called when the mode is changed.\n        $scope.modeChanged = function(nic) {\n            // Clear the IP address when the mode is changed.\n            nic.ip_address = \"\";\n            if(nic.mode === 'static') {\n                var originalLink = mapNICToOriginalLink(nic.id, nic.link_id);\n                if(angular.isObject(originalLink) &&\n                    nic.subnet.id === originalLink.subnet_id) {\n                    // Set the original IP address if same subnet.\n                    nic.ip_address = originalLink.ip_address;\n                }\n            }\n        };\n\n        // Called when the mode is changed on a maas-obj-form.\n        $scope.modeChangedForm = function(key, value, form) {\n            // Clear the IP address when the mode is changed.\n            form.updateValue('ip_address', \"\");\n            if(value === 'static') {\n                var originalLink = mapNICToOriginalLink(\n                  form.getValue('id'), form.getValue('link_id'));\n                if(angular.isObject(originalLink) &&\n                    form.getValue('subnet').id === originalLink.subnet_id) {\n                    // Set the original IP address if same subnet.\n                    form.updateValue('ip_address', originalLink.ip_address);\n                }\n            }\n        };\n\n        // Called to cancel edit mode.\n        $scope.editCancel = function(nic) {\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n            $scope.editInterface = null;\n        };\n\n        // Preprocess things for updateInterfaceForm.\n        $scope.preProcessInterface = function(nic) {\n            var params = angular.copy(nic);\n\n            delete params.id;\n            params.system_id = $scope.node.system_id;\n            params.interface_id = nic.id;\n\n            // we need IDs not objects.\n            if(nic.fabric !== undefined && nic.fabric !== null) {\n                params.fabric = nic.fabric.id;\n            } else {\n                params.fabric = null;\n            }\n            if(nic.vlan !== undefined && nic.vlan !== null) {\n                params.vlan = nic.vlan.id;\n            } else {\n                params.vlan = null;\n            }\n            if(nic.subnet !== undefined && nic.subnet !== null) {\n                params.subnet = params.subnet.id;\n            } else {\n                delete params.subnet;\n            }\n\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            } else {\n                delete params.link_id;\n            }\n            if((nic.mode === LINK_MODE.STATIC ||\n                nic.ip_assignment !== IP_ASSIGNMENT.DYNAMIC) &&\n               angular.isString(nic.ip_address) &&\n               nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            } else {\n                delete params.ip_address;\n            }\n            return params;\n        };\n\n        // Save the following interface on the node.\n        $scope.saveInterface = function(nic) {\n            var params;\n            if($scope.$parent.isDevice) {\n                params = {\n                    \"name\": nic.name,\n                    \"mac_address\": nic.mac_address,\n                    \"ip_assignment\": nic.ip_assignment,\n                    \"ip_address\": nic.ip_address\n                };\n            } else {\n                params = {\n                    \"name\": nic.name,\n                    \"mac_address\": nic.mac_address,\n                    \"mode\": nic.mode,\n                    \"tags\": nic.tags.map(\n                        function(tag) { return tag.text; })\n                };\n            }\n            if(nic.fabric !== undefined && nic.fabric !== null) {\n                params.fabric = nic.fabric.id;\n            } else {\n                params.fabric = null;\n            }\n            if(nic.vlan !== undefined && nic.vlan !== null) {\n                params.vlan = nic.vlan.id;\n            } else {\n                params.vlan = null;\n            }\n            if (nic.subnet !== undefined && nic.subnet !== null) {\n                params.subnet = nic.subnet.id;\n            } else {\n                params.subnet = null;\n            }\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            if(angular.isString(nic.ip_address) && nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            }\n            return $scope.$parent.nodesManager.updateInterface(\n                $scope.node, nic.id, params).then(null, function(error) {\n                    // XXX blake_r: Just log the error in the console, but\n                    // we need to expose this as a better message to the\n                    // user.\n                    console.log(error);\n\n                    // Update the interfaces so it is back to the way it\n                    // was before the user changed it.\n                    updateInterfaces();\n                });\n        };\n\n        // Save the following link on the node.\n        $scope.saveInterfaceLink = function(nic) {\n            var params = {\n                \"mode\": nic.mode\n            };\n            if($scope.$parent.isDevice) {\n                params.ip_assignment = nic.ip_assignment;\n            }\n            if(angular.isObject(nic.subnet)) {\n                params.subnet = nic.subnet.id;\n            }\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            if(nic.mode === LINK_MODE.STATIC &&\n                angular.isString(nic.ip_address) &&\n                nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            }\n            return $scope.$parent.nodesManager.linkSubnet(\n                $scope.node, nic.id, params).then(null, function(error) {\n                    console.log(error);\n                    if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                        $scope.interfaceErrorsByLinkId[nic.link_id] = error;\n                    }\n                    // Update the interfaces so it is back to the way it\n                    // was before the user changed it.\n                    updateInterfaces();\n                    throw error;\n                });\n        };\n\n        // Called to save the interface.\n        $scope.editSave = function(editInterface) {\n            $scope.editCancel();\n            return editInterface;\n        };\n\n        // Return true if the interface delete confirm is being shown.\n        $scope.isShowingDeleteConfirm = function() {\n            return $scope.selectedMode === SELECTION_MODE.DELETE;\n        };\n\n        // Return true if the interface add interface is being shown.\n        $scope.isShowingAdd = function() {\n            return $scope.selectedMode === SELECTION_MODE.ADD;\n        };\n\n        // Return true if either an alias or VLAN can be added.\n        $scope.canAddAliasOrVLAN = function(nic) {\n            if($scope.$parent.isController) {\n                return false;\n            } else if ($scope.isAllNetworkingDisabled()) {\n                return false;\n            } else {\n                return $scope.canAddAlias(nic) || $scope.canAddVLAN(nic);\n            }\n        };\n\n        // Return true if the alias can be added to interface.\n        $scope.canAddAlias = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            } else if(nic.type === INTERFACE_TYPE.ALIAS) {\n                return false;\n            } else if(nic.links.length === 0 ||\n                nic.links[0].mode === LINK_MODE.LINK_UP) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return true if the VLAN can be added to interface.\n        $scope.canAddVLAN = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            } else if(nic.type === INTERFACE_TYPE.ALIAS ||\n                nic.type === INTERFACE_TYPE.VLAN) {\n                return false;\n            }\n            var unusedVLANs = getUnusedVLANs(nic);\n            return unusedVLANs.length > 0;\n        };\n\n        // Return true if another VLAN can be added to this already being\n        // added interface.\n        $scope.canAddAnotherVLAN = function(nic) {\n            if(!$scope.canAddVLAN(nic)) {\n                return false;\n            }\n            var unusedVLANs = getUnusedVLANs(nic);\n            return unusedVLANs.length > 1;\n        };\n\n        // Return the text to use for the remove link and message.\n        $scope.getRemoveTypeText = function(nic) {\n            if(nic.type === INTERFACE_TYPE.PHYSICAL) {\n                return \"interface\";\n            } else if(nic.type === INTERFACE_TYPE.VLAN) {\n                return \"VLAN\";\n            } else {\n                return nic.type;\n            }\n        };\n\n        // Return true if the interface can be removed.\n        $scope.canBeRemoved = function() {\n            return (\n                !$scope.$parent.isController &&\n                !$scope.isAllNetworkingDisabled());\n        };\n\n        // Enter remove mode.\n        $scope.remove = function() {\n            $scope.selectedMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter remove by selecting the node first.\n        $scope.quickRemove = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            $scope.remove();\n        };\n\n        // Cancel the current mode go back to sinle selection mode.\n        $scope.cancel = function() {\n            $scope.newInterface = {};\n            $scope.newBondInterface = {};\n            $scope.newBridgeInterface = {};\n            if($scope.selectedMode === SELECTION_MODE.CREATE_BOND) {\n                $scope.selectedMode = SELECTION_MODE.MULTI;\n            } else if($scope.selectedMode === SELECTION_MODE.CREATE_PHYSICAL) {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            } else {\n                $scope.selectedMode = SELECTION_MODE.SINGLE;\n            }\n        };\n\n        // Confirm the removal of interface.\n        $scope.confirmRemove = function(nic) {\n            $scope.selectedMode = SELECTION_MODE.NONE;\n            $scope.selectedInterfaces = [];\n            if(nic.type !== INTERFACE_TYPE.ALIAS) {\n                $scope.$parent.nodesManager.deleteInterface(\n                    $scope.node, nic.id);\n            } else {\n                $scope.$parent.nodesManager.unlinkSubnet(\n                    $scope.node, nic.id, nic.link_id);\n            }\n\n            // Remove the interface from available interfaces\n            var idx = $scope.interfaces.indexOf(nic);\n            if(idx > -1) {\n                $scope.interfaces.splice(idx, 1);\n            }\n        };\n\n        // Enter add mode.\n        $scope.add = function(type, nic) {\n            // When this is called right after another VLAN was just added, we\n            // remove its used VLAN from the available list.\n            var ignoreVLANs = [];\n            if(angular.isObject($scope.newInterface.vlan)) {\n                ignoreVLANs.push($scope.newInterface.vlan);\n            }\n\n            // Get the default VLAN for the new interface.\n            var vlans = getUnusedVLANs(nic, ignoreVLANs);\n            var defaultVLAN = null;\n            if(vlans.length > 0) {\n                defaultVLAN = vlans[0];\n            }\n            var defaultSubnet = null;\n            var defaultMode = LINK_MODE.LINK_UP;\n\n            // Alias used defaults based from its parent.\n            if(type === INTERFACE_TYPE.ALIAS) {\n                defaultVLAN = nic.vlan;\n                defaultSubnet = $filter('filter')(\n                    $scope.subnets, {vlan:defaultVLAN.id}, true)[0];\n                defaultMode = LINK_MODE.AUTO;\n            }\n\n            // Setup the new interface and enter add mode.\n            $scope.newInterface = {\n                type: type,\n                vlan: defaultVLAN,\n                subnet: defaultSubnet,\n                mode: defaultMode,\n                parent: nic,\n                tags: []\n            };\n            $scope.selectedMode = SELECTION_MODE.ADD;\n        };\n\n        // Quickly enter add by selecting the node first.\n        $scope.quickAdd = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            var type = 'alias';\n            if(!$scope.canAddAlias(nic)) {\n                type = 'vlan';\n            }\n            $scope.add(type, nic);\n        };\n\n        // Return the name of the interface being added.\n        $scope.getAddName = function() {\n            if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                var aliasIdx = $scope.newInterface.parent.links.length;\n                return $scope.newInterface.parent.name + \":\" + aliasIdx;\n            } else if ($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                return (\n                    $scope.newInterface.parent.name + \".\" +\n                    $scope.newInterface.vlan.vid);\n            }\n        };\n\n        // Called when the type of interface is changed.\n        $scope.addTypeChanged = function() {\n            if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                $scope.newInterface.vlan = $scope.newInterface.parent.vlan;\n                $scope.newInterface.subnet = $filter('filter')(\n                    $scope.subnets,\n                    {vlan:$scope.newInterface.vlan.id}, true)[0];\n                $scope.newInterface.mode = LINK_MODE.AUTO;\n            } else if($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                var vlans = getUnusedVLANs($scope.newInterface.parent);\n                $scope.newInterface.vlan = null;\n                if(vlans.length > 0) {\n                    $scope.newInterface.vlan = vlans[0];\n                }\n                $scope.newInterface.subnet = null;\n                $scope.newInterface.mode = LINK_MODE.LINK_UP;\n            }\n        };\n\n        // Perform the add action over the websocket.\n        $scope.addInterface = function(type) {\n            var nic;\n            if($scope.$parent.isDevice) {\n                nic = {\n                    id: $scope.newInterface.parent.id,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    ip_assignment: $scope.newInterface.ip_assignment,\n                    subnet: $scope.newInterface.subnet,\n                    ip_address: $scope.newInterface.ip_address\n                };\n                $scope.saveInterfaceLink(nic);\n            } else if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                // Add a link to the current interface.\n                nic = {\n                    id: $scope.newInterface.parent.id,\n                    mode: $scope.newInterface.mode,\n                    subnet: $scope.newInterface.subnet,\n                    ip_address: $scope.newInterface.ip_address\n                };\n                $scope.saveInterfaceLink(nic);\n            } else if($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                var params = {\n                    parent: $scope.newInterface.parent.id,\n                    vlan: $scope.newInterface.vlan.id,\n                    mode: $scope.newInterface.mode,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; })\n                };\n                if(angular.isObject($scope.newInterface.subnet)) {\n                    params.subnet = $scope.newInterface.subnet.id;\n                    params.ip_address = $scope.newInterface.ip_address;\n                }\n                $scope.$parent.nodesManager.createVLANInterface(\n                    $scope.node, params).then(null, function(error) {\n                        // Should do something better but for now just log\n                        // the error.\n                        console.log(error);\n                    });\n            }\n\n            // Add again based on the clicked option.\n            if(angular.isString(type)) {\n                $scope.add(type, $scope.newInterface.parent);\n            } else {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n                $scope.selectedInterfaces = [];\n                $scope.newInterface = {};\n            }\n        };\n\n        // Return true if the networking information cannot be edited\n        // or if this interface should be disabled in the list. Only\n        // returns true when in create bond mode.\n        $scope.isDisabled = function() {\n            if ($scope.isAllNetworkingDisabled()) {\n                return true;\n            } else {\n                return (\n                    $scope.selectedMode !== SELECTION_MODE.NONE &&\n                    $scope.selectedMode !== SELECTION_MODE.SINGLE &&\n                    $scope.selectedMode !== SELECTION_MODE.MULTI);\n            }\n        };\n\n        // Return true when a bond can be created based on the current\n        // selection. Only can be done if no aliases are selected and all\n        // selected interfaces are on the same VLAN.\n        $scope.canCreateBond = function() {\n            if($scope.selectedMode !== SELECTION_MODE.MULTI) {\n                return false;\n            }\n            var interfaces = getSelectedInterfaces();\n            var i, vlan;\n            for(i = 0; i < interfaces.length; i++) {\n                var nic = interfaces[i];\n                if(nic.type === INTERFACE_TYPE.ALIAS ||\n                    nic.type === INTERFACE_TYPE.BOND) {\n                    return false;\n                } else if(!angular.isObject(vlan)) {\n                    vlan = nic.vlan;\n                } else if(vlan !== nic.vlan) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        // Return true when the create bond view is being shown.\n        $scope.isShowingCreateBond = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_BOND;\n        };\n\n        // Show the create bond view.\n        $scope.showCreateBond = function() {\n            if($scope.selectedMode === SELECTION_MODE.MULTI &&\n                $scope.canCreateBond()) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_BOND;\n\n                var parents = getSelectedInterfaces();\n                $scope.newBondInterface = {\n                    name: getNextName(\"bond\"),\n                    tags: [],\n                    parents: parents,\n                    primary: parents[0],\n                    mac_address: \"\",\n                    mode: \"active-backup\",\n                    lacpRate: \"slow\",\n                    xmitHashPolicy: \"layer2\"\n                };\n            }\n        };\n\n        // Return true if the interface has a parent that is a boot interface.\n        $scope.hasBootInterface = function(nic) {\n            if(!angular.isArray(nic.parents)) {\n                return false;\n            }\n            var i;\n            for(i = 0; i < nic.parents.length; i++) {\n                if(nic.parents[i].is_boot) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return the MAC address that should be shown as a placeholder. This\n        // this is the MAC address of the primary interface.\n        $scope.getInterfacePlaceholderMACAddress = function(nic) {\n            if(!angular.isObject(nic.primary)) {\n                return \"\";\n            } else {\n                return nic.primary.mac_address;\n            }\n        };\n\n        // Return true if the user has inputed a value in the MAC address field\n        // but it is invalid.\n        $scope.isMACAddressInvalid = function(mac_address, invalidEmpty) {\n            if(angular.isUndefined(invalidEmpty)) {\n                invalidEmpty = false;\n            }\n            if(!angular.isString(mac_address) || mac_address === \"\") {\n                return invalidEmpty;\n            }\n            return !ValidationService.validateMAC(mac_address);\n        };\n\n        // Return true when the LACR rate selection should be shown.\n        $scope.showLACPRate = function() {\n            return $scope.newBondInterface.mode === \"802.3ad\";\n        };\n\n        // Return true when the XMIT hash policy should be shown.\n        $scope.showXMITHashPolicy = function() {\n            return (\n                $scope.newBondInterface.mode === \"balance-xor\" ||\n                $scope.newBondInterface.mode === \"802.3ad\" ||\n                $scope.newBondInterface.mode === \"balance-tlb\");\n        };\n\n        // Return true if cannot add the bond.\n        $scope.cannotAddBond = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newBondInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newBondInterface.mac_address));\n        };\n\n        // Actually add the bond.\n        $scope.addBond = function() {\n            if($scope.cannotAddBond()) {\n               return;\n            }\n\n            var parents = $scope.newBondInterface.parents.map(\n                function(nic) { return nic.id; });\n            var mac_address = $scope.newBondInterface.mac_address;\n            if(mac_address === \"\") {\n                mac_address = $scope.newBondInterface.primary.mac_address;\n            }\n            var vlan_id, vlan = $scope.newBondInterface.primary.vlan;\n            if(angular.isObject(vlan)) {\n                vlan_id = vlan.id;\n            } else {\n                vlan_id = null;\n            }\n            var params = {\n                name: $scope.newBondInterface.name,\n                mac_address: mac_address,\n                tags: $scope.newBondInterface.tags.map(\n                    function(tag) { return tag.text; }),\n                parents: parents,\n                vlan: vlan_id,\n                bond_mode: $scope.newBondInterface.mode,\n                bond_lacp_rate: $scope.newBondInterface.lacpRate,\n                bond_xmit_hash_policy: $scope.newBondInterface.xmitHashPolicy\n            };\n            $scope.$parent.nodesManager.createBondInterface(\n                $scope.node, params).then(null, function(error) {\n                    // Should do something better but for now just log\n                    // the error.\n                    console.log(error);\n                });\n\n            // Remove the parent interfaces so that they don't show up\n            // in the listing unti the new bond appears.\n            angular.forEach($scope.newBondInterface.parents, function(parent) {\n                var idx = $scope.interfaces.indexOf(parent);\n                if(idx > -1) {\n                    $scope.interfaces.splice(idx, 1);\n                }\n            });\n\n            // Clear the bond interface and reset the mode.\n            $scope.newBondInterface = {};\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n        };\n\n        // Return true when a bridge can be created based on the current\n        // selection. Only can be done if no aliases are selected and only\n        // one interface is selected.\n        $scope.canCreateBridge = function() {\n            if($scope.selectedMode !== SELECTION_MODE.SINGLE) {\n                return false;\n            }\n            var nic = getSelectedInterfaces()[0];\n            if(nic.type === INTERFACE_TYPE.ALIAS ||\n                nic.type === INTERFACE_TYPE.BRIDGE) {\n                return false;\n            }\n            return true;\n        };\n\n        // Return true when the create bridge view is being shown.\n        $scope.isShowingCreateBridge = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_BRIDGE;\n        };\n\n        // Show the create bridge view.\n        $scope.showCreateBridge = function() {\n            if($scope.selectedMode === SELECTION_MODE.SINGLE &&\n                $scope.canCreateBridge()) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_BRIDGE;\n\n                var parents = getSelectedInterfaces();\n                $scope.newBridgeInterface = {\n                    name: getNextName(\"br\"),\n                    tags: [],\n                    parents: parents,\n                    primary: parents[0],\n                    mac_address: \"\",\n                    bridge_stp: false,\n                    bridge_fd: 15\n                };\n            }\n        };\n\n        // Return true if cannot add the bridge.\n        $scope.cannotAddBridge = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newBridgeInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newBridgeInterface.mac_address));\n        };\n\n        // Actually add the bridge.\n        $scope.addBridge = function() {\n            if($scope.cannotAddBridge()) {\n               return;\n            }\n\n            var parents = [$scope.newBridgeInterface.primary.id];\n            var mac_address = $scope.newBridgeInterface.mac_address;\n            if(mac_address === \"\") {\n                mac_address = $scope.newBridgeInterface.primary.mac_address;\n            }\n            var params = {\n                name: $scope.newBridgeInterface.name,\n                mac_address: mac_address,\n                tags: $scope.newBridgeInterface.tags.map(\n                    function(tag) { return tag.text; }),\n                parents: parents,\n                vlan: $scope.newBridgeInterface.primary.vlan.id,\n                bridge_stp: $scope.newBridgeInterface.bridge_stp,\n                bridge_fd: $scope.newBridgeInterface.bridge_fd\n            };\n            $scope.$parent.nodesManager.createBridgeInterface(\n                $scope.node, params).then(null, function(error) {\n                    // Should do something better but for now just log\n                    // the error.\n                    console.log(error);\n                });\n\n            // Remove the parent interface so that they don't show up\n            // in the listing unti the new bond appears.\n            var idx = $scope.interfaces.indexOf(\n                $scope.newBridgeInterface.primary);\n            if(idx > -1) {\n                $scope.interfaces.splice(idx, 1);\n            }\n\n            // Clear the bridge interface and reset the mode.\n            $scope.newBridgeInterface = {};\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n        };\n\n        // Return true when the create physical interface view is being shown.\n        $scope.isShowingCreatePhysical = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_PHYSICAL;\n        };\n\n        // Show the create interface view.\n        $scope.showCreatePhysical = function() {\n            if($scope.selectedMode === SELECTION_MODE.NONE) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_PHYSICAL;\n                if($scope.$parent.isDevice) {\n                    $scope.newInterface = {\n                        name: getNextName(\"eth\"),\n                        mac_address: \"\",\n                        macError: false,\n                        tags: [],\n                        errorMsg: null,\n                        subnet: null,\n                        ip_assignment: IP_ASSIGNMENT.DYNAMIC\n                    };\n                } else {\n                    $scope.newInterface = {\n                        name: getNextName(\"eth\"),\n                        mac_address: \"\",\n                        macError: false,\n                        tags: [],\n                        errorMsg: null,\n                        fabric: $scope.fabrics[0],\n                        vlan: getDefaultVLAN($scope.fabrics[0]),\n                        subnet: null,\n                        mode: LINK_MODE.LINK_UP\n                    };\n                }\n            }\n        };\n\n        // Return true if cannot add the interface.\n        $scope.cannotAddPhysicalInterface = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newInterface.mac_address, true));\n        };\n\n        // Actually add the new physical interface.\n        $scope.addPhysicalInterface = function() {\n            if($scope.cannotAddPhysicalInterface()) {\n               return;\n            }\n\n            var params;\n            if($scope.$parent.isDevice) {\n                params = {\n                    name: $scope.newInterface.name,\n                    mac_address: $scope.newInterface.mac_address,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    ip_assignment: $scope.newInterface.ip_assignment,\n                    ip_address: $scope.newInterface.ip_address\n                };\n            } else {\n                params = {\n                    name: $scope.newInterface.name,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    mac_address: $scope.newInterface.mac_address,\n                    vlan: $scope.newInterface.vlan.id,\n                    mode: $scope.newInterface.mode\n                };\n            }\n            if(angular.isObject($scope.newInterface.subnet)) {\n                params.subnet = $scope.newInterface.subnet.id;\n            }\n            $scope.newInterface.macError = false;\n            $scope.newInterface.errorMsg = null;\n            $scope.$parent.nodesManager.createPhysicalInterface(\n                $scope.node, params).then(function() {\n                    // Clear the interface and reset the mode.\n                    $scope.newInterface = {};\n                    $scope.selectedMode = SELECTION_MODE.NONE;\n                },\n                function(errorStr) {\n                    error = JSONService.tryParse(errorStr);\n                    if(!angular.isObject(error)) {\n                        // Was not a JSON error. This is wrong here as it\n                        // should be, so just log to the console.\n                        console.log(errorStr);\n                    } else {\n                        macError = error.mac_address;\n                        if(angular.isArray(macError)) {\n                            $scope.newInterface.macError = true;\n                            $scope.newInterface.errorMsg = macError[0];\n                        }\n                    }\n                });\n        };\n\n        // Load all the required managers. NodesManager and GeneralManager\n        // are loaded by the parent controller \"NodeDetailsController\".\n        ManagerHelperService.loadManagers($scope, [\n            FabricsManager,\n            VLANsManager,\n            SubnetsManager,\n            UsersManager,\n            ControllersManager\n        ]).then(function() {\n            // GeneralManager is loaded by the parent scope however\n            // bond_options may not have been loaded. If it hasn't been\n            // loaded, load it.\n            if(!GeneralManager.isDataLoaded('bond_options')) {\n                GeneralManager.loadItems(['bond_options']);\n            }\n            $scope.managersHaveLoaded = true;\n            updateLoaded();\n        });\n\n        // Tell $parent that the networkingController has been loaded.\n        $scope.$parent.controllerLoaded('networkingController', $scope);\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Storage Controller\n */\n\n\n// Filter that is specific to the NodeStorageController. Remove the available\n// disks from the list if being used in the availableNew.\nangular.module('MAAS').filter('removeAvailableByNew', function() {\n    return function(disks, availableNew) {\n        if(!angular.isObject(availableNew) || (\n            !angular.isObject(availableNew.device) &&\n            !angular.isArray(availableNew.devices))) {\n            return disks;\n        }\n\n        var filtered = [];\n        var single = true;\n        if(angular.isArray(availableNew.devices)) {\n            single = false;\n        }\n        angular.forEach(disks, function(disk) {\n            if(single) {\n                if(disk !== availableNew.device) {\n                    filtered.push(disk);\n                }\n            } else {\n                var i, found = false;\n                for(i = 0; i < availableNew.devices.length; i++) {\n                    if(disk === availableNew.devices[i]) {\n                        found = true;\n                        break;\n                    }\n                }\n                if(!found) {\n                    filtered.push(disk);\n                }\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').controller('NodeStorageController', [\n    '$scope', 'MachinesManager', 'ConverterService', 'UsersManager',\n    function($scope, MachinesManager, ConverterService, UsersManager) {\n\n        // From models/partitiontable.py - must be kept in sync.\n        var INITIAL_PARTITION_OFFSET = 4 * 1024 * 1024;\n        var END_OF_PARTITION_TABLE_SPACE = 1024 * 1024;\n        var PARTITION_TABLE_EXTRA_SPACE = INITIAL_PARTITION_OFFSET +\n            END_OF_PARTITION_TABLE_SPACE;\n        var PREP_PARTITION_SIZE = 8 * 1024 * 1024;\n\n        // From models/partition.py - must be kept in sync.\n        var PARTITION_ALIGNMENT_SIZE = 4 * 1024 * 1024;\n        var MIN_PARTITION_SIZE = PARTITION_ALIGNMENT_SIZE;\n\n        // Different selection modes.\n        var SELECTION_MODE = {\n            NONE: null,\n            SINGLE: \"single\",\n            MUTLI: \"multi\",\n            UNMOUNT: \"unmount\",\n            UNFORMAT: \"unformat\",\n            EDIT: \"edit\",\n            DELETE: \"delete\",\n            FORMAT_AND_MOUNT: \"format-mount\",\n            PARTITION: \"partition\",\n            BCACHE: \"bcache\",\n            RAID: \"raid\",\n            VOLUME_GROUP: \"volume-group\",\n            LOGICAL_VOLUME: \"logical-volume\"\n        };\n\n        // Different available raid modes.\n        var RAID_MODES = [\n            {\n                level: \"raid-0\",\n                title: \"RAID 0\",\n                min_disks: 2,\n                allows_spares: false,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * numDisks;\n                }\n            },\n            {\n                level: \"raid-1\",\n                title: \"RAID 1\",\n                min_disks: 2,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize;\n                }\n            },\n            {\n                level: \"raid-5\",\n                title: \"RAID 5\",\n                min_disks: 3,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * (numDisks - 1);\n                }\n            },\n            {\n                level: \"raid-6\",\n                title: \"RAID 6\",\n                min_disks: 4,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * (numDisks - 2);\n                }\n            },\n            {\n                level: \"raid-10\",\n                title: \"RAID 10\",\n                min_disks: 3,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * numDisks / 2;\n                }\n            }\n        ];\n\n        $scope.tableInfo = {column: 'name'};\n        $scope.has_disks = false;\n        $scope.filesystems = [];\n        $scope.filesystemsMap = {};\n        $scope.filesystemMode = SELECTION_MODE.NONE;\n        $scope.filesystemAllSelected = false;\n        $scope.cachesets = [];\n        $scope.cachesetsMap = {};\n        $scope.cachesetsMode = SELECTION_MODE.NONE;\n        $scope.cachesetsAllSelected = false;\n        $scope.available = [];\n        $scope.availableMap = {};\n        $scope.availableMode = SELECTION_MODE.NONE;\n        $scope.availableAllSelected = false;\n        $scope.availableNew = {};\n        $scope.used = [];\n        $scope.showMembers = [];\n\n        // Return True if the filesystem is mounted.\n        function isMountedFilesystem(filesystem) {\n            return angular.isObject(filesystem) &&\n                angular.isString(filesystem.mount_point) &&\n                filesystem.mount_point !== \"\";\n        }\n\n        // Return True if the item has a filesystem and it's mounted.\n        function hasMountedFilesystem(item) {\n            return angular.isObject(item) &&\n                isMountedFilesystem(item.filesystem);\n        }\n\n        // Returns the fstype if the item has a filesystem and its unmounted.\n        function hasFormattedUnmountedFilesystem(item) {\n            if(angular.isObject(item.filesystem) &&\n                angular.isString(item.filesystem.fstype) &&\n                item.filesystem.fstype !== '' &&\n                (angular.isString(item.filesystem.mount_point) === false ||\n                    item.filesystem.mount_point === '')) {\n                return item.filesystem.fstype;\n            }else{\n                return null;\n            }\n        }\n\n        // Return True if the item is in use.\n        function isInUse(item) {\n            if(item.type === \"cache-set\") {\n                return true;\n            } else if(angular.isObject(item.filesystem)) {\n                if(item.filesystem.is_format_fstype &&\n                    angular.isString(item.filesystem.mount_point) &&\n                    item.filesystem.mount_point !== \"\") {\n                    return true;\n                } else if(!item.filesystem.is_format_fstype) {\n                    return true;\n                }\n                return false;\n            }\n            return item.available_size < MIN_PARTITION_SIZE;\n        }\n\n        // Return the tags formatted for ngTagInput.\n        function getTags(disk) {\n            var tags = [];\n            angular.forEach(disk.tags, function(tag) {\n                tags.push({ text: tag });\n            });\n            return tags;\n        }\n\n        // Return a unique key that will never change.\n        function getUniqueKey(disk) {\n            if(disk.type === \"cache-set\") {\n                return \"cache-set-\" + disk.cache_set_id;\n            } else {\n                var key = disk.type + \"-\" + disk.block_id;\n                if(angular.isNumber(disk.partition_id)) {\n                    key += \"-\" + disk.partition_id;\n                }\n                return key;\n            }\n        }\n\n        // Update the list of filesystems. Only filesystems with a mount point\n        // set go here. If no mount point is set, it goes in available.\n        function updateFilesystems() {\n            // Create the new list of filesystems.\n            var filesystems = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(hasMountedFilesystem(disk)) {\n                    var data = {\n                        \"type\": \"filesystem\",\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"fstype\": disk.filesystem.fstype,\n                        \"mount_point\": disk.filesystem.mount_point,\n                        \"mount_options\": disk.filesystem.mount_options,\n                        \"block_id\": disk.id,\n                        \"partition_id\": null,\n                        \"filesystem_id\": disk.filesystem.id,\n                        \"original_type\": disk.type,\n                        \"original\": disk\n                    };\n                    if(disk.type === \"virtual\") {\n                        disk.parent_type = disk.parent.type;\n                    }\n                    filesystems.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(hasMountedFilesystem(partition)) {\n                        filesystems.push({\n                            \"type\": \"filesystem\",\n                            \"name\": partition.name,\n                            \"size_human\": partition.size_human,\n                            \"fstype\": partition.filesystem.fstype,\n                            \"mount_point\": partition.filesystem.mount_point,\n                            \"mount_options\":\n                                partition.filesystem.mount_options,\n                            \"block_id\": disk.id,\n                            \"partition_id\": partition.id,\n                            \"filesystem_id\": partition.filesystem.id,\n                            \"original_type\": \"partition\",\n                            \"original\": partition\n                        });\n                    }\n                });\n            });\n\n            // Add special filesystems to the filesystem list. A special\n            // filesystem cannot exist unless mounted, so we don't need\n            // to check.\n            angular.forEach(\n                $scope.node.special_filesystems,\n                function(filesystem) {\n                    filesystems.push({\n                        \"type\": \"filesystem\",\n                        \"name\": \"—\",\n                        \"size_human\": \"—\",\n                        \"fstype\": filesystem.fstype,\n                        \"mount_point\": filesystem.mount_point,\n                        \"mount_options\": filesystem.mount_options,\n                        \"block_id\": null,\n                        \"partition_id\": null,\n                        \"original_type\": \"special\"\n                    });\n                });\n\n            // Update the selected filesystems with the currently selected\n            // filesystems.\n            angular.forEach(filesystems, function(filesystem) {\n                var key = getUniqueKey(filesystem);\n                var oldFilesystem = $scope.filesystemsMap[key];\n                if(angular.isObject(oldFilesystem)) {\n                    filesystem.$selected = oldFilesystem.$selected;\n                } else {\n                    filesystem.$selected = false;\n                }\n            });\n\n            // Update the filesystems and filesystemsMap on the scope.\n            $scope.filesystems = filesystems;\n            $scope.filesystemsMap = {};\n            angular.forEach(filesystems, function(filesystem) {\n                $scope.filesystemsMap[getUniqueKey(filesystem)] = filesystem;\n            });\n\n            // Update the selection mode.\n            $scope.updateFilesystemSelection(false);\n        }\n\n        // Update the list of cache sets.\n        function updateCacheSets() {\n            // Create the new list of cache sets.\n            var cachesets = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(disk.type === \"cache-set\") {\n                    cachesets.push({\n                        \"type\": \"cache-set\",\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"cache_set_id\": disk.id,\n                        \"used_by\": disk.used_for\n                    });\n                }\n            });\n\n            // Update the selected cache sets with the currently selected\n            // cache sets.\n            angular.forEach(cachesets, function(cacheset) {\n                var key = getUniqueKey(cacheset);\n                var oldCacheSet = $scope.cachesetsMap[key];\n                if(angular.isObject(oldCacheSet)) {\n                    cacheset.$selected = oldCacheSet.$selected;\n                } else {\n                    cacheset.$selected = false;\n                }\n            });\n\n            // Update the cachesets and cachesetsMap on the scope.\n            $scope.cachesets = cachesets;\n            $scope.cachesetsMap = {};\n            angular.forEach(cachesets, function(cacheset) {\n                $scope.cachesetsMap[getUniqueKey(cacheset)] = cacheset;\n            });\n\n            // Update the selection mode.\n            $scope.updateCacheSetsSelection(false);\n        }\n\n        // Update list of all available disks.\n        function updateAvailable() {\n            var available = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(!isInUse(disk)) {\n                    var has_partitions = false;\n                    if(angular.isArray(disk.partitions) &&\n                        disk.partitions.length > 0) {\n                        has_partitions = true;\n                    }\n                    var data = {\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"available_size_human\": disk.available_size_human,\n                        \"used_size_human\": disk.used_size_human,\n                        \"type\": disk.type,\n                        \"model\": disk.model,\n                        \"serial\": disk.serial,\n                        \"tags\": getTags(disk),\n                        \"fstype\": hasFormattedUnmountedFilesystem(disk),\n                        \"mount_point\": null,\n                        \"mount_options\": null,\n                        \"block_id\": disk.id,\n                        \"partition_id\": null,\n                        \"has_partitions\": has_partitions,\n                        \"is_boot\": disk.is_boot,\n                        \"original\": disk,\n                        \"test_status\": disk.test_status,\n                        \"firmware_version\": disk.firmware_version\n                    };\n                    if(disk.type === \"virtual\") {\n                        data.parent_type = disk.parent.type;\n                    }\n                    available.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(!isInUse(partition)) {\n                        available.push({\n                            \"name\": partition.name,\n                            \"size_human\": partition.size_human,\n                            \"available_size_human\": (\n                                partition.available_size_human),\n                            \"used_size_human\": partition.used_size_human,\n                            \"type\": \"partition\",\n                            \"model\": \"\",\n                            \"serial\": \"\",\n                            \"tags\": [],\n                            \"fstype\":\n                                hasFormattedUnmountedFilesystem(partition),\n                            \"mount_point\": null,\n                            \"mount_options\": null,\n                            \"block_id\": disk.id,\n                            \"partition_id\": partition.id,\n                            \"has_partitions\": false,\n                            \"is_boot\": false,\n                            \"original\": partition\n                        });\n                    }\n                });\n            });\n\n            // Update the selected available disks with the currently selected\n            // available disks. Also copy the $options so they are not lost\n            // for the current action.\n            angular.forEach(available, function(disk) {\n                var key = getUniqueKey(disk);\n                var oldDisk = $scope.availableMap[key];\n                if(angular.isObject(oldDisk)) {\n                    disk.$selected = oldDisk.$selected;\n                    disk.$options = oldDisk.$options;\n                } else {\n                    disk.$selected = false;\n                    disk.$options = {};\n                }\n            });\n\n            // Update available and availableMap on the scope.\n            $scope.available = available;\n            $scope.availableMap = {};\n            angular.forEach(available, function(disk) {\n                $scope.availableMap[getUniqueKey(disk)] = disk;\n            });\n\n            // Update device or devices on the availableNew object to be\n            // there new objects.\n            if(angular.isObject($scope.availableNew)) {\n                // Update device.\n                if(angular.isObject($scope.availableNew.device)) {\n                    var key = getUniqueKey($scope.availableNew.device);\n                    $scope.availableNew.device = $scope.availableMap[key];\n                // Update devices.\n                } else if(angular.isArray($scope.availableNew.devices)) {\n                    var newDevices = [];\n                    angular.forEach(\n                        $scope.availableNew.devices, function(device) {\n                            var key = getUniqueKey(device);\n                            var newDevice = $scope.availableMap[key];\n                            if(angular.isObject(newDevice)) {\n                                newDevices.push(newDevice);\n                            }\n                        });\n                    $scope.availableNew.devices = newDevices;\n                }\n            }\n\n            // Update the selection mode.\n            $scope.updateAvailableSelection(false);\n        }\n\n        // Update list of all used disks.\n        function updateUsed() {\n            var used = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(isInUse(disk) && disk.type !== \"cache-set\") {\n                    var has_partitions = false;\n                    if(angular.isArray(disk.partitions) &&\n                        disk.partitions.length > 0) {\n                        has_partitions = true;\n                    }\n                    var data = {\n                        \"name\": disk.name,\n                        \"type\": disk.type,\n                        \"model\": disk.model,\n                        \"serial\": disk.serial,\n                        \"tags\": getTags(disk),\n                        \"used_for\": disk.used_for,\n                        \"is_boot\": disk.is_boot,\n                        \"has_partitions\": has_partitions,\n                        \"test_status\": disk.test_status,\n                        \"firmware_version\": disk.firmware_version\n                    };\n                    if(disk.type === \"virtual\") {\n                        data.parent_type = disk.parent.type;\n                    }\n                    used.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(isInUse(partition) && partition.type !== \"cache-set\") {\n                        used.push({\n                            \"name\": partition.name,\n                            \"type\": \"partition\",\n                            \"model\": \"\",\n                            \"serial\": \"\",\n                            \"tags\": [],\n                            \"used_for\": partition.used_for,\n                            \"is_boot\": false\n                        });\n                    }\n                });\n            });\n            $scope.used = used;\n        }\n\n        // Updates the filesystem, available, and used list.\n        function updateDisks() {\n            if(angular.isArray($scope.node.disks)) {\n                $scope.has_disks = $scope.node.disks.length > 0;\n                updateFilesystems();\n                updateCacheSets();\n                updateAvailable();\n                updateUsed();\n            } else {\n                $scope.has_disks = false;\n                $scope.filesystems = [];\n                $scope.filesystemsMap = {};\n                $scope.filesystemMode = SELECTION_MODE.NONE;\n                $scope.filesystemAllSelected = false;\n                $scope.cachesets = [];\n                $scope.cachesetsMap = {};\n                $scope.cachesetsMode = SELECTION_MODE.NONE;\n                $scope.cachesetsAllSelected = false;\n                $scope.available = [];\n                $scope.availableMap = {};\n                $scope.availableMode = SELECTION_MODE.NONE;\n                $scope.availableAllSelected = false;\n                $scope.availableNew = {};\n                $scope.used = [];\n            }\n        }\n\n        // Deselect all items in the array.\n        function deselectAll(items) {\n            angular.forEach(items, function(item) {\n                item.$selected = false;\n            });\n        }\n\n        // Capitalize the first letter of the string.\n        function capitalizeFirstLetter(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n\n        // Return true if the string is a number.\n        function isNumber(string) {\n            var pattern = /^-?\\d+\\.?\\d*$/;\n            return pattern.test(string);\n        }\n\n        // Extract the index from the name based on prefix.\n        function getIndexFromName(prefix, name) {\n            var pattern = new RegExp(\"^\" + prefix + \"([0-9]+)$\");\n            var match = pattern.exec(name);\n            if(angular.isArray(match) && match.length === 2) {\n                return parseInt(match[1], 10);\n            }\n        }\n\n        // Get the next device name based on prefix.\n        function getNextName(prefix) {\n            var idx = -1;\n            angular.forEach($scope.node.disks, function(disk) {\n                var dIdx = getIndexFromName(prefix, disk.name);\n                if(angular.isNumber(dIdx)) {\n                    idx = Math.max(idx, dIdx);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    dIdx = getIndexFromName(prefix, partition.name);\n                    if(angular.isNumber(dIdx)) {\n                        idx = Math.max(idx, dIdx);\n                    }\n                });\n            });\n            return prefix + (idx + 1);\n        }\n\n        // Return true if another disk exists with name.\n        function isNameAlreadyInUse(name, exclude_disk) {\n            if(!angular.isArray($scope.node.disks)) {\n                return false;\n            }\n\n            var i, j;\n            for(i = 0; i < $scope.node.disks.length; i++) {\n                var disk = $scope.node.disks[i];\n                if(disk.name === name) {\n                    if(!angular.isObject(exclude_disk) ||\n                        exclude_disk.type === \"partition\" ||\n                        exclude_disk.block_id !== disk.id) {\n                        return true;\n                    }\n                }\n                if(angular.isArray(disk.partitions)) {\n                    for(j = 0; j < disk.partitions.length; j++) {\n                        var partition = disk.partitions[j];\n                        if(partition.name === name) {\n                            if(!angular.isObject(exclude_disk) ||\n                                exclude_disk.type !== \"partition\" ||\n                                exclude_disk.partition_id !== partition.id) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        // Return true if the disk is a logical volume.\n        function isLogicalVolume(disk) {\n            return disk.type === \"virtual\" && disk.parent_type === \"lvm-vg\";\n        }\n\n        // Called by $parent when the node has been loaded.\n        $scope.nodeLoaded = function() {\n            $scope.$watch(\"node.disks\", updateDisks);\n        };\n\n        // Return true if the item can be a boot disk.\n        $scope.isBootDiskDisabled = function(item, section) {\n            // Only superusers can change the boot disk.\n            if(!$scope.isSuperUser()) {\n                return true;\n            }\n\n            // Not ready or allocated so the boot disk cannot be changed.\n            if (angular.isObject($scope.node) &&\n                [\"Ready\", \"Allocated\"].indexOf(\n                    $scope.node.status) === -1) {\n                return true;\n            }\n\n            // Only physical disks can be the boot disk.\n            if(item.type !== \"physical\") {\n                return true;\n            }\n\n            // If the disk is in the used section and does not have any\n            // partitions then it cannot be a boot disk. Boot disk either\n            // require that it be unused or that some partitions exists\n            // on the disk. This is because the boot disk has to have a\n            // partition table header.\n            if(section === \"used\") {\n                return !item.has_partitions;\n            }\n            return false;\n        };\n\n        // Called to change the disk to a boot disk.\n        $scope.setAsBootDisk = function(item) {\n            // Do nothing if already the boot disk.\n            if(item.is_boot) {\n                return;\n            }\n            // Do nothing if disabled.\n            if($scope.isBootDiskDisabled(item)) {\n                return;\n            }\n\n            MachinesManager.setBootDisk($scope.node, item.block_id);\n        };\n\n        // Return array of selected filesystems.\n        $scope.getSelectedFilesystems = function() {\n            var filesystems = [];\n            angular.forEach($scope.filesystems, function(filesystem) {\n                if(filesystem.$selected) {\n                    filesystems.push(filesystem);\n                }\n            });\n            return filesystems;\n        };\n\n        // Update the currect mode for the filesystem section and the all\n        // selected value.\n        $scope.updateFilesystemSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var filesystems = $scope.getSelectedFilesystems();\n            if(filesystems.length === 0) {\n                $scope.filesystemMode = SELECTION_MODE.NONE;\n            } else if(filesystems.length === 1 && force) {\n                $scope.filesystemMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.filesystemMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.filesystems.length === 0) {\n                $scope.filesystemAllSelected = false;\n            } else if(filesystems.length === $scope.filesystems.length) {\n                $scope.filesystemAllSelected = true;\n            } else {\n                $scope.filesystemAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the filesystem.\n        $scope.toggleFilesystemSelect = function(filesystem) {\n            filesystem.$selected = !filesystem.$selected;\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Toggle the selection of all filesystems.\n        $scope.toggleFilesystemAllSelect = function() {\n            angular.forEach($scope.filesystems, function(filesystem) {\n                if($scope.filesystemAllSelected) {\n                    filesystem.$selected = false;\n                } else {\n                    filesystem.$selected = true;\n                }\n            });\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Return true if checkboxes in the filesystem section should be\n        // disabled.\n        $scope.isFilesystemsDisabled = function() {\n            return ((\n                $scope.filesystemMode !== SELECTION_MODE.NONE &&\n                $scope.filesystemMode !== SELECTION_MODE.SINGLE &&\n                $scope.filesystemMode !== SELECTION_MODE.MUTLI) ||\n                $scope.isAllStorageDisabled());\n        };\n\n        // Cancel the current filesystem operation.\n        $scope.filesystemCancel = function() {\n            deselectAll($scope.filesystems);\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Enter unmount mode.\n        $scope.filesystemUnmount = function() {\n            $scope.filesystemMode = SELECTION_MODE.UNMOUNT;\n        };\n\n        // Quickly enter unmount by selecting the filesystem first.\n        $scope.quickFilesystemUnmount = function(filesystem) {\n            deselectAll($scope.filesystems);\n            filesystem.$selected = true;\n            $scope.updateFilesystemSelection(true);\n            $scope.filesystemUnmount();\n        };\n\n        // Confirm the unmount action for filesystem.\n        $scope.filesystemConfirmUnmount = function(filesystem) {\n            MachinesManager.updateFilesystem(\n                $scope.node,\n                filesystem.block_id, filesystem.partition_id,\n                filesystem.fstype, null, null);\n\n            var idx = $scope.filesystems.indexOf(filesystem);\n            $scope.filesystems.splice(idx, 1);\n            $scope.updateFilesystemSelection();\n        };\n\n        // Enter delete mode.\n        $scope.filesystemDelete = function() {\n            $scope.filesystemMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete by selecting the filesystem first.\n        $scope.quickFilesystemDelete = function(filesystem) {\n            deselectAll($scope.filesystems);\n            filesystem.$selected = true;\n            $scope.updateFilesystemSelection(true);\n            $scope.filesystemDelete();\n        };\n\n        // Confirm the delete action for filesystem.\n        $scope.filesystemConfirmDelete = function(filesystem) {\n            if(filesystem.original_type === \"special\") {\n                // Delete the special filesystem.\n                MachinesManager.unmountSpecialFilesystem(\n                    $scope.node, filesystem.mount_point);\n            } else if(filesystem.original_type === \"partition\") {\n                // Delete the partition.\n                MachinesManager.deletePartition(\n                    $scope.node, filesystem.original.id);\n            } else {\n                // Delete the disk.\n                MachinesManager.deleteFilesystem(\n                    $scope.node, filesystem.block_id, filesystem.partition_id,\n                    filesystem.filesystem_id);\n            }\n\n            var idx = $scope.filesystems.indexOf(filesystem);\n            $scope.filesystems.splice(idx, 1);\n            $scope.updateFilesystemSelection();\n        };\n\n        // Return true if the disk has an unmouted filesystem.\n        $scope.hasUnmountedFilesystem = function(disk) {\n            if(angular.isString(disk.fstype) && disk.fstype !== \"\") {\n                if(!angular.isString(disk.mount_point) ||\n                    disk.mount_point === \"\") {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return true if the free space label should be shown.\n        $scope.showFreeSpace = function(disk) {\n            if(disk.type === \"lvm-vg\") {\n                return true;\n            } else if(disk.type === \"physical\" || disk.type === \"virtual\") {\n                return disk.has_partitions;\n            } else {\n                return false;\n            }\n        };\n\n        // Return the device type for the disk.\n        $scope.getDeviceType = function(disk) {\n            if(angular.isUndefined(disk)) {\n                return \"\";\n            }\n\n            if(disk.type === \"virtual\") {\n                if(disk.parent_type === \"lvm-vg\") {\n                    return \"Logical volume\";\n                } else if(disk.parent_type.indexOf(\"raid-\") === 0) {\n                    return \"RAID \" + disk.parent_type.split(\"-\")[1];\n                } else {\n                    return capitalizeFirstLetter(disk.parent_type);\n                }\n            } else if(disk.type === \"lvm-vg\") {\n                return \"Volume group\";\n            } else {\n                return capitalizeFirstLetter(disk.type);\n            }\n        };\n\n        // Return array of selected available disks.\n        $scope.getSelectedAvailable = function() {\n            var available = [];\n            angular.forEach($scope.available, function(disk) {\n                if(disk.$selected) {\n                    available.push(disk);\n                }\n            });\n            return available;\n        };\n\n        // Update the current mode for the available section and the all\n        // selected value.\n        $scope.updateAvailableSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var available = $scope.getSelectedAvailable();\n            if(available.length === 0) {\n                $scope.availableMode = SELECTION_MODE.NONE;\n            } else if(available.length === 1 && force) {\n                $scope.availableMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.availableMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.available.length === 0) {\n                $scope.availableAllSelected = false;\n            } else if(available.length === $scope.available.length) {\n                $scope.availableAllSelected = true;\n            } else {\n                $scope.availableAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the available disk.\n        $scope.toggleAvailableSelect = function(disk) {\n            disk.$selected = !disk.$selected;\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Toggle the selection of all available disks.\n        $scope.toggleAvailableAllSelect = function() {\n            angular.forEach($scope.available, function(disk) {\n                if(!$scope.availableAllSelected) {\n                    disk.$selected = true;\n                } else {\n                    disk.$selected = false;\n                }\n            });\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if checkboxes in the avaiable section should be\n        // disabled.\n        $scope.isAvailableDisabled = function() {\n            return ((\n                $scope.availableMode !== SELECTION_MODE.NONE &&\n                $scope.availableMode !== SELECTION_MODE.SINGLE &&\n                $scope.availableMode !== SELECTION_MODE.MUTLI) ||\n                $scope.isAllStorageDisabled());\n        };\n\n        // Return true if the disk can be formatted and mounted.\n        $scope.canFormatAndMount = function(disk) {\n            if($scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"lvm-vg\" || disk.has_partitions) {\n                return false;\n            } else if(disk.type === \"physical\" && disk.original.is_boot) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return the text for the partition button.\n        $scope.getPartitionButtonText = function(disk) {\n            if(disk.has_partitions) {\n                return \"Add partition\";\n            } else {\n                return \"Partition\";\n            }\n        };\n\n        $scope.availablePartitionSpace = function(disk) {\n            var space_to_reserve = 0;\n            if(!angular.isString(disk.original.partition_table_type)\n                || disk.original.partition_table_type === \"\") {\n                // Disk has no partition table, so reserve space for it.\n                space_to_reserve = PARTITION_TABLE_EXTRA_SPACE;\n                // ppc64el node requires that space be saved for the prep\n                // partition.\n                if($scope.node.architecture.indexOf(\"ppc64el\") === 0) {\n                    space_to_reserve += PREP_PARTITION_SIZE;\n                }\n            }\n            return ConverterService.roundByBlockSize(\n                disk.original.available_size - space_to_reserve,\n                PARTITION_ALIGNMENT_SIZE);\n        };\n\n        // Return true if a partition can be added to disk.\n        $scope.canAddPartition = function(disk) {\n            if(!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"partition\" || disk.type === \"lvm-vg\") {\n                return false;\n            } else if(disk.type === \"virtual\" &&\n                (disk.parent_type === \"lvm-vg\" ||\n                    disk.parent_type === \"bcache\")) {\n                return false;\n            } else if(angular.isString(disk.fstype) && disk.fstype !== \"\") {\n                return false;\n            }\n            // If we can fit a minimum partition, we're golden.\n            return ($scope.availablePartitionSpace(disk) -\n                MIN_PARTITION_SIZE) >= 0;\n        };\n\n        // Return true if the name is invalid.\n        $scope.isNameInvalid = function(disk) {\n            if(disk.name === \"\") {\n                return false;\n            } else if(isNameAlreadyInUse(disk.name, disk)) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Prevent logical volumes from changing the volume group prefix.\n        $scope.nameHasChanged = function(disk) {\n            if(isLogicalVolume(disk)) {\n                var parentName = disk.original.name.split(\"-\")[0] + \"-\";\n                var startsWith = disk.name.indexOf(parentName);\n                if(startsWith !== 0) {\n                    disk.name = parentName;\n                }\n            }\n        };\n\n        // Cancel the current available operation.\n        $scope.availableCancel = function(disk) {\n            $scope.updateAvailableSelection(true);\n            $scope.availableNew = {};\n        };\n\n        // Return true if the filesystem can be mounted at a directory.\n        $scope.usesMountPoint = function(fstype) {\n            return angular.isString(fstype) && fstype !== \"swap\";\n        };\n\n        // Return true if the filesystem uses storage (partition or\n        // block device).\n        $scope.usesStorage = function(fstype) {\n            return angular.isString(fstype) &&\n                fstype !== \"tmpfs\" && fstype !== \"ramfs\";\n        };\n\n        // Return true if the mount point is invalid.\n        $scope.isMountPointInvalid = function(mountPoint) {\n            if(angular.isUndefined(mountPoint) || mountPoint === \"\") {\n                return false;\n            } else if (mountPoint === \"none\") {\n                // XXX: Hack to allow \"swap\" filesystems to be mounted.\n                // This should be allowed only when fstype is 'swap' but\n                // doing that would require more refactoring (or more\n                // hacks) that I have time for right now.\n                return false;\n            } else if(mountPoint[0] !== \"/\") {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Return true if the disk can be deleted.\n        $scope.canDelete = function(disk) {\n            if (!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"lvm-vg\") {\n                return disk.original.used_size === 0;\n            } else {\n                return !disk.has_partitions;\n            }\n        };\n\n        // Enter delete mode.\n        $scope.availableDelete = function() {\n            $scope.availableMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete mode.\n        $scope.availableQuickDelete = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availableDelete();\n        };\n\n        // Return true if it can be edited.\n        $scope.canEdit = function(disk) {\n          if (!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n              return false;\n          } else {\n              return true;\n          }\n        };\n\n        // Enter Edit mode, disable certain fields based on disk type\n        $scope.availableEdit = function(disk) {\n            $scope.availableMode = SELECTION_MODE.EDIT;\n\n            if (disk.type === \"lvm-vg\") {\n                disk.$options = {\n                    editingTags: false,\n                    editingFilesystem: false\n                };\n            } else if (disk.type === \"partition\") {\n                disk.$options = {\n                    editingTags: false,\n                    editingFilesystem: true,\n                    fstype: disk.fstype\n                };\n            } else {\n                disk.$options = {\n                    editingFilesystem: true,\n                    editingTags: true,\n                    tags: angular.copy(disk.tags),\n                    fstype: disk.fstype\n                };\n                if (!$scope.canFormatAndMount(disk)) {\n                    disk.$options.editingFilesystem = false;\n                }\n            }\n        };\n\n        // Quickly enter Edit mode\n        $scope.availableQuickEdit = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availableEdit(disk);\n        };\n\n        // Save the disk which is in Edit mode\n        $scope.availableConfirmEdit = function(disk) {\n            var params = {\n                name: disk.name\n            };\n\n            // Do nothing if not valid.\n            if($scope.isNameInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Reset the name if its blank.\n            if(disk.name === \"\") {\n                disk.name = disk.original.name;\n            }\n\n            // Ensure logical volume has parent prefix in its name.\n            if(isLogicalVolume(disk)){\n                var parentName = disk.original.name.split(\"-\")[0] + \"-\";\n                params.name = disk.name.slice(parentName.length);\n            }\n\n            // Set filesystem options so formatting and mounting is performed.\n            if(angular.isDefined(disk.$options.fstype)) {\n                params.fstype = disk.$options.fstype;\n                params.mount_point = disk.$options.mountPoint || '';\n                params.mount_options = disk.$options.mountOptions || '';\n            }\n\n            // Update the tags for the disk.\n            if(angular.isArray(disk.$options.tags)) {\n                params.tags = disk.$options.tags.map(\n                    function(tag) { return tag.text; });\n            }\n\n            // Save the options.\n            if(disk.type === \"partition\") {\n                MachinesManager.updateFilesystem(\n                    $scope.node, disk.block_id, disk.partition_id,\n                    params.fstype, params.mount_point,\n                    params.mount_options, params.tags);\n            } else {\n                MachinesManager.updateDisk(\n                    $scope.node, disk.block_id, params);\n            }\n\n            // Set the options on the object so no flicker occurs while waiting\n            // for the new object to be received.\n            disk.fstype = disk.$options.fstype;\n            disk.mount_point = disk.$options.mountPoint;\n            disk.mount_options = disk.$options.mountOptions;\n            disk.tags = disk.$options.tags;\n            disk.$options = {};\n\n            // If the mount_point is set then we need to transition this to\n            // the filesystem section.\n            if(angular.isString(disk.mount_point) && disk.mount_point !== \"\") {\n                $scope.filesystems.push({\n                    \"name\": disk.name,\n                    \"size_human\": disk.size_human,\n                    \"fstype\": disk.fstype,\n                    \"mount_point\": disk.mount_point,\n                    \"mount_options\": disk.mount_options,\n                    \"block_id\": disk.block_id,\n                    \"partition_id\": disk.partition_id\n                });\n\n                // Remove the selected disk from available.\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n\n            // Deselect the disk after saving\n            disk.$selected = false;\n\n            // Update the current selections.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return the text for remove confirmation message.\n        $scope.getRemoveTypeText = function(disk) {\n            if(disk.type === \"filesystem\") {\n                if (angular.isObject(disk.original)) {\n                    disk = disk.original;\n                } else {\n                    return \"special filesystem\";\n                }\n            }\n\n            if(disk.type === \"physical\") {\n                return \"physical disk\";\n            } else if(disk.type === \"partition\") {\n                return \"partition\";\n            } else if(disk.type === \"lvm-vg\") {\n                return \"volume group\";\n            } else if(disk.type === \"virtual\") {\n                if(disk.parent_type === \"lvm-vg\") {\n                    return \"logical volume\";\n                } else if(disk.parent_type.indexOf(\"raid-\") === 0) {\n                    return \"RAID \" + disk.parent_type.split(\"-\")[1] + \" disk\";\n                } else {\n                    return disk.parent_type + \" disk\";\n                }\n            }\n        };\n\n        // Delete the disk, partition, or volume group.\n        $scope.availableConfirmDelete = function(disk) {\n            if(disk.type === \"lvm-vg\") {\n                // Delete the volume group.\n                MachinesManager.deleteVolumeGroup(\n                    $scope.node, disk.block_id);\n            } else if(disk.type === \"partition\") {\n                // Delete the partition.\n                MachinesManager.deletePartition(\n                    $scope.node, disk.partition_id);\n            } else {\n                // Delete the disk.\n                MachinesManager.deleteDisk(\n                    $scope.node, disk.block_id);\n            }\n\n            // Remove the selected disk from available.\n            var idx = $scope.available.indexOf(disk);\n            $scope.available.splice(idx, 1);\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Enter partition mode.\n        $scope.availablePartition = function(disk) {\n            $scope.availableMode = SELECTION_MODE.PARTITION;\n            // Set starting size to the maximum available space.\n            var size_and_units = disk.available_size_human.split(\" \");\n            disk.$options = {\n                size: size_and_units[0],\n                sizeUnits: size_and_units[1],\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\"\n            };\n        };\n\n        // Quickly enter partition mode.\n        $scope.availableQuickPartition = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availablePartition(disk);\n        };\n\n        // Get the new name of the partition.\n        $scope.getAddPartitionName = function(disk) {\n            var length, partitions = disk.original.partitions;\n            if(angular.isArray(partitions)) {\n                length = partitions.length;\n            } else {\n                length = 0;\n            }\n            if(disk.original.partition_table_type === \"mbr\" &&\n                length > 2) {\n                return disk.name + \"-part\" + (length + 2);\n            } else if($scope.node.architecture.indexOf(\"ppc64el\") === 0 &&\n                disk.original.is_boot) {\n                // Boot disk on ppc64el machines skip the first partition as\n                // its reserved for the prep partition.\n                return disk.name + \"-part\" + (length + 2);\n            } else {\n                return disk.name + \"-part\" + (length + 1);\n            }\n        };\n\n        // Return true if the size is invalid.\n        $scope.isAddPartitionSizeInvalid = function(disk) {\n            if(disk.$options.size === \"\" || !isNumber(disk.$options.size)) {\n                return true;\n            } else {\n                var bytes = ConverterService.unitsToBytes(\n                    disk.$options.size, disk.$options.sizeUnits);\n                if(bytes < MIN_PARTITION_SIZE) {\n                    return true;\n                } else if(bytes > disk.original.available_size) {\n                    // Round the size down to the lowest tolerance for that\n                    // to see if it now fits.\n                    var rounded = ConverterService.roundUnits(\n                        disk.$options.size, disk.$options.sizeUnits);\n                    if(rounded > disk.original.available_size) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        };\n\n        // Confirm the partition creation.\n        $scope.availableConfirmPartition = function(disk) {\n            // Do nothing if not valid.\n            if($scope.isAddPartitionSizeInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Get the bytes to create the partition.\n            var bytes = ConverterService.unitsToBytes(\n                disk.$options.size, disk.$options.sizeUnits);\n\n            // Accepting prefilled defaults means use whole disk (lp:1509535).\n            var size_and_units = disk.original.available_size_human.split(\" \");\n            if(disk.$options.size === size_and_units[0] &&\n               disk.$options.sizeUnits === size_and_units[1]) {\n                bytes = disk.original.available_size;\n            }\n\n            var removeDisk = false;\n            var available_space = $scope.availablePartitionSpace(disk);\n            if(bytes >= available_space) {\n                // Clamp to available space.\n                bytes = available_space;\n                // Remove the disk if partition uses all the remaining space.\n                removeDisk = true;\n            }\n\n            // Create the partition.\n            var params = {};\n            if(angular.isString(disk.$options.fstype) &&\n                disk.$options.fstype !== \"\") {\n                params.fstype = disk.$options.fstype;\n                if(disk.$options.mountPoint !== \"\") {\n                    params.mount_point = disk.$options.mountPoint;\n                    params.mount_options = disk.$options.mountOptions;\n                }\n            }\n            MachinesManager.createPartition(\n                $scope.node, disk.block_id, bytes, params);\n\n            // Remove the disk if needed.\n            if(removeDisk) {\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return array of selected cache sets.\n        $scope.getSelectedCacheSets = function() {\n            var cachesets = [];\n            angular.forEach($scope.cachesets, function(cacheset) {\n                if(cacheset.$selected) {\n                    cachesets.push(cacheset);\n                }\n            });\n            return cachesets;\n        };\n\n        // Update the currect mode for the cache sets section and the all\n        // selected value.\n        $scope.updateCacheSetsSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var cachesets = $scope.getSelectedCacheSets();\n            if(cachesets.length === 0) {\n                $scope.cachesetsMode = SELECTION_MODE.NONE;\n            } else if(cachesets.length === 1 && force) {\n                $scope.cachesetsMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.cachesetsMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.cachesets.length === 0) {\n                $scope.cachesetsAllSelected = false;\n            } else if(cachesets.length === $scope.cachesets.length) {\n                $scope.cachesetsAllSelected = true;\n            } else {\n                $scope.cachesetsAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the filesystem.\n        $scope.toggleCacheSetSelect = function(cacheset) {\n            cacheset.$selected = !cacheset.$selected;\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Toggle the selection of all filesystems.\n        $scope.toggleCacheSetAllSelect = function() {\n            angular.forEach($scope.cachesets, function(cacheset) {\n                if($scope.cachesetsAllSelected) {\n                    cacheset.$selected = false;\n                } else {\n                    cacheset.$selected = true;\n                }\n            });\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Return true if checkboxes in the cache sets section should be\n        // disabled.\n        $scope.isCacheSetsDisabled = function() {\n            return ((\n                $scope.isAllStorageDisabled() &&\n                !$scope.isSuperUser()) || (\n                $scope.cachesetsMode !== SELECTION_MODE.NONE &&\n                $scope.cachesetsMode !== SELECTION_MODE.SINGLE &&\n                $scope.cachesetsMode !== SELECTION_MODE.MUTLI));\n        };\n\n        // Cancel the current cache set operation.\n        $scope.cacheSetCancel = function() {\n            deselectAll($scope.cachesets);\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Can delete the cache set.\n        $scope.canDeleteCacheSet = function(cacheset) {\n            return (cacheset.used_by === \"\" &&\n                    !$scope.isAllStorageDisabled() &&\n                    $scope.isSuperUser());\n        };\n\n        // Enter delete mode.\n        $scope.cacheSetDelete = function() {\n            $scope.cachesetsMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete by selecting the cache set first.\n        $scope.quickCacheSetDelete = function(cacheset) {\n            deselectAll($scope.cachesets);\n            cacheset.$selected = true;\n            $scope.updateCacheSetsSelection(true);\n            $scope.cacheSetDelete();\n        };\n\n        // Confirm the delete action for cache set.\n        $scope.cacheSetConfirmDelete = function(cacheset) {\n            MachinesManager.deleteCacheSet(\n                $scope.node, cacheset.cache_set_id);\n\n            var idx = $scope.cachesets.indexOf(cacheset);\n            $scope.cachesets.splice(idx, 1);\n            $scope.updateCacheSetsSelection();\n        };\n\n        // Return true if a cache set can be created.\n        $scope.canCreateCacheSet = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length === 1) {\n                return (\n                    !selected[0].has_partitions &&\n                    !$scope.hasUnmountedFilesystem(selected[0]) &&\n                    selected[0].type !== \"lvm-vg\");\n            }\n            return false;\n        };\n\n        // Called to create a cache set.\n        $scope.createCacheSet = function() {\n            if(!$scope.canCreateCacheSet()) {\n                return;\n            }\n\n            // Create cache set.\n            var disk = $scope.getSelectedAvailable()[0];\n            MachinesManager.createCacheSet(\n                $scope.node, disk.block_id, disk.partition_id);\n\n            // Remove from available.\n            var idx = $scope.available.indexOf(disk);\n            $scope.available.splice(idx, 1);\n        };\n\n        // Return the reason a bcache device cannot be created.\n        $scope.getCannotCreateBcacheMsg = function() {\n            if($scope.cachesets.length === 0) {\n                return \"Create at least one cache set to create bcache\";\n            } else {\n                var selected = $scope.getSelectedAvailable();\n                if(selected.length === 1) {\n                    if($scope.hasUnmountedFilesystem(selected[0])) {\n                        return (\n                            \"Device is formatted; unformat the \" +\n                            \"device to create bcache\");\n                    } else if(selected[0].type === \"lvm-vg\") {\n                        return (\n                            \"Cannot use a logical volume as a backing \" +\n                            \"device for bcache.\");\n                    } else if(selected[0].has_partitions) {\n                        return (\n                            \"Device has already been partitioned; create a \" +\n                            \"new partition to use as the bcache backing \" +\n                            \"device\");\n                    } else {\n                        return null;\n                    }\n                } else {\n                    return \"Select only one available device to create bcache\";\n                }\n            }\n        };\n\n        // Return true if a bcache can be created.\n        $scope.canCreateBcache = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var msg = $scope.getCannotCreateBcacheMsg();\n            if(msg === null) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Enter bcache mode.\n        $scope.createBcache = function() {\n            if(!$scope.canCreateBcache()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.BCACHE;\n            $scope.availableNew = {\n                name: getNextName(\"bcache\"),\n                device: $scope.getSelectedAvailable()[0],\n                cacheset: $scope.cachesets[0],\n                cacheMode: \"writeback\",\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\",\n                tags: []\n            };\n        };\n\n        // Clear mount point when the fstype is changed.\n        $scope.fstypeChanged = function(options) {\n            if(options.fstype === null) {\n                options.mountPoint = \"\";\n                options.mountOptions = \"\";\n            }\n            else {\n                // Update the mount point to \"none\" if \"swap\" is\n                // selected, and vice-versa.\n                if ($scope.usesMountPoint(options.fstype)) {\n                    if (options.mountPoint === \"none\") {\n                        options.mountPoint = \"\";\n                    }\n                }\n                else {\n                    options.mountPoint = \"none\";\n                }\n            }\n        };\n\n        // Return true when the name of the new disk is invalid.\n        $scope.isNewDiskNameInvalid = function() {\n            if(!angular.isObject($scope.node) ||\n                !angular.isArray($scope.node.disks)) {\n                return true;\n            }\n\n            if($scope.availableNew.name === \"\") {\n                return true;\n            } else {\n                var i, j;\n                for(i = 0; i < $scope.node.disks.length; i++) {\n                    var disk = $scope.node.disks[i];\n                    if($scope.availableNew.name === disk.name) {\n                        return true;\n                    }\n                    if(angular.isArray(disk.partitions)) {\n                        for(j = 0; j < disk.partitions.length; j++) {\n                            var partition = disk.partitions[j];\n                            if($scope.availableNew.name === partition.name) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return true if bcache can be saved.\n        $scope.createBcacheCanSave = function() {\n            return (\n                !$scope.isNewDiskNameInvalid() &&\n                !$scope.isMountPointInvalid($scope.availableNew.mountPoint));\n        };\n\n        // Confirm and create the bcache device.\n        $scope.availableConfirmCreateBcache = function() {\n            if(!$scope.createBcacheCanSave()) {\n                return;\n            }\n\n            // Create the bcache.\n            var params = {\n                name: $scope.availableNew.name,\n                cache_set: $scope.availableNew.cacheset.cache_set_id,\n                cache_mode: $scope.availableNew.cacheMode\n            };\n            if($scope.availableNew.device.type === \"partition\") {\n                params.partition_id = $scope.availableNew.device.partition_id;\n            } else {\n                params.block_id = $scope.availableNew.device.block_id;\n            }\n            if(angular.isString($scope.availableNew.fstype) &&\n                $scope.availableNew.fstype !== \"\") {\n                params.fstype = $scope.availableNew.fstype;\n                // XXX: Inconsistent tests of mountPoint/mount_point; in\n                // places it's compared to \"\" (like here), in others\n                // it's tested with angular.isDefined(), others with\n                // angular.isString(), others angular.isString() ===\n                // false. This is *begging* for bugs.\n                if($scope.availableNew.mountPoint !== \"\") {\n                    params.mount_point = $scope.availableNew.mountPoint;\n                    params.mount_options = $scope.availableNew.mountOptions;\n                }\n            }\n            if(angular.isArray($scope.availableNew.tags)\n                && $scope.availableNew.tags.length > 0) {\n                params.tags = $scope.availableNew.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createBcache($scope.node, params);\n\n            // Remove device from available.\n            var idx = $scope.available.indexOf($scope.availableNew.device);\n            $scope.available.splice(idx, 1);\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a RAID can be created.\n        $scope.canCreateRAID = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length > 1) {\n                var i;\n                for(i = 0; i < selected.length; i++) {\n                    if($scope.hasUnmountedFilesystem(selected[i])) {\n                        return false;\n                    } else if(selected[i].type === \"lvm-vg\") {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n\n        // Called to create a RAID.\n        $scope.createRAID = function() {\n            if(!$scope.canCreateRAID()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.RAID;\n            $scope.availableNew = {\n                name: getNextName(\"md\"),\n                devices: $scope.getSelectedAvailable(),\n                mode: null,\n                spares: [],\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\",\n                tags: []\n            };\n            $scope.availableNew.mode = $scope.getAvailableRAIDModes()[0];\n        };\n\n        // Get the available RAID modes.\n        $scope.getAvailableRAIDModes = function() {\n            if(!angular.isObject($scope.availableNew) ||\n                !angular.isArray($scope.availableNew.devices)) {\n                return [];\n            }\n\n            var modes = [];\n            angular.forEach(RAID_MODES, function(mode) {\n                if($scope.availableNew.devices.length >= mode.min_disks) {\n                    modes.push(mode);\n                }\n            });\n            return modes;\n        };\n\n        // Return the total number of available spares for the current mode.\n        $scope.getTotalNumberOfAvailableSpares = function() {\n            var mode = $scope.availableNew.mode;\n            if(angular.isUndefined(mode) || !mode.allows_spares) {\n                return 0;\n            } else {\n                var diff = $scope.availableNew.devices.length - mode.min_disks;\n                if(diff < 0) {\n                    diff = 0;\n                }\n                return diff;\n            }\n        };\n\n        // Return the number of remaining spares that can be selected.\n        $scope.getNumberOfRemainingSpares = function() {\n            var allowed = $scope.getTotalNumberOfAvailableSpares();\n            if(allowed <= 0) {\n                return 0;\n            } else {\n                return allowed - $scope.availableNew.spares.length;\n            }\n        };\n\n        // Return true if the spares column should be shown.\n        $scope.showSparesColumn = function() {\n            return $scope.getTotalNumberOfAvailableSpares() > 0;\n        };\n\n        // Called when the RAID mode is changed to reset the selected spares.\n        $scope.RAIDModeChanged = function() {\n            $scope.availableNew.spares = [];\n        };\n\n        // Return true if the disk is an active RAID member.\n        $scope.isActiveRAIDMember = function(disk) {\n            if(!angular.isArray($scope.availableNew.spares)) {\n                return true;\n            } else {\n                var idx = $scope.availableNew.spares.indexOf(\n                    getUniqueKey(disk));\n                return idx === -1;\n            }\n        };\n\n        // Return true if the disk is a spare RAID member.\n        $scope.isSpareRAIDMember = function(disk) {\n            return !$scope.isActiveRAIDMember(disk);\n        };\n\n        // Set the disk as an active RAID member.\n        $scope.setAsActiveRAIDMember = function(disk) {\n            var idx = $scope.availableNew.spares.indexOf(getUniqueKey(disk));\n            if(idx > -1) {\n                $scope.availableNew.spares.splice(idx, 1);\n            }\n        };\n\n        // Set the disk as a spare RAID member.\n        $scope.setAsSpareRAIDMember = function(disk) {\n            var key = getUniqueKey(disk);\n            var idx = $scope.availableNew.spares.indexOf(key);\n            if(idx === -1) {\n                $scope.availableNew.spares.push(key);\n            }\n        };\n\n        // Return the size of the new RAID device.\n        $scope.getNewRAIDSize = function() {\n            if(angular.isUndefined($scope.availableNew.mode)) {\n                return \"\";\n            }\n            var calculateSize = $scope.availableNew.mode.calculateSize;\n            if(!angular.isFunction(calculateSize)) {\n                return \"\";\n            }\n\n            // Get the number of disks and the minimum disk size in the RAID.\n            var numDisks = (\n                $scope.availableNew.devices.length -\n                $scope.availableNew.spares.length);\n            var minSize = Number.MAX_VALUE;\n            angular.forEach($scope.availableNew.devices, function(device) {\n                // Get the size of the device. For a block device it will be\n                // at available_size and for a partition it will be at size.\n                var deviceSize = (\n                    device.original.available_size || device.original.size);\n                minSize = Math.min(minSize, deviceSize);\n            });\n\n            // Calculate the new size.\n            var size = calculateSize(minSize, numDisks);\n            return ConverterService.bytesToUnits(size).string;\n        };\n\n        // Return true if RAID can be saved.\n        $scope.createRAIDCanSave = function() {\n            return (\n                !$scope.isNewDiskNameInvalid() &&\n                !$scope.isMountPointInvalid($scope.availableNew.mountPoint));\n        };\n\n        // Confirm and create the RAID device.\n        $scope.availableConfirmCreateRAID = function() {\n            if(!$scope.createRAIDCanSave()) {\n                return;\n            }\n\n            // Create the RAID.\n            var params = {\n                name: $scope.availableNew.name,\n                level: $scope.availableNew.mode.level,\n                block_devices: [],\n                partitions: [],\n                spare_devices: [],\n                spare_partitions: []\n            };\n            angular.forEach($scope.availableNew.devices, function(device) {\n                if($scope.isActiveRAIDMember(device)) {\n                    if(device.type === \"partition\") {\n                        params.partitions.push(device.partition_id);\n                    } else {\n                        params.block_devices.push(device.block_id);\n                    }\n                } else {\n                    if(device.type === \"partition\") {\n                        params.spare_partitions.push(device.partition_id);\n                    } else {\n                        params.spare_devices.push(device.block_id);\n                    }\n                }\n            });\n            if(angular.isString($scope.availableNew.fstype) &&\n                $scope.availableNew.fstype !== \"\") {\n                params.fstype = $scope.availableNew.fstype;\n                if($scope.availableNew.mountPoint !== \"\") {\n                    params.mount_point = $scope.availableNew.mountPoint;\n                    params.mount_options = $scope.availableNew.mountOptions;\n                }\n            }\n            if(angular.isArray($scope.availableNew.tags)\n                && $scope.availableNew.tags.length > 0) {\n                params.tags = $scope.availableNew.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createRAID($scope.node, params);\n\n            // Remove devices from available.\n            angular.forEach($scope.availableNew.devices, function(device) {\n                var idx = $scope.available.indexOf($scope.availableNew.device);\n                $scope.available.splice(idx, 1);\n            });\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a volume group can be created.\n        $scope.canCreateVolumeGroup = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length > 0) {\n                var i;\n                for(i = 0; i < selected.length; i++) {\n                    if(selected[i].has_partitions) {\n                        return false;\n                    } else if($scope.hasUnmountedFilesystem(selected[i])) {\n                        return false;\n                    } else if(selected[i].type === \"lvm-vg\") {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n\n        // Called to create a volume group.\n        $scope.createVolumeGroup = function() {\n            if(!$scope.canCreateVolumeGroup()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.VOLUME_GROUP;\n            $scope.availableNew = {\n                name: getNextName(\"vg\"),\n                devices: $scope.getSelectedAvailable()\n            };\n        };\n\n        // Return the size of the new volume group.\n        $scope.getNewVolumeGroupSize = function() {\n            var total = 0;\n            angular.forEach($scope.availableNew.devices, function(device) {\n                // Add available_size or size if available_size is not set.\n                total += (\n                    device.original.available_size || device.original.size);\n            });\n            return ConverterService.bytesToUnits(total).string;\n        };\n\n        // Return true if volume group can be saved.\n        $scope.createVolumeGroupCanSave = function() {\n            return !$scope.isNewDiskNameInvalid();\n        };\n\n        // Confirm and create the volume group device.\n        $scope.availableConfirmCreateVolumeGroup = function() {\n            if(!$scope.createVolumeGroupCanSave()) {\n                return;\n            }\n\n            // Create the RAID.\n            var params = {\n                name: $scope.availableNew.name,\n                block_devices: [],\n                partitions: []\n            };\n            angular.forEach($scope.availableNew.devices, function(device) {\n                if(device.type === \"partition\") {\n                    params.partitions.push(device.partition_id);\n                } else {\n                    params.block_devices.push(device.block_id);\n                }\n            });\n            MachinesManager.createVolumeGroup($scope.node, params);\n\n            // Remove devices from available.\n            angular.forEach($scope.availableNew.devices, function(device) {\n                var idx = $scope.available.indexOf($scope.availableNew.device);\n                $scope.available.splice(idx, 1);\n            });\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a logical volume can be added to disk.\n        $scope.canAddLogicalVolume = function(disk) {\n            if(disk.type !== \"lvm-vg\") {\n                return false;\n            } else if(disk.original.available_size < MIN_PARTITION_SIZE) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Enter logical volume mode.\n        $scope.availableLogicalVolume = function(disk) {\n            $scope.availableMode = SELECTION_MODE.LOGICAL_VOLUME;\n            disk.$selected = true;\n            // Set starting size to the maximum available space.\n            var size_and_units = disk.available_size_human.split(\" \");\n            var namePrefix = disk.name + \"-lv\";\n            disk.$options = {\n                name: getNextName(namePrefix),\n                size: size_and_units[0],\n                sizeUnits: size_and_units[1],\n                fstype: null,\n                tags: []\n            };\n        };\n\n        // Return true if the name of the logical volume is invalid.\n        $scope.isLogicalVolumeNameInvalid = function(disk) {\n            if(!angular.isString(disk.$options.name)) {\n                return false;\n            }\n            var startsWith = disk.$options.name.indexOf(disk.name + \"-\");\n            return (\n                startsWith !== 0 ||\n                disk.$options.name.length <= disk.name.length + 1 ||\n                isNameAlreadyInUse(disk.$options.name));\n        };\n\n        // Don't allow the name of the logical volume to remove the volume\n        // group name.\n        $scope.newLogicalVolumeNameChanged = function(disk) {\n            if(!angular.isString(disk.$options.name)) {\n                return;\n            }\n            var startsWith = disk.$options.name.indexOf(disk.name + \"-\");\n            if(startsWith !== 0) {\n                disk.$options.name = disk.name + \"-\";\n            }\n        };\n\n        // Return true if the logical volume size is invalid.\n        $scope.isAddLogicalVolumeSizeInvalid = function(disk) {\n            // Uses the same logic as the partition size checked.\n            return $scope.isAddPartitionSizeInvalid(disk);\n        };\n\n        // Confirm the logical volume creation.\n        $scope.availableConfirmLogicalVolume = function(disk) {\n            // Do nothing if not valid.\n            if($scope.isLogicalVolumeNameInvalid(disk) ||\n                $scope.isAddLogicalVolumeSizeInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Get the bytes to create the partition.\n            var bytes = ConverterService.unitsToBytes(\n                disk.$options.size, disk.$options.sizeUnits);\n\n            // Accepting prefilled defaults means use whole disk (lp:1509535).\n            var size_and_units = disk.original.available_size_human.split(\" \");\n            if(disk.$options.size === size_and_units[0] &&\n               disk.$options.sizeUnits === size_and_units[1]) {\n                bytes = disk.original.available_size;\n            }\n\n            // Clamp to available space.\n            if(bytes > disk.original.available_size) {\n                bytes = disk.original.available_size;\n            }\n\n            // Remove the disk if it is going to use all the remaining space.\n            var removeDisk = false;\n            if(bytes === disk.original.available_size) {\n                removeDisk = true;\n            }\n\n            // Remove the volume group name from the name.\n            var name = disk.$options.name.slice(disk.name.length + 1);\n\n            // Create the logical volume.\n            var params = {};\n            if(angular.isString(disk.$options.fstype) &&\n                disk.$options.fstype !== \"\") {\n                params.fstype = disk.$options.fstype;\n                if(disk.$options.mountPoint !== \"\") {\n                    params.mount_point = disk.$options.mountPoint;\n                    params.mount_options = disk.$options.mountOptions;\n                }\n            }\n            if(angular.isArray(disk.$options.tags)\n                && disk.$options.tags.length > 0) {\n                params.tags = disk.$options.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createLogicalVolume(\n                $scope.node, disk.block_id, name, bytes, params);\n\n            // Remove the disk if needed.\n            if(removeDisk) {\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Returns true if storage cannot be edited.\n        // (it can't be changed when the node is in any state other\n        //  than Ready or Allocated)\n        $scope.isAllStorageDisabled = function() {\n            var authUser = UsersManager.getAuthUser();\n            if(!angular.isObject(authUser) || !angular.isObject($scope.node) ||\n                (!authUser.is_superuser &&\n                 authUser.username !== $scope.node.owner)) {\n                return true;\n            }else if (angular.isObject($scope.node) &&\n                [\"Ready\", \"Allocated\"].indexOf(\n                    $scope.node.status) === -1) {\n                // If the node is not ready or allocated, disable storage panel.\n                return true;\n            } else {\n                // The node must be either ready or broken. Enable it.\n                return false;\n            }\n        };\n\n        // Returns true if there are storage layout errors\n        $scope.hasStorageLayoutIssues = function() {\n            if(angular.isObject($scope.node) &&\n                angular.isArray($scope.node.storage_layout_issues)) {\n                return $scope.node.storage_layout_issues.length > 0;\n            }\n            return false;\n        };\n\n        // Tell $parent that the storageController has been loaded.\n        $scope.$parent.controllerLoaded('storageController', $scope);\n    }]);\n","/*\n * Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Manage a node's filesystems, including adding special filesystems.\n */\n\n(function() {\n\n    function SpecialFilesystem() {\n        this.fstype = \"tmpfs\";\n        this.mountPoint = \"\";\n        this.mountOptions = \"\";\n    }\n\n    SpecialFilesystem.prototype.isValid = function() {\n        return this.mountPoint.startsWith(\"/\");\n    };\n\n    SpecialFilesystem.prototype.describe = function() {\n        var parts = [this.fstype];\n        // Add the mount point if specified and valid.\n        if (this.mountPoint.startsWith(\"/\")) {\n            parts.push(\"at \" + this.mountPoint);\n        }\n        // Filesystem-specific bits.\n        switch (this.fstype) {\n        case \"tmpfs\":\n            // Extract size=n parameter from mount options. Other\n            // options could be added in the future.\n            var size = this.mountOptions.match(/\\bsize=(\\d+)(%?)/);\n            if (size !== null) {\n                if (size[2] === \"%\") {\n                    parts.push(\"limited to \" + size[1] + \"% of memory\");\n                } else {\n                    parts.push(\"limited to \" + size[1] + \" bytes\");\n                }\n            }\n            break;\n        case \"ramfs\":\n            // This filesystem does not recognise any options. Consider\n            // warning about lack of a size limit.\n            break;\n        }\n        return parts.join(\" \");\n    };\n\n    function NodeFilesystemsController($scope) {\n\n        // Which drop-down is currently selected, e.g. \"special\".\n        $scope.dropdown = null;\n\n        // Select the \"special\" drop-down.\n        $scope.addSpecialFilesystem = function() {\n            $scope.dropdown = \"special\";\n        };\n\n        // Deselect the \"special\" drop-down.\n        $scope.addSpecialFilesystemFinished = function() {\n            if ($scope.dropdown === \"special\") {\n                $scope.dropdown = null;\n            }\n        };\n    }\n\n    function NodeAddSpecialFilesystemController($scope, MachinesManager) {\n\n        $scope.filesystem = new SpecialFilesystem();\n        $scope.description = null;  // Updated by watch.\n\n        $scope.$watch(\"filesystem\", function(filesystem) {\n            $scope.description = filesystem.describe();\n        }, true);\n\n        $scope.canMount = function() {\n            return $scope.filesystem.isValid();\n        };\n\n        $scope.mount = function() {\n            MachinesManager.mountSpecialFilesystem(\n                $scope.node, $scope.filesystem.fstype,\n                $scope.filesystem.mountPoint,\n                $scope.filesystem.mountOptions);\n            $scope.addSpecialFilesystemFinished();\n        };\n\n        $scope.cancel = function() {\n            $scope.filesystem = new SpecialFilesystem();\n            $scope.addSpecialFilesystemFinished();\n        };\n    }\n\n    angular.module(\"MAAS\").controller(\n        \"NodeFilesystemsController\", [\n            \"$scope\", NodeFilesystemsController\n        ]);\n\n    angular.module(\"MAAS\").controller(\n        \"NodeAddSpecialFilesystemController\", [\n            \"$scope\", \"MachinesManager\",\n            NodeAddSpecialFilesystemController\n        ]);\n\n}());\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Events Controller\n */\n\nangular.module('MAAS').controller('NodeEventsController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'ControllersManager', 'EventsManagerFactory',\n    'ManagerHelperService', 'ErrorService', function($scope, $rootScope,\n        $routeParams, $location, MachinesManager, ControllersManager,\n        EventsManagerFactory, ManagerHelperService, ErrorService) {\n\n        // Events manager that is loaded once the node is loaded.\n        var eventsManager = null;\n\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.node = null;\n        $scope.events = [];\n        $scope.eventsLoaded = false;\n        $scope.days = 1;\n\n        // Called once the node is loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            // Get the events manager and load it.\n            eventsManager = EventsManagerFactory.getManager(node.id);\n            $scope.events = eventsManager.getItems();\n            $scope.days = eventsManager.getMaximumDays();\n            eventsManager.loadItems().then(function() {\n                $scope.eventsLoaded = true;\n            });\n\n            // Update the title when the fqdn of the node changes.\n            $scope.$watch(\"node.fqdn\", function() {\n                $rootScope.title = $scope.node.fqdn + \" - events\";\n            });\n        }\n\n        // Return the nice text for the given event.\n        $scope.getEventText = function(event) {\n            var text = event.type.description;\n            if(angular.isString(event.description) &&\n                event.description.length > 0) {\n                text += \" - \" + event.description;\n            }\n            return text;\n        };\n\n        // Called to load more events.\n        $scope.loadMore = function() {\n            $scope.days += 1;\n            eventsManager.loadMaximumDays($scope.days);\n        };\n\n        if($location.path().indexOf('/controller') !== -1) {\n            $scope.nodesManager = ControllersManager;\n            $scope.type_name = 'controller';\n            $rootScope.page = 'controllers';\n        }else{\n            $scope.nodesManager = MachinesManager;\n            $scope.type_name = 'machine';\n            $rootScope.page = 'machines';\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n            // If redirected from the NodeDetailsController then the node\n            // will already be active. No need to set it active again.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n\n        // Destroy the events manager when the scope is destroyed. This is so\n        // the client will not recieve any more notifications about events\n        // for this node.\n        $scope.$on(\"$destroy\", function() {\n            if(angular.isObject(eventsManager)) {\n                eventsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Script Result Controller\n */\n\nangular.module('MAAS').controller('NodeResultController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'ControllersManager', 'NodeResultsManagerFactory',\n    'ManagerHelperService', 'ErrorService',\n    function($scope, $rootScope, $routeParams, $location, MachinesManager,\n             ControllersManager, NodeResultsManagerFactory,\n             ManagerHelperService, ErrorService) {\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.resultLoaded = false;\n        $scope.node = null;\n        $scope.output = 'combined';\n        $scope.result = null;\n\n        $scope.get_result_data = function(output) {\n            $scope.output = output;\n            $scope.data = \"Loading...\";\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            nodeResultsManager.get_result_data(\n                $scope.result.id, $scope.output).then(\n                    function(data) {\n                        if(data === '') {\n                            $scope.data = \"Empty file.\";\n                        }else{\n                            $scope.data = data;\n                        }\n                    });\n        };\n\n        // Called once the node is loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            // Get the NodeResultsManager and load it.\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            var requestedResult = parseInt($routeParams.id, 10);\n            nodeResultsManager.getItem(requestedResult).then(function(result) {\n                $scope.result = result;\n                $scope.get_result_data($scope.output);\n                $scope.resultLoaded = true;\n                $rootScope.title = $scope.node.fqdn + \" - \" +\n                    $scope.result.name;\n            });\n        }\n\n        // Update the title when the fqdn of the node changes.\n        $scope.$watch(\"node.fqdn\", function() {\n            if(angular.isObject($scope.node) &&\n               angular.isObject($scope.result)) {\n                $rootScope.title = $scope.node.fqdn + \" - \" +\n                    $scope.result.name;\n            }\n        });\n\n        if($location.path().indexOf(\"/controller\") !== -1) {\n            $scope.nodesManager = ControllersManager;\n            $scope.type_name = 'controller';\n            $rootScope.page = 'controllers';\n        }else{\n            $scope.nodesManager = MachinesManager;\n            $scope.type_name = 'machine';\n            $rootScope.page = 'machines';\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n            // If redirected from the NodeDetailsController then the node\n            // will already be active. No need to set it active again.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n\n        // Destroy the NodeResultsManager when the scope is destroyed. This is\n        // so the client will not recieve any more notifications about results\n        // from this node.\n        $scope.$on(\"$destroy\", function() {\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            if(angular.isObject(nodeResultsManager)) {\n                nodeResultsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Results Controller\n */\n\nangular.module('MAAS').controller('NodeResultsController', [\n    '$scope', '$routeParams', '$location', 'MachinesManager',\n    'ControllersManager', 'NodeResultsManagerFactory', 'ManagerHelperService',\n    'ErrorService',\n    function($scope, $routeParams, $location, MachinesManager,\n             ControllersManager, NodeResultsManagerFactory,\n             ManagerHelperService, ErrorService) {\n\n        // NodeResultsManager that is loaded once the node is loaded.\n        $scope.nodeResultsManager = null;\n        // References to manager data used in scope.\n        $scope.commissioning_results = null;\n        $scope.testing_results = null;\n        $scope.installation_results = null;\n        $scope.results = null;\n\n        // List of logs available.\n        $scope.logs = {\n            option: null,\n            availableOptions: []\n        };\n        // Log content being displayed.\n        $scope.logOutput = 'Loading...';\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.resultsLoaded = false;\n        $scope.node = null;\n\n        function updateLogs() {\n            var i;\n            var option;\n            var had_installation = $scope.logs.availableOptions.length === 3;\n            $scope.logs.availableOptions.length = 0;\n            // XXX ltrager 2017-12-01 - Only show the current installation log\n            // if the machine is deploying, deployed, or failed deploying. The\n            // logs page needs to be redesigned to show previous installation\n            // results.\n            if($scope.installation_results &&\n                    $scope.installation_results.length > 0 && (\n                        $scope.node.status_code === 6 ||\n                        $scope.node.status_code === 9 ||\n                        $scope.node.status_code === 11)) {\n                // If installation fails Curtin uploads a tar file of logs, the\n                // UI needs to display the text log file, not the tar.\n                for(i = 0; i < $scope.installation_results.length; i++) {\n                    if($scope.installation_results[i].name ===\n                            \"/tmp/install.log\") {\n                        $scope.logs.availableOptions.push({\n                            'title': 'Installation output',\n                            'id': $scope.installation_results[i].id\n                        });\n                        break;\n                    }\n                }\n            }\n            $scope.logs.availableOptions.push({\n                'title': 'Machine output (YAML)',\n                'id': 'summary_yaml'\n            });\n            $scope.logs.availableOptions.push({\n                'title': 'Machine output (XML)',\n                'id': 'summary_xml'\n            });\n            if(!had_installation &&\n               $scope.logs.availableOptions.length === 3) {\n                // A new installation log has appeared, show it.\n                $scope.logs.option = $scope.logs.availableOptions[0];\n            }else if(!$scope.selectedLog || (\n                had_installation && $scope.logs.length === 2)) {\n                // No longer in a deployed state.\n                $scope.logs.option = $scope.logs.availableOptions[0];\n            }\n        }\n\n        // Called once the node has loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n            // Get the NodeResultsManager and load it.\n            $scope.nodeResultsManager = NodeResultsManagerFactory.getManager(\n                node, $scope.section.area);\n            $scope.nodeResultsManager.loadItems().then(function() {\n                $scope.commissioning_results =\n                    $scope.nodeResultsManager.commissioning_results;\n                $scope.testing_results =\n                    $scope.nodeResultsManager.testing_results;\n                $scope.installation_results =\n                    $scope.nodeResultsManager.installation_results;\n                $scope.results = $scope.nodeResultsManager.results;\n                // Only load and monitor logs when on the logs page.\n                if($scope.section.area === \"logs\") {\n                    updateLogs();\n                    $scope.$watch(\"installation_results\", updateLogs, true);\n                    $scope.$watch(\n                        \"installation_results\", $scope.updateLogOutput, true);\n                }\n                $scope.resultsLoaded = true;\n            });\n        }\n\n        if($location.path().indexOf('/controller') !== -1 ){\n            $scope.nodesManager = ControllersManager;\n        } else {\n            $scope.nodesManager = MachinesManager;\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n                // If redirected from the NodeDetailsController then the node\n                // will already be active. No need to set it active again.\n                var activeNode = $scope.nodesManager.getActiveItem();\n                if(angular.isObject(activeNode) &&\n                   activeNode.system_id === $routeParams.system_id) {\n                    nodeLoaded(activeNode);\n                } else {\n                    $scope.nodesManager.setActiveItem(\n                        $routeParams.system_id).then(function(node) {\n                            nodeLoaded(node);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                }\n            });\n\n        $scope.updateLogOutput = function() {\n            $scope.logOutput = \"Loading...\";\n            if(!$scope.node) {\n                return;\n            }else if($scope.logs.option.id === 'summary_xml') {\n                $scope.nodesManager.getSummaryXML($scope.node).then(\n                    function(output) {\n                        $scope.logOutput = output;\n                    });\n            }else if($scope.logs.option.id === 'summary_yaml') {\n                $scope.nodesManager.getSummaryYAML($scope.node).then(\n                    function(output) {\n                        $scope.logOutput = output;\n                    });\n            } else {\n                var result = null;\n                var i;\n                // Find the installation result to be displayed.\n                for(i = 0; i < $scope.installation_results.length; i++) {\n                    if($scope.installation_results[i].id ===\n                       $scope.logs.option.id) {\n                        result = $scope.installation_results[i];\n                        break;\n                    }\n                }\n                switch(result.status) {\n                    case 0:\n                        $scope.logOutput = \"System is booting...\";\n                        break;\n                    case 1:\n                        $scope.logOutput = \"Installation has begun!\";\n                        break;\n                    case 2:\n                        $scope.nodeResultsManager.get_result_data(\n                            result.id, 'combined').then(function(output) {\n                                if(output === '') {\n                                    $scope.logOutput =\n                                        \"Installation has succeeded but \" +\n                                        \"no output was given.\";\n                                } else {\n                                    $scope.logOutput = output;\n                                }\n                            });\n                        break;\n                    case 3:\n                        $scope.nodeResultsManager.get_result_data(\n                            result.id, 'combined').then(function(output) {\n                                if(output === '') {\n                                    $scope.logOutput =\n                                        \"Installation has failed and no \" +\n                                        \"output was given.\";\n                                } else {\n                                    $scope.logOutput = output;\n                                }\n                            });\n                        break;\n                    case 4:\n                        $scope.logOutput =\n                            \"Installation failed after 40 minutes.\";\n                        break;\n                    case 5:\n                        $scope.logOutput = \"Installation was aborted.\";\n                        break;\n                    default:\n                        $scope.logOutput = \"BUG: Unknown log status \" +\n                            result.status;\n                        break;\n                }\n            }\n        };\n\n        $scope.loadHistory = function(result) {\n            result.showing_results = false;\n            // History has already been loaded, no need to request it.\n            if(angular.isArray(result.history_list)) {\n                result.showing_history = true;\n                return;\n            }\n            result.loading_history = true;\n            $scope.nodeResultsManager.get_history(result.id).then(\n                function(history) {\n                    result.history_list = history;\n                    result.loading_history = false;\n                    result.showing_history = true;\n                });\n        };\n\n        // Destroy the NodeResultsManager when the scope is destroyed. This is\n        // so the client will not recieve any more notifications about results\n        // from this node.\n        $scope.$on(\"$destroy\", function() {\n            if(angular.isObject($scope.nodeResultsManager)) {\n                $scope.nodeResultsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes List Controller\n */\n\nangular.module('MAAS').controller('NodesListController', [\n    '$q', '$scope', '$interval', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'DevicesManager', 'ControllersManager',\n    'GeneralManager', 'ManagerHelperService', 'SearchService',\n    'ZonesManager', 'UsersManager', 'ServicesManager', 'ScriptsManager',\n    'SwitchesManager', 'ResourcePoolsManager',\n    function($q, $scope, $interval, $rootScope, $routeParams, $location,\n        MachinesManager, DevicesManager, ControllersManager, GeneralManager,\n        ManagerHelperService, SearchService, ZonesManager, UsersManager,\n        ServicesManager, ScriptsManager, SwitchesManager,\n        ResourcePoolsManager) {\n\n        // Mapping of device.ip_assignment to viewable text.\n        var DEVICE_IP_ASSIGNMENT = {\n            external: \"External\",\n            dynamic: \"Dynamic\",\n            \"static\": \"Static\"\n        };\n\n        // Set title and page.\n        $rootScope.title = \"Machines\";\n        $rootScope.page = \"machines\";\n\n        // Set initial values.\n        $scope.MAAS_config = MAAS_config;\n        $scope.machines = MachinesManager.getItems();\n        $scope.zones = ZonesManager.getItems();\n        $scope.pools = ResourcePoolsManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.switches = SwitchesManager.getItems();\n        $scope.showswitches = $routeParams.switches === 'on';\n        $scope.currentpage = \"machines\";\n        $scope.osinfo = {};\n        $scope.scripts = ScriptsManager.getItems();\n        $scope.loading = true;\n\n        $scope.tabs = {};\n        $scope.pluralize = function(tab) {\n            var singulars = {\n                'machines': 'machine',\n                'switches': 'switch',\n                'devices': 'device',\n                'controllers': 'controller',\n            };\n            var verb = singulars[tab];\n            if ($scope.tabs[tab].selectedItems.length > 1) {\n                verb = tab;\n            };\n            return verb;\n        };\n        // Machines tab.\n        $scope.tabs.machines = {};\n        $scope.tabs.machines.pagetitle = \"Machines\";\n        $scope.tabs.machines.currentpage = \"machines\";\n        $scope.tabs.machines.manager = MachinesManager;\n        $scope.tabs.machines.previous_search = \"\";\n        $scope.tabs.machines.search = \"\";\n        $scope.tabs.machines.searchValid = true;\n        $scope.tabs.machines.selectedItems = MachinesManager.getSelectedItems();\n        $scope.tabs.machines.metadata = MachinesManager.getMetadata();\n        $scope.tabs.machines.filters = SearchService.getEmptyFilter();\n        $scope.tabs.machines.actionOption = null;\n        $scope.tabs.machines.takeActionOptions = [];\n        $scope.tabs.machines.actionErrorCount = 0;\n        $scope.tabs.machines.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.machines.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.tabs.machines.zoneSelection = null;\n        $scope.tabs.machines.poolSelection = null;\n        $scope.tabs.machines.poolAction = 'select-pool';\n        $scope.tabs.machines.newPool = {};\n        $scope.tabs.machines.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.tabs.machines.releaseOptions = {};\n        $scope.tabs.machines.commissioningSelection = [];\n        $scope.tabs.machines.testSelection = [];\n\n        // Pools tab.\n        $scope.tabs.pools = {};\n        // The Pools tab is actually a sub tab of Machines.\n        $scope.tabs.pools.pagetitle = \"Machines\";\n        $scope.tabs.pools.currentpage = \"pools\";\n        $scope.tabs.pools.manager = ResourcePoolsManager;\n        $scope.tabs.pools.actionOption = false;\n        $scope.tabs.pools.newPool = {name: null, description: null};\n        $scope.tabs.pools.addPool = function() {\n            $scope.tabs.pools.actionOption = true;\n        };\n        $scope.tabs.pools.cancelAddPool = function() {\n            $scope.tabs.pools.actionOption = false;\n            $scope.tabs.pools.newPool = {};\n        };\n        $scope.tabs.pools.activeTarget = null;\n        $scope.tabs.pools.activeTargetAction = null;\n        $scope.tabs.pools.actionErrorMessage = null;\n        $scope.tabs.pools.initiatePoolAction = function(pool, action) {\n            let tab = $scope.tabs.pools;\n            // reset state in case of switching between deletes\n            tab.cancelPoolAction();\n            tab.activeTargetAction = action;\n            tab.activeTarget = pool;\n            tab.editingPool = pool;  // used by maas-obj-form for editing\n        };\n        $scope.tabs.pools.cancelPoolAction = function() {\n            let tab = $scope.tabs.pools;\n            tab.activeTargetAction = null;\n            tab.activeTarget = null;\n            tab.actionErrorMessage = null;\n        };\n        $scope.tabs.pools.isPoolAction = function(pool, action) {\n            let tab = $scope.tabs.pools;\n            return (\n                action === undefined || tab.activeTargetAction === action) &&\n                tab.activeTarget !== null &&\n                tab.activeTarget.id === pool.id;\n        };\n        $scope.tabs.pools.actionConfirmEditPool = function() {\n            $scope.tabs.pools.cancelPoolAction();\n        };\n        $scope.tabs.pools.actionConfirmDeletePool = function() {\n            let tab = $scope.tabs.pools;\n            tab.manager.deleteItem(tab.activeTarget).then(\n                tab.cancelPoolAction,\n                function(error) {\n                    $scope.tabs.pools.actionErrorMessage = error;\n                });\n        };\n        $scope.tabs.pools.goToPoolMachines = function(pool) {\n            $scope.clearSearch('machines');\n            $scope.toggleFilter('pool', pool.name, 'machines');\n            $scope.toggleTab('machines');\n            // update the location URL otherwise to match the tab\n            $location.path('/machines');\n        }\n        $scope.tabs.pools.isDefaultPool = function(pool) {\n            return pool.id === 0;\n        };\n\n        // Device tab.\n        $scope.tabs.devices = {};\n        $scope.tabs.devices.pagetitle = \"Devices\";\n        $scope.tabs.devices.currentpage = \"devices\";\n        $scope.tabs.devices.manager = DevicesManager;\n        $scope.tabs.devices.previous_search = \"\";\n        $scope.tabs.devices.search = \"\";\n        $scope.tabs.devices.searchValid = true;\n        $scope.tabs.devices.selectedItems = DevicesManager.getSelectedItems();\n        $scope.tabs.devices.filtered_items = [];\n        $scope.tabs.devices.predicate = 'fqdn';\n        $scope.tabs.devices.allViewableChecked = false;\n        $scope.tabs.devices.metadata = DevicesManager.getMetadata();\n        $scope.tabs.devices.filters = SearchService.getEmptyFilter();\n        $scope.tabs.devices.column = 'fqdn';\n        $scope.tabs.devices.actionOption = null;\n        $scope.tabs.devices.takeActionOptions = [];\n        $scope.tabs.devices.actionErrorCount = 0;\n        $scope.tabs.devices.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.devices.zoneSelection = null;\n        $scope.tabs.devices.poolSelection = null;\n        $scope.tabs.devices.poolAction = 'select-pool';\n        $scope.tabs.devices.newPool = {};\n\n        // Controller tab.\n        $scope.tabs.controllers = {};\n        $scope.tabs.controllers.pagetitle = \"Controllers\";\n        $scope.tabs.controllers.currentpage = \"controllers\";\n        $scope.tabs.controllers.manager = ControllersManager;\n        $scope.tabs.controllers.previous_search = \"\";\n        $scope.tabs.controllers.search = \"\";\n        $scope.tabs.controllers.searchValid = true;\n        $scope.tabs.controllers.selectedItems =\n            ControllersManager.getSelectedItems();\n        $scope.tabs.controllers.filtered_items = [];\n        $scope.tabs.controllers.predicate = 'fqdn';\n        $scope.tabs.controllers.allViewableChecked = false;\n        $scope.tabs.controllers.metadata = ControllersManager.getMetadata();\n        $scope.tabs.controllers.filters = SearchService.getEmptyFilter();\n        $scope.tabs.controllers.column = 'fqdn';\n        $scope.tabs.controllers.actionOption = null;\n        // Rack controllers contain all options\n        $scope.tabs.controllers.takeActionOptions = [];\n        $scope.tabs.controllers.actionErrorCount = 0;\n        $scope.tabs.controllers.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.controllers.zoneSelection = null;\n        $scope.tabs.controllers.poolSelection = null;\n        $scope.tabs.controllers.poolAction = 'select-pool';\n        $scope.tabs.controllers.newPool = {};\n        $scope.tabs.controllers.syncStatuses = {};\n        $scope.tabs.controllers.addController = false;\n        $scope.tabs.controllers.registerUrl = MAAS_config.register_url;\n        $scope.tabs.controllers.registerSecret = MAAS_config.register_secret;\n\n        // Switch tab.\n        $scope.tabs.switches = {};\n        $scope.tabs.switches.pagetitle = \"Switches\";\n        $scope.tabs.switches.currentpage = \"switches\";\n        $scope.tabs.switches.manager = SwitchesManager;\n        $scope.tabs.switches.previous_search = \"\";\n        $scope.tabs.switches.search = \"\";\n        $scope.tabs.switches.searchValid = true;\n        $scope.tabs.switches.selectedItems = SwitchesManager.getSelectedItems();\n        $scope.tabs.switches.predicate = 'fqdn';\n        $scope.tabs.switches.allViewableChecked = false;\n        $scope.tabs.switches.metadata = SwitchesManager.getMetadata();\n        $scope.tabs.switches.filters = SearchService.getEmptyFilter();\n        $scope.tabs.switches.column = 'fqdn';\n        $scope.tabs.switches.actionOption = null;\n        $scope.tabs.switches.takeActionOptions = [];\n        $scope.tabs.switches.actionErrorCount = 0;\n        $scope.tabs.switches.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.switches.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.tabs.switches.zoneSelection = null;\n        $scope.tabs.switches.poolSelection = null;\n        $scope.tabs.switches.poolAction = 'select-pool';\n        $scope.tabs.switches.newPool = {};\n        $scope.tabs.switches.commissioningSelection = [];\n        $scope.tabs.switches.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.tabs.switches.releaseOptions = {};\n\n\n        // Options for add hardware dropdown.\n        $scope.addHardwareOption = null;\n        $scope.addHardwareOptions = [\n            {\n                name: \"machine\",\n                title: \"Machine\"\n            },\n            {\n                name: \"chassis\",\n                title: \"Chassis\"\n            }\n        ];\n\n        // This will hold the AddHardwareController once it is initialized.\n        // The controller will set this variable as it's always a child of\n        // this scope.\n        $scope.addHardwareScope = null;\n\n        // This will hold the AddDeviceController once it is initialized.\n        // The controller will set this variable as it's always a child of\n        // this scope.\n        $scope.addDeviceScope = null;\n\n        // When the addHardwareScope is hidden it will emit this event. We\n        // clear the call to action button, so it can be used again.\n        $scope.$on(\"addHardwareHidden\", function() {\n            $scope.addHardwareOption = null;\n        });\n\n        // Return true if the tab is in viewing selected mode.\n        function isViewingSelected(tab) {\n            var search = $scope.tabs[tab].search.toLowerCase();\n            return search === \"in:(selected)\" || search === \"in:selected\";\n        }\n\n        // Sets the search bar to only show selected.\n        function enterViewSelected(tab) {\n            $scope.tabs[tab].previous_search = $scope.tabs[tab].search;\n            $scope.tabs[tab].search = \"in:(Selected)\";\n        }\n\n        // Clear search bar from viewing selected.\n        function leaveViewSelected(tab) {\n            if(isViewingSelected(tab)) {\n                $scope.tabs[tab].search = $scope.tabs[tab].previous_search;\n                $scope.updateFilters(tab);\n            }\n        }\n\n        // Called to update `allViewableChecked`.\n        function updateAllViewableChecked(tab) {\n            // Not checked when the filtered nodes are empty.\n            if($scope.tabs[tab].filtered_items.length === 0) {\n                $scope.tabs[tab].allViewableChecked = false;\n                return;\n            }\n\n            // Loop through all filtered nodes and see if all are checked.\n            var i;\n            for(i = 0; i < $scope.tabs[tab].filtered_items.length; i++) {\n                if(!$scope.tabs[tab].filtered_items[i].$selected) {\n                    $scope.tabs[tab].allViewableChecked = false;\n                    return;\n                }\n            }\n            $scope.tabs[tab].allViewableChecked = true;\n        }\n\n        function clearAction(tab) {\n            resetActionProgress(tab);\n            leaveViewSelected(tab);\n            $scope.tabs[tab].actionOption = null;\n            $scope.tabs[tab].zoneSelection = null;\n            $scope.tabs[tab].poolSelection = null;\n            $scope.tabs[tab].poolAction = 'select-pool';\n            $scope.tabs[tab].newPool = {};\n            if(tab === \"machines\" || tab === \"switches\") {\n                // Possible for this to be called before the osSelect\n                // direction is initialized. In that case it has not\n                // created the $reset function on the model object.\n                if(angular.isFunction(\n                    $scope.tabs[tab].osSelection.$reset)) {\n                    $scope.tabs[tab].osSelection.$reset();\n                }\n                $scope.tabs[tab].commissionOptions.enableSSH = false;\n                $scope.tabs[tab].commissionOptions.skipNetworking = false;\n                $scope.tabs[tab].commissionOptions.skipStorage = false;\n                $scope.tabs[tab].commissionOptions.updateFirmware = false;\n                $scope.tabs[tab].commissionOptions.configureHBA = false;\n            }\n            $scope.tabs[tab].commissioningSelection = [];\n            $scope.tabs[tab].testSelection = [];\n        }\n\n        // Clear the action if required.\n        function shouldClearAction(tab) {\n            if($scope.tabs[tab].selectedItems.length === 0) {\n                clearAction(tab);\n            }\n            if($scope.tabs[tab].actionOption && !isViewingSelected(tab)) {\n                $scope.tabs[tab].actionOption = null;\n            }\n        }\n\n        // Called when the filtered_items are updated. Checks if the\n        // filtered_items are empty and if the search still matches the\n        // previous search. This will reset the search when no nodes match\n        // the current filter.\n        function removeEmptyFilter(tab) {\n            if($scope.tabs[tab].filtered_items.length === 0 &&\n                $scope.tabs[tab].search !== \"\" &&\n                $scope.tabs[tab].search === $scope.tabs[tab].previous_search) {\n                $scope.tabs[tab].search = \"\";\n                $scope.updateFilters(tab);\n            }\n        }\n\n        // Update the number of selected items which have an error based on the\n        // current selected action.\n        function updateActionErrorCount(tab) {\n            var i;\n            $scope.tabs[tab].actionErrorCount = 0;\n            for(i = 0; i < $scope.tabs[tab].selectedItems.length; i++) {\n                var supported = $scope.supportsAction(\n                    $scope.tabs[tab].selectedItems[i], tab);\n                if(!supported) {\n                    $scope.tabs[tab].actionErrorCount += 1;\n                }\n                $scope.tabs[tab].selectedItems[i].action_failed = false;\n            }\n        }\n\n        // Reset actionProgress on tab to zero.\n        function resetActionProgress(tab) {\n            var progress = $scope.tabs[tab].actionProgress;\n            progress.completed = progress.total = 0;\n            progress.errors = {};\n            progress.showing_confirmation = false;\n            progress.affected_nodes = 0;\n        }\n\n        // Add error to action progress and group error messages by nodes.\n        function addErrorToActionProgress(tab, error, node) {\n            var progress = $scope.tabs[tab].actionProgress;\n            progress.completed += 1;\n            var nodes = progress.errors[error];\n            if(angular.isUndefined(nodes)) {\n                progress.errors[error] = [node];\n            } else {\n                nodes.push(node);\n            }\n        }\n\n        // After an action has been performed check if we can leave all nodes\n        // selected or if an error occured and we should only show the failed\n        // nodes.\n        function updateSelectedItems(tab) {\n            if(!$scope.hasActionsFailed(tab)) {\n                if(!$scope.hasActionsInProgress(tab)) {\n                     clearAction(tab);\n                     enterViewSelected(tab);\n                }\n                return;\n            }\n            angular.forEach($scope.tabs[tab].manager.getItems(),\n                    function(node) {\n                if(node.action_failed === false) {\n                    $scope.tabs[tab].manager.unselectItem(node.system_id);\n                }\n            });\n        }\n\n        // Toggles between the current tab.\n        $scope.toggleTab = function(tab) {\n            $rootScope.title = $scope.tabs[tab].pagetitle;\n            $rootScope.page = tab;\n            $scope.currentpage = tab;\n\n            switch(tab) {\n            case 'machines':\n                $scope.osinfo = GeneralManager.getData('osinfo');\n                $scope.tabs.machines.takeActionOptions = GeneralManager.getData(\n                    'machine_actions');\n                break;\n            case 'devices':\n                $scope.tabs.devices.takeActionOptions = GeneralManager.getData(\n                    'device_actions');\n                break;\n            case 'controllers':\n                $scope.tabs.controllers.takeActionOptions =\n                    GeneralManager.getData('rack_controller_actions');\n                break;\n            case 'switches':\n                // XXX: Which actions should there be?\n                $scope.tabs.switches.takeActionOptions = GeneralManager.getData(\n                    \"machine_actions\");\n                break;\n            }\n        };\n\n        // Clear the search bar.\n        $scope.clearSearch = function(tab) {\n            $scope.tabs[tab].search = \"\";\n            $scope.updateFilters(tab);\n        };\n\n        // Mark a node as selected or unselected.\n        $scope.toggleChecked = function(node, tab) {\n            if(tab !== 'machines' && tab !== 'switches') {\n                if($scope.tabs[tab].manager.isSelected(node.system_id)) {\n                    $scope.tabs[tab].manager.unselectItem(node.system_id);\n                } else {\n                    $scope.tabs[tab].manager.selectItem(node.system_id);\n                }\n                updateAllViewableChecked(tab);\n            }\n            updateActionErrorCount(tab);\n            shouldClearAction(tab);\n        };\n\n        // Select all viewable nodes or deselect all viewable nodes.\n        $scope.toggleCheckAll = function(tab) {\n            if(tab !== 'machines' && tab !== 'switches') {\n                if($scope.tabs[tab].allViewableChecked) {\n                    angular.forEach(\n                        $scope.tabs[tab].filtered_items, function(node) {\n                            $scope.tabs[tab].manager.unselectItem(\n                                node.system_id);\n                    });\n                } else {\n                    angular.forEach(\n                        $scope.tabs[tab].filtered_items, function(node) {\n                            $scope.tabs[tab].manager.selectItem(\n                                node.system_id);\n                    });\n                }\n                updateAllViewableChecked(tab);\n            }\n            updateActionErrorCount(tab);\n            shouldClearAction(tab);\n        };\n\n        $scope.onNodeListingChanged = function(nodes, tab) {\n            if(nodes.length === 0 &&\n                $scope.tabs[tab].search !== \"\" &&\n                $scope.tabs[tab].search === $scope.tabs[tab].previous_search) {\n                $scope.tabs[tab].search = \"\";\n                $scope.updateFilters(tab);\n            }\n        };\n\n        // When the filtered nodes change update if all check buttons\n        // should be checked or not.\n        $scope.$watchCollection(\"tabs.devices.filtered_items\", function() {\n            updateAllViewableChecked(\"devices\");\n            removeEmptyFilter(\"devices\");\n        });\n        $scope.$watchCollection(\"tabs.controllers.filtered_items\", function() {\n            updateAllViewableChecked(\"controllers\");\n            removeEmptyFilter(\"controllers\");\n        });\n\n        // Shows the current selection.\n        $scope.showSelected = function(tab) {\n            enterViewSelected(tab);\n            $scope.updateFilters(tab);\n        };\n\n        // Adds or removes a filter to the search.\n        $scope.toggleFilter = function(type, value, tab) {\n            // Don't allow a filter to be changed when an action is\n            // in progress.\n            if(angular.isObject($scope.tabs[tab].actionOption)) {\n                return;\n            }\n            $scope.tabs[tab].filters = SearchService.toggleFilter(\n                $scope.tabs[tab].filters, type, value, true);\n            $scope.tabs[tab].search = SearchService.filtersToString(\n                $scope.tabs[tab].filters);\n        };\n\n        // Return True if the filter is active.\n        $scope.isFilterActive = function(type, value, tab) {\n            return SearchService.isFilterActive(\n                $scope.tabs[tab].filters, type, value, true);\n        };\n\n        // Update the filters object when the search bar is updated.\n        $scope.updateFilters = function(tab) {\n            var filters = SearchService.getCurrentFilters(\n                $scope.tabs[tab].search);\n            if(filters === null) {\n                $scope.tabs[tab].filters = SearchService.getEmptyFilter();\n                $scope.tabs[tab].searchValid = false;\n            } else {\n                $scope.tabs[tab].filters = filters;\n                $scope.tabs[tab].searchValid = true;\n            }\n            shouldClearAction(tab);\n        };\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate, tab) {\n            $scope.tabs[tab].predicate = predicate;\n            $scope.tabs[tab].reverse = !$scope.tabs[tab].reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        $scope.selectColumnOrSort = function(predicate, tab) {\n            if($scope.tabs[tab].column !== predicate) {\n                $scope.tabs[tab].column = predicate;\n            } else {\n                $scope.sortTable(predicate, tab);\n            }\n        };\n\n        // Return True if the node supports the action.\n        $scope.supportsAction = function(node, tab) {\n            if(!$scope.tabs[tab].actionOption) {\n                return true;\n            }\n            return node.actions.indexOf(\n                $scope.tabs[tab].actionOption.name) >= 0;\n        };\n\n        // Called when the action option gets changed.\n        $scope.actionOptionSelected = function(tab) {\n            updateActionErrorCount(tab);\n            enterViewSelected(tab);\n\n            // Hide the add hardware/device section.\n            if (tab === 'machines') {\n                if(angular.isObject($scope.addHardwareScope)) {\n                    $scope.addHardwareScope.hide();\n                }\n            } else if(tab === 'devices') {\n                if(angular.isObject($scope.addDeviceScope)) {\n                    $scope.addDeviceScope.hide();\n                }\n            }\n        };\n\n        // Return True if there is an action error.\n        $scope.isActionError = function(tab) {\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                $scope.tabs[tab].actionErrorCount === 0 &&\n                ($scope.osinfo.osystems.length === 0 ||\n                UsersManager.getSSHKeyCount() === 0)) {\n                return true;\n            }\n            return $scope.tabs[tab].actionErrorCount !== 0;\n        };\n\n        // Return True if unable to deploy because of missing images.\n        $scope.isDeployError = function(tab) {\n            if($scope.tabs[tab].actionErrorCount !== 0) {\n                return false;\n            }\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                $scope.osinfo.osystems.length === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Return True if unable to deploy because of missing ssh keys.\n        $scope.isSSHKeyError = function(tab) {\n            if($scope.tabs[tab].actionErrorCount !== 0) {\n                return false;\n            }\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                UsersManager.getSSHKeyCount() === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Called when the current action is cancelled.\n        $scope.actionCancel = function(tab) {\n            resetActionProgress(tab);\n            leaveViewSelected(tab);\n            $scope.tabs[tab].actionOption = null;\n        };\n\n        // Perform the action on all nodes.\n        $scope.actionGo = function(tabName) {\n            var tab = $scope.tabs[tabName];\n            var extra = {};\n            var deferred = $q.defer();\n            // Actions can use preAction is to execute before the action\n            // is exectued on all the nodes. We initialize it with a\n            // promise so that later we can always treat it as a\n            // promise, no matter if something is to be executed or not.\n            var preAction = deferred.promise;\n            deferred.resolve();\n            var i;\n            // Set deploy parameters if a deploy or set zone action.\n            if(tab.actionOption.name === \"deploy\" &&\n               angular.isString(tab.osSelection.osystem) &&\n               angular.isString(tab.osSelection.release)) {\n\n                // Set extra. UI side the release is structured os/release, but\n                // when it is sent over the websocket only the \"release\" is\n                // sent.\n                extra.osystem = tab.osSelection.osystem;\n                var release = tab.osSelection.release;\n                release = release.split(\"/\");\n                release = release[release.length-1];\n                extra.distro_series = release;\n                // hwe_kernel is optional so only include it if its specified\n                if(angular.isString(tab.osSelection.hwe_kernel) &&\n                   (tab.osSelection.hwe_kernel.indexOf('hwe-') >= 0 ||\n                    tab.osSelection.hwe_kernel.indexOf('ga-') >= 0)) {\n                    extra.hwe_kernel = tab.osSelection.hwe_kernel;\n                }\n            } else if(tab.actionOption.name === \"set-zone\" &&\n                angular.isNumber(tab.zoneSelection.id)) {\n                // Set the zone parameter.\n                extra.zone_id = tab.zoneSelection.id;\n            } else if(tab.actionOption.name === \"set-pool\") {\n                if ((tab.poolAction === 'create-pool') &&\n                    (tab.newPool.name !== undefined)) {\n                    // Create the pool and set the action options with\n                    // the new pool id.\n                    preAction = ResourcePoolsManager.createItem(\n                            {name: tab.newPool.name}).then(function (newPool) {\n                                extra.pool_id = newPool.id\n                            });\n                } else if (angular.isNumber(tab.poolSelection.id)) {\n                    // Set the pool parameter.\n                    extra.pool_id = tab.poolSelection.id;\n                }\n            } else if(tab.actionOption.name === \"commission\") {\n                // Set the commission options.\n                extra.enable_ssh = tab.commissionOptions.enableSSH;\n                extra.skip_networking = tab.commissionOptions.skipNetworking;\n                extra.skip_storage = tab.commissionOptions.skipStorage;\n                extra.commissioning_scripts = [];\n                for(i=0;i<tab.commissioningSelection.length;i++) {\n                    extra.commissioning_scripts.push(\n                        tab.commissioningSelection[i].id);\n                }\n                if(tab.commissionOptions.updateFirmware) {\n                    extra.commissioning_scripts.push('update_firmware')\n                }\n                if(tab.commissionOptions.configureHBA) {\n                    extra.commissioning_scripts.push('configure_hba')\n                }\n                if(extra.commissioning_scripts.length === 0) {\n                    // Tell the region not to run any custom commissioning\n                    // scripts.\n                    extra.commissioning_scripts.push('none');\n                }\n                extra.testing_scripts = [];\n                for(i=0;i<tab.testSelection.length;i++) {\n                    extra.testing_scripts.push(\n                        tab.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if(tab.actionOption.name === \"test\") {\n                if(!tab.actionProgress.showing_confirmation) {\n                    var progress = tab.actionProgress;\n                    for(i=0;i<tab.selectedItems.length;i++) {\n                        if(tab.selectedItems[i].status_code === 6)\n                        {\n                            progress.showing_confirmation = true;\n                            progress.affected_nodes++;\n                        }\n                    }\n                    if(tab.actionProgress.affected_nodes != 0) {\n                        return;\n                    }\n                }\n                // Set the test options.\n                extra.enable_ssh = tab.commissionOptions.enableSSH;\n                extra.testing_scripts = [];\n                for(i=0;i<tab.testSelection.length;i++) {\n                    extra.testing_scripts.push(\n                        tab.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if(tab.actionOption.name === \"release\") {\n                // Set the release options.\n                extra.erase = tab.releaseOptions.erase;\n                extra.secure_erase = tab.releaseOptions.secureErase;\n                extra.quick_erase = tab.releaseOptions.quickErase;\n            }\n\n            preAction.then(\n                function () {\n                    // Setup actionProgress.\n                    resetActionProgress(tabName);\n                    tab.actionProgress.total = tab.selectedItems.length;\n                    // Perform the action on all selected items.\n                    angular.forEach(tab.selectedItems, function(node) {\n                        tab.manager.performAction(\n                            node, tab.actionOption.name,\n                            extra).then(function() {\n                                tab.actionProgress.completed += 1;\n                                node.action_failed = false;\n                                updateSelectedItems(tabName);\n                            }, function(error) {\n                                addErrorToActionProgress(tabName, error, node);\n                                node.action_failed = true;\n                                updateSelectedItems(tabName);\n                            });\n                    });\n                },\n                function (error) {\n                    addErrorToActionProgress(tabName, error);\n            });\n        };\n\n        // Returns true when actions are being performed.\n        $scope.hasActionsInProgress = function(tab) {\n            var progress = $scope.tabs[tab].actionProgress;\n            return progress.total > 0 && progress.completed !== progress.total;\n        };\n\n        // Returns true if any of the actions have failed.\n        $scope.hasActionsFailed = function(tab) {\n            return Object.keys(\n                $scope.tabs[tab].actionProgress.errors).length > 0;\n        };\n\n        // Called to when the addHardwareOption has changed.\n        $scope.addHardwareOptionChanged = function() {\n            if($scope.addHardwareOption) {\n                $scope.addHardwareScope.show(\n                    $scope.addHardwareOption.name);\n            }\n        };\n\n        // Called when the add device button is pressed.\n        $scope.addDevice = function() {\n            $scope.addDeviceScope.show();\n        };\n\n        // Called when the cancel add device button is pressed.\n        $scope.cancelAddDevice = function() {\n            $scope.addDeviceScope.cancel();\n        };\n\n        // Get the display text for device ip assignment type.\n        $scope.getDeviceIPAssignment = function(ipAssignment) {\n            return DEVICE_IP_ASSIGNMENT[ipAssignment];\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        $scope.hasCustomCommissioningScripts = function() {\n            var i;\n            for(i=0;i<$scope.scripts.length;i++) {\n                if($scope.scripts[i].script_type === 0) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Reload osinfo when the page reloads\n        $scope.$on(\"$routeUpdate\", function () {\n            GeneralManager.loadItems([\"osinfo\"]);\n        });\n\n        // Switch to the specified tab, if specified.\n        angular.forEach(\n            [\"machines\", \"pools\", \"devices\", \"controllers\", \"switches\"],\n            function(node_type) {\n                if($location.path().indexOf(\"/\" + node_type) !== -1) {\n                    $scope.toggleTab(node_type);\n                }\n            });\n\n        // The ScriptsManager is only needed for selecting testing or\n        // commissioning scripts.\n        var page_managers = [$scope.tabs[$scope.currentpage].manager];\n        if($scope.currentpage === \"machines\" ||\n           $scope.currentpage === \"controllers\") {\n            page_managers.push(ScriptsManager);\n        }\n\n        // Load the required managers for this controller. The ServicesManager\n        // is required by the maasControllerStatus directive that is used\n        // in the partial for this controller.\n        ManagerHelperService.loadManagers($scope, [\n            GeneralManager, ZonesManager, UsersManager, ResourcePoolsManager,\n            ServicesManager].concat(page_managers)).then(function() {\n                $scope.loading = false;\n            });\n\n\n        // Stop polling and save the current filter when the scope is destroyed.\n        $scope.$on(\"$destroy\", function() {\n            $interval.cancel($scope.statusPoll);\n            SearchService.storeFilters(\n                \"machines\", $scope.tabs.machines.filters);\n            SearchService.storeFilters(\"devices\", $scope.tabs.devices.filters);\n            SearchService.storeFilters(\n                \"controllers\", $scope.tabs.controllers.filters);\n            SearchService.storeFilters(\n                \"switches\", $scope.tabs.switches.filters);\n        });\n\n        // Restore the filters if any saved.\n        var machinesFilter = SearchService.retrieveFilters(\"machines\");\n        if(angular.isObject(machinesFilter)) {\n            $scope.tabs.machines.search = SearchService.filtersToString(\n                machinesFilter);\n            $scope.updateFilters(\"machines\");\n        }\n        var devicesFilter = SearchService.retrieveFilters(\"devices\");\n        if(angular.isObject(devicesFilter)) {\n            $scope.tabs.devices.search = SearchService.filtersToString(\n                devicesFilter);\n            $scope.updateFilters(\"devices\");\n        }\n        var controllersFilter = SearchService.retrieveFilters(\"controllers\");\n        if(angular.isObject(controllersFilter)) {\n            $scope.tabs.controllers.search = SearchService.filtersToString(\n                controllersFilter);\n            $scope.updateFilters(\"controllers\");\n        }\n        var switchesFilter = SearchService.retrieveFilters(\"switches\");\n        if(angular.isObject(switchesFilter)) {\n            $scope.tabs.switches.search = SearchService.filtersToString(\n                switchesFilter);\n            $scope.updateFilters(\"switches\");\n        }\n\n        // Set the query if the present in $routeParams.\n        var query = $routeParams.query;\n        if(angular.isString(query)) {\n            $scope.tabs[$scope.currentpage].search = query;\n            $scope.updateFilters($scope.currentpage);\n        }\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pod Details Controller\n */\n\nangular.module('MAAS').controller('PodDetailsController', [\n    '$scope', '$rootScope', '$location', '$routeParams',\n    'PodsManager', 'GeneralManager', 'UsersManager', 'DomainsManager',\n    'ZonesManager', 'MachinesManager', 'ManagerHelperService', 'ErrorService',\n    'ResourcePoolsManager',\n    function(\n        $scope, $rootScope, $location, $routeParams,\n        PodsManager, GeneralManager, UsersManager, DomainsManager,\n        ZonesManager, MachinesManager, ManagerHelperService, ErrorService,\n        ResourcePoolsManager) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"pods\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.pod = null;\n        $scope.podManager = PodsManager;\n        $scope.action = {\n          option: null,\n          options: [\n            {\n              name: 'refresh',\n              title: 'Refresh',\n              sentence: 'refresh',\n              operation: angular.bind(PodsManager, PodsManager.refresh)\n            },\n            {\n              name: 'delete',\n              title: 'Delete',\n              sentence: 'delete',\n              operation: angular.bind(PodsManager, PodsManager.deleteItem)\n            }\n          ],\n          inProgress: false,\n          error: null\n        };\n        $scope.compose = {\n          action: {\n            name: 'compose',\n            title: 'Compose',\n            sentence: 'compose'\n          },\n          obj: {\n            storage: [{\n              type: 'local',\n              size: 8,\n              tags: [],\n              boot: true\n            }]\n          }\n        };\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.domains = DomainsManager.getItems();\n        $scope.zones = ZonesManager.getItems();\n        $scope.pools = ResourcePoolsManager.getItems();\n        $scope.section = {\n          area: 'summary'\n        };\n        $scope.machinesSearch = 'pod-id:=invalid';\n        $scope.editing = false;\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If power_types exist then a rack controller is connected.\n            return $scope.power_types.length > 0;\n        };\n\n        // Return true when the edit buttons can be clicked.\n        $scope.canEdit = function() {\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser());\n        };\n\n        // Called to edit the pod configuration.\n        $scope.editPodConfiguration = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.editing = true;\n        };\n\n        // Called when the cancel or save button is pressed.\n        $scope.exitEditPodConfiguration = function() {\n            $scope.editing = false;\n        };\n\n        // Return true if there is an action error.\n        $scope.isActionError = function() {\n            return $scope.action.error !== null;\n        };\n\n        // Called when the action.option has changed.\n        $scope.actionOptionChanged = function() {\n            // Clear the action error.\n            $scope.action.error = null;\n        };\n\n        // Cancel the action.\n        $scope.actionCancel = function() {\n            $scope.action.option = null;\n            $scope.action.error = null;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            $scope.action.inProgress = true;\n            $scope.action.option.operation($scope.pod).then(function() {\n                  // If the action was delete, then go back to listing.\n                  if($scope.action.option.name === \"delete\") {\n                      $location.path(\"/pods\");\n                  }\n                  $scope.action.inProgress = false;\n                  $scope.action.option = null;\n                  $scope.action.error = null;\n              }, function(error) {\n                  $scope.action.inProgress = false;\n                  $scope.action.error = error;\n              });\n        };\n\n        // Return the title of the pod type.\n        $scope.getPodTypeTitle = function() {\n            var i;\n            for(i = 0; i < $scope.power_types.length; i++) {\n                var power_type = $scope.power_types[i];\n                if(power_type.name === $scope.pod.type) {\n                    return power_type.description;\n                }\n            }\n            return $scope.pod.type;\n        };\n\n        // Returns true if the pod is composable.\n        $scope.canCompose = function() {\n            if(angular.isObject($scope.pod)) {\n                return ($scope.isSuperUser() &&\n                    $scope.pod.capabilities.indexOf('composable') >= 0);\n            } else {\n                return false;\n            }\n        };\n\n        // Opens the compose action menu.\n        $scope.composeMachine = function() {\n            $scope.action.option = $scope.compose.action;\n        };\n\n        // Called before the compose params is sent over the websocket.\n        $scope.composePreProcess = function(params) {\n            params = angular.copy(params);\n            params.id = $scope.pod.id;\n            // Sort boot disk first.\n            var sorted = $scope.compose.obj.storage.sort(function(a, b) {\n              if(a.boot === b.boot) {\n                return 0;\n              } else if(a.boot && !b.boot) {\n                return -1;\n              } else {\n                return 1;\n              }\n            });\n            // Create the storage constraint.\n            var storage = [];\n            angular.forEach(sorted, function(disk, idx) {\n              var constraint = idx + ':' + disk.size;\n              var tags = disk.tags.map(function(tag) {\n                return tag.text;\n              });\n              tags.splice(0, 0, disk.type);\n              constraint += '(' + tags.join(',') + ')';\n              storage.push(constraint);\n            });\n            params.storage = storage.join(',');\n            return params;\n        };\n\n        // Called to cancel composition.\n        $scope.cancelCompose = function() {\n          $scope.compose.obj = {\n            storage: [{\n              type: 'local',\n              size: 8,\n              tags: [],\n              boot: true\n            }]\n          };\n          $scope.action.option = null;\n        };\n\n        // Add another storage device.\n        $scope.composeAddStorage = function() {\n          var storage = {\n            type: 'local',\n            size: 8,\n            tags: [],\n            boot: false\n          };\n          if($scope.pod.capabilities.indexOf('iscsi_storage') >= 0) {\n            storage.type = 'iscsi';\n          }\n          $scope.compose.obj.storage.push(storage);\n        };\n\n        // Change which disk is the boot disk.\n        $scope.composeSetBootDisk = function(storage) {\n          angular.forEach($scope.compose.obj.storage, function(disk) {\n            disk.boot = false;\n          });\n          storage.boot = true;\n        };\n\n        // Remove a disk from storage config.\n        $scope.composeRemoveDisk = function(storage) {\n          var idx = $scope.compose.obj.storage.indexOf(storage);\n          if(idx >= 0) {\n            $scope.compose.obj.storage.splice(idx, 1);\n          }\n        };\n\n        // Start watching key fields.\n        $scope.startWatching = function() {\n            $scope.$watch(\"pod.name\", function() {\n                $rootScope.title = 'Pod ' + $scope.pod.name;\n            });\n            $scope.$watch(\"pod.capabilities\", function() {\n                // Show the composable action if the pod supports composition.\n                var idx = $scope.action.options.indexOf(\n                    $scope.compose.action);\n                if(!$scope.canCompose()) {\n                    if(idx >= 0) {\n                        $scope.action.options.splice(idx, 1);\n                    }\n                } else {\n                    if(idx === -1) {\n                        $scope.action.options.splice(\n                            0, 0, $scope.compose.action);\n                    }\n                }\n            });\n            $scope.$watch(\"action.option\", function(now, then) {\n                // When the compose action is selected set the default\n                // parameters.\n                if(now && now.name === 'compose') {\n                    if(!then || then.name !== 'compose') {\n                        $scope.compose.obj.domain = (\n                            DomainsManager.getDefaultDomain().id);\n                        $scope.compose.obj.zone = (\n                            ZonesManager.getDefaultZone().id);\n                        $scope.compose.obj.pool = $scope.pod.default_pool;\n                    }\n                }\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            PodsManager, GeneralManager, UsersManager,\n            DomainsManager, ZonesManager, MachinesManager,\n            ResourcePoolsManager]).then(function() {\n\n            // Possibly redirected from another controller that already had\n            // this pod set to active. Only call setActiveItem if not already\n            // the activeItem.\n            var activePod = PodsManager.getActiveItem();\n            if(angular.isObject(activePod) &&\n                activePod.id === parseInt($routeParams.id, 10)) {\n                $scope.pod = activePod;\n                $scope.loaded = true;\n                $scope.machinesSearch = 'pod-id:=' + $scope.pod.id;\n                $scope.startWatching();\n            } else {\n                PodsManager.setActiveItem(\n                    parseInt($routeParams.id, 10)).then(function(pod) {\n                        $scope.pod = pod;\n                        $scope.loaded = true;\n                        $scope.machinesSearch = 'pod-id:=' + $scope.pod.id;\n                        $scope.startWatching();\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pods List Controller\n */\n\nangular.module('MAAS').controller('PodsListController', [\n    '$scope', '$rootScope',\n    'PodsManager', 'UsersManager', 'GeneralManager', 'ZonesManager',\n    'ManagerHelperService', 'ResourcePoolsManager', function(\n        $scope, $rootScope, PodsManager, UsersManager, GeneralManager,\n        ZonesManager, ManagerHelperService, ResourcePoolsManager) {\n\n        // Set title and page.\n        $rootScope.title = \"Pods\";\n        $rootScope.page = \"pods\";\n\n        // Set initial values.\n        $scope.podManager = PodsManager;\n        $scope.pods = PodsManager.getItems();\n        $scope.loading = true;\n\n        $scope.filteredItems = [];\n        $scope.selectedItems = PodsManager.getSelectedItems();\n        $scope.predicate = 'name';\n        $scope.allViewableChecked = false;\n        $scope.action = {\n          option: null,\n          options: [\n            {\n              name: 'refresh',\n              title: 'Refresh',\n              sentence: 'refresh',\n              operation: angular.bind(PodsManager, PodsManager.refresh)\n            },\n            {\n              name: 'delete',\n              title: 'Delete',\n              sentence: 'delete',\n              operation: angular.bind(PodsManager, PodsManager.deleteItem)\n            }\n          ],\n          progress: {\n              total: 0,\n              completed: 0,\n              errors: 0\n          }\n        };\n        $scope.add = {\n          open: false,\n          obj: {\n              cpu_over_commit_ratio: 1,\n              memory_over_commit_ratio: 1\n          }\n        };\n        $scope.powerTypes = GeneralManager.getData(\"power_types\");\n        $scope.zones = ZonesManager.getItems();\n        $scope.pools = ResourcePoolsManager.getItems();\n\n        // Called to update `allViewableChecked`.\n        function updateAllViewableChecked() {\n            // Not checked when no pods.\n            if($scope.pods.length === 0) {\n                $scope.allViewableChecked = false;\n                return;\n            }\n\n            // Loop through all filtered pods and see if all are checked.\n            var i;\n            for(i = 0; i < $scope.pods.length; i++) {\n                if(!$scope.pods[i].$selected) {\n                    $scope.allViewableChecked = false;\n                    return;\n                }\n            }\n            $scope.allViewableChecked = true;\n        }\n\n        function clearAction() {\n            resetActionProgress();\n            $scope.action.option = null;\n        }\n\n        // Clear the action if required.\n        function shouldClearAction() {\n            if($scope.selectedItems.length === 0) {\n                clearAction();\n                if($scope.action.option) {\n                    $scope.action.option = null;\n                }\n            }\n        }\n\n        // Reset actionProgress to zero.\n        function resetActionProgress() {\n            var progress = $scope.action.progress;\n            progress.completed = progress.total = progress.errors = 0;\n            angular.forEach($scope.pods, function(pod) {\n                delete pod.action_failed;\n            });\n        }\n\n        // After an action has been performed check if we can leave all pods\n        // selected or if an error occured and we should only show the failed\n        // pods.\n        function updateSelectedItems() {\n            if(!$scope.hasActionsFailed()) {\n                if(!$scope.hasActionsInProgress()) {\n                     clearAction();\n                }\n                return;\n            }\n            angular.forEach($scope.pods, function(pod) {\n                if(pod.action_failed === false) {\n                    PodsManager.unselectItem(pod.id);\n                }\n            });\n            shouldClearAction();\n        }\n\n        // Mark a pod as selected or unselected.\n        $scope.toggleChecked = function(pod) {\n            if(PodsManager.isSelected(pod.id)) {\n                PodsManager.unselectItem(pod.id);\n            } else {\n                PodsManager.selectItem(pod.id);\n            }\n            updateAllViewableChecked();\n            shouldClearAction();\n        };\n\n        // Select all viewable pods or deselect all viewable pods.\n        $scope.toggleCheckAll = function() {\n            if($scope.allViewableChecked) {\n                angular.forEach($scope.pods, function(pod) {\n                    PodsManager.unselectItem(pod.id);\n                });\n            } else {\n                angular.forEach($scope.pods, function(pod) {\n                    PodsManager.selectItem(pod.id);\n                });\n            }\n            updateAllViewableChecked();\n            shouldClearAction();\n        };\n\n        // When the pods change update if all check buttons should be\n        // checked or not.\n        $scope.$watchCollection(\"pods\", function() {\n            updateAllViewableChecked();\n        });\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Called when the current action is cancelled.\n        $scope.actionCancel = function() {\n            resetActionProgress();\n            $scope.action.option = null;\n        };\n\n        // Perform the action on all pods.\n        $scope.actionGo = function() {\n            var extra = {};\n\n            // Setup actionProgress.\n            resetActionProgress();\n            $scope.action.progress.total = $scope.selectedItems.length;\n\n            // Perform the action on all selected items.\n            var operation = $scope.action.option.operation;\n            angular.forEach($scope.selectedItems, function(pod) {\n                operation(pod).then(function() {\n                        $scope.action.progress.completed += 1;\n                        pod.action_failed = false;\n                        updateSelectedItems();\n                    }, function(error) {\n                        $scope.action.progress.errors += 1;\n                        pod.action_error = error;\n                        pod.action_failed = true;\n                        updateSelectedItems();\n                    });\n            });\n        };\n\n        // Returns true when actions are being performed.\n        $scope.hasActionsInProgress = function() {\n            var progress = $scope.action.progress;\n            return progress.total > 0 && (\n                progress.completed + progress.errors) !== progress.total;\n        };\n\n        // Returns true if any of the actions have failed.\n        $scope.hasActionsFailed = function() {\n            var progress = $scope.action.progress;\n            return progress.errors > 0;\n        };\n\n        // Called when the add pod button is pressed.\n        $scope.addPod = function() {\n            $scope.add.open = true;\n            $scope.add.obj.zone = ZonesManager.getDefaultZone().id;\n            $scope.add.obj.default_pool = (\n                ResourcePoolsManager.getDefaultPool().id);\n            $scope.add.obj.cpu_over_commit_ratio = 1;\n            $scope.add.obj.memory_over_commit_ratio = 1;\n        };\n\n        // Called when the cancel add pod button is pressed.\n        $scope.cancelAddPod = function() {\n            $scope.add.open = false;\n            $scope.add.obj = {};\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If powerTypes exist then a rack controller is connected.\n            return $scope.powerTypes.length > 0;\n        };\n\n        // Return true when the add pod buttons can be clicked.\n        $scope.canAddPod = function() {\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser());\n        };\n\n        // Return the title of the power type.\n        $scope.getPowerTypeTitle = function(power_type) {\n            var i;\n            for(i = 0; i < $scope.powerTypes.length; i++) {\n                var powerType = $scope.powerTypes[i];\n                if(powerType.name === power_type) {\n                    return powerType.description;\n                }\n            }\n            return power_type;\n        };\n\n        // Load the required managers for this controller.\n        ManagerHelperService.loadManagers($scope, [\n            PodsManager, UsersManager, GeneralManager, ZonesManager,\n            ResourcePoolsManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Preferences Controller\n */\n\nangular.module('MAAS').controller('PreferencesController', [\n    '$scope', 'UsersManager', 'ManagerHelperService',\n    function(\n        $scope, UsersManager, ManagerHelperService) {\n            $scope.loading = true;\n            ManagerHelperService.loadManager(\n                $scope, UsersManager).then(function() {\n                    $scope.loading = false;\n                });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Settings Controller\n */\n\nangular.module('MAAS').controller('SettingsController', [\n    '$scope', '$rootScope', '$routeParams', 'PackageRepositoriesManager',\n    'DHCPSnippetsManager', 'MachinesManager', 'ControllersManager',\n    'DevicesManager', 'SubnetsManager', 'GeneralManager',\n    'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, PackageRepositoriesManager,\n             DHCPSnippetsManager, MachinesManager, ControllersManager,\n             DevicesManager, SubnetsManager, GeneralManager,\n             ManagerHelperService) {\n\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"settings\";\n\n        // Initial values.\n        $scope.loading = true;\n        $scope.snippetsManager = DHCPSnippetsManager;\n        $scope.snippets = DHCPSnippetsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.machines = MachinesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.known_architectures =\n            GeneralManager.getData(\"known_architectures\");\n        $scope.pockets_to_disable =\n            GeneralManager.getData(\"pockets_to_disable\");\n        $scope.components_to_disable =\n            GeneralManager.getData(\"components_to_disable\");\n        $scope.packageRepositoriesManager = PackageRepositoriesManager;\n        $scope.repositories =\n            PackageRepositoriesManager.getItems();\n        $scope.newSnippet = null;\n        $scope.editSnippet = null;\n        $scope.deleteSnippet = null;\n        $scope.snippetTypes = [\"Global\", \"Subnet\", \"Node\"];\n        $scope.newRepository = null;\n        $scope.editRepository = null;\n        $scope.deleteRepository = null;\n\n        // Called when the enabled toggle is changed.\n        $scope.repositoryEnabledToggle = function(repository) {\n            PackageRepositoriesManager.updateItem(repository);\n        };\n\n        // Called to enter remove mode for a repository.\n        $scope.repositoryEnterRemove = function(repository) {\n            $scope.newRepository = null;\n            $scope.editRepository = null;\n            $scope.deleteRepository = repository;\n        };\n\n        // Called to exit remove mode for a repository.\n        $scope.repositoryExitRemove = function() {\n            $scope.deleteRepository = null;\n        };\n\n        // Called to confirm the removal of a repository.\n        $scope.repositoryConfirmRemove = function() {\n            PackageRepositoriesManager.deleteItem(\n                $scope.deleteRepository).then(function() {\n                    $scope.repositoryExitRemove();\n                });\n        };\n\n        // Return true if the repository is a PPA.\n        $scope.isPPA = function(data) {\n            if(!angular.isObject(data)) {\n                return false;\n            }\n            if(!angular.isString(data.url)) {\n                return false;\n            }\n            return data.url.indexOf(\"ppa:\") === 0 ||\n                data.url.indexOf(\"ppa.launchpad.net\") > -1;\n        };\n\n        // Return true if the repository is a mirror.\n        $scope.isMirror = function(data) {\n            if(!angular.isObject(data)) {\n                return false;\n            }\n            if(!angular.isString(data.name)) {\n                return false;\n            }\n            return data.name === \"main_archive\" ||\n                data.name === \"ports_archive\";\n        };\n\n        // Called to enter edit mode for a repository.\n        $scope.repositoryEnterEdit = function(repository) {\n            $scope.newRepository = null;\n            $scope.deleteRepository = null;\n            $scope.editRepository = repository;\n        };\n\n        // Called to exit edit mode for a repository.\n        $scope.repositoryExitEdit = function() {\n            $scope.editRepository = null;\n        };\n\n        // Called to start adding a new repository.\n        $scope.repositoryAdd = function(isPPA) {\n            var repo = {\n                name: \"\",\n                enabled: true,\n                url: \"\",\n                key: \"\",\n                arches: [\"i386\", \"amd64\"],\n                distributions: [],\n                components: []\n            };\n            if (isPPA) {\n                repo.url = \"ppa:\";\n            }\n            $scope.newRepository = repo;\n        };\n\n        // Called to cancel addind a new repository.\n        $scope.repositoryAddCancel = function() {\n            $scope.newRepository = null;\n        };\n\n        // Return the node from either the machines, devices, or controllers\n        // manager.\n        function getNode(system_id) {\n            var node = MachinesManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n            node = DevicesManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n            node = ControllersManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n        }\n\n        // Return the name of the subnet.\n        $scope.getSubnetName = function(subnet) {\n            return SubnetsManager.getName(subnet);\n        };\n\n        // Return the text for the type of snippet.\n        $scope.getSnippetTypeText = function(snippet) {\n            if(angular.isString(snippet.node)) {\n                return \"Node\";\n            } else if(angular.isNumber(snippet.subnet)) {\n                return \"Subnet\";\n            } else {\n                return \"Global\";\n            }\n        };\n\n        // Return the object the snippet applies to.\n        $scope.getSnippetAppliesToObject = function(snippet) {\n            if(angular.isString(snippet.node)) {\n                return getNode(snippet.node);\n            } else if(angular.isNumber(snippet.subnet)) {\n                return SubnetsManager.getItemFromList(snippet.subnet);\n            }\n        };\n\n        // Return the applies to text that is disabled in none edit mode.\n        $scope.getSnippetAppliesToText = function(snippet) {\n            var obj = $scope.getSnippetAppliesToObject(snippet);\n            if(angular.isString(snippet.node) && angular.isObject(obj)) {\n                return obj.fqdn;\n            } else if(angular.isNumber(snippet.subnet) &&\n                angular.isObject(obj)) {\n                return SubnetsManager.getName(obj);\n            } else {\n                return \"\";\n            }\n        };\n\n        // Called to enter remove mode for a DHCP snippet.\n        $scope.snippetEnterRemove = function(snippet) {\n            $scope.newSnippet = null;\n            $scope.editSnippet = null;\n            $scope.deleteSnippet = snippet;\n        };\n\n        // Called to exit remove mode for a DHCP snippet.\n        $scope.snippetExitRemove = function() {\n            $scope.deleteSnippet = null;\n        };\n\n        // Called to confirm the removal of a snippet.\n        $scope.snippetConfirmRemove = function() {\n            DHCPSnippetsManager.deleteItem($scope.deleteSnippet).then(\n                function() {\n                    $scope.snippetExitRemove();\n                });\n        };\n\n        // Called to enter edit mode for a DHCP snippet.\n        $scope.snippetEnterEdit = function(snippet) {\n            $scope.newSnippet = null;\n            $scope.deleteSnippet = null;\n            $scope.editSnippet = snippet;\n            $scope.editSnippet.type = $scope.getSnippetTypeText(snippet);\n        };\n\n        // Called to exit edit mode for a DHCP snippet.\n        $scope.snippetExitEdit = function() {\n            $scope.editSnippet = null;\n        };\n\n        // Called when the active toggle is changed.\n        $scope.snippetToggle = function(snippet) {\n            DHCPSnippetsManager.updateItem(snippet).then(null,\n                function(error) {\n                    // Revert state change and clear toggling.\n                    snippet.enabled = !snippet.enabled;\n                    console.log(error);\n                });\n        };\n\n        // Called to start adding a new snippet.\n        $scope.snippetAdd = function() {\n            $scope.editSnippet = null;\n            $scope.deleteSnippet = null;\n            $scope.newSnippet = {\n                name: \"\",\n                type: \"Global\",\n                enabled: true\n            };\n        };\n\n        // Called to cancel addind a new snippet.\n        $scope.snippetAddCancel = function() {\n            $scope.newSnippet = null;\n        };\n\n        // Setup page variables based on section.\n        if($routeParams.section === \"dhcp\") {\n            $rootScope.title = \"DHCP snippets\";\n            $scope.currentpage = 'dhcp';\n        }\n        else if($routeParams.section === \"repositories\") {\n            $rootScope.title = \"Package repositories\";\n            $scope.currentpage = 'repositories';\n        }\n\n        // Load the required managers.\n        ManagerHelperService.loadManagers($scope, [\n                PackageRepositoriesManager, DHCPSnippetsManager,\n                MachinesManager, DevicesManager, ControllersManager,\n                SubnetsManager, GeneralManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Details Controller\n */\n\nangular.module('MAAS').controller('SpaceDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'SpacesManager', 'VLANsManager', 'SubnetsManager', 'FabricsManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        SpacesManager, VLANsManager, SubnetsManager, FabricsManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.space = null;\n        $scope.spaceManager = SpacesManager;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.loaded = false;\n        $scope.editSummary = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.space.name;\n        }\n\n        // Called when the space has been loaded.\n        function spaceLoaded(space) {\n            $scope.space = space;\n            updateTitle();\n            $scope.predicate = \"[subnet_name, vlan_name]\";\n            $scope.$watch(\"subnets\", updateSubnets, true);\n            updateSubnets();\n            $scope.loaded = true;\n        }\n\n        // Generate a table that can easily be rendered in the view.\n        function updateSubnets() {\n            var rows = [];\n            angular.forEach($filter('filter')(\n                    $scope.subnets, {space:$scope.space.id}, true),\n                    function(subnet) {\n                var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                var row = {\n                    vlan: vlan,\n                    vlan_name: VLANsManager.getName(vlan),\n                    subnet: subnet,\n                    subnet_name: SubnetsManager.getName(subnet),\n                    fabric: fabric,\n                    fabric_name: fabric.name\n                };\n                rows.push(row);\n            });\n            $scope.rows = rows;\n        }\n\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Called when the \"edit\" button is cliked in the space summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the space summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Return true if this is the default Space\n        $scope.isDefaultSpace = function() {\n            if(!angular.isObject($scope.space)) {\n                return false;\n            }\n            return $scope.space.id === 0;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.space)) {\n                return $scope.space.subnet_ids.length === 0;\n            }\n            return false;\n        };\n\n        // Called when the delete space button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete space button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete space button is pressed.\n        $scope.deleteConfirmButton = function() {\n            SpacesManager.deleteSpace($scope.space).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/networks\");\n                $location.search('by', 'space');\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            SpacesManager, SubnetsManager, VLANsManager, FabricsManager,\n            UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this space set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeSpace = SpacesManager.getActiveItem();\n            var requestedSpace = parseInt($routeParams.space_id, 10);\n            if(isNaN(requestedSpace)) {\n                ErrorService.raiseError(\"Invalid space identifier.\");\n            } else if(angular.isObject(activeSpace) &&\n                activeSpace.id === requestedSpace) {\n                spaceLoaded(activeSpace);\n            } else {\n                SpacesManager.setActiveItem(\n                    requestedSpace).then(function(space) {\n                        spaceLoaded(space);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Subnet Details Controller\n */\n\nangular.module('MAAS').filter('filterSource', ['ValidationService',\n    function() {\n        return function(subnets, source) {\n            var filtered = [];\n            angular.forEach(subnets, function(subnet) {\n                if(subnet.id !== source.id &&\n                    subnet.version === source.version) {\n                    filtered.push(subnet);\n                }\n            });\n            return filtered;\n        };\n    }]);\n\nangular.module('MAAS').controller('SubnetDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'ConfigsManager', 'SubnetsManager', 'SpacesManager', 'VLANsManager',\n    'UsersManager', 'FabricsManager', 'StaticRoutesManager',\n    'ManagerHelperService', 'ErrorService', 'ConverterService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location, ConfigsManager,\n        SubnetsManager, SpacesManager, VLANsManager, UsersManager,\n        FabricsManager, StaticRoutesManager, ManagerHelperService, ErrorService,\n        ConverterService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.subnet = null;\n        $scope.editSummary = false;\n        $scope.active_discovery_data = null;\n        $scope.active_discovery_interval = null;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.subnetManager = SubnetsManager;\n        $scope.staticRoutes = StaticRoutesManager.getItems();\n        $scope.staticRoutesManager = StaticRoutesManager;\n        $scope.space = null;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.actionError = null;\n        $scope.actionOption = null;\n        $scope.actionOptions = [];\n        $scope.reverse = false;\n        $scope.newStaticRoute = null;\n        $scope.editStaticRoute = null;\n        $scope.deleteStaticRoute = null;\n\n        $scope.MAP_SUBNET_ACTION = {\n            name: \"map_subnet\",\n            title: \"Map subnet\"\n        };\n        $scope.DELETE_ACTION = {\n            name: \"delete\",\n            title: \"Delete\"\n        };\n\n        // Alloc type mapping.\n        var ALLOC_TYPES = {\n            0: 'Automatic',\n            1: 'Static',\n            4: 'User reserved',\n            5: 'DHCP',\n            6: 'Observed'\n        };\n\n        // Node type mapping.\n        var NODE_TYPES = {\n            0: 'Machine',\n            1: 'Device',\n            2: 'Rack controller',\n            3: 'Region controller',\n            4: 'Rack and region controller',\n            5: 'Chassis',\n            6: 'Storage'\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            subnet = $scope.subnet;\n            if(subnet && subnet.cidr) {\n                $rootScope.title = subnet.cidr;\n                if(subnet.name && subnet.cidr !== subnet.name) {\n                    $rootScope.title += \" (\" +subnet.name + \")\";\n                }\n            }\n        }\n\n        // Update the IP version of the CIDR.\n        function updateIPVersion() {\n            var ip = $scope.subnet.cidr.split('/')[0];\n            if(ip.indexOf(':') === -1) {\n                $scope.ipVersion = 4;\n            } else {\n                $scope.ipVersion = 6;\n            }\n        }\n\n        // Sort for IP address.\n        $scope.ipSort = function(ipAddress) {\n            if($scope.ipVersion === 4) {\n                return ConverterService.ipv4ToInteger(ipAddress.ip);\n            } else {\n                return ConverterService.ipv6Expand(ipAddress.ip);\n            }\n        };\n\n        // Set default predicate to the ipSort function.\n        $scope.predicate = $scope.ipSort;\n\n        // Return the name of the allocation type.\n        $scope.getAllocType = function(allocType) {\n            var str = ALLOC_TYPES[allocType];\n            if(angular.isString(str)) {\n                return str;\n            } else {\n                return \"Unknown\";\n            }\n        };\n\n        $scope.getSubnetCIDR = function(destId) {\n            return SubnetsManager.getItemFromList(destId).cidr;\n        };\n\n        // Sort based on the name of the allocation type.\n        $scope.allocTypeSort = function(ipAddress) {\n            return $scope.getAllocType(ipAddress.alloc_type);\n        };\n\n        // Return the name of the node type for the given IP.\n        $scope.getUsageForIP = function(ip) {\n            if(angular.isObject(ip.node_summary)) {\n                var isContainer = ip.node_summary.is_container;\n                var nodeType = ip.node_summary.node_type;\n                if(nodeType === 1 && isContainer === true) {\n                    return \"Container\";\n                }\n                var str = NODE_TYPES[nodeType];\n                if(angular.isString(str)) {\n                    return str;\n                } else {\n                    return \"Unknown\";\n                }\n            } else if(angular.isObject(ip.bmcs)) {\n                return \"BMC\";\n            } else if(angular.isObject(ip.dns_records)) {\n                return \"DNS\";\n            } else {\n                return \"Unknown\";\n            }\n        };\n\n        // Sort based on the node type string.\n        $scope.nodeTypeSort = function(ipAddress) {\n            return $scope.getUsageForIP(ipAddress);\n        };\n\n        // Sort based on the owner name.\n        $scope.ownerSort = function(ipAddress) {\n            var owner = ipAddress.user;\n            if(angular.isString(owner) && owner.length > 0) {\n                return owner;\n            } else {\n                return \"MAAS\";\n            }\n        };\n\n        // Called to change the sort order of the IP table.\n        $scope.sortIPTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Return the name of the VLAN.\n        $scope.getVLANName = function(vlan) {\n           return VLANsManager.getName(vlan);\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        $scope.actionRetry = function() {\n            // When we clear actionError, the HTML will be re-rendered to\n            // hide the error message (and the user will be taken back to\n            // the previous action they were performing, since we reset\n            // the actionOption in the error handler.\n            $scope.actionError = null;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            if($scope.actionOption.name === \"map_subnet\") {\n                SubnetsManager.scanSubnet($scope.subnet).then(function(result) {\n                    if(result && result.scan_started_on.length === 0) {\n                        $scope.actionError =\n                            ManagerHelperService.parseValidationError(\n                                result.result);\n                    } else {\n                        $scope.actionOption = null;\n                        $scope.actionError = null;\n                    }\n                }, function(error) {\n                    $scope.actionError =\n                        ManagerHelperService.parseValidationError(error);\n                });\n            } else if($scope.actionOption.name === \"delete\") {\n                SubnetsManager.deleteSubnet(\n                    $scope.subnet).then(function(result) {\n                        $scope.actionOption = null;\n                        $scope.actionError = null;\n                        $location.path(\"/networks\");\n                    }, function(error) {\n                        $scope.actionError =\n                            ManagerHelperService.parseValidationError(error);\n                });\n            }\n        };\n\n        // Called when a action is selected.\n        $scope.actionChanged = function() {\n            $scope.actionError = null;\n        };\n\n        // Called when the \"Cancel\" button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionOption = null;\n            $scope.actionError = null;\n        };\n\n        // Called when the managers load to populate the actions the user\n        // is allowed to perform.\n        $scope.updateActions = function() {\n            if(UsersManager.isSuperUser()) {\n                $scope.actionOptions = [\n                    $scope.MAP_SUBNET_ACTION,\n                    $scope.DELETE_ACTION\n                ];\n            } else {\n                $scope.actionOptions = [];\n            }\n        };\n\n        // Called when the \"edit\" button is cliked in the subnet summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the subnet summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Called by maas-obj-form before it saves the subnet. The passed\n        // subnet is the object right before its sent over the websocket.\n        $scope.subnetPreSave = function(subnet, changedFields) {\n            // Adjust the subnet object if the fabric changed.\n            if(changedFields.indexOf(\"fabric\") !== -1) {\n                // Fabric changed, the websocket expects VLAN to be updated, so\n                // we set the VLAN to the default VLAN for the new fabric.\n                subnet.vlan = FabricsManager.getItemFromList(\n                    subnet.fabric).default_vlan_id;\n            }\n            return subnet;\n        };\n\n        // Called to start adding a new static route.\n        $scope.addStaticRoute = function() {\n            $scope.editStaticRoute = null;\n            $scope.deleteStaticRoute = null;\n            $scope.newStaticRoute = {\n                source: $scope.subnet.id,\n                gateway_ip: \"\",\n                destination: null,\n                metric: 0\n            };\n        };\n\n        // Cancel adding the new static route.\n        $scope.cancelAddStaticRoute = function() {\n            $scope.newStaticRoute = null;\n        };\n\n        // Return true if the static route is in edit mode.\n        $scope.isStaticRouteInEditMode = function(route) {\n            return $scope.editStaticRoute === route;\n        };\n\n        // Toggle edit mode for the static route.\n        $scope.staticRouteToggleEditMode = function(route) {\n            $scope.newStaticRoute = null;\n            $scope.deleteStaticRoute = null;\n            if($scope.isStaticRouteInEditMode(route)) {\n                $scope.editStaticRoute  = null;\n            } else {\n                $scope.editStaticRoute = route;\n            }\n        };\n\n        // Return true if the static route is in delete mode.\n        $scope.isStaticRouteInDeleteMode = function(route) {\n            return $scope.deleteStaticRoute === route;\n        };\n\n        // Enter delete mode for the static route.\n        $scope.staticRouteEnterDeleteMode = function(route) {\n            $scope.newStaticRoute = null;\n            $scope.editStaticRoute = null;\n            $scope.deleteStaticRoute = route;\n        };\n\n        // Exit delete mode for the statc route.\n        $scope.staticRouteCancelDelete = function() {\n            $scope.deleteStaticRoute = null;\n        };\n\n        // Perform the delete operation on the static route.\n        $scope.staticRouteConfirmDelete = function() {\n            StaticRoutesManager.deleteItem($scope.deleteStaticRoute).then(\n                function() {\n                    $scope.deleteStaticRoute = null;\n                });\n        };\n\n        // Called when the subnet has been loaded.\n        function subnetLoaded(subnet) {\n            $scope.subnet = subnet;\n            $scope.loaded = true;\n\n            updateTitle();\n\n            // Watch the vlan and fabric field so if its changed on the subnet\n            // we make sure that the fabric is updated. It is possible that\n            // fabric is removed from the subnet since it is injected from this\n            // controller, so when it is removed we add it back.\n            var updateFabric = function() {\n                $scope.subnet.fabric = (\n                    VLANsManager.getItemFromList($scope.subnet.vlan).fabric);\n                $scope.subnet.fabric_name = (\n                  FabricsManager.getItemFromList(subnet.fabric).name);\n            };\n            var updateSpace = function() {\n                $scope.space = (\n                    SpacesManager.getItemFromList($scope.subnet.space));\n            };\n            var updateVlan = function() {\n                var vlan = VLANsManager.getItemFromList($scope.subnet.vlan);\n                $scope.subnet.vlan_name = (\n                    VLANsManager.getName(vlan)\n                );\n            };\n\n            $scope.$watch(\"subnet.fabric\", updateFabric);\n            $scope.$watch(\"subnet.fabric_name\", updateFabric);\n            $scope.$watch(\"subnet.vlan\", updateFabric);\n            $scope.$watch(\"subnet.vlan_name\", updateVlan);\n            $scope.$watch(\"subnet.space\", updateSpace);\n            $scope.$watch(\"subnet.cidr\", updateIPVersion);\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            ConfigsManager, SubnetsManager, SpacesManager, VLANsManager,\n            UsersManager, FabricsManager, StaticRoutesManager\n        ]).then(function() {\n\n            $scope.updateActions();\n            $scope.active_discovery_data = ConfigsManager.getItemFromList(\n                \"active_discovery_interval\");\n            // Find active discovery interval\n            angular.forEach(\n                $scope.active_discovery_data.choices, function(choice) {\n                    if(choice[0] === $scope.active_discovery_data.value) {\n                        $scope.active_discovery_interval = choice[1];\n                    }\n                });\n\n            // Possibly redirected from another controller that already had\n            // this subnet set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeSubnet = SubnetsManager.getActiveItem();\n            var requestedSubnet = parseInt($routeParams.subnet_id, 10);\n            if(isNaN(requestedSubnet)) {\n                ErrorService.raiseError(\"Invalid subnet identifier.\");\n            } else if(angular.isObject(activeSubnet) &&\n                activeSubnet.id === requestedSubnet) {\n                subnetLoaded(activeSubnet);\n            } else {\n                SubnetsManager.setActiveItem(\n                    requestedSubnet).then(function(subnet) {\n                        subnetLoaded(subnet);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS VLAN Details Controller\n */\n\nangular.module('MAAS').filter('ignoreSelf', function () {\n    return function(objects, self) {\n        var filtered = [];\n        angular.forEach(objects, function(obj) {\n            if(obj !== self) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').controller('VLANDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'VLANsManager', 'SubnetsManager', 'SpacesManager', 'FabricsManager',\n    'ControllersManager', 'UsersManager', 'ManagerHelperService',\n    'ErrorService', 'ValidationService', function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        VLANsManager, SubnetsManager, SpacesManager, FabricsManager,\n        ControllersManager, UsersManager, ManagerHelperService, ErrorService,\n        ValidationService) {\n        var vm = this;\n\n        var filterByVLAN = $filter('filterByVLAN');\n        var filterControllersByVLAN = $filter('filterControllersByVLAN');\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        vm.PROVIDE_DHCP_ACTION = {\n            // Note: 'title' is set dynamically depending on whether or not\n            // DHCP is already enabled on this VLAN.\n            name: \"enable_dhcp\"\n        };\n        vm.RELAY_DHCP_ACTION = {\n            // Note: 'title' is set ndynamically depending on whether or not\n            // DHCP relay is already enabled on this VLAN.\n            name: \"relay_dhcp\"\n        };\n        vm.DISABLE_DHCP_ACTION = {\n            name: \"disable_dhcp\",\n            title: \"Disable DHCP\"\n        };\n        vm.DELETE_ACTION = {\n            name: \"delete\",\n            title: \"Delete\"\n        };\n\n        // Initial values.\n        vm.loaded = false;\n        vm.vlan = null;\n        vm.title = null;\n        vm.actionOption = null;\n        vm.actionOptions = [];\n        vm.vlanManager = VLANsManager;\n        vm.vlans = VLANsManager.getItems();\n        vm.subnets = SubnetsManager.getItems();\n        vm.spaces = SpacesManager.getItems();\n        vm.fabrics = FabricsManager.getItems();\n        vm.controllers = ControllersManager.getItems();\n        vm.actionError = null;\n        vm.relatedSubnets = [];\n        vm.relatedControllers = [];\n        vm.provideDHCPAction = {};\n        vm.primaryRack = null;\n        vm.secondaryRack = null;\n        vm.editSummary = false;\n\n\n        // Return true if the authenticated user is super user.\n        vm.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Called when the \"edit\" button is cliked in the vlan summary\n        vm.enterEditSummary = function() {\n            vm.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the vlan summary\n        vm.exitEditSummary = function() {\n            vm.editSummary = false;\n        };\n\n        // Get the space name for the VLAN.\n        vm.getSpaceName = function() {\n            var space = SpacesManager.getItemFromList(vm.vlan.space);\n            if(space) {\n              return space.name;\n            } else {\n              return \"(undefined)\";\n            }\n        };\n\n        // Get the aciton structure for the action with the specified name.\n        vm.getActionByName = function(name) {\n            var i;\n            for(i = 0 ; i < vm.actionOptions.length ; i++) {\n                if(vm.actionOptions[i].name === name) {\n                    return vm.actionOptions[i];\n                }\n            }\n            return null;\n        };\n\n        // Initialize the provideDHCPAction structure with the current primary\n        // and secondary rack, plus an indication regarding whether or not\n        // adding a dynamic IP range is required.\n        vm.initProvideDHCP = function(forRelay) {\n            vm.provideDHCPAction = {};\n            var dhcp = vm.provideDHCPAction;\n            dhcp.subnet = null;\n            dhcp.relayVLAN = null;\n            if (angular.isNumber(vm.vlan.relay_vlan)) {\n                dhcp.relayVLAN = VLANsManager.getItemFromList(\n                    vm.vlan.relay_vlan);\n            }\n            if (angular.isObject(vm.primaryRack)) {\n                dhcp.primaryRack = vm.primaryRack.system_id;\n            } else if(vm.relatedControllers.length > 0) {\n                // Select the primary controller arbitrarily by default.\n                dhcp.primaryRack = vm.relatedControllers[0].system_id;\n            }\n            if (angular.isObject(vm.secondaryRack)) {\n                dhcp.secondaryRack = vm.secondaryRack.system_id;\n            } else if(vm.relatedControllers.length > 1) {\n                // Select the secondary controller arbitrarily by default.\n                dhcp.secondaryRack = vm.relatedControllers[1].system_id;\n            }\n            dhcp.maxIPs = 0;\n            dhcp.startIP = null;\n            dhcp.endIP = null;\n            dhcp.gatewayIP = \"\";\n            if (angular.isObject(vm.relatedSubnets)) {\n                // Select a subnet arbitrarily by default.\n                if (vm.relatedSubnets.length > 0 &&\n                        angular.isObject(vm.relatedSubnets[0].subnet)) {\n                    dhcp.subnet = vm.relatedSubnets[0].subnet.id;\n                }\n                dhcp.needsDynamicRange = true;\n                var i, subnet;\n                for (i = 0; i < vm.relatedSubnets.length; i++) {\n                    subnet = vm.relatedSubnets[i].subnet;\n                    // If any related subnet already has a dynamic range, we\n                    // cannot prompt the user to enter one here. If a\n                    // suggestion does not exist, a range does not exist\n                    // already.\n                    var iprange = subnet.statistics.suggested_dynamic_range;\n                    if (!angular.isObject(iprange)) {\n                        // If there is already a dynamic range on one of the\n                        // subnets, it's the \"subnet of least surprise\" if\n                        // the user is choosing to reconfigure their rack\n                        // controllers. (if they want DHCP on *another* subnet,\n                        // they should need to be explicit about it.)\n                        dhcp.subnet = subnet.id;\n                        dhcp.needsDynamicRange = false;\n                        break;\n                    }\n                }\n                // We must prompt the user for a subnet and a gateway IP\n                // address if any subnet does not yet contain a gateway IP\n                // address.\n                dhcp.needsGatewayIP = false;\n                dhcp.subnetMissingGatewayIP = true;\n                for (i = 0; i < vm.relatedSubnets.length; i++) {\n                    subnet = vm.relatedSubnets[i].subnet;\n                    if(subnet.gateway_ip === null ||\n                        subnet.gateway_ip === '') {\n                        dhcp.needsGatewayIP = true;\n                        break;\n                    }\n                }\n            }\n            // Since we are setting default values for these three options,\n            // ensure all the appropriate updates occur.\n            if(!forRelay) {\n                vm.updatePrimaryRack();\n                vm.updateSecondaryRack();\n            }\n            vm.updateSubnet(forRelay);\n        };\n\n        // Called when the actionOption has changed.\n        vm.actionOptionChanged = function() {\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                vm.initProvideDHCP(false);\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                vm.initProvideDHCP(true);\n            }\n            // Clear the action error.\n            vm.actionError = null;\n        };\n\n        // Cancel the action.\n        vm.actionCancel = function() {\n            // When the user wants to cancel an action, we need to clear out\n            // both the actionOption (so that the action screen will not be\n            // presented again) and the actionError (so that the error screen\n            // is hidden).\n            vm.actionOption = null;\n            vm.actionError = null;\n        };\n\n        // Called from the Provide DHCP form when the primary rack changes.\n        vm.updatePrimaryRack = function() {\n            var dhcp = vm.provideDHCPAction;\n            // If the user selects the secondary controller to be the primary,\n            // then the primary controller needs to be cleared out.\n            if(dhcp.primaryRack === dhcp.secondaryRack) {\n                dhcp.secondaryRack = null;\n            }\n            var i;\n            for(i = 0 ; i < vm.relatedControllers.length ; i++) {\n                if(vm.relatedControllers[i].system_id !== dhcp.primaryRack) {\n                    dhcp.secondaryRack = vm.relatedControllers[i].system_id;\n                    break;\n                }\n            }\n        };\n\n        // Called from the Provide DHCP form when the secondary rack changes.\n        vm.updateSecondaryRack = function() {\n            var dhcp = vm.provideDHCPAction;\n            // This should no longer be possible due to the filters on the\n            // drop-down boxes, but just in case.\n            if(dhcp.primaryRack === dhcp.secondaryRack) {\n                dhcp.primaryRack = null;\n                dhcp.secondaryRack = null;\n            }\n        };\n\n        // Called from the view to exclude the primary rack when selecting\n        // the secondary rack controller.\n        vm.filterPrimaryRack = function(rack) {\n            var dhcp = vm.provideDHCPAction;\n            return rack.system_id !== dhcp.primaryRack;\n        };\n\n        // Called from the Provide DHCP form when the subnet selection changes.\n        vm.updateSubnet = function(forRelay) {\n            var dhcp = vm.provideDHCPAction;\n            var subnet = SubnetsManager.getItemFromList(dhcp.subnet);\n            if(angular.isObject(subnet)) {\n                var suggested_gateway = null;\n                var iprange = null;\n                if(angular.isObject(subnet.statistics)) {\n                    suggested_gateway = subnet.statistics.suggested_gateway;\n                    iprange = subnet.statistics.suggested_dynamic_range;\n                }\n                if(angular.isObject(iprange) && iprange.num_addresses > 0) {\n                    dhcp.maxIPs = iprange.num_addresses;\n                    if(forRelay) {\n                        dhcp.startIP = \"\";\n                        dhcp.endIP = \"\";\n                        dhcp.startPlaceholder = iprange.start + \"(optional)\";\n                        dhcp.endPlaceholder = iprange.end + \" (optional)\";\n                    } else {\n                        dhcp.startIP = iprange.start;\n                        dhcp.endIP = iprange.end;\n                        dhcp.startPlaceholder = iprange.start;\n                        dhcp.endPlaceholder = iprange.end;\n                    }\n                } else {\n                    // Need to add a dynamic range, but according to our data,\n                    // there is no room on the subnet for a dynamic range.\n                    dhcp.maxIPs = 0;\n                    dhcp.startIP = \"\";\n                    dhcp.endIP = \"\";\n                    dhcp.startPlaceholder = \"(no available IPs)\";\n                    dhcp.endPlaceholder = \"(no available IPs)\";\n                }\n                if(angular.isString(suggested_gateway)) {\n                    if(forRelay) {\n                      dhcp.gatewayIP = \"\";\n                      dhcp.gatewayPlaceholder = (\n                          suggested_gateway + \" (optional)\");\n                    } else {\n                        dhcp.gatewayIP = suggested_gateway;\n                        dhcp.gatewayPlaceholder = suggested_gateway;\n                    }\n                } else {\n                    // This means the subnet already has a gateway, so don't\n                    // bother populating it.\n                    dhcp.gatewayIP = \"\";\n                    dhcp.gatewayPlaceholder = \"\";\n                }\n            } else {\n                // Don't need to add a dynamic range, so ensure these fields\n                // are cleared out.\n                dhcp.maxIPs = 0;\n                dhcp.startIP = null;\n                dhcp.endIP = null;\n                dhcp.gatewayIP = \"\";\n            }\n            if(angular.isObject(subnet)) {\n                dhcp.subnetMissingGatewayIP = !angular.isString(\n                    subnet.gateway_ip);\n            } else {\n                dhcp.subnetMissingGatewayIP = false;\n            }\n            if(dhcp.subnetMissingGatewayIP === false) {\n                dhcp.gatewayIP = null;\n            }\n       };\n\n        vm.actionRetry = function() {\n            // When we clear actionError, the HTML will be re-rendered to\n            // hide the error message (and the user will be taken back to\n            // the previous action they were performing, since we reset\n            // the actionOption in the error handler.\n            vm.actionError = null;\n        };\n\n        // Return True if the current action can be performed.\n        vm.canPerformAction = function() {\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                return vm.relatedSubnets.length > 0;\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                return angular.isObject(vm.provideDHCPAction.relayVLAN);\n            } else {\n                return true;\n            }\n        };\n\n        // Perform the action.\n        vm.actionGo = function() {\n            // Do nothing if action cannot be performed.\n            if(!vm.canPerformAction()) {\n               return;\n            }\n\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                var dhcp = vm.provideDHCPAction;\n                var controllers = [];\n                // These will be undefined if they don't exist, and the region\n                // will simply get an empty dictionary.\n                var extra = {};\n                extra.subnet = dhcp.subnet;\n                extra.start = dhcp.startIP;\n                extra.end = dhcp.endIP;\n                extra.gateway = dhcp.gatewayIP;\n                if(angular.isString(dhcp.primaryRack)) {\n                    controllers.push(dhcp.primaryRack);\n                }\n                if(angular.isString(dhcp.secondaryRack)) {\n                    controllers.push(dhcp.secondaryRack);\n                }\n                // Abort the action without calling down to the region if\n                // the user didn't select a controller.\n                if(controllers.length === 0) {\n                    vm.actionError =\n                        \"A primary rack controller must be specified.\";\n                    return;\n                }\n                VLANsManager.configureDHCP(\n                    vm.vlan, controllers, extra).then(function() {\n                        vm.actionOption = null;\n                        vm.actionError = null;\n                    }, function(result) {\n                        vm.actionError = result.error;\n                        vm.actionOption = vm.PROVIDE_DHCP_ACTION;\n                    });\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                // These will be undefined if they don't exist, and the region\n                // will simply get an empty dictionary.\n                var extraDHCP = {};\n                extraDHCP.subnet = vm.provideDHCPAction.subnet;\n                extraDHCP.start = vm.provideDHCPAction.startIP;\n                extraDHCP.end = vm.provideDHCPAction.endIP;\n                extraDHCP.gateway = vm.provideDHCPAction.gatewayIP;\n                var relay = vm.provideDHCPAction.relayVLAN.id;\n                VLANsManager.configureDHCP(\n                    vm.vlan, [], extraDHCP, relay).then(function() {\n                        vm.actionOption = null;\n                        vm.actionError = null;\n                    }, function(result) {\n                        vm.actionError = result.error;\n                        vm.actionOption = vm.RELAY_DHCP_ACTION;\n                    });\n            } else if(vm.actionOption.name === \"disable_dhcp\") {\n                VLANsManager.disableDHCP(vm.vlan).then(function() {\n                    vm.actionOption = null;\n                    vm.actionError = null;\n                }, function(result) {\n                    vm.actionError = result.error;\n                    vm.actionOption = vm.DISABLE_DHCP_ACTION;\n                });\n            } else if(vm.actionOption.name === \"delete\") {\n                VLANsManager.deleteVLAN(vm.vlan).then(function() {\n                    $location.path(\"/networks\");\n                    vm.actionOption = null;\n                    vm.actionError = null;\n                }, function(result) {\n                    vm.actionError = result.error;\n                    vm.actionOption = vm.DELETE_ACTION;\n                });\n            }\n        };\n\n        // Return true if there is an action error.\n        vm.isActionError = function() {\n            return vm.actionError !== null;\n        };\n\n        // Return the name of the VLAN.\n        vm.getFullVLANName = function(vlan_id) {\n            var vlan = VLANsManager.getItemFromList(vlan_id);\n            var fabric = FabricsManager.getItemFromList(vlan.fabric);\n            return (\n                FabricsManager.getName(fabric) + \".\" +\n                VLANsManager.getName(vlan));\n        };\n\n        // Return the current DHCP status.\n        vm.getDHCPStatus = function() {\n            if(vm.vlan) {\n              if(vm.vlan.dhcp_on) {\n                return \"Enabled\";\n              } else if(vm.vlan.relay_vlan) {\n                return \"Relayed via \" + vm.getFullVLANName(vm.vlan.relay_vlan);\n              } else {\n                return \"Disabled\";\n              }\n            } else {\n              return \"\";\n            }\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            var vlan = vm.vlan;\n            var fabric = vm.fabric;\n            if(angular.isObject(vlan) && angular.isObject(fabric)) {\n                if (!vlan.name) {\n                    if(vlan.vid === 0) {\n                        vm.title = \"Default VLAN\";\n                    } else {\n                        vm.title = \"VLAN \" + vlan.vid;\n                    }\n                } else {\n                    vm.title = vlan.name;\n                }\n                vm.title += \" in \" + fabric.name;\n                $rootScope.title = vm.title;\n            }\n        }\n\n        // Called from a $watch when the management racks are updated.\n        function updateManagementRacks() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            if(vlan.primary_rack) {\n                vm.primaryRack = ControllersManager.getItemFromList(\n                    vlan.primary_rack);\n            } else {\n                vm.primaryRack = null;\n            }\n            if(vlan.secondary_rack) {\n                vm.secondaryRack = ControllersManager.getItemFromList(\n                    vlan.secondary_rack);\n            } else {\n                vm.secondaryRack = null;\n            }\n        }\n\n        // Called from a $watch when the related controllers may have changed.\n        function updateRelatedControllers() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            var racks = [];\n            angular.forEach(vlan.rack_sids, function(rack_sid) {\n                var rack = ControllersManager.getItemFromList(rack_sid);\n                if(angular.isObject(rack)) {\n                    racks.push(rack);\n                }\n            });\n            vm.relatedControllers = racks;\n        }\n\n        // Called from a $watch when the related subnets or spaces may have\n        // changed.\n        function updateRelatedSubnets() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            var subnets = [];\n            angular.forEach(\n                    filterByVLAN(vm.subnets, vlan), function(subnet) {\n                var space = SpacesManager.getItemFromList(subnet.space);\n                if(!angular.isObject(space)) {\n                    space = {name: \"(undefined)\"};\n                }\n                var row = {\n                    subnet: subnet,\n                    space: space\n                };\n                subnets.push(row);\n            });\n            vm.relatedSubnets = subnets;\n        }\n\n        function updatePossibleActions() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            // Clear out the actionOptions array. (this needs to be the same\n            // object, since it's watched from $scope.)\n            vm.actionOptions.length = 0;\n            if(UsersManager.isSuperUser()) {\n                if(!vlan.relay_vlan) {\n                  if(vlan.dhcp_on === true) {\n                      vm.PROVIDE_DHCP_ACTION.title = \"Reconfigure DHCP\";\n                      vm.actionOptions.push(vm.PROVIDE_DHCP_ACTION);\n                      vm.actionOptions.push(vm.DISABLE_DHCP_ACTION);\n                  } else {\n                      vm.PROVIDE_DHCP_ACTION.title = \"Provide DHCP\";\n                      vm.RELAY_DHCP_ACTION.title = \"Relay DHCP\";\n                      vm.actionOptions.push(vm.PROVIDE_DHCP_ACTION);\n                      vm.actionOptions.push(vm.RELAY_DHCP_ACTION);\n                  }\n                } else {\n                  vm.actionOptions.push(vm.RELAY_DHCP_ACTION);\n                  vm.actionOptions.push(vm.DISABLE_DHCP_ACTION);\n                  vm.RELAY_DHCP_ACTION.title = \"Reconfigure DHCP relay\";\n                }\n                if(!vm.isFabricDefault) {\n                    vm.actionOptions.push(vm.DELETE_ACTION);\n                }\n            }\n        }\n\n        // Called when the vlan has been loaded.\n        function vlanLoaded(vlan) {\n            vm.vlan = vlan;\n            vm.fabric = FabricsManager.getItemFromList(vlan.fabric);\n            vm.isFabricDefault = vm.fabric.default_vlan_id === vm.vlan.id;\n            vm.loaded = true;\n\n            updateTitle();\n            updateManagementRacks();\n            updateRelatedControllers();\n            updateRelatedSubnets();\n            updatePossibleActions();\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            VLANsManager, SubnetsManager, SpacesManager, FabricsManager,\n            ControllersManager, UsersManager\n        ]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this vlan set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeVLAN = VLANsManager.getActiveItem();\n            var requestedVLAN = parseInt($routeParams.vlan_id, 10);\n            if(isNaN(requestedVLAN)) {\n                ErrorService.raiseError(\"Invalid VLAN identifier.\");\n            } else if(angular.isObject(activeVLAN) &&\n                activeVLAN.id === requestedVLAN) {\n                vlanLoaded(activeVLAN);\n            } else {\n                VLANsManager.setActiveItem(\n                    requestedVLAN).then(function(vlan) {\n                        vlanLoaded(vlan);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n\n            $scope.$watch(\"vlanDetails.vlan.name\", updateTitle);\n            $scope.$watch(\"vlanDetails.vlan.vid\", updateTitle);\n            $scope.$watch(\"vlanDetails.vlan.dhcp_on\", updatePossibleActions);\n            $scope.$watch(\n                \"vlanDetails.vlan.relay_vlan\", updatePossibleActions);\n            $scope.$watch(\"vlanDetails.fabric.name\", updateTitle);\n            $scope.$watch(\n                \"vlanDetails.vlan.primary_rack\", updateManagementRacks);\n            $scope.$watch(\n                \"vlanDetails.vlan.secondary_rack\", updateManagementRacks);\n\n            $scope.$watchCollection(\n                \"vlanDetails.subnets\", updateRelatedSubnets);\n            $scope.$watchCollection(\n                \"vlanDetails.spaces\", updateRelatedSubnets);\n            $scope.$watchCollection(\n                \"vlanDetails.controllers\", updateRelatedControllers);\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zone Details Controller\n */\n\nangular.module('MAAS').controller('ZoneDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location', 'MachinesManager',\n    'DevicesManager', 'ZonesManager', 'UsersManager',\n    'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $location, MachinesManager,\n        DevicesManager, ZonesManager, UsersManager, ManagerHelperService,\n        ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"zones\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.zone = null;\n        $scope.zoneManager = ZonesManager;\n        $scope.editSummary = false;\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.zone.name;\n        }\n\n        // Called when the zone has been loaded.\n        function zoneLoaded(zone) {\n            $scope.zone = zone;\n            $scope.loaded = true;\n            updateTitle();\n        }\n\n\n        // Called when the \"edit\" button is cliked in the zone summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the zone summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default zone.\n        $scope.isDefaultZone = function() {\n            if(angular.isObject($scope.zone)) {\n                return $scope.zone.id === 1;\n            }\n            return false;\n        };\n\n        // Called to check if the zone can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.zone)) {\n                return $scope.zone.id !== 0;\n            }\n            return false;\n        };\n\n        // Called when the delete zone button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete zone button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete space button is pressed.\n        $scope.deleteConfirmButton = function() {\n            ZonesManager.deleteItem($scope.zone).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/zones\");\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this zone set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeZone = ZonesManager.getActiveItem();\n            var requestedZone = parseInt($routeParams.zone_id, 10);\n            if(isNaN(requestedZone)) {\n                ErrorService.raiseError(\"Invalid zone identifier.\");\n            } else if(angular.isObject(activeZone) &&\n                activeZone.id === requestedZone) {\n                zoneLoaded(activeZone);\n            } else {\n                ZonesManager.setActiveItem(\n                    requestedZone).then(function(zone) {\n                        zoneLoaded(zone);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zones List Controller\n */\n\nangular.module('MAAS').controller('ZonesListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', 'MachinesManager',\n    'DevicesManager', 'ControllersManager', 'ZonesManager', 'ServicesManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function($scope, $rootScope, $routeParams, $filter, MachinesManager,\n        DevicesManager, ControllersManager, ZonesManager, ServicesManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Zones\";\n        $rootScope.page = \"zones\";\n\n        // Set initial values.\n        $scope.zoneManager = ZonesManager;\n        $scope.zones = ZonesManager.getItems();\n        $scope.currentpage = \"zones\";\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.loading = true;\n        $scope.action = {\n          open: false,\n          obj: {}\n        };\n\n        // Open add zone view.\n        $scope.addZone = function() {\n          $scope.action.open = true;\n        };\n\n        // Saving has completed.\n        $scope.closeZone = function() {\n          $scope.action.open = false;\n          $scope.action.obj = {};\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, UsersManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n        }\n    ]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Accordion directive.\n *\n * Provides an accordion effect to an element with maas-accordion class and\n * all child elements with maas-accordion-tab. Only one accordion tab is open\n * at a time, selecting another accordion will set \"active\" on that\n * accordion tab.\n */\n\n\nangular.module('MAAS').directive('maasAccordion', function() {\n    return {\n        restrict: \"C\",\n        link: function(scope, element, attrs) {\n\n            // Called when accordion tabs are clicked. Removes active on\n            // all other tabs except to the tab that was clicked.\n            var clickHandler = function(evt) {\n                var tab = evt.data.tab;\n                angular.element(tab).toggleClass(\"is-selected\");\n            };\n\n            // Listen for the click event on all tabs in the accordion.\n            var tabs = element.find(\".maas-accordion-tab\");\n            angular.forEach(tabs, function(tab) {\n                tab = angular.element(tab);\n                tab.on(\"click\", {\n                    tab: tab\n                }, clickHandler);\n            });\n\n            // Remove the handlers when the scope is destroyed.\n            scope.$on(\"$destroy\", function() {\n                angular.forEach(tabs, function(tab) {\n                    angular.element(tab).off(\"click\", clickHandler);\n                });\n            });\n        }\n    };\n});\n","/* Copyright 2016-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Boot images directive.\n*/\n\nangular.module('MAAS').directive('maasBootImagesStatus', [\n    'BootResourcesManager',\n    function(BootResourcesManager) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            template: [\n                '<p class=\"page-header__status\" ',\n                    'data-ng-if=\"data.region_import_running\">',\n                    '<span class=\"u-text--loading\">',\n                        '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                        'Step 1/2: Region controller importing',\n                    '</span>',\n                '</p>',\n                '<p class=\"page-header__status\" ',\n                    'data-ng-if=\"!data.region_import_running && ',\n                    'data.rack_import_running\">',\n                    '<span class=\"u-text--loading\">',\n                        '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                        'Step 2/2: Rack controller(s) importing',\n                    '</span>',\n                '</p>'\n            ].join(''),\n            controller: function($scope, $rootScope, $element, $document) {\n                // This controller doesn't start the polling. The\n                // `maasBootImages` controller should be used on the page to\n                // start the polling. This just presents a nice status spinner\n                // when the polling is enabled.\n                $scope.data = BootResourcesManager.getData();\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasBootImages', [\n    '$filter', 'BootResourcesManager', 'UsersManager', 'ManagerHelperService',\n    function($filter, BootResourcesManager,\n        UsersManager, ManagerHelperService) {\n        return {\n            restrict: \"E\",\n            scope: {\n                design: \"=?\"\n            },\n            templateUrl: (\n                'static/partials/boot-images.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.saving = false;\n                $scope.stopping = false;\n                $scope.design = $scope.design || 'page';\n                $scope.bootResources = BootResourcesManager.getData();\n                $scope.ubuntuImages = [];\n                $scope.source = {\n                    isNew: false,\n                    tooMany: false,\n                    showingAdvanced: false,\n                    connecting: false,\n                    errorMessage: \"\",\n                    source_type: 'maas.io',\n                    url: '',\n                    keyring_filename: '',\n                    keyring_data: '',\n                    releases: [],\n                    arches: [],\n                    selections: {\n                        changed: false,\n                        releases: [],\n                        arches: []\n                    }\n                };\n                $scope.ubuntuCoreImages = [];\n                $scope.ubuntu_core = {\n                    changed: false,\n                    images: []\n                };\n                $scope.otherImages = [];\n                $scope.other = {\n                    changed: false,\n                    images: []\n                };\n                $scope.generatedImages = [];\n                $scope.customImages = [];\n                $scope.ubuntuDeleteId = null;\n                $scope.removingImage = null;\n\n                // Return true if the authenticated user is super user.\n                $scope.isSuperUser = function() {\n                    return UsersManager.isSuperUser();\n                };\n\n                // Return the overall title icon.\n                $scope.getTitleIcon = function() {\n                    if($scope.bootResources.resources.length === 0) {\n                        return 'p-icon--success-muted';\n                    } else {\n                        return 'p-icon--success';\n                    }\n                };\n\n                // Return true if the mirror path section should be shown.\n                $scope.showMirrorPath = function() {\n                    if($scope.source.source_type === 'custom') {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                };\n\n                // Return true if the advanced options are shown.\n                $scope.isShowingAdvancedOptions = function() {\n                    return $scope.source.showingAdvanced;\n                };\n\n                // Toggle showing the advanced options.\n                $scope.toggleAdvancedOptions = function() {\n                    $scope.source.showingAdvanced = (\n                        !$scope.source.showingAdvanced);\n                };\n\n                // Return true if both keyring options are set.\n                $scope.bothKeyringOptionsSet = function() {\n                    return (\n                        $scope.source.keyring_filename.length > 0 &&\n                        $scope.source.keyring_data.length > 0);\n                };\n\n                // Return true when the connect button for the mirror path\n                // should be shown.\n                $scope.showConnectButton = function() {\n                    return $scope.source.isNew;\n                };\n\n                // Called when the source radio chanaged.\n                $scope.sourceChanged = function() {\n                    var currentSources = $scope.bootResources.ubuntu.sources;\n                    if(currentSources.length === 0) {\n                        $scope.source.isNew = true;\n                    } else {\n                        var prevNew = $scope.source.isNew;\n                        $scope.source.isNew = (\n                            $scope.source.source_type !==\n                            currentSources[0].source_type);\n                        if($scope.source.source_type === 'custom') {\n                            $scope.source.isNew = $scope.source.isNew || (\n                                $scope.source.url !==\n                                currentSources[0].url\n                            );\n                        }\n                        if(prevNew && !$scope.source.isNew) {\n                            // No longer a new source set url and keyring to\n                            // original.\n                            $scope.source.url = currentSources[0].url;\n                            $scope.source.keyring_filename = (\n                                currentSources[0].keyring_filename);\n                            $scope.source.keyring_data = (\n                                currentSources[0].keyring_data);\n                        }\n                        $scope.source.releases = [];\n                        $scope.source.arches = [];\n                        $scope.source.selections = {\n                            changed: false,\n                            releases: [],\n                            arches: []\n                        };\n                    }\n                    $scope.updateSource();\n                    $scope.regenerateUbuntuImages();\n\n                    // When the source is new and its maas.io automatically\n                    // fetch the source information.\n                    if($scope.source.isNew &&\n                        $scope.source.source_type === 'maas.io') {\n                        $scope.connect();\n                    }\n                };\n\n                // Return true when the connect button should be disabled.\n                $scope.isConnectButtonDisabled = function() {\n                    if($scope.source.source_type === 'maas.io') {\n                        return false;\n                    } else {\n                        return ($scope.bothKeyringOptionsSet() ||\n                            $scope.source.url.length === 0 ||\n                            $scope.source.connecting);\n                    }\n                };\n\n                // Return the source parameters.\n                $scope.getSourceParams = function() {\n                    if($scope.source.source_type === 'maas.io') {\n                        return {\n                            source_type: 'maas.io'\n                        };\n                    } else {\n                        return {\n                            source_type: $scope.source.source_type,\n                            url: $scope.source.url,\n                            keyring_filename: $scope.source.keyring_filename,\n                            keyring_data: $scope.source.keyring_data\n                        };\n                    }\n                };\n\n                // Select the default images that should be selected. Current\n                // defaults are '18.04 LTS' and 'amd64'.\n                $scope.selectDefaults = function() {\n                    angular.forEach($scope.source.releases, function(release) {\n                        if(release.name === \"bionic\") {\n                            $scope.source.selections.releases.push(release);\n                        }\n                    });\n                    angular.forEach($scope.source.arches, function(arch) {\n                        if(arch.name === \"amd64\") {\n                            $scope.source.selections.arches.push(arch);\n                        }\n                    });\n                };\n\n                // Connected to the simplestreams endpoint. This only gets the\n                // information from the endpoint it does not save it into the\n                // database.\n                $scope.connect = function() {\n                    if($scope.isConnectButtonDisabled()) {\n                        return;\n                    }\n\n                    var source = $scope.getSourceParams();\n                    $scope.source.connecting = true;\n                    $scope.source.releases = [];\n                    $scope.source.arches = [];\n                    $scope.source.selections.changed = true;\n                    $scope.source.selections.releases = [];\n                    $scope.source.selections.arches = [];\n                    $scope.regenerateUbuntuImages();\n                    BootResourcesManager.fetch(source).then(function(data) {\n                        $scope.source.connecting = false;\n                        data = angular.fromJson(data);\n                        $scope.source.releases = data.releases;\n                        $scope.source.arches = data.arches;\n                        $scope.selectDefaults();\n                        $scope.regenerateUbuntuImages();\n                    }, function(error) {\n                        $scope.source.connecting = false;\n                        $scope.source.errorMessage = error;\n                    });\n                };\n\n                // Return true if the connect block should be shown.\n                $scope.showConnectBlock = function() {\n                    return $scope.source.tooMany || (\n                        $scope.source.isNew && !$scope.showSelections());\n                };\n\n                // Return true if the release and architecture selection\n                // should be shown.\n                $scope.showSelections = function() {\n                    return (\n                        $scope.source.releases.length > 0 &&\n                        $scope.source.arches.length > 0);\n                };\n\n                // Return the Ubuntu LTS releases.\n                $scope.getUbuntuLTSReleases = function() {\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    if($scope.source.isNew) {\n                        releases = $scope.source.releases;\n                    }\n                    var filtered = [];\n                    angular.forEach(releases, function(release) {\n                        if(!release.deleted &&\n                            release.title.indexOf('LTS') !== -1) {\n                            filtered.push(release);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return the Ubuntu non-LTS releases.\n                $scope.getUbuntuNonLTSReleases = function() {\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    if($scope.source.isNew) {\n                        releases = $scope.source.releases;\n                    }\n                    var filtered = [];\n                    angular.forEach(releases, function(release) {\n                        if(!release.deleted &&\n                            release.title.indexOf('LTS') === -1) {\n                            filtered.push(release);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return the available architectures.\n                $scope.getArchitectures = function() {\n                    var arches = $scope.bootResources.ubuntu.arches;\n                    if($scope.source.isNew) {\n                        arches = $scope.source.arches;\n                    }\n                    var filtered = [];\n                    angular.forEach(arches, function(arch) {\n                        if(!arch.deleted) {\n                            filtered.push(arch);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return true if the source has this selected.\n                $scope.isSelected = function(type, obj) {\n                    return $scope.source.selections[type].indexOf(obj) >= 0;\n                };\n\n                // Toggle the selection of the release or the architecture.\n                $scope.toggleSelection = function(type, obj) {\n                    var idx = $scope.source.selections[type].indexOf(obj);\n                    if(idx === -1) {\n                        $scope.source.selections[type].push(obj);\n                    } else {\n                        $scope.source.selections[type].splice(idx, 1);\n                    }\n                    $scope.source.selections.changed = true;\n                    $scope.regenerateUbuntuImages();\n                };\n\n                // Return true if the images table should be shown.\n                $scope.showImagesTable = function() {\n                    if($scope.ubuntuImages.length > 0) {\n                        return true;\n                    } else {\n                        // Show the images table source has\n                        // releases and architectures.\n                        return (\n                            $scope.source.arches.length > 0 &&\n                            $scope.source.releases.length > 0);\n                    }\n                };\n\n                // Regenerates the Ubuntu images list for the directive.\n                $scope.regenerateUbuntuImages = function() {\n                    var getResource = function() { return null; };\n                    var resources = $scope.bootResources.resources.filter(\n                        function(resource) {\n                            var name_split = resource.name.split('/');\n                            var resource_os = name_split[0];\n                            return (\n                                resource.rtype === 0 &&\n                                resource_os === 'ubuntu');\n                        });\n                    if(!$scope.source.isNew) {\n                        getResource = function(release, arch) {\n                            var i;\n                            for(i = 0; i < resources.length; i++) {\n                                // Only care about Ubuntu images.\n                                var resource = (resources[i]);\n                                var name_split = resource.name.split('/');\n                                var resource_release = name_split[1];\n                                if(resource_release === release &&\n                                    resource.arch === arch) {\n                                    resources.splice(i, 1);\n                                    return resource;\n                                }\n                            }\n                            return null;\n                        };\n                    }\n\n                    // Create the images based on the selections.\n                    $scope.ubuntuImages.length = 0;\n                    angular.forEach($scope.source.selections.releases,\n                        function(release) {\n                            angular.forEach($scope.source.selections.arches,\n                                function(arch) {\n                                    var image = {\n                                        icon: 'p-icon--status-queued',\n                                        title: release.title,\n                                        arch: arch.title,\n                                        size: '-',\n                                        status: 'Selected for download',\n                                        beingDeleted: false,\n                                        name: release.name\n                                    };\n                                    var resource = getResource(\n                                        release.name, arch.name);\n                                    if(angular.isObject(resource)) {\n                                        image.resourceId = resource.id;\n                                        image.icon = (\n                                            'p-icon--status-' + resource.icon);\n                                        image.size = resource.size;\n                                        image.status = resource.status;\n                                        if(resource.downloading) {\n                                            image.icon += ' u-animation--pulse';\n                                        }\n                                    }\n                                    $scope.ubuntuImages.push(image);\n                                });\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    if(!$scope.source.isNew) {\n                        angular.forEach(resources, function(resource) {\n                            var name_split = resource.name.split('/');\n                            var image = {\n                                icon: 'p-icon--status-failed',\n                                title: resource.title,\n                                arch: resource.arch,\n                                size: resource.size,\n                                status: 'Will be deleted',\n                                beingDeleted: true,\n                                name: name_split[1]\n                            };\n                            $scope.ubuntuImages.push(image);\n                        });\n                    }\n                };\n\n                // Regenerates the Ubuntu Core images list for the directive.\n                $scope.regenerateUbuntuCoreImages = function() {\n                    var isUbuntuCore = function(resource) {\n                        var name_split = resource.name.split('/');\n                        var resource_os = name_split[0];\n                        return (\n                            resource.rtype === 0 &&\n                            resource_os === 'ubuntu-core');\n                    };\n                    var resources = (\n                        $scope.bootResources.resources.filter(isUbuntuCore));\n                    var getResource = function(release, arch) {\n                        var i;\n                        for(i = 0; i < resources.length; i++) {\n                            // Only care about other images. Removing custom,\n                            // bootloaders, and Ubuntu images.\n                            var resource = (resources[i]);\n                            var name_split = resource.name.split('/');\n                            var resource_release = name_split[1];\n                            if(resource_release === release &&\n                                resource.arch === arch) {\n                                resources.splice(i, 1);\n                                return resource;\n                            }\n                        }\n                        return null;\n                    };\n\n                    // Create the images based on the selections.\n                    $scope.ubuntuCoreImages.length = 0;\n                    angular.forEach($scope.ubuntu_core.images,\n                        function(ubuntuCoreImage) {\n                            if(ubuntuCoreImage.checked) {\n                                var name_split = ubuntuCoreImage.name.split(\n                                    '/');\n                                var image = {\n                                    icon: 'p-icon--status-queued',\n                                    title: ubuntuCoreImage.title,\n                                    arch: name_split[1],\n                                    size: '-',\n                                    status: 'Selected for download',\n                                    beingDeleted: false\n                                };\n                                var resource = getResource(\n                                    name_split[3], name_split[1]);\n                                if(angular.isObject(resource)) {\n                                    image.icon = (\n                                        'p-icon--status-' + resource.icon);\n                                    image.size = resource.size;\n                                    image.status = resource.status;\n                                    if(resource.downloading) {\n                                        image.icon += ' u-animation--pulse';\n                                    }\n                                }\n                                $scope.ubuntuCoreImages.push(image);\n                            }\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    angular.forEach(resources, function(resource) {\n                        var image = {\n                            icon: 'p-icon--status-failed',\n                            title: resource.title,\n                            arch: resource.arch,\n                            size: resource.size,\n                            status: 'Will be deleted',\n                            beingDeleted: true\n                        };\n                        $scope.ubuntuCoreImages.push(image);\n                    });\n                };\n\n                // Regenerates the other images list for the directive.\n                $scope.regenerateOtherImages = function() {\n                    var isOther = function(resource) {\n                        var name_split = resource.name.split('/');\n                        var resource_os = name_split[0];\n                        return (\n                            resource.rtype === 0 &&\n                            resource_os !== 'ubuntu' &&\n                            resource_os !== 'ubuntu-core' &&\n                            resource_os !== 'custom');\n                    };\n                    var resources = (\n                        $scope.bootResources.resources.filter(isOther));\n                    var getResource = function(release, arch) {\n                        var i;\n                        for(i = 0; i < resources.length; i++) {\n                            // Only care about other images. Removing custom,\n                            // bootloaders, and Ubuntu images.\n                            var resource = (resources[i]);\n                            var name_split = resource.name.split('/');\n                            var resource_release = name_split[1];\n                            if(resource_release === release &&\n                                resource.arch === arch) {\n                                resources.splice(i, 1);\n                                return resource;\n                            }\n                        }\n                        return null;\n                    };\n\n                    // Create the images based on the selections.\n                    $scope.otherImages.length = 0;\n                    angular.forEach($scope.other.images,\n                        function(otherImage) {\n                            if(otherImage.checked) {\n                                var name_split = otherImage.name.split('/');\n                                var image = {\n                                    icon: 'p-icon--status-queued',\n                                    title: otherImage.title,\n                                    arch: name_split[1],\n                                    size: '-',\n                                    status: 'Selected for download',\n                                    beingDeleted: false\n                                };\n                                var resource = getResource(\n                                    name_split[3], name_split[1]);\n                                if(angular.isObject(resource)) {\n                                    image.icon = (\n                                        'p-icon--status-' + resource.icon);\n                                    image.size = resource.size;\n                                    image.status = resource.status;\n                                    if(resource.downloading) {\n                                        image.icon += ' u-animation--pulse';\n                                    }\n                                }\n                                $scope.otherImages.push(image);\n                            }\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    angular.forEach(resources, function(resource) {\n                        var image = {\n                            icon: 'p-icon--status-failed',\n                            title: resource.title,\n                            arch: resource.arch,\n                            size: resource.size,\n                            status: 'Will be deleted',\n                            beingDeleted: true\n                        };\n                        $scope.otherImages.push(image);\n                    });\n                };\n\n                // Helper for basic image generation.\n                $scope._regenerateImages = function(rtype, images) {\n                    // Create the generated images list.\n                    images.length = 0;\n                    angular.forEach($scope.bootResources.resources,\n                        function(resource) {\n                            if(resource.rtype === rtype) {\n                                var image = {\n                                    icon: 'p-icon--status-' + resource.icon,\n                                    title: resource.title,\n                                    arch: resource.arch,\n                                    image_id: resource.id,\n                                    size: resource.size,\n                                    status: resource.status\n                                };\n                                if(resource.downloading) {\n                                    image.icon += ' u-animation--pulse';\n                                }\n                                images.push(image);\n                            }\n                        });\n                };\n\n                // Regenerates the generated images list for the directive.\n                $scope.regenerateGeneratedImages = function() {\n                    $scope._regenerateImages(1, $scope.generatedImages);\n                };\n\n                // Regenerates the custom images list for the directive.\n                $scope.regenerateCustomImages = function() {\n                    $scope._regenerateImages(2, $scope.customImages);\n                };\n\n                // Returns true if at least one LTS is selected.\n                $scope.ltsIsSelected = function() {\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        // Must have LTS in the title and not being deleted.\n                        if(!$scope.ubuntuImages[i].beingDeleted &&\n                            $scope.ubuntuImages[i].title.indexOf('LTS') >= 0) {\n                            // Must be greater than Ubuntu series 14.\n                            var series = parseInt(\n                                $scope.ubuntuImages[i].title.split('.')[0], 10);\n                            if(series >= 14) {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                };\n\n                // Returns true if the commission series is selected\n                $scope.commissioningSeriesSelected = function() {\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if(!$scope.ubuntuImages[i].beingDeleted &&\n                           $scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n\n                // Return if we are asking about deleting this image.\n                $scope.isShowingDeleteConfirm = function(image) {\n                    return image === $scope.removingImage;\n                };\n\n                // Mark the image for deletion.\n                $scope.quickRemove = function(image) {\n                    $scope.removingImage = image;\n                };\n\n                // Cancel image deletion.\n                $scope.cancelRemove = function() {\n                    $scope.removingImage = null;\n                };\n\n                // Mark the image for deletion.\n                $scope.confirmRemove = function(image) {\n                    if(image === $scope.removingImage) {\n                        BootResourcesManager.deleteImage(\n                            {id: image.image_id});\n                    }\n                    $scope.cancelRemove();\n                };\n\n                // Return true if the stop import button should be shown.\n                $scope.showStopImportButton = function() {\n                    return $scope.bootResources.region_import_running;\n                };\n\n                // Return true if should show save selection button, this\n                // doesn't mean it can actually be clicked.\n                $scope.showSaveSelection = function() {\n                    return $scope.showImagesTable();\n                };\n\n                // Return true if can save the current selection.\n                $scope.canSaveSelection = function() {\n                    var commissioning_series_being_deleted = false;\n                    var commissioning_series_arches = 0;\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if($scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series) {\n                            commissioning_series_arches++;\n                        }\n                    }\n                    // Only prevent the current commissioning series from\n                    // being deleted if it isn't the commissioning series isn't\n                    // available on another architecture.. If the current\n                    // commissioning series isn't currently selected another\n                    // LTS may be choosen, downloaded, and configured as the\n                    // commissioning series.\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if($scope.ubuntuImages[i].beingDeleted &&\n                           $scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series &&\n                           commissioning_series_arches === 1) {\n                            commissioning_series_being_deleted = true;\n                            break;\n                        }\n                    }\n                    return (\n                        !commissioning_series_being_deleted &&\n                        !$scope.saving &&\n                        !$scope.stopping &&\n                        $scope.ltsIsSelected());\n                };\n\n                // Return the text for the save selection button.\n                $scope.getSaveSelectionText = function() {\n                    if($scope.saving) {\n                        return \"Saving...\";\n                    } else {\n                        return \"Update selection\";\n                    }\n                };\n\n                // Return true if can stop current import.\n                $scope.canStopImport = function() {\n                    return !$scope.saving && !$scope.stopping;\n                };\n\n                // Return the text for the stop import button.\n                $scope.getStopImportText = function() {\n                    if($scope.stopping) {\n                        return \"Stopping...\";\n                    } else {\n                        return \"Stop import\";\n                    }\n                };\n\n                // Called to stop the import.\n                $scope.stopImport = function() {\n                    if(!$scope.canStopImport()) {\n                        return;\n                    }\n\n                    $scope.stopping = true;\n                    BootResourcesManager.stopImport().then(function() {\n                        $scope.stopping = false;\n                    });\n                };\n\n                // Save the selections into boot selections.\n                $scope.saveSelection = function() {\n                    if(!$scope.canSaveSelection()) {\n                        return;\n                    }\n\n                    var params = $scope.getSourceParams();\n                    params.releases = (\n                        $scope.source.selections.releases.map(function(obj) {\n                            return obj.name;\n                        }));\n                    params.arches = (\n                        $scope.source.selections.arches.map(function(obj) {\n                            return obj.name;\n                        }));\n                    $scope.saving = true;\n                    BootResourcesManager.saveUbuntu(params).then(function() {\n                        $scope.saving = false;\n                        $scope.source.isNew = false;\n                        $scope.source.selections.changed = false;\n                        $scope.updateSource();\n                    });\n                };\n\n                // Re-create an array with the new objects using the old\n                // selected array.\n                $scope.getNewSelections = function(newObjs, oldSelections) {\n                    var newSelections = [];\n                    angular.forEach(newObjs, function(obj) {\n                        angular.forEach(oldSelections, function(selection) {\n                            if(obj.name === selection.name) {\n                                newSelections.push(obj);\n                            }\n                        });\n                    });\n                    return newSelections;\n                };\n\n                // Update the source information.\n                $scope.updateSource = function() {\n                    // Do not update if the source is new.\n                    if($scope.source.isNew) {\n                        return;\n                    }\n\n                    var source_len = $scope.bootResources.ubuntu.sources.length;\n                    if(source_len === 0) {\n                        $scope.source.isNew = true;\n                        $scope.source.source_type = 'custom';\n                        $scope.source.errorMessage = (\n                            \"Currently no source exists.\");\n                    } else if(source_len === 1) {\n                        var source = $scope.bootResources.ubuntu.sources[0];\n                        $scope.source.source_type = source.source_type;\n                        if(source.source_type === \"maas.io\") {\n                            $scope.source.url = \"\";\n                            $scope.source.keyring_filename = \"\";\n                            $scope.source.keyring_data = \"\";\n                        } else {\n                            $scope.source.url = source.url;\n                            $scope.source.keyring_filename = (\n                                source.keyring_filename);\n                            $scope.source.keyring_data = source.keyring_data;\n                        }\n                        $scope.source.releases = (\n                            $scope.bootResources.ubuntu.releases);\n                        $scope.source.arches = (\n                            $scope.bootResources.ubuntu.arches);\n                        if(!$scope.source.selections.changed) {\n                            // User didn't make a change update to the\n                            // current selections server side.\n                            $scope.source.selections.releases = (\n                                $scope.source.releases.filter(function(obj) {\n                                    return obj.checked;\n                                }));\n                            $scope.source.selections.arches = (\n                                $scope.source.arches.filter(function(obj) {\n                                return obj.checked;\n                            }));\n                        } else {\n                            // Update the objects to be the new objects, with\n                            // the same selections.\n                            $scope.source.selections.releases = (\n                                $scope.getNewSelections(\n                                    $scope.source.releases,\n                                    $scope.source.selections.releases));\n                            $scope.source.selections.arches = (\n                                $scope.getNewSelections(\n                                    $scope.source.arches,\n                                    $scope.source.selections.arches));\n                        }\n                        $scope.regenerateUbuntuImages();\n                    } else {\n                        // Having more than one source prevents modification\n                        // of the sources.\n                        $scope.source.tooMany = true;\n                        $scope.source.releases = (\n                            $scope.bootResources.ubuntu.releases);\n                        $scope.source.arches = (\n                            $scope.bootResources.ubuntu.arches);\n                        $scope.source.selections.releases = (\n                            $scope.source.releases.filter(function(obj) {\n                                return obj.checked;\n                            }));\n                        $scope.source.selections.arches = (\n                            $scope.source.arches.filter(function(obj) {\n                            return obj.checked;\n                        }));\n                        $scope.source.errorMessage = (\n                            \"More than one image source exists. UI does not \" +\n                            \"support modification of sources when more than \" +\n                            \"one has been defined. Used the API to adjust \" +\n                            \"your sources.\");\n                        $scope.regenerateUbuntuImages();\n                    }\n                };\n\n                // Toggle the selection of Ubuntu Core images.\n                $scope.toggleUbuntuCoreSelection = function(image) {\n                    $scope.ubuntu_core.changed = true;\n                    image.checked = !image.checked;\n                    $scope.regenerateUbuntuCoreImages();\n                };\n\n                // Save the Ubuntu Core image selections into boot selections.\n                $scope.saveUbuntuCoreSelection = function() {\n                    var params = {\n                        images: $scope.ubuntu_core.images.filter(function(\n                                image) {\n                            return image.checked;\n                        }).map(function(image) {\n                            return image.name;\n                        })\n                    };\n                    $scope.saving = true;\n                    BootResourcesManager.saveUbuntuCore(params).then(\n                            function() {\n                        $scope.saving = false;\n                    });\n                };\n\n                // Toggle the selection of other images.\n                $scope.toggleOtherSelection = function(image) {\n                    $scope.other.changed = true;\n                    image.checked = !image.checked;\n                    $scope.regenerateOtherImages();\n                };\n\n                // Save the other image selections into boot selections.\n                $scope.saveOtherSelection = function() {\n                    var params = {\n                        images: $scope.other.images.filter(function(image) {\n                            return image.checked;\n                        }).map(function(image) {\n                            return image.name;\n                        })\n                    };\n                    $scope.saving = true;\n                    BootResourcesManager.saveOther(params).then(function() {\n                        $scope.saving = false;\n                    });\n                };\n\n                // Return True if the Ubuntu image can be removed.\n                $scope.canBeRemoved = function(image) {\n                    // Image must have a resourceId to be able to be removed.\n                    if(!angular.isNumber(image.resourceId)) {\n                        return false;\n                    }\n\n                    // If the release or architecture is set to deleted\n                    // then this image can be deleted.\n                    var i;\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    var arches = $scope.bootResources.ubuntu.arches;\n                    for(i = 0; i < releases.length; i++) {\n                        var release = releases[i];\n                        if(release.deleted && image.title === release.title) {\n                            return true;\n                        }\n                    }\n                    for(i = 0; i < arches.length; i++) {\n                        var arch = arches[i];\n                        if(arch.deleted && image.arch === arch.name) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n\n                // Deletes the give image.\n                $scope.deleteImage = function(image) {\n                    if(angular.isObject(image)) {\n                        $scope.ubuntuDeleteId = image.resourceId;\n                    } else {\n                        $scope.ubuntuDeleteId = null;\n                    }\n                };\n\n                // Deletes the give image.\n                $scope.confirmDeleteImage = function() {\n                    // Delete the image by its resourceId.\n                    BootResourcesManager.deleteImage(\n                        {id: $scope.ubuntuDeleteId});\n                    $scope.ubuntuDeleteId = null;\n                };\n\n                // Start polling now that the directive is viewable and ensure\n                // the UserManager is loaded.\n                var ready = 2;\n                BootResourcesManager.startPolling().then(function() {\n                    ready -= 1;\n                    if(ready === 0) {\n                        $scope.loading = false;\n                    }\n                });\n                ManagerHelperService.loadManager(\n                    $scope, UsersManager).then(function() {\n                    ready -= 1;\n                    if(ready === 0) {\n                        $scope.loading = false;\n                    }\n                });\n\n                // Update the source information with the ubuntu source\n                // information changes.\n                $scope.$watch(\"bootResources.ubuntu\", function() {\n                    if(!angular.isObject($scope.bootResources.ubuntu)) {\n                        return;\n                    }\n                    $scope.updateSource();\n                });\n\n                // Regenerate the images array when the resources change.\n                $scope.$watch(\"bootResources.resources\", function() {\n                    if(!angular.isArray($scope.bootResources.resources)) {\n                        return;\n                    }\n                    $scope.regenerateUbuntuImages();\n                    $scope.regenerateUbuntuCoreImages();\n                    $scope.regenerateOtherImages();\n                    $scope.regenerateGeneratedImages();\n                    $scope.regenerateCustomImages();\n                });\n\n                $scope.$watch(\"bootResources.ubuntu_core_images\", function() {\n                    var images = $scope.bootResources.ubuntu_core_images;\n                    if(!angular.isArray(images)) {\n                        return;\n                    }\n                    if(!$scope.ubuntu_core.changed) {\n                        $scope.ubuntu_core.images = images;\n                    }\n                    $scope.regenerateUbuntuCoreImages();\n                });\n\n                $scope.$watch(\"bootResources.other_images\", function() {\n                    if(!angular.isArray($scope.bootResources.other_images)) {\n                        return;\n                    }\n                    if(!$scope.other.changed) {\n                        $scope.other.images = $scope.bootResources.other_images;\n                    }\n                    $scope.regenerateOtherImages();\n                });\n\n                // Stop polling when the directive is destroyed.\n                $scope.$on('$destroy', function() {\n                    BootResourcesManager.stopPolling();\n                });\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Call to action directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the cta.html into the template cache.\n    $templateCache.put('directive/templates/cta.html', [\n      '<div class=\"p-contextual-menu\">',\n        '<button ',\n          'class=\"p-button p-contextual-menu__toggle\" ',\n          'aria-controls=\"#cta-menu\" ',\n          'aria-expanded=\"false\" ',\n          'aria-haspopup=\"true\" ',\n          'data-ng-click=\"shown=!shown\"',\n        '>',\n          '{$ getTitle() $}',\n          '<i class=\"p-icon--chevron on-right\"></i>',\n        '</button>',\n        '<div class=\"p-contextual-menu__dropdown\" ',\n          'id=\"cta-menu\" ',\n          'aria-hidden=\"false\" ',\n          'aria-label=\"submenu\"',\n          'data-ng-show=\"shown\"',\n        '>',\n          '<button ',\n            'class=\"',\n              'p-button u-no-margin--left p-contextual-menu__link',\n            '\" ',\n            'data-ng-repeat=\"select in maasCta\" ',\n            'data-ng-click=\"selectItem(select)\">',\n              '{$ getOptionTitle(select) $}',\n          '</button>',\n        '</div>',\n      '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasCta', function() {\n    return {\n        restrict: \"A\",\n        replace: true,\n        require: \"ngModel\",\n        scope: {\n            maasCta: '=',\n            ngModel: '='\n        },\n        templateUrl: 'directive/templates/cta.html',\n        link : function(scope, element, attrs, ngModelCtrl) {\n            // Use the link function to grab the ngModel controller.\n\n            // Title of the button when not active.\n            var defaultTitle = \"Take action\";\n            if(angular.isString(attrs.defaultTitle) &&\n                attrs.defaultTitle !== \"\") {\n                defaultTitle = attrs.defaultTitle;\n            }\n\n            // When an item is selected in the list set the title, hide the\n            // dropdown, and set the value to the given model.\n            scope.selectItem = function(select) {\n                scope.shown = false;\n                ngModelCtrl.$setViewValue(select);\n            };\n\n            // Return the title of the dropdown button.\n            scope.getTitle = function() {\n                if(angular.isObject(ngModelCtrl.$modelValue)) {\n                    option = ngModelCtrl.$modelValue;\n                    scope.secondary = true;\n                    // Some designs have the requirement that the title of\n                    // the menu option change if it is selected.\n                    if(angular.isString(option.selectedTitle)) {\n                        return option.selectedTitle;\n                    }\n                    return option.title;\n                } else {\n                    scope.secondary = false;\n                    return defaultTitle;\n                }\n            };\n\n            // Called to get the title for each option. (Sometimes the title\n            // of an option is different when it is selected.)\n            scope.getOptionTitle = function(option) {\n                if(!scope.secondary) {\n                    return option.title;\n                } else {\n                    if(angular.isString(option.selectedTitle)) {\n                        return option.selectedTitle;\n                    } else {\n                        return option.title;\n                    }\n                }\n            };\n\n            // When the model changes in the above selectItem function this\n            // function will be called causing the ngChange directive to be\n            // fired.\n            ngModelCtrl.$viewChangeListeners.push(function() {\n                scope.$eval(attrs.ngChange);\n            });\n        },\n        controller: function($scope, $rootScope, $element, $document) {\n            // Default dropdown is hidden.\n            $scope.shown = false;\n            $scope.secondary = false;\n\n            // Don't propagate the element click. This stops the click event\n            // from firing on the body element.\n            $element.bind('click', function (evt) {\n                evt.stopPropagation();\n            });\n\n            // If a click makes it to the body element then hide the dropdown.\n            $document.find('body').bind('click', function () {\n                // Use $apply because this function will be called outside\n                // of the digest cycle.\n                $rootScope.$apply($scope.shown = false);\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller status icon. Used in the controllers listing on the nodes page.\n */\n\nangular.module('MAAS').directive('maasCardLoader', ['$compile',\n  function($compile) {\n      return {\n          restrict: \"A\",\n          link: function(scope, element, attrs) {\n            var templateUrl = (\n                'static/partials/cards/' + attrs.maasCardLoader + (\n                  '.html?v=' + MAAS_config.files_version));\n            var include = (\n              '<ng-include src=\"\\'' + templateUrl + '\\'\"></ng-include>');\n            element.html(include);\n            $compile(element.contents())(scope);\n          }\n      };\n  }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Accordion directive.\n *\n * Provides an accordion effect to an element with maas-accordion class and\n * all child elements with maas-accordion-tab. Only one accordion tab is open\n * at a time, selecting another accordion will set \"active\" on that\n * accordion tab.\n */\n\n\n angular.module('MAAS').directive('maasCodeLines', function () {\n     return {\n         restrict: \"A\",\n         scope: {\n             maasCodeLines: '&'\n         },\n         link: function(scope, element, attributes) {\n\n             function insertContent() {\n\n                 // Empty the element contents and include again, this asures\n                 // its the most up-to-date content\n                 element.empty();\n                 element.text(scope.maasCodeLines);\n\n                 // Count the line contents\n                 var lines = element.html().split('\\n'),\n                     newLine = '',\n                     insert = \"<code>\";\n\n                 // Each line is to be wrapped by a span which is style & given\n                 // its appropriate line number\n                 $.each(lines, function() {\n                   insert += newLine + '<span class=\"code-line\">' +\n                   this + '</span>';\n                   newLine = '\\n';\n                 });\n                 insert += \"</code>\";\n\n                 // Re-insert the contents\n                 element.html(insert);\n             }\n\n             // Watch the contents of the element so when it changes to\n             // re-add the line numbers.\n             scope.$watch(scope.maasCodeLines, insertContent);\n         }\n     };\n });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Content editable directive.\n *\n * HTML provides a feature that allows any element to be editable with\n * contenteditable attribute. This directive uses that attribute to link\n * the contents of that element to a model. This directive is not prefixed\n * with maas so Angular can identify all elements with this attribute.\n */\n\n\nangular.module('MAAS').directive('contenteditable', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            ngDisabled: \"&\",\n            maasEditing: \"&\"\n        },\n        link: function(scope, element, attrs, ngModel) {\n\n            // If the element is disabled then make the element lose focus.\n            var focusHandler = function() {\n                if(scope.ngDisabled()) {\n                    element.blur();\n                } else {\n                    // Didn't lose focus, so its now editing.\n                    scope.$apply(scope.maasEditing());\n                }\n            };\n            element.bind(\"focus\", focusHandler);\n\n            // Update the value of the model when events occur that\n            // can change the value of the model.\n            var changeHandler = function() {\n                scope.$apply(ngModel.$setViewValue(element.text()));\n            };\n            element.bind(\"blur keyup change\", changeHandler);\n\n            // When the model changes set the html content for that element.\n            ngModel.$render = function() {\n                element.html(ngModel.$viewValue || \"\");\n            };\n\n            // When the model changes this function will be called causing the\n            // ngChange directive to be fired.\n            ngModel.$viewChangeListeners.push(function() {\n                scope.$eval(attrs.ngChange);\n            });\n\n            // Remove the event handler on the element when the scope is\n            // destroyed.\n            scope.$on(\"$destroy\", function() {\n                element.unbind(\"blur keyup change\", changeHandler);\n                element.unbind(\"focus\", focusHandler);\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller image status directive.\n *\n * Shows the image status for a controller.\n */\n\n angular.module('MAAS').service('ControllerImageStatusService',\n    ['$timeout', '$interval', 'ControllersManager', function(\n        $timeout, $interval, ControllersManager) {\n     var self = this;\n\n     // How often to check the sync status of a controller in seconds.\n     var CHECK_INTERVAL = 30;\n\n     // List of controllers that need to have the image status updated.\n     this.controllers = [];\n\n     // List of current controller statues.\n     this.statuses = {};\n\n     // Interval function that is called to update the statuses.\n     this.updateStatuses = function() {\n         var controllerIds = [];\n         angular.forEach(self.controllers, function(system_id) {\n             controllerIds.push({system_id: system_id});\n         });\n\n         // Check the image states.\n         ControllersManager.checkImageStates(controllerIds).then(\n                 function(results) {\n             angular.forEach(controllerIds, function(controller) {\n                 var status = results[controller.system_id];\n                 if(status) {\n                     self.statuses[controller.system_id] = status;\n                 } else {\n                     self.statuses[controller.system_id] = \"Unknown\";\n                 }\n             });\n         });\n     };\n\n     // Register this controller system_id.\n     this.register = function(system_id) {\n         var known = self.controllers.indexOf(system_id) >= 0;\n         if(!known) {\n             self.controllers.push(system_id);\n         }\n\n         // When the interval is already running and its a new controller then\n         // the interval needs to be reset. When it already exists it doesn't\n         // need to be reset.\n         if(angular.isDefined(self.runningInterval)) {\n             if(known) {\n                 return;\n             } else {\n                 $interval.cancel(self.runningInterval);\n                 self.runningInterval = undefined;\n             }\n         }\n\n         // If its not running and the timeout has been started we re-create\n         // the timeout. This delays the start of the interval until the\n         // all directives on the page have been fully loaded.\n         if(angular.isDefined(self.startTimeout)) {\n             $timeout.cancel(self.startTimeout);\n         }\n         self.startTimeout = $timeout(function() {\n             self.startTimeout = undefined;\n             self.runningInterval = $interval(function() {\n                 self.updateStatuses();\n             }, CHECK_INTERVAL * 1000);\n             self.updateStatuses();\n         }, 100);\n     };\n\n     // Unregister the controller.\n     this.unregister = function(system_id) {\n        var idx = self.controllers.indexOf(system_id);\n        if(idx > -1) {\n            self.controllers.splice(idx, 1);\n        }\n\n        // If no controllers are left stop all intervals and timeouts.\n        if(self.controllers.length === 0) {\n            if(angular.isDefined(self.startTimeout)) {\n                $timeout.cancel(self.startTimeout);\n                self.startTimeout = undefined;\n            }\n            if(angular.isDefined(self.runningInterval)) {\n                $interval.cancel(self.runningInterval);\n                self.runningInterval = undefined;\n            }\n        }\n     };\n\n     // Return true if the spinner should be shown.\n     this.showSpinner = function(system_id) {\n         var status = self.statuses[system_id];\n         if(angular.isString(status) && status !== \"Syncing\") {\n             return false;\n         } else {\n             return true;\n         }\n     };\n\n     // Get the image status.\n     this.getImageStatus = function(system_id) {\n         var status = self.statuses[system_id];\n         if(angular.isString(status)) {\n             return status;\n         } else {\n             return \"Asking for status...\";\n         }\n     };\n}]);\n\nangular.module('MAAS').directive('maasControllerImageStatus',\n    ['ControllerImageStatusService', function(\n        ControllerImageStatusService) {\n\n    return {\n        restrict: \"E\",\n        scope: {\n            systemId: \"=\"\n        },\n        template: [\n            '<i class=\"p-icon--loading u-animation--spin\"',\n                'data-ng-if=\"showSpinner()\"></i> ',\n            '{$ getImageStatus() $}'].join(''),\n        link: function(scope, element, attrs) {\n            // Don't register until the systemId is set.\n            var unwatch, registered = false;\n            unwatch = scope.$watch(\"systemId\", function() {\n                if(angular.isDefined(scope.systemId) && !registered) {\n                    ControllerImageStatusService.register(scope.systemId);\n                    registered = true;\n                    unwatch();\n                }\n            });\n\n            scope.showSpinner = function() {\n                return ControllerImageStatusService.showSpinner(\n                    scope.systemId);\n            };\n            scope.getImageStatus = function() {\n                return ControllerImageStatusService.getImageStatus(\n                    scope.systemId);\n            };\n\n            // Unregister when destroyed.\n            scope.$on(\"$destroy\", function() {\n                if(registered) {\n                    ControllerImageStatusService.unregister(scope.systemId);\n                }\n            });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller status icon. Used in the controllers listing on the nodes page.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the controller-status.html into the template cache.\n    $templateCache.put('directive/templates/controller-status.html', [\n        '<span>',\n          '<span class=\"p-icon--{$ serviceClass $}\" data-ng-if=\"!textOnly\">',\n          '</span>',\n          '<span data-ng-if=\"textOnly\" data-ng-bind=\"serviceText\"></span>',\n        '</span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasControllerStatus', [\n    \"ControllersManager\", \"ServicesManager\",\n    function(ControllersManager, ServicesManager) {\n        return {\n            restrict: \"A\",\n            scope: {\n                controller: '=maasControllerStatus',\n                textOnly: '=?maasTextOnly'\n            },\n            templateUrl: 'directive/templates/controller-status.html',\n            controller: function($scope) {\n\n                $scope.serviceClass = \"unknown\";\n                $scope.services = ServicesManager.getItems();\n                $scope.serviceText = \"\";\n                if($scope.textOnly) {\n                  $scope.textOnly = true;\n                } else {\n                  $scope.textOnly = false;\n                }\n\n                // Return the status class for the service.\n                function getClass(service) {\n                    if(service.status === \"running\") {\n                        return \"success\";\n                    } else if (service.status === \"degraded\") {\n                        return \"warning\";\n                    } else if (service.status === \"dead\") {\n                        return \"error\";\n                    } else {\n                        return \"unknown\";\n                    }\n                }\n\n                // Return the number of times class is displayed.\n                function countClass(classes, class_name) {\n                  var counter = 0;\n                  angular.forEach(classes, function(name) {\n                    if(name === class_name) {\n                      counter++;\n                    }\n                  });\n                  return counter;\n                }\n\n                // Update the class based on status of the services on the\n                // controller.\n                function updateStatusClass() {\n                    $scope.serviceClass = \"unknown\";\n                    if(angular.isObject($scope.controller)) {\n                        var services = ControllersManager.getServices(\n                            $scope.controller);\n                        if(services.length > 0) {\n                            var classes = services.map(getClass);\n                            if(classes.indexOf(\"error\") !== -1) {\n                                $scope.serviceClass = \"power-error\";\n                                $scope.serviceText = countClass(\n                                  classes, \"error\") + \" dead\";\n                            } else if(classes.indexOf(\"warning\") !== -1) {\n                                $scope.serviceClass = \"warning\";\n                                $scope.serviceText = countClass(\n                                  classes, \"warning\") + \" degraded\";\n                            } else {\n                                $scope.serviceClass = \"success\";\n                                $scope.serviceText = countClass(\n                                  classes, \"success\") + \" running\";\n                            }\n                        }\n                    }\n                }\n\n                // Watch the services array and the services on the controller,\n                // if any changes then update the status.\n                $scope.$watch(\"controller.service_ids\", updateStatusClass);\n                $scope.$watch(\"services\", updateStatusClass, true);\n\n                // Update on creation.\n                updateStatusClass();\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Double click overlay directive.\n *\n * Provides the ability for a disabled element to still accept the\n * double click event. By default if an element is disabled then it will\n * receive no click events. This overlays the element with another element\n * that will still receive click events.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the style for the maas-dbl-overlay class. We inject the style\n    // instead of placing it in maas-styles.css because it is required for\n    // this directive to work at all.\n    var styleElement = document.createElement('style');\n    styleElement.innerHTML = [\n        '.maas-dbl-overlay {',\n            'display: inline-block;',\n            'position: relative;',\n        '}',\n        '.maas-dbl-overlay--overlay {',\n            'position: absolute;',\n            'left: 0;',\n            'right: 0;',\n            'top: 0;',\n            'bottom: 0;',\n            '-webkit-touch-callout: none;',\n            '-webkit-user-select: none;',\n            '-khtml-user-select: none;',\n            '-moz-user-select: none;',\n            '-ms-user-select: none;',\n            'user-select: none;',\n        '}'\n    ].join('');\n    document.getElementsByTagName('head')[0].appendChild(styleElement);\n\n    // Inject the double_click_overlay.html into the template cache.\n    $templateCache.put('directive/templates/double_click_overlay.html', [\n        '<div class=\"maas-dbl-overlay\">',\n            '<span data-ng-transclude></span>',\n            '<div class=\"maas-dbl-overlay--overlay\"></div>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasDblClickOverlay', ['BrowserService',\n    function(BrowserService) {\n        return {\n            restrict: \"A\",\n            transclude: true,\n            replace: true,\n            scope: {\n                maasDblClickOverlay: '&'\n            },\n            templateUrl: 'directive/templates/double_click_overlay.html',\n            link: function(scope, element, attrs) {\n                // Create the click function that will be called when the\n                // overlay is clicked. This changes based on the element that\n                // is transcluded into this directive.\n                var overlay = element.find(\".maas-dbl-overlay--overlay\");\n                var transclude = element.find(\n                    \"span[data-ng-transclude]\").children()[0];\n                var clickElement;\n                if(transclude.tagName === \"SELECT\") {\n                    clickElement = function() {\n                        // Have to create a custom mousedown event for the\n                        // select click to be handled. Using 'click()' or\n                        //'focus()' will not work.\n                        var evt = document.createEvent('MouseEvents');\n                        evt.initMouseEvent(\n                            'mousedown', true, true, window, 0, 0, 0, 0, 0,\n                            false, false, false, false, 0, null);\n                        transclude.dispatchEvent(evt);\n                    };\n\n                    // Selects use a pointer for the cursor.\n                    overlay.css({ cursor: \"pointer\" });\n                } else if(transclude.tagName === \"INPUT\") {\n                    clickElement = function() {\n                        // An input will become in focus when clicked.\n                        angular.element(transclude).triggerHandler('focus');\n                    };\n\n                    // Inputs use a text for the cursor.\n                    overlay.css({ cursor: \"text\" });\n                } else {\n                    clickElement = function() {\n                        // Standard element just call click on that element.\n                        angular.element(transclude).triggerHandler('click');\n                    };\n\n                    // Don't set cursor on other element types.\n                }\n\n                // Add the click and double click handlers.\n                var overlayClick = function(evt) {\n                    clickElement();\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                };\n                var overlayDblClick = function(evt) {\n                    // Call the double click handler with in the scope.\n                    scope.$apply(scope.maasDblClickOverlay);\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                };\n\n                // Enable the handlers if not Firefox. It firefox, then hide\n                // the overlay as Firefox does not allow sending click events\n                // to select elements.\n                if(BrowserService.browser !== \"firefox\") {\n                    overlay.on(\"click\", overlayClick);\n                    overlay.on(\"dblclick\", overlayDblClick);\n                } else {\n                    overlay.addClass(\"ng-hide\");\n                }\n\n                // Remove the handlers when the scope is destroyed.\n                scope.$on(\"$destroy\", function() {\n                    overlay.off(\"click\", overlayClick);\n                    overlay.off(\"dblclick\", overlayDblClick);\n                });\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * OS/Release select directive.\n */\n\nangular.module('MAAS').directive('maasDefaultOsSelect', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            \"osInput\": \"@maasDefaultOsSelect\",\n            \"seriesInput\": \"@maasDefaultSeriesSelect\",\n        },\n        link: function($scope, $element, $attrs) {\n            var osElement = angular.element($element.find($scope.osInput));\n            var seriesElement = angular.element(\n                $element.find($scope.seriesInput));\n            if(!osElement || !seriesElement) {\n                throw new Error(\"Unable to find os or series elements\");\n            }\n\n            var selectVisableOption = function(options) {\n                var first_option = null;\n                angular.forEach(options, function(option) {\n                    option = angular.element(option);\n                    if(!option.hasClass('u-hide')) {\n                        if(first_option === null) {\n                            first_option = option;\n                        }\n                    }\n                });\n                if(first_option !== null) {\n                    seriesElement.val(first_option.val());\n                }\n            };\n\n            var modifyOption = function(option, newOSValue, initialSkip) {\n                var selected = false;\n                var value = option.val();\n                var split_value = value.split(\"/\");\n\n                // If \"Default OS\" is selected, then\n                // only show \"Default OS Release\".\n                if(newOSValue === '') {\n                    if(value === '') {\n                        option.removeClass('u-hide');\n                        option.attr('selected', 'selected');\n                    } else {\n                        option.addClass('u-hide');\n                    }\n                } else {\n                    if(split_value[0] === newOSValue) {\n                        option.removeClass('u-hide');\n                        if(split_value[1] === '' && !initialSkip) {\n                            selected = true;\n                            option.attr('selected', 'selected');\n                        }\n                    } else {\n                        option.addClass('u-hide');\n                    }\n                }\n                return selected;\n            };\n\n            var switchTo = function(newOSValue, initialSkip) {\n                var options = seriesElement.find('option');\n                var selected = false;\n                angular.forEach(options, function(option) {\n                    var sel = modifyOption(\n                        angular.element(option), newOSValue, initialSkip);\n                    if (selected === false) {\n                        selected = sel;\n                    }\n                });\n\n                // We skip selection on first load, as Django will already\n                // provide the users, current selection. Without this the\n                // current selection will be clobered.\n                if (initialSkip) {\n                    return;\n                }\n\n                // See if a selection was made, if not then we need\n                // to select the first visible as a default is not\n                // present.\n                if(!selected) {\n                    selectVisableOption(options);\n                }\n            };\n\n            // Call switchTo any time the os changes.\n            osElement.on('change', function(evt) {\n                switchTo(osElement.val(), false);\n            });\n\n            // Initialize the options.\n            switchTo(osElement.val(), true);\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n*/\n\nangular.module('MAAS').directive('maasEnter', function () {\n    return {\n        restrict: \"A\",\n        link: function (scope, element, attrs) {\n            element.bind(\"keydown keypress\", function (evt) {\n                if(evt.which === 13) {\n                    scope.$apply(function () {\n                        scope.$eval(attrs.maasEnter);\n                    });\n                    evt.preventDefault();\n                }\n            });\n        }\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Enter blur directive.\n *\n * When the enter key is pressed make the element lose focus (aka. blur event).\n */\n\n\nangular.module('MAAS').directive('maasEnterBlur', function() {\n    return {\n        restrict: \"A\",\n        link: function(scope, element, attrs) {\n            element.bind(\"keydown keypress\", function(evt) {\n                if(evt.which === 13) {\n                    element.blur();\n                    evt.preventDefault();\n                }\n            });\n        }\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Error overlay.\n *\n * Directive overrides the entire transcluded element if an error occurs or\n * connection to the region over the websocket fails or becomes disconnected.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the error_overlay.html into the template cache.\n    $templateCache.put('directive/templates/error_overlay.html', [\n        '<header id=\"error-header\" class=\"page-header\" data-ng-show=\"show()\">',\n            '<div class=\"row\">',\n                '<h1 class=\"page-header__title\">',\n                    '<span class=\"p-icon--loading u-animation--spin ',\n                        'u-margin--right-small\"',\n                        'data-ng-hide=\"clientError\"></span>',\n                    '{$ getTitle() $}',\n                '</h1>',\n                '<div class=\"page-header__controls\">',\n                    '<button class=\"button--secondary button--inline\"',\n                        'data-ng-click=\"reload()\"',\n                        'data-ng-show=\"clientError\">Reload</button>',\n                '</div>',\n                '<div class=\"page-header__dropdown is-open\" ',\n                    'data-ng-show=\"error\">',\n                    '<div class=\"page-header__section twelve-col',\n                        'u-margin--bottom-none\">',\n                        '<p class=\"page-header__message',\n                                  'page-header__message--error\">',\n                            '{$ error $}',\n                        '</p>',\n                    '</div>',\n                '</div>',\n            '</div>',\n        '</header>',\n        '<div class=\"ng-hide u-no-margin--top\" data-ng-hide=\"show()\">',\n            '<div data-ng-transclude></div>',\n        '</div>'\n    ].join(''));\n\n    // Preload the svg and png error icon. Its possible that it has never been\n    // loaded by the browser and if the region connection goes down and the\n    // directive gets shown with an error the icon will be missing.\n    //\n    // Note: This is skipped if unit testing because it will throw 404 errors\n    // continuously.\n    if(!angular.isDefined(window.jasmine)) {\n        var image = new Image();\n        image.src = \"static/assets/images/icons/error.svg\";\n        image = new Image();\n        image.src = \"static/assets/images/icons/error.png\";\n    }\n}]);\n\nangular.module('MAAS').directive('maasErrorOverlay', [\n    '$window', '$timeout', 'RegionConnection', 'ErrorService',\n    function($window, $timeout, RegionConnection, ErrorService) {\n        return {\n            restrict: \"A\",\n            transclude: true,\n            scope: true,\n            templateUrl: 'directive/templates/error_overlay.html',\n            link: function(scope, element, attrs) {\n\n                scope.connected = false;\n                scope.showDisconnected = false;\n                scope.clientError = false;\n                scope.wasConnected = false;\n\n                // Holds the promise that sets showDisconnected to true. Will\n                // be cleared when the scope is destroyed.\n                var markDisconnected;\n\n                // Returns true when the overlay should be shown.\n                scope.show = function() {\n                    // Always show if clientError.\n                    if(scope.clientError) {\n                        return true;\n                    }\n                    // Never show if connected.\n                    if(scope.connected) {\n                        return false;\n                    }\n                    // Never been connected then always show.\n                    if(!scope.wasConnected) {\n                        return true;\n                    }\n                    // Not connected.\n                    return scope.showDisconnected;\n                };\n\n                // Returns the title for the header.\n                scope.getTitle = function() {\n                    if(scope.clientError) {\n                        return \"Error occurred\";\n                    } else if(scope.wasConnected) {\n                        return \"Connection lost, reconnecting...\";\n                    } else {\n                        return \"Connecting...\";\n                    }\n                };\n\n                // Called to reload the page.\n                scope.reload = function() {\n                    $window.location.reload();\n                };\n\n                // Called to when the connection status of the region\n                // changes. Updates the scope connected and error values.\n                var watchConnection = function() {\n                    // Do nothing if already a client error.\n                    if(scope.clientError) {\n                        return;\n                    }\n\n                    // Set connected and the time it changed.\n                    var connected = RegionConnection.isConnected();\n                    if(connected !== scope.connected) {\n                        scope.connected = connected;\n                        if(!connected) {\n                            scope.showDisconnected = false;\n\n                            // Show disconnected after 1/2 second. This removes\n                            // the flicker that can occur, if it disconnecets\n                            // and reconnected quickly.\n                            markDisconnected = $timeout(function() {\n                                scope.showDisconnected = true;\n                                markDisconnected = undefined;\n                            }, 500);\n                        }\n                    }\n\n                    // Set error and whether of not the connection\n                    // has ever been made.\n                    scope.error = RegionConnection.error;\n                    if(!scope.wasConnected && connected) {\n                        scope.wasConnected = true;\n                    }\n                };\n\n                // Watch the isConnected and error value on the\n                // RegionConnection.\n                scope.$watch(function() {\n                    return RegionConnection.isConnected();\n                }, watchConnection);\n                scope.$watch(function() {\n                    return RegionConnection.error;\n                }, watchConnection);\n\n                // Called then the error value on the ErrorService changes.\n                var watchError = function() {\n                    var error = ErrorService._error;\n                    if(angular.isString(error)) {\n                        scope.clientError = true;\n                        scope.error = ErrorService._error;\n                    }\n                };\n\n                // Watch _error on the ErrorService.\n                scope.$watch(function() {\n                    return ErrorService._error;\n                }, watchError);\n\n                // Cancel the timeout on scope destroy.\n                scope.$on(\"$destroy\", function() {\n                    if(angular.isDefined(markDisconnected)) {\n                        $timeout.cancel(markDisconnected);\n                    }\n                });\n            }\n        };\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Error toggle.\n *\n * Hides the element if an error occurs or no connection to the region\n * is present.\n */\n\nangular.module('MAAS').directive('maasErrorToggle', [\n    '$timeout', 'RegionConnection', 'ErrorService',\n    function($timeout, RegionConnection, ErrorService) {\n        return {\n            restrict: \"A\",\n            link: function(scope, element, attrs) {\n\n                // Holds timeout promise for setting ng-hide when\n                // connection is lost.\n                var disconnectedPromise;\n\n                // Cancel the disconnected timeout.\n                var cancelTimeout = function() {\n                    if(angular.isDefined(disconnectedPromise)) {\n                        $timeout.cancel(disconnectedPromise);\n                        disconnectedPromise = undefined;\n                    }\n                };\n\n                // Called to when the connection status of the region\n                // changes or the error on the ErrorService is set.\n                // The element is shown when connected and no errors.\n                var watchConnectionAndError = function() {\n                    var connected = RegionConnection.isConnected();\n                    var error = ErrorService._error;\n                    if(connected && !angular.isString(error)) {\n                        cancelTimeout();\n                        element.removeClass(\"ng-hide\");\n                    } else if(angular.isString(error)) {\n                        cancelTimeout();\n                        element.addClass(\"ng-hide\");\n                    } else if(!connected) {\n                        // Hide the element after 1/2 second. This stops\n                        // flickering when the connection goes down and\n                        // reconnects quickly.\n                        cancelTimeout();\n                        disconnectedPromise = $timeout(function() {\n                            element.addClass(\"ng-hide\");\n                        }, 500);\n                    }\n                };\n\n                // Watch the RegionConnection.isConnected() and\n                // ErrorService._error value.\n                scope.$watch(function() {\n                    return RegionConnection.isConnected();\n                }, watchConnectionAndError);\n                scope.$watch(function() {\n                    return ErrorService._error;\n                }, watchConnectionAndError);\n\n                // Cancel disconnect timeout on destroy.\n                scope.$on(\"$destroy\", function() {\n                    cancelTimeout();\n                });\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * IP Ranges directive.\n*/\n\nangular.module('MAAS').directive('maasIpRanges', [\n    '$filter', 'IPRangesManager', 'UsersManager',\n    'ManagerHelperService', 'ConverterService', function(\n        $filter, IPRangesManager, UsersManager, ManagerHelperService,\n        ConverterService) {\n        return {\n            restrict: \"E\",\n            scope: {\n                subnet: \"=\",\n                vlan: \"=\"\n            },\n            templateUrl: (\n                'static/partials/ipranges.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.ipranges = IPRangesManager.getItems();\n                $scope.iprangeManager = IPRangesManager;\n                $scope.newRange = null;\n                $scope.editIPRange = null;\n                $scope.deleteIPRange = null;\n\n                // Return true if the authenticated user is super user.\n                $scope.isSuperUser = function() {\n                    return UsersManager.isSuperUser();\n                };\n\n                // Called to start adding a new IP range.\n                $scope.addRange = function(type) {\n                    $scope.newRange = {\n                        type: type,\n                        start_ip: \"\",\n                        end_ip: \"\",\n                        comment: \"\"\n                    };\n                    if(angular.isObject($scope.subnet)) {\n                        $scope.newRange.subnet = $scope.subnet.id;\n                    }\n                    if(angular.isObject($scope.vlan)) {\n                        $scope.newRange.vlan = $scope.vlan.id;\n                    }\n                    if(type === \"dynamic\") {\n                        $scope.newRange.comment = \"Dynamic\";\n                    }\n                };\n\n                // Cancel adding the new IP range.\n                $scope.cancelAddRange = function() {\n                    $scope.newRange = null;\n                };\n\n                // Return true if the IP range can be modified by the\n                // authenticated user.\n                $scope.ipRangeCanBeModified = function(range) {\n                    if($scope.isSuperUser()) {\n                        return true;\n                    } else {\n                        // Can only modify reserved and same user.\n                        return (\n                            range.type === \"reserved\" &&\n                            range.user === UsersManager.getAuthUser().id);\n                    }\n                };\n\n                // Return true if the IP range is in edit mode.\n                $scope.isIPRangeInEditMode = function(range) {\n                    return $scope.editIPRange === range;\n                };\n\n                // Toggle edit mode for the IP range.\n                $scope.ipRangeToggleEditMode = function(range) {\n                    $scope.deleteIPRange = null;\n                    if($scope.isIPRangeInEditMode(range)) {\n                        $scope.editIPRange = null;\n                    } else {\n                        $scope.editIPRange = range;\n                    }\n                };\n\n                // Clear edit mode for the IP range.\n                $scope.ipRangeClearEditMode = function() {\n                    $scope.editIPRange = null;\n                };\n\n                // Return true if the IP range is in delete mode.\n                $scope.isIPRangeInDeleteMode = function(range) {\n                    return $scope.deleteIPRange === range;\n                };\n\n                // Enter delete mode for the IP range.\n                $scope.ipRangeEnterDeleteMode = function(range) {\n                    $scope.editIPRange = null;\n                    $scope.deleteIPRange = range;\n                };\n\n                // Exit delete mode for the IP range.\n                $scope.ipRangeCancelDelete = function() {\n                    $scope.deleteIPRange = null;\n                };\n\n                // Perform the delete operation on the IP range.\n                $scope.ipRangeConfirmDelete = function() {\n                    IPRangesManager.deleteItem(\n                        $scope.deleteIPRange).then(function() {\n                            $scope.deleteIPRange = null;\n                    });\n                };\n\n                // Sort ranges by starting IP address.\n                $scope.ipRangeSort = function(range) {\n                    if(range.start_ip.indexOf(':') !== -1) {\n                        return ConverterService.ipv6Expand(range.start_ip);\n                    } else {\n                        return ConverterService.ipv4ToInteger(range.start_ip);\n                    }\n                };\n\n                // Load the reqiured managers.\n                ManagerHelperService.loadManagers($scope, [\n                    IPRangesManager, UsersManager]).then(\n                        function() {\n                            $scope.loading = false;\n                        });\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Login button for external authentication.\n */\n\nangular.module('MAAS').factory('getBakery', function() {\n    return function(visitPage) {\n        return new Bakery(\n            new WebHandler(),\n            new BakeryStorage(localStorage, {}), {visitPage: visitPage});\n    };\n}).directive('externalLogin', ['$window', 'getBakery',\n                               function($window, getBakery) {\n    return {\n        restrict: 'E',\n        scope: {},\n        template: [\n            '<a target=\"_blank\" class=\"p-button--positive\"',\n            '    href=\"{{ loginURL }}\"',\n            '    title=\"Login through {{ externalAuthURL }}\">',\n            '  Go to login page',\n            '</a>',\n            '<div id=\"login-error\" class=\"p-form-validation__message\"',\n            '    ng-if=\"errorMessage\">',\n            '  <strong>Error getting login link:</strong><br>',\n            '  {{ errorMessage }}',\n            '</div>',\n        ].join(''),\n        controller: function($scope, $rootScope, $element, $document) {\n            $scope.errorMessage = '';\n            $scope.loginURL = '#';\n            $scope.externalAuthURL = $element.attr('auth-url');\n\n            const visitPage = function(error) {\n                $scope.$apply(function() {\n                    $scope.loginURL =  error.Info.VisitURL;\n                    $scope.errorMessage = '';\n                });\n            }\n            const bakery = getBakery(visitPage);\n            const nextPath = $element.attr('next-path');\n            bakery.get(\n                '/MAAS/accounts/discharge-request/',\n                {'Accept': 'application/json',\n                 'Content-Type': 'application/json'},\n                function(error, response) {\n                    if (response.currentTarget.status != 200) {\n                        $scope.$apply(function() {\n                            $scope.errorMessage = (\n                                response.currentTarget.responseText);\n                        });\n                    } else {\n                        $window.location.replace(nextPath);\n                    }\n                });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS object directive.\n *\n * Directive that connects a field to an object from the websocket. The field\n * is an instant save on blur.\n */\n\nangular.module('MAAS').directive('maasObjForm', ['JSONService',\n    function(JSONService) {\n        function MAASFormController(scope) {\n            this.obj = scope.obj;\n            this.manager = scope.manager;\n            this.fields = {};\n            this.scope = scope;\n            this.scope.saving = false;\n            this.scope.savingKeys = [];\n            if(angular.isObject(this.scope.obj)) {\n                this.scope.obj.$maasForm = this;\n            }\n\n            // Set the managerMethod.\n            this.managerMethod = scope.managerMethod;\n            if(angular.isUndefined(this.managerMethod)) {\n                this.managerMethod = \"updateItem\";\n            }\n\n            var self = this;\n            scope.$watch(\"obj\", function() {\n                // Update the object when it changes.\n                self.obj = scope.obj;\n                if(angular.isObject(self.obj)) {\n                    self.obj.$maasForm = self;\n                }\n            });\n            scope.$on(\"$destroy\", function() {\n                // Remove the $maasForm from the object when directive is\n                // deleted.\n                if(angular.isObject(self.obj)) {\n                    delete self.obj.$maasForm;\n                }\n            });\n        }\n\n        // Get the current value for a field in the form.\n        MAASFormController.prototype.getValue = function (key) {\n            var field = this.fields[key];\n            if(angular.isObject(field) && angular.isObject(field.scope)) {\n                return field.scope.getValue();\n            }\n        };\n\n        // Update the current value for a field in the form.\n        MAASFormController.prototype.updateValue = function (key, value) {\n            var field = this.fields[key];\n            if(angular.isObject(field) && angular.isObject(field.scope)) {\n                return field.scope.updateValue(value);\n            }\n        };\n\n        // Clone the current object for this form without the $maasForm\n        // property set.\n        MAASFormController.prototype.cloneObject = function() {\n            if(!angular.isObject(this.obj)) {\n                return this.obj;\n            } else {\n                delete this.obj.$maasForm;\n                var clonedObj = angular.copy(this.obj);\n                this.obj.$maasForm = this;\n                return clonedObj;\n            }\n        };\n\n        // Return true if table form.\n        MAASFormController.prototype.isTableForm = function () {\n            if(angular.isUndefined(this.scope.tableForm)) {\n                // Default is not a table form.\n                return false;\n            } else {\n                return this.scope.tableForm;\n            }\n        };\n\n        // Return true if the form should be saved on blur.\n        MAASFormController.prototype.saveOnBlur = function() {\n            if(angular.isUndefined(this.scope.saveOnBlur)) {\n                // Default is save on blur.\n                return true;\n            } else {\n                return this.scope.saveOnBlur;\n            }\n        };\n\n        // Return true if the form is saving this field.\n        MAASFormController.prototype.isSaving = function(key) {\n            return (\n                this.scope.saving && this.scope.savingKeys.indexOf(key) >= 0);\n        };\n\n        // Return true if the input should show the saving spinner. This is\n        // only show on inputs in forms that are using save on blur.\n        MAASFormController.prototype.showInputSaving = function(key) {\n            return this.saveOnBlur() && this.isSaving(key);\n        };\n\n        // Return true if any field in the form as an error.\n        MAASFormController.prototype.hasErrors = function() {\n            var hasErrors = false;\n            angular.forEach(this.fields, function(field) {\n                if(field.scope.hasErrors()) {\n                    hasErrors = true;\n                }\n            });\n            if(angular.isDefined(this.errorScope)) {\n                if(this.errorScope.hasErrors()) {\n                    hasErrors = true;\n                }\n            }\n            return hasErrors;\n        };\n\n        // Called by maas-obj-field to register it as a editable field.\n        MAASFormController.prototype.registerField = function(key, scope) {\n            // Store the state of the field and its scope.\n            this.fields[key] = {\n                editing: false,\n                scope: scope\n            };\n\n            // Watch for changes on the value of the object.\n            var self = this;\n            this.scope.$watch(\"obj.\" + key, function() {\n                if(angular.isObject(self.obj) && !self.fields[key].editing) {\n                    self.fields[key].scope.updateValue(self.obj[key]);\n                }\n            });\n\n            // Return the current value for the field.\n            if(angular.isObject(this.obj)) {\n                return this.obj[key];\n            } else {\n                return null;\n            }\n        };\n\n        // Called by maas-obj-field to unregister it as a editable field.\n        MAASFormController.prototype.unregisterField = function(key) {\n            delete this.fields[key];\n        };\n\n        // Called by maas-obj-field to place field in edit mode.\n        MAASFormController.prototype.startEditingField = function(key) {\n            this.fields[key].editing = true;\n        };\n\n        // Called by maas-obj-field to end edit mode for the field.\n        MAASFormController.prototype.stopEditingField = function(key, value) {\n            var field = this.fields[key];\n\n            // Do nothing if not save on blur.\n            if(!this.saveOnBlur()) {\n                field.editing = false;\n                return;\n            }\n\n            // Clear errors before saving.\n            field.scope.clearErrors();\n\n            // Copy the object and update the editing field.\n            var updatedObj = this.cloneObject();\n            updatedObj[key] = value;\n            if(updatedObj[key] === this.obj[key]) {\n                // Nothing changed.\n                field.editing = false;\n                return;\n            }\n\n            // Update the item in the manager.\n            this.scope.saving = true;\n            this.scope.savingKeys = [key];\n            this.updateItem(updatedObj, [key]);\n        };\n\n        // Update the item using the manager.\n        MAASFormController.prototype.updateItem = function(updatedObj, keys) {\n            var key = keys[0];\n            var field = this.fields[key];\n            var self = this;\n\n            // Pre-process the updatedObj if one is defined.\n            if(angular.isFunction(this.scope.preProcess)) {\n                updatedObj = this.scope.preProcess(updatedObj, keys);\n            }\n\n            // Update the item with the manager.\n            return this.manager[this.managerMethod](\n                updatedObj).then(function(newObj) {\n                    // Update the value of the element.\n                    field.editing = false;\n                    field.scope.updateValue(newObj[key]);\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    if(angular.isFunction(self.scope.afterSave)) {\n                        self.scope.afterSave(newObj);\n                    }\n                    return newObj;\n                }, function(error) {\n                    var errorJson = JSONService.tryParse(error);\n                    if(angular.isObject(errorJson)) {\n                        // Add the error to each field it matches.\n                        angular.forEach(errorJson, function(value, key) {\n                            var errorField = self.fields[key];\n                            if(!angular.isArray(value)) {\n                                value = [value];\n                            }\n\n                            if(angular.isObject(errorField)) {\n                                // Error on a field we know about, place the\n                                // error on that field.\n                                errorField.scope.setErrors(value);\n                            } else {\n                                // Error on a field we don't know about, place\n                                // the error on the editing field. Prefixing\n                                // the error with the field.\n                                if(key !== \"__all__\") {\n                                    value = value.map(function(v) {\n                                        return key + \": \" + v;\n                                    });\n                                }\n                                field.scope.setErrors(value);\n                            }\n                        });\n                    } else {\n                        // Add the string error to just the field error.\n                        field.scope.setErrors([error]);\n                    }\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    return error;\n                });\n        };\n\n        // Called when saveOnBlur is false to save the whole form.\n        MAASFormController.prototype.saveForm = function () {\n            var keys = [];\n            var updatedObj = this.cloneObject();\n            angular.forEach(this.fields, function(value, key) {\n                value.scope.clearErrors();\n                var newValue = value.scope.getValue();\n                if(angular.isDefined(newValue) &&\n                    updatedObj[key] !== newValue) {\n                    updatedObj[key] = newValue;\n                    keys.push(key);\n                }\n            });\n\n\n            // Pre-process the updatedObj if one is defined.\n            if(angular.isFunction(this.scope.preProcess)) {\n                updatedObj = this.scope.preProcess(updatedObj, keys);\n            }\n\n            // Clear the errors on the errorScope before save.\n            if(angular.isDefined(this.errorScope)) {\n                this.errorScope.clearErrors();\n            }\n\n            var self = this;\n            this.scope.saving = true;\n            this.scope.savingKeys = keys;\n            return this.manager[this.managerMethod](\n                updatedObj).then(function(newObj) {\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    if(angular.isFunction(self.scope.afterSave)) {\n                        self.scope.afterSave(newObj);\n                    }\n                    return newObj;\n                }, function(error) {\n                    var errorJson = JSONService.tryParse(error);\n                    if(angular.isObject(errorJson)) {\n                        // Add the error to each field it matches.\n                        angular.forEach(errorJson, function(value, key) {\n                            var errorField = self.fields[key];\n                            if(!angular.isArray(value)) {\n                                value = [value];\n                            }\n\n                            if(angular.isObject(errorField)) {\n                                // Error on a field we know about, place the\n                                // error on that field.\n                                errorField.scope.setErrors(value);\n                            } else {\n                                if(key !== \"__all__\") {\n                                    value = value.map(function(v) {\n                                        return key + \": \" + v;\n                                    });\n                                }\n                                // Error on a field we don't know about, place\n                                // the error on errorScope if set.\n                                if(angular.isDefined(self.errorScope)) {\n                                    self.errorScope.setErrors(value);\n                                } else {\n                                    // No error scope, just log to console.\n                                    console.log(value);\n                                }\n                            }\n                        });\n                    } else {\n                        // Add the string error to just the field error.\n                        if(angular.isDefined(self.errorScope)) {\n                            self.errorScope.setErrors([error]);\n                        } else {\n                            // No error scope, just log to console.\n                            console.log(error);\n                        }\n                    }\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    return error;\n                });\n        };\n\n        return {\n            restrict: \"E\",\n            scope: {\n                obj: \"=\",\n                manager: \"=\",\n                managerMethod: \"@\",\n                preProcess: \"=\",\n                afterSave: \"=\",\n                tableForm: \"=\",\n                saveOnBlur: \"=\",\n                inline: \"=\",\n                ngDisabled: \"&\"\n            },\n            transclude: true,\n            template: (\n                '<form class=\"p-form\" data-ng-class=\"{saving: saving, ' +\n                '\\'p-form--inline\\': inline, ' +\n                '\\'p-form--stacked\\': tableForm}\" ' +\n                'ng-transclude></form>'),\n            controller: ['$scope', MAASFormController]\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjFieldGroup', ['JSONService',\n    function(JSONService) {\n        // Controller for this directive.\n        function MAASGroupController(scope, timeout) {\n            this.fields = {};\n            this.scope = scope;\n            this.scope.saving = false;\n            this.scope.savingKeys = [];\n            this.timeout = timeout;\n\n            var self = this;\n            this.scope.isEditing = function() {\n                var editing = false;\n                angular.forEach(self.fields, function(value) {\n                    if(!editing) {\n                        editing = value.editing;\n                    }\n                });\n                return editing;\n            };\n        }\n\n        // Return true if table form.\n        MAASGroupController.prototype.isTableForm = function () {\n            return this.formController.isTableForm();\n        };\n\n        // Return true if should save on blur.\n        MAASGroupController.prototype.saveOnBlur = function () {\n            return this.formController.saveOnBlur();\n        };\n\n        // Return true if group is saving.\n        MAASGroupController.prototype.isSaving = function(key) {\n            return (\n                this.scope.saving && this.scope.savingKeys.indexOf(key) >= 0);\n        };\n\n        // Return true if the input should show the saving spinner. This is\n        // only show on inputs in forms that are using save on blur.\n        MAASGroupController.prototype.showInputSaving = function(key) {\n            // In a group we say the entire group is saving, not just that\n            // one key in the field is being saved.\n            return this.saveOnBlur() && this.scope.saving;\n        };\n\n        // Called by maas-obj-field to register it as a editable field.\n        MAASGroupController.prototype.registerField = function(key, scope) {\n            // Store the state of the field and its scope.\n            this.fields[key] = {\n                editing: false,\n                scope: scope\n            };\n            return this.formController.registerField(key, scope);\n        };\n\n        // Called by maas-obj-field to unregister it as a editable field.\n        MAASGroupController.prototype.unregisterField = function(key) {\n            delete this.fields[key];\n            this.formController.unregisterField(key);\n        };\n\n        // Called by maas-obj-field to place field in edit mode.\n        MAASGroupController.prototype.startEditingField = function(key) {\n            this.fields[key].editing = true;\n\n            // Set all fields in the group as editing in the formController.\n            var self = this;\n            angular.forEach(this.fields, function(value, key) {\n                self.formController.startEditingField(key);\n            });\n        };\n\n        // Called by maas-obj-field to exit edit mode for the field.\n        MAASGroupController.prototype.stopEditingField = function(key, value) {\n            var field = this.fields[key];\n            field.editing = false;\n\n            // Exit early if not save on blur.\n            if(!this.saveOnBlur()) {\n                return;\n            }\n\n            // Delay the handling of stop to make sure start is not called on\n            // the next field in the group.\n            var self = this;\n            this.timeout(function() {\n                // If any other fields are in edit mode then nothing to do.\n                var editing = false;\n                angular.forEach(self.fields, function(value) {\n                    if(!editing) {\n                        editing = value.editing;\n                    }\n                });\n                if(editing) {\n                    return;\n                }\n\n                // Copy the object and update the editing fields.\n                var keys = [];\n                var changed = false;\n                var updatedObj = self.formController.cloneObject();\n                angular.forEach(self.fields, function(value, key) {\n                    value.scope.clearErrors();\n                    var newValue = value.scope.getValue();\n                    if(angular.isDefined(newValue) &&\n                        updatedObj[key] !== newValue) {\n                        keys.push(key);\n                        updatedObj[key] = newValue;\n                        changed = true;\n                    }\n                });\n                if(!changed) {\n                    return;\n                }\n\n                // Place the field that actually triggered the update first.\n                var keyIdx = keys.indexOf(key);\n                if(keyIdx !== -1) {\n                    keys.splice(keyIdx, 1);\n                    keys.splice(0, 0, key);\n                }\n\n                // Save the object.\n                self.scope.saving = true;\n                self.scope.savingKeys = keys;\n                self.formController.updateItem(updatedObj, keys).then(\n                    function(obj) {\n                      self.scope.saving = false;\n                      self.scope.savingKeys = [];\n                      return obj;\n                  }, function(error) {\n                      self.scope.saving = false;\n                      self.scope.savingKeys = [];\n                      return error;\n                  });\n            }, 10); // Really short has to be next click.\n        };\n\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\", \"maasObjFieldGroup\"],\n            scope: {},\n            transclude: true,\n            template: (\n                '<div class=\"form__siblings\" ' +\n                'data-ng-class=\"{\\'is-active\\': isEditing()}\" ' +\n                'data-ng-transclude></div>'),\n            controller: ['$scope', '$timeout', MAASGroupController],\n            link: {\n                pre: function(scope, element, attrs, controllers) {\n                    // Set formController on the MAASGroupController to\n                    // point to its parent MAASFormController. This is done in\n                    // pre-link so the controller has the formController before\n                    // registerField is called.\n                    controllers[1].formController = controllers[0];\n\n                    // Set ngDisabled on this scope from the form controller.\n                    scope.ngDisabled = controllers[0].scope.ngDisabled;\n\n                    // Set the object to always be the same on the scope.\n                    controllers[0].scope.$watch(\"obj\", function(obj) {\n                        scope.obj = obj;\n                    });\n                }\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjField', ['$compile',\n    function($compile) {\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\", \"?^^maasObjFieldGroup\"],\n            scope: {\n                onChange: \"=\",\n                subtleText: \"@\"\n            },\n            transclude: true,\n            template: (\n                '<div data-ng-transclude></div>'),\n            link: function(scope, element, attrs, controllers) {\n                // Select the controller based on which is available.\n                var controller = controllers[1];\n                if(!angular.isObject(controller)) {\n                    controller = controllers[0];\n                }\n\n                // Set ngDisabled from the parent controller.\n                scope.ngDisabled = controller.scope.ngDisabled;\n\n                element.addClass(\"p-form__group\");\n                if(attrs.subtle !== \"false\") {\n                    element.addClass(\"form__group--subtle\");\n                }\n\n                // type and key required.\n                var missingAttrs = [];\n                if(!angular.isString(attrs.type) || attrs.type.length === 0) {\n                    missingAttrs.push(\"type\");\n                }\n                if(!angular.isString(attrs.key) || attrs.key.length === 0) {\n                    missingAttrs.push(\"key\");\n                }\n                if(missingAttrs.length > 0) {\n                    throw new Error(\n                        missingAttrs.join(\", \") +\n                        \" are required on maas-obj-field.\");\n                }\n                if(angular.isString(attrs.disabled)) {\n                    scope.ngDisabled = function() { return true; };\n                }\n\n                // Remove transcluded element.\n                element.find(\"div\").remove();\n\n                // Render the label.\n                var label = attrs.label || attrs.key;\n\n                if(attrs.disableLabel !== \"true\" &&\n                        !(attrs.type === \"hidden\")) {\n                    var labelElement = angular.element('<label/>');\n                    labelElement.attr('for', attrs.key);\n                    labelElement.text(label);\n                    labelElement.addClass('p-form__label');\n                    if(attrs.labelWidth) {\n                        labelElement.addClass(\"col-\" + attrs.labelWidth);\n                    } else {\n                        labelElement.addClass(\"u-margin--right\");\n                    }\n                    if(attrs.labelLeft === \"true\") {\n                        labelElement.addClass('u-padding--left');\n                        labelElement.addClass('u-position--relative');\n                    }\n                    element.append(labelElement);\n\n                    // Add a label info icon with tooltip.\n                    if(angular.isString(attrs.labelInfo)\n                            && attrs.labelInfo.length > 0) {\n                        var infoWrapper = angular.element(\n                            '<span>&nbsp;</span>');\n                        infoWrapper.addClass('p-tooltip p-tooltip--btm-right');\n\n                        var infoIcon = angular.element('<i/>');\n                        infoIcon.addClass('p-icon--information');\n                        infoIcon.attr(\n                            'aria-describedby', attrs.key + '-tooptip');\n\n                        var infoTooltip = angular.element('<p></p>');\n                        infoTooltip.addClass('p-tooltip__message');\n                        infoTooltip.text(attrs.labelInfo);\n                        infoTooltip.attr('id', attrs.key + '-tooptip');\n\n                        infoWrapper.append(infoIcon);\n                        infoWrapper.append(infoTooltip);\n\n                        labelElement.append(infoWrapper);\n\n                        // prevents the icon from being clickable\n                        infoIcon.bind('click', function (evt) {\n                            evt.preventDefault();\n                        });\n                    }\n                }\n\n                // Add the wrapper for the input.\n                var inputWrapper = angular.element('<div></div>');\n                inputWrapper.addClass(\"p-form__control\");\n                inputWrapper.addClass(\"u-no-margin--top\");\n\n                if(attrs.inputWidth) {\n                    inputWrapper.addClass(\"col-\" + attrs.inputWidth);\n                }\n\n                // Render the input based on the type.\n                var placeholder = attrs.placeholder || label;\n                var inputElement = null;\n                if(attrs.type === \"text\" || attrs.type === \"textarea\" ||\n                   attrs.type === \"password\") {\n                    if(attrs.type === \"text\") {\n                        inputElement = $compile(\n                            '<input type=\"text\" id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">')(scope);\n                    } else if(attrs.type === \"textarea\") {\n                        inputElement = $compile(\n                            '<textarea id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">' +\n                                '</textarea>')(scope);\n                    } else if(attrs.type === \"password\") {\n                        inputElement = $compile(\n                            '<input type=\"password\" id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">')(scope);\n                    }\n\n                    // Allow enter on blur, by default.\n                    if(attrs.blurOnEnter) {\n                        inputElement.bind(\"keydown keypress\", function(evt) {\n                            if(evt.which === 13) {\n                                inputElement.blur();\n                                evt.preventDefault();\n                            }\n                        });\n                    }\n\n                    // Revert value on esc.\n                    var self = this;\n                    inputElement.bind(\"keydown keypress\", function(evt) {\n                        if(evt.which === 27) {\n                            inputElement.val(controller.scope.obj[attrs.key]);\n                            inputElement.blur();\n                            evt.preventDefault();\n                        }\n                    });\n\n                    // Register the field with the controller and set the\n                    // current value for the field.\n                    var currentValue = controller.registerField(\n                        attrs.key, scope);\n                    inputElement.val(currentValue);\n\n                    // When element is in focus then editing is on.\n                    inputElement.on(\"focus\", function() {\n                        scope.$apply(function() {\n                            controller.startEditingField(attrs.key);\n                        });\n                    });\n\n                    // When element is not in focus then editing is done.\n                    inputElement.on(\"blur\", function() {\n                        scope.$apply(function() {\n                            controller.stopEditingField(\n                                attrs.key, inputElement.val());\n                        });\n                    });\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        inputElement.val(newValue);\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return inputElement.val();\n                    };\n                } else if(attrs.type === \"options\") {\n                    // Requires the options attribute on the element. This\n                    // is copied directly into the ngOptions directive on\n                    // the select.\n                    var options = attrs.options;\n                    if(!angular.isString(options) || options.length === 0) {\n                        throw new Error(\n                            \"options attribute is required on type \" +\n                            \"'options' on maas-obj-field.\");\n                    }\n\n                    // Placeholder by default is disabled, allow it to be\n                    // enabled.\n                    var disabled = \"disabled\";\n                    if(attrs.placeholderEnabled === \"true\") {\n                        disabled = \"\";\n                    }\n\n                    // Create a child scope of the parent scope for this\n                    // directive. Since this directive is created with an\n                    // isolated scope we need the child to use the parent so\n                    // ngOptions can use properties defined in that scope.\n                    var childScope = scope.$parent.$new();\n                    childScope._ngDisabled = scope.ngDisabled;\n                    childScope._selectValue = controller.registerField(\n                        attrs.key, scope);\n                    childScope._selectNgChange = function() {\n                        scope._change();\n                        controller.stopEditingField(\n                            attrs.key, childScope._selectValue);\n                    };\n\n                    // Construct the select.\n                    inputElement = $compile(\n                        '<select id=\"' + attrs.key + '\" ' +\n                        'data-ng-model=\"_selectValue\" ' +\n                        'data-ng-options=\"' + options + '\"' +\n                        'data-ng-change=\"_selectNgChange()\"' +\n                        'data-ng-disabled=\"_ngDisabled()\">' +\n                        '<option value=\"\" ' + disabled + '>' + placeholder +\n                        '</option></select>')(childScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        childScope._selectValue = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return childScope._selectValue;\n                    };\n                } else if(attrs.type === \"checkboxes\") {\n                    // Requires the values attribute on the element.\n                    var values = attrs.values;\n                    if(!angular.isString(values) || values.length === 0) {\n                        throw new Error(\n                            \"values attribute is required on type \" +\n                            \"'checkboxes' on maas-obj-field.\");\n                    }\n\n                    // Create a child scope of the parent scope for this\n                    // directive. Since this directive is created with an\n                    // isolated scope we need the child to use the parent so\n                    // values can come from the parent scope.\n                    var checkScope = scope.$parent.$new();\n                    checkScope._selectedValues = controller.registerField(\n                        attrs.key, scope);\n                    checkScope._checked = function(val) {\n                        return checkScope._selectedValues.indexOf(val) > -1;\n                    };\n                    checkScope._toggleChecked = function(val) {\n                        var idx = checkScope._selectedValues.indexOf(val);\n                        if(idx > -1) {\n                            // Uncheck.\n                            checkScope._selectedValues.splice(idx, 1);\n                        } else {\n                            // Check.\n                            checkScope._selectedValues.push(val);\n                        }\n                    };\n\n                    // Construct the checkbox list.\n                    inputElement = angular.element([\n                        '<div class=\"width--full\" ',\n                            'data-ng-repeat=\"val in ' + values +'\">',\n                            '<input id=\"' + attrs.key + '_' + '{$ val $}',\n                                '\" type=\"checkbox\" value=\"{$ val $}\" ',\n                                'class=\"checkbox\" ',\n                                'data-ng-checked=\"_checked(val)\" ',\n                                'data-ng-click=\"_toggleChecked(val)\">',\n                            '<label for=\"' + attrs.key + '_',\n                                '{$ val $}' + '\" ',\n                                'class=\"checkbox-label\">{$ val $}</label>',\n                        '</div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(checkScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        checkScope._selectedValues = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return checkScope._selectedValues;\n                    };\n                } else if(attrs.type === \"tags\") {\n                    var tagsScope = scope.$new();\n                    var tags = controller.registerField(\n                        attrs.key, scope);\n                    tagsScope._tags = tags.map(function(val) {\n                        return {text: val};\n                    });\n\n                    // Construct the tags input.\n                    inputElement = angular.element([\n                        '<span data-ng-if=\"ngDisabled()\" ',\n                            'data-ng-repeat=\"tag in _tags\">',\n                            '{$ tag.text $} </span>',\n                        '<tags-input id=\"' + attrs.key + '\" ',\n                            'data-ng-model=\"_tags\" ',\n                            'data-ng-if=\"!ngDisabled()\" ',\n                            'placeholder=\"' + placeholder + '\" ',\n                            'data-ng-change=\"_change()\" ',\n                            'allow-tags-pattern=\"[\\\\w-]+\"></tags-input>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(tagsScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        tagsScope._tags = newValue.map(\n                            function(val) {\n                                return {text: val};\n                            });\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return tagsScope._tags.map(\n                            function(val) {\n                                return val.text;\n                            });\n                    };\n                } else if(attrs.type === \"hidden\") {\n                    var hiddenScope = scope.$new();\n                    hiddenScope._toggle = controller.registerField(\n                        attrs.key, scope);\n                    inputElement = angular.element([\n                        '<input type=\"hidden\" name=\"' + attrs.key + '\" ',\n                        'id=\"' + attrs.key + '\" ',\n                        'value=\"' + attrs.value + '\">',\n                        '</input>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(hiddenScope);\n                    scope.getValue = function() { return attrs.value; };\n                    scope.updateValue = function() { return null; };\n                } else if(attrs.type === \"onoffswitch\") {\n                    var switchScope = scope.$new();\n                    switchScope._toggle = controller.registerField(\n                        attrs.key, scope);\n                    switchScope._changed = function() {\n                        scope._change();\n                        controller.startEditingField(attrs.key);\n                        controller.stopEditingField(\n                            attrs.key, switchScope.getValue());\n                    };\n\n                    // Construct the on and off toggle.\n                    inputElement = angular.element([\n                      '<div class=\"maas-p-switch\">',\n                        '<input type=\"checkbox\" name=\"' + attrs.key + '\" ',\n                          'class=\"maas-p-switch--input\" ',\n                          'id=\"' + attrs.key + '\" ',\n                          'data-ng-model=\"_toggle\" ',\n                          'data-ng-change=\"_changed()\">',\n                        '<div class=\"maas-p-switch--mask\"></div>',\n                      '</div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(switchScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        // WARNING: This code is difficult to unit test, since\n                        // we could not figure out how to get the\n                        // isolateScope() from the transcluded element. Be sure\n                        // to manually test versions of this toggle with and\n                        // without the on-value and off-value attributes, such\n                        // as by verifying that both the on/off toggle on both\n                        // the discovery page and the subnet details page work.\n                        if(attrs.onValue && attrs.onValue === newValue) {\n                            switchScope._toggle = true;\n                        } else if(attrs.offValue &&\n                                attrs.offValue === newValue) {\n                            switchScope._toggle = false;\n                        } else {\n                            switchScope._toggle = newValue;\n                        }\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        // WARNING: This code is difficult to unit test, since\n                        // we could not figure out how to get the\n                        // isolateScope() from the transcluded element. Be sure\n                        // to manually test versions of this toggle with and\n                        // without the on-value and off-value attributes, such\n                        // as by verifying that both the on/off toggle on both\n                        // the discovery page and the subnet details page work.\n                        if(switchScope._toggle) {\n                            if(attrs.onValue) {\n                                return attrs.onValue;\n                            } else {\n                                return true;\n                            }\n                        } else {\n                            if(attrs.offValue) {\n                                return attrs.offValue;\n                            } else {\n                                return false;\n                            }\n                        }\n                    };\n                } else if(attrs.type == \"slider\") {\n                    var sliderScope = scope.$new();\n                    sliderScope._slider = controller.registerField(\n                        attrs.key, scope);\n                    sliderScope._ngDisabled = scope.ngDisabled;\n\n                    // Construct the tags input.\n                    inputElement = angular.element([\n                        '<div class=\"p-slider__wrapper\">',\n                        '<input class=\"p-slider\" type=\"range\"',\n                        'min=\"' + attrs.min + '\" max=\"' + attrs.max + '\" ',\n                        'value=\"1\" step=\"1\" id=\"' + attrs.key + '\" ',\n                        'data-ng-model=\"_slider\" data-ng-disabled=\"',\n                        '_ngDisabled()\">',\n                        '<input class=\"p-slider__input\" type=\"text\" ',\n                        'maxlength=\"3\" id=\"' + attrs.key + '-input\" ',\n                        'data-ng-model=\"_slider\" data-ng-disabled=\"',\n                        '_ngDisabled()\"></div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(sliderScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        sliderScope._slider = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return sliderScope._slider;\n                    };\n                } else {\n                    throw new Error(\n                        \"Unknown type on maas-obj-field: \" + attrs.type);\n                }\n\n                // Called on change.\n                scope._change = function() {\n                    if(angular.isFunction(scope.onChange)) {\n                        scope.onChange(\n                            attrs.key,\n                            controller.getValue(attrs.key),\n                            controller);\n                    }\n                };\n\n                // Copy input class to the input element.\n                if(attrs.inputClass) {\n                    inputElement.addClass(attrs.inputClass);\n                }\n                inputWrapper.append(inputElement);\n\n                // Errors element.\n                var errorsElement = angular.element(\n                    '<ul class=\"p-list u-no-margin--top\"></ul>');\n                if(!controller.isTableForm()) {\n                    errorsElement.addClass(\"form__error\");\n                }\n                inputWrapper.append(errorsElement);\n\n                // Help text elements\n                if (attrs.helpText) {\n                    var helpTextElement = angular.element(\n                        '<p>' + attrs.helpText + '</p>');\n                    helpTextElement.addClass(\"p-form-help-text\");\n                    inputWrapper.append(helpTextElement);\n                }\n\n                // Called by controller to clear all errors.\n                scope.clearErrors = function() {\n                    inputElement.removeClass(\"ng-dirty\");\n                    inputElement.removeClass(\"p-form-validation__input\");\n                    inputWrapper.removeClass(\"p-form-validation\");\n                    inputWrapper.removeClass(\"is-error\");\n                    inputWrapper.removeClass(\"u-no-margin--top\");\n                    errorsElement.empty();\n                };\n\n                // Called by controller to set errors.\n                scope.setErrors = function(errors) {\n                    if(errors.length > 0) {\n                        inputWrapper.addClass(\"p-form-validation\");\n                        inputWrapper.addClass(\"is-error\");\n                        inputWrapper.addClass(\"u-no-margin--top\");\n                        inputElement.addClass(\"ng-dirty\");\n                        inputElement.addClass(\"p-form-validation__input\");\n                        angular.forEach(errors, function(error) {\n                            errorsElement.append(\n                              '<li class=\"p-form-validation__message\">' +\n                              '<strong>Error:</strong> ' + error + '</li>'\n                            );\n                        });\n                        // Set the input in focus but outside of the current\n                        // digest cycle.\n                        setTimeout(function() {\n                            inputElement.focus();\n                        }, 1);\n                    }\n                };\n\n                // Called by controller to see if error is set on field.\n                scope.hasErrors = function() {\n                    return inputWrapper.hasClass(\"is-error\");\n                };\n\n                // Subtle text element.\n                if(attrs.subtleText) {\n                    var subtleTextElement = $compile(\n                        angular.element(\n                            '<span class=\"p-form-help-text\" ' +\n                            'data-ng-bind=\"subtleText\"></span>'))(scope);\n                    inputWrapper.append(subtleTextElement);\n                }\n                element.append(inputWrapper);\n\n                // Watch the showing of saving spinner. Update the elements\n                // correctly to show the saving.\n                scope.$watch(function() {\n                    return controller.showInputSaving(attrs.key);\n                }, function(value) {\n                    if(value) {\n                        inputWrapper.children(\n                            ':first').addClass('u-border--information');\n                        inputWrapper.append(\n                            '<i class=\"obj-saving icon ' +\n                            'p-icon--spinner u-animation--spin\"></i>');\n                        inputWrapper.addClass('p-tooltip');\n                        inputWrapper.addClass('p-tooltip--bottom');\n                        inputWrapper.addClass('u-no-margin--top');\n                        inputWrapper.attr('aria-label', 'Saving');\n                    } else {\n                      inputWrapper.children(\n                          ':first').removeClass('u-border--information');\n                        inputWrapper.find('i.obj-saving').remove();\n                        inputWrapper.removeClass('p-tooltip');\n                        inputWrapper.removeClass('p-tooltip--right');\n                        inputWrapper.addClass('u-no-margin--top');\n                        inputWrapper.removeAttr('aria-label');\n                    }\n                });\n\n                // Called when the scope is destroyed.\n                scope.$on(\"$destroy\", function() {\n                    controller.unregisterField(attrs.key);\n                });\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjSave', function() {\n        return {\n            restrict: \"A\",\n            require: [\"^^maasObjForm\"],\n            scope: {},\n            link: function(scope, element, attrs, controllers) {\n                // Only allow maas-obj-save when saveOnBlur is false.\n                var controller = controllers[0];\n                if(controller.saveOnBlur()) {\n                    throw new Error(\n                        \"maas-obj-save is only allowed when save-on-blur is \" +\n                        \"set to false.\");\n                }\n\n                element.on(\"click\", function() {\n                    scope.$apply(function() {\n                        controller.saveForm();\n                    });\n                });\n            }\n        };\n    });\n\nangular.module('MAAS').directive('maasObjErrors', function() {\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\"],\n            scope: {},\n            template: '<ul class=\"p-list u-no-margin--top\"></ul>',\n            link: function(scope, element, attrs, controllers) {\n                // Set on the controller the global error handler.\n                controllers[0].errorScope = scope;\n                var ul = element.find(\"ul\");\n\n                // Called by controller to clear all errors.\n                scope.clearErrors = function() {\n                    ul.empty();\n                };\n\n                // Called by controller to set errors.\n                scope.setErrors = function(errors) {\n                    if(errors.length > 0) {\n                        angular.forEach(errors, function(error) {\n                            ul.append(\n                              '<li class=\"p-list__item\">' +\n                              '<i class=\"p-icon--error\"></i> ' +\n                              error + '</li>'\n                            );\n                        });\n                    }\n                };\n\n                // Called by controller to see if error is set on field.\n                scope.hasErrors = function() {\n                    return ul.children().length > 0;\n                };\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjSaving', function() {\n        return {\n            restrict: \"E\",\n            require: \"^^maasObjForm\",\n            scope: {},\n            transclude: true,\n            template: [\n              '<span data-ng-if=\"saving\">',\n                '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                '<span data-ng-transclude></span>',\n              '</span>'].join(''),\n            link: function(scope, element, attrs, controller) {\n                scope.saving = false;\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    scope.saving = value;\n                });\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjShowSaving', function() {\n        return {\n            restrict: \"A\",\n            require: \"^^maasObjForm\",\n            link: function(scope, element, attrs, controller) {\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    if(value) {\n                        element.removeClass(\"ng-hide\");\n                    } else {\n                        element.addClass(\"ng-hide\");\n                    }\n                });\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjHideSaving', function() {\n        return {\n            restrict: \"A\",\n            require: \"^^maasObjForm\",\n            link: function(scope, element, attrs, controller) {\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    if(value) {\n                        element.addClass(\"ng-hide\");\n                    } else {\n                        element.removeClass(\"ng-hide\");\n                    }\n                });\n            }\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Creates the auto-formatting for MAC address inputs.\n */\n\nangular.module('MAAS').directive('macAddress', function () {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: function (scope, ele, attr, ngModelCtrl, ngModel) {\n            if (!ngModelCtrl) {\n              return;\n            }\n\n            var macAddressParse = function (value) {\n                return value.toUpperCase();\n            };\n\n            var macAddressFormat = function (value) {\n\n                if (!value) {\n                  return undefined;\n                }\n\n                var numbers = value.replace(/:/g, \"\");\n\n                if (value.length % 3 === 0) {\n\n                    return numbers.replace(/([0-9A-Za-z]{2})/g, \"$1:\");\n                }\n            };\n\n            ngModelCtrl.$parsers.push(macAddressParse);\n            ngModelCtrl.$formatters.push(macAddressFormat);\n\n            ele.on('input', function () {\n                var value = macAddressFormat(ele.val());\n\n                if (value !== undefined) {\n                    ngModelCtrl.$setViewValue(value);\n                    ngModelCtrl.$render();\n                }\n                scope.$apply();\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Machines listing directive.\n*\n* Renders the machines listing.\n*/\n// testing\n\n\n\nangular.module('MAAS').directive('maasMachinesTable', [\n  'MachinesManager', 'GeneralManager', 'ManagerHelperService',\n  function (MachinesManager, GeneralManager, ManagerHelperService) {\n    return {\n      restrict: \"E\",\n      scope: {\n        search: \"=\",\n        ngDisabled: \"&\",\n        machineHasError: \"&\",\n        hideCheckboxes: \"=?\",\n        onListingChange: \"&\",\n        onCheckAll: \"&\",\n        onCheck: \"&\"\n      },\n      templateUrl: (\n        'static/partials/machines-table.html?v=' + (\n          MAAS_config.files_version)),\n      link: function(scope, element, attrs) {\n        // Statuses that should show spinner.\n        var SPINNER_STATUSES = [\n          1,   // commissioning\n          9,   // deploying\n          12,  // releasing\n          14,  // disk erasing\n          17,  // entering rescue mode\n          19,  // exiting rescue mode\n          21   // testing\n        ];\n\n        // Scope variables.\n        scope.table = {\n          column: 'fqdn',\n          predicate: 'fqdn',\n          reverse: false,\n          allViewableChecked: false,\n          machines: MachinesManager.getItems(),\n          filteredMachines: [],\n          osinfo: GeneralManager.getData(\"osinfo\")\n        };\n\n        // Ensures that the checkbox for select all is the correct value.\n        scope.updateAllChecked = function() {\n          // Not checked when the filtered machines are empty.\n          if(scope.table.filteredMachines.length === 0) {\n              scope.table.allViewableChecked = false;\n              return;\n          }\n\n          // Loop through all filtered machines and see if all are checked.\n          var i;\n          for(i = 0; i < scope.table.filteredMachines.length; i++) {\n              if(!scope.table.filteredMachines[i].$selected) {\n                  scope.table.allViewableChecked = false;\n                  return;\n              }\n          }\n          scope.table.allViewableChecked = true;\n        };\n\n        // Selects and deselects visible machines.\n        scope.toggleCheckAll = function() {\n          if(scope.table.allViewableChecked) {\n            angular.forEach(\n              scope.table.filteredMachines, function(machine) {\n                MachinesManager.unselectItem(machine.system_id);\n              });\n          } else {\n            angular.forEach(\n              scope.table.filteredMachines, function(machine) {\n                MachinesManager.selectItem(machine.system_id);\n              });\n          }\n          scope.updateAllChecked();\n          scope.onCheckAll();\n        };\n\n        // Selects and unselects machine.\n        scope.toggleChecked = function(machine) {\n          if(MachinesManager.isSelected(machine.system_id)) {\n            MachinesManager.unselectItem(machine.system_id);\n          } else {\n            MachinesManager.selectItem(machine.system_id);\n          }\n          scope.updateAllChecked();\n          scope.onCheck({$machine: machine});\n        };\n\n        // Sorts the table by predicate.\n        scope.sortTable = function(predicate) {\n            scope.table.predicate = predicate;\n            scope.table.reverse = !scope.table.reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        scope.selectColumnOrSort = function(predicate) {\n            if(scope.table.column !== predicate) {\n                scope.table.column = predicate;\n            } else {\n                scope.sortTable(predicate);\n            }\n        };\n\n        // Return true if spinner should be shown.\n        scope.showSpinner = function(machine) {\n            return SPINNER_STATUSES.indexOf(machine.status_code) > -1;\n        };\n\n        scope.showFailedTestWarning = function(machine) {\n            if(scope.showSpinner(machine)) {\n                return false;\n            }\n            switch(machine.status_code) {\n                // NEW\n                case 0:\n                // COMMISSIONING\n                case 1:\n                // FAILED_COMMISSIONING\n                case 2:\n                // TESTING\n                case 21:\n                // FAILED_TESTING\n                case 22:\n                    return false;\n            }\n            switch(machine.testing_status) {\n                // Tests havn't been run\n                case -1:\n                // Tests have passed\n                case 2:\n                    return false;\n            }\n            return true;\n        };\n\n        // Return true if the other node status should be shown.\n        scope.showNodeStatus = function(machine) {\n            // -1 means tests havn't been run, 2 means tests have passed.\n            if(!scope.showSpinner(machine) &&\n               !scope.showFailedTestWarning(machine) &&\n               machine.other_test_status !== -1 &&\n               machine.other_test_status !== 2) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Returns the release title from osinfo.\n        scope.getReleaseTitle = function(os_release) {\n          if(angular.isArray(scope.table.osinfo.releases)) {\n            for(i = 0; i < scope.table.osinfo.releases.length; i++) {\n              var release = scope.table.osinfo.releases[i];\n              if(release[0] === os_release) {\n                return release[1];\n              }\n            }\n          }\n          return os_release;\n        };\n\n        // Returns the status text to show.\n        scope.getStatusText = function(machine) {\n          var showRelease = ['Deploying', 'Deployed'];\n          if(showRelease.indexOf(machine.status) === -1) {\n            return machine.status;\n          } else {\n            var releaseTitle = scope.getReleaseTitle(\n              machine.osystem + '/' + machine.distro_series);\n            if(machine.osystem === \"ubuntu\") {\n              releaseTitle = releaseTitle.split('\"')[0].trim();\n            }\n            if(machine.status === \"Deployed\") {\n              return releaseTitle;\n            }\n            if(machine.status === \"Deploying\") {\n              return machine.status + ' ' + releaseTitle;\n            }\n          }\n        };\n\n        // When the list of filtered machines change update the all checkbox.\n        scope.$watchCollection(\"table.filteredMachines\", function() {\n          scope.updateAllChecked();\n          scope.onListingChange({$machines: scope.table.filteredMachines});\n        });\n      }\n    };\n}]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Navigation directive.\n *\n * Provides the navigation interactions on all screen sizes\n */\n\n\nangular.module('MAAS').directive(\n  'maasNavigationDropdown', ['$document', function($document) {\n  return {\n    restrict: \"A\",\n    link: function(scope, element, attrs) {\n\n      element.on('click', function(e) {\n        e.stopPropagation();\n        element.parent().find('.p-dropdown__menu').toggleClass('u-hide');\n      });\n\n      $document.on('click', function() {\n        element.parent().find('.p-dropdown__menu').addClass('u-hide');\n      });\n    }\n  };\n}]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Navigation directive.\n *\n * Provides the navigation interactions on all screen sizes\n */\n\n\nangular.module('MAAS').directive(\n  'maasNavigationMobile', ['$document', function($document) {\n  return {\n    restrict: \"A\",\n    link: function(scope, element, attrs) {\n\n      element.on('click', function(e) {\n        e.stopPropagation();\n        var mobileNavMenu = element.parent().parent().find('#mobile-nav-menu');\n        mobileNavMenu.toggleClass('u-show');\n      });\n    }\n  };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Notifications.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject notifications.html into the template cache.\n    $templateCache.put('directive/templates/notifications.html', [\n      '<div class=\"u-no-margin--top\" data-ng-repeat=\"category in categories\"',\n        ' data-ng-init=\"notifications = categoryNotifications[category]\">',\n        // 1 notification.\n        '<span class=\"row\" data-ng-if=\"notifications.length == 1\">',\n          '<ul class=\"p-list\" data-ng-class=\"{\\'is-open\\': shown}\">',\n            '<li data-ng-repeat=\"notification in notifications\"',\n            ' class=\"p-notification\"',\n            ' data-ng-class=\"categoryClasses[notification.category]\">',\n              '<p class=\"p-notification__response\">',\n                '<span data-ng-bind-html=\"notification.message\"></span> ',\n                '<a class=\"p-notification__action\"',\n                ' data-ng-click=\"dismiss(notification)\">Dismiss</a>',\n              '</p>',\n            '</li>',\n          '</ul>',\n        '</span>',\n        // 2 or more notifications.\n        '<div class=\"row p-notification--group\" ',\n             'data-ng-if=\"notifications.length >= 2\"',\n        ' data-ng-init=\"shown = false\">',\n            '<div data-ng-class=\"categoryClasses[notifications[0].category]\">',\n                '<a aria-label=\"{$ notifications.length $} ',\n                    '{$ categoryTitles[category] $}, click to open messages.\"',\n                    ' maas-enter=\"shown = !shown\"',\n                    ' class=\"p-notification__toggle\"',\n                    ' data-ng-click=\"shown = !shown\">',\n                    '<p class=\"p-notification__response\">',\n                        '<span class=\"p-notification__status\"',\n                        ' data-count=\"{$ notifications.length $}\"',\n                        ' data-ng-bind=\"notifications.length + \\' \\' + ',\n                                       'categoryTitles[category]\"></span>',\n                        '<small>',\n                        '<i data-ng-class=\"{ \\'p-icon--expand\\': !shown,',\n                        ' \\'p-icon--collapse\\': shown }\"></i></small>',\n                    '</p>',\n                '</a>',\n                '<ul class=\"p-list--divided\" ',\n                    'data-ng-class=\"{\\'u-hide\\': !shown}\">',\n                    '<li data-ng-repeat=\"notification in notifications\"',\n                    ' class=\"p-list__item\">',\n                    '<p class=\"p-notification__response\">',\n                        '<span data-ng-bind-html=\"notification.message\">',\n                        '</span> ',\n                        '<a class=\"p-notification__action\"',\n                        ' data-ng-click=\"dismiss(notification)\">Dismiss</a>',\n                    '</p>',\n                    '</li>',\n                '</ul>',\n            '</div>',\n        '</div>',\n      '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasNotifications', [\n    \"NotificationsManager\", \"ManagerHelperService\",\n    function(NotificationsManager, ManagerHelperService) {\n        return {\n            restrict: \"E\",\n            templateUrl: 'directive/templates/notifications.html',\n            link: function($scope, element, attrs) {\n                ManagerHelperService.loadManager($scope, NotificationsManager);\n                $scope.notifications = NotificationsManager.getItems();\n                $scope.dismiss = angular.bind(\n                    NotificationsManager, NotificationsManager.dismiss);\n\n                $scope.categories = [\n                    \"error\",\n                    \"warning\",\n                    \"success\",\n                    \"info\"\n                ];\n                $scope.categoryTitles = {\n                    error: \"Errors\",\n                    warning: \"Warnings\",\n                    success: \"Successes\",\n                    info: \"Other messages\"\n                };\n                $scope.categoryClasses = {\n                    error: \"p-notification--negative\",\n                    warning: \"p-notification--caution\",\n                    success: \"p-notification--positive\",\n                    info: \"p-notification\"  // No suffix.\n                };\n                $scope.categoryNotifications = {\n                    error: [],\n                    warning: [],\n                    success: [],\n                    info: []\n                };\n\n                $scope.$watchCollection(\n                    \"notifications\", function() {\n                        var cns = $scope.categoryNotifications;\n                        angular.forEach(\n                            $scope.categories, function(category) {\n                                cns[category].length = 0;\n                            }\n                        );\n                        angular.forEach(\n                            $scope.notifications, function(notification) {\n                                cns[notification.category].push(notification);\n                            }\n                        );\n                    }\n                );\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * OS/Release select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the os-select.html into the template cache.\n    $templateCache.put('directive/templates/os-select.html', [\n        '<ul class=\"p-inline-list--settings u-no-margin--top u-no-margin--left',\n            ' u-no-padding--left\">',\n            '<li class=\"p-inline-list__item\"> ',\n                '<label class=\"p-form__label\">Choose your image</label>',\n            '</li>',\n            '<li class=\"p-inline-list__item\"> ',\n                '<select name=\"os\" ',\n                    'data-ng-model=\"ngModel.osystem\" ',\n                    'data-ng-change=\"selectedOSChanged()\" ',\n                    'data-ng-options=\"',\n                    'os[0] as os[1] for os in maasOsSelect.osystems\">',\n                '</select>',\n            '</li>',\n            '<li class=\"p-inline-list__item\"> ',\n                '<select name=\"release\" ',\n                    'data-ng-model=\"ngModel.release\" ',\n                    'data-ng-change=\"selectedReleaseChanged()\" ',\n                    'data-ng-options=\"',\n                    'release[0] as release[1] for release in releases\">',\n                '</select>',\n            '</li>',\n            '<li class=\"p-inline-list__item\"> ',\n                '<select name=\"hwe_kernel\" data-ng-model=\"ngModel.hwe_kernel\" ',\n                    'data-ng-show=\"hwe_kernels.length\"',\n                    'data-ng-options=\"',\n                    'hwe_kernel[0] as hwe_kernel[1] for hwe_kernel ',\n                    'in hwe_kernels\">',\n                    '<option value=\"\">Default kernel</option>',\n                '</select>',\n            '</li>',\n        '</ul>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasOsSelect', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            maasOsSelect: '=',\n            ngModel: '='\n        },\n        templateUrl: 'directive/templates/os-select.html',\n        controller: function($scope) {\n\n            // Return only the selectable releases based on the selected os.\n            function getSelectableReleases() {\n                if(angular.isObject($scope.maasOsSelect) &&\n                    angular.isArray($scope.maasOsSelect.releases)) {\n                    var i, allChoices = $scope.maasOsSelect.releases;\n                    var choice, choices = [];\n                    for(i = 0; i < allChoices.length; i++) {\n                        choice = allChoices[i];\n                        if(choice[0].indexOf($scope.ngModel.osystem + '/') > -1)\n                        {\n                            choices.push(choice);\n                        }\n                    }\n                    return choices;\n                }\n                return [];\n            }\n\n            // Return only the selectable kernels based on the selected os.\n            function getSelectableKernels() {\n                if(angular.isObject($scope.maasOsSelect) &&\n                    angular.isObject($scope.maasOsSelect.kernels) &&\n                    angular.isString($scope.ngModel.osystem) &&\n                    angular.isString($scope.ngModel.release)) {\n                    var os = $scope.ngModel.osystem;\n                    var release = $scope.ngModel.release.split('/')[1];\n                    var osKernels = $scope.maasOsSelect.kernels[os];\n                    if(angular.isObject(osKernels)) {\n                        return osKernels[release];\n                    }\n                }\n                return [];\n            }\n\n            // Returns the defaultValue if its in the choices array. Otherwise\n            // it returns the weighted choice if present, followed by the\n            // first choice.\n            function getDefaultOrFirst(array, defaultValue, weightValue) {\n                var i, first, weightedPresent = false;\n                for(i = 0; i < array.length; i++) {\n                    if(angular.isUndefined(first)) {\n                        first = array[i][0];\n                    }\n                    if(array[i][0] === defaultValue) {\n                        return defaultValue;\n                    }\n                    if(angular.isString(weightValue) &&\n                        array[i][0] === weightValue) {\n                        weightedPresent = true;\n                    }\n                }\n                if(weightedPresent) {\n                    return weightValue;\n                }\n                if(angular.isUndefined(first)) {\n                    return null;\n                }\n                return first;\n            }\n\n            // Sets the default selected values for the ngModel. Only sets the\n            // values once the maasOsSelect is populated. Sets the selected\n            // osystem to default_osystem if present, followed by 'ubuntu' if\n            // present, followed by the first available. Sets the selected\n            // release to the default_release if present, followed by the first\n            // available.\n            function setDefault() {\n                // Do nothing if model is already set.\n                if(angular.isString($scope.ngModel.osystem) &&\n                    angular.isString($scope.ngModel.release)) {\n                    return;\n                }\n                // Do nothing if the default is not set.\n                if(angular.isUndefined($scope.maasOsSelect.default_osystem) ||\n                    angular.isUndefined($scope.maasOsSelect.default_release)) {\n                    return;\n                }\n\n                // Set the intial defaults.\n                $scope.ngModel.osystem = getDefaultOrFirst(\n                    $scope.maasOsSelect.osystems,\n                    $scope.maasOsSelect.default_osystem, \"ubuntu\");\n                $scope.releases = getSelectableReleases();\n                $scope.ngModel.release = getDefaultOrFirst(\n                    $scope.releases,\n                    $scope.ngModel.osystem + \"/\" +\n                    $scope.maasOsSelect.default_release);\n                $scope.ngModel.kernel = \"\";\n            }\n\n            // Defaults\n            if(!angular.isObject($scope.ngModel)) {\n                $scope.ngModel = {\n                    osystem: null,\n                    release: null,\n                    hwe_kernel: null\n                };\n            }\n            $scope.releases = getSelectableReleases();\n            $scope.hwe_kernels = getSelectableKernels();\n\n            // Add the reset function to ngModel, allowing users to call\n            // this function to reset the defauls.\n            $scope.ngModel.$reset = function() {\n                $scope.ngModel.osystem = null;\n                $scope.ngModel.release = null;\n                $scope.ngModel.hwe_kernel = null;\n                setDefault();\n            };\n\n            // If the available os change update the available releases and\n            // set the default.\n            $scope.$watch(\"maasOsSelect.releases\", function() {\n                $scope.releases = getSelectableReleases();\n                setDefault();\n            });\n\n            // If the available release change update the available kernels and\n            // set the default.\n            $scope.$watch(\"maasOsSelect.kernels\", function() {\n                $scope.hwe_kernels = getSelectableKernels();\n                setDefault();\n            });\n\n            // Updates the default and selectable releases.\n            $scope.selectedOSChanged = function() {\n                $scope.releases = getSelectableReleases();\n                $scope.hwe_kernels = getSelectableKernels();\n                $scope.ngModel.release = null;\n                $scope.ngModel.hwe_kernel = null;\n                if($scope.releases.length > 0) {\n                    $scope.ngModel.release = $scope.releases[0][0];\n                }\n            };\n\n            // Updates the default and selectable kernels.\n            $scope.selectedReleaseChanged = function() {\n                $scope.hwe_kernels = getSelectableKernels();\n                $scope.ngModel.hwe_kernel = null;\n            };\n        }\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Placeholder directive.\n *\n * Allows the placeholder attribute on an element to be dynamic.\n */\n\n\nangular.module('MAAS').directive('ngPlaceholder', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            ngPlaceholder: \"=\"\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('ngPlaceholder', function() {\n                element[0].placeholder = scope.ngPlaceholder;\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Pod parameters directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the power-parameters.html into the template cache.\n    $templateCache.put('directive/templates/pod-parameters.html', [\n        '<maas-obj-field type=\"options\" key=\"type\" label=\"Pod type\" ',\n          'label-width=\"2\" input-width=\"5\" ',\n          'placeholder=\"Select the pod type\" ',\n          'options=\"type.name as type.description for type in podTypes\" ',\n          'ng-if=\"!hideType\">',\n        '</maas-obj-field>',\n        '<div pod-fields></div>'\n    ].join(''));\n}]);\n\n\nangular.module('MAAS').directive(\n    'maasPodParameters', [\n        '$compile', 'GeneralManager', 'ManagerHelperService', function(\n        $compile, GeneralManager, ManagerHelperService) {\n    return {\n        restrict: \"E\",\n        require: \"^^maasObjForm\",\n        scope: {\n          hideType: '='\n        },\n        templateUrl: 'directive/templates/pod-parameters.html',\n        link: function(scope, element, attrs, controller) {\n            scope.powerTypes = GeneralManager.getData('power_types');\n            scope.podTypes = [];\n            scope.type = null;\n\n            var childScope, fieldsElement = angular.element(\n                element.find('div[pod-fields]'));\n\n            // Function to update the editable fields.\n            var updateFields = function(podType) {\n                var type = null;\n                var i;\n                for(i = 0; i < scope.podTypes.length; i++) {\n                    if(scope.podTypes[i].name === podType) {\n                      type = scope.podTypes[i];\n                    }\n                }\n\n                fieldsElement.empty();\n                if(childScope) {\n                  childScope.$destroy();\n                }\n                if(angular.isObject(type)) {\n                  var html = '<maas-obj-field-group>';\n                  angular.forEach(type.fields, function(field) {\n                      if(field.scope === 'bmc') {\n                          if(field.name === 'power_pass') {\n                              html += (\n                                  '<maas-obj-field type=\"password\" key=\"');\n                          } else {\n                              html += (\n                                  '<maas-obj-field type=\"text\" key=\"');\n                          }\n                          html += (field.name + '\" label=\"' + field.label +\n                            '\" ' + 'label-width=\"2\" input-width=\"5\">' +\n                            '</maas-obj-field>');\n                      }\n                  });\n\n                  if(type.name === 'virsh' && attrs.hideSlider !== \"true\") {\n                      html += (\n                          '<maas-obj-field type=\"slider\" key=\"' +\n                          'cpu_over_commit_ratio\" label=\"CPU over commit\" ' +\n                          'min=\"0\" max=\"10\" label-width=\"2\" input-width=\"5\">' +\n                          '</maas-obj-field>');\n                      html += (\n                          '<maas-obj-field type=\"slider\" key=\"' +\n                          'memory_over_commit_ratio\" label=\"' +\n                          'Memory over commit\" min=\"0\" max=\"10\" ' +\n                          'label-width=\"2\" input-width=\"5\"></maas-obj-field>');\n                  }\n                  html += '</maas-obj-field-group>';\n                  childScope = scope.$new();\n                  var ele = angular.element(html);\n                  fieldsElement.append(ele);\n                  $compile(ele)(\n                      childScope, undefined, {maasObjForm: controller});\n                }\n            };\n\n            // Return the selected type.\n            var getType = function() {\n                if(scope.hideType) {\n                    return controller.obj.type;\n                } else {\n                    return controller.getValue('type');\n                }\n            };\n\n            // Update the fields when the type changes.\n            scope.$watch(getType, updateFields);\n\n            // Update the pod types when the power types is updated.\n            scope.$watchCollection(\"powerTypes\", function() {\n                scope.podTypes.length = 0;\n                angular.forEach(scope.powerTypes, function(type) {\n                    if(type.driver_type === \"pod\") {\n                        scope.podTypes.push(type);\n                    }\n                });\n                updateFields(getType());\n            });\n\n            // Load the general manager.\n            ManagerHelperService.loadManager(scope, GeneralManager);\n        }\n    };\n}]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Power parameters directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the power-parameters.html into the template cache.\n    $templateCache.put('directive/templates/power-parameters.html', [\n        '<div class=\"p-form__group\">',\n            '<label for=\"power-type\" ',\n                    'class=\"form__group-label col-2\">Power type</label>',\n            '<div class=\"form__group-input col-3\">',\n                '<select name=\"power-type\" id=\"power-type\" ',\n                    'data-ng-disabled=\"ngDisabled || ngModel.in_pod\" ',\n                    'data-ng-class=\"{ invalid: !ngModel.type }\" ',\n                    'data-ng-model=\"ngModel.type\" ',\n                    'data-ng-options=\"',\n                    'type as type.description ',\n                    'for type in maasPowerParameters track by type.name\">',\n                    '<option value=\"\" disabled selected>',\n                        'Select your power type',\n                    '</option>',\n                '</select>',\n            '</div>',\n        '</div>',\n        '<div class=\"p-form__group\" ',\n            'data-ng-repeat=\"field in ngModel.type.fields\">',\n            '<label for=\"{$ field.name $}\" class=\"form__group-label col-2\" ',\n                 'data-ng-if=\"field.name !== ' + \"'default_storage_pool' && \",\n                 \"(field.scope !== 'bmc' || !ngModel.in_pod)\" + '\">',\n                '{$ field.label $}',\n            '</label>',\n            '<div class=\"form__group-input col-3\">',\n                '<maas-power-input field=\"field\" ',\n                    'data-ng-disabled=\"ngDisabled || (field.scope === ',\n                    \"'bmc' && ngModel.in_pod)\" + '\" ',\n                    'data-ng-if=\"field.name !== ' + \"'default_storage_pool' \",\n                    \"&& (field.scope !== 'bmc' || !ngModel.in_pod)\" + '\" ',\n                    'data-ng-model=\"ngModel.parameters[field.name]\">',\n            '</div>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasPowerInput', ['$compile',\n    function($compile) {\n        return {\n            restrict: \"E\",\n            require: \"ngModel\",\n            scope: {\n                field: '=',\n                ngModel: '='\n            },\n            link: function(scope, element, attrs) {\n                var type = scope.field.field_type;\n                var req = scope.field.required ? 'required=\"required\" ' : '';\n                var html = \"\";\n                if(type === \"string\" || type === \"mac_address\" ||\n                   type === \"password\") {\n                    // Build an input element with the correct attributes.\n                    var input_type = 'type=\"text\"';\n                    if(type === \"password\") {\n                        // If the input field is a password field, display it\n                        // as text or password depending on if we're editing\n                        // the fields.\n                        input_type = \"data-ng-type=\\\"ngModel.editing && \" +\n                            \"'text' || 'password'\\\"\";\n                    }\n                    html =\n                        '<input ' + input_type + ' ' +\n                        'name=\"' + scope.field.name + '\" ' +\n                        req + 'data-ng-model=\"' + attrs.ngModel + '\" ' +\n                        'data-ng-disabled=\"' + attrs.ngDisabled + '\" ';\n\n                    // Add mac address validation.\n                    if(type === \"mac_address\") {\n                        html +=\n                            'data-ng-pattern=\"' +\n                            '/^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$/\"';\n                    }\n                    html += '>';\n\n                    // Set the default value for the input on the model.\n                    if(angular.isUndefined(scope.ngModel)) {\n                        scope.ngModel = scope.field[\"default\"];\n                    }\n                } else if(type === \"choice\") {\n                    // Build a select element with the correct attributes.\n                    html =\n                        '<select name=\"' + scope.field.name + '\"' +\n                        req + 'data-ng-model=\"' + attrs.ngModel + '\" ' +\n                        'data-ng-disabled=\"' + attrs.ngDisabled + '\" ' +\n                        'data-ng-options=\"' +\n                        'choice[0] as choice[1] for choice in field.choices' +\n                        '\">';\n                    html += '</select>';\n\n                    // Set the default choice on the model.\n                    if(angular.isUndefined(scope.ngModel)) {\n                        if(scope.field[\"default\"]) {\n                            scope.ngModel = scope.field[\"default\"];\n                        }\n                    }\n                } else {\n                    throw new Error(\"Unknown power_type: \"+ type);\n                }\n\n                // Replace the element with the compiled html using the parents\n                // scope. The parent scope is used because we want to build the\n                // element as if it was in the parent scope, not the scope that\n                // is defined in this directive.\n                element.replaceWith($compile(html)(scope.$parent));\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasPowerParameters', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            maasPowerParameters: '=',\n            ngModel: '=',\n            ngDisabled: '='\n        },\n        templateUrl: 'directive/templates/power-parameters.html'\n    };\n});\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * User preferences MAAS key\n *\n * Provides the interactivity of the MAAS key section of the user profile.\n */\n\n\nangular.module('MAAS')\n.directive('maasPrefKeys',\n    ['$q', 'RegionConnection', 'UsersManager',\n    function($q, RegionConnection, UsersManager) {\n        return {\n            restrict: \"A\",\n            controller: function() {\n                var self = this;\n\n                self.addKey = function() {\n                    var defer = $q.defer();\n                    RegionConnection.defaultConnect().then(function() {\n                        UsersManager.createAuthorisationToken().then(\n                            function(token) {\n                                if(self.injector) {\n                                    self.injector(token);\n                                }\n                                defer.resolve(token);\n                            });\n                    });\n                    return defer.promise;\n                };\n\n                self.deleteKey = function(key) {\n                    RegionConnection.defaultConnect().then(function() {\n                        UsersManager.deleteAuthorisationToken(key);\n                    });\n                };\n            }\n        };\n    }])\n.directive('maasPrefKeysInject',\n    ['$compile', '$templateCache',\n    function($compile, $templateCache) {\n        return {\n            restrict: 'A',\n            require: '^maasPrefKeys',\n            scope: {\n                template: '@maasPrefKeysInject'\n            },\n            link: function($scope, $element, $attrs, controller) {\n                var template = $templateCache.get($scope.template);\n                if(!template) {\n                    throw new Error(\n                        \"Unable to load template: \" + $scope.template);\n                }\n\n                // Set the injector on the controller.\n                controller.injector = function(token) {\n                    var newScope = $scope.$new();\n                    newScope.token = token;\n\n                    var newElement = angular.element(template);\n                    $element.append(newElement);\n                    $compile(newElement)(newScope);\n                };\n            }\n        };\n    }])\n.directive('maasPrefKeysAdd', function() {\n    return {\n        restrict: 'A',\n        require: '^maasPrefKeys',\n        link: function($scope, $element, $attrs, controller) {\n            var spinner = (\n                '<i class=\"p-icon--spinner u-animation--spin\"></i>');\n\n            $element.on('click', function(evt) {\n                evt.preventDefault();\n\n                // Add the spinner.\n                var spinElement = angular.element(spinner);\n                $element.prepend(spinElement);\n\n                // Add the new key.\n                $scope.$apply(function() {\n                    controller.addKey().then(function() {\n                        // Remove the spinner.\n                        spinElement.remove();\n                    });\n                });\n            });\n        }\n    };\n})\n.directive('maasPrefKey', function() {\n    return {\n        restrict: 'A',\n        require: '^maasPrefKeys',\n        scope: {\n            'key': '@maasPrefKey'\n        },\n        controller: ['$scope', '$element', function($scope, $element) {\n            var self = this;\n\n            self.deleteKey = function() {\n                $scope.prefsController.deleteKey($scope.key);\n\n                // Delete self.\n                $scope.$destroy();\n                $element.remove();\n            };\n        }],\n        link: function($scope, $element, $attrs, controller) {\n            // Needed so the controller of this directive can get the parent\n            // controller.\n            $scope.prefsController = controller;\n        }\n    };\n})\n.directive('maasPrefKeyDelete', function() {\n    return {\n        restrict: 'A',\n        require: '^maasPrefKey',\n        link: function($scope, $element, $attrs, controller) {\n            $element.on('click', function(evt) {\n                evt.preventDefault();\n\n                $scope.$apply(function() {\n                    controller.deleteKey();\n                });\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Proxy settings directive.\n*/\n\nangular.module('MAAS').directive('maasProxySettings', [\n    '$sce', 'ConfigsManager', 'ManagerHelperService', 'JSONService',\n    function($sce, ConfigsManager, ManagerHelperService, JSONService) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            templateUrl: 'static/partials/proxy-settings.html',\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                ManagerHelperService.loadManager(\n                    $scope, ConfigsManager).then(function() {\n                    $scope.loading = false;\n                    $scope.httpProxy = ConfigsManager.getItemFromList(\n                        \"http_proxy\");\n                    $scope.enableHttpProxy = ConfigsManager.getItemFromList(\n                        \"enable_http_proxy\");\n                    $scope.usePeerProxy = ConfigsManager.getItemFromList(\n                        \"use_peer_proxy\");\n                    if ($scope.enableHttpProxy.value) {\n                        if ($scope.httpProxy.value) {\n                            if ($scope.usePeerProxy.value) {\n                                $scope.proxy_type = \"peer-proxy\";\n                            } else {\n                                $scope.proxy_type = \"external-proxy\";\n                            }\n                        } else {\n                            $scope.proxy_type = \"builtin-proxy\";\n                        }\n                    } else {\n                        $scope.proxy_type = \"no-proxy\";\n                    }\n                });\n            }\n        };\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Release name.\n *\n * Converts the provided release name into the release title.\n */\n\n\nangular.module('MAAS').directive('maasReleaseName', [\n    'GeneralManager', 'ManagerHelperService',\n    function(GeneralManager, ManagerHelperService) {\n    return {\n        restrict: \"A\",\n        scope: {\n          releaseName: \"=maasReleaseName\"\n        },\n        link: function(scope, element, attrs) {\n            scope.osinfo = GeneralManager.getData(\"osinfo\");\n\n            // Gets the release name.\n            var getName = function() {\n                if(angular.isArray(scope.osinfo.releases)) {\n                  for(i = 0; i < scope.osinfo.releases.length; i++) {\n                      var release = scope.osinfo.releases[i];\n                      if(release[0] === scope.releaseName) {\n                          return release[1];\n                      }\n                  }\n                }\n                return scope.releaseName;\n            };\n\n            // Sets the text inside the element.\n            var setText = function() {\n                element.text(getName());\n            };\n\n            // Update the text when the release name or osinfo changes.\n            scope.$watch('releaseName', function() {\n              setText();\n            });\n            scope.$watchCollection('osinfo.releases', function() {\n              setText();\n            });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Release options directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the release-options.html into the template cache.\n    $templateCache.put('directive/templates/release-options.html', [\n        '<ul class=\"p-inline-list--settings u-no-margin--top\">',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"diskErase\" ',\n                    'type=\"checkbox\" data-ng-model=\"maasReleaseOptions.erase\" ',\n                    'data-ng-disabled=\"globalOptions.erase\" ',\n                    'data-ng-change=\"onEraseChange()\">',\n                '<label for=\"diskErase\">',\n                    'Erase disks before releasing',\n                '</label>',\n            '</li>',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"secureErase\" ',\n                    'type=\"checkbox\" ',\n                    'data-ng-model=\"maasReleaseOptions.secureErase\" ',\n                    'data-ng-disabled=\"!maasReleaseOptions.erase\">',\n                '<label for=\"secureErase\">',\n                    'Use secure erase',\n                '</label>',\n            '</li>',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"quickErase\" type=\"checkbox\" ',\n                    'data-ng-model=\"maasReleaseOptions.quickErase\" ',\n                    'data-ng-disabled=\"!maasReleaseOptions.erase\">',\n                '<label for=\"quickErase\">',\n                    'Use quick erase (not secure)',\n                '</label>',\n            '</li>',\n        '</ul>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasReleaseOptions', [\n    'GeneralManager', function(GeneralManager) {\n        return {\n            restrict: \"A\",\n            scope: {\n                maasReleaseOptions: '='\n            },\n            templateUrl: 'directive/templates/release-options.html',\n            link: function(scope, element, attrs) {\n                // On click of enabling erasing set the others to the\n                // global default value.\n                scope.onEraseChange = function() {\n                    if(scope.maasReleaseOptions.erase) {\n                        scope.maasReleaseOptions.secureErase = (\n                            scope.globalOptions.secure_erase);\n                        scope.maasReleaseOptions.quickErase = (\n                            scope.globalOptions.quick_erase);\n                    } else {\n                        scope.maasReleaseOptions.secureErase = false;\n                        scope.maasReleaseOptions.quickErase = false;\n                    }\n                };\n\n                // Watch the global options. Once set update the defaults\n                // of maasReleaseOptions.\n                scope.globalOptions = GeneralManager.getData(\n                    \"release_options\");\n                scope.$watch('globalOptions', function() {\n                    if(angular.isDefined(scope.globalOptions.erase)) {\n                        // Set the initial defauls for the release options.\n                        scope.maasReleaseOptions.erase = (\n                            scope.globalOptions.erase);\n                        scope.onEraseChange();\n                    }\n                }, true);\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script expander\n *\n * Expands a scripts content.\n */\n\n\nangular.module('MAAS').directive('pScriptExpander', function() {\n    return {\n        restrict: \"C\",\n        link: function($scope, $element, $attrs) {\n            var link = $element.find('.p-script-expander__trigger');\n            var target = $element.find('.p-script-expander__content');\n            target.addClass('u-hide');\n\n            link.on('click', function(evt) {\n                evt.preventDefault();\n                target.toggleClass('u-hide');\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Script results listing directive.\n*\n*/\n\nangular.module('MAAS').directive('maasScriptResultsList', function() {\n    return {\n        templateUrl: (\n        'static/partials/script-results-list.html?v=' + (\n            MAAS_config.files_version))\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script runtime counter directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script_runtime.html into the template cache.\n    $templateCache.put('directive/templates/script_runtime.html', [\n        '<span data-ng-if=\"(scriptStatus === 1 || scriptStatus === 7) &&',\n        \" estimatedRunTime !== 'Unknown'\" + '\">{{counter}} of ',\n        '~{{estimatedRunTime}}</span>',\n        '<span data-ng-if=\"(scriptStatus === 1 || scriptStatus === 7) &&',\n        \" estimatedRunTime == 'Unknown'\" + '\">{{counter}}</span>',\n        '<span data-ng-if=\"scriptStatus === 0 && estimatedRunTime !== ',\n        \"'Unknown'\" + '\">~{{estimatedRunTime}}</span>',\n        '<span data-ng-if=\"scriptStatus !== 0 && scriptStatus !== 1 ',\n        '&& scriptStatus !== 7\">{{runTime}}</span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasScriptRunTime', function() {\n    return {\n        restrict: \"A\",\n        require: [\"startTime\", \"runTime\", \"estimatedRunTime\", \"scriptStatus\"],\n        scope: {\n            startTime: '=',\n            runTime: '@',\n            estimatedRunTime: '@',\n            scriptStatus: '='\n        },\n        templateUrl: 'directive/templates/script_runtime.html',\n        controller: function($scope, $interval) {\n            $scope.counter = \"0:00:00\";\n\n            function incrementCounter() {\n                if(($scope.scriptStatus === 1 || $scope.scriptStatus === 7) &&\n                    $scope.startTime) {\n                    var seconds = Math.floor(\n                        (Date.now() / 1000) - $scope.startTime);\n                    var minutes = Math.floor(seconds / 60);\n                    var hours = Math.floor(minutes / 60);\n                    var days = Math.floor(hours / 24);\n                    hours = hours - (days * 24);\n                    minutes = minutes - (days * 24 * 60) - (hours * 60);\n                    seconds = seconds - (days * 24 * 60 * 60) -\n                        (hours * 60 * 60) - (minutes * 60);\n                    var new_counter = \"\";\n                    // This outputs the same format used by Python. It is\n                    // import to use the same format as when scripts are not\n                    // running runtime is taken from the region using Python's\n                    // format.\n                    if(days === 1) {\n                        new_counter = days + \" day, \";\n                    }else if(days > 1) {\n                        new_counter = days + \" days, \";\n                    }\n                    new_counter += hours + \":\";\n                    if(minutes < 10) {\n                        new_counter += \"0\" + minutes + \":\";\n                    } else {\n                        new_counter += minutes + \":\";\n                    }\n                    if(seconds < 10) {\n                        new_counter += \"0\" + seconds;\n                    } else {\n                        new_counter += seconds;\n                    }\n                    $scope.counter = new_counter;\n                }\n            }\n\n            // Update the counter on init, start the interval and stop it when\n            // the directive is destroyed.\n            incrementCounter();\n            var promise = $interval(incrementCounter, 1000);\n            $scope.$on('$destroy', function() {\n              $interval.cancel(promise);\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script-select.html into the template cache.\n    $templateCache.put('directive/templates/script-select.html', [\n        '<tags-input data-ng-model=\"ngModel\" placeholder=\"Select scripts\" ',\n                'key-property=\"id\" display-property=\"name\" min-length=1',\n                'on-tag-adding=\"onTagAdding($tag)\" spellcheck=\"false\"',\n                'add-from-autocomplete-only=\"true\" on-tag-removed=\"refocus()\"',\n                'on-tag-adding=\"onTagAdding($tag)\" on-tag-added=\"refocus()\">',\n            '<auto-complete source=\"getScripts($query)\" min-length=\"0\" ',\n                    'load-on-down-arrow=\"true\" load-on-focus=\"true\" ',\n                    'load-on-empty=\"true\" template=\"script-template\" ',\n                    'max-results-to-show=\"1000\">',\n            '</auto-complete>',\n        '</tags-input>',\n        '<script type=\"text/ng-template\" id=\"script-template\">',\n            '<div>',\n                '<p>',\n                    '{{data.name}} {{data.tags_string}}',\n                '</p>',\n                '<span class=\"p-form-help-text\">',\n                    '{{data.description}}',\n                '</span>',\n            '</div>',\n        '</script>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive(\n        'maasScriptSelect',\n        ['$q', 'ScriptsManager', 'ManagerHelperService',\n        function($q, ScriptsManager, ManagerHelperService) {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            ngModel: '=',\n            scriptType: '='\n        },\n        templateUrl: 'directive/templates/script-select.html',\n        link: function($scope, element, attrs, ngModelCtrl) {\n\n            $scope.allScripts = ScriptsManager.getItems();\n            $scope.scripts = [];\n            $scope.getScripts = function(query) {\n                $scope.scripts.length = 0;\n                angular.forEach($scope.allScripts, function(script) {\n                    if(script.script_type === $scope.scriptType &&\n                            script.name.indexOf(query) >= 0) {\n                        script.tags_string = '';\n                        angular.forEach(script.tags, function (tag) {\n                            if(script.tags_string === '') {\n                                script.tags_string = '(' + tag;\n                            } else {\n                                script.tags_string += ', ' + tag;\n                            }\n                        });\n                        if(script.tags_string !== '') {\n                            script.tags_string += ')';\n                        }\n                        $scope.scripts.push(script);\n                    }\n                });\n                return {\n                    data: $scope.scripts\n                };\n            };\n            $scope.onTagAdding = function(tag) {\n                return tag.id !== undefined;\n            };\n\n            $scope.refocus = function() {\n                var tagsInput = element.find('tags-input');\n                var tagsInputScope = tagsInput.isolateScope();\n                tagsInputScope.eventHandlers.input.change('');\n                tagsInputScope.eventHandlers.input.focus();\n                tagsInput.find('input').focus();\n            };\n\n            if(!angular.isArray($scope.ngModel)) {\n                $scope.ngModel = [];\n            }\n            ManagerHelperService.loadManager($scope, ScriptsManager).then(\n                function() {\n                    $scope.ngModel.length = 0;\n                    angular.forEach($scope.allScripts, function(script) {\n                        if(script.script_type === $scope.scriptType &&\n                           script.for_hardware.length === 0) {\n                            if($scope.scriptType === 0) {\n                                // By default MAAS runs all custom\n                                // commissioning scripts in addition to all\n                                // builtin commissioning scripts.\n                                $scope.ngModel.push(script);\n                            } else if($scope.scriptType === 2 &&\n                                    script.tags.indexOf('commissioning') >= 0) {\n                                // By default MAAS runs testing scripts which\n                                // have been tagged 'commissioning'\n                                $scope.ngModel.push(script);\n                            }\n                        }\n                    });\n                }\n            );\n        }\n    };\n}]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script status icon select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script_status.html into the template cache.\n    $templateCache.put('directive/templates/script_status.html', [\n        '<span data-ng-class=\"icon\" data-ng-show=\"show\"></span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasScriptStatus', function() {\n    return {\n        restrict: \"A\",\n        require: \"scriptStatus\",\n        scope: {\n            scriptStatus: '='\n        },\n        templateUrl: 'directive/templates/script_status.html',\n        controller: function($scope) {\n            function getIcon() {\n                $scope.show = true;\n                switch($scope.scriptStatus) {\n                    // SCRIPT_STATUS.PENDING\n                    case 0:\n                        $scope.icon = 'p-icon--pending';\n                        break;\n                    // SCRIPT_STATUS.RUNNING\n                    case 1:\n                    // SCRIPT_STATUS.INSTALLING\n                    case 7:\n                        $scope.icon = 'p-icon--running';\n                        break;\n                    // SCRIPT_STATUS.PASSED\n                    case 2:\n                        $scope.icon = 'p-icon--pass';\n                        break;\n                    // SCRIPT_STATUS.FAILED\n                    case 3:\n                    // SCRIPT_STATUS.ABORTED\n                    case 5:\n                    // SCRIPT_STATUS.DEGRADED\n                    case 6:\n                    // SCRIPT_STATUS.FAILED_INSTALLING\n                    case 8:\n                        $scope.icon = 'p-icon--power-error';\n                        break;\n                    // SCRIPT_STATUS.TIMEDOUT\n                    case 4:\n                        $scope.icon = 'p-icon--timed-out';\n                        break;\n                    // SCRIPT_STATUS.SKIPPED\n                    case 9:\n                        $scope.icon = 'p-icon--warning';\n                        break;\n                    case -1:\n                        // No scripts have been run.\n                        $scope.show = false;\n                        break;\n                    default:\n                        $scope.icon = 'p-icon--help';\n                        break;\n                }\n            }\n\n            getIcon();\n\n            $scope.$watch(\"scriptStatus\", function() {\n                getIcon();\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * SSH keys directive.\n*/\n\nangular.module('MAAS').directive('maasSshKeys', [\n    '$sce', 'SSHKeysManager', 'ManagerHelperService', 'JSONService',\n    function($sce, SSHKeysManager, ManagerHelperService, JSONService) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            templateUrl: (\n                'static/partials/ssh-keys.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.keys = SSHKeysManager.getItems();\n                $scope.groupedKeys = [];\n                $scope.add = {\n                    source: 'lp',\n                    authId: '',\n                    key: '',\n                    error: null,\n                    saving: false\n                };\n                $scope.sourceTitles = {\n                    'lp': 'Launchpad',\n                    'gh': 'Github',\n                    'upload': 'Upload'\n                };\n                $scope.openRow = null;\n                $scope.rowMode = null;\n\n                // Expose trustAsHtml on the scope for the view to use.\n                $scope.trustAsHtml = $sce.trustAsHtml;\n\n                // Open a row.\n                $scope.open = function(obj, mode) {\n                    $scope.openRow = obj.id;\n                    $scope.rowMode = mode;\n                };\n\n                // Close the open row.\n                $scope.close = function() {\n                    $scope.openRow = null;\n                };\n\n                // Returns true if the key can be imported.\n                $scope.canImportKeys = function() {\n                    if($scope.add.saving) {\n                        return false;\n                    } else if ($scope.add.source === 'lp' ||\n                        $scope.add.source === 'gh') {\n                        return $scope.add.authId.length > 0;\n                    } else {\n                        return $scope.add.key.length > 0;\n                    }\n                };\n\n                // Called to import the key.\n                $scope.importKeys = function() {\n                    if(!$scope.canImportKeys()) {\n                        return;\n                    }\n                    $scope.add.error = null;\n                    $scope.add.saving = true;\n                    if($scope.add.source === 'lp' ||\n                        $scope.add.source === 'gh') {\n                        SSHKeysManager.importKeys({\n                            'protocol': $scope.add.source,\n                            'auth_id': $scope.add.authId\n                        }).then(function() {\n                            $scope.add.saving = false;\n                            $scope.add.source = 'lp';\n                            $scope.add.authId = '';\n                            $scope.add.key = '';\n                        }, function(error) {\n                            $scope.add.saving = false;\n                            var errorJson = JSONService.tryParse(error);\n                            if(angular.isObject(errorJson)) {\n                                if(angular.isArray(errorJson.__all__)) {\n                                    $scope.add.error = errorJson.__all__[0];\n                                } else {\n                                    $scope.add.error = error;\n                                }\n                            } else {\n                                $scope.add.error = error;\n                            }\n                        });\n                    } else {\n                        SSHKeysManager.createItem({\n                            'key': $scope.add.key\n                        }).then(function() {\n                            $scope.add.saving = false;\n                            $scope.add.source = 'lp';\n                            $scope.add.authId = '';\n                            $scope.add.key = '';\n                        }, function(error) {\n                            $scope.add.saving = false;\n                            var errorJson = JSONService.tryParse(error);\n                            if(angular.isObject(errorJson)) {\n                                if(angular.isArray(errorJson.key)) {\n                                    $scope.add.error = errorJson.key[0];\n                                } else if(angular.isArray(errorJson.__all__)) {\n                                    $scope.add.error = errorJson.__all__[0];\n                                } else {\n                                    $scope.add.error = error;\n                                }\n                            } else {\n                                $scope.add.error = error;\n                            }\n                        });\n                    }\n                };\n\n                // Called to delete the selected group of keys.\n                $scope.confirmDelete = function(obj) {\n                    angular.forEach(obj.keys, function(key) {\n                        SSHKeysManager.deleteItem(key);\n                    });\n                };\n\n                // Updates the groupedKeys that is used to render the table.\n                $scope.$watchCollection(\"keys\", function() {\n                    $scope.groupedKeys = [];\n                    var keyMap = {};\n                    angular.forEach($scope.keys, function(key) {\n                        var groupObj, keysource = key.keysource;\n                        if(angular.isObject(keysource)) {\n                            var keysourceKey = (\n                                keysource.protocol + '/' + keysource.auth_id);\n                            groupObj = keyMap[keysourceKey];\n                            if(angular.isObject(groupObj)) {\n                                groupObj.keys.push(key);\n                            } else {\n                                groupObj = {\n                                    id: keysourceKey,\n                                    source: keysource.protocol,\n                                    authId: keysource.auth_id,\n                                    keys: [key]\n                                };\n                                keyMap[keysourceKey] = groupObj;\n                                $scope.groupedKeys.push(groupObj);\n                            }\n                        } else {\n                            groupObj = {\n                                id: 'upload/' + key.id,\n                                source: 'upload',\n                                authId: '',\n                                keys: [key]\n                            };\n                            $scope.groupedKeys.push(groupObj);\n                        }\n                    });\n                });\n\n                ManagerHelperService.loadManager($scope, SSHKeysManager).then(\n                    function() {\n                        $scope.loading = false;\n                    });\n            }\n        };\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Switches listing directive.\n*\n* Renders the switches listing.\n*/\n\n\nangular.module('MAAS').directive('maasSwitchesTable', [\n  'SwitchesManager', 'GeneralManager', 'ManagerHelperService',\n  function (SwitchesManager, GeneralManager, ManagerHelperService) {\n    return {\n      restrict: \"E\",\n      scope: {\n        search: \"=\",\n        ngDisabled: \"&\",\n        switchHasError: \"&\",\n        hideCheckboxes: \"=?\",\n        onListingChange: \"&\",\n        onCheckAll: \"&\",\n        onCheck: \"&\"\n      },\n      templateUrl: (\n        'static/partials/switches-table.html?v=' + (\n          MAAS_config.files_version)),\n      link: function(scope, element, attrs) {\n        // Statuses that should show spinner.\n        var SPINNER_STATUSES = [\n          1,   // commissioning\n          9,   // deploying\n          12,  // releasing\n          14,  // disk erasing\n          17,  // entering rescue mode\n          19,  // exiting rescue mode\n          21   // testing\n        ];\n\n        // Scope variables.\n        scope.table = {\n          column: 'fqdn',\n          predicate: 'fqdn',\n          reverse: false,\n          allViewableChecked: false,\n          switches: SwitchesManager.getItems(),\n          filteredSwitches: [],\n          osinfo: GeneralManager.getData(\"osinfo\")\n        };\n\n        // Ensures that the checkbox for select all is the correct value.\n        scope.updateAllChecked = function() {\n          // Not checked when the filtered switches are empty.\n          if(scope.table.filteredSwitches.length === 0) {\n              scope.table.allViewableChecked = false;\n              return;\n          }\n\n          // Loop through all filtered switches and see if all are checked.\n          var i;\n          for(i = 0; i < scope.table.filteredSwitches.length; i++) {\n              if(!scope.table.filteredSwitches[i].$selected) {\n                  scope.table.allViewableChecked = false;\n                  return;\n              }\n          }\n          scope.table.allViewableChecked = true;\n        };\n\n        // Selects and deselects visible switches.\n        scope.toggleCheckAll = function() {\n          if(scope.table.allViewableChecked) {\n            angular.forEach(\n              scope.table.filteredSwitches, function(switch_) {\n                SwitchesManager.unselectItem(switch_.system_id);\n              });\n          } else {\n            angular.forEach(\n              scope.table.filteredSwitches, function(switch_) {\n                SwitchesManager.selectItem(switch_.system_id);\n              });\n          }\n          scope.updateAllChecked();\n          scope.onCheckAll();\n        };\n\n        // Selects and unselects switch.\n        scope.toggleChecked = function(switch_) {\n          if(SwitchesManager.isSelected(switch_.system_id)) {\n            SwitchesManager.unselectItem(switch_.system_id);\n          } else {\n            SwitchesManager.selectItem(switch_.system_id);\n          }\n          scope.updateAllChecked();\n          scope.onCheck({$switch_: switch_});\n        };\n\n        // Sorts the table by predicate.\n        scope.sortTable = function(predicate) {\n            scope.table.predicate = predicate;\n            scope.table.reverse = !scope.table.reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        scope.selectColumnOrSort = function(predicate) {\n            if(scope.table.column !== predicate) {\n                scope.table.column = predicate;\n            } else {\n                scope.sortTable(predicate);\n            }\n        };\n\n        // Return true if spinner should be shown.\n        scope.showSpinner = function(switch_) {\n          return SPINNER_STATUSES.indexOf(switch_.status_code) > -1;\n        };\n\n        // Returns the release title from osinfo.\n        scope.getReleaseTitle = function(os_release) {\n          if(angular.isArray(scope.table.osinfo.releases)) {\n            for(i = 0; i < scope.table.osinfo.releases.length; i++) {\n              var release = scope.table.osinfo.releases[i];\n              if(release[0] === os_release) {\n                return release[1];\n              }\n            }\n          }\n          return os_release;\n        };\n\n        // Returns the status text to show.\n        scope.getStatusText = function(switch_) {\n          var showRelease = ['Deploying', 'Deployed'];\n          if(showRelease.indexOf(switch_.status) === -1) {\n            return switch_.status;\n          } else {\n            var releaseTitle = scope.getReleaseTitle(\n              switch_.osystem + '/' + switch_.distro_series);\n            if(switch_.osystem === \"ubuntu\") {\n              releaseTitle = releaseTitle.split('\"')[0].trim();\n            }\n            if(switch_.status === \"Deployed\") {\n              return releaseTitle;\n            }\n            if(switch_.status === \"Deploying\") {\n              return switch_.status + ' ' + releaseTitle;\n            }\n          }\n        };\n\n        // When the list of filtered switches change update the all checkbox.\n        scope.$watchCollection(\"table.filteredSwitches\", function() {\n          scope.updateAllChecked();\n          scope.onListingChange({$switches: scope.table.filteredSwitches});\n        });\n      }\n    };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Toggle control.\n */\n\nangular.module('MAAS').directive('toggleCtrl',[\n    '$document',\n    function($document) {\n        return {\n            restrict: 'A',\n            link: function($scope, $element, $attr){\n\n                $scope.isToggled = false;\n                $scope.toggleMenu = function() {\n                  $scope.isToggled = !$scope.isToggled;\n                };\n\n                var clickHandler = function(event) {\n                    if ($element.find(event.target).length > 0) {\n                        return;\n                    }\n                    $scope.$apply(function() {\n                        $scope.isToggled = false;\n                    });\n                };\n\n                $document.on('click', clickHandler);\n                $scope.$on('$destroy', function() {\n                    $document.off('click', clickHandler);\n                });\n            }\n        };\n}]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Type directive.\n */\n\nangular.module('MAAS').directive('ngType', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            ngType: \"=\"\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('ngType', function() {\n                valid_types = [\n                    'button',\n                    'checkbox',\n                    'color',\n                    'date ',\n                    'datetime ',\n                    'datetime-local ',\n                    'email ',\n                    'file',\n                    'hidden',\n                    'image',\n                    'month ',\n                    'number ',\n                    'password',\n                    'radio',\n                    'range ',\n                    'reset',\n                    'search',\n                    'submit',\n                    'tel',\n                    'text',\n                    'time ',\n                    'url',\n                    'week'\n                ];\n                if(valid_types.indexOf(scope.ngType) !== -1) {\n                    element[0].type = scope.ngType;\n                }\n                else {\n                    throw new Error(\"Invalid input type: \" + scope.ngType);\n                }\n\n            });\n        }\n    };\n});","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Version reloader.\n *\n * Watches the version reported by the GeneralManager if it changes then\n * the entire page is reloaded by-passing the local browser cache.\n */\n\n\nangular.module('MAAS').directive('maasVersionReloader', [\n    '$window', 'GeneralManager', 'ManagerHelperService', 'LogService',\n    function($window, GeneralManager, ManagerHelperService, LogService) {\n        return {\n            restrict: \"A\",\n            controller: function($scope) {\n                $scope.version = GeneralManager.getData(\"version\");\n\n                // Reload the page by-passing the browser cache.\n                $scope.reloadPage = function() {\n                    // Force cache reload by passing true.\n                    $window.location.reload(true);\n                };\n\n                ManagerHelperService.loadManager($scope, GeneralManager).then(\n                    function() {\n                        GeneralManager.enableAutoReload(true);\n                        LogService.info(\n                            'Version reloader: Monitoring MAAS \"' +\n                            $scope.site + '\"; version', $scope.version.text,\n                            \"via\", $window.location.href);\n                        $scope.$watch(\"version.text\",\n                            function(newValue, oldValue) {\n                                if(newValue !== oldValue) {\n                                    LogService.info(\n                                        \"MAAS version changed from '\" +\n                                        oldValue + \"' to '\" + newValue +\n                                        \"'; forcing reload.\");\n                                    $scope.reloadPage();\n                                }\n                            });\n                    });\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Window Width.\n *\n * Watches the window width and calculates what the inner width of the window.\n * Applying the attribute window-wdith on the parent element and calling\n * data-ng-if=\"width > 768\" you can use this to hide / show elements for mobile\n * development.\n *\n */\n\n\nangular.module('MAAS').directive('windowWidth', [\n    '$window',\n    function ($window) {\n        return {\n            restrict: 'A',\n            link: function($scope, element, attrs){\n                $scope.windowWidth = $window.innerWidth;\n                function onResize(){\n                    // uncomment for only fire when $window.innerWidth change\n                    if ($scope.windowWidth !== $window.innerWidth) {\n                        $scope.windowWidth = $window.innerWidth;\n                        $scope.$apply(function () {\n                            $scope.message = \"Timeout called!\";\n                        });\n                    }\n                }\n\n                function cleanUp() {\n                    angular.element($window).off('resize', onResize);\n                }\n\n                angular.element($window).on('resize', onResize);\n                $scope.$on('$destroy', cleanUp);\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS BootResource Manager\n *\n * Manager for the boot resources. This manager is unique from all the other\n * managers because it uses polling instead of having the region push the\n * information.\n *\n * Why is it polling?\n * The boot resource information is split between the region controller and\n * all rack controllers. The region controller does not cache any information\n * about a rack controllers images it contacts the rack as its source of truth.\n * This means that the client needs to use polling so the region controller\n * can ask each rack controller what is the status of your images.\n */\n\nangular.module('MAAS').factory(\n    'BootResourcesManager',\n    ['$q', '$timeout', 'RegionConnection', 'ErrorService',\n    function($q, $timeout, RegionConnection, ErrorService) {\n\n        // Constructor\n        function BootResourcesManager() {\n            // Set true once been loaded the first time.\n            this._loaded = false;\n\n            // Holds the data recieved from polling.\n            this._data = {};\n\n            // Set to true when polling has been enabled.\n            this._polling = false;\n\n            // The next promise for the polling interval.\n            this._nextPromise = null;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 500;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n        }\n\n        // Return the data.\n        BootResourcesManager.prototype.getData = function() {\n            return this._data;\n        };\n\n        // Return true when data has been loaded.\n        BootResourcesManager.prototype.isLoaded = function() {\n            return this._loaded;\n        };\n\n        // Returns true when currently polling.\n        BootResourcesManager.prototype.isPolling = function() {\n            return this._polling;\n        };\n\n        // Starts the polling for data.\n        BootResourcesManager.prototype.startPolling = function() {\n            if(!this._polling) {\n                this._polling = true;\n                return this._poll();\n            } else {\n                return this._nextPromise;\n            }\n        };\n\n        // Stops the polling for data.\n        BootResourcesManager.prototype.stopPolling = function() {\n            this._polling = false;\n            if(angular.isObject(this._nextPromise)) {\n                $timeout.cancel(this._nextPromise);\n                this._nextPromise = null;\n            }\n        };\n\n        // Load the data from the region.\n        BootResourcesManager.prototype._loadData = function(raiseError) {\n            raiseError = raiseError || false;\n            var self = this;\n            return RegionConnection.callMethod(\"bootresource.poll\").then(\n                function(newData) {\n                    angular.copy(angular.fromJson(newData), self._data);\n                    self._loaded = true;\n                    return self._data;\n                }, function(error) {\n                    if(raiseError) {\n                        ErrorService.raiseError(error);\n                    }\n                });\n        };\n\n        // Registers the next polling attempt.\n        BootResourcesManager.prototype._pollAgain = function(timeout) {\n            var self = this;\n            this._nextPromise = $timeout(function() {\n                self._poll();\n            }, timeout);\n            return this._nextPromise;\n        };\n\n        // Polls for the data from the region.\n        BootResourcesManager.prototype._poll = function() {\n            var self = this;\n\n            // Can only poll if connected.\n            if(!RegionConnection.isConnected()) {\n                return this._pollAgain(this._pollErrorTimeout);\n            }\n\n            return this._loadData(false).then(function(newData) {\n                var pollTimeout = self._pollTimeout;\n                if(!angular.isObject(newData) ||\n                    newData.connection_error ||\n                    !angular.isArray(newData.resources) ||\n                    newData.resources.length === 0) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(pollTimeout);\n                return newData;\n            }, function(error) {\n                // Don't raise the error, just log it and try again.\n                console.log(error);\n                self._pollAgain(self._pollErrorTimeout);\n            });\n        };\n\n        // Loads the resources. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest.\n        BootResourcesManager.prototype.loadItems = function() {\n            var defer = $q.defer();\n            this._loadData(true).then(function() {\n                defer.resolve();\n            });\n            return defer.promise;\n        };\n\n        // Does nothing. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest.\n        BootResourcesManager.prototype.enableAutoReload = function() { };\n\n        // Stop the running image import process.\n        BootResourcesManager.prototype.stopImport = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.stop_import\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the ubuntu options and start the import process.\n        BootResourcesManager.prototype.saveUbuntu = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_ubuntu\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the Ubuntu Core images and start the import process.\n        BootResourcesManager.prototype.saveUbuntuCore = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_ubuntu_core\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the other images and start the import process.\n        BootResourcesManager.prototype.saveOther = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_other\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Fetch the releases and arches from the provided source.\n        BootResourcesManager.prototype.fetch = function(source) {\n            return RegionConnection.callMethod(\"bootresource.fetch\", source);\n        };\n\n        // Delete an image.\n        BootResourcesManager.prototype.deleteImage = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.delete_image\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        return new BootResourcesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Configs Manager\n *\n * Manages all of the config values in the browser. This manager is used for\n * the first-user journey and the settings page.\n */\n\n angular.module('MAAS').factory(\n     'ConfigsManager',\n     ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n             $q, $rootScope, RegionConnection, Manager) {\n\n         function ConfigsManager() {\n             Manager.call(this);\n\n             this._pk = \"name\";\n             this._handler = \"config\";\n\n             // Listen for notify events for the config object.\n             var self = this;\n             RegionConnection.registerNotifier(\"config\",\n                 function(action, data) {\n                     self.onNotify(action, data);\n                 });\n         }\n\n         ConfigsManager.prototype = new Manager();\n\n         return new ConfigsManager();\n     }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Controllers Manager\n *\n * Manages all of the controllers in the browser. This manager is used for the\n * controller listing and view pages. The manager is a subclass of\n * NodesManager.\n */\n\nangular.module('MAAS').factory(\n    'ControllersManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', 'ServicesManager',\n            function($q, $rootScope, RegionConnection, NodesManager,\n            ServicesManager) {\n\n        function ControllersManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"controller\";\n\n            // Listen for notify events for the controller object.\n            var self = this;\n            RegionConnection.registerNotifier(\"controller\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n        ControllersManager.prototype = new NodesManager();\n\n        ControllersManager.prototype.getServices = function(controller) {\n            var services = [];\n            angular.forEach(controller.service_ids, function(service_id) {\n                var service = ServicesManager.getItemFromList(service_id);\n                if(angular.isObject(service)) {\n                    services.push(service);\n                }\n            });\n            return services;\n        };\n\n        // Check the boot image import status.\n        ControllersManager.prototype.checkImageStates = function(controllers) {\n            return RegionConnection.callMethod(\n                this._handler + \".check_images\", controllers);\n        };\n\n        return new ControllersManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Devices Manager\n *\n * Manages all of the devices in the browser. This manager is used for the\n * device listing and the device view page. The manager uses the\n * RegionConnection to load the devices, update the devices, and listen for\n * notification events about devices.\n */\n\nangular.module('MAAS').factory(\n    'DevicesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function DevicesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"device\";\n            this._metadataAttributes = {\n                \"owner\": null,\n                \"subnets\": null,\n                \"tags\": null,\n                \"zone\": function(device) {\n                    return device.zone.name;\n                }\n            };\n\n            // Listen for notify events for the device object.\n            var self = this;\n            RegionConnection.registerNotifier(\"device\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        DevicesManager.prototype = new NodesManager();\n\n        // Create a device.\n        DevicesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the device to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"device.create\", node);\n        };\n\n        // Create an interface on device.\n        DevicesManager.prototype.createInterface = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"device.create_interface\", params).then(function(device) {\n                    self._replaceItem(device);\n                    return device;\n                });\n        };\n\n        // Perform the action on the device.\n        DevicesManager.prototype.performAction = function(\n            device, action, extra) {\n\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(\"device.action\", {\n                \"system_id\": device.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        return new DevicesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS DHCPSnippet Manager\n *\n * Manages all of the DHCPSnippets in the browser. The manager uses the\n * RegionConnection to load the DHCPSnippets, update the DHCPSnippets, and\n * listen for notification events about DHCPSnippets.\n */\n\nangular.module('MAAS').factory(\n    'DHCPSnippetsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function DHCPSnippetsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"dhcpsnippet\";\n\n            // Listen for notify events for the DHCPSnippet object.\n            var self = this;\n            RegionConnection.registerNotifier(\"dhcpsnippet\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        DHCPSnippetsManager.prototype = new Manager();\n\n        // Create the snippet.\n        DHCPSnippetsManager.prototype.create = function(snippet) {\n            return RegionConnection.callMethod(\n                this._handler + \".create\", snippet, true);\n        };\n\n        return new DHCPSnippetsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Discovery Manager\n *\n * A Discovery is a MAC, IP binding with an optional hostname that MAAS\n * believes it has discovered. It is associated with a particular fabric and\n * VLAN, and is aware of which rack or region interface most recently\n * discovered it.\n *\n * This class manages all of the discoveries in the browser. It uses the\n * RegionConnection to load the discoveries and listen for notification events\n * about discoveries.\n */\n\nangular.module('MAAS').factory(\n    'DiscoveriesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'PollingManager',\n    function($q, $rootScope, RegionConnection, PollingManager) {\n\n        function DiscoveriesManager() {\n            PollingManager.call(this);\n\n            this._pk = \"first_seen\";\n            this._batchKey = \"first_seen\";\n            this._handler = \"discovery\";\n\n            // Poll every 10 seconds when its empty as its okay for\n            // this to be empty.\n            this._pollEmptyTimeout = 5000;\n        }\n\n        DiscoveriesManager.prototype = new PollingManager();\n\n        return new DiscoveriesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domain Manager\n *\n * Manages all of the domains in the browser. The manager uses the\n * RegionConnection to load the domains, update the domains, and listen for\n * notification events about domains.\n */\n\nangular.module('MAAS').factory(\n    'DomainsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function DomainsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"domain\";\n\n            // Listen for notify events for the domain object.\n            var self = this;\n            RegionConnection.registerNotifier(\"domain\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        DomainsManager.prototype = new Manager();\n\n        // Create a domain.\n        DomainsManager.prototype.create = function(domain) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"domain.create\", domain);\n        };\n\n        // Delete the domain.\n        DomainsManager.prototype.deleteDomain = function(domain) {\n            return RegionConnection.callMethod(\"domain.delete\", domain);\n        };\n\n        // Create a DNS record.\n        DomainsManager.prototype.createDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.create_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.create_dnsdata\", record);\n            }\n        };\n\n        // Update a DNS record.\n        DomainsManager.prototype.updateDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.update_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.update_dnsdata\", record);\n            }\n        };\n\n        // Delete a DNS record.\n        DomainsManager.prototype.deleteDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.delete_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.delete_dnsdata\", record);\n            }\n        };\n\n        DomainsManager.prototype.getDefaultDomain = function() {\n            if(this._items.length === 0) {\n                return null;\n            } else {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].id === 0) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return this._items[0];\n        };\n\n        DomainsManager.prototype.getDomainByName = function(name) {\n            if(this._items.length > 0) {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].name === name) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return null;\n        };\n\n        return new DomainsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Event Manager Factory\n *\n * Manages all of the events for a node in the browser. The manager uses the\n * RegionConnection to load the events and listen for event notifications.\n */\n\nangular.module('MAAS').factory(\n    'EventsManagerFactory',\n    ['RegionConnection', 'Manager', 'ErrorService',\n    function(RegionConnection, Manager, ErrorService) {\n\n        function EventsManager(nodeId, factory) {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"event\";\n            this._nodeId = nodeId;\n            this._factory = factory;\n            this._maxDays = 1;\n        }\n\n        EventsManager.prototype = new Manager();\n\n        // Return the initial batch parameters with the id of the node\n        // and the maximum number of days to load.\n        EventsManager.prototype._initBatchLoadParameters = function() {\n            return {\n                \"node_id\": this._nodeId,\n                \"max_days\": this._maxDays\n            };\n        };\n\n        // Destroys its self. Removes self from the EventsManagerFactory.\n        EventsManager.prototype.destroy = function(){\n            this._factory.destroyManager(this);\n\n            // If this manager has ever loaded then the region is sending\n            // events about this node. Tell the RegionConnection not to\n            // stop sending notification for events from this node.\n            if(this.isLoaded()) {\n                RegionConnection.callMethod(\"event.clear\", {\n                    node_id: this._nodeId\n                });\n            }\n        };\n\n        // Get the maximum number of days the manager will load.\n        EventsManager.prototype.getMaximumDays = function() {\n            return this._maxDays;\n        };\n\n        // Changes the maximum number of days to load and loads the items.\n        EventsManager.prototype.loadMaximumDays = function(days) {\n            var self = this;\n            var setMaximumDays = function() {\n                self._maxDays = days;\n                self.loadItems();\n            };\n\n            if(this.isLoading()) {\n                // Call loadItems to get an extra defer to know when\n                // the loading is done.\n                this.loadItems().then(function() {\n                    setMaximumDays();\n                });\n            } else {\n                setMaximumDays();\n            }\n        };\n\n        // Factory that holds all created EventsManagers.\n        function EventsManagerFactory() {\n            // Holds a list of all EventsManager that have been created.\n            this._managers = [];\n\n            // Listen for notify events for the event object.\n            var self = this;\n            RegionConnection.registerNotifier(\"event\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        // Gets the EventManager for the nodes with node_id.\n        EventsManagerFactory.prototype._getManager = function(nodeId) {\n            var i;\n            for(i = 0; i < this._managers.length; i++) {\n                if(this._managers[i]._nodeId === nodeId) {\n                    return this._managers[i];\n                }\n            }\n            return null;\n        };\n\n        // Gets the EventManager for the nodes node_id. Creates a new manager\n        // if one does not exist.\n        EventsManagerFactory.prototype.getManager = function(nodeId) {\n            var manager = this._getManager(nodeId);\n            if(!angular.isObject(manager)) {\n                // Not created so create it.\n                manager = new EventsManager(nodeId, this);\n                this._managers.push(manager);\n                return manager;\n            }\n            return manager;\n        };\n\n        // Destroy the EventManager.\n        EventsManagerFactory.prototype.destroyManager = function(manager) {\n            var idx = this._managers.indexOf(manager);\n            if(idx >= 0) {\n                this._managers.splice(idx, 1);\n            }\n        };\n\n        // Called when the RegionConnection gets a notification for an event.\n        EventsManagerFactory.prototype.onNotify = function(action, data) {\n            if(action === \"delete\") {\n                // Send all delete actions to all managers. Only one will\n                // remove the event with the given id.\n                angular.forEach(this._managers, function(manager) {\n                    manager.onNotify(action, data);\n                });\n            } else if (action === \"create\" || action === \"update\") {\n                // Get the manager based on the node_id in data, and send\n                // it the notification.\n                var manager = this._getManager(data.node_id);\n                if(angular.isObject(manager)) {\n                    manager.onNotify(action, data);\n                }\n            }\n        };\n\n        return new EventsManagerFactory();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Fabric Manager\n *\n * Manages all of the fabrics in the browser. The manager uses the\n * RegionConnection to load the fabrics, update the fabrics, and listen for\n * notification events about fabrics.\n */\n\nangular.module('MAAS').factory(\n    'FabricsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'VLANsManager',\n    function(\n    $q, $rootScope, RegionConnection, Manager, VLANsManager) {\n\n        function FabricsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"fabric\";\n\n            // Listen for notify events for the fabric object.\n            var self = this;\n            RegionConnection.registerNotifier(\"fabric\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        FabricsManager.prototype = new Manager();\n\n        // Given a Fabric object, returns its display name.\n        FabricsManager.prototype.getName = function(fabric) {\n            if(!angular.isObject(fabric)) {\n                return;\n            }\n            if(angular.isString(fabric.name)) {\n                return fabric.name;\n            } else {\n                return this._handler + \"-\" + fabric[this._pk];\n            }\n        };\n\n        // Delete the Fabric.\n        FabricsManager.prototype.deleteFabric = function(fabric) {\n            return RegionConnection.callMethod(\n                \"fabric.delete\", { \"id\": fabric.id }, true);\n        };\n\n        // Create a Fabric.\n        FabricsManager.prototype.create = function(fabric) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"fabric.create\", fabric);\n        };\n\n\n        return new FabricsManager();\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS General Manager\n *\n * Manager for general information from the region. The general handler on the\n * region side does not push information to the client. This manager uses\n * polling to grab this data periodically from the region.\n *\n * This manage provides different pieces of data and is structure differently\n * than extending the Manager service. It still provides the Manager service\n * interface allowing the ManagerHelperService to load this manager.\n */\n\nangular.module('MAAS').factory(\n    'GeneralManager',\n    ['$q', '$timeout', 'RegionConnection', 'ErrorService',\n    function($q, $timeout, RegionConnection, ErrorService) {\n\n        // Constructor\n        function GeneralManager() {\n            // Holds the available endpoints and its data.\n            this._data = {\n                machine_actions: {\n                    method: \"general.machine_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                device_actions: {\n                    method: \"general.device_actions\",\n                    data: [],\n                    request: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                region_controller_actions: {\n                    method: \"general.region_controller_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                rack_controller_actions: {\n                    method: \"general.rack_controller_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                region_and_rack_controller_actions: {\n                    method: \"general.region_and_rack_controller_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                architectures: {\n                    method: \"general.architectures\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                known_architectures: {\n                    method: \"general.known_architectures\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                pockets_to_disable: {\n                    method: \"general.pockets_to_disable\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                components_to_disable: {\n                    method: \"general.components_to_disable\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                hwe_kernels: {\n                    method: \"general.hwe_kernels\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                min_hwe_kernels: {\n                    method: \"general.min_hwe_kernels\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                default_min_hwe_kernel: {\n                    method: \"general.default_min_hwe_kernel\",\n                    data: { text: '' },\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        oldData.text = newData;\n                    }\n                },\n                osinfo: {\n                    method: \"general.osinfo\",\n                    data: {},\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    isEmpty: function(data) {\n                        var osystems = data.osystems;\n                        return (angular.isUndefined(osystems) ||\n                            osystems.length === 0);\n                    },\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                },\n                bond_options: {\n                    method: \"general.bond_options\",\n                    data: {},\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                },\n                version: {\n                    method: \"general.version\",\n                    data: { text: null },\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        oldData.text = newData;\n                    }\n                },\n                power_types: {\n                    method: \"general.power_types\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        // Add new power types.\n                        var i, j, newPowerType, oldPowerType;\n                        for(i = 0; i < newData.length; i++) {\n                            newPowerType = newData[i];\n                            var newItem = true;\n                            for(j = 0; j < oldData.length; j++) {\n                                oldPowerType = oldData[j];\n                                if(newPowerType.name === oldPowerType.name) {\n                                    newItem = false;\n                                    break;\n                                }\n                            }\n\n                            // Item was previously not in the list so it is\n                            // inserted into the array.\n                            if(newItem) {\n                                oldData.push(newPowerType);\n                            }\n                        }\n\n                        // Remove any power types that are not included in\n                        // the newData.\n                        for(i = oldData.length - 1; i >= 0; i--) {\n                            oldPowerType = oldData[i];\n                            var found = false;\n                            for(j = 0; j < newData.length; j++) {\n                                newPowerType = newData[j];\n                                if(newPowerType.name === oldPowerType.name) {\n                                    found = true;\n                                    break;\n                                }\n                            }\n\n                            // Item was previously not in the list so it is\n                            // inserted into the array.\n                            if(!found) {\n                                oldData.splice(i, 1);\n                            }\n                        }\n                    }\n                },\n                release_options: {\n                    method: \"general.release_options\",\n                    data: {},\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                }\n            };\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 3000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n\n            // Set to true when the items list should reload upon re-connection\n            // to the region.\n            this._autoReload = false;\n\n            // Use the same notify type as a default manager.\n            this._type = 'notify';\n\n            // The scopes that have loaded this manager.\n            this._scopes = [];\n        }\n\n        GeneralManager.prototype._getInternalData = function(name) {\n            var data = this._data[name];\n            if(angular.isUndefined(data)) {\n                throw new Error(\"Unknown data: \" + name);\n            }\n            return data;\n        };\n\n        // Return loaded data.\n        GeneralManager.prototype.getData = function(name) {\n            var d = this._getInternalData(name);\n            d.requested = true;\n            return d.data;\n        };\n\n        // Return true when all data has been loaded.\n        GeneralManager.prototype.isLoaded = function() {\n            var loaded = true;\n            angular.forEach(this._data, function(data) {\n                if(!data.loaded) {\n                    loaded = false;\n                }\n            });\n            return loaded;\n        };\n\n        // Return true when data has been loaded.\n        GeneralManager.prototype.isDataLoaded = function(name) {\n            return this._getInternalData(name).loaded;\n        };\n\n        // Returns true when the manager is currently polling.\n        GeneralManager.prototype.isPolling = function() {\n            var polling = false;\n            angular.forEach(this._data, function(data) {\n                if(data.polling.length > 0) {\n                    polling = true;\n                }\n            });\n            return polling;\n        };\n\n        // Returns true when the manager is currently polling for that data.\n        GeneralManager.prototype.isDataPolling = function(name) {\n            return this._getInternalData(name).polling;\n        };\n\n        // Starts the manager polling for data.\n        GeneralManager.prototype.startPolling = function(scope, name) {\n            var data = this._getInternalData(name);\n            var idx = data.polling.indexOf(scope);\n            if(idx === -1) {\n                data.polling.push(scope);\n                if(data.polling.length === 1) {\n                    // Polling needs to be started. This is the first scope\n                    // that is requesting for polling to be performed.\n                    this._poll(data);\n                }\n            }\n        };\n\n        // Stops the manager polling for data.\n        GeneralManager.prototype.stopPolling = function(scope, name) {\n            var data = this._getInternalData(name);\n            var idx = data.polling.indexOf(scope);\n            if(idx >= 0) {\n                data.polling.splice(idx, 1);\n            }\n            if(data.polling.length === 0 &&\n                angular.isObject(data.nextPromise)) {\n                $timeout.cancel(data.nextPromise);\n                data.nextPromise = null;\n            }\n        };\n\n        // Load the data from the region.\n        GeneralManager.prototype._loadData = function(data, raiseError) {\n            var replaceData = data.replaceData;\n            raiseError = raiseError || false;\n\n            // Set default replaceData function if data doesn't provide its\n            // own function.\n            if(angular.isUndefined(replaceData)) {\n                replaceData = function(oldData, newData) {\n                    oldData.length = 0;\n                    oldData.push.apply(oldData, newData);\n                };\n            }\n\n            return RegionConnection.callMethod(data.method).then(\n                function(newData) {\n                    replaceData(data.data, newData);\n                    data.loaded = true;\n                    return data.data;\n                }, function(error) {\n                    if(raiseError) {\n                        ErrorService.raiseError(error);\n                    }\n                    return error;\n                });\n        };\n\n        GeneralManager.prototype._pollAgain = function(data, timeout) {\n            var self = this;\n            data.nextPromise = $timeout(function() {\n                self._poll(data);\n            }, timeout);\n        };\n\n        // Polls for the data from the region.\n        GeneralManager.prototype._poll = function(data) {\n            var self = this;\n            var isEmpty = data.isEmpty;\n\n            // Set default isEmpty function if data doesn't provide its\n            // own function.\n            if(angular.isUndefined(isEmpty)) {\n                isEmpty = function(data) {\n                    return data.length === 0;\n                };\n            }\n\n            // Can only poll if connected.\n            if(!RegionConnection.isConnected()) {\n                this._pollAgain(data, this._pollErrorTimeout);\n                return;\n            }\n\n            return this._loadData(data, false).then(function(newData) {\n                var pollTimeout = self._pollTimeout;\n                if(isEmpty(data.data)) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(data, pollTimeout);\n                return newData;\n            }, function(error) {\n                // Don't raise the error, just log it and try again.\n                console.log(error);\n                self._pollAgain(data, self._pollErrorTimeout);\n            });\n        };\n\n        // Loads all the items. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest. Optionally pass a\n        // list of specific items to load. Useful when reloading data.\n        GeneralManager.prototype.loadItems = function(items) {\n            var self = this;\n            var defer = $q.defer();\n            var waitingCount = 0;\n            if(angular.isArray(items)) {\n                waitingCount = items.length;\n            }else{\n                angular.forEach(this._data, function(data) {\n                    if(data.requested) {\n                        waitingCount++;\n                    }\n                });\n            }\n            var done = function() {\n                waitingCount -= 1;\n                if(waitingCount === 0) {\n                    defer.resolve();\n                }\n            };\n\n            angular.forEach(this._data, function(data, name) {\n                if((angular.isArray(items) && items.indexOf(name) !== -1) ||\n                        (!angular.isArray(items) && data.requested)) {\n                    self._loadData(data, true).then(function() {\n                        done();\n                    });\n                }\n            });\n\n            return defer.promise;\n        };\n\n        // Enables auto reloading of the item list on connection to region.\n        GeneralManager.prototype.enableAutoReload = function() {\n            if(!this._autoReload) {\n                this._autoReload = true;\n                var self = this;\n                this._reloadFunc = function() {\n                    self.loadItems();\n                };\n                RegionConnection.registerHandler(\"open\", this._reloadFunc);\n            }\n        };\n\n        // Disable auto reloading of the item list on connection to region.\n        GeneralManager.prototype.disableAutoReload = function() {\n            if(this._autoReload) {\n                RegionConnection.unregisterHandler(\"open\", this._reloadFunc);\n                this._reloadFunc = null;\n                this._autoReload = false;\n            }\n        };\n\n        return new GeneralManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS IPRange Manager\n *\n * Manages all of the IPRanges in the browser. The manager uses the\n * RegionConnection to load the IPRanges, update the IPRanges, and listen for\n * notification events about IPRanges.\n */\n\nangular.module('MAAS').factory(\n    'IPRangesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function IPRangesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"iprange\";\n\n            // Listen for notify events for the iprange object.\n            var self = this;\n            RegionConnection.registerNotifier(\"iprange\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        IPRangesManager.prototype = new Manager();\n\n        return new IPRangesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Machines Manager\n *\n * Manages all of the machines in the browser. This manager is used for the\n * machine listing and view pages. The manager is a subclass of NodesManager.\n */\n\nangular.module('MAAS').factory(\n    'MachinesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function MachinesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"machine\";\n\n            this._metadataAttributes = {\n                \"architecture\": null,\n                \"status\": null,\n                \"owner\": null,\n                \"tags\": null,\n                \"pod\": function(machine) {\n                    return (machine.pod === undefined) ? '' :machine.pod.name;\n                },\n                \"pool\": function(machine) {\n                    return machine.pool.name;\n                },\n                \"zone\": function(machine) {\n                    return machine.zone.name;\n                },\n                \"subnets\": null,\n                \"fabrics\": null,\n                \"spaces\": null,\n                \"storage_tags\": null,\n                \"release\": function(machine) {\n                    if(machine.status_code === 6 || machine.status_code === 9) {\n                        return machine.osystem + \"/\" + machine.distro_series;\n                    } else {\n                        return '';\n                    }\n                }\n            };\n\n            // Listen for notify events for the machine object.\n            var self = this;\n            RegionConnection.registerNotifier(\"machine\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n\n        }\n        MachinesManager.prototype = new NodesManager();\n\n        MachinesManager.prototype.mountSpecialFilesystem =\n            function(machine, fstype, mount_point, mount_options) {\n                var method = this._handler + \".mount_special\";\n                var params = {\n                    system_id: machine.system_id,\n                    fstype: fstype,\n                    mount_point: mount_point,\n                    mount_options: mount_options\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        MachinesManager.prototype.unmountSpecialFilesystem =\n            function(machine, mount_point) {\n                var method = this._handler + \".unmount_special\";\n                var params = {\n                    system_id: machine.system_id,\n                    mount_point: mount_point\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        return new MachinesManager();\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS NodeResultsManager Manager\n *\n * Manages all of the NodeResults in the browser. The manager uses the\n * RegionConnection to load the NodeResults, and listen for\n * notification events about NodeResults.\n */\n\nangular.module('MAAS').factory(\n    'NodeResultsManagerFactory', ['RegionConnection', 'Manager',\n    function(RegionConnection, Manager) {\n\n        function NodeResultsManager(node, factory) {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"noderesult\";\n            this._node = node;\n            this._factory = factory;\n\n            // Store as an array to preserve order.\n            this.commissioning_results = [\n                {\n                    title: null,\n                    hardware_type: 0,\n                    results: {}\n                },\n                {\n                    title: \"CPU\",\n                    hardware_type: 1,\n                    results: {}\n                },\n                {\n                    title: \"Memory\",\n                    hardware_type: 2,\n                    results: {}\n                },\n                {\n                    title: \"Storage\",\n                    hardware_type: 3,\n                    results: {}\n                }\n            ];\n            this.testing_results = [\n                {\n                    title: \"CPU\",\n                    hardware_type: 1,\n                    results: {}\n                },\n                {\n                    title: \"Memory\",\n                    hardware_type: 2,\n                    results: {}\n                },\n                {\n                    title: \"Storage\",\n                    hardware_type: 3,\n                    results: {}\n                },\n                {\n                    title: \"Other Results\",\n                    hardware_type: 0,\n                    results: {}\n                }\n            ];\n            this.installation_results = [];\n\n            // Listen for notify events for the ScriptResult object.\n            // This is noderesult instead of scriptresult because the\n            // class name is NodeResultHandler.\n            var self = this;\n            RegionConnection.registerNotifier(\"noderesult\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        NodeResultsManager.prototype = new Manager();\n\n        NodeResultsManager.prototype._getStorageSubtext = function(disk) {\n            var deviceinfo = '';\n            if(disk.model !== '') {\n                deviceinfo += \"Model: \" + disk.model;\n            }\n            if(disk.serial !== '') {\n                if(deviceinfo !== '') {\n                    deviceinfo += ', ';\n                }\n                deviceinfo += \"Serial: \" + disk.serial;\n            }\n            if(deviceinfo !== '') {\n                return '/dev/' + disk.name + ' (' + deviceinfo + ')';\n            }else{\n                return '/dev/' + disk.name;\n            }\n        };\n\n        NodeResultsManager.prototype._updateObject = function(\n            existing, updated) {\n            angular.forEach(updated, function(value, key) {\n                if(existing[key] !== value && key !== 'showing_results' &&\n                   key !== 'showing_history' && key !== 'showing_menu' &&\n                   key !== '$selected') {\n                    existing[key] = value;\n                }\n            });\n        };\n\n        NodeResultsManager.prototype._addOrReplace = function(results, result) {\n            var i;\n            for(i = 0; i < results.length; i++) {\n                if(results[i].name === result.name) {\n                    // Object already exists, update fields.\n                    result.$selected = results[i].$selected;\n                    result.showing_results = results[i].showing_results;\n                    result.showing_history = results[i].showing_history;\n                    result.showing_menu = results[i].showing_menu;\n                    angular.copy(result, results[i]);\n                    return;\n                }\n            }\n            // No result with the same name exists, add it to the sorted list.\n            for(i = 0; i < results.length; i++) {\n                if(results[i].name > result.name) {\n                    results.splice(i, 0, result);\n                    return;\n                }\n            }\n            results.push(result);\n        };\n\n        NodeResultsManager.prototype._processItem = function(result) {\n            var results;\n            result.showing_results = false;\n            result.showing_history = false;\n            result.showing_menu = false;\n            result.result_section = \"scripts\";\n\n            if(result.result_type === 0) {\n                results = this.commissioning_results;\n            } else if(result.result_type === 1) {\n                // Installation results are not split into hardware types or\n                // have subtext labels.\n                this._addOrReplace(this.installation_results, result);\n                return;\n            } else {\n                // Store all remaining result types as test results in case\n                // another result type is ever added.\n                results = this.testing_results;\n                result.result_section = \"tests\";\n            }\n            var i;\n            // Fallback to storing results in other results incase a new type\n            // is added\n            var hardware_type_results = results[3];\n            for(i = 0; i < results.length; i++) {\n                if(results[i].hardware_type === result.hardware_type) {\n                    hardware_type_results = results[i].results;\n                    break;\n                }\n            }\n\n            if(result.hardware_type === 3 &&\n               result.physical_blockdevice !== null) {\n                // Storage results are split into individual components.\n                var disk, subtext;\n                // If the storage result is associated with a specific\n                // component generate subtext for that component.\n                for(i = 0; i < this._node.disks.length; i++) {\n                    disk = this._node.disks[i];\n                    if(disk.id === result.physical_blockdevice) {\n                        subtext = this._getStorageSubtext(disk);\n                        if(!angular.isArray(\n                            hardware_type_results[subtext])) {\n                                hardware_type_results[subtext] = [];\n                        }\n                        this._addOrReplace(\n                            hardware_type_results[subtext], result);\n                        break;\n                    }\n                }\n            } else {\n                // Other hardware types are not split into individual\n                // components.\n                if(!angular.isArray(hardware_type_results[null])) {\n                    hardware_type_results[null] = [];\n                }\n                this._addOrReplace(hardware_type_results[null], result);\n            }\n        };\n\n        NodeResultsManager.prototype._removeItem = function(result) {\n            var idx = this._getIndexOfItem(this._items, result.id);\n            if(idx >= 0) {\n                this._updateMetadata(this._items[idx], \"delete\");\n            }\n            this._removeItemByIdFromArray(this._items, result.id);\n            this._removeItemByIdFromArray(this._selectedItems, result.id);\n\n            var self = this;\n            angular.forEach(this.commissioning_results, function(hw_type) {\n                angular.forEach(hw_type.results, function(results, subtext) {\n                    self._removeItemByIdFromArray(results, result.id);\n                    if(results.length === 0)\n                    {\n                        delete hw_type.results[subtext];\n                    }\n                });\n            });\n            angular.forEach(this.testing_results, function(hw_type) {\n                angular.forEach(hw_type.results, function(results, subtext) {\n                    self._removeItemByIdFromArray(results, result.id);\n                    if(results.length === 0)\n                    {\n                        delete hw_type.results[subtext];\n                    }\n                });\n            });\n            this._removeItemByIdFromArray(this.installation_results, result.id);\n        };\n\n        // Return the list of ScriptResults for the given node when retrieving\n        // the initial list.\n        NodeResultsManager.prototype._initBatchLoadParameters = function() {\n            var ret = {\n                \"system_id\": this._node.system_id\n            };\n            // Limit the results returned to what can be viewed.\n            if(this._area === \"summary\") {\n                ret.has_surfaced = true;\n                ret.result_type = 2;\n            }else if(this._area === \"testing\") {\n                ret.result_type = 2;\n            }else if(this._area === \"commissioning\") {\n                ret.result_type = 0;\n            }else if(this._area === \"logs\") {\n                ret.result_type = 1;\n            }\n            return ret;\n        };\n\n        // Destroys itself. Removes self from the NodeResultsManagerFactory.\n        NodeResultsManager.prototype.destroy = function() {\n            this._factory.destroyManager(this);\n\n            // If this manager has ever loaded then the region is sending\n            // results from this node. Tell the RegionConnection to stop.\n            if(this.isLoaded()) {\n                var method = this._handler + \".clear\";\n                RegionConnection.callMethod(method, {\n                    system_id: this._node.system_id\n                });\n            }\n        };\n\n        // Get result data.\n        NodeResultsManager.prototype.get_result_data = function(\n            script_id, data_type) {\n            var method = this._handler + \".get_result_data\";\n            var params = {\n                id: script_id,\n                data_type: data_type\n            };\n            return RegionConnection.callMethod(method, params);\n        };\n\n        // Get historic data.\n        NodeResultsManager.prototype.get_history = function(script_id) {\n            var method = this._handler + \".get_history\";\n            var params = {\n                id: script_id,\n            };\n            return RegionConnection.callMethod(method, params);\n        };\n\n        // Factory that holds all created NodeResultsManagers.\n        function NodeResultsManagerFactory() {\n            // Holds a list of all NodeResultsManagers that have been created.\n            this._managers = [];\n        }\n\n        // Gets the NodeResultsManager for the nodes with node_system_id.\n        NodeResultsManagerFactory.prototype._getManager = function(node) {\n            var i;\n            for(i = 0; i < this._managers.length; i++) {\n                if(this._managers[i]._node.system_id === node.system_id) {\n                    return this._managers[i];\n                }\n            }\n            return null;\n        };\n\n        // Gets the NodeResultsManager for the nodes system_id. Creates a new\n        // manager if one does not exist.\n        NodeResultsManagerFactory.prototype.getManager = function(\n            node, area) {\n            var manager = this._getManager(node);\n            if(!angular.isObject(manager)) {\n                // Not created so create it.\n                manager = new NodeResultsManager(node, this);\n                this._managers.push(manager);\n            }\n            manager._area = area;\n            if(area === \"commissioning\") {\n                manager.results = manager.commissioning_results;\n            }else if(area === \"logs\") {\n                manager.results = manager.installation_results;\n            }else{\n                manager.results = manager.testing_results;\n            }\n            return manager;\n        };\n\n        // Destroy the NodeResultsManager.\n        NodeResultsManagerFactory.prototype.destroyManager = function(manager) {\n            var idx = this._managers.indexOf(manager);\n            if(idx >= 0) {\n                this._managers.splice(idx, 1);\n            }\n        };\n\n        return new NodeResultsManagerFactory();\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Manager\n *\n * Manages all of the nodes in the browser. This manager is used for the\n * machine and controller listing and view pages (as machines and controllers\n * are both Nodes).  The manager uses the RegionConnection to load the nodes,\n * update the nodes, and listen for notification events about nodes.\n */\n\nangular.module('MAAS').service(\n    'NodesManager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, $timeout, RegionConnection, Manager) {\n\n        function NodesManager() {\n            Manager.call(this);\n        }\n\n        NodesManager.prototype = new Manager();\n\n        // Create a node.\n        NodesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the node to the list. Adding it here will cause angular\n            // to complain because the same object exist in the list.\n            return RegionConnection.callMethod(\n                this._handler + \".create\", node);\n        };\n\n        // Perform the action on the node.\n        NodesManager.prototype.performAction = function(\n            node, action, extra) {\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(this._handler + \".action\", {\n                \"system_id\": node.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        // Check the power state for the node.\n        NodesManager.prototype.checkPowerState = function(node) {\n            return RegionConnection.callMethod(this._handler + \".check_power\", {\n                \"system_id\": node.system_id\n                }).then(function(state) {\n                    node.power_state = state;\n                    return state;\n                }, function(error) {\n                    node.power_state = \"error\";\n\n                    // Already been logged server side, but log it client\n                    // side so if they really care they can see why.\n                    console.log(error);\n\n                    // Return the state as error to the remaining callbacks.\n                    return \"error\";\n                });\n        };\n\n        // Create the physical interface on the node.\n        NodesManager.prototype.createPhysicalInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_physical\", params);\n            };\n\n        // Create the VLAN interface on the node.\n        NodesManager.prototype.createVLANInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_vlan\", params);\n            };\n\n        // Create the bond interface on the node.\n        NodesManager.prototype.createBondInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bond\", params);\n            };\n\n        // Create the bridge interface on the node.\n        NodesManager.prototype.createBridgeInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bridge\", params);\n            };\n\n        // Update the interface for the node.\n        NodesManager.prototype.updateInterface = function(\n            node, interface_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.interface_id = interface_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".update_interface\", params);\n            };\n\n        // Update an interface from a maas-obj-form.\n        NodesManager.prototype.updateInterfaceForm = function(\n            params) {\n                return RegionConnection.callMethod(\n                    this._handler + \".update_interface\", params);\n            };\n\n        // Delete the interface for the node.\n        NodesManager.prototype.deleteInterface = function(\n            node, interface_id) {\n                var params = {\n                    system_id: node.system_id,\n                    interface_id: interface_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".delete_interface\", params);\n            };\n\n        // Create or update the link to the subnet for the interface.\n        NodesManager.prototype.linkSubnet = function(\n            node, interface_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.interface_id = interface_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".link_subnet\", params);\n            };\n\n        // Remove the link to the subnet for the interface.\n        NodesManager.prototype.unlinkSubnet = function(\n            node, interface_id, link_id) {\n                var params = {\n                    system_id: node.system_id,\n                    interface_id: interface_id,\n                    link_id: link_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".unlink_subnet\", params);\n            };\n\n        // Send the update information to the region.\n        NodesManager.prototype.updateFilesystem = function(\n            node, block_id, partition_id, fstype, mount_point, mount_options,\n            tags) {\n                var self = this;\n                var method = this._handler + \".update_filesystem\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id,\n                    partition_id: partition_id,\n                    fstype: fstype,\n                    mount_point: mount_point,\n                    mount_options: mount_options,\n                    tags: tags\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the disk.\n        NodesManager.prototype.deleteDisk = function(\n            node, block_id) {\n                var self = this;\n                var method = this._handler + \".delete_disk\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the partition.\n        NodesManager.prototype.deletePartition = function(\n            node, partition_id) {\n                var self = this;\n                var method = this._handler + \".delete_partition\";\n                var params = {\n                    system_id: node.system_id,\n                    partition_id: partition_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the disk or partition.\n        NodesManager.prototype.deleteVolumeGroup = function(\n            node, volume_group_id) {\n                var self = this;\n                var method = this._handler + \".delete_volume_group\";\n                var params = {\n                    system_id: node.system_id,\n                    volume_group_id: volume_group_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete a cache set.\n        NodesManager.prototype.deleteCacheSet = function(\n            node, cache_set_id) {\n                var self = this;\n                var method = this._handler + \".delete_cache_set\";\n                var params = {\n                    system_id: node.system_id,\n                    cache_set_id: cache_set_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete a filesystem.\n        NodesManager.prototype.deleteFilesystem = function(\n            node, blockdevice_id, partition_id, filesystem_id) {\n                var self = this;\n                var method = this._handler + \".delete_filesystem\";\n                var params = {\n                    system_id: node.system_id,\n                    blockdevice_id: blockdevice_id,\n                    partition_id: partition_id,\n                    filesystem_id: filesystem_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new partition.\n        NodesManager.prototype.createPartition = function(\n            node, block_id, size, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                var self = this;\n                var method = this._handler + \".create_partition\";\n                params.system_id = node.system_id;\n                params.block_id = block_id;\n                params.partition_size = size;\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new cache set.\n        NodesManager.prototype.createCacheSet = function(\n            node, block_id, partition_id) {\n                var self = this;\n                var method = this._handler + \".create_cache_set\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id,\n                    partition_id: partition_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new bcache device.\n        NodesManager.prototype.createBcache = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bcache\", params);\n            };\n\n        // Create a new RAID device.\n        NodesManager.prototype.createRAID = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_raid\", params);\n            };\n\n        // Create a new volume group.\n        NodesManager.prototype.createVolumeGroup = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_volume_group\", params);\n            };\n\n        // Create a new logical volume.\n        NodesManager.prototype.createLogicalVolume = function(\n            node, volume_group_id, name, size, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                var self = this;\n                var method = this._handler + \".create_logical_volume\";\n                params.system_id = node.system_id;\n                params.volume_group_id = volume_group_id;\n                params.name = name;\n                params.size = size;\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Update a disk.\n        NodesManager.prototype.updateDisk = function(\n            node, block_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.block_id = block_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".update_disk\", params);\n            };\n\n        // Set disk as the boot disk.\n        NodesManager.prototype.setBootDisk = function(\n            node, block_id) {\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".set_boot_disk\", params);\n            };\n\n        NodesManager.prototype.getSummaryXML = function(node) {\n            return RegionConnection.callMethod(\n                this._handler + \".get_summary_xml\",\n                {\"system_id\": node.system_id});\n        };\n\n        NodesManager.prototype.getSummaryYAML = function(node) {\n            return RegionConnection.callMethod(\n                this._handler + \".get_summary_yaml\",\n                {\"system_id\": node.system_id});\n        };\n\n        return NodesManager;\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Notifications Manager.\n *\n * Manages notifications in the browser. Uses RegionConnection to load\n * notifications, await new, updated, and deleted notifications, and to\n * dismiss them.\n */\n\nangular.module('MAAS').factory(\n    'NotificationsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n     function($q, $rootScope, RegionConnection, Manager) {\n\n        function NotificationsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"notification\";\n\n            // Listen for notify events for the notification object.\n            RegionConnection.registerNotifier(\n                \"notification\", angular.bind(this, this.onNotify));\n        }\n\n        NotificationsManager.prototype = new Manager();\n        NotificationsManager.prototype.dismiss = function(notification) {\n            return RegionConnection.callMethod(\n                \"notification.dismiss\", {id: notification.id});\n        };\n\n        return new NotificationsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS PackageRepositories Manager\n *\n * Manages all of the PackageRepositories in the browser. The manager uses the\n * RegionConnection to load the PackageRepositories, update them, and listen\n * for notification events about them.\n */\n\nangular.module('MAAS').factory(\n    'PackageRepositoriesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function PackageRepositoriesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"packagerepository\";\n\n            // Listen for notify events for the PackageRepository object.\n            var self = this;\n            RegionConnection.registerNotifier(\"packagerepository\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        PackageRepositoriesManager.prototype = new Manager();\n\n        // Create the repository.\n        PackageRepositoriesManager.prototype.create = function(repository) {\n            return RegionConnection.callMethod(\n                this._handler + \".create\", repository, true);\n        };\n\n        return new PackageRepositoriesManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pods Manager\n *\n * Manages all of the pods in the browser. The manager uses the\n * RegionConnection to load the pods, update the pods, and listen for\n * notification events about pods.\n */\n\nangular.module('MAAS').service(\n    'PodsManager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, $timeout, RegionConnection, Manager) {\n\n        function PodsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"pod\";\n\n            // Listen for notify events for the pod object.\n            var self = this;\n            RegionConnection.registerNotifier(\"pod\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        PodsManager.prototype = new Manager();\n\n        // Refresh the pod information\n        PodsManager.prototype.refresh = function(pod) {\n            var self = this;\n            return RegionConnection.callMethod(\"pod.refresh\", pod).then(\n                function(pod) {\n                    self._replaceItem(pod);\n                    return pod;\n                });\n        };\n\n        // Compose a machine in the pod.\n        PodsManager.prototype.compose = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\"pod.compose\", params).then(\n                function(pod) {\n                    self._replaceItem(pod);\n                    return pod;\n                });\n        };\n\n        return new PodsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Region Connection\n *\n * Provides the websocket connection between the client and the MAAS regiond\n * service.\n */\n\nangular.module('MAAS').factory(\n    'RegionConnection',\n    ['$q', '$rootScope', '$timeout', '$window', '$cookies', function(\n        $q, $rootScope, $timeout, $window, $cookies) {\n\n        // Message types\n        var MSG_TYPE = {\n            REQUEST: 0,\n            RESPONSE: 1,\n            NOTIFY: 2\n        };\n\n        // Response types\n        var RESPONSE_TYPE = {\n            SUCCESS: 0,\n            ERROR: 1\n        };\n\n        // Constructor\n        function RegionConnection() {\n            this.callbacks = {};\n            this.requests = {};\n            this.requestId = 0;\n            this.url = null;\n            this.websocket = null;\n            this.connected = false;\n            this.autoReconnect = true;\n            this.retryTimeout = 5000;\n            this.error = null;\n\n            // Defer used for defaultConnect. If defaultConnect is called\n            // quickly only the first one will start the connection. The\n            // remaining will recieve this defer.\n            this.defaultConnectDefer = null;\n\n            // List of functions to call when a WebSocket event occurs. Each\n            // function will get the WebSocket event passed to it.\n            this.handlers = {\n                open: [],\n                error: [],\n                close: []\n            };\n\n            // Object containing a fields with list of functions. When\n            // a NOTIFY message is received it will match the name to a field\n            // in this object. If the field exists in the object the list\n            // of functions will be called with the action and obj_id.\n            this.notifiers = {};\n        }\n\n        // Return a new request id.\n        RegionConnection.prototype.newRequestId = function() {\n            this.requestId += 1;\n            return this.requestId;\n        };\n\n        // Register event handler.\n        RegionConnection.prototype.registerHandler = function (name, func) {\n            if(!angular.isDefined(this.handlers[name])) {\n                throw new Error(\"Invalid handler: \" + name);\n            }\n            if(!angular.isFunction(func)) {\n                throw new Error(\"Requires a function to register a handler.\");\n            }\n            this.handlers[name].push(func);\n        };\n\n        // Unregister event handler.\n        RegionConnection.prototype.unregisterHandler = function (name, func) {\n            if(!angular.isDefined(this.handlers[name])) {\n                throw new Error(\"Invalid handler: \" + name);\n            }\n            var idx = this.handlers[name].indexOf(func);\n            if(idx >= 0) {\n                this.handlers[name].splice(idx, 1);\n            }\n        };\n\n        // Register notification handler.\n        RegionConnection.prototype.registerNotifier = function(name, func) {\n            if(!angular.isFunction(func)) {\n                throw new Error(\"Requires a function to register a notifier.\");\n            }\n            if(angular.isUndefined(this.notifiers[name])) {\n                this.notifiers[name] = [];\n            }\n            this.notifiers[name].push(func);\n        };\n\n        // Unregister notification handler.\n        RegionConnection.prototype.unregisterNotifier = function(name, func) {\n            if(angular.isUndefined(this.notifiers[name])) {\n                return;\n            }\n            var idx = this.notifiers[name].indexOf(func);\n            if(idx >= 0) {\n                this.notifiers[name].splice(idx, 1);\n            }\n        };\n\n        // Return True if currently connected to region.\n        RegionConnection.prototype.isConnected = function() {\n            return this.connected;\n        };\n\n        // Builds the websocket connection.\n        RegionConnection.prototype.buildSocket = function(url) {\n            return new WebSocket(url);\n        };\n\n        // Opens the websocket connection.\n        RegionConnection.prototype.connect = function() {\n            this.url = this._buildUrl();\n            this.autoReconnect = true;\n            this.websocket = this.buildSocket(this.url);\n\n            var self = this;\n            this.websocket.onopen = function(evt) {\n                self.connected = true;\n                angular.forEach(self.handlers.open, function(func) {\n                    func(evt);\n                });\n            };\n            this.websocket.onerror = function(evt) {\n                angular.forEach(self.handlers.error, function(func) {\n                    func(evt);\n                });\n            };\n            this.websocket.onclose = function(evt) {\n                self.connected = false;\n                self.error = \"Unable to connect to: \" + self.url.split(\"?\")[0];\n                angular.forEach(self.handlers.close, function(func) {\n                    func(evt);\n                });\n                if(self.autoReconnect) {\n                    $timeout(function() {\n                        self.connect();\n                    }, self.retryTimeout);\n                }\n            };\n            this.websocket.onmessage = function(evt) {\n                self.onMessage(angular.fromJson(evt.data));\n            };\n        };\n\n        // Closes the websocket connection.\n        RegionConnection.prototype.close = function() {\n            this.autoReconnect = false;\n            this.websocket.close();\n            this.websocket = null;\n        };\n\n        // Return the protocol used for the websocket connection.\n        RegionConnection.prototype._getProtocol = function() {\n            return $window.location.protocol;\n        };\n\n        // Return connection url to websocket from current location and\n        // html options.\n        RegionConnection.prototype._buildUrl = function() {\n            var host = $window.location.hostname;\n            var port = $window.location.port;\n            var path = $window.location.pathname;\n            var proto = 'ws';\n            if (this._getProtocol() === 'https:') {\n                proto = 'wss';\n            }\n\n            // Path and port can be overridden by href and data-websocket-port\n            // in the base element respectively.\n            var base = angular.element(\"base\");\n            if(angular.isDefined(base)) {\n                var newPath = base.attr(\"href\");\n                if(angular.isDefined(newPath)) {\n                    path = newPath;\n                }\n                var newPort = base.data(\"websocket-port\");\n                if(angular.isDefined(newPort)) {\n                    port = newPort;\n                }\n            }\n\n            // Append final '/' if missing from end of path.\n            if(path[path.length - 1] !== '/') {\n                path += '/';\n            }\n\n            // Build the URL. Include the :port only if it has a value.\n            url = proto + \"://\" + host;\n            if(angular.isString(port) && port.length > 0){\n                url += \":\" + port;\n            }\n            url += path + \"ws\";\n\n            // Include the csrftoken in the URL if it's defined.\n            var csrftoken;\n            if(angular.isFunction($cookies.get)) {\n                csrftoken = $cookies.get('csrftoken');\n            } else {\n                csrftoken = $cookies.csrftoken;\n            }\n            if(angular.isDefined(csrftoken)) {\n                url += '?csrftoken=' + encodeURIComponent(csrftoken);\n            }\n\n            return url;\n        };\n\n        // Opens the default websocket connection.\n        RegionConnection.prototype.defaultConnect = function() {\n            // Already been called but the connection has not been completed.\n            if(angular.isObject(this.defaultConnectDefer)) {\n                return this.defaultConnectDefer.promise;\n            }\n\n            // Already connected.\n            var defer;\n            if(this.isConnected()) {\n                // Create a new defer as the defaultConnectDefer would\n                // have already been resolved.\n                defer = $q.defer();\n\n                // Cannot resolve the defer inline as it hasn't been given\n                // back to the caller. It will be called in the next loop.\n                $timeout(defer.resolve);\n                return defer.promise;\n            }\n\n            // Start the connection.\n            var self = this, opened, errored;\n            defer = this.defaultConnectDefer = $q.defer();\n            opened = function(evt) {\n                this.defaultConnectDefer = null;\n                self.unregisterHandler(\"open\", opened);\n                self.unregisterHandler(\"error\", errored);\n                $rootScope.$apply(defer.resolve(evt));\n            };\n            errored = function(evt) {\n                this.defaultConnectDefer = null;\n                self.unregisterHandler(\"open\", opened);\n                self.unregisterHandler(\"error\", errored);\n                $rootScope.$apply(defer.reject(evt));\n            };\n            this.registerHandler(\"open\", opened);\n            this.registerHandler(\"error\", errored);\n            this.connect();\n            return defer.promise;\n        };\n\n        // Called when a message is received.\n        RegionConnection.prototype.onMessage = function(msg) {\n            // Response\n            if(msg.type === MSG_TYPE.RESPONSE) {\n                this.onResponse(msg);\n            // Notify\n            } else if(msg.type === MSG_TYPE.NOTIFY) {\n                this.onNotify(msg);\n            }\n        };\n\n        // Called when a response message is recieved.\n        RegionConnection.prototype.onResponse = function(msg) {\n            // Grab the registered defer from the callbacks list.\n            var defer = this.callbacks[msg.request_id];\n            var remembered_request = this.requests[msg.request_id];\n            if(angular.isDefined(defer)) {\n                if(msg.rtype === RESPONSE_TYPE.SUCCESS) {\n                    // Resolve the defer inside of the digest cycle, so any\n                    // update to an object or collection will trigger a\n                    // watcher.\n                    $rootScope.$apply(defer.resolve(msg.result));\n                } else if(msg.rtype === RESPONSE_TYPE.ERROR) {\n                    // Reject the defer since an error occurred.\n                    if(angular.isObject(remembered_request)) {\n                        $rootScope.$apply(defer.reject({\n                            \"error\": msg.error,\n                            \"request\": remembered_request\n                        }));\n                    } else {\n                        $rootScope.$apply(defer.reject(msg.error));\n                    }\n                }\n                // Remove the defer from the callback list.\n                delete this.callbacks[msg.request_id];\n                delete this.requests[msg.request_id];\n            }\n        };\n\n        // Called when a notify response is recieved.\n        RegionConnection.prototype.onNotify = function(msg) {\n            var handlers = this.notifiers[msg.name];\n            if(angular.isArray(handlers)) {\n                angular.forEach(handlers, function(handler) {\n                    handler(msg.action, msg.data);\n                });\n            }\n        };\n\n        // Call method on the region.\n        RegionConnection.prototype.callMethod = function(\n                method, params, remember) {\n            var defer = $q.defer();\n            var request_id = this.newRequestId();\n            var request = {\n                type: MSG_TYPE.REQUEST,\n                request_id: request_id,\n                method: method,\n                params: params\n            };\n            this.callbacks[request_id] = defer;\n            // If requested, remember what the details of the request were,\n            // so that the controller can refresh its memory.\n            if (remember) {\n                this.requests[request_id] = request;\n            }\n            this.websocket.send(angular.toJson(request));\n            return defer.promise;\n        };\n\n        return new RegionConnection();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Resource Pool Manager\n *\n * Manages all of the resource pools in the browser.\n */\n\nangular.module('MAAS').factory(\n    'ResourcePoolsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n        $q, $rootScope, RegionConnection, Manager) {\n\n        function ResourcePoolsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"resourcepool\";\n\n            // Listen for notify events for the resource pool object.\n            var self = this;\n            RegionConnection.registerNotifier(\n                \"resourcepool\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ResourcePoolsManager.prototype = new Manager();\n\n        // Return the default pool.\n        ResourcePoolsManager.prototype.getDefaultPool = function() {\n            var i;\n            for(i=0;i<this._items.length;i++) {\n                if(this._items[i].id === 0) {\n                    return this._items[i];\n                }\n            }\n        };\n\n        return new ResourcePoolsManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS ScriptsManager Manager\n *\n * Manages all of the Scripts in the browser. The manager uses the\n * RegionConnection to load the Scripts, and listen for notification\n * events about Scripts.\n */\n\nangular.module('MAAS').factory(\n    'ScriptsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function ScriptsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"script\";\n\n            // Listen for notify events for the Script object.\n            var self = this;\n            RegionConnection.registerNotifier(\"script\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ScriptsManager.prototype = new Manager();\n\n        return new ScriptsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Service Manager\n *\n * Manages all of the services for a node in the browser. The manager uses the\n * RegionConnection to load the services and listen for service notifications.\n */\n\nangular.module('MAAS').factory(\n    'ServicesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function ServicesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"service\";\n\n            // Listen for notify events for the service object.\n            var self = this;\n            RegionConnection.registerNotifier(\"service\",\n                function(action, data) {\n                    self.onNotify(action, data);\n            });\n        }\n\n        ServicesManager.prototype = new Manager();\n\n        return new ServicesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Manager\n *\n * Manages all of the spaces in the browser. The manager uses the\n * RegionConnection to load the spaces, update the spaces, and listen for\n * notification events about spaces.\n */\n\nangular.module('MAAS').factory(\n    'SpacesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'SubnetsManager',\n    function($q, $rootScope, RegionConnection, Manager, SubnetsManager) {\n\n        function SpacesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"space\";\n\n            // Listen for notify events for the space object.\n            var self = this;\n            RegionConnection.registerNotifier(\"space\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SpacesManager.prototype = new Manager();\n\n        // Create a space.\n        SpacesManager.prototype.create = function(space) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"space.create\", space);\n        };\n\n\n        // Delete the space.\n        SpacesManager.prototype.deleteSpace = function(space) {\n            return RegionConnection.callMethod(\"space.delete\", space);\n        };\n\n        return new SpacesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS SSHKey Manager\n *\n * Manages all of the SSHKeys in the browser. The manager uses the\n * RegionConnection to load the SSHKeys, update the SSHKeys, and\n * listen for notification events about SSHKeys.\n */\n\nangular.module('MAAS').factory(\n    'SSHKeysManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function SSHKeysManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"sshkey\";\n\n            // Listen for notify events for the sshkey object.\n            var self = this;\n            RegionConnection.registerNotifier(\"sshkey\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SSHKeysManager.prototype = new Manager();\n\n        // Imports SSH keys from a launchpad and github.\n        SSHKeysManager.prototype.importKeys = function(params) {\n            // We don't add the results to the list because a NOTIFY event will\n            // add the ssh key to the list. Adding it here will cause angular\n            // to complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"sshkey.import_keys\", params);\n        };\n\n        return new SSHKeysManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS StaticRoute Manager\n *\n * Manages all of the StaticRoutes in the browser. The manager uses the\n * RegionConnection to load the StaticRoutes, update the StaticRoutes, and\n * listen for notification events about StaticRoutes.\n */\n\nangular.module('MAAS').factory(\n    'StaticRoutesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function StaticRoutesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"staticroute\";\n\n            // Listen for notify events for the staticroute object.\n            var self = this;\n            RegionConnection.registerNotifier(\"staticroute\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        StaticRoutesManager.prototype = new Manager();\n\n        return new StaticRoutesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Subnet Manager\n *\n * Manages all of the subnets in the browser. The manager uses the\n * RegionConnection to load the subnets, update the subnets, and listen for\n * notification events about subnets.\n */\n\nangular.module('MAAS').factory(\n    'SubnetsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function SubnetsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"subnet\";\n\n            // Listen for notify events for the subnet object.\n            var self = this;\n            RegionConnection.registerNotifier(\"subnet\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SubnetsManager.prototype = new Manager();\n\n        // Return the name of the subnet. Will include the name of the subnet\n        // in '(', ')' if it exists and not the same as the cidr.\n        SubnetsManager.prototype.getName = function(subnet) {\n            if(!angular.isObject(subnet)) {\n                return \"\";\n            }\n\n            var name = subnet.cidr;\n            if(angular.isString(subnet.name) &&\n                subnet.name !== \"\" &&\n                subnet.name !== subnet.cidr) {\n                name += \" (\" + subnet.name + \")\";\n            }\n            return name;\n        };\n\n        SubnetsManager.prototype.getLargestRange = function(subnet) {\n            var largest_range = {num_addresses: 0, start: \"\", end: \"\"};\n            angular.forEach(subnet.statistics.ranges, function(iprange) {\n                if(angular.equals(iprange.purpose, [\"unused\"]) &&\n                        iprange.num_addresses > largest_range.num_addresses) {\n                    largest_range = iprange;\n                }\n            });\n            return largest_range;\n        };\n\n        SubnetsManager.prototype.hasDynamicRange = function(subnet) {\n            var i;\n            for(i = 0; i < subnet.statistics.ranges.length ; i++) {\n                var iprange = subnet.statistics.ranges[i];\n                if(iprange.purpose.indexOf(\"dynamic\") !== -1) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Create a subnet.\n        SubnetsManager.prototype.create = function(subnet) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"subnet.create\", subnet);\n        };\n\n        // Delete the subnet.\n        SubnetsManager.prototype.deleteSubnet = function(subnet) {\n            return RegionConnection.callMethod(\"subnet.delete\", {\n                \"id\": subnet.id\n            });\n        };\n\n        // Perform a neighbour discovery scan on the subnet.\n        SubnetsManager.prototype.scanSubnet = function(subnet) {\n            return RegionConnection.callMethod(\"subnet.scan\", {\n                \"id\": subnet.id\n            });\n        };\n\n        return new SubnetsManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Switches Manager\n *\n * Manages all of the switches in the browser. This manager is used for the\n * switches listing and the switches view page. The manager uses the\n * RegionConnection to load the switches, update the switches, and listen for\n * notification events about switches.\n */\n\nangular.module('MAAS').factory(\n    'SwitchesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function SwitchesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"switch\";\n            this._metadataAttributes = {\n                \"owner\": null,\n                \"subnets\": null,\n                \"tags\": null,\n                \"zone\": function(device) {\n                    return device.zone.name;\n                }\n            };\n\n            // Listen for notify events for the switch object.\n            var self = this;\n            RegionConnection.registerNotifier(\"switch\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        SwitchesManager.prototype = new NodesManager();\n\n        // Create a switch.\n        SwitchesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the device to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"switch.create\", node);\n        };\n\n        // Perform the action on the switch.\n        SwitchesManager.prototype.performAction = function(\n            device, action, extra) {\n\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(\"switch.action\", {\n                \"system_id\": device.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        return new SwitchesManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Tag Manager\n *\n * Manages all of the tags in the browser. The manager uses the\n * RegionConnection to load the tags, update the tags, and listen for\n * notification events about tags.\n */\n\nangular.module('MAAS').factory(\n    'TagsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function TagsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"tag\";\n\n            // Listen for notify events for the tag object.\n            var self = this;\n            RegionConnection.registerNotifier(\"tag\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        TagsManager.prototype = new Manager();\n\n        // Helper for autocomplete that will return a string of tags that\n        // contain the query text.\n        TagsManager.prototype.autocomplete = function(query) {\n            var matching = [];\n            angular.forEach(this._items, function(item) {\n                if(item.name.indexOf(query) > -1) {\n                    matching.push(item.name);\n                }\n            });\n            return matching;\n        };\n\n        return new TagsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS User Manager\n *\n * Manages all of the users in the browser. The manager uses the\n * RegionConnection to load the users, update the users, and listen for\n * notification events about users.\n */\n\nangular.module('MAAS').factory(\n    'UsersManager',\n    ['RegionConnection', 'Manager', 'ErrorService',\n    function(RegionConnection, Manager, ErrorService) {\n\n        function UsersManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"user\";\n\n            // Holds the authenticated user for the connection.\n            this._authUser = null;\n\n            // Listen for notify events for the user object.\n            var self = this;\n            RegionConnection.registerNotifier(\"user\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        UsersManager.prototype = new Manager();\n\n        // Get the authenticated user for the connection.\n        UsersManager.prototype.getAuthUser = function() {\n            return this._authUser;\n        };\n\n        // Return true if the authenticated user is super user.\n        UsersManager.prototype.isSuperUser = function() {\n            var authUser = this.getAuthUser();\n            if(!angular.isObject(authUser)) {\n                return false;\n            }\n            return authUser.is_superuser;\n        };\n\n        // Return true if the authenticated user has uploaded at\n        // least one SSH key.\n        UsersManager.prototype.getSSHKeyCount = function() {\n            authuser = this._authUser;\n            if(!angular.isObject(authuser)) {\n                return 0;\n            }\n            return authuser.sshkeys_count;\n        };\n\n        // Load the authenticated user.\n        UsersManager.prototype._loadAuthUser = function() {\n            var self = this;\n            return RegionConnection.callMethod(\"user.auth_user\", {}).then(\n                function(user) {\n                    if(angular.isObject(self._authUser)) {\n                        // Copy the user into the authUser. This keeps the\n                        // reference the same, not requiring another call to\n                        // getAuthUser.\n                        angular.copy(user, self._authUser);\n                    } else {\n                        self._authUser = user;\n                    }\n                    return self._authUser;\n                }, function(error) {\n                    ErrorService.raiseError(error);\n                });\n        };\n\n        UsersManager.prototype._replaceItem = function(item) {\n            Manager.prototype._replaceItem.call(this, item);\n\n            // Update the authenticated user if updated item has the\n            // same primary key.\n            if(angular.isObject(this._authUser) &&\n                this._authUser[this._pk] === item[this._pk]) {\n                // Copy the item into the authUser. This keeps the reference\n                // the same, not requiring another call to getAuthUser.\n                angular.copy(item, this._authUser);\n            }\n        };\n\n        UsersManager.prototype.loadItems = function() {\n            // Load the auth user when all the items are loaded as well.\n            this._loadAuthUser();\n            return Manager.prototype.loadItems.call(this);\n        };\n\n        UsersManager.prototype.reloadItems = function() {\n            // Load the auth user when all the items are reloaded as well.\n            this._loadAuthUser();\n            return Manager.prototype.reloadItems.call(this);\n        };\n\n        // Mark the user as completed the intro.\n        UsersManager.prototype.markIntroComplete = function() {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"user.mark_intro_complete\", {}).then(\n                    function(user) {\n                        if(angular.isObject(self._authUser)) {\n                            // Copy the user into the authUser. This keeps the\n                            // reference the same, not requiring another call\n                            // to getAuthUser.\n                            angular.copy(user, self._authUser);\n                        } else {\n                            self._authUser = user;\n                        }\n                        return self._authUser;\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n        };\n\n        // Create a new authorisation token for the current user.\n        UsersManager.prototype.createAuthorisationToken = function() {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"user.create_authorisation_token\", {}).catch(function(error) {\n                    ErrorService.raiseError(error);\n                });\n        };\n\n        // Delete the authorisation token for the current user.\n        UsersManager.prototype.deleteAuthorisationToken = function(key) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"user.delete_authorisation_token\", {\n                    key: key\n                }).catch(function(error) {\n                    ErrorService.raiseError(error);\n                });\n        };\n\n        return new UsersManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS VLAN Manager\n *\n * Manages all of the VLANs in the browser. The manager uses the\n * RegionConnection to load the VLANs, update the VLANs, and listen for\n * notification events about VLANs.\n */\n\nangular.module('MAAS').factory(\n    'VLANsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'SubnetsManager',\n    function($q, $rootScope, RegionConnection, Manager, SubnetsManager) {\n\n        function VLANsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"vlan\";\n\n            // Listen for notify events for the vlan object.\n            var self = this;\n            RegionConnection.registerNotifier(\"vlan\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        VLANsManager.prototype = new Manager();\n\n        VLANsManager.prototype.getName = function(vlan) {\n            var name = vlan.vid;\n            if(vlan.vid === 0) {\n                name = \"untagged\";\n            } else if(angular.isString(vlan.name) && vlan.name !== \"\") {\n                name += \" (\" + vlan.name + \")\";\n            }\n            return name;\n        };\n\n        // Delete the VLAN.\n        VLANsManager.prototype.deleteVLAN = function(vlan) {\n            return RegionConnection.callMethod(\n                \"vlan.delete\", { \"id\": vlan.id }, true);\n        };\n\n        // This is needed for testing: in the normal course of things,\n        // rack_sids is generated entirely by the websocket handler.\n        VLANsManager.prototype.addRackController = function(vlan, rack) {\n            vlan.rack_sids.push(rack.system_id);\n        };\n\n        // Configure DHCP on the VLAN\n        VLANsManager.prototype.configureDHCP = function(\n           vlan, controllers, extra, relay_vlan) {\n           var params = {\n               \"id\": vlan.id,\n               \"controllers\": controllers,\n               \"extra\": extra\n           };\n           if(relay_vlan === null || angular.isNumber(relay_vlan)) {\n              params.relay_vlan = relay_vlan;\n           }\n           return RegionConnection.callMethod(\n                \"vlan.configure_dhcp\", params, true);\n        };\n\n        // Disable DHCP on the VLAN\n        VLANsManager.prototype.disableDHCP = function(vlan) {\n            return RegionConnection.callMethod(\n                \"vlan.configure_dhcp\", {\n                    \"id\": vlan.id,\n                    \"controllers\": [],\n                    \"relay_vlan\": null\n                }, true);\n        };\n\n        // Create a VLAN.\n        VLANsManager.prototype.create = function(vlan) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"vlan.create\", vlan);\n        };\n\n        return new VLANsManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zone Manager\n *\n * Manages all of the zones in the browser. The manager uses the\n * RegionConnection to load the zones, update the zones, and listen for\n * notification events about zones.\n */\n\nangular.module('MAAS').factory(\n    'ZonesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function ZonesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"zone\";\n\n            // Listen for notify events for the zone object.\n            var self = this;\n            RegionConnection.registerNotifier(\"zone\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ZonesManager.prototype = new Manager();\n\n        // Return the default zone.\n        ZonesManager.prototype.getDefaultZone = function() {\n            if(this._items.length === 0) {\n                return null;\n            } else {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].id === 0) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return this._items[0];\n        };\n\n        return new ZonesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter VLANs by Fabric.\n */\n\nangular.module('MAAS').filter('filterByFabric', function() {\n    return function(vlans, fabric) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(fabric)) {\n            id = fabric.id;\n        } else if(angular.isNumber(fabric)) {\n            id = fabric;\n        } else {\n            return filtered;\n        }\n        angular.forEach(vlans, function(vlan) {\n            if(vlan.fabric === id) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by Space.\n */\n\nangular.module('MAAS').filter('filterBySpace', function() {\n    return function(objects, space) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(space)) {\n            id = space.id;\n        } else if(angular.isNumber(space)) {\n            id = space;\n        } else {\n            return filtered;\n        }\n        angular.forEach(objects, function(object) {\n            if(object.space === id) {\n                filtered.push(object);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').filter('filterByNullSpace', function() {\n    return function(objects) {\n        var filtered = [];\n        angular.forEach(objects, function(object) {\n            if(object.space === null) {\n                filtered.push(object);\n            }\n        });\n        return filtered;\n    };\n});","/* Copyright 2016-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Filter objects with subnet foreign key references by a particular subnet.\n */\n\nangular.module('MAAS').filter('filterBySubnet', function() {\n    return function(foreign_objects, subnet, key) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(subnet)) {\n            id = subnet.id;\n        } else if(angular.isNumber(subnet)) {\n            id = subnet;\n        } else {\n            return filtered;\n        }\n        if(angular.isUndefined(key)) {\n            key = 'subnet';\n        }\n        angular.forEach(foreign_objects, function(obj) {\n            if(obj[key] === id) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n\n// Filters by subnet, unless the subnet is not defined. If the subnet is not\n// defined, filters by VLAN.\nangular.module('MAAS').filter('filterBySubnetOrVlan', function() {\n    return function(foreign_objects, subnet, vlan) {\n        var filtered = [];\n        var id;\n        var key = null;\n        if(angular.isDefined(subnet) && subnet !== null) {\n            key = 'subnet';\n            if(angular.isObject(subnet)) {\n                id = subnet.id;\n            } else if(angular.isNumber(subnet)) {\n                id = subnet;\n            }\n        } else if(angular.isDefined(vlan) && vlan !== null) {\n            key = 'vlan';\n            if(angular.isObject(vlan)) {\n                id = vlan.id;\n            } else if(angular.isNumber(vlan)) {\n                id = vlan;\n            }\n        } else {\n            return filtered;\n        }\n        angular.forEach(foreign_objects, function(obj) {\n            if(obj[key] === id) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by VLAN.\n */\n\nangular.module('MAAS').filter('filterByVLAN', function() {\n    return function(subnets, vlan) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(vlan)) {\n            id = vlan.id;\n        } else if(angular.isNumber(vlan)) {\n            id = vlan;\n        } else {\n            return filtered;\n        }\n        angular.forEach(subnets, function(subnet) {\n            if(subnet.vlan === id) {\n                filtered.push(subnet);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').filter('filterControllersByVLAN', function() {\n    return function(controllers, vlan) {\n        var filtered = [];\n        if(!angular.isObject(vlan)) {\n            return filtered;\n        }\n        angular.forEach(controllers, function(controller) {\n            // XXX mpontillo disable VLAN check until VLAN is populated\n            // on the rack controller's interfaces.\n            // if(controller.vlan_ids.indexOf(vlan.id) != -1) {\n\n            // XXX mpontillo 2016-02-22 this is a hack to prevent too many\n            // nodes from being sent through the filter; we have a bug which\n            // sends nodes in which are not controllers.\n            if(controller.node_type === 2 || controller.node_type === 4) {\n                filtered.push(controller);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Filter\n */\n\nangular.module('MAAS').filter('nodesFilter', ['$filter', 'SearchService',\n    function($filter, SearchService) {\n\n        // Default filter built-in angular. Used on all extra filters that do\n        // not specify a specific type.\n        var standardFilter = $filter('filter');\n\n        // Helpers that convert the pseudo field on node to an actual\n        // value from the node.\n        var mappings = {\n            cpu: function(node) {\n                return node.cpu_count;\n            },\n            cores: function(node) {\n                return node.cpu_count;\n            },\n            ram: function(node) {\n                return node.memory;\n            },\n            mac: function(node) {\n                macs = [];\n                macs.push(node.pxe_mac);\n                macs.push.apply(macs, node.extra_macs);\n                return macs;\n            },\n            zone: function(node) {\n                return node.zone.name;\n            },\n            pool: function(node) {\n                return node.pool.name;\n            },\n            pod: function(node) {\n                return (node.pod === undefined) ? undefined : node.pod.name;\n            },\n            'pod-id': function(node) {\n                return (node.pod === undefined) ? undefined : node.pod.id;\n            },\n            power: function(node) {\n                return node.power_state;\n            },\n            release: function(node) {\n                if(node.status_code === 6 || node.status_code === 9) {\n                    return node.osystem + \"/\" + node.distro_series;\n                } else {\n                    return '';\n                }\n            }\n        };\n\n        // Return true when value is an integer.\n        function isInteger(value) {\n            // +1 done to silence js-lint.\n            return value % +1 === 0;\n        }\n\n        // Return true when lowercase value contains the already\n        // lowercased lowerTerm.\n        function _matches(value, lowerTerm, exact) {\n            if(angular.isNumber(value)) {\n                if(exact) {\n                    if(isInteger(value)) {\n                        return value === parseInt(lowerTerm, 10);\n                    } else {\n                        return value === parseFloat(lowerTerm);\n                    }\n                } else {\n                    if(isInteger(value)) {\n                        return value >= parseInt(lowerTerm, 10);\n                    } else {\n                        return value >= parseFloat(lowerTerm);\n                    }\n                }\n            } else if(angular.isString(value)) {\n                if(exact) {\n                    return value.toLowerCase() === lowerTerm;\n                } else {\n                    return value.toLowerCase().indexOf(lowerTerm) >= 0;\n                }\n            } else {\n                return value === lowerTerm;\n            }\n        }\n\n        // Return true if value matches lowerTerm, unless negate is true then\n        // return false if matches.\n        function matches(value, lowerTerm, exact, negate) {\n            var match = _matches(value, lowerTerm, exact);\n            if(negate) {\n                return !match;\n            }\n            return match;\n        }\n\n        return function(nodes, search) {\n            if(angular.isUndefined(nodes) ||\n                angular.isUndefined(search) ||\n                nodes.length === 0) {\n                return nodes;\n            }\n\n            var filtered = nodes;\n            var filters = SearchService.getCurrentFilters(search);\n            angular.forEach(filters, function(terms, attr) {\n                if(attr === '_') {\n                    // Use the standard filter on terms that do not specify\n                    // an attribute.\n                    angular.forEach(terms, function(term) {\n                        filtered = standardFilter(filtered, term);\n                    });\n                } else if(attr === 'in') {\n                    // \"in:\" is used to filter the nodes by those that are\n                    // currently selected.\n                    angular.forEach(terms, function(term) {\n                        var matched = [];\n                        angular.forEach(filtered, function(node) {\n                            if(node.$selected &&\n                                term.toLowerCase() === \"selected\") {\n                                matched.push(node);\n                            } else if(!node.$selected &&\n                                term.toLowerCase() === \"!selected\") {\n                                matched.push(node);\n                            }\n                        });\n                        filtered = matched;\n                    });\n                } else {\n                    // Mapping function for the attribute.\n                    var mapFunc = mappings[attr];\n\n                    // Loop through each item and only select the matching.\n                    var matched = [];\n                    angular.forEach(filtered, function(node) {\n                        var value;\n                        if(angular.isFunction(mapFunc)) {\n                            value = mapFunc(node);\n                        } else if(node.hasOwnProperty(attr)) {\n                            value = node[attr];\n                        }\n\n                        // Unable to get value for this node. So skip it.\n                        if(angular.isUndefined(value)) {\n                            return;\n                        }\n\n                        var i, j;\n                        for(i = 0; i < terms.length; i++) {\n                            var term = terms[i].toLowerCase();\n                            var exact = false, negate = false;\n\n                            // '!' at the beginning means the term is negated.\n                            while(term.indexOf('!') === 0) {\n                                negate = !negate;\n                                term = term.substring(1);\n                            }\n\n                            // '=' at the beginning means to match exactly.\n                            if(term.indexOf('=') === 0) {\n                                exact = true;\n                                term = term.substring(1);\n                            }\n\n                            // Allow '!' after the '=' as well.\n                            while(term.indexOf('!') === 0) {\n                                negate = !negate;\n                                term = term.substring(1);\n                            }\n\n                            if(angular.isArray(value)) {\n                                // If value is an array check if the\n                                // term matches any value in the\n                                // array. If negated, check whether no\n                                // value in the array matches.\n                                if(negate) {\n                                    // Push to matched only if no value in\n                                    // the array matches term.\n                                    var no_match = true;\n                                    for(j = 0; j < value.length; j++) {\n                                        if(matches(\n                                            value[j], term, exact, false)) {\n                                            no_match = false;\n                                            break; // Skip remaining tests.\n                                        }\n                                    }\n                                    if(no_match) {\n                                        matched.push(node);\n                                        return;\n                                    }\n                                } else {\n                                    for(j = 0; j < value.length; j++) {\n                                        if(matches(\n                                            value[j], term, exact, false)) {\n                                            matched.push(node);\n                                            return;\n                                        }\n                                    }\n                                }\n                            } else {\n                                // Standard value check that it matches the\n                                // term.\n                                if(matches(value, term, exact, negate)) {\n                                    matched.push(node);\n                                    return;\n                                }\n                            }\n                        }\n                    });\n                    filtered = matched;\n                }\n            });\n            return filtered;\n        };\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by VLAN.\n */\n\nangular.module('MAAS').filter('orderByDate', function() {\n    return function(items, field, field2) {\n        var sorted = items.slice();\n        sorted.sort(function(a, b) {\n            aDate = new Date(a[field]);\n            bDate = new Date(b[field]);\n\n            // Sort by ID as well if equal.\n            if(angular.isString(field2) &&\n                aDate.getTime() === bDate.getTime()) {\n                return (\n                    a[field2] > b[field2] ? -1 : a[field2] < b[field2] ? 1 : 0);\n            } else {\n              return aDate > bDate ? -1 : aDate < bDate ? 1 : 0;\n            }\n        });\n        return sorted;\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter to remove the default VLAN as an option.\n */\n\nangular.module('MAAS').filter('removeDefaultVLAN', function() {\n    return function(vlans) {\n        var filtered = [];\n        angular.forEach(vlans, function(vlan) {\n            if(vlan.vid !== 0) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Module\n *\n * Initializes the MAAS module with its required dependencies and sets up\n * the interpolater to use '{$' and '$}' instead of '{{' and '}}' as this\n * conflicts with Django templates.\n */\n\nangular.module('MAAS',\n    ['ngRoute', 'ngCookies', 'ngSanitize', 'ngTagsInput', 'vs-repeat']).config(\n    function($interpolateProvider, $routeProvider, $httpProvider) {\n        $interpolateProvider.startSymbol('{$');\n        $interpolateProvider.endSymbol('$}');\n\n        // Set the $httpProvider to send the csrftoken in the header of any\n        // http request.\n        $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n        $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n        // Helper that wrappers the templateUrl to append the files version\n        // to the path. Used to override client cache.\n        function versionedPath(path) {\n            return path + \"?v=\" + MAAS_config.files_version;\n        }\n\n        // Setup routes only for the index page, all remaining pages should\n        // not use routes. Once all pages are converted to using Angular this\n        // will go away. Causing the page to never have to reload.\n        var href = angular.element(\"base\").attr('href');\n        var path = document.location.pathname;\n        if(path[path.length - 1] !== '/') {\n            path += '/';\n        }\n        if(path === href) {\n            var routes = $routeProvider.\n                when('/intro', {\n                    templateUrl: versionedPath(\n                        'static/partials/intro.html'),\n                    controller: 'IntroController'\n                }).\n                when('/intro/user', {\n                    templateUrl: versionedPath(\n                        'static/partials/intro-user.html'),\n                    controller: 'IntroUserController'\n                }).\n                when('/machines', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/machine/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/machine/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/machine/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/devices', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/device/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/device/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/device/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/controllers', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/controller/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/controller/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/controller/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/nodes', {\n                    redirectTo: '/machines'\n                }).\n                when('/node/machine/:system_id', {\n                    redirectTo: '/machine/:system_id'\n                }).\n                when('/node/machine/:system_id/:result_type/:id', {\n                    redirectTo: '/machine/:system_id/:result_type/:id'\n                }).\n                when('/node/machine/:system_id/events', {\n                    redirectTo: '/machine/:system_id/events'\n                }).\n                when('/node/device/:system_id', {\n                    redirectTo: '/device/:system_id'\n                }).\n                when('/node/device/:system_id/:result_type/:id', {\n                    redirectTo: '/device/:system_id/:result_type/:id'\n                }).\n                when('/node/device/:system_id/events', {\n                    redirectTo: '/device/:system_id/events'\n                }).\n                when('/node/controller/:system_id', {\n                    redirectTo: '/controller/:system_id'\n                }).\n                when('/node/controller/:system_id/:result_type/:id', {\n                    redirectTo: '/controller/:system_id/:result_type/:id'\n                }).\n                when('/node/controller/:system_id/events', {\n                    redirectTo: '/controller/:system_id/events'\n                }).\n                when('/pods', {\n                    templateUrl: versionedPath(\n                        'static/partials/pods-list.html'),\n                    controller: 'PodsListController'\n                }).\n                when('/pod/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/pod-details.html'),\n                    controller: 'PodDetailsController'\n                }).\n                when('/images', {\n                    templateUrl: versionedPath(\n                        'static/partials/images.html'),\n                    controller: 'ImagesController'\n                }).\n                when('/domains', {\n                    templateUrl: versionedPath(\n                        'static/partials/domains-list.html'),\n                    controller: 'DomainsListController'\n                }).\n                when('/domain/:domain_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/domain-details.html'),\n                    controller: 'DomainDetailsController'\n                }).\n                when('/space/:space_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/space-details.html'),\n                    controller: 'SpaceDetailsController'\n                }).\n                when('/fabric/:fabric_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/fabric-details.html'),\n                    controller: 'FabricDetailsController'\n                }).\n                when('/subnets', {\n                    redirectTo: '/networks?by=fabric'\n                }).\n                when('/networks', {\n                    templateUrl: versionedPath(\n                        'static/partials/networks-list.html'),\n                    controller: 'NetworksListController',\n                    reloadOnSearch: false\n                }).\n                when('/subnet/:subnet_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/subnet-details.html'),\n                    controller: 'SubnetDetailsController'\n                }).\n                when('/vlan/:vlan_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/vlan-details.html'),\n                    controller: 'VLANDetailsController',\n                    controllerAs: 'vlanDetails'\n                }).\n                when('/settings/:section', {\n                    templateUrl: versionedPath(\n                        'static/partials/settings.html'),\n                    controller: 'SettingsController'\n                }).\n                when('/zone/:zone_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/zone-details.html'),\n                    controller: 'ZoneDetailsController'\n                }).\n                when('/zones', {\n                    templateUrl: versionedPath(\n                        'static/partials/zones-list.html'),\n                    controller: 'ZonesListController',\n                    reloadOnSearch: false\n                }).\n                when('/pools', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                });\n            if(MAAS_config.superuser) {\n                // Only superuser's can access the dashboard at the moment.\n                routes = routes.when('/dashboard', {\n                    templateUrl: versionedPath(\n                        'static/partials/dashboard.html'),\n                    controller: 'DashboardController'\n                });\n            }\n            routes = routes.otherwise({\n                redirectTo: '/machines'\n            });\n        }\n    });\n\n// Force users to #/intro when it has not been completed.\nangular.module('MAAS').run(['$rootScope', '$location',\n    function ($rootScope, $location) {\n        $rootScope.$on('$routeChangeStart', function(event, next, current) {\n            if(!MAAS_config.completed_intro) {\n                if(next.controller !== 'IntroController') {\n                    $location.path('/intro');\n                }\n            } else if (!MAAS_config.user_completed_intro) {\n                if(next.controller !== 'IntroUserController') {\n                    $location.path('/intro/user');\n                }\n            }\n        });\n    }]);\n\n// Send pageview to Google Anayltics when the route has changed.\nangular.module('MAAS').run(['$rootScope',\n    function ($rootScope) {\n        window.ga = window.ga || function() {\n            (window.ga.q = window.ga.q || []).push(arguments);\n        };\n        window.ga.l = +new Date();\n        window.ga('create', 'UA-1018242-63', 'auto', {\n          userId: MAAS_config.analytics_user_id\n        });\n        window.ga('set', 'dimension1', MAAS_config.version);\n        window.ga('set', 'dimension2', MAAS_config.uuid);\n        $rootScope.$on('$routeChangeSuccess', function() {\n            var path = window.location.pathname + window.location.hash;\n            window.ga('send', 'pageview', path);\n        });\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Browser Service\n *\n * Detects the browser used by the client. This is very simple case, because\n * at the moment we really only care about if the browser is Firefox. This\n * could be improved for other browsers, but this should only be used as a\n * last resort to prevent something bad happening on a misbehaving browser.\n */\n\nangular.module('MAAS').service('BrowserService', ['$window',\n    function($window) {\n\n        // The first items in the array will be matched first. So if the user\n        // agent for the browser contains both you need to make the more\n        // specific one first. E.g. Chrome contains both \"Chrome\" and \"Safari\"\n        // in its user-agent string. Since \"Safari\" does not chrome comes first\n        // so it matches that browser more specifically.\n        var BROWSERS = [\n            {\n                name: \"chrome\",\n                regex: /chrome/i\n            },\n            {\n                name: \"safari\",\n                regex: /safari/i\n            },\n            {\n                name: \"firefox\",\n                regex: /firefox/i\n            },\n            {\n                name: \"ie\",\n                regex: /MSIE/\n            }\n        ];\n\n        this.browser = \"other\";\n\n        // Set the browser if a regex matches. The first to match wins.\n        var self = this;\n        angular.forEach(BROWSERS, function(matcher) {\n            if(matcher.regex.test($window.navigator.userAgent) &&\n                self.browser === \"other\") {\n                self.browser = matcher.name;\n            }\n        });\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Converter Service\n *\n * Used by controllers to convert user inputs.\n */\n\nangular.module('MAAS').service('ConverterService', function() {\n\n        // Case is important: 1kB is 1000 bytes, whereas 1KB is 1024 bytes.\n        // See https://en.wikipedia.org/wiki/Byte#Unit_symbol\n        var UNITS = ['bytes', 'kB', 'MB', 'GB', 'TB'];\n\n        var KILOBYTE = 1000.0;\n        var MEGABYTE = 1000.0 * 1000.0;\n        var GIGABYTE = 1000.0 * 1000.0 * 1000.0;\n        var TERABYTE = 1000.0 * 1000.0 * 1000.0 * 1000.0;\n\n        // Convert the bytes to a unit.\n        this.bytesToUnits = function(bytes) {\n            // Support string being passed.\n            if(angular.isString(bytes)) {\n                bytes = parseInt(bytes, 10);\n            }\n\n            var i, unit, converted = bytes;\n            for(i = 0; i < UNITS.length; i++) {\n                unit = UNITS[i];\n                if(Math.abs(converted) < 1000.0 || unit === 'TB') {\n                    var string = converted.toFixed(1) + \" \" + unit;\n                    if(unit === 'bytes') {\n                        string = converted + \" \" + unit;\n                    }\n                    return {\n                        original: bytes,\n                        converted: converted,\n                        units: unit,\n                        string: string\n                    };\n                }\n                converted /= 1000.0;\n            }\n        };\n\n        // Convert the data based on the unit to bytes.\n        this.unitsToBytes = function(data, unit) {\n            // Support string being passed.\n            if(angular.isString(data)) {\n                data = parseFloat(data);\n            }\n            if(unit === 'bytes') {\n                return Math.floor(data);\n            } else if(unit === 'kB') {\n                return Math.floor(data * KILOBYTE);\n            } else if(unit === 'MB') {\n                return Math.floor(data * MEGABYTE);\n            } else if(unit === 'GB') {\n                return Math.floor(data * GIGABYTE);\n            } else if(unit === 'TB') {\n                return Math.floor(data * TERABYTE);\n            }\n        };\n\n        // Convert the data based on unit down to the lowest tolerance to still\n        // be the same value in that unit.\n        this.roundUnits = function(data, unit) {\n            // Support string being passed.\n            if(angular.isString(data)) {\n                data = parseFloat(data);\n            }\n            if(unit === 'bytes') {\n                return Math.floor(data);\n            } else if(unit === 'kB') {\n                return Math.floor(data * KILOBYTE) - (0.05 * KILOBYTE);\n            } else if(unit === 'MB') {\n                return Math.floor(data * MEGABYTE) - (0.05 * MEGABYTE);\n            } else if(unit === 'GB') {\n                return Math.floor(data * GIGABYTE) - (0.05 * GIGABYTE);\n            } else if(unit === 'TB') {\n                return Math.floor(data * TERABYTE) - (0.05 * TERABYTE);\n            }\n        };\n\n        // Round the bytes down to size based on the block size.\n        this.roundByBlockSize = function(bytes, block_size) {\n            return block_size * Math.floor(bytes / block_size);\n        };\n\n        // Convert string ipv4 address into octets array.\n        this.ipv4ToOctets = function(ipAddress) {\n            var parts = ipAddress.split('.');\n            var octets = [];\n            angular.forEach(parts, function(part) {\n                octets.push(parseInt(part, 10));\n            });\n            return octets;\n        };\n\n        // Convert string ipv4 address into integer.\n        this.ipv4ToInteger = function(ipAddress) {\n            var octets = this.ipv4ToOctets(ipAddress);\n            return (\n                (octets[0] * Math.pow(256,3)) +\n                (octets[1] * Math.pow(256,2)) +\n                (octets[2] * 256) + octets[3]);\n        };\n\n        // Convert ipv6 address to a full ipv6 address, removing the\n        // '::' shortcut and padding each group with zeros.\n        this.ipv6Expand = function(ipAddress) {\n            var i, expandedAddress = ipAddress;\n            if(expandedAddress.indexOf(\"::\") !== -1) {\n                // '::' is present so replace it with the required\n                // number of '0000:' based on its location in the string.\n                var split = ipAddress.split(\"::\");\n                var groups = 0;\n                for(i = 0; i < split.length; i++) {\n                    groups += split[i].split(\":\").length;\n                }\n                expandedAddress = split[0] + \":\";\n                for(i = 0; i < 8 - groups; i++) {\n                    expandedAddress += \"0000:\";\n                }\n                expandedAddress += split[1];\n            }\n            // Pad the output of each part with zeros.\n            var output = [], parts = expandedAddress.split(\":\");\n            angular.forEach(parts, function(part) {\n                output.push(\"0000\".substr(part.length) + part);\n            });\n            return output.join(\":\");\n        };\n\n        // Convert string ipv6 into groups array.\n        this.ipv6ToGroups = function(ipAddress) {\n            var groups = [];\n            var parts = this.ipv6Expand(ipAddress).split(\":\");\n            angular.forEach(parts, function(part) {\n                groups.push(parseInt(part, 16));\n            });\n            return groups;\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Error Service\n */\n\nangular.module('MAAS').service('ErrorService', function() {\n\n        // Holds the client error.\n        this._error = null;\n\n        // Raise this error in the UI.\n        this.raiseError = function(error) {\n            // Possible that this method is called more than once.\n            // Only take the first error.\n            if(!angular.isString(this._error)) {\n                this._error = error;\n            }\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS JSON Service\n *\n * Used by controllers to parse JSON.\n */\n\nangular.module('MAAS').service('JSONService', function() {\n\n    // Return the JSON for the string or null if it cannot be parsed.\n    this.tryParse = function(jsonString) {\n        try {\n            var obj = JSON.parse(jsonString);\n            // JSON.parse(false) or JSON.parse(1234) will throw errors, but\n            // JSON.parse(null) returns 'null', and typeof null === \"object\".\n            if (obj && typeof obj === \"object\" && obj !== null) {\n                return obj;\n            }\n        }\n        catch (e) { }\n        return null;\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Log Service\n *\n * Allows logging to be enabled or disabled, and allows a particular log level\n * to be set, which will allow logs of a specified importance (or more) to be\n * seen.\n *\n * Also appends a time index (in seconds, accurate to milliseconds) to the\n * beginning of the log string.\n */\n\nangular.module('MAAS').service('LogService', [\n    '$window', function($window) {\n        var self = this;\n\n        // Global enable/disable for MAAS logging. If set to `false`, this\n        // value takes precedence over the logLevel.\n        self.logging = true;\n\n        // Specifies the log level.\n        // Level 1: error() logging\n        // Level 2: error() and warn() logging\n        // Level 3: all of the above, plus info()\n        // Level 4: all of the above, plus log()\n        // Level 5: all of the above, plus debug()\n        self.logLevel = 5;\n\n        // Returns a monotonic time (in milliseconds) since page load.\n        self.now = function() {\n            return $window.performance ? $window.performance.now() : 0;\n        };\n\n        // Standard logging functions.\n        self._debug = console.debug;\n        self._log = console.log;\n        self._info = console.info;\n        self._warn = console.warn;\n        self._error = console.error;\n\n        // Formats the specified time (in milliseconds) in seconds.\n        this.formatMilliseconds = function(milliseconds) {\n            return parseFloat(milliseconds / 1000.0).toFixed(3);\n        };\n\n        // Internal function to log using the specified destination, with the\n        // specified list of arguments.\n        this.__log = function(destination, args) {\n            if(self.logging === true) {\n                // Add time index to the beginning of the log.\n                Array.prototype.unshift.call(args,\n                    \"[\" + self.formatMilliseconds(self.now()) + \"]\");\n                destination.apply(self, args);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._debug().\n        this.debug = function() {\n            if(self.logLevel >= 5) {\n                self.__log(self._debug, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._log().\n        this.log = function() {\n            if(self.logLevel >= 4) {\n                self.__log(self._log, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._info().\n        this.info = function() {\n            if(self.logLevel >= 3) {\n                self.__log(self._info, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._warn().\n        this.warn = function() {\n            if(self.logLevel >= 2) {\n                self.__log(self._warn, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._err().\n        this.error = function() {\n            if(self.logLevel >= 1) {\n                self.__log(self._error, arguments);\n            }\n        };\n    }\n]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Base Manager\n *\n * Manages a collection of items from the websocket in the browser. The manager\n * uses the RegionConnection to load the items, update the items, and listen\n * for notification events about the items.\n */\n\nangular.module('MAAS').service(\n    'Manager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', function(\n            $q, $rootScope, $timeout, RegionConnection) {\n\n        // Actions that are used to update the statuses metadata.\n        var METADATA_ACTIONS = {\n            CREATE: \"create\",\n            UPDATE: \"update\",\n            DELETE: \"delete\"\n        };\n\n        // Constructor\n        function Manager() {\n            // Primary key on the items in the list. Used to match items.\n            this._pk = \"id\";\n\n            // Key used when loading batches. Typically the same as _pk\n            // but not always.\n            this._batchKey = \"id\";\n\n            // The field from which to get a human-readable name.\n            this._name_field = \"name\";\n\n            // Handler on the region to call to list, create, update, delete,\n            // and listen for notifications. Must be set by overriding manager.\n            this._handler = null;\n\n            // Holds all items in the system. This list must always be the same\n            // object.\n            this._items = [];\n\n            // The way this manager recieves its updated information. 'notify'\n            // means this manager recieved notify messages from the websocket.\n            // See PollingManager for the other possible type. This is only\n            // used by the `ManagerHelperService` to identify how updating\n            // the data should be handled.\n            this._type = 'notify';\n\n            // Holds list of scopes that currently have this manager loaded.\n            this._scopes = [];\n\n            // True when all of the items have been loaded. This is done on\n            // intial connection to the region.\n            this._loaded = false;\n\n            // True when the items list is currently being loaded or reloaded.\n            // Actions will not be processed while this is false.\n            this._isLoading = false;\n\n            // Holds list of defers that need to be called once the loading of\n            // items has finished. This is used when a caller calls loadItems\n            // when its already loading.\n            this._extraLoadDefers = [];\n\n            // Holds list of defers that need to be called once the reloading\n            // of items has finished. This is used when a caller calls\n            // reloadItems when its already reloading.\n            this._extraReloadDefers = [];\n\n            // Holds all of the notify actions that need to be processed. This\n            // is used to hold the actions while the items are being loaded.\n            // Once all of the items are loaded the queue will be processed.\n            this._actionQueue = [];\n\n            // Holds list of all of the currently selected items. This is held\n            // in a seperate list to remove the need to loop through the full\n            // listing to grab the selected items.\n            this._selectedItems = [];\n\n            // Set to true when the items list should reload upon re-connection\n            // to the region.\n            this._autoReload = false;\n\n            // Holds the item that is currenly being viewed. This object will\n            // be updated if any notify events are recieved for it. This allows\n            // the ability of not having to keep pulling the item out of the\n            // items list.\n            this._activeItem = null;\n\n            // Holds metadata information that is used to helper filtering.\n            this._metadata = {};\n\n            // List of attributes to track on the loaded items. Each attribute\n            // in this list will be placed in _metadata to track its currect\n            // values and the number of items with that value.\n            this._metadataAttributes = [];\n        }\n\n        // Return index of the item in the given array.\n        Manager.prototype._getIndexOfItem = function(array, pk_value) {\n            var i;\n            for(i = 0, len = array.length; i < len; i++) {\n                if(array[i][this._pk] === pk_value) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n\n        // Replace the item in the array at the same index.\n        Manager.prototype._replaceItemInArray = function(array, item) {\n            var idx = this._getIndexOfItem(array, item[this._pk]);\n            if(idx >= 0) {\n                // Keep the current selection on the item.\n                item.$selected = array[idx].$selected;\n                angular.copy(item, array[idx]);\n            }\n        };\n\n        // Remove the item from the array.\n        Manager.prototype._removeItemByIdFromArray = function(\n            array, pk_value) {\n            var idx = this._getIndexOfItem(array, pk_value);\n            if(idx >= 0) {\n                array.splice(idx, 1);\n            }\n        };\n\n        // Return the parameters that should be used for the batch load\n        // request. Should be used by subclass that want to add extra\n        // parameters to the batch request. By default it returns an empty\n        // object.\n        Manager.prototype._initBatchLoadParameters = function() {\n            return {};\n        };\n\n        // Batch load items from the region in groups of 50.\n        Manager.prototype._batchLoadItems = function(array, extra_func) {\n            var self = this;\n            var defer = $q.defer();\n            var method = this._handler + \".list\";\n            function callLoad() {\n                var params = self._initBatchLoadParameters();\n                params.limit = 50;\n\n                // Get the last batchKey in the list so the region knows to\n                // start at that offset.\n                if(array.length > 0) {\n                    params.start = array[array.length-1][self._batchKey];\n                }\n                RegionConnection.callMethod(\n                    method, params).then(function(items) {\n                        // Pass each item to extra_func function if given.\n                        if(angular.isFunction(extra_func)) {\n                            angular.forEach(items, function(item) {\n                                extra_func(item);\n                            });\n                        }\n\n                        array.push.apply(array, items);\n                        if(items.length === 50) {\n                            // Could be more items, request the next 50.\n                            callLoad(array);\n                        } else {\n                            defer.resolve(array);\n                        }\n                    }, defer.reject);\n            }\n            callLoad();\n            return defer.promise;\n        };\n\n        // Resolves array of defers with item.\n        Manager.prototype._resolveDefers = function(defersArray, item) {\n            angular.forEach(defersArray, function(defer) {\n                defer.resolve(item);\n            });\n        };\n\n        // Rejects array of defers with error.\n        Manager.prototype._rejectDefers = function(defersArray, error) {\n            angular.forEach(defersArray, function(defer) {\n                defer.reject(error);\n            });\n        };\n\n        // Return list of items.\n        Manager.prototype.getItems = function() {\n            return this._items;\n        };\n\n        // Clears the currect state of the manager.\n        Manager.prototype.clear = function() {\n            this._loaded = false;\n            this._items.length = 0;\n            this._actionQueue.length = 0;\n            this._selectedItems.length = 0;\n            this._activeItem = null;\n            this._metadata = {};\n            this._metadataAttributes.length = 0;\n        };\n\n        // Load all the items.\n        Manager.prototype.loadItems = function() {\n            // If the items have already been loaded then, we need to\n            // reload the items list not load the initial list.\n            if(this._loaded) {\n                return this.reloadItems();\n            }\n\n            // If its already loading then the caller just needs to be informed\n            // of when it has finished loading.\n            if(this._isLoading) {\n                var defer = $q.defer();\n                this._extraLoadDefers.push(defer);\n                return defer.promise;\n            }\n\n            var self = this;\n            this._isLoading = true;\n            return this._batchLoadItems(this._items, function(item) {\n                item.$selected = false;\n                self._updateMetadata(item, METADATA_ACTIONS.CREATE);\n                self._processItem(item);\n            }).then(function() {\n                self._loaded = true;\n                self._isLoading = false;\n                self.processActions();\n                self._resolveDefers(self._extraLoadDefers, self._items);\n                self._extraLoadDefers = [];\n                return self._items;\n            }, function(error) {\n                self._rejectDefers(self._extraLoadDefers, error);\n                self._extraLoadDefers = [];\n                return $q.reject(error);\n            });\n        };\n\n        // Reload the items list.\n        Manager.prototype.reloadItems = function() {\n            // If the items have not been loaded then, we need to\n            // load the initial list.\n            if(!this._loaded) {\n                return this.loadItems();\n            }\n\n            // If its already reloading then the caller just needs to be\n            // informed of when it has refinished loading.\n            if(this._isLoading) {\n                var defer = $q.defer();\n                this._extraReloadDefers.push(defer);\n                return defer.promise;\n            }\n\n            // Updates the items list with the reloaded items.\n            var self = this;\n            function updateItems(items) {\n                // Iterate in reverse so we can remove items inline, without\n                // having to adjust the index.\n                var i = self._items.length;\n                while(i--) {\n                    var item = self._items[i];\n                    var updatedIdx = self._getIndexOfItem(\n                        items, item[self._pk]);\n                    if(updatedIdx === -1) {\n                        self._updateMetadata(item, METADATA_ACTIONS.DELETE);\n                        self._items.splice(i, 1);\n                        self._removeItemByIdFromArray(\n                            self._selectedItems, item[self._pk]);\n                    } else {\n                        var updatedItem = items[updatedIdx];\n                        self._updateMetadata(\n                            updatedItem, METADATA_ACTIONS.UPDATE);\n                        updatedItem.$selected = item.$selected;\n                        angular.copy(items[updatedIdx], item);\n                        items.splice(updatedIdx, 1);\n                    }\n                }\n\n                // The remain items in items array are the new items.\n                angular.forEach(items, function(item) {\n                    self._items.push(item);\n                    self._processItem(item);\n                });\n            }\n\n            // The reload action loads all of the items into this list\n            // instead of the items list. This list will then be used to\n            // update the items list.\n            var currentItems = [];\n\n            // Start the reload process and once complete call updateItems.\n            self._isLoading = true;\n            return this._batchLoadItems(currentItems).then(function(items) {\n                updateItems(items);\n                self._isLoading = false;\n                self.processActions();\n\n                // Set the activeItem again so the region knows that its\n                // the active item.\n                if(angular.isObject(self._activeItem)) {\n                    self.setActiveItem(self._activeItem[self._pk]);\n                }\n\n                self._resolveDefers(self._extraReloadDefers, self._items);\n                self._extraReloadDefers = [];\n                return self._items;\n            }, function(error) {\n                self._rejectDefers(self._extraReloadDefers, error);\n                self._extraReloadDefers = [];\n                return $q.reject(error);\n            });\n        };\n\n        // Enables auto reloading of the item list on connection to region.\n        Manager.prototype.enableAutoReload = function() {\n            if(!this._autoReload) {\n                this._autoReload = true;\n                var self = this;\n                this._reloadFunc = function() {\n                    self.reloadItems();\n                };\n                RegionConnection.registerHandler(\"open\", this._reloadFunc);\n            }\n        };\n\n        // Disable auto reloading of the item list on connection to region.\n        Manager.prototype.disableAutoReload = function() {\n            if(this._autoReload) {\n                RegionConnection.unregisterHandler(\"open\", this._reloadFunc);\n                this._reloadFunc = null;\n                this._autoReload = false;\n            }\n        };\n\n        // True when the initial item list has finished loading.\n        Manager.prototype.isLoaded = function() {\n            return this._loaded;\n        };\n\n        // True when the item list is currently being loaded or reloaded.\n        Manager.prototype.isLoading = function() {\n            return this._isLoading;\n        };\n\n        // Allow for extra processing of items as they are added or updated.\n        Manager.prototype._processItem = function(item) {\n        };\n\n        // Replace item in the items and selectedItems list.\n        Manager.prototype._replaceItem = function(item) {\n            this._updateMetadata(item, METADATA_ACTIONS.UPDATE);\n            this._replaceItemInArray(this._items, item);\n        };\n\n        // Remove item in the items and selectedItems list.\n        Manager.prototype._removeItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx >= 0) {\n                this._updateMetadata(this._items[idx], METADATA_ACTIONS.DELETE);\n            }\n            this._removeItemByIdFromArray(this._items, pk_value);\n            this._removeItemByIdFromArray(this._selectedItems, pk_value);\n        };\n\n        // Get the item from the list. Does not make a get request to the\n        // region to load more data.\n        Manager.prototype.getItemFromList = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx >= 0) {\n                return this._items[idx];\n            } else {\n                return null;\n            }\n        };\n\n        // Get the item from the region.\n        Manager.prototype.getItem = function(pk_value) {\n            var self = this;\n            var method = this._handler + \".get\";\n            var params = {};\n            params[this._pk] = pk_value;\n            return RegionConnection.callMethod(\n                method, params).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the create information to the region.\n        Manager.prototype.createItem = function(item) {\n            var self = this;\n            var method = this._handler + \".create\";\n            item = angular.copy(item);\n            delete item.$selected;\n            return RegionConnection.callMethod(\n                method, item).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the update information to the region.\n        Manager.prototype.updateItem = function(item) {\n            var self = this;\n            var method = this._handler + \".update\";\n            item = angular.copy(item);\n            delete item.$selected;\n            return RegionConnection.callMethod(\n                method, item).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the delete call for item to the region.\n        Manager.prototype.deleteItem = function(item) {\n            var self = this;\n            var method = this._handler + \".delete\";\n            var params = {};\n            params[this._pk] = item[this._pk];\n            return RegionConnection.callMethod(\n                method, params).then(function() {\n                    self._removeItem(item[self._pk]);\n                });\n        };\n\n        // Return the active item.\n        Manager.prototype.getActiveItem = function() {\n            return this._activeItem;\n        };\n\n        // Set the active item.\n        Manager.prototype.setActiveItem = function(pk_value) {\n            if(!this._loaded) {\n                throw new Error(\n                    \"Cannot set active item unless the manager is loaded.\");\n            }\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                this._activeItem = null;\n                // Item with pk_value does not exists. Reject the returned\n                // deferred.\n                var defer = $q.defer();\n                $timeout(function() {\n                    defer.reject(\"No item with pk: \" + pk_value);\n                });\n                return defer.promise;\n            } else {\n                this._activeItem = this._items[idx];\n                // Data that is loaded from the list call is limited and\n                // doesn't contain all of the needed data for an activeItem.\n                // Call set_active on the handler for the region to know\n                // this item needs all information when updated.\n                var self = this;\n                var method = this._handler + \".set_active\";\n                var params = {};\n                params[this._pk] = pk_value;\n                return RegionConnection.callMethod(\n                    method, params).then(function(item) {\n                        self._replaceItem(item);\n                        return self._activeItem;\n                    });\n            }\n        };\n\n        // Clears the active item.\n        Manager.prototype.clearActiveItem = function() {\n            this._activeItem = null;\n        };\n\n        // True when the item list is stable and not being loaded or reloaded.\n        Manager.prototype.canProcessActions = function() {\n            return !this._isLoading;\n        };\n\n        // Handle notify from RegionConnection about an item.\n        Manager.prototype.onNotify = function(action, data) {\n            // Place the notification in the action queue.\n            this._actionQueue.push({\n                action: action,\n                data: data\n            });\n            // Processing incoming actions is enabled. Otherwise they\n            // will be queued until processActions is called.\n            if(this.canProcessActions()) {\n               $rootScope.$apply(this.processActions());\n            }\n        };\n\n        // Process all actions to keep the item information up-to-date.\n        Manager.prototype.processActions = function() {\n            while(this._actionQueue.length > 0) {\n                var action = this._actionQueue.shift();\n                if(action.action === \"create\") {\n                    // Check that the received data doesn't already exists\n                    // in the _items list. If it does then this is actually\n                    // an update action not a create action.\n                    var idx = this._getIndexOfItem(\n                        this._items, action.data[this._pk]);\n                    if(idx >= 0) {\n                        // Actually this is an update action not a create\n                        // action. So replace the item instead of adding it.\n                        this._replaceItem(action.data);\n                    } else {\n                        action.data.$selected = false;\n                        this._updateMetadata(\n                            action.data, METADATA_ACTIONS.CREATE);\n                        this._items.push(action.data);\n                    }\n                    this._processItem(action.data);\n                } else if(action.action === \"update\") {\n                    this._replaceItem(action.data);\n                    this._processItem(action.data);\n                } else if(action.action === \"delete\") {\n                    this._removeItem(action.data);\n                }\n            }\n        };\n\n        // Return list of selected items.\n        Manager.prototype.getSelectedItems = function() {\n            return this._selectedItems;\n        };\n\n        // Mark the given item as selected.\n        Manager.prototype.selectItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: selection of \" + this._handler + \"(\" + pk_value +\n                    \") failed because its missing in the items list.\");\n                return;\n            }\n\n            var item = this._items[idx];\n            item.$selected = true;\n\n            idx = this._selectedItems.indexOf(item);\n            if(idx === -1) {\n                this._selectedItems.push(item);\n            }\n        };\n\n        // Mark the given item as unselected.\n        Manager.prototype.unselectItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: de-selection of \" + this._handler + \"(\" +\n                    pk_value + \") failed because its missing in the \" +\n                    \"nodes list.\");\n                return;\n            }\n\n            var item = this._items[idx];\n            item.$selected = false;\n\n            idx = this._selectedItems.indexOf(item);\n            if(idx >= 0) {\n                this._selectedItems.splice(idx, 1);\n            }\n        };\n\n        // Determine if a item is selected.\n        Manager.prototype.isSelected = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: unable to determine if \" + this._handler + \"(\" +\n                    pk_value + \") is selected because its missing in the \" +\n                    \"nodes list.\");\n                return false;\n            }\n\n            return this._items[idx].$selected === true;\n        };\n\n        // Return the metadata object value from `metadatas` matching `name`.\n        Manager.prototype._getMetadataValue = function(metadatas, name) {\n            var i;\n            for(i = 0; i < metadatas.length; i++) {\n                if(metadatas[i].name === name) {\n                    return metadatas[i];\n                }\n            }\n            return null;\n        };\n\n        // Add new value to metadatas if it doesnt exists or increment the\n        // count if it already does.\n        Manager.prototype._addMetadataValue = function(metadatas, value) {\n            var metadata = this._getMetadataValue(metadatas, value);\n            if(metadata) {\n                metadata.count += 1;\n            } else {\n                metadata = {\n                    name: value,\n                    count: 1\n                };\n                metadatas.push(metadata);\n            }\n        };\n\n        // Remove value from metadatas.\n        Manager.prototype._removeMetadataValue = function(metadatas, value) {\n            var metadata = this._getMetadataValue(metadatas, value);\n            if(metadata) {\n                metadata.count -= 1;\n                if(metadata.count <= 0) {\n                    metadatas.splice(metadatas.indexOf(metadata), 1);\n                }\n            }\n        };\n\n        // Update the metadata entry in `metadatas` for the array value and\n        // based on the action.\n        Manager.prototype._updateMetadataArrayEntry = function(\n                metadatas, newValue, action, oldValue) {\n            var self = this;\n\n            if(action === METADATA_ACTIONS.CREATE) {\n                angular.forEach(newValue, function(value) {\n                    // On create ignore empty values.\n                    if(value === '') {\n                        return;\n                    }\n                    self._addMetadataValue(metadatas, value);\n                });\n            } else if(action === METADATA_ACTIONS.DELETE) {\n                angular.forEach(newValue, function(value) {\n                    self._removeMetadataValue(metadatas, value);\n                });\n            } else if(action === METADATA_ACTIONS.UPDATE &&\n                angular.isDefined(oldValue)) {\n                // Any values in added are new on the item, and any values left\n                // in oldArray have been removed.\n                var added = [];\n                var oldArray = angular.copy(oldValue);\n                angular.forEach(newValue, function(value) {\n                    var idx = oldArray.indexOf(value);\n                    if(idx === -1) {\n                        // Value not in oldArray so it has been added.\n                        added.push(value);\n                    } else {\n                        // Value already in oldArray so its already tracked.\n                        oldArray.splice(idx, 1);\n                    }\n                });\n\n                // Add the new values.\n                angular.forEach(added, function(value) {\n                    self._addMetadataValue(metadatas, value);\n                });\n\n                // Remove the old values.\n                angular.forEach(oldArray, function(value) {\n                    self._removeMetadataValue(metadatas, value);\n                });\n            }\n        };\n\n        // Update the metadata entry in `metadatas` for the newValue and based\n        // on the action. Method does not work with array values, use\n        // _updateMetadataArrayEntry for values that are arrays.\n        Manager.prototype._updateMetadataValueEntry = function(\n                metadatas, newValue, action, oldValue) {\n            if(action === METADATA_ACTIONS.CREATE) {\n                // On create ignore empty values.\n                if(newValue === '') {\n                    return;\n                }\n                this._addMetadataValue(metadatas, newValue);\n            } else if(action === METADATA_ACTIONS.DELETE) {\n                this._removeMetadataValue(metadatas, newValue);\n            } else if(action === METADATA_ACTIONS.UPDATE &&\n                angular.isDefined(oldValue)) {\n                if(oldValue !== newValue) {\n                    if(oldValue !== \"\") {\n                        // Decrement the old value\n                        this._removeMetadataValue(metadatas, oldValue);\n                    }\n\n                    // Increment the new value with the \"create\"\n                    // operation.\n                    this._updateMetadataEntry(\n                        metadatas, newValue, METADATA_ACTIONS.CREATE, oldValue);\n                }\n            }\n        };\n\n        // Update the metadata entry in `metadatas` with the newValue and based\n        // on the action. Update action will use the oldValue to remove it from\n        // the metadata.\n        Manager.prototype._updateMetadataEntry = function(\n                metadatas, newValue, action, oldValue) {\n            if(angular.isArray(newValue)) {\n                this._updateMetadataArrayEntry(\n                    metadatas, newValue, action, oldValue);\n            } else {\n                this._updateMetadataValueEntry(\n                    metadatas, newValue, action, oldValue);\n            }\n        };\n\n        // Return the metadata object.\n        Manager.prototype.getMetadata = function() {\n            return this._metadata;\n        };\n\n        // Update the metadata objects based on the given item and action.\n        Manager.prototype._updateMetadata = function(item, action) {\n            var self = this;\n            var oldItem, idx;\n            if(action === METADATA_ACTIONS.UPDATE) {\n                // Update actions require the oldItem if it exist in the\n                // current item listing.\n                idx = this._getIndexOfItem(this._items, item[this._pk]);\n                if(idx >= 0) {\n                    oldItem = this._items[idx];\n                }\n            }\n            angular.forEach(this._metadataAttributes, function(func, attr) {\n                if(angular.isUndefined(self._metadata[attr])) {\n                    self._metadata[attr] = [];\n                }\n                var newValue, oldValue;\n                if(angular.isFunction(func)) {\n                    newValue = func(item);\n                    if(angular.isObject(oldItem)) {\n                        oldValue = func(oldItem);\n                    }\n                } else {\n                    newValue = item[attr];\n                    if(angular.isObject(oldItem)) {\n                        oldValue = oldItem[attr];\n                    }\n                }\n                self._updateMetadataEntry(\n                    self._metadata[attr], newValue, action, oldValue);\n            });\n        };\n\n        // Default implementation of getName(): returns the default name for\n        // this object, if it exists.\n        Manager.prototype.getName = function(obj) {\n            if(!angular.isObject(obj)) {\n                return;\n            }\n            if(angular.isString(obj[this._name_field])) {\n                return obj[this._name_field];\n            }\n        };\n\n        return Manager;\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Manager Helper Service\n *\n * Used by controllers to load managers. It helps the initialization of\n * managers and makes sure that all items in the manager are loaded\n * before resolving the defer.\n */\n\nangular.module('MAAS').service('ManagerHelperService', [\n    '$q', '$timeout', 'ErrorService', 'RegionConnection',\n    function($q, $timeout, ErrorService, RegionConnection) {\n\n        // Loads the manager.\n        this.loadManager = function(scope, manager) {\n            var defer = $q.defer();\n            var self = this;\n\n            // If the manager already has this scope loaded then nothing needs\n            // to be done.\n            if(manager._scopes.indexOf(scope) > -1) {\n                $timeout(function() {\n                    defer.resolve(manager);\n                });\n                return defer.promise;\n            }\n\n            // Do this entire operation with in the context of the region\n            // connection is connected.\n            RegionConnection.defaultConnect().then(function() {\n                if(manager._type === 'notify') {\n                    if(manager.isLoaded()) {\n                        $timeout(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        });\n                    } else {\n                        manager.loadItems().then(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                    }\n                    // Always enable auto reload. This will make sure the items\n                    // are reloaded if the connection goes down.\n                    manager.enableAutoReload();\n\n                    // Remove the scope for the loaded scopes for the manager.\n                    scope.$on(\"$destroy\", function() {\n                        self.unloadManager(scope, manager);\n                    });\n                } else if(manager._type === 'poll') {\n                    if(manager.isPolling()) {\n                        $timeout(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        });\n                    } else {\n                        manager.startPolling().then(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                    }\n\n                    // Stop the polling when the scope is destroyed and its\n                    // not in use by any other scopes.\n                    scope.$on(\"$destroy\", function() {\n                        self.unloadManager(scope, manager);\n                    });\n                } else {\n                    throw new Error(\"Unknown manager type: \" + manager._type);\n                }\n            });\n            return defer.promise;\n        };\n\n        // Gets the list of managers.\n        this.loadManagers = function(scope, managers) {\n            var defer = $q.defer();\n            var loadedManagers = [];\n\n            // Resolves the defer if all managers are loaded.\n            var resolveAllLoaded = function() {\n                if(loadedManagers.length === managers.length) {\n                    defer.resolve(managers);\n                }\n            };\n\n            var self = this;\n            angular.forEach(managers, function(manager) {\n                self.loadManager(scope, manager).then(function(loadedManager) {\n                    loadedManagers.push(loadedManager);\n                    resolveAllLoaded();\n                });\n            });\n            return defer.promise;\n        };\n\n        this.unloadManager = function(scope, manager) {\n            var idx = manager._scopes.indexOf(scope);\n            if(idx > -1) {\n                manager._scopes.splice(idx, 1);\n            }\n            if(manager._type === 'poll' && manager._scopes.length === 0) {\n                manager.stopPolling();\n            }\n        }\n\n        this.unloadManagers = function(scope, managers) {\n            var self = this;\n            angular.forEach(managers, function(manager) {\n                self.unloadManager(scope, manager);\n            });\n        }\n\n        // Tries to parse the specified string as JSON. If parsing fails,\n        // returns the original string. (This is useful since some manager\n        // calls return an error that could be either plain text, or JSON.)\n        this.tryParsingJSON = function(string) {\n            var error;\n            try {\n                error = JSON.parse(string);\n            } catch(e) {\n                if (e instanceof SyntaxError) {\n                    return string;\n                } else {\n                    throw e;\n                }\n            }\n            return error;\n        };\n\n        // Returns a printable version of the specified dictionary (useful\n        // for displaying an error to the user).\n        this.getPrintableString = function(dict, showNames) {\n            var result = '';\n            angular.forEach(dict, function(value, key) {\n                var error = dict[key];\n                if(showNames === true) {\n                    result += key + \": \";\n                }\n                if(angular.isString(error) || angular.isNumber(error)) {\n                    result += error + \"  \";\n                } else if(angular.isObject(error)) {\n                    angular.forEach(error, function(error) {\n                        result += error + \"  \";\n                    });\n                }\n                result = result.trim() + \"\\n\";\n            });\n            return result.trim();\n        };\n\n        // Convert the Python dict error message to displayed message.\n        // We know it's probably a form ValidationError dictionary, so just use\n        // it as such, and recover if that doesn't parse as JSON.\n        this.parseValidationError = function(error, showNames) {\n            error = this.tryParsingJSON(error);\n            if(!angular.isObject(error)) {\n                return error;\n            } else {\n                return this.getPrintableString(error, showNames);\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Manager\n *\n * Manages all of the spaces in the browser. The manager uses the\n * RegionConnection to load the spaces, update the spaces, and listen for\n * notification events about spaces.\n */\n\nangular.module('MAAS').factory(\n    'PollingManager',\n    ['$q', '$timeout', 'RegionConnection', 'Manager',\n    function($q, $timeout, RegionConnection, Manager) {\n\n        function PollingManager() {\n            Manager.call(this);\n\n            // The way this manager recieves its updated information. 'poll'\n            // means this manager periodicly polls for new data from the\n            // websocket.\n            this._type = 'poll';\n\n            // Set to true when polling has been enabled.\n            this._polling = false;\n\n            // The next promise for the polling interval.\n            this._nextPromise = null;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 3000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n        }\n\n        PollingManager.prototype = new Manager();\n\n        // Returns true when currently polling.\n        PollingManager.prototype.isPolling = function() {\n            return this._polling;\n        };\n\n        // Starts the polling.\n        PollingManager.prototype.startPolling = function() {\n            if(!this._polling) {\n                this._polling = true;\n                return this._poll();\n            } else {\n                return this._nextPromise;\n            }\n        };\n\n        // Stops the polling.\n        PollingManager.prototype.stopPolling = function() {\n            this._polling = false;\n            if(angular.isObject(this._nextPromise)) {\n                $timeout.cancel(this._nextPromise);\n                this._nextPromise = null;\n            }\n        };\n\n        // Registers the next polling attempt.\n        PollingManager.prototype._pollAgain = function(timeout) {\n            var self = this;\n            this._nextPromise = $timeout(function() {\n                self._poll();\n            }, timeout);\n            return this._nextPromise;\n        };\n\n        // Polls for the data from the region.\n        PollingManager.prototype._poll = function() {\n            var self = this;\n            return this.reloadItems().then(function(items) {\n                var pollTimeout = self._pollTimeout;\n                if(items.length === 0) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(pollTimeout);\n                return items;\n            }, function(error) {\n                self._pollAgain(self._pollErrorTimeout);\n                return $q.reject(error);\n            });\n        };\n\n        return PollingManager;\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Search Services\n */\n\nangular.module('MAAS').service('SearchService', function() {\n\n    // Holds an empty filter object.\n    var emptyFilter = { _: [] };\n\n    // Return a new empty filter;\n    this.getEmptyFilter = function() {\n        return angular.copy(emptyFilter);\n    };\n\n    // Splits the search string into different terms based on white space.\n    // This handles the ability for whitespace to be inside of '(', ')'.\n    //\n    // XXX blake_r 28-01-15: This could be improved with a regex, but was\n    // unable to come up with one that would allow me to validate the end\n    // ')' in the string.\n    this.getSplitSearch = function(search) {\n        var terms = search.split(' ');\n        var fixedTerms = [];\n        var spanningParentheses = false;\n        angular.forEach(terms, function(term, idx) {\n            if(spanningParentheses) {\n                // Previous term had an opening '(' but not a ')'. This\n                // term should join that previous term.\n                fixedTerms[fixedTerms.length - 1] += ' ' + term;\n\n                // If the term contains the ending ')' then its the last\n                // in the group.\n                if(term.indexOf(')') !== -1) {\n                    spanningParentheses = false;\n                }\n            } else {\n                // Term is not part of a previous '(' span.\n                fixedTerms.push(term);\n\n                var startIdx = term.indexOf('(');\n                if(startIdx !== -1) {\n                    if(term.indexOf(')', startIdx) === -1) {\n                        // Contains a starting '(' but not a ending ')'.\n                        spanningParentheses = true;\n                    }\n                }\n            }\n        });\n\n        if(spanningParentheses) {\n            // Missing ending parentheses so error with terms.\n            return null;\n        }\n        return fixedTerms;\n    };\n\n    // Return all of the currently active filters for the given search.\n    this.getCurrentFilters = function(search) {\n        var filters = this.getEmptyFilter();\n        if(search.length === 0) {\n            return filters;\n        }\n        var searchTerms = this.getSplitSearch(search);\n        if(!searchTerms) {\n            return null;\n        }\n        angular.forEach(searchTerms, function(terms) {\n            terms = terms.split(':');\n            if(terms.length === 1) {\n                // Search term is not specifing a specific field. Gets\n                // add to the '_' section of the filters.\n                if(filters._.indexOf(terms[0]) === -1) {\n                    filters._.push(terms[0]);\n                }\n            } else {\n                var field = terms.shift();\n                var values = terms.join(\":\");\n\n                // Remove the starting '(' and ending ')'.\n                values = values.replace('(', '');\n                values = values.replace(')', '');\n\n                // If empty values then do nothing.\n                if(values.length === 0) {\n                    return;\n                }\n\n                // Split the values based on comma.\n                values = values.split(',');\n\n                // Add the values to filters.\n                if(angular.isUndefined(filters[field])) {\n                    filters[field] = [];\n                }\n                angular.forEach(values, function(value) {\n                    if(filters[field].indexOf(value) === -1) {\n                        filters[field].push(value);\n                    }\n                });\n            }\n        });\n        return filters;\n    };\n\n    // Convert \"filters\" into a search string.\n    this.filtersToString = function(filters) {\n        var search = \"\";\n        angular.forEach(filters, function(terms, type) {\n            // Skip empty and skip \"_\" as it gets appended at the\n            // beginning of the search.\n            if(terms.length === 0 || type === \"_\") {\n                return;\n            }\n            search += type + \":(\" + terms.join(\",\") + \") \";\n        });\n        if(filters._.length > 0) {\n            search = filters._.join(\" \") + \" \" + search;\n        }\n        return search.trim();\n    };\n\n    // Return the index of the value in the type for the filter.\n    this._getFilterValueIndex = function(filters, type, value) {\n        var values = filters[type];\n        if(angular.isUndefined(values)) {\n            return -1;\n        }\n        var lowerValues = values.map(function(value) {\n            return value.toLowerCase();\n        });\n        return lowerValues.indexOf(value.toLowerCase());\n    };\n\n    // Return true if the type and value are in the filters.\n    this.isFilterActive = function(filters, type, value, exact) {\n        var values = filters[type];\n        if(angular.isUndefined(values)) {\n            return false;\n        }\n        if(angular.isUndefined(exact)) {\n            exact = false;\n        }\n        if(exact) {\n            value = \"=\" + value;\n        }\n        return this._getFilterValueIndex(filters, type, value) !== -1;\n    };\n\n    // Toggles a filter on or off based on type and value.\n    this.toggleFilter = function(filters, type, value, exact) {\n        if(angular.isUndefined(filters[type])) {\n            filters[type] = [];\n        }\n        if(exact) {\n            value = \"=\" + value;\n        }\n        var idx = this._getFilterValueIndex(filters, type, value);\n        if(idx === -1) {\n            filters[type].push(value);\n        } else {\n            filters[type].splice(idx, 1);\n        }\n        return filters;\n    };\n\n    // Holds all stored filters.\n    var storedFilters = {};\n\n    // Store a filter for later.\n    this.storeFilters = function(name, filters) {\n        storedFilters[name] = filters;\n    };\n\n    // Retrieve a stored fitler.\n    this.retrieveFilters = function(name) {\n        return storedFilters[name];\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Validation Service\n *\n * Used by controllers to validate user inputs.\n */\n\nangular.module('MAAS').service('ValidationService', [\n    'ConverterService', function(ConverterService) {\n\n        // Pattern that matches a domainname.\n        // XXX 2016-02-24 lamont: This also matches \"example.com.\",\n        // which is wrong.\n        var domainnamePattern =\n            /^([a-z\\d]|[a-z\\d][a-z\\d-.]*[a-z\\d])*$/i;\n\n        // Pattern that matches a hostname.\n        var hostnamePattern =\n            /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])*$/;\n\n        // Pattern that matches a MAC.\n        var macPattern = /^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$/;\n\n        // Pattern used to match IPv4.\n        var ipv4Pattern = new RegExp([\n            '^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n            ].join(''));\n\n        // Returns true if the octets in one equal two with the cidr mask in\n        // bits applied to both.\n        function cidrMatcher(one, two, size, bits) {\n            var part = 0;\n            while(bits > 0) {\n                var shift = size - bits;\n                if(shift < 0) {\n                    shift = 0;\n                }\n\n                var oneShift = one[part] >> shift;\n                var twoShift = two[part] >> shift;\n                if(oneShift !== twoShift) {\n                    return false;\n                }\n                bits -= size;\n                part += 1;\n            }\n            return true;\n        }\n\n        // Return true if the domainname is valid, false otherwise.\n        this.validateDomainName = function(domainname) {\n            // Invalid if the domain is not a string, empty, or more than\n            // 253 characters.\n            if(!angular.isString(domainname) ||\n                domainname.length === 0 || domainname.length > 253) {\n                return false;\n            }\n            return domainnamePattern.test(domainname);\n        };\n\n        // Return true if the hostname is valid, false otherwise.\n        this.validateHostname = function(hostname) {\n            // Invalid if the hostname is not a string, empty, or more than\n            // 63 characters.\n            if(!angular.isString(hostname) ||\n                hostname.length === 0 || hostname.length > 63) {\n                return false;\n            }\n            return hostnamePattern.test(hostname);\n        };\n\n        // Return true if the MAC is valid, false otherwise.\n        this.validateMAC = function(macAddress) {\n            // Invalid if the macAddress is not a string.\n            if(!angular.isString(macAddress)) {\n                return false;\n            }\n            return macPattern.test(macAddress.trim());\n        };\n\n        // Return true if the IP is valid IPv4 address, false otherwise.\n        this.validateIPv4 = function(ipAddress) {\n            // Invalid if the ipAddress is not a string or empty.\n            if(!angular.isString(ipAddress) || ipAddress.length === 0) {\n                return false;\n            }\n            return ipv4Pattern.test(ipAddress);\n        };\n\n        // Return true if the IP is valid IPv6 address, false otherwise.\n        this.validateIPv6 = function(ipAddress) {\n            // Invalid if the ipAddress is not a string, empty, or missing\n            // at least one ':'.\n            if(!angular.isString(ipAddress) ||\n                ipAddress.length === 0 ||\n                ipAddress.indexOf(':') === -1) {\n                return false;\n            }\n            var expandedAddress = ConverterService.ipv6Expand(ipAddress);\n            var octets = ConverterService.ipv6ToGroups(expandedAddress);\n            if(octets.length !== 8) {\n                return false;\n            }\n\n            // Make sure all octets are in range.\n            var i;\n            for(i = 0; i < 8; i++) {\n                if(isNaN(octets[i]) || octets[i] < 0 || octets[i] > 0xffff) {\n                    // Out of range.\n                    return false;\n                }\n            }\n\n            // Don't allow unspecified, loopback, multicast, link-local\n            // unicast, or anything out of range.\n            if(octets[0] < 1 ||\n                octets[0] === 0xff00 ||\n                octets[0] === 0xfe80) {\n                return false;\n            }\n            return true;\n        };\n\n        // Return true if the IP is valid, false otherwise.\n        this.validateIP = function(ipAddress) {\n            return (\n                this.validateIPv4(ipAddress) || this.validateIPv6(ipAddress));\n        };\n\n        // Return true if the ipAddress is in the network.\n        this.validateIPInNetwork = function(ipAddress, network) {\n            var networkSplit = network.split('/');\n            var networkAddress = networkSplit[0];\n            var cidrBits = parseInt(networkSplit[1], 10);\n\n            if(this.validateIPv4(ipAddress) &&\n                this.validateIPv4(networkAddress)) {\n                return cidrMatcher(\n                    ConverterService.ipv4ToOctets(ipAddress),\n                    ConverterService.ipv4ToOctets(networkAddress),\n                    8, cidrBits);\n            } else if(this.validateIPv6(ipAddress) &&\n                this.validateIPv6(networkAddress)) {\n                return cidrMatcher(\n                    ConverterService.ipv6ToGroups(ipAddress),\n                    ConverterService.ipv6ToGroups(networkAddress),\n                    16, cidrBits);\n            }\n            return false;\n        };\n\n        // Return true if the ipAddress is in the network and between the\n        // lowAddress and highAddress inclusive.\n        this.validateIPInRange = function(\n            ipAddress, network, lowAddress, highAddress) {\n            // If the ip address is not even in the network then its\n            // not in the range.\n            if(!this.validateIPInNetwork(ipAddress, network)) {\n                return false;\n            }\n\n            var i, ipOctets, lowOctets, highOctets;\n            if(this.validateIPv4(ipAddress) &&\n                this.validateIPv4(lowAddress) &&\n                this.validateIPv4(highAddress)) {\n\n                // Check that each octet is of the ip address is more or equal\n                // to the low address and less or equal to the high address.\n                ipOctets = ConverterService.ipv4ToOctets(ipAddress);\n                lowOctets = ConverterService.ipv4ToOctets(lowAddress);\n                highOctets = ConverterService.ipv4ToOctets(highAddress);\n                for(i = 0; i < 4; i++) {\n                    if(ipOctets[i] > highOctets[i] ||\n                        ipOctets[i] < lowOctets[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            } else if(this.validateIPv6(ipAddress) &&\n                this.validateIPv6(lowAddress) &&\n                this.validateIPv6(highAddress)) {\n\n                // Check that each octet is of the ip address is more or equal\n                // to the low address and less or equal to the high address.\n                ipOctets = ConverterService.ipv6ToGroups(ipAddress);\n                lowOctets = ConverterService.ipv6ToGroups(lowAddress);\n                highOctets = ConverterService.ipv6ToGroups(highAddress);\n                for(i = 0; i < 8; i++) {\n                    if(ipOctets[i] > highOctets[i] ||\n                        ipOctets[i] < lowOctets[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n    }]);\n"],"sourceRoot":""}