{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/maasserver/static/js/angular/controllers/add_device.js","webpack:///./src/maasserver/static/js/angular/controllers/add_domain.js","webpack:///./src/maasserver/static/js/angular/controllers/add_hardware.js","webpack:///./src/maasserver/static/js/angular/controllers/dashboard.js","webpack:///./src/maasserver/static/js/angular/controllers/domain_details.js","webpack:///./src/maasserver/static/js/angular/controllers/domains_list.js","webpack:///./src/maasserver/static/js/angular/controllers/fabric_details.js","webpack:///./src/maasserver/static/js/angular/controllers/images.js","webpack:///./src/maasserver/static/js/angular/controllers/intro.js","webpack:///./src/maasserver/static/js/angular/controllers/intro_user.js","webpack:///./src/maasserver/static/js/angular/controllers/networks_list.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_networking.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_storage.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_storage_filesystems.js","webpack:///./src/maasserver/static/js/angular/controllers/node_events.js","webpack:///./src/maasserver/static/js/angular/controllers/node_result.js","webpack:///./src/maasserver/static/js/angular/controllers/node_results.js","webpack:///./src/maasserver/static/js/angular/controllers/nodes_list.js","webpack:///./src/maasserver/static/js/angular/controllers/pod_details.js","webpack:///./src/maasserver/static/js/angular/controllers/pods_list.js","webpack:///./src/maasserver/static/js/angular/controllers/prefs.js","webpack:///./src/maasserver/static/js/angular/controllers/settings.js","webpack:///./src/maasserver/static/js/angular/controllers/space_details.js","webpack:///./src/maasserver/static/js/angular/controllers/subnet_details.js","webpack:///./src/maasserver/static/js/angular/controllers/vlan_details.js","webpack:///./src/maasserver/static/js/angular/controllers/zone_details.js","webpack:///./src/maasserver/static/js/angular/controllers/zones_list.js","webpack:///./src/maasserver/static/js/angular/directives/accordion.js","webpack:///./src/maasserver/static/js/angular/directives/boot_images.js","webpack:///./src/maasserver/static/js/angular/directives/call_to_action.js","webpack:///./src/maasserver/static/js/angular/directives/card_loader.js","webpack:///./src/maasserver/static/js/angular/directives/code_lines.js","webpack:///./src/maasserver/static/js/angular/directives/contenteditable.js","webpack:///./src/maasserver/static/js/angular/directives/controller_image_status.js","webpack:///./src/maasserver/static/js/angular/directives/controller_status.js","webpack:///./src/maasserver/static/js/angular/directives/dbl_click_overlay.js","webpack:///./src/maasserver/static/js/angular/directives/enter.js","webpack:///./src/maasserver/static/js/angular/directives/enter_blur.js","webpack:///./src/maasserver/static/js/angular/directives/error_overlay.js","webpack:///./src/maasserver/static/js/angular/directives/error_toggle.js","webpack:///./src/maasserver/static/js/angular/directives/ipranges.js","webpack:///./src/maasserver/static/js/angular/directives/login.js","webpack:///./src/maasserver/static/js/angular/directives/maas_obj_form.js","webpack:///./src/maasserver/static/js/angular/directives/mac_address.js","webpack:///./src/maasserver/static/js/angular/directives/machines_table.js","webpack:///./src/maasserver/static/js/angular/directives/navigation_dropdown.js","webpack:///./src/maasserver/static/js/angular/directives/navigation_mobile.js","webpack:///./src/maasserver/static/js/angular/directives/notifications.js","webpack:///./src/maasserver/static/js/angular/directives/os_select.js","webpack:///./src/maasserver/static/js/angular/directives/placeholder.js","webpack:///./src/maasserver/static/js/angular/directives/pod_parameters.js","webpack:///./src/maasserver/static/js/angular/directives/power_parameters.js","webpack:///./src/maasserver/static/js/angular/directives/proxy_settings.js","webpack:///./src/maasserver/static/js/angular/directives/release_name.js","webpack:///./src/maasserver/static/js/angular/directives/release_options.js","webpack:///./src/maasserver/static/js/angular/directives/script_expander.js","webpack:///./src/maasserver/static/js/angular/directives/script_results_list.js","webpack:///./src/maasserver/static/js/angular/directives/script_runtime.js","webpack:///./src/maasserver/static/js/angular/directives/script_select.js","webpack:///./src/maasserver/static/js/angular/directives/script_status.js","webpack:///./src/maasserver/static/js/angular/directives/ssh_keys.js","webpack:///./src/maasserver/static/js/angular/directives/switches_table.js","webpack:///./src/maasserver/static/js/angular/directives/toggle_control.js","webpack:///./src/maasserver/static/js/angular/directives/type.js","webpack:///./src/maasserver/static/js/angular/directives/version_reloader.js","webpack:///./src/maasserver/static/js/angular/directives/window_width.js","webpack:///./src/maasserver/static/js/angular/factories/bootresources.js","webpack:///./src/maasserver/static/js/angular/factories/configs.js","webpack:///./src/maasserver/static/js/angular/factories/controllers.js","webpack:///./src/maasserver/static/js/angular/factories/devices.js","webpack:///./src/maasserver/static/js/angular/factories/dhcpsnippets.js","webpack:///./src/maasserver/static/js/angular/factories/discoveries.js","webpack:///./src/maasserver/static/js/angular/factories/domains.js","webpack:///./src/maasserver/static/js/angular/factories/events.js","webpack:///./src/maasserver/static/js/angular/factories/fabrics.js","webpack:///./src/maasserver/static/js/angular/factories/general.js","webpack:///./src/maasserver/static/js/angular/factories/ipranges.js","webpack:///./src/maasserver/static/js/angular/factories/machines.js","webpack:///./src/maasserver/static/js/angular/factories/node_results.js","webpack:///./src/maasserver/static/js/angular/factories/nodes.js","webpack:///./src/maasserver/static/js/angular/factories/notifications.js","webpack:///./src/maasserver/static/js/angular/factories/packagerepositories.js","webpack:///./src/maasserver/static/js/angular/factories/pods.js","webpack:///./src/maasserver/static/js/angular/factories/region.js","webpack:///./src/maasserver/static/js/angular/factories/scripts.js","webpack:///./src/maasserver/static/js/angular/factories/services.js","webpack:///./src/maasserver/static/js/angular/factories/spaces.js","webpack:///./src/maasserver/static/js/angular/factories/sshkeys.js","webpack:///./src/maasserver/static/js/angular/factories/staticroutes.js","webpack:///./src/maasserver/static/js/angular/factories/subnets.js","webpack:///./src/maasserver/static/js/angular/factories/switches.js","webpack:///./src/maasserver/static/js/angular/factories/tags.js","webpack:///./src/maasserver/static/js/angular/factories/users.js","webpack:///./src/maasserver/static/js/angular/factories/vlans.js","webpack:///./src/maasserver/static/js/angular/factories/zones.js","webpack:///./src/maasserver/static/js/angular/filters/by_fabric.js","webpack:///./src/maasserver/static/js/angular/filters/by_space.js","webpack:///./src/maasserver/static/js/angular/filters/by_subnet.js","webpack:///./src/maasserver/static/js/angular/filters/by_vlan.js","webpack:///./src/maasserver/static/js/angular/filters/nodes.js","webpack:///./src/maasserver/static/js/angular/filters/order_by_date.js","webpack:///./src/maasserver/static/js/angular/filters/remove_default_vlan.js","webpack:///./src/maasserver/static/js/angular/maas.js","webpack:///./src/maasserver/static/js/angular/services/browser.js","webpack:///./src/maasserver/static/js/angular/services/converter.js","webpack:///./src/maasserver/static/js/angular/services/error.js","webpack:///./src/maasserver/static/js/angular/services/json.js","webpack:///./src/maasserver/static/js/angular/services/log.js","webpack:///./src/maasserver/static/js/angular/services/manager.js","webpack:///./src/maasserver/static/js/angular/services/managerhelper.js","webpack:///./src/maasserver/static/js/angular/services/pollingmanager.js","webpack:///./src/maasserver/static/js/angular/services/search.js","webpack:///./src/maasserver/static/js/angular/services/validation.js","webpack:///./src/maasserver/static/js/ui/maas-ui.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","angular","controller","$scope","DevicesManager","SubnetsManager","DomainsManager","ManagerHelperService","ValidationService","newDevice","cloneDevice","isObject","domain","interfaces","mac","ipAssignment","subnetId","ipAddress","getDefaultDomain","$parent","addDeviceScope","subnets","getItems","domains","viewable","error","ipAssignments","title","device","show","hide","$emit","nameHasError","length","validateHostname","macHasError","deviceInterface","validateMAC","ipHasError","validateIP","validateIPInNetwork","cidr","isNumber","subnet","getItemFromList","deviceHasError","externalIpError","staticIpError","addInterface","push","isPrimaryInterface","indexOf","deleteInterface","splice","cancel","save","addAnother","convertedDevice","hostname","primary_mac","extra_macs","forEach","nic","ip_assignment","ip_address","convertDeviceToProtocol","create","then","parseValidationError","loadManagers","addDomainScope","authoritative","validateDomainName","domainHasError","copy","convertDomainToProtocol","$http","ZonesManager","MachinesManager","GeneralManager","RegionConnection","addHardwareScope","model","zones","architectures","getData","hwe_kernels","default_min_hwe_kernel","power_types","macAddressRegex","machine","chassis","virshFields","label","field_type","default","choices","required","defaultArchitecture","newMachine","cloneMachine","macs","zone","architecture","min_hwe_kernel","power","type","parameters","text","newChassis","cloneChassis","chassisPowerTypes","description","fields","mode","loadItems","showMachine","showChassis","addMac","removeMac","idx","invalidName","validateMac","machineHasError","in_error","chassisHasErrors","power_type","field","isUndefined","powerParametersHasError","saveMachine","pxe_mac","shift","map","power_parameters","id","saveChassis","params","chassis_type","username","method","url","data","$","param","headers","Content-Type","loadManager","$window","$rootScope","$routeParams","$location","DiscoveriesManager","VLANsManager","ConfigsManager","deviceIPOptions","page","loaded","discoveredDevices","machines","devices","configManager","networkDiscovery","column","selectedDevice","convertTo","predicate","last_seen","sortTable","reverse","proxyManager","updateItem","createItem","createInterface","Error","getDiscoveryName","discovery","getSubnetName","getName","getVLANName","vlanId","vlan","toggleSelected","deviceId","discovered","getDomainByName","slice","split","parent","goTo","saved","filter","option","preProcess","item","mac_address","ip","afterSave","obj","_removeItem","isString","path","UsersManager","ErrorService","domainLoaded","displayname","editSummary","action","editRow","deleteRow","domainsManager","newObject","supportedRecordTypes","enterEditSummary","exitEditSummary","isRecordAutogenerated","row","dnsresource_id","editRecord","previous_rrdata","rrdata","previous_rrtype","rrtype","previous_name","previous_ttl","ttl","removeRecord","confirmRemoveRecord","deleteDNSRecord","stopEditingRow","isSuperUser","isDefaultDomain","canBeDeleted","rrsets","deleteButton","actionInProgress","addRecordButton","cancelAction","deleteConfirmButton","deleteDomain","activeDomain","getActiveItem","requestedDomain","parseInt","domain_id","isNaN","raiseError","setActiveItem","$filter","currentpage","loading","addDomain","cancelAddDomain","FabricsManager","SpacesManager","ControllersManager","fabricLoaded","fabric","$watch","updateVLANs","rows","racks","vlans","space","space_name","vlan_name","subnet_name","rack_sids","rack_sid","rack","system_id","keys","key","fabricManager","controllers","isDefaultFabric","confirmingDelete","cancelDeleteButton","deleteFabric","search","reply","activeFabric","requestedFabric","fabric_id","BootResourcesManager","bootResources","autoImport","isArray","resources","PackageRepositoriesManager","repoManager","hasImages","maasName","upstreamDNS","mainArchive","portsArchive","httpProxy","skip","clickContinue","welcomeInError","form","$maasForm","hasErrors","networkInError","inError","objs","canContinue","force","location","reload","MAAS_config","completed_intro","managers","repo","user","sshkeys_count","markIntroComplete","user_completed_intro","getAuthUser","filterByVLAN","filterByFabric","filterBySpace","filterByNullSpace","getURLParameters","by","groupBy","ADD_FABRIC_ACTION","selectedTitle","objectName","ADD_VLAN_ACTION","ADD_SPACE_ACTION","ADD_SUBNET_ACTION","subnetManager","fabrics","spaceManager","spaces","vlanManager","group","orphanVLANs","actionObjectInitializers","vlan_ids","updateGroupBy","previous_space","index","updateOrphanVLANs","previous_fabric","previous_vlan","fabric_name","updateFabricsGroupBy","updateActions","actionOptions","actionChanged","actionOption","getFabricNameById","fabricId","actionSubnetPreSave","$on","$interval","TagsManager","ServicesManager","ScriptsManager","DEVICE_IP_ASSIGNMENT","external","dynamic","static","updateTitle","node","fqdn","updateHeader","header","editing","editing_domain","options","selected","updateAvailableActionOptions","availableOptions","allOptions","getAllActionOptions","node_type","actions","updatePower","bmc_node_count","power_bmc_node_count","canEdit","updateSummary","summary","tags","hasUsableArchitectures","hasInvalidArchitecture","updateServices","isController","services","getServices","service","updateDevices","child","nicIdx","deviceWithMAC","links","link","lIdx","deviceWithLink","nodeLoaded","$watchCollection","storageController","networkingController","showing_confirmation","osinfo","section","area","osSelection","osystem","release","hwe_kernel","commissionOptions","enableSSH","skipNetworking","skipStorage","updateFirmware","configureHBA","commissioningSelection","testSelection","releaseOptions","checkingPower","scripts","getDeviceIPAssignment","events","limit","0","1","2","3","4","updateNode","queryPower","nodesManager","checkPowerState","console","log","tagsAutocomplete","query","autocomplete","getPowerStateClass","power_state","getPowerStateText","canCheckPowerState","isUbuntuOS","isUbuntuCoreOS","isCustomOS","isActionError","isDeployError","missing_osinfo","osystems","isSSHKeyError","getSSHKeyCount","optionChanged","actionCancel","actionGo","extra","distro_series","enable_ssh","skip_networking","skip_storage","commissioning_scripts","testing_scripts","status_code","erase","secure_erase","secureErase","quick_erase","quickErase","performAction","$reset","getArchitecturePlaceholder","isDevice","invalidArchitecture","isRackControllerConnected","isLocked","locked","editHeaderDomain","editHeader","editHeaderInvalid","cancelEditHeader","saveEditHeader","cancelEditSummary","saveEditSummary","tag","invalidPowerType","editPower","cancelEditPower","saveEditPower","allowShowMoreEvents","showMoreEvents","getEventText","event","getPowerEventError","level","hasPowerEventError","getPowerEventErrorText","hasActionPowerError","actionName","hasPowerError","missing_packages","getPowerErrors","result","packages","sort","getServiceClass","status","hasCustomCommissioningScripts","script_type","controllerLoaded","scope","showFailedTestWarning","testing_status","getCPUSubtext","cpu_count","cpu_speed","type_name","type_name_title","activeNode","originalInterfaces","filtered","usedVLANs","inter","parents","vlan_id","childInterface","found","link_id","interfaceType","vid","modes","isFunction","getValue","this","nicType","allowLinkUp","JSONService","INTERFACE_TYPE","PHYSICAL","BOND","BRIDGE","VLAN","ALIAS","INTERFACE_TYPE_TEXTS","physical","bond","bridge","alias","LINK_MODE","AUTO","STATIC","DHCP","LINK_UP","LINK_MODE_TEXTS","auto","dhcp","link_up","SELECTION_MODE","NONE","SINGLE","MULTI","DELETE","ADD","CREATE_BOND","CREATE_BRIDGE","CREATE_PHYSICAL","EDIT","IP_ASSIGNMENT","updateLoaded","nodeHasLoaded","managersHaveLoaded","updateInterfaces","vlanTable","addedVlans","children","editInterface","selectedMode","formatted","members","vlanRecord","primary_rack","secondary_rack","sort_key","getVLANText","a","b","localeCompare","nic_copy","subnet_id","interfaceLinksMap","linkMaps","newInterface","parentId","linkId","newParent","iType","isAlias","isVLAN","canAddAlias","canAddVLAN","addTypeChanged","leaveSingleSelectionMode","updateNewInterface","mapNICToOriginalLink","nic_id","originalInteface","getDefaultVLAN","default_vlan_id","getUnusedVLANs","ignoreVLANs","getSelectedInterfaces","selectedInterfaces","splitKey","getNextName","prefix","tableInfo","interfaceErrorsByLinkId","newBondInterface","newBridgeInterface","bondOptions","isLimitedEditingAllowed","isAllNetworkingDisabled","isBootInterface","is_boot","getInterfaceTypeText","isDefined","getLinkModeText","getSubnetText","getSubnet","isInterfaceNameInvalid","otherNic","isLinkModeDisabled","getInterfaceError","isIPAddressInvalid","getUniqueKey","toggleInterfaceSelect","isInterfaceSelected","cannotEditInterface","isEditing","edit","undefined","defaultSubnet","fabricChanged","vlanChanged","fabricChangedForm","updateValue","vlanChangedForm","subnetChanged","subnetChangedForm","modeChanged","modeChangedForm","originalLink","editCancel","preProcessInterface","interface_id","saveInterface","updateInterface","saveInterfaceLink","linkSubnet","editSave","isShowingDeleteConfirm","isShowingAdd","canAddAliasOrVLAN","canAddAnotherVLAN","getRemoveTypeText","canBeRemoved","remove","quickRemove","confirmRemove","unlinkSubnet","add","defaultVLAN","defaultMode","quickAdd","getAddName","aliasIdx","createVLANInterface","isDisabled","canCreateBond","isShowingCreateBond","showCreateBond","primary","lacpRate","xmitHashPolicy","hasBootInterface","getInterfacePlaceholderMACAddress","isMACAddressInvalid","invalidEmpty","showLACPRate","showXMITHashPolicy","cannotAddBond","addBond","bond_mode","bond_lacp_rate","bond_xmit_hash_policy","createBondInterface","canCreateBridge","isShowingCreateBridge","showCreateBridge","bridge_stp","bridge_fd","cannotAddBridge","addBridge","createBridgeInterface","isShowingCreatePhysical","showCreatePhysical","macError","errorMsg","cannotAddPhysicalInterface","addPhysicalInterface","createPhysicalInterface","errorStr","tryParse","disks","availableNew","single","disk","ConverterService","MIN_PARTITION_SIZE","MUTLI","UNMOUNT","UNFORMAT","FORMAT_AND_MOUNT","PARTITION","BCACHE","RAID","VOLUME_GROUP","LOGICAL_VOLUME","RAID_MODES","min_disks","allows_spares","calculateSize","minSize","numDisks","hasMountedFilesystem","filesystem","mount_point","hasFormattedUnmountedFilesystem","fstype","isInUse","is_format_fstype","available_size","getTags","cache_set_id","block_id","partition_id","updateDisks","used","cachesets","filesystems","has_disks","size_human","mount_options","filesystem_id","original_type","original","parent_type","partitions","partition","special_filesystems","oldFilesystem","filesystemsMap","$selected","updateFilesystemSelection","used_by","used_for","cacheset","oldCacheSet","cachesetsMap","updateCacheSetsSelection","available","has_partitions","available_size_human","used_size_human","serial","test_status","firmware_version","oldDisk","availableMap","$options","newDevices","updateAvailableSelection","updateAvailable","filesystemMode","filesystemAllSelected","cachesetsMode","cachesetsAllSelected","availableMode","availableAllSelected","deselectAll","items","capitalizeFirstLetter","string","charAt","toUpperCase","getIndexFromName","match","RegExp","exec","dIdx","Math","max","isNameAlreadyInUse","exclude_disk","j","isLogicalVolume","showMembers","isBootDiskDisabled","setAsBootDisk","setBootDisk","getSelectedFilesystems","toggleFilesystemSelect","toggleFilesystemAllSelect","isFilesystemsDisabled","isAllStorageDisabled","filesystemCancel","filesystemUnmount","quickFilesystemUnmount","filesystemConfirmUnmount","updateFilesystem","filesystemDelete","quickFilesystemDelete","filesystemConfirmDelete","unmountSpecialFilesystem","deletePartition","deleteFilesystem","hasUnmountedFilesystem","showFreeSpace","getDeviceType","getSelectedAvailable","toggleAvailableSelect","toggleAvailableAllSelect","isAvailableDisabled","canFormatAndMount","getPartitionButtonText","availablePartitionSpace","space_to_reserve","partition_table_type","INITIAL_PARTITION_OFFSET","roundByBlockSize","canAddPartition","isNameInvalid","nameHasChanged","parentName","availableCancel","usesMountPoint","usesStorage","isMountPointInvalid","mountPoint","canDelete","used_size","availableDelete","availableQuickDelete","availableEdit","editingTags","editingFilesystem","availableQuickEdit","availableConfirmEdit","mountOptions","updateDisk","availableConfirmDelete","deleteVolumeGroup","deleteDisk","availablePartition","size_and_units","size","sizeUnits","availableQuickPartition","getAddPartitionName","isAddPartitionSizeInvalid","test","bytes","unitsToBytes","roundUnits","availableConfirmPartition","removeDisk","available_space","createPartition","getSelectedCacheSets","toggleCacheSetSelect","toggleCacheSetAllSelect","isCacheSetsDisabled","cacheSetCancel","canDeleteCacheSet","cacheSetDelete","quickCacheSetDelete","cacheSetConfirmDelete","deleteCacheSet","canCreateCacheSet","createCacheSet","getCannotCreateBcacheMsg","canCreateBcache","createBcache","cacheMode","fstypeChanged","isNewDiskNameInvalid","createBcacheCanSave","availableConfirmCreateBcache","cache_set","cache_mode","canCreateRAID","createRAID","spares","getAvailableRAIDModes","getTotalNumberOfAvailableSpares","diff","getNumberOfRemainingSpares","allowed","showSparesColumn","RAIDModeChanged","isActiveRAIDMember","isSpareRAIDMember","setAsActiveRAIDMember","setAsSpareRAIDMember","getNewRAIDSize","Number","MAX_VALUE","deviceSize","min","bytesToUnits","createRAIDCanSave","availableConfirmCreateRAID","block_devices","spare_devices","spare_partitions","canCreateVolumeGroup","createVolumeGroup","getNewVolumeGroupSize","total","createVolumeGroupCanSave","availableConfirmCreateVolumeGroup","canAddLogicalVolume","availableLogicalVolume","namePrefix","isLogicalVolumeNameInvalid","newLogicalVolumeNameChanged","isAddLogicalVolumeSizeInvalid","availableConfirmLogicalVolume","createLogicalVolume","authUser","is_superuser","owner","hasStorageLayoutIssues","storage_layout_issues","SpecialFilesystem","isValid","startsWith","describe","parts","join","dropdown","addSpecialFilesystem","addSpecialFilesystemFinished","canMount","mount","mountSpecialFilesystem","EventsManagerFactory","eventsManager","getManager","days","getMaximumDays","eventsLoaded","loadMore","loadMaximumDays","destroy","NodeResultsManagerFactory","nodeResultsManager","requestedResult","getItem","get_result_data","output","resultLoaded","updateLogs","had_installation","logs","installation_results","selectedLog","commissioning_results","testing_results","results","updateLogOutput","resultsLoaded","logOutput","getSummaryXML","getSummaryYAML","loadHistory","showing_results","history_list","showing_history","loading_history","get_history","history","SearchService","SwitchesManager","isViewingSelected","tab","tabs","toLowerCase","enterViewSelected","previous_search","leaveViewSelected","updateFilters","updateAllViewableChecked","filtered_items","allViewableChecked","clearAction","resetActionProgress","zoneSelection","shouldClearAction","selectedItems","removeEmptyFilter","updateActionErrorCount","actionErrorCount","supportsAction","action_failed","progress","actionProgress","completed","errors","affected_nodes","updateSelectedItems","hasActionsFailed","manager","unselectItem","hasActionsInProgress","switches","showswitches","pagetitle","searchValid","getSelectedItems","metadata","getMetadata","filters","getEmptyFilter","takeActionOptions","syncStatuses","addController","registerUrl","register_url","registerSecret","register_secret","addHardwareOption","addHardwareOptions","toggleTab","clearSearch","toggleChecked","isSelected","selectItem","toggleCheckAll","onNodeListingChanged","nodes","showSelected","toggleFilter","filtersToString","isFilterActive","getCurrentFilters","selectColumnOrSort","actionOptionSelected","zone_id","addErrorToActionProgress","addHardwareOptionChanged","addDevice","cancelAddDevice","statusPoll","storeFilters","machinesFilter","retrieveFilters","devicesFilter","controllersFilter","switchesFilter","PodsManager","pod","podManager","sentence","operation","bind","refresh","deleteItem","inProgress","compose","storage","boot","machinesSearch","editPodConfiguration","exitEditPodConfiguration","actionOptionChanged","getPodTypeTitle","canCompose","capabilities","composeMachine","composePreProcess","sorted","constraint","cancelCompose","composeAddStorage","composeSetBootDisk","composeRemoveDisk","startWatching","now","getDefaultZone","activePod","pods","filteredItems","open","cpu_over_commit_ratio","memory_over_commit_ratio","powerTypes","action_error","addPod","cancelAddPod","getPowerTypeTitle","powerType","DHCPSnippetsManager","snippetsManager","snippets","known_architectures","pockets_to_disable","components_to_disable","packageRepositoriesManager","repositories","newSnippet","editSnippet","deleteSnippet","snippetTypes","newRepository","editRepository","deleteRepository","repositoryEnabledToggle","repository","repositoryEnterRemove","repositoryExitRemove","repositoryConfirmRemove","isPPA","isMirror","repositoryEnterEdit","repositoryExitEdit","repositoryAdd","enabled","arches","distributions","components","repositoryAddCancel","getSnippetTypeText","snippet","getSnippetAppliesToObject","getSnippetAppliesToText","snippetEnterRemove","snippetExitRemove","snippetConfirmRemove","snippetEnterEdit","snippetExitEdit","snippetToggle","snippetAdd","snippetAddCancel","spaceLoaded","updateSubnets","isDefaultSpace","subnet_ids","deleteSpace","activeSpace","requestedSpace","space_id","source","version","StaticRoutesManager","active_discovery_data","active_discovery_interval","staticRoutes","staticRoutesManager","actionError","newStaticRoute","editStaticRoute","deleteStaticRoute","MAP_SUBNET_ACTION","DELETE_ACTION","ALLOC_TYPES","5","6","NODE_TYPES","updateIPVersion","ipVersion","subnetLoaded","updateFabric","ipSort","ipv4ToInteger","ipv6Expand","getAllocType","allocType","str","getSubnetCIDR","destId","allocTypeSort","alloc_type","getUsageForIP","node_summary","nodeType","bmcs","dns_records","nodeTypeSort","ownerSort","sortIPTable","actionRetry","scanSubnet","scan_started_on","deleteSubnet","subnetPreSave","changedFields","addStaticRoute","gateway_ip","destination","metric","cancelAddStaticRoute","isStaticRouteInEditMode","route","staticRouteToggleEditMode","isStaticRouteInDeleteMode","staticRouteEnterDeleteMode","staticRouteCancelDelete","staticRouteConfirmDelete","choice","activeSubnet","requestedSubnet","objects","self","vm","updateManagementRacks","primaryRack","secondaryRack","updateRelatedControllers","relatedControllers","updateRelatedSubnets","relatedSubnets","updatePossibleActions","relay_vlan","RELAY_DHCP_ACTION","DISABLE_DHCP_ACTION","dhcp_on","PROVIDE_DHCP_ACTION","isFabricDefault","vlanLoaded","provideDHCPAction","getSpaceName","getActionByName","initProvideDHCP","forRelay","relayVLAN","maxIPs","startIP","endIP","gatewayIP","needsDynamicRange","iprange","statistics","suggested_dynamic_range","needsGatewayIP","subnetMissingGatewayIP","updatePrimaryRack","updateSecondaryRack","updateSubnet","filterPrimaryRack","suggested_gateway","num_addresses","startPlaceholder","start","endPlaceholder","end","gatewayPlaceholder","canPerformAction","gateway","configureDHCP","extraDHCP","relay","disableDHCP","deleteVLAN","getFullVLANName","getDHCPStatus","activeVLAN","requestedVLAN","zoneLoaded","zoneManager","isDefaultZone","activeZone","requestedZone","addZone","closeZone","directive","restrict","element","attrs","clickHandler","evt","toggleClass","find","on","off","template","$element","$document","design","templateUrl","files_version","saving","stopping","ubuntuImages","isNew","tooMany","showingAdvanced","connecting","errorMessage","source_type","keyring_filename","keyring_data","releases","selections","changed","ubuntuCoreImages","ubuntu_core","images","otherImages","other","generatedImages","customImages","ubuntuDeleteId","removingImage","getTitleIcon","showMirrorPath","isShowingAdvancedOptions","toggleAdvancedOptions","bothKeyringOptionsSet","showConnectButton","sourceChanged","currentSources","ubuntu","sources","prevNew","updateSource","regenerateUbuntuImages","connect","isConnectButtonDisabled","getSourceParams","selectDefaults","arch","fetch","fromJson","showConnectBlock","showSelections","getUbuntuLTSReleases","deleted","getUbuntuNonLTSReleases","getArchitectures","toggleSelection","showImagesTable","getResource","resource","resource_os","rtype","image","icon","beingDeleted","resourceId","downloading","name_split","regenerateUbuntuCoreImages","ubuntuCoreImage","checked","regenerateOtherImages","otherImage","_regenerateImages","image_id","regenerateGeneratedImages","regenerateCustomImages","ltsIsSelected","commissioningSeriesSelected","commissioning_series","cancelRemove","deleteImage","showStopImportButton","region_import_running","showSaveSelection","canSaveSelection","commissioning_series_being_deleted","commissioning_series_arches","getSaveSelectionText","canStopImport","getStopImportText","stopImport","saveSelection","saveUbuntu","getNewSelections","newObjs","oldSelections","newSelections","selection","source_len","toggleUbuntuCoreSelection","saveUbuntuCoreSelection","saveUbuntuCore","toggleOtherSelection","saveOtherSelection","saveOther","confirmDeleteImage","ready","startPolling","ubuntu_core_images","other_images","stopPolling","run","$templateCache","put","replace","require","maasCta","ngModel","ngModelCtrl","defaultTitle","select","shown","$setViewValue","getTitle","$modelValue","secondary","getOptionTitle","$viewChangeListeners","$eval","ngChange","stopPropagation","$apply","$compile","include","maasCardLoader","html","contents","maasCodeLines","attributes","empty","lines","newLine","insert","each","ngDisabled","maasEditing","focusHandler","blur","changeHandler","$render","$viewValue","unbind","$timeout","statuses","updateStatuses","controllerIds","checkImageStates","register","known","runningInterval","startTimeout","CHECK_INTERVAL","unregister","showSpinner","getImageStatus","ControllerImageStatusService","systemId","unwatch","registered","textOnly","getClass","countClass","classes","class_name","counter","updateStatusClass","serviceClass","serviceText","styleElement","document","createElement","innerHTML","getElementsByTagName","appendChild","BrowserService","transclude","maasDblClickOverlay","clickElement","overlay","tagName","createEvent","initMouseEvent","window","dispatchEvent","css","cursor","triggerHandler","overlayClick","preventDefault","overlayDblClick","browser","addClass","which","maasEnter","jasmine","Image","src","markDisconnected","connected","showDisconnected","clientError","wasConnected","watchConnection","isConnected","_error","disconnectedPromise","cancelTimeout","watchConnectionAndError","removeClass","IPRangesManager","ipranges","iprangeManager","newRange","editIPRange","deleteIPRange","addRange","start_ip","end_ip","comment","cancelAddRange","ipRangeCanBeModified","range","isIPRangeInEditMode","ipRangeToggleEditMode","ipRangeClearEditMode","isIPRangeInDeleteMode","ipRangeEnterDeleteMode","ipRangeCancelDelete","ipRangeConfirmDelete","ipRangeSort","factory","visitPage","Bakery","WebHandler","BakeryStorage","localStorage","getBakery","loginURL","externalAuthURL","attr","bakery","Info","VisitURL","nextPath","Accept","response","currentTarget","responseText","MAASFormController","savingKeys","managerMethod","cloneObject","clonedObj","isTableForm","tableForm","saveOnBlur","isSaving","showInputSaving","errorScope","registerField","unregisterField","startEditingField","stopEditingField","clearErrors","updatedObj","newObj","errorJson","errorField","setErrors","v","saveForm","newValue","inline","MAASGroupController","timeout","formController","keyIdx","pre","onChange","subtleText","subtle","missingAttrs","disabled","disableLabel","labelElement","labelWidth","labelLeft","append","labelInfo","infoWrapper","infoIcon","infoTooltip","inputWrapper","inputWidth","placeholder","inputElement","blurOnEnter","val","currentValue","placeholderEnabled","childScope","$new","_ngDisabled","_selectValue","_selectNgChange","_change","values","checkScope","_selectedValues","_checked","_toggleChecked","tagsScope","_tags","hiddenScope","_toggle","switchScope","_changed","onValue","offValue","sliderScope","_slider","inputClass","errorsElement","helpText","helpTextElement","setTimeout","focus","hasClass","subtleTextElement","removeAttr","ul","ele","macAddressFormat","numbers","$parsers","$formatters","hideCheckboxes","onListingChange","onCheckAll","onCheck","SPINNER_STATUSES","table","filteredMachines","updateAllChecked","$machine","showNodeStatus","other_test_status","getReleaseTitle","os_release","getStatusText","releaseTitle","trim","$machines","e","NotificationsManager","notifications","dismiss","categories","categoryTitles","warning","success","info","categoryClasses","categoryNotifications","cns","category","notification","maasOsSelect","getSelectableReleases","allChoices","getSelectableKernels","kernels","os","osKernels","getDefaultOrFirst","array","defaultValue","weightValue","first","weightedPresent","setDefault","default_osystem","default_release","kernel","selectedOSChanged","selectedReleaseChanged","ngPlaceholder","hideType","podTypes","fieldsElement","updateFields","podType","$destroy","maasObjForm","getType","driver_type","req","input_type","replaceWith","maasPowerParameters","$sce","enableHttpProxy","usePeerProxy","proxy_type","releaseName","setText","maasReleaseOptions","onEraseChange","globalOptions","$attrs","target","startTime","runTime","estimatedRunTime","scriptStatus","incrementCounter","seconds","floor","Date","minutes","hours","new_counter","promise","$q","scriptType","allScripts","getScripts","script","tags_string","onTagAdding","refocus","tagsInput","tagsInputScope","isolateScope","eventHandlers","input","change","for_hardware","getIcon","SSHKeysManager","groupedKeys","authId","sourceTitles","lp","gh","upload","openRow","rowMode","trustAsHtml","close","canImportKeys","importKeys","protocol","auth_id","__all__","confirmDelete","keyMap","groupObj","keysource","keysourceKey","switchHasError","filteredSwitches","switch_","$switch_","$switches","$attr","isToggled","toggleMenu","ngType","valid_types","LogService","reloadPage","enableAutoReload","site","href","oldValue","onResize","windowWidth","innerWidth","message","_loaded","_data","_polling","_nextPromise","_pollTimeout","_pollErrorTimeout","_pollEmptyTimeout","isLoaded","isPolling","_poll","_loadData","callMethod","newData","_pollAgain","pollTimeout","connection_error","defer","resolve","Manager","_pk","_handler","registerNotifier","onNotify","NodesManager","service_ids","service_id","_metadataAttributes","_replaceItem","PollingManager","_batchKey","createDNSRecord","record","ip_addresses","updateDNSRecord","_items","EventsManager","nodeId","_nodeId","_factory","_maxDays","_managers","_initBatchLoadParameters","node_id","max_days","destroyManager","setMaximumDays","isLoading","_getManager","machine_actions","polling","nextPromise","device_actions","region_controller_actions","rack_controller_actions","region_and_rack_controller_actions","min_hwe_kernels","replaceData","oldData","isEmpty","bond_options","newPowerType","oldPowerType","newItem","release_options","_autoReload","_type","_scopes","_getInternalData","isDataLoaded","isDataPolling","apply","waitingCount","_reloadFunc","registerHandler","disableAutoReload","unregisterHandler","storage_tags","NodeResultsManager","_node","hardware_type","_getStorageSubtext","deviceinfo","_updateObject","existing","updated","_addOrReplace","showing_menu","_processItem","result_section","result_type","subtext","hardware_type_results","physical_blockdevice","_getIndexOfItem","_updateMetadata","_removeItemByIdFromArray","_selectedItems","hw_type","ret","_area","has_surfaced","script_id","data_type","state","updateInterfaceForm","volume_group_id","blockdevice_id","partition_size","$cookies","MSG_TYPE","RESPONSE_TYPE","callbacks","requests","requestId","websocket","autoReconnect","retryTimeout","defaultConnectDefer","handlers","notifiers","newRequestId","func","unregisterNotifier","buildSocket","WebSocket","_buildUrl","onopen","onerror","onclose","onmessage","onMessage","_getProtocol","host","port","pathname","proto","csrftoken","base","newPath","newPort","encodeURIComponent","defaultConnect","opened","errored","reject","msg","onResponse","request_id","remembered_request","request","handler","remember","send","toJson","getLargestRange","largest_range","ranges","equals","purpose","hasDynamicRange","matching","_authUser","authuser","_loadAuthUser","reloadItems","addRackController","foreign_objects","standardFilter","mappings","cpu","cores","ram","memory","pod-id","isInteger","matches","lowerTerm","exact","negate","parseFloat","_matches","terms","term","matched","mapFunc","substring","no_match","field2","aDate","bDate","getTime","config","$interpolateProvider","$routeProvider","$httpProvider","versionedPath","startSymbol","endSymbol","defaults","xsrfCookieName","xsrfHeaderName","routes","when","redirectTo","reloadOnSearch","controllerAs","superuser","otherwise","next","current","ga","q","arguments","userId","analytics_user_id","uuid","hash","regex","matcher","navigator","userAgent","UNITS","unit","converted","abs","toFixed","units","block_size","ipv4ToOctets","octets","part","pow","expandedAddress","groups","substr","ipv6ToGroups","jsonString","JSON","parse","_typeof","logging","logLevel","performance","_debug","debug","_log","_info","_warn","warn","formatMilliseconds","milliseconds","__log","args","Array","unshift","METADATA_ACTIONS","CREATE","UPDATE","_name_field","_isLoading","_extraLoadDefers","_extraReloadDefers","_actionQueue","_activeItem","_metadata","pk_value","len","_replaceItemInArray","_batchLoadItems","extra_func","callLoad","_resolveDefers","defersArray","_rejectDefers","clear","processActions","updatedIdx","updatedItem","updateItems","clearActiveItem","canProcessActions","_getMetadataValue","metadatas","_addMetadataValue","count","_removeMetadataValue","_updateMetadataArrayEntry","added","oldArray","_updateMetadataValueEntry","_updateMetadataEntry","oldItem","loadedManagers","loadedManager","tryParsingJSON","SyntaxError","getPrintableString","dict","showNames","emptyFilter","_","getSplitSearch","fixedTerms","spanningParentheses","startIdx","searchTerms","_getFilterValueIndex","storedFilters","domainnamePattern","hostnamePattern","macPattern","ipv4Pattern","cidrMatcher","one","two","bits","domainname","macAddress","validateIPv4","validateIPv6","network","networkSplit","networkAddress","cidrBits","validateIPInRange","lowAddress","highAddress","ipOctets","lowOctets","highOctets","MAASUI","utils","fn","attachEvent","readyState","addEventListener","el","className","classList","toggle","existingIndex","contains","findAncestor","parentElement"],"mappings":"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","file":"maas-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Device Controller\n */\n\nangular.module('MAAS').controller('AddDeviceController', [\n    '$scope', 'DevicesManager', 'SubnetsManager', 'DomainsManager',\n    'ManagerHelperService', 'ValidationService', function(\n        $scope, DevicesManager, SubnetsManager, DomainsManager,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addDeviceScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addDeviceScope = $scope;\n\n        // Set initial values.\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.viewable = false;\n        $scope.error = null;\n\n        // Device ip assignment options.\n        $scope.ipAssignments = [\n            {\n                name: \"external\",\n                title: \"External\"\n            },\n            {\n                name: \"dynamic\",\n                title: \"Dynamic\"\n            },\n            {\n                name: \"static\",\n                title: \"Static\"\n            }\n        ];\n\n        // Makes a new interface.\n        function makeInterface() {\n            return {\n                mac: \"\",\n                ipAssignment: null,\n                subnetId: null,\n                ipAddress: \"\"\n            };\n        }\n\n        // Makes a new device.\n        function newDevice(cloneDevice) {\n            if(angular.isObject(cloneDevice)) {\n                return {\n                    name: \"\",\n                    domain: cloneDevice.domain,\n                    interfaces: [makeInterface()]\n                };\n            } else {\n                return {\n                    name: \"\",\n                    domain: DomainsManager.getDefaultDomain(),\n                    interfaces: [makeInterface()]\n                };\n            }\n        }\n\n        // Input values.\n        $scope.device = null;\n\n        // Converts the device information from how it is held in the UI to\n        // how it is handled over the websocket.\n        function convertDeviceToProtocol(device) {\n            // Return the new object.\n            var convertedDevice = {\n                hostname: device.name,\n                domain: device.domain,\n                primary_mac: device.interfaces[0].mac,\n                extra_macs: [],\n                interfaces: []\n            };\n            var i;\n            for(i = 1; i < device.interfaces.length; i++) {\n                convertedDevice.extra_macs.push(device.interfaces[i].mac);\n            }\n            angular.forEach(device.interfaces, function(nic) {\n                convertedDevice.interfaces.push({\n                    mac: nic.mac,\n                    ip_assignment: nic.ipAssignment.name,\n                    ip_address: nic.ipAddress,\n                    \"subnet\": nic.subnetId\n                });\n            });\n            return convertedDevice;\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function() {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n            $scope.device = newDevice();\n            $scope.viewable = true;\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            // Emit the hidden event.\n            $scope.$emit('addDeviceHidden');\n        };\n\n        // Returns true if the name is in error.\n        $scope.nameHasError = function() {\n            // If the name is empty don't show error.\n            if($scope.device === null || $scope.device.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateHostname($scope.device.name);\n        };\n\n        // Returns true if the MAC is in error.\n        $scope.macHasError = function(deviceInterface) {\n            // If the MAC is empty don't show error.\n            if(deviceInterface.mac.length === 0) {\n                return false;\n            }\n            // If the MAC is invalid show error.\n            if(!ValidationService.validateMAC(deviceInterface.mac)) {\n                return true;\n            }\n            // If the MAC is the same as another MAC show error.\n            var i;\n            for(i = 0; i < $scope.device.interfaces.length; i++) {\n                var isSelf = $scope.device.interfaces[i] === deviceInterface;\n                if(!isSelf &&\n                    $scope.device.interfaces[i].mac === deviceInterface.mac) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Returns true if the IP address is in error.\n        $scope.ipHasError = function(deviceInterface) {\n            // If the IP is empty don't show error.\n            if(deviceInterface.ipAddress.length === 0) {\n                return false;\n            }\n            // If ip address is invalid, then exit early.\n            if(!ValidationService.validateIP(deviceInterface.ipAddress)) {\n                return true;\n            }\n            var i, inNetwork;\n            if(angular.isObject(deviceInterface.ipAssignment)){\n                if(deviceInterface.ipAssignment.name === \"external\") {\n                    // External IP address cannot be within a known subnet.\n                    for(i = 0; i < $scope.subnets.length; i++) {\n                        inNetwork = ValidationService.validateIPInNetwork(\n                            deviceInterface.ipAddress,\n                            $scope.subnets[i].cidr);\n                        if(inNetwork) {\n                            return true;\n                        }\n                    }\n                } else if(deviceInterface.ipAssignment.name === \"static\" &&\n                    angular.isNumber(deviceInterface.subnetId)) {\n                    // Static IP address must be within a subnet.\n                    var subnet = SubnetsManager.getItemFromList(\n                        deviceInterface.subnetId);\n                    inNetwork = ValidationService.validateIPInNetwork(\n                        deviceInterface.ipAddress, subnet.cidr);\n                    if(!inNetwork) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return true when the device is missing information or invalid\n        // information.\n        $scope.deviceHasError = function() {\n            if($scope.device === null || $scope.device.name === '' ||\n                    $scope.nameHasError()) {\n                return true;\n            }\n\n            var i;\n            for(i = 0; i < $scope.device.interfaces.length; i++) {\n                var deviceInterface = $scope.device.interfaces[i];\n                if(deviceInterface.mac === '' ||\n                    $scope.macHasError(deviceInterface) ||\n                    !angular.isObject(deviceInterface.ipAssignment)) {\n                    return true;\n                }\n                var externalIpError = (\n                    deviceInterface.ipAssignment.name === \"external\" && (\n                        deviceInterface.ipAddress === '' ||\n                        $scope.ipHasError(deviceInterface)));\n                var staticIpError = (\n                    deviceInterface.ipAssignment.name === \"static\" && (\n                        !angular.isNumber(deviceInterface.subnetId) ||\n                        $scope.ipHasError(deviceInterface)));\n                if(externalIpError || staticIpError) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Adds new interface to device.\n        $scope.addInterface = function() {\n            $scope.device.interfaces.push(makeInterface());\n        };\n\n        // Returns true if the first interface in the device interfaces array.\n        $scope.isPrimaryInterface = function(deviceInterface) {\n            return $scope.device.interfaces.indexOf(deviceInterface) === 0;\n        };\n\n        // Removes the interface from the devices interfaces array.\n        $scope.deleteInterface = function(deviceInterface) {\n            // Don't remove the primary.\n            if($scope.isPrimaryInterface(deviceInterface)) {\n                return;\n            }\n            $scope.device.interfaces.splice(\n                $scope.device.interfaces.indexOf(deviceInterface), 1);\n        };\n\n        // Called when cancel clicked.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.device = newDevice();\n            $scope.hide();\n        };\n\n        // Called when save is clicked.\n        $scope.save = function(addAnother) {\n            // Do nothing if device in error.\n            if($scope.deviceHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Create the device.\n            var device = convertDeviceToProtocol($scope.device);\n            DevicesManager.create(device).then(function(device) {\n                if(addAnother) {\n                    $scope.device = newDevice($scope.device);\n                } else {\n                    $scope.device = newDevice();\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load subnets to get the available subnets.\n        ManagerHelperService.loadManagers(\n            $scope, [SubnetsManager, DomainsManager]).then(function() {\n                // Initial device.\n                $scope.device = newDevice();\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Domain Controller\n */\n\nangular.module('MAAS').controller('AddDomainController', [\n    '$scope', 'DomainsManager', 'ManagerHelperService',\n    'ValidationService', function($scope, DomainsManager,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addDomainScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addDomainScope = $scope;\n\n        // Set initial values.\n        $scope.viewable = false;\n        $scope.error = null;\n\n        // Makes a new domain.\n        function makeDomain() {\n            return {\n                name: \"\",\n                authoritative: true\n            };\n        }\n\n        // Initial domain.\n        $scope.domain = makeDomain();\n\n        // Converts the domain information from how it is held in the UI to\n        // how it is handled over the websocket.  Since they're identical, we\n        // just return a copy: some day, they might be different, so we retain\n        // the function against that day.\n        function convertDomainToProtocol(domain) {\n            return angular.copy(domain);\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function() {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n            $scope.domain = makeDomain();\n            $scope.viewable = true;\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            // Emit the hidden event.\n            $scope.$emit('addDomainHidden');\n        };\n\n        // Returns true if the name is in error.\n        $scope.nameHasError = function() {\n            // If the name is empty don't show error.\n            if($scope.domain.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateDomainName($scope.domain.name);\n        };\n\n        // Return true when the domain is missing information or invalid\n        // information.\n        $scope.domainHasError = function() {\n            if($scope.domain.name === '' || $scope.nameHasError()) {\n                return true;\n            }\n\n            return false;\n        };\n\n        // Called when cancel clicked.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.domain = makeDomain();\n            $scope.hide();\n        };\n\n        // Called when save is clicked.\n        $scope.save = function(addAnother) {\n            // Do nothing if domain in error.\n            if($scope.domainHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the domain.\n            $scope.error = null;\n\n            // Create the domain.\n            var domain = convertDomainToProtocol($scope.domain);\n            DomainsManager.create(domain).then(function() {\n                $scope.domain = makeDomain();\n                if(!addAnother) {\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Hardware Controller\n */\n\nangular.module('MAAS').controller('AddHardwareController', [\n    '$scope', '$http', 'ZonesManager', 'MachinesManager',\n    'GeneralManager', 'DomainsManager', 'RegionConnection',\n    'ManagerHelperService', 'ValidationService', function(\n        $scope, $http, ZonesManager, MachinesManager,\n        GeneralManager, DomainsManager, RegionConnection,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addHardwareScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addHardwareScope = $scope;\n\n        // Set initial values.\n        $scope.viewable = false;\n        $scope.model = 'machine';\n        $scope.zones = ZonesManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.architectures = GeneralManager.getData(\"architectures\");\n        $scope.hwe_kernels = GeneralManager.getData(\"hwe_kernels\");\n        $scope.default_min_hwe_kernel = GeneralManager.getData(\n            \"default_min_hwe_kernel\");\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.error = null;\n        $scope.macAddressRegex = /^([0-9A-F]{2}[::]){5}([0-9A-F]{2})$/gmi;\n\n        // Input values.\n        $scope.machine = null;\n        $scope.chassis = null;\n\n        // Hard coded chassis types. This is because there is no method in\n        // MAAS to get a full list of supported chassis. This needs to be\n        // fixed ASAP.\n        var virshFields = [\n            {\n                name: 'hostname',\n                label: 'Address',\n                field_type: 'string',\n                \"default\": '',  // Using \"default\" to make lint happy.\n                choices: [],\n                required: true\n            },\n            {\n                name: 'password',\n                label: 'Password',\n                field_type: 'string',\n                \"default\": '',\n                choices: [],\n                required: false\n            },\n            {\n                name: 'prefix_filter',\n                label: 'Prefix filter',\n                field_type: 'string',\n                \"default\": '',\n                choices: [],\n                required: false\n            }\n        ];\n        $scope.chassisPowerTypes = [\n            {\n                name: 'mscm',\n                description: 'Moonshot Chassis Manager',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Host',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'powerkvm',\n                description: 'PowerKVM',\n                fields: virshFields\n            },\n            {\n                name: 'recs_box',\n                description: 'Christmann RECS|Box',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Hostname',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'port',\n                        label: 'Port',\n                        field_type: 'string',\n                        \"default\": '80',\n                        choices: [],\n                        required: false\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'seamicro15k',\n                description: 'SeaMicro 15000',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Hostname',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'power_control',\n                        label: 'Power Control',\n                        field_type: 'choice',\n                        \"default\": 'restapi2',\n                        choices: [\n                            ['restapi2', 'REST API V2.0'],\n                            ['restapi', 'REST API V0.9'],\n                            ['ipmi', 'IPMI']\n                        ],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'ucsm',\n                description: 'UCS Chassis Manager',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'URL',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'virsh',\n                description: 'Virsh (virtual systems)',\n                fields: virshFields\n            },\n            {\n                name: 'vmware',\n                description: 'VMware',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Host',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'prefix_filter',\n                        label: 'Prefix filter',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: false\n                    }\n                ]\n            }\n        ];\n\n        // Get the default zone from the loaded zones.\n        function defaultZone() {\n            if($scope.zones.length === 0) {\n                return null;\n            } else {\n                return $scope.zones[0];\n            }\n        }\n\n        // Get the default architecture from the loaded architectures.\n        function defaultArchitecture() {\n            if($scope.architectures.length === 0) {\n                return '';\n            } else {\n                // Return amd64/generic first if available.\n                var i;\n                for(i = 0; i < $scope.architectures.length; i++) {\n                    if($scope.architectures[i] === \"amd64/generic\") {\n                        return $scope.architectures[i];\n                    }\n                }\n                return $scope.architectures[0];\n            }\n        }\n\n        // Return a new MAC address object.\n        function newMAC() {\n            return {\n                mac: '',\n                error: false\n            };\n        }\n\n        // Return a new machine object.\n        function newMachine(cloneMachine) {\n            // Clone the machine instead of just creating a new one.\n            // This helps the user by already having the previous selected\n            // items selected for the new machine.\n            if(angular.isObject(cloneMachine)) {\n                return {\n                    name: '',\n                    domain: cloneMachine.domain,\n                    macs: [newMAC()],\n                    zone: cloneMachine.zone,\n                    architecture: cloneMachine.architecture,\n                    min_hwe_kernel: cloneMachine.min_hwe_kernel,\n                    power: {\n                        type: cloneMachine.power.type,\n                        parameters: {}\n                    }\n                };\n            }\n\n            // No clone machine. So create a new blank machine.\n            return {\n                name: '',\n                domain: DomainsManager.getDefaultDomain(),\n                macs: [newMAC()],\n                zone: defaultZone(),\n                architecture: defaultArchitecture(),\n                min_hwe_kernel: $scope.default_min_hwe_kernel.text,\n                power: {\n                    type: null,\n                    parameters: {}\n                }\n            };\n        }\n\n        // Return a new chassis object.\n        function newChassis(cloneChassis) {\n            // Clone the chassis instead of just creating a new one.\n            // This helps the user by already having the previous selected\n            // items selected for the new machine.\n            if(angular.isObject(cloneChassis)) {\n                return {\n                    domain: cloneChassis.domain,\n                    power: {\n                        type: null,\n                        parameters: {}\n                    }\n                };\n            } else {\n                return {\n                    domain: DomainsManager.getDefaultDomain(),\n                    power: {\n                        type: null,\n                        parameters: {}\n                    }\n                };\n            }\n        }\n\n        // Converts the machine information from how it is held in the UI to\n        // how it is handled over the websocket.\n        function convertMachineToProtocol(machine) {\n            // Convert the mac addresses.\n            var macs = angular.copy(machine.macs);\n            var pxe_mac = macs.shift().mac;\n            var extra_macs = macs.map(function(mac) { return mac.mac; });\n\n            // Return the new object.\n            return {\n                hostname: machine.name,\n                domain: machine.domain,\n                architecture: machine.architecture,\n                min_hwe_kernel: machine.min_hwe_kernel,\n                pxe_mac: pxe_mac,\n                extra_macs: extra_macs,\n                power_type: machine.power.type.name,\n                power_parameters: angular.copy(machine.power.parameters),\n                zone: {\n                    id: machine.zone.id,\n                    name: machine.zone.name\n                }\n            };\n        }\n\n        // Validate that all the parameters are there for the given power type.\n        function powerParametersHasError(power_type, parameters) {\n            var i;\n            for(i = 0; i < power_type.fields.length; i++) {\n                var field = power_type.fields[i];\n                var value = parameters[field.name];\n                if(field.required) {\n                    if(angular.isUndefined(value) || value === '') {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function(mode) {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n\n            // Change the mode.\n            if($scope.mode !== mode) {\n                if($scope.mode === \"machine\") {\n                    $scope.machine = newMachine();\n                } else if($scope.mode === \"chassis\") {\n                    $scope.chassis = newChassis();\n                }\n                $scope.error = null;\n                $scope.mode = mode;\n            }\n\n            GeneralManager.loadItems([\n                \"architectures\", \"hwe_kernels\", \"default_min_hwe_kernel\"\n                ]).then(function() {\n                    $scope.architectures = GeneralManager.getData(\n                        \"architectures\");\n                    $scope.hwe_kernels = GeneralManager.getData(\"hwe_kernels\");\n                    $scope.default_min_hwe_kernel = GeneralManager.getData(\n                        \"default_min_hwe_kernel\");\n                    $scope.viewable = true;\n                });\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            // Emit the hidden event.\n            $scope.$emit('addHardwareHidden');\n        };\n\n        // Return True when architectures loaded and in machine mode.\n        $scope.showMachine = function() {\n            if($scope.architectures.length === 0) {\n                return false;\n            }\n            return $scope.mode === \"machine\";\n        };\n\n        // Return True when architectures loaded and in chassis mode.\n        $scope.showChassis = function() {\n            if($scope.architectures.length === 0) {\n                return false;\n            }\n            return $scope.mode === \"chassis\";\n        };\n\n        // Add a new MAC address to the machine.\n        $scope.addMac = function() {\n            $scope.machine.macs.push(newMAC());\n        };\n\n        // Remove a MAC address to the machine.\n        $scope.removeMac = function(mac) {\n            var idx = $scope.machine.macs.indexOf(mac);\n            if(idx > -1) {\n                $scope.machine.macs.splice(idx, 1);\n            }\n        };\n\n        // Return true if the machine name is invalid.\n        $scope.invalidName = function() {\n            // Not invalid if empty.\n            if($scope.machine.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateHostname($scope.machine.name);\n        };\n\n        // Validate that the mac address is valid.\n        $scope.validateMac = function(mac) {\n            if(mac.mac === '') {\n                mac.error = false;\n            } else {\n                mac.error = !ValidationService.validateMAC(mac.mac);\n            }\n        };\n\n        // Return true when the machine is missing information or invalid\n        // information.\n        $scope.machineHasError = function() {\n            // Early-out for errors.\n            in_error = (\n                $scope.machine === null ||\n                $scope.machine.zone === null ||\n                $scope.machine.architecture === '' ||\n                $scope.machine.power.type === null ||\n                $scope.invalidName($scope.machine));\n            if(in_error) {\n                return in_error;\n            }\n\n            // Make sure none of the mac addresses are in error. The first one\n            // cannot be blank the remaining are allowed to be empty.\n            if($scope.machine.macs[0].mac === '' ||\n                $scope.machine.macs[0].error) {\n                return true;\n            }\n            var i;\n            for(i = 1; i < $scope.machine.macs.length; i++) {\n                var mac = $scope.machine.macs[i];\n                if(mac.mac !== '' && mac.error) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return true if the chassis has errors.\n        $scope.chassisHasErrors = function() {\n            // Early-out for errors.\n            in_error = (\n                $scope.chassis === null ||\n                $scope.chassis.power.type === null);\n            if(in_error) {\n                return in_error;\n            }\n            return powerParametersHasError(\n                $scope.chassis.power.type, $scope.chassis.power.parameters);\n        };\n\n        // Called when the cancel button is pressed.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.machine = newMachine();\n            $scope.chassis = newChassis();\n\n            // Hide the controller.\n            $scope.hide();\n        };\n\n        // Called to perform the saving of the machine.\n        $scope.saveMachine = function(addAnother) {\n            // Does nothing if machine has errors.\n            if($scope.machineHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Add the machine.\n            MachinesManager.create(\n                convertMachineToProtocol($scope.machine)).then(\n                    function() {\n                        if(addAnother) {\n                            $scope.machine = newMachine($scope.machine);\n                        } else {\n                            $scope.machine = newMachine();\n\n                            // Hide the scope if not adding another.\n                            $scope.hide();\n                        }\n                    }, function(error) {\n                        $scope.error =\n                            ManagerHelperService.parseValidationError(error);\n                    });\n        };\n\n        // Called to perform the saving of the chassis.\n        $scope.saveChassis = function(addAnother) {\n            // Does nothing if error exists.\n            if($scope.chassisHasErrors()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Create the parameters.\n            var params = angular.copy($scope.chassis.power.parameters);\n            params.chassis_type = $scope.chassis.power.type.name;\n            params.domain = $scope.chassis.domain.name;\n\n            // XXX ltrager 24-02-2016: Something is adding the username field\n            // even though its not defined in virshFields. The API rejects\n            // requests with improper fields so remove it before we send the\n            // request.\n            if(\n                    params.chassis_type === \"powerkvm\" ||\n                    params.chassis_type === \"virsh\") {\n                delete params.username;\n            }\n            // Add the chassis. For now we use the API as the websocket doesn't\n            // support probe and enlist.\n            $http({\n                method: 'POST',\n                url: 'api/2.0/machines/?op=add_chassis',\n                data: $.param(params),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function() {\n                if(addAnother) {\n                    $scope.chassis = newChassis($scope.chassis);\n                } else {\n                    $scope.chassis = newChassis();\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error.data);\n            });\n        };\n\n        // Load zones and domains. Once loaded create the first machine and\n        // chassis.\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, DomainsManager]).then(function() {\n                // Add the first machine and chassis.\n                $scope.machine = newMachine();\n                $scope.chassis = newChassis();\n            });\n\n        // Load the general manager.\n        ManagerHelperService.loadManager(\n            $scope, GeneralManager).then(function() {\n            if($scope.architectures.length > 0) {\n                // If the machine doesn't have an architecture\n                // set then it was created before all of the\n                // architectures were loaded. Set the default\n                // architecture for that machine.\n                if(angular.isObject($scope.machine) &&\n                    $scope.machine.architecture === '') {\n                    $scope.machine.architecture = defaultArchitecture();\n                }\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Dashboard Controller\n */\n\nangular.module('MAAS').controller('DashboardController', [\n    '$scope', '$window', '$rootScope', '$routeParams', '$location',\n    'DiscoveriesManager', 'DomainsManager', 'MachinesManager',\n    'DevicesManager', 'SubnetsManager', 'VLANsManager', 'ConfigsManager',\n    'ManagerHelperService',\n    function($scope, $window, $rootScope, $routeParams, $location,\n             DiscoveriesManager, DomainsManager, MachinesManager,\n             DevicesManager, SubnetsManager, VLANsManager, ConfigsManager,\n             ManagerHelperService) {\n\n        // Default device IP options.\n        var deviceIPOptions = [\n            ['static', 'Static'],\n            ['dynamic', 'Dynamic'],\n            ['external', 'External']\n        ];\n\n        // Set title and page.\n        $rootScope.title = \"Dashboard\";\n        $rootScope.page = \"dashboard\";\n\n        // Set initial values.\n        $scope.loaded = false;\n        $scope.discoveredDevices = DiscoveriesManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.machines = MachinesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.configManager = ConfigsManager;\n        $scope.networkDiscovery = null;\n        $scope.column = 'mac';\n        $scope.selectedDevice = null;\n        $scope.convertTo = null;\n\n        // Set default predicate to last_seen.\n        $scope.predicate = $scope.last_seen;\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Proxy manager that the maas-obj-form directive uses to call the\n        // correct method based on current type.\n        $scope.proxyManager = {\n            updateItem: function(params) {\n                if($scope.convertTo.type === 'device') {\n                    return DevicesManager.createItem(params);\n                } else if($scope.convertTo.type === 'interface') {\n                    return DevicesManager.createInterface(params);\n                } else {\n                    throw new Error(\"Unknown type: \" + $scope.convertTo.type);\n                }\n            }\n        };\n\n        // Return the name name for the Discovery.\n        $scope.getDiscoveryName = function(discovery) {\n            if(discovery.hostname === null) {\n                return 'unknown';\n            }\n            else {\n                return discovery.hostname;\n            }\n        };\n\n        // Get the name of the subnet from its ID.\n        $scope.getSubnetName = function(subnetId) {\n            var subnet = SubnetsManager.getItemFromList(subnetId);\n            return SubnetsManager.getName(subnet);\n        };\n\n        // Get the name of the VLAN from its ID.\n        $scope.getVLANName = function(vlanId) {\n            var vlan = VLANsManager.getItemFromList(vlanId);\n            return VLANsManager.getName(vlan);\n        };\n\n        // Sets selected device\n        $scope.toggleSelected = function(deviceId) {\n            if($scope.selectedDevice === deviceId) {\n                $scope.selectedDevice = null;\n            } else {\n                var discovered = DiscoveriesManager.getItemFromList(deviceId);\n                var hostname = $scope.getDiscoveryName(discovered);\n                var domain;\n                if(hostname === 'unknown') {\n                    hostname = '';\n                }\n                if(hostname.indexOf('.') > 0) {\n                    domain = DomainsManager.getDomainByName(\n                        hostname.slice(hostname.indexOf('.') + 1));\n                    hostname = hostname.split(\".\", 1)[0];\n                    if(domain === null) {\n                        domain = DomainsManager.getDefaultDomain();\n                    }\n                } else {\n                    domain = DomainsManager.getDefaultDomain();\n                }\n                $scope.convertTo = {\n                    type: 'device',\n                    hostname: hostname,\n                    domain: domain,\n                    parent: null,\n                    ip_assignment: 'dynamic',\n                    goTo: false,\n                    saved: false,\n                    deviceIPOptions: deviceIPOptions.filter(\n                        function(option) {\n                            // Filter the options to not include static if\n                            // a subnet is not defined for this discovered\n                            // item.\n                            if(option[0] === 'static' &&\n                                !angular.isNumber(discovered.subnet)) {\n                                return false;\n                            } else {\n                                return true;\n                            }\n                        })\n                };\n                $scope.selectedDevice = deviceId;\n            }\n        };\n\n        // Called before the createItem is called to adjust the values\n        // passed over the call.\n        $scope.preProcess = function(item) {\n            var discovered = DiscoveriesManager.getItemFromList(\n                $scope.selectedDevice);\n            item = angular.copy(item);\n            if($scope.convertTo.type === 'device') {\n                item.primary_mac = discovered.mac_address;\n                item.extra_macs = [];\n                item.interfaces = [{\n                    mac: discovered.mac_address,\n                    ip_assignment: item.ip_assignment,\n                    ip_address: discovered.ip,\n                    subnet: discovered.subnet\n                }];\n            } else if($scope.convertTo.type === 'interface') {\n                item.mac_address = discovered.mac_address;\n                item.ip_address = discovered.ip;\n                item.subnet = discovered.subnet;\n            }\n            return item;\n        };\n\n        // Called after the createItem has been successful.\n        $scope.afterSave = function(obj) {\n            DiscoveriesManager._removeItem($scope.selectedDevice);\n            $scope.selectedDevice = null;\n            $scope.convertTo.hostname = obj.hostname;\n            $scope.convertTo.parent = obj.parent;\n            $scope.convertTo.saved = true;\n            if($scope.convertTo.goTo) {\n                if(angular.isString(obj.parent)) {\n                    $location.path('/device/' + obj.parent);\n                } else {\n                    $location.path('/devices/');\n                }\n            }\n        };\n\n        // Load all the managers and get the network discovery config item.\n        ManagerHelperService.loadManagers($scope, [\n            DiscoveriesManager, DomainsManager, MachinesManager,\n            DevicesManager, SubnetsManager, VLANsManager, ConfigsManager]).then(\n            function() {\n                $scope.loaded = true;\n                $scope.networkDiscovery = ConfigsManager.getItemFromList(\n                    'network_discovery');\n            });\n    }\n]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domain Details Controller\n */\n\nangular.module('MAAS').controller('DomainDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'DomainsManager', 'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $location,\n        DomainsManager, UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"domains\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.domain = null;\n        $scope.editSummary = false;\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.action = null;\n        $scope.editRow = null;\n        $scope.deleteRow = null;\n\n        $scope.domainsManager = DomainsManager;\n        $scope.newObject = {};\n\n        $scope.supportedRecordTypes = [\n            'A', 'AAAA', 'CNAME', 'MX', 'NS', 'SRV', 'SSHFP', 'TXT'\n        ];\n\n        // Set default predicate to name.\n        $scope.predicate = 'name';\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is clicked in the domain summary.\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        $scope.isRecordAutogenerated = function(row) {\n            // We can't edit records that don't have a dnsresource_id.\n            // (If the row doesn't have one, it has probably been automatically\n            // generated by means of a deployed node, or some other reason.)\n            return !row.dnsresource_id;\n        };\n\n        $scope.editRecord = function(row) {\n            $scope.editRow = row;\n            // We'll need the original values to determine if an update is\n            // required.\n            row.previous_rrdata = row.rrdata;\n            row.previous_rrtype = row.rrtype;\n            row.previous_name = row.name;\n            row.previous_ttl = row.ttl;\n            $scope.deleteRow = null;\n        };\n\n        $scope.removeRecord = function(row) {\n            $scope.deleteRow = row;\n            $scope.editRow = null;\n        };\n\n        $scope.confirmRemoveRecord = function(row) {\n            // The websocket handler needs the domain ID, so add it in.\n            row.domain = $scope.domain.id;\n            $scope.domainsManager.deleteDNSRecord(row);\n            $scope.stopEditingRow();\n        };\n\n        $scope.stopEditingRow = function() {\n            $scope.editRow = null;\n            $scope.deleteRow = null;\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.domain.displayname;\n        }\n\n        // Called when the domain has been loaded.\n        function domainLoaded(domain) {\n            $scope.domain = domain;\n            $scope.loaded = true;\n\n            updateTitle();\n        }\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default domain.\n        $scope.isDefaultDomain = function() {\n            if(angular.isObject($scope.domain)) {\n                return $scope.domain.id === 0;\n            }\n            return false;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.domain)) {\n                return $scope.domain.rrsets.length === 0;\n            }\n            return false;\n        };\n\n        // Called when the delete domain button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.actionInProgress = true;\n            $scope.action = 'delete';\n        };\n\n        // Called when the add record button is pressed.\n        $scope.addRecordButton = function() {\n            $scope.error = null;\n            $scope.actionInProgress = true;\n            $scope.action = 'add_record';\n        };\n\n        // Called when the cancel delete domain button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionInProgress = false;\n        };\n\n        // Called when the confirm delete domain button is pressed.\n        $scope.deleteConfirmButton = function() {\n            DomainsManager.deleteDomain($scope.domain).then(function() {\n                $scope.actionInProgress = false;\n                $location.path(\"/domains\");\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers(\n            $scope, [DomainsManager, UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this domain set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeDomain = DomainsManager.getActiveItem();\n            var requestedDomain = parseInt($routeParams.domain_id, 10);\n            if(isNaN(requestedDomain)) {\n                ErrorService.raiseError(\"Invalid domain identifier.\");\n            } else if(angular.isObject(activeDomain) &&\n                activeDomain.id === requestedDomain) {\n                domainLoaded(activeDomain);\n            } else {\n                DomainsManager.setActiveItem(\n                    requestedDomain).then(function(domain) {\n                        domainLoaded(domain);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domains List Controller\n */\n\nangular.module('MAAS').controller('DomainsListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', 'DomainsManager',\n    'UsersManager', 'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, $filter, DomainsManager,\n        UsersManager, ManagerHelperService) {\n\n        // Load the filters that are used inside the controller.\n\n        // Set title and page.\n        $rootScope.title = \"DNS\";\n        $rootScope.page = \"domains\";\n\n        // Set initial values.\n        $scope.domains = DomainsManager.getItems();\n        $scope.currentpage = \"domains\";\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.loading = true;\n\n        // This will hold the AddDomainController once it's initialized.  The\n        // controller will set this variable as it's always a child of this\n        // scope.\n        $scope.addDomainScope = null;\n\n        // Called when the add domain button is pressed.\n        $scope.addDomain = function() {\n            $scope.addDomainScope.show();\n        };\n\n        // Called when the cancel add domain button is pressed.\n        $scope.cancelAddDomain = function() {\n            $scope.addDomainScope.cancel();\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        ManagerHelperService.loadManagers(\n            $scope, [DomainsManager, UsersManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n        }\n    ]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Fabric Details Controller\n */\n\nangular.module('MAAS').controller('FabricDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'FabricsManager', 'VLANsManager', 'SubnetsManager', 'SpacesManager',\n    'ControllersManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        FabricsManager, VLANsManager, SubnetsManager, SpacesManager,\n        ControllersManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.fabric = null;\n        $scope.fabricManager = FabricsManager;\n        $scope.editSummary = false;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.loaded = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.fabric.name;\n        }\n\n        // Called when the \"edit\" button is cliked in the fabric summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the fabric summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Called when the fabric has been loaded.\n        function fabricLoaded(fabric) {\n            if(angular.isObject(fabric)) {\n                $scope.fabric = fabric;\n                updateTitle();\n                $scope.$watch(\"vlans\", updateVLANs, true);\n                $scope.$watch(\"subnets\", updateVLANs, true);\n                $scope.$watch(\"controllers\", updateVLANs, true);\n                $scope.loaded = true;\n                // Initial table sort order.\n                $scope.predicate = \"['vlan_name', 'vlan.id', 'subnet_name']\";\n            }\n        }\n\n        // Generate a table that can easily be rendered in the view.\n        function updateVLANs() {\n            var rows = [];\n            var racks = {};\n            angular.forEach($filter('filter')(\n                    $scope.vlans, {fabric:$scope.fabric.id}, true),\n                    function(vlan) {\n                var subnets =\n                    $filter('filter')($scope.subnets, {vlan:vlan.id}, true);\n                if(subnets.length > 0) {\n                    angular.forEach(subnets, function(subnet) {\n                        var space = SpacesManager.getItemFromList(subnet.space);\n                        var space_name = (space === null) ?\n                            \"(undefined)\" : space.name;\n                        var row = {\n                            vlan: vlan,\n                            vlan_name: VLANsManager.getName(vlan),\n                            subnet: subnet,\n                            subnet_name: SubnetsManager.getName(subnet),\n                            space: space,\n                            space_name: space_name\n                        };\n                        rows.push(row);\n                    });\n                } else {\n                    // If there are no subnets, populate a row based on the\n                    // information we have (just the VLAN).\n                    var row = {\n                        vlan: vlan,\n                        vlan_name: VLANsManager.getName(vlan),\n                        subnet: null,\n                        subnet_name: null,\n                        space: null,\n                        space_name: null\n                    };\n                    rows.push(row);\n                }\n                // Enumerate racks for vlan.\n                angular.forEach(vlan.rack_sids, function(rack_sid) {\n                    var rack = ControllersManager.getItemFromList(rack_sid);\n                    if(angular.isObject(rack)) {\n                        racks[rack.system_id] = rack;\n                    }\n                });\n            });\n            $scope.rows = rows;\n            $scope.racks = Object.keys(racks).map(function(key) {\n                return racks[key];\n            });\n        }\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default Fabric\n        $scope.isDefaultFabric = function() {\n            if(!angular.isObject($scope.fabric)) {\n                return false;\n            }\n            return $scope.fabric.id === 0;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.fabric)) {\n                return $scope.fabric.id !== 0;\n            }\n            return false;\n        };\n\n        // Called when the delete fabric button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete fabric button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete fabric button is pressed.\n        $scope.deleteConfirmButton = function() {\n            FabricsManager.deleteFabric($scope.fabric).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/networks\");\n                $location.search('by', 'fabric');\n            }, function(reply) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(reply.error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            FabricsManager, VLANsManager, SubnetsManager, SpacesManager,\n            ControllersManager, UsersManager]).then(\n            function() {\n                // Possibly redirected from another controller that already had\n                // this fabric set to active. Only call setActiveItem if not\n                // already the activeItem.\n                var activeFabric = FabricsManager.getActiveItem();\n                var requestedFabric = parseInt($routeParams.fabric_id, 10);\n\n                if(isNaN(requestedFabric)) {\n                    ErrorService.raiseError(\"Invalid fabric identifier.\");\n                } else if(angular.isObject(activeFabric) &&\n                    activeFabric.id === requestedFabric) {\n                    fabricLoaded(activeFabric);\n                } else {\n                    FabricsManager.setActiveItem(\n                        requestedFabric).then(function(fabric) {\n                            fabricLoaded(fabric);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                }\n            });\n    }\n]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Images Controller\n */\n\nangular.module('MAAS').controller('ImagesController', [\n    '$rootScope', '$scope', 'BootResourcesManager',\n    'ConfigsManager', 'UsersManager', 'ManagerHelperService', function(\n        $rootScope, $scope, BootResourcesManager,\n        ConfigsManager, UsersManager, ManagerHelperService) {\n\n            $rootScope.page = \"images\";\n            $rootScope.title = \"Loading...\";\n\n            $scope.loading = true;\n            $scope.bootResources = BootResourcesManager.getData();\n            $scope.configManager = ConfigsManager;\n            $scope.autoImport = null;\n\n            // Return true if the user is a super user.\n            $scope.isSuperUser = function() {\n                return UsersManager.isSuperUser();\n            };\n\n            // Load the required managers.\n            ManagerHelperService.loadManagers(\n                $scope, [ConfigsManager, UsersManager]).then(function() {\n                $scope.autoImport = ConfigsManager.getItemFromList(\n                    \"boot_images_auto_import\");\n            });\n\n            // The boot-images directive will load the bootResources manager,\n            // we just watch until resources is set. That means the page is\n            // loaded.\n            $scope.$watch(\"bootResources.resources\", function() {\n                if(angular.isArray($scope.bootResources.resources)) {\n                    $scope.loading = false;\n                    $rootScope.title = \"Images\";\n                }\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Intro Controller\n */\n\nangular.module('MAAS').controller('IntroController', [\n    '$rootScope', '$scope', '$window', '$location',\n    'ConfigsManager', 'PackageRepositoriesManager', 'BootResourcesManager',\n    'ManagerHelperService',\n    function(\n        $rootScope, $scope, $window, $location,\n        ConfigsManager, PackageRepositoriesManager, BootResourcesManager,\n        ManagerHelperService) {\n\n            $rootScope.page = \"intro\";\n            $rootScope.title = \"Welcome\";\n\n            $scope.loading = true;\n            $scope.configManager = ConfigsManager;\n            $scope.repoManager = PackageRepositoriesManager;\n            $scope.bootResources = BootResourcesManager.getData();\n            $scope.hasImages = false;\n            $scope.maasName = null;\n            $scope.upstreamDNS = null;\n            $scope.mainArchive = null;\n            $scope.portsArchive = null;\n            $scope.httpProxy = null;\n\n            // Set the skip function on the rootScope to allow skipping the\n            // intro view.\n            $rootScope.skip = function() {\n                $scope.clickContinue(true);\n            };\n\n            // Return true if the welcome section is not in error.\n            $scope.welcomeInError = function() {\n                var form = $scope.maasName.$maasForm;\n                if(angular.isObject(form)) {\n                    return form.hasErrors();\n                } else {\n                    return false;\n                }\n            };\n\n            // Return true if the network section is in error.\n            $scope.networkInError = function() {\n                var inError = false;\n                var objs = [\n                    $scope.upstreamDNS,\n                    $scope.mainArchive,\n                    $scope.portsArchive,\n                    $scope.httpProxy];\n                angular.forEach(objs, function(obj) {\n                    var form = obj.$maasForm;\n                    if(angular.isObject(form) && form.hasErrors()) {\n                        inError = true;\n                    }\n                });\n                return inError;\n            };\n\n            // Return true if continue can be clicked.\n            $scope.canContinue = function() {\n                return (\n                    !$scope.welcomeInError() &&\n                    !$scope.networkInError() &&\n                    $scope.hasImages);\n            };\n\n            // Called when continue button is clicked.\n            $scope.clickContinue = function(force) {\n                if(angular.isUndefined(force)) {\n                    force = false;\n                }\n                if(force || $scope.canContinue()) {\n                    ConfigsManager.updateItem({\n                        'name': 'completed_intro',\n                        'value': true\n                    }).then(function() {\n                        // Reload the whole page so that the MAAS_config will be\n                        // set to the new value.\n                        $window.location.reload();\n                    });\n                }\n            };\n\n            // If intro has been completed redirect to '/'.\n            if(MAAS_config.completed_intro) {\n                $location.path('/');\n            } else {\n                // Load the required managers.\n                var managers = [ConfigsManager, PackageRepositoriesManager];\n                ManagerHelperService.loadManagers(\n                    $scope, managers).then(function() {\n                    $scope.loading = false;\n                    $scope.maasName = ConfigsManager.getItemFromList(\n                        \"maas_name\");\n                    $scope.upstreamDNS = ConfigsManager.getItemFromList(\n                        \"upstream_dns\");\n                    $scope.httpProxy = ConfigsManager.getItemFromList(\n                        \"http_proxy\");\n                    $scope.mainArchive = (\n                        PackageRepositoriesManager.getItems().filter(\n                            function(repo) {\n                                return (repo['default'] &&\n                                    repo.name === \"main_archive\");\n                            })[0]);\n                    $scope.portsArchive = (\n                        PackageRepositoriesManager.getItems().filter(\n                            function(repo) {\n                                return (repo['default'] &&\n                                    repo.name === \"ports_archive\");\n                            })[0]);\n                });\n\n                // Don't load the boot resources as the boot-images directive\n                // performs that action. Just watch and make sure that\n                // at least one resource exists before continuing.\n                $scope.$watch(\"bootResources.resources\", function() {\n                    if(angular.isArray($scope.bootResources.resources) &&\n                        $scope.bootResources.resources.length > 0) {\n                        $scope.hasImages = true;\n                    } else {\n                        $scope.hasImages = false;\n                    }\n                });\n            }\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Intro Controller\n */\n\nangular.module('MAAS').controller('IntroUserController', [\n    '$rootScope', '$scope', '$window', '$location',\n    'UsersManager', 'ManagerHelperService',\n    function(\n        $rootScope, $scope, $window, $location,\n        UsersManager, ManagerHelperService) {\n\n            $rootScope.page = \"intro\";\n            $rootScope.title = \"Welcome\";\n\n            $scope.loading = true;\n            $scope.user = null;\n\n            // Set the skip function on the rootScope to allow skipping the\n            // intro view.\n            $rootScope.skip = function() {\n                $scope.clickContinue(true);\n            };\n\n            // Return true if super user.\n            $scope.isSuperUser = function() {\n                return UsersManager.isSuperUser();\n            };\n\n            // Return true if continue can be clicked.\n            $scope.canContinue = function() {\n                return $scope.user.sshkeys_count > 0;\n            };\n\n            // Called when continue button is clicked.\n            $scope.clickContinue = function(force) {\n                if(angular.isUndefined(force)) {\n                    force = false;\n                }\n                if(force || $scope.canContinue()) {\n                    UsersManager.markIntroComplete().then(function() {\n                        // Reload the whole page so that the MAAS_config will\n                        // be set to the new value.\n                        $window.location.reload();\n                    });\n                }\n            };\n\n            // If intro has been completed redirect to '/'.\n            if(MAAS_config.user_completed_intro) {\n                $location.path('/');\n            } else {\n                // Load the required managers.\n                ManagerHelperService.loadManager(\n                    $scope, UsersManager).then(function() {\n                        $scope.loading = false;\n                        $scope.user = UsersManager.getAuthUser();\n                    });\n            }\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Networks List Controller\n */\n\nangular.module('MAAS').controller('NetworksListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'SubnetsManager', 'FabricsManager', 'SpacesManager', 'VLANsManager',\n    'UsersManager', 'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, $filter, $location,\n             SubnetsManager, FabricsManager, SpacesManager, VLANsManager,\n             UsersManager, ManagerHelperService) {\n\n        // Load the filters that are used inside the controller.\n        var filterByVLAN = $filter('filterByVLAN');\n        var filterByFabric = $filter('filterByFabric');\n        var filterBySpace = $filter('filterBySpace');\n        var filterByNullSpace = $filter('filterByNullSpace');\n\n        // Set title and page.\n        $rootScope.title = \"Subnets\";\n        $rootScope.page = \"networks\";\n\n        // Set the initial value of $scope.groupBy based on the URL\n        // parameters, but default to the 'fabric' groupBy if it's not found.\n        $scope.getURLParameters = function() {\n            if(angular.isString($location.search().by)) {\n                $scope.groupBy = $location.search().by;\n            } else {\n                $scope.groupBy = 'fabric';\n            }\n        };\n\n        $scope.ADD_FABRIC_ACTION = {\n            name: \"add_fabric\",\n            title: \"Fabric\",\n            selectedTitle: \"Add fabric\",\n            objectName: 'fabric'\n        };\n        $scope.ADD_VLAN_ACTION = {\n            name: \"add_vlan\",\n            title: \"VLAN\",\n            selectedTitle: \"Add VLAN\",\n            objectName: 'vlan'\n        };\n        $scope.ADD_SPACE_ACTION = {\n            name: \"add_space\",\n            title: \"Space\",\n            selectedTitle: \"Add space\",\n            objectName: 'space'\n        };\n        $scope.ADD_SUBNET_ACTION = {\n            name: \"add_subnet\",\n            title: \"Subnet\",\n            selectedTitle: \"Add subnet\",\n            objectName: 'subnet'\n        };\n\n        $scope.getURLParameters();\n\n        // Set initial values.\n        $scope.subnetManager = SubnetsManager;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.fabricManager = FabricsManager;\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.spaceManager = SpacesManager;\n        $scope.spaces = SpacesManager.getItems();\n        $scope.vlanManager = VLANsManager;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.loading = true;\n\n        $scope.group = {};\n        // Used when grouping by fabrics.\n        $scope.group.fabrics = {};\n        // User when grouping by spaces.\n        $scope.group.spaces = {};\n        $scope.group.spaces.orphanVLANs = [];\n\n        // Initializers for action objects.\n        var actionObjectInitializers = {\n            fabric: function() {\n                return {};\n            },\n            vlan: function() {\n                // Set initial fabric.\n                return {\n                    fabric: $scope.fabrics[0].id\n                };\n            },\n            space: function() {\n                return {};\n            },\n            subnet: function() {\n                // Set initial VLAN and space.\n                return {\n                    vlan: $scope.fabrics[0].vlan_ids[0]\n                };\n            }\n        };\n\n        // Return the name of the subnet.\n        function getSubnetName(subnet) {\n            return SubnetsManager.getName(subnet);\n        }\n\n        // Generate a table that can be easily rendered in the view.\n        // Traverses the fabrics and VLANs in-order so that if previous\n        // fabrics and VLANs' names are identical, they can be hidden from\n        // the table cell.\n        function updateFabricsGroupBy() {\n            var rows = [];\n            var previous_fabric = {id:-1};\n            var previous_vlan = {id:-1};\n            var fabrics = $filter('orderBy')($scope.fabrics, ['name']);\n            angular.forEach(fabrics, function(fabric) {\n                var vlans = filterByFabric($scope.vlans, fabric);\n                vlans = $filter('orderBy')(vlans, ['vid']);\n                angular.forEach(vlans, function(vlan) {\n                    var subnets = filterByVLAN($scope.subnets, vlan);\n                    if(subnets.length > 0) {\n                        angular.forEach(subnets, function(subnet) {\n                            var space = SpacesManager.getItemFromList(\n                                subnet.space);\n                            var row = {\n                                fabric: fabric,\n                                fabric_name: \"\",\n                                vlan: vlan,\n                                vlan_name: \"\",\n                                space: space,\n                                subnet: subnet,\n                                subnet_name: getSubnetName(subnet)\n                            };\n                            if(fabric.id !== previous_fabric.id) {\n                                previous_fabric.id = fabric.id;\n                                row.fabric_name = fabric.name;\n                            }\n                            if(vlan.id !== previous_vlan.id) {\n                                previous_vlan.id = vlan.id;\n                                row.vlan_name = $scope.getVLANName(vlan);\n                            }\n                            rows.push(row);\n                        });\n                    } else {\n                        var row = {\n                            fabric: fabric,\n                            fabric_name: \"\",\n                            vlan: vlan,\n                            vlan_name: $scope.getVLANName(vlan)\n                        };\n                        if(fabric.id !== previous_fabric.id) {\n                            previous_fabric.id = fabric.id;\n                            row.fabric_name = fabric.name;\n                        }\n                        rows.push(row);\n                    }\n                });\n            });\n            $scope.group.fabrics.rows = rows;\n        }\n\n        // Generate a table that can be easily rendered in the view.\n        // Traverses the spaces in-order so that if the previous space's name\n        // is identical, it can be hidden from the table cell.\n        // Note that this view only shows items that can be related to a space.\n        // That is, VLANs and fabrics with no corresponding subnets (and\n        // therefore spaces) cannot be shown in this table.\n        function updateSpacesGroupBy() {\n            var rows = [];\n            var spaces = $filter('orderBy')($scope.spaces, ['name']);\n            var previous_space = {id: -1};\n            angular.forEach(spaces, function(space) {\n                var subnets = filterBySpace($scope.subnets, space);\n                subnets = $filter('orderBy')(subnets, ['cidr']);\n                var index = 0;\n                angular.forEach(subnets, function(subnet) {\n                    index++;\n                    var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                    var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                    var row = {\n                        fabric: fabric,\n                        vlan: vlan,\n                        vlan_name: $scope.getVLANName(vlan),\n                        subnet: subnet,\n                        subnet_name: getSubnetName(subnet),\n                        space: space,\n                        space_name: \"\"\n                    };\n                    if(space.id !== previous_space.id) {\n                        previous_space.id = space.id;\n                        row.space_name = space.name;\n                    }\n                    rows.push(row);\n                });\n                if(index === 0) {\n                    rows.push({\n                        space: space,\n                        space_name: space.name\n                    });\n                }\n            });\n            $scope.group.spaces.rows = rows;\n        }\n\n        function updateOrphanVLANs() {\n            var rows = [];\n            var subnets = filterByNullSpace($scope.subnets);\n            subnets = $filter('orderBy')(subnets, ['cidr']);\n            angular.forEach(subnets, function(subnet) {\n                var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                var row = {\n                    fabric: fabric,\n                    vlan: vlan,\n                    vlan_name: $scope.getVLANName(vlan),\n                    subnet: subnet,\n                    subnet_name: getSubnetName(subnet),\n                    space: null\n                };\n                rows.push(row);\n            });\n            $scope.group.spaces.orphanVLANs = rows;\n        }\n\n        // Update the \"Group by\" selection. This is called from a few places:\n        // * When the $watch notices data has changed\n        // * When the URL bar is updated, after the URL is parsed and\n        //   $scope.groupBy is updated\n        // * When the drop-down \"Group by\" selection box changes\n        $scope.updateGroupBy = function() {\n            var groupBy = $scope.groupBy;\n            if(groupBy === 'space') {\n                $location.search('by', 'space');\n                updateSpacesGroupBy();\n                updateOrphanVLANs();\n            } else {\n                // The only other option is 'fabric', but in case the user\n                // made a typo on the URL bar we just assume it was 'fabric'\n                // as a fallback.\n                $location.search('by', 'fabric');\n                updateFabricsGroupBy();\n            }\n        };\n\n        // Called when the managers load to populate the actions the user\n        // is allowed to perform.\n        $scope.updateActions = function() {\n            if(UsersManager.isSuperUser()) {\n                $scope.actionOptions = [\n                    $scope.ADD_FABRIC_ACTION,\n                    $scope.ADD_VLAN_ACTION,\n                    $scope.ADD_SPACE_ACTION,\n                    $scope.ADD_SUBNET_ACTION\n                ];\n            } else {\n                $scope.actionOptions = [];\n            }\n        };\n\n        // Called when a action is selected.\n        $scope.actionChanged = function() {\n            $scope.newObject = (\n                actionObjectInitializers[$scope.actionOption.objectName]());\n        };\n\n        // Called when the \"Cancel\" button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionOption = null;\n            $scope.newObject = null;\n        };\n\n        // Return the name name for the VLAN.\n        $scope.getVLANName = function(vlan) {\n            return VLANsManager.getName(vlan);\n        };\n\n        // Return the name of the fabric from its given ID.\n        $scope.getFabricNameById = function(fabricId) {\n            return FabricsManager.getName(\n                FabricsManager.getItemFromList(fabricId));\n        };\n\n        // Called before the subnet object is saved. Sets the fabric\n        // field to be the fabric for the selected VLAN.\n        $scope.actionSubnetPreSave = function(obj) {\n            obj.fabric = VLANsManager.getItemFromList(obj.vlan).fabric;\n            return obj;\n        };\n\n        ManagerHelperService.loadManagers($scope, [\n            SubnetsManager, FabricsManager, SpacesManager, VLANsManager,\n            UsersManager]).then(\n            function() {\n                $scope.loading = false;\n\n                $scope.updateActions();\n\n                $scope.$watch(\n                    \"[subnets, fabrics, spaces, vlans]\",\n                    $scope.updateGroupBy, true);\n\n                // If the route has been updated, a new search string must\n                // potentially be rendered.\n                $scope.$on(\"$routeUpdate\", function() {\n                    $scope.getURLParameters();\n                    $scope.updateGroupBy();\n                });\n                $scope.updateGroupBy();\n            });\n    }\n]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Details Controller\n */\n\nangular.module('MAAS').controller('NodeDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location', '$interval',\n    'DevicesManager', 'MachinesManager', 'ControllersManager', 'ZonesManager',\n    'GeneralManager', 'UsersManager', 'TagsManager', 'DomainsManager',\n    'ManagerHelperService', 'ServicesManager', 'ErrorService',\n    'ValidationService', 'ScriptsManager', function(\n        $scope, $rootScope, $routeParams, $location, $interval, DevicesManager,\n        MachinesManager, ControllersManager, ZonesManager, GeneralManager,\n        UsersManager, TagsManager, DomainsManager, ManagerHelperService,\n        ServicesManager, ErrorService, ValidationService, ScriptsManager) {\n\n        // Mapping of device.ip_assignment to viewable text.\n        var DEVICE_IP_ASSIGNMENT = {\n            external: \"External\",\n            dynamic: \"Dynamic\",\n            \"static\": \"Static\"\n        };\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.node = null;\n        $scope.action = {\n          option: null,\n          allOptions: null,\n          availableOptions: [],\n          error: null,\n          showing_confirmation: false\n        };\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.osinfo = GeneralManager.getData(\"osinfo\");\n        $scope.section = {\n            area: angular.isString(\n                $routeParams.area) ? $routeParams.area : \"summary\"\n        };\n        $scope.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.commissioningSelection = [];\n        $scope.testSelection = [];\n        $scope.releaseOptions = {};\n        $scope.checkingPower = false;\n        $scope.devices = [];\n        $scope.scripts = ScriptsManager.getItems();\n\n        // Node header section.\n        $scope.header = {\n            editing: false,\n            editing_domain: false,\n            hostname: {\n                value: \"\"\n            },\n            domain: {\n                selected: null,\n                options: DomainsManager.getItems()\n            }\n        };\n\n        // Summary section.\n        $scope.summary = {\n            editing: false,\n            architecture: {\n                selected: null,\n                options: GeneralManager.getData(\"architectures\")\n            },\n            min_hwe_kernel: {\n                selected: null,\n                options: GeneralManager.getData(\"min_hwe_kernels\")\n            },\n            zone: {\n                selected: null,\n                options: ZonesManager.getItems()\n            },\n            tags: []\n        };\n\n        // Service monitor section (for controllers).\n        $scope.services = {};\n\n        // Power section.\n        $scope.power = {\n            editing: false,\n            type: null,\n            bmc_node_count: 0,\n            parameters: {}\n        };\n\n        // Get the display text for device ip assignment type.\n        $scope.getDeviceIPAssignment = function(ipAssignment) {\n            return DEVICE_IP_ASSIGNMENT[ipAssignment];\n        };\n\n        // Events section.\n        $scope.events = {\n            limit: 10\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            if($scope.node && $scope.node.fqdn) {\n                $rootScope.title = $scope.node.fqdn;\n            }\n        }\n\n        function updateHeader() {\n            // Don't update the value if in editing mode. As this would\n            // overwrite the users changes.\n            if($scope.header.editing || $scope.header.editing_domain) {\n                return;\n            }\n            $scope.header.hostname.value = $scope.node.fqdn;\n            // DomainsManager gives us all Domain information while the node\n            // only contains the name and id. Because of this we need to loop\n            // through the DomainsManager options and find the option with the\n            // id matching the node id. Otherwise we end up setting our\n            // selected field to an option not from DomainsManager which\n            // doesn't work.\n            var i;\n            for(i=0;i<$scope.header.domain.options.length;i++) {\n                var option = $scope.header.domain.options[i];\n                if(option.id === $scope.node.domain.id) {\n                    $scope.header.domain.selected = option;\n                    break;\n                }\n            }\n        }\n\n        // Update the available action options for the node.\n        function updateAvailableActionOptions() {\n            $scope.action.availableOptions = [];\n            if(!angular.isObject($scope.node)) {\n                return;\n            }\n\n            // Initialize the allowed action list.\n            if($scope.action.allOptions === null) {\n                $scope.action.allOptions =\n                    $scope.getAllActionOptions($scope.node.node_type);\n            }\n\n            // Build the available action options control from the\n            // allowed actions, except set-zone which does not make\n            // sense in this view because the form has this\n            // functionality\n            angular.forEach($scope.action.allOptions, function(option) {\n                if($scope.node.actions.indexOf(option.name) >= 0\n                   && option.name !== \"set-zone\") {\n                    $scope.action.availableOptions.push(option);\n                }\n            });\n        }\n\n        // Updates the currently selected items in the power section.\n        function updatePower() {\n            // Do not update the selected items, when editing this would\n            // cause the users selection to change.\n            if($scope.power.editing) {\n                return;\n            }\n\n            var i;\n            $scope.power.type = null;\n            for(i = 0; i < $scope.power_types.length; i++) {\n                if($scope.node.power_type === $scope.power_types[i].name) {\n                    $scope.power.type = $scope.power_types[i];\n                    break;\n                }\n            }\n\n            $scope.power.bmc_node_count = $scope.node.power_bmc_node_count;\n\n            $scope.power.parameters = angular.copy(\n                $scope.node.power_parameters);\n            if(!angular.isObject($scope.power.parameters)) {\n                $scope.power.parameters = {};\n            }\n\n            // Force editing mode on, if the power_type is missing for a\n            // machine. This is placed at the bottom because we wanted the\n            // selected items to be filled in at least once.\n            if($scope.canEdit() && $scope.node.power_type === \"\" &&\n               $scope.node.node_type === 0) {\n                $scope.power.editing = true;\n            }\n        }\n\n        // Updates the currently selected items in the summary section.\n        function updateSummary() {\n            // Do not update the selected items, when editing this would\n            // cause the users selection to change.\n            if($scope.summary.editing) {\n                return;\n            }\n\n            if(angular.isObject($scope.node.zone)) {\n                $scope.summary.zone.selected = ZonesManager.getItemFromList(\n                    $scope.node.zone.id);\n            }\n            $scope.summary.architecture.selected = $scope.node.architecture;\n            $scope.summary.min_hwe_kernel.selected = $scope.node.min_hwe_kernel;\n            $scope.summary.tags = angular.copy($scope.node.tags);\n\n            // Force editing mode on, if the architecture is invalid. This is\n            // placed at the bottom because we wanted the selected items to\n            // be filled in at least once.\n            if($scope.canEdit() &&\n                $scope.hasUsableArchitectures() &&\n                $scope.hasInvalidArchitecture()) {\n                $scope.summary.editing = true;\n            }\n        }\n\n        // Updates the service monitor section.\n        function updateServices() {\n            if($scope.isController) {\n                $scope.services = {};\n                angular.forEach(ControllersManager.getServices(\n                        $scope.node), function(service) {\n                    $scope.services[service.name] = service;\n                });\n            }\n        }\n\n        // Update the devices array on the scope based on the device children\n        // on the node.\n        function updateDevices() {\n            $scope.devices = [];\n            angular.forEach($scope.node.devices, function(child) {\n                var device = {\n                    name: child.fqdn\n                };\n\n                // Add the interfaces to the device object if any exists.\n                if(angular.isArray(child.interfaces) &&\n                    child.interfaces.length > 0) {\n                    angular.forEach(child.interfaces, function(nic, nicIdx) {\n                        var deviceWithMAC = angular.copy(device);\n                        deviceWithMAC.mac_address = nic.mac_address;\n\n                        // Remove device name so it is not duplicated in the\n                        // table since this is another MAC address on this\n                        // device.\n                        if(nicIdx > 0) {\n                            deviceWithMAC.name = \"\";\n                        }\n\n                        // Add this links to the device object if any exists.\n                        if(angular.isArray(nic.links) &&\n                            nic.links.length > 0) {\n                            angular.forEach(nic.links, function(link, lIdx) {\n                                var deviceWithLink = angular.copy(\n                                    deviceWithMAC);\n                                deviceWithLink.ip_address = link.ip_address;\n\n                                // Remove the MAC address so it is not\n                                // duplicated in the table since this is\n                                // another link on this interface.\n                                if(lIdx > 0) {\n                                    deviceWithLink.mac_address = \"\";\n                                }\n\n                                $scope.devices.push(deviceWithLink);\n                            });\n                        } else {\n                            $scope.devices.push(deviceWithMAC);\n                        }\n                    });\n                } else {\n                    $scope.devices.push(device);\n                }\n            });\n        }\n\n        // Starts the watchers on the scope.\n        function startWatching() {\n            // Update the title and name when the node fqdn changes.\n            $scope.$watch(\"node.fqdn\", function() {\n                updateTitle();\n                updateHeader();\n            });\n\n            // Update the devices on the node.\n            $scope.$watch(\"node.devices\", updateDevices);\n\n            // Update the availableActionOptions when the node actions change.\n            $scope.$watch(\"node.actions\", updateAvailableActionOptions);\n\n            // Update the summary when the node or architectures list is\n            // updated.\n            $scope.$watch(\"node.architecture\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.architecture.options, updateSummary);\n\n            // Uppdate the summary when min_hwe_kernel is updated.\n            $scope.$watch(\"node.min_hwe_kernel\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.min_hwe_kernel.options, updateSummary);\n\n            // Update the summary when the node or zone list is\n            // updated.\n            $scope.$watch(\"node.zone.id\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.zone.options, updateSummary);\n\n            // Update the power when the node power_type or power_parameters\n            // are updated.\n            $scope.$watch(\"node.power_type\", updatePower);\n            $scope.$watch(\"node.power_parameters\", updatePower);\n            $scope.$watchCollection(\"power_types\", updatePower);\n\n            // Update the services when the services list is updated.\n            $scope.$watch(\"node.service_ids\", updateServices);\n        }\n\n        // Called when the node has been loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            updateTitle();\n            updateSummary();\n            updateServices();\n            startWatching();\n\n            // Tell the storageController and networkingController that the\n            // node has been loaded.\n            if(angular.isObject($scope.storageController)) {\n                $scope.storageController.nodeLoaded();\n            }\n            if(angular.isObject($scope.networkingController)) {\n                $scope.networkingController.nodeLoaded();\n            }\n        }\n\n        $scope.getAllActionOptions = function(node_type) {\n            if(typeof node_type !== 'number' ||\n                    node_type < 0 || node_type > 4) {\n                return [];\n            }\n            var actionTypeForNodeType = {\n                0: \"machine_actions\",\n                1: \"device_actions\",\n                2: \"rack_controller_actions\",\n                3: \"region_controller_actions\",\n                4: \"region_and_rack_controller_actions\"\n            };\n            return GeneralManager.getData(actionTypeForNodeType[node_type]);\n        };\n\n        // Update the node with new data on the region.\n        $scope.updateNode = function(node, queryPower) {\n            if(angular.isUndefined(queryPower)) {\n                queryPower = false;\n            }\n            return $scope.nodesManager.updateItem(node).then(function(node) {\n                updateHeader();\n                updateSummary();\n                if(queryPower) {\n                    $scope.checkPowerState();\n                }\n            }, function(error) {\n                console.log(error);\n                updateHeader();\n                updateSummary();\n            });\n        };\n\n        // Called for autocomplete when the user is typing a tag name.\n        $scope.tagsAutocomplete = function(query) {\n            return TagsManager.autocomplete(query);\n        };\n\n        $scope.getPowerStateClass = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return \"\";\n            }\n\n            if($scope.checkingPower) {\n                return \"checking\";\n            } else {\n                return $scope.node.power_state;\n            }\n        };\n\n        // Get the power state text to show.\n        $scope.getPowerStateText = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return \"\";\n            }\n\n            if($scope.checkingPower) {\n                return \"Checking power\";\n            } else if($scope.node.power_state === \"unknown\") {\n                return \"\";\n            } else {\n                return \"Power \" + $scope.node.power_state;\n            }\n        };\n\n        // Returns true when the \"check now\" button for updating the power\n        // state should be shown.\n        $scope.canCheckPowerState = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return false. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n            return (\n                $scope.node.power_state !== \"unknown\" &&\n                !$scope.checkingPower);\n        };\n\n        // Check the power state of the node.\n        $scope.checkPowerState = function() {\n            $scope.checkingPower = true;\n            $scope.nodesManager.checkPowerState($scope.node).then(function() {\n                $scope.checkingPower = false;\n            });\n        };\n\n        $scope.isUbuntuOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"ubuntu\") {\n                return true;\n            }\n            return false;\n        };\n\n        $scope.isUbuntuCoreOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"ubuntu-core\") {\n                return true;\n            }\n            return false;\n        };\n\n        $scope.isCustomOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"custom\") {\n                return true;\n            }\n            return false;\n        };\n\n        // Return true if there is an action error.\n        $scope.isActionError = function() {\n            return $scope.action.error !== null;\n        };\n\n        // Return True if in deploy action and the osinfo is missing.\n        $scope.isDeployError = function() {\n            // Never a deploy error when there is an action error.\n            if($scope.isActionError()) {\n                return false;\n            }\n\n            var missing_osinfo = (\n                angular.isUndefined($scope.osinfo.osystems) ||\n                $scope.osinfo.osystems.length === 0);\n            if(angular.isObject($scope.action.option) &&\n                $scope.action.option.name === \"deploy\" &&\n                missing_osinfo) {\n                return true;\n            }\n            return false;\n        };\n\n        // Return True if unable to deploy because of missing ssh keys.\n        $scope.isSSHKeyError = function() {\n            // Never a deploy error when there is an action error.\n            if($scope.isActionError()) {\n                return false;\n            }\n            if(angular.isObject($scope.action.option) &&\n                $scope.action.option.name === \"deploy\" &&\n                UsersManager.getSSHKeyCount() === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Called when the actionOption has changed.\n        $scope.action.optionChanged = function() {\n            // Clear the action error.\n            $scope.action.error = null;\n            $scope.action.showing_confirmation = false;\n        };\n\n        // Cancel the action.\n        $scope.actionCancel = function() {\n            $scope.action.option = null;\n            $scope.action.error = null;\n            $scope.action.showing_confirmation = false;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            var extra = {};\n            var i;\n            // Set deploy parameters if a deploy.\n            if($scope.action.option.name === \"deploy\" &&\n                angular.isString($scope.osSelection.osystem) &&\n                angular.isString($scope.osSelection.release)) {\n\n                // Set extra. UI side the release is structured os/release, but\n                // when it is sent over the websocket only the \"release\" is\n                // sent.\n                extra.osystem = $scope.osSelection.osystem;\n                var release = $scope.osSelection.release;\n                release = release.split(\"/\");\n                release = release[release.length-1];\n                extra.distro_series = release;\n                // hwe_kernel is optional so only include it if its specified\n                if(angular.isString($scope.osSelection.hwe_kernel) &&\n                   ($scope.osSelection.hwe_kernel.indexOf('hwe-') >= 0 ||\n                    $scope.osSelection.hwe_kernel.indexOf('ga-') >= 0)) {\n                    extra.hwe_kernel = $scope.osSelection.hwe_kernel;\n                }\n            } else if($scope.action.option.name === \"commission\") {\n                extra.enable_ssh = $scope.commissionOptions.enableSSH;\n                extra.skip_networking = (\n                    $scope.commissionOptions.skipNetworking);\n                extra.skip_storage = $scope.commissionOptions.skipStorage;\n                extra.commissioning_scripts = [];\n                for(i=0;i<$scope.commissioningSelection.length;i++) {\n                    extra.commissioning_scripts.push(\n                        $scope.commissioningSelection[i].id);\n                }\n                if($scope.commissionOptions.updateFirmware) {\n                    extra.commissioning_scripts.push('update_firmware')\n                }\n                if($scope.commissionOptions.configureHBA) {\n                    extra.commissioning_scripts.push('configure_hba')\n                }\n                if(extra.commissioning_scripts.length === 0) {\n                    // Tell the region not to run any custom commissioning\n                    // scripts.\n                    extra.commissioning_scripts.push('none');\n                }\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.testSelection.length;i++) {\n                    extra.testing_scripts.push($scope.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.action.option.name === \"test\") {\n                if($scope.node.status_code === 6 &&\n                        !$scope.action.showing_confirmation) {\n                    $scope.action.showing_confirmation = true;\n                    return;\n                }\n                // Set the test options.\n                extra.enable_ssh = $scope.commissionOptions.enableSSH;\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.testSelection.length;i++) {\n                    extra.testing_scripts.push($scope.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.action.option.name === \"release\") {\n                // Set the release options.\n                extra.erase = $scope.releaseOptions.erase;\n                extra.secure_erase = $scope.releaseOptions.secureErase;\n                extra.quick_erase = $scope.releaseOptions.quickErase;\n            }\n\n            $scope.nodesManager.performAction(\n                $scope.node, $scope.action.option.name, extra).then(function() {\n                    // If the action was delete, then go back to listing.\n                    if($scope.action.option.name === \"delete\") {\n                        $location.path(\"/machines\");\n                    }\n                    $scope.action.option = null;\n                    $scope.action.error = null;\n                    $scope.action.showing_confirmation = false;\n                    $scope.osSelection.$reset();\n                    $scope.commissionOptions.enableSSH = false;\n                    $scope.commissionOptions.skipNetworking = false;\n                    $scope.commissionOptions.skipStorage = false;\n                    $scope.commissionOptions.updateFirmware = false;\n                    $scope.commissionOptions.configureHBA = false;\n                    $scope.commissioningSelection = [];\n                    $scope.testSelection = [];\n                }, function(error) {\n                    $scope.action.error = error;\n                });\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if their are usable architectures.\n        $scope.hasUsableArchitectures = function() {\n            return $scope.summary.architecture.options.length > 0;\n        };\n\n        // Return the placeholder text for the architecture dropdown.\n        $scope.getArchitecturePlaceholder = function() {\n            if($scope.hasUsableArchitectures()) {\n                return \"Choose an architecture\";\n            } else {\n                return \"-- No usable architectures --\";\n            }\n        };\n\n        // Return true if the saved architecture is invalid.\n        $scope.hasInvalidArchitecture = function() {\n            if(angular.isObject($scope.node)) {\n                return (\n                    !$scope.isDevice && (\n                        $scope.node.architecture === \"\" ||\n                        $scope.summary.architecture.options.indexOf(\n                            $scope.node.architecture) === -1));\n            } else {\n                return false;\n            }\n        };\n\n        // Return true if the current architecture selection is invalid.\n        $scope.invalidArchitecture = function() {\n            return (\n                !$scope.isDevice && !$scope.isController && (\n                    $scope.summary.architecture.selected === \"\" ||\n                    $scope.summary.architecture.options.indexOf(\n                        $scope.summary.architecture.selected) === -1));\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If power_types exist then a rack controller is connected.\n            return $scope.power_types.length > 0;\n        };\n\n        // Return true if the node is locked\n        $scope.isLocked = function() {\n            if ($scope.node === null) {\n                return false;\n            }\n\n            return $scope.node.locked;\n        };\n\n        // Return true when the edit buttons can be clicked.\n        $scope.canEdit = function() {\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser() &&\n                    ! $scope.isLocked());\n        };\n\n        // Called to edit the domain name.\n        $scope.editHeaderDomain = function() {\n            if($scope.canEdit()) {\n                return;\n            }\n\n            // Do nothing if already editing because we don't want to reset\n            // the current value.\n            if($scope.header.editing_domain) {\n                return;\n            }\n            $scope.header.editing = false;\n            $scope.header.editing_domain = true;\n\n            // Set the value to the hostname, as hostname and domain are edited\n            // using different fields.\n            $scope.header.hostname.value = $scope.node.hostname;\n        };\n\n        // Called to edit the node name.\n        $scope.editHeader = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n\n            // Do nothing if already editing because we don't want to reset\n            // the current value.\n            if($scope.header.editing) {\n                return;\n            }\n            $scope.header.editing = true;\n            $scope.header.editing_domain = false;\n\n            // Set the value to the hostname, as hostname and domain are edited\n            // using different fields.\n            $scope.header.hostname.value = $scope.node.hostname;\n        };\n\n        // Return true when the hostname or domain in the header is invalid.\n        $scope.editHeaderInvalid = function() {\n            // Not invalid unless editing.\n            if(!$scope.header.editing && !$scope.header.editing_domain) {\n                return false;\n            }\n\n            // The value cannot be blank.\n            var value = $scope.header.hostname.value;\n            if(value.length === 0) {\n                return true;\n            }\n            return !ValidationService.validateHostname(value);\n        };\n\n        // Called to cancel editing of the node hostname and domain.\n        $scope.cancelEditHeader = function() {\n            $scope.header.editing = false;\n            $scope.header.editing_domain = false;\n            updateHeader();\n        };\n\n        // Called to save editing of node hostname or domain.\n        $scope.saveEditHeader = function() {\n            // Does nothing if invalid.\n            if($scope.editHeaderInvalid()) {\n                return;\n            }\n            $scope.header.editing = false;\n            $scope.header.editing_domain = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.hostname = $scope.header.hostname.value;\n            node.domain = $scope.header.domain.selected;\n\n            // Update the node.\n            $scope.updateNode(node);\n        };\n\n        // Called to enter edit mode in the summary section.\n        $scope.editSummary = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.summary.editing = true;\n        };\n\n        // Called to cancel editing in the summary section.\n        $scope.cancelEditSummary = function() {\n            // Leave edit mode only if node has valid architecture.\n            if($scope.isDevice || $scope.isController) {\n                $scope.summary.editing = false;\n            } else if(!$scope.hasInvalidArchitecture()) {\n                $scope.summary.editing = false;\n            }\n\n            updateSummary();\n        };\n\n        // Called to save the changes made in the summary section.\n        $scope.saveEditSummary = function() {\n            // Do nothing if invalidArchitecture.\n            if($scope.invalidArchitecture()) {\n                return;\n            }\n\n            $scope.summary.editing = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.zone = angular.copy($scope.summary.zone.selected);\n            node.architecture = $scope.summary.architecture.selected;\n            if($scope.summary.min_hwe_kernel.selected === null) {\n                node.min_hwe_kernel = \"\";\n            }else{\n                node.min_hwe_kernel = $scope.summary.min_hwe_kernel.selected;\n            }\n            node.tags = [];\n            angular.forEach($scope.summary.tags, function(tag) {\n                node.tags.push(tag.text);\n            });\n\n            // Update the node.\n            $scope.updateNode(node);\n        };\n\n        // Return true if the current power type selection is invalid.\n        $scope.invalidPowerType = function() {\n            return !angular.isObject($scope.power.type);\n        };\n\n        // Called to enter edit mode in the power section.\n        $scope.editPower = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.power.editing = true;\n        };\n\n        // Called to cancel editing in the power section.\n        $scope.cancelEditPower = function() {\n            // If the node is not a machine, only leave edit mode if node has\n            // valid power type.\n            if ($scope.node.node_type !== 0 || $scope.node.power_type !== \"\") {\n                $scope.power.editing = false;\n            }\n            updatePower();\n        };\n\n        // Called to save the changes made in the power section.\n        $scope.saveEditPower = function() {\n            // Does nothing if invalid power type.\n            if($scope.invalidPowerType()) {\n                return;\n            }\n            $scope.power.editing = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.power_type = $scope.power.type.name;\n            node.power_parameters = angular.copy($scope.power.parameters);\n\n            // Update the node.\n            $scope.updateNode(node, true);\n        };\n\n        // Return true if the \"load more\" events button should be available.\n        $scope.allowShowMoreEvents = function() {\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n            if(!angular.isArray($scope.node.events)) {\n                return false;\n            }\n            return (\n                $scope.node.events.length > 0 &&\n                $scope.node.events.length > $scope.events.limit &&\n                $scope.events.limit < 50);\n        };\n\n        // Show another 10 events.\n        $scope.showMoreEvents = function() {\n            $scope.events.limit += 10;\n        };\n\n        // Return the nice text for the given event.\n        $scope.getEventText = function(event) {\n            var text = event.type.description;\n            if(angular.isString(event.description) &&\n                event.description.length > 0) {\n                text += \" - \" + event.description;\n            }\n            return text;\n        };\n\n        $scope.getPowerEventError = function() {\n            if(!angular.isObject($scope.node) ||\n                !angular.isArray($scope.node.events)) {\n                return;\n            }\n\n            var i;\n            for(i = 0; i < $scope.node.events.length; i++) {\n                var event = $scope.node.events[i];\n                if(event.type.level === \"warning\" &&\n                   event.type.description === \"Failed to query node's BMC\") {\n                    // Latest power event is an error\n                    return event;\n                } else if(event.type.level === \"info\" &&\n                          event.type.description === \"Queried node's BMC\") {\n                    // Latest power event is not an error\n                    return;\n                }\n            }\n            // No power event found, thus no error\n            return;\n        };\n\n        $scope.hasPowerEventError = function() {\n            var event = $scope.getPowerEventError();\n            return angular.isObject(event);\n        };\n\n        $scope.getPowerEventErrorText = function() {\n            var event = $scope.getPowerEventError();\n            if(angular.isObject(event)) {\n                // Return text\n                return event.description;\n            } else {\n                return \"\";\n            }\n        };\n\n        // true if power error prevents the provided action\n        $scope.hasActionPowerError = function(actionName) {\n            if(!$scope.hasPowerError()) {\n                return false; // no error, no need to check state\n            }\n            // these states attempt to manipulate power\n            var powerChangingStates = [\n                'commission',\n                'deploy',\n                'on',\n                'off',\n                'release'\n            ];\n            if(actionName && powerChangingStates.indexOf(actionName) > -1) {\n                return true;\n            }\n            return false;\n        };\n\n        // Check to see if the power type has any missing system packages.\n        $scope.hasPowerError = function() {\n            if(angular.isObject($scope.power.type)) {\n                return $scope.power.type.missing_packages.length > 0;\n            } else {\n                return false;\n            }\n        };\n\n        // Returns a formatted string of missing system packages.\n        $scope.getPowerErrors = function() {\n            var i;\n            var result = \"\";\n            if(angular.isObject($scope.power.type)) {\n                var packages = $scope.power.type.missing_packages;\n                packages.sort();\n                for(i = 0; i < packages.length; i++) {\n                    result += packages[i];\n                    if(i+2 < packages.length) {\n                        result += \", \";\n                    }\n                    else if(i+1 < packages.length) {\n                        result += \" and \";\n                    }\n                }\n                result += packages.length > 1 ? \" packages\" : \" package\";\n            }\n            return result;\n        };\n\n        // Return the class to apply to the service.\n        $scope.getServiceClass = function(service) {\n            if(!angular.isObject(service)) {\n                return \"none\";\n            } else {\n                if(service.status === \"running\") {\n                    return \"success\";\n                } else if(service.status === \"dead\") {\n                    return \"error\";\n                } else if(service.status === \"degraded\") {\n                    return \"warning\";\n                } else {\n                    return \"none\";\n                }\n            }\n        };\n\n        $scope.hasCustomCommissioningScripts = function() {\n            var i;\n            for(i=0;i<$scope.scripts.length;i++) {\n                if($scope.scripts[i].script_type === 0) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Called by the children controllers to let the parent know.\n        $scope.controllerLoaded = function(name, scope) {\n            $scope[name] = scope;\n            if(angular.isObject(scope.node)) {\n              scope.nodeLoaded();\n            }\n        };\n\n        // Only show a warning that tests have failed if there are failed tests\n        // and the node isn't currently commissioning or testing.\n        $scope.showFailedTestWarning = function() {\n            // Devices can't have failed tests and don't have status_code\n            // defined.\n            if($scope.node.node_type === 1 || !$scope.node.status_code) {\n                return false;\n            }\n            switch($scope.node.status_code) {\n                // NEW\n                case 0:\n                // COMMISSIONING\n                case 1:\n                // FAILED_COMMISSIONING\n                case 2:\n                // TESTING\n                case 21:\n                // FAILED_TESTING\n                case 22:\n                    return false;\n            }\n            switch($scope.node.testing_status) {\n                // Tests havn't been run\n                case -1:\n                // Tests have passed\n                case 2:\n                    return false;\n            }\n            return true;\n        };\n\n        // Get the subtext for the CPU card. Only nodes commissioned after\n        // MAAS 2.4 will have the CPU speed.\n        $scope.getCPUSubtext = function() {\n            var label = $scope.node.cpu_count + \" cores\";\n            if(!$scope.node.cpu_speed || $scope.node.cpu_speed === 0) {\n                return label;\n            }else if($scope.node.cpu_speed < 1000) {\n                return label + \" @ \" + $scope.node.cpu_speed + \" Mhz\";\n            }else{\n                return label + \" @ \" + ($scope.node.cpu_speed / 1000) + \" Ghz\";\n            }\n        }\n\n        // Reload osinfo when the page reloads\n        $scope.$on(\"$routeChangeSuccess\", function () {\n            GeneralManager.loadItems([\"osinfo\"]).then(function() {\n                $scope.osinfo = GeneralManager.getData(\"osinfo\");\n            });\n        });\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            MachinesManager,\n            DevicesManager,\n            ControllersManager,\n            ZonesManager,\n            GeneralManager,\n            UsersManager,\n            TagsManager,\n            DomainsManager,\n            ServicesManager,\n            ScriptsManager\n        ]).then(function() {\n            var path = $location.path();\n            if(path.indexOf('/controller') !== -1) {\n                $scope.nodesManager = ControllersManager;\n                $scope.isController = true;\n                $scope.isDevice = false;\n                $scope.type_name = 'controller';\n                $scope.type_name_title = 'Controller';\n                $rootScope.page = 'controllers';\n            }else if(path.indexOf('/device') !== -1) {\n                $scope.nodesManager = DevicesManager;\n                $scope.isController = false;\n                $scope.isDevice = true;\n                $scope.type_name = 'device';\n                $scope.type_name_title = 'Device';\n                $rootScope.page = 'devices';\n            }else{\n                $scope.nodesManager = MachinesManager;\n                $scope.isController = false;\n                $scope.isDevice = false;\n                $scope.type_name = 'machine';\n                $scope.type_name_title = 'Machine';\n                $rootScope.page = 'machines';\n            }\n\n            // Possibly redirected from another controller that already had\n            // this node set to active. Only call setActiveItem if not already\n            // the activeItem.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n                activeNode = $scope.nodesManager.getActiveItem();\n            }\n            if($scope.isDevice) {\n                $scope.ip_assignment = activeNode.ip_assignment;\n            }\n        });\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Networking Controller\n */\n\n// Filter that is specific to the NodeNetworkingController. Filters the\n// list of VLANs to be only those that are unused by the interface.\nangular.module('MAAS').filter('filterByUnusedForInterface', function() {\n    return function(vlans, nic, originalInterfaces) {\n        var filtered = [];\n        if(!angular.isObject(nic) ||\n            !angular.isObject(originalInterfaces)) {\n            return filtered;\n        }\n        var usedVLANs = [];\n        angular.forEach(originalInterfaces, function(inter) {\n            if(inter.type === \"vlan\") {\n                var parent = inter.parents[0];\n                if(parent === nic.id) {\n                    usedVLANs.push(inter.vlan_id);\n                }\n            }\n        });\n        angular.forEach(vlans, function(vlan) {\n            var idx = usedVLANs.indexOf(vlan.id);\n            if(idx === -1) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Filters the\n// list of interfaces to not include the current parent interfaces being\n// bonded together.\nangular.module('MAAS').filter('removeInterfaceParents', function() {\n    return function(interfaces, childInterface, skip) {\n        if(skip || !angular.isObject(childInterface) ||\n            !angular.isArray(childInterface.parents)) {\n            return interfaces;\n        }\n        var filtered = [];\n        angular.forEach(interfaces, function(nic) {\n            var i, parent, found = false;\n            for(i = 0; i < childInterface.parents.length; i++) {\n                parent = childInterface.parents[i];\n                if(parent.id === nic.id && parent.link_id === nic.link_id) {\n                    found = true;\n                    break;\n                }\n            }\n            if(!found) {\n                filtered.push(nic);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Remove the default\n// VLAN if the interface is a VLAN interface.\nangular.module('MAAS').filter('removeDefaultVLANIfVLAN', function() {\n    return function(vlans, interfaceType) {\n        if(!angular.isString(interfaceType)) {\n            return vlans;\n        }\n        var filtered = [];\n        angular.forEach(vlans, function(vlan) {\n            if(interfaceType !== \"vlan\") {\n                filtered.push(vlan);\n            } else if(vlan.vid !== 0) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Only provide the\n// available modes for that interface type.\nangular.module('MAAS').filter('filterLinkModes', function() {\n    return function(modes, nic) {\n        if(!angular.isObject(nic)) {\n            return modes;\n        }\n        var filtered = [];\n\n        // If this is not a $maasForm, make it work like one.\n        // We need to use getValue() to access attributes, because each\n        // type of maas-obj-form gets to define how values come out.\n        if(!angular.isFunction(nic.getValue)) {\n            nic.getValue = function(name) {\n                return this[name];\n            };\n        }\n\n        if(!angular.isObject(nic.getValue('subnet'))) {\n            // No subnet is configure so the only allowed mode\n            // is 'link_up'.\n            angular.forEach(modes, function(mode) {\n                if(mode.mode === \"link_up\") {\n                    filtered.push(mode);\n                }\n            });\n        } else {\n            // Don't add LINK_UP if more than one link exists or\n            // if the interface is an alias.\n            var links = nic.getValue('links');\n            var nicType = nic.getValue('type');\n            var allowLinkUp = (\n                (angular.isObject(links) && links.length > 1) ||\n                (nicType === \"alias\"));\n            angular.forEach(modes, function(mode) {\n                if(allowLinkUp && mode.mode === \"link_up\") {\n                    return;\n                }\n                // Can't run DHCP twice on one NIC.\n                if(nicType === \"alias\" && mode.mode === \"dhcp\") {\n                    return;\n                }\n                filtered.push(mode);\n            });\n        }\n        return filtered;\n    };\n});\n\n\nangular.module('MAAS').controller('NodeNetworkingController', [\n    '$scope', '$filter', 'FabricsManager', 'VLANsManager', 'SubnetsManager',\n    'MachinesManager', 'ControllersManager', 'DevicesManager',\n    'GeneralManager', 'UsersManager',\n    'ManagerHelperService', 'ValidationService', 'JSONService',\n    function(\n        $scope, $filter, FabricsManager, VLANsManager, SubnetsManager,\n        MachinesManager, ControllersManager, DevicesManager,\n        GeneralManager, UsersManager,\n        ManagerHelperService, ValidationService, JSONService) {\n\n        // Different interface types.\n        var INTERFACE_TYPE = {\n            PHYSICAL: \"physical\",\n            BOND: \"bond\",\n            BRIDGE: \"bridge\",\n            VLAN: \"vlan\",\n            ALIAS: \"alias\"\n        };\n        var INTERFACE_TYPE_TEXTS = {\n            \"physical\": \"Physical\",\n            \"bond\": \"Bond\",\n            \"bridge\": \"Bridge\",\n            \"vlan\": \"VLAN\",\n            \"alias\": \"Alias\"\n        };\n\n        // Different link modes for an interface.\n        var LINK_MODE = {\n            AUTO: \"auto\",\n            STATIC: \"static\",\n            DHCP: \"dhcp\",\n            LINK_UP: \"link_up\"\n        };\n        var LINK_MODE_TEXTS = {\n            \"auto\": \"Auto assign\",\n            \"static\": \"Static assign\",\n            \"dhcp\": \"DHCP\",\n            \"link_up\": \"Unconfigured\"\n        };\n\n        // Different selection modes.\n        var SELECTION_MODE = {\n            NONE: null,\n            SINGLE: \"single\",\n            MULTI: \"multi\",\n            DELETE: \"delete\",\n            ADD: \"add\",\n            CREATE_BOND: \"create-bond\",\n            CREATE_BRIDGE: \"create-bridge\",\n            CREATE_PHYSICAL: \"create-physical\",\n            EDIT: \"edit\"\n        };\n\n        var IP_ASSIGNMENT = {\n            DYNAMIC: \"dynamic\",\n            EXTERNAL: \"external\",\n            STATIC: \"static\"\n        };\n\n        // Device ip assignment options.\n        $scope.ipAssignments = [\n            {\n                name: IP_ASSIGNMENT.EXTERNAL,\n                text: \"External\"\n            },\n            {\n                name: IP_ASSIGNMENT.DYNAMIC,\n                text: \"Dynamic\"\n            },\n            {\n                name: IP_ASSIGNMENT.STATIC,\n                text: \"Static\"\n            }\n        ];\n\n        // Set the initial values for this scope.\n        $scope.loaded = false;\n        $scope.nodeHasLoaded = false;\n        $scope.managersHaveLoaded = false;\n        $scope.tableInfo = {column: 'name'};\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.vlans = VLANsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.interfaces = [];\n        $scope.interfaceLinksMap = {};\n        $scope.interfaceErrorsByLinkId = {};\n        $scope.originalInterfaces = {};\n        $scope.selectedInterfaces = [];\n        $scope.selectedMode = null;\n        $scope.newInterface = {};\n        $scope.newBondInterface = {};\n        $scope.newBridgeInterface = {};\n        $scope.editInterface = null;\n        $scope.bondOptions = GeneralManager.getData(\"bond_options\");\n        $scope.modes = [\n            {\n                mode: LINK_MODE.AUTO,\n                text: LINK_MODE_TEXTS[LINK_MODE.AUTO]\n            },\n            {\n                mode: LINK_MODE.STATIC,\n                text: LINK_MODE_TEXTS[LINK_MODE.STATIC]\n            },\n            {\n                mode: LINK_MODE.DHCP,\n                text: LINK_MODE_TEXTS[LINK_MODE.DHCP]\n            },\n            {\n                mode: LINK_MODE.LINK_UP,\n                text: LINK_MODE_TEXTS[LINK_MODE.LINK_UP]\n            }\n        ];\n\n        // Sets loaded to true if both the node has been loaded at the\n        // other required managers for this scope have been loaded.\n        function updateLoaded() {\n            $scope.loaded = $scope.nodeHasLoaded && $scope.managersHaveLoaded;\n            if($scope.loaded) {\n                updateInterfaces();\n            }\n        }\n\n        // Update the list of interfaces for the node. For each link on the\n        // interface, the interface is duplicated in the list to make render\n        // in a data-ng-repeat easier.\n        function updateInterfaces() {\n            $scope.originalInterfaces = {};\n            angular.forEach($scope.node.interfaces, function(nic) {\n                $scope.originalInterfaces[nic.id] = nic;\n            });\n\n            var interfaces = [];\n            // vlanTable contains data packaged for the 'Served VLANs' section,\n            // which is essentially Interface LEFT JOIN VLAN LEFT JOIN Subnet.\n            var vlanTable = [];\n            // Keep track of VLAN IDs we've processed.\n            var addedVlans = {};\n\n            angular.forEach($scope.node.interfaces, function(nic) {\n                // When a interface has a child that is a bond or bridge.\n                // Then that interface is not included in the interface list.\n                // Parent interface with a bond or bridge child can only have\n                // one child.\n                if(nic.children.length === 1) {\n                    var child = $scope.originalInterfaces[nic.children[0]];\n                    if(child.type === INTERFACE_TYPE.BOND ||\n                       child.type === INTERFACE_TYPE.BRIDGE) {\n                        // This parent now has a bond or bridge for a child.\n                        // If this was the editInterface, then it needs to be\n                        // unset. We only need to check the \"id\" (not\n                        // the \"link_id\"), because if this interface did have\n                        // aliases they have now been removed.\n                        if(angular.isObject($scope.editInterface) &&\n                            $scope.editInterface.id === nic.id) {\n                            $scope.editInterface = null;\n                            $scope.selectedMode = SELECTION_MODE.NONE;\n                        }\n                        return;\n                    }\n                }\n\n                // When the interface is a bond or a bridge, place the children\n                // as members for that interface.\n                if(nic.type === INTERFACE_TYPE.BOND ||\n                   nic.type === INTERFACE_TYPE.BRIDGE) {\n                    nic.members = [];\n                    angular.forEach(nic.parents, function(parent) {\n                        nic.members.push(\n                            angular.copy($scope.originalInterfaces[parent]));\n                    });\n                }\n\n                // Format the tags when they have not already been formatted.\n                if(angular.isArray(nic.tags) &&\n                    nic.tags.length > 0 &&\n                    !angular.isString(nic.tags[0].text)) {\n                    nic.tags = formatTags(nic.tags);\n                }\n\n                nic.vlan = VLANsManager.getItemFromList(nic.vlan_id);\n                if(angular.isObject(nic.vlan)) {\n                    nic.fabric = FabricsManager.getItemFromList(\n                            nic.vlan.fabric);\n\n                    // Build the vlanTable for controller detail page.\n                    if ($scope.$parent.isController) {\n                        // Skip duplicate VLANs (by id, they can share names).\n                        if(!(Object.prototype.hasOwnProperty.call(\n                                addedVlans, nic.vlan.id))) {\n                            addedVlans[nic.vlan.id] = true;\n                            var vlanRecord = {\n                                \"fabric\": nic.fabric,\n                                \"vlan\": nic.vlan,\n                                \"subnets\": $filter('filter')(\n                                    $scope.subnets, {vlan:nic.vlan.id}, true),\n                                \"primary_rack\": null,\n                                \"secondary_rack\": null,\n                                \"sort_key\": nic.fabric.name + \"|\" +\n                                    $scope.getVLANText(nic.vlan)\n                            };\n                            if(nic.vlan.primary_rack) {\n                                vlanRecord.primary_rack =\n                                    ControllersManager.getItemFromList(\n                                        nic.vlan.primary_rack);\n                            }\n                            if(nic.vlan.secondary_rack) {\n                                vlanRecord.secondary_rack =\n                                    ControllersManager.getItemFromList(\n                                        nic.vlan.secondary_rack);\n                            }\n                            vlanTable.push(vlanRecord);\n                        }\n                        // Sort the table by (VLANText, fabric.name).\n                        vlanTable.sort(function(a, b) {\n                            return a.sort_key.localeCompare(b.sort_key);\n                        });\n                    }\n                }\n\n                // Update the interface based on its links or duplicate the\n                // interface if it has multiple links.\n                if(nic.links.length === 0) {\n                    // No links on this interface. The interface is either\n                    // disabled or has no links (which means the interface\n                    // is in LINK_UP mode).\n                    nic.link_id = -1;\n                    nic.subnet = null;\n                    nic.mode = LINK_MODE.LINK_UP;\n                    nic.ip_address = \"\";\n                    interfaces.push(nic);\n                } else {\n                    var idx = 0;\n                    angular.forEach(nic.links, function(link) {\n                        var nic_copy = angular.copy(nic);\n                        nic_copy.link_id = link.id;\n                        nic_copy.subnet = SubnetsManager.getItemFromList(\n                            link.subnet_id);\n                        nic_copy.mode = link.mode;\n                        nic_copy.ip_address = link.ip_address;\n                        if(angular.isUndefined(nic_copy.ip_address)) {\n                            nic_copy.ip_address = \"\";\n                        }\n                        // We don't want to deep copy the VLAN and fabric\n                        // object so we set those back to the original.\n                        nic_copy.vlan = nic.vlan;\n                        nic_copy.fabric = nic.fabric;\n                        if(idx > 0) {\n                            // Each extra link is an alais on the original\n                            // interface.\n                            nic_copy.type = INTERFACE_TYPE.ALIAS;\n                            nic_copy.name += \":\" + idx;\n                        }\n                        idx++;\n                        interfaces.push(nic_copy);\n                    });\n                }\n            });\n\n            // Update the scopes interfaces.\n            $scope.interfaces = interfaces;\n            $scope.vlanTable = vlanTable;\n\n            // Update the scope interface links mapping.\n            $scope.interfaceLinksMap = {};\n            angular.forEach($scope.interfaces, function(nic) {\n                var linkMaps = $scope.interfaceLinksMap[nic.id];\n                if(angular.isUndefined(linkMaps)) {\n                    linkMaps = {};\n                    $scope.interfaceLinksMap[nic.id] = linkMaps;\n                }\n                linkMaps[nic.link_id] = nic;\n            });\n\n            // Clear the editInterface if it no longer exists in the\n            // interfaceLinksMap.\n            if(angular.isObject($scope.editInterface)) {\n                var links = $scope.interfaceLinksMap[$scope.editInterface.id];\n                if(angular.isUndefined(links)) {\n                    $scope.editInterface = null;\n                    $scope.selectedMode = SELECTION_MODE.NONE;\n                } else {\n                    var link = links[$scope.editInterface.link_id];\n                    if(angular.isUndefined(link)) {\n                        $scope.editInterface = null;\n                        $scope.selectedMode = SELECTION_MODE.NONE;\n                    }\n                }\n            }\n\n            // Update newInterface.parent if it has changed.\n            updateNewInterface();\n        }\n\n        // Return the original link object for the given interface.\n        function mapNICToOriginalLink(nic_id, link_id) {\n            var originalInteface = $scope.originalInterfaces[nic_id];\n            if(angular.isObject(originalInteface)) {\n                var i, link = null;\n                for(i = 0; i < originalInteface.links.length; i++) {\n                    link = originalInteface.links[i];\n                    if(link.id === link_id) {\n                        break;\n                    }\n                }\n                return link;\n            } else {\n                return null;\n            }\n        }\n\n        // Leave single selection mode.\n        function leaveSingleSelectionMode() {\n            if($scope.selectedMode === SELECTION_MODE.SINGLE ||\n                $scope.selectedMode === SELECTION_MODE.ADD ||\n                $scope.selectedMode === SELECTION_MODE.DELETE) {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            }\n        }\n\n        // Update the new interface since the interfaces list has\n        // been reloaded.\n        function updateNewInterface() {\n            if(angular.isObject($scope.newInterface.parent)) {\n                var parentId = $scope.newInterface.parent.id;\n                var linkId = $scope.newInterface.parent.link_id;\n                var links = $scope.interfaceLinksMap[parentId];\n                if(angular.isObject(links)) {\n                    var newParent = links[linkId];\n                    if(angular.isObject(newParent)) {\n                        $scope.newInterface.parent = newParent;\n\n                        var iType = $scope.newInterface.type;\n                        var isAlias = iType === INTERFACE_TYPE.ALIAS;\n                        var isVLAN = iType === INTERFACE_TYPE.VLAN;\n                        var canAddAlias = $scope.canAddAlias(newParent);\n                        var canAddVLAN = $scope.canAddVLAN(newParent);\n                        if(!canAddAlias && !canAddVLAN) {\n                            // Cannot do any adding now.\n                            $scope.newInterface = {};\n                            leaveSingleSelectionMode();\n                        } else {\n                            if(isAlias && !canAddAlias && canAddVLAN) {\n                                $scope.newInterface.type = \"vlan\";\n                                $scope.addTypeChanged();\n                            } else if(isVLAN && !canAddVLAN && canAddAlias) {\n                                $scope.newInterface.type = \"alias\";\n                                $scope.addTypeChanged();\n                            }\n                        }\n                        return;\n                    }\n                }\n\n                // Parent no longer exists. Exit the single selection modes.\n                $scope.newInterface = {};\n                leaveSingleSelectionMode();\n            }\n        }\n\n        // Return the default VLAN for a fabric.\n        function getDefaultVLAN(fabric) {\n            return VLANsManager.getItemFromList(fabric.default_vlan_id);\n        }\n\n        // Return list of unused VLANs for an interface. Also remove the\n        // ignoreVLANs from the returned list.\n        function getUnusedVLANs(nic, ignoreVLANs) {\n            var vlans = $filter('removeDefaultVLAN')($scope.vlans);\n            vlans = $filter('filterByFabric')(vlans, nic.fabric);\n            vlans = $filter('filterByUnusedForInterface')(\n                vlans, nic, $scope.originalInterfaces);\n\n            // Remove the VLAN's that should be ignored when getting the unused\n            // VLANs. This is done to help the selection of the next default.\n            if(angular.isUndefined(ignoreVLANs)) {\n                ignoreVLANs = [];\n            }\n            angular.forEach(ignoreVLANs, function(vlan) {\n                var i;\n                for(i = 0; i < vlans.length; i++) {\n                    if(vlans[i].id === vlan.id) {\n                        vlans.splice(i, 1);\n                        break;\n                    }\n                }\n            });\n            return vlans;\n        }\n\n        // Return the currently selected interface objects.\n        function getSelectedInterfaces() {\n            var interfaces = [];\n            angular.forEach($scope.selectedInterfaces, function(key) {\n                var splitKey = key.split('/');\n                var links = $scope.interfaceLinksMap[splitKey[0]];\n                if(angular.isObject(links)) {\n                    var nic = links[splitKey[1]];\n                    if(angular.isObject(nic)) {\n                        interfaces.push(nic);\n                    }\n                }\n            });\n            return interfaces;\n        }\n\n        // Get the next available name.\n        function getNextName(prefix) {\n            var idx = 0;\n            angular.forEach($scope.originalInterfaces, function(nic) {\n                if(nic.name === prefix + idx) {\n                    idx++;\n                }\n            });\n            return prefix + idx;\n        }\n\n        // Return the tags formatted for ngTagInput.\n        function formatTags(tags) {\n            var formatted = [];\n            angular.forEach(tags, function(tag) {\n                formatted.push({ text: tag });\n            });\n            return formatted;\n        }\n\n        // Called by $parent when the node has been loaded.\n        $scope.nodeLoaded = function() {\n            $scope.$watch(\"node.interfaces\", updateInterfaces);\n            // Watch subnets for the served VLANs section.\n            if ($scope.$parent.isController) {\n                $scope.$watch(\"subnets\", updateInterfaces, true);\n            }\n            $scope.nodeHasLoaded = true;\n            updateLoaded();\n        };\n\n        // Return true if only the name or mac address of an interface can\n        // be edited.\n        $scope.isLimitedEditingAllowed = function(nic) {\n            if (!$scope.isSuperUser()) {\n                // If the user is not the superuser, pretend it's not Ready.\n                return false;\n            }\n            if ($scope.$parent.isController || $scope.$parent.isDevice) {\n                // Controllers and Devices are never in limited mode.\n                return false;\n            }\n            return (\n                angular.isObject($scope.node) &&\n                $scope.node.status === \"Deployed\" &&\n                nic.type !== \"vlan\");\n        };\n\n        // Return true if the networking information cannot be edited.\n        // (it can't be changed when the node is in any state other\n        // than Ready or Broken and the user is not a superuser)\n        $scope.isAllNetworkingDisabled = function() {\n            if (!$scope.isSuperUser()) {\n                // If the user is not a superuser, disable the networking panel.\n                return true;\n            }\n            if ($scope.$parent.isController || $scope.$parent.isDevice) {\n                // Never disable the full networking panel when its a\n                // Controller or Device.\n                return false;\n            }\n            if (angular.isObject($scope.node) &&\n                    [\"Ready\", \"Allocated\", \"Broken\"].indexOf(\n                        $scope.node.status) === -1) {\n                // If a non-controller node is not ready allocated, or broken,\n                // disable networking panel.\n                return true;\n            }\n            // User must be a superuser and the node must be\n            // either ready or broken. Enable it.\n            return false;\n        };\n\n        // Return true if the interface is the boot interface or has a parent\n        // that is the boot interface.\n        $scope.isBootInterface = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            }\n\n            if(nic.is_boot && nic.type !== INTERFACE_TYPE.ALIAS) {\n                return true;\n            } else if(nic.type === INTERFACE_TYPE.BOND ||\n                      nic.type === INTERFACE_TYPE.BRIDGE) {\n                var i;\n                for(i = 0; i < nic.members.length; i++) {\n                    if(nic.members[i].is_boot) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Get the text for the type of the interface.\n        $scope.getInterfaceTypeText = function(nic) {\n            var text = INTERFACE_TYPE_TEXTS[nic.type];\n            if(angular.isDefined(text)) {\n                return text;\n            } else {\n                return nic.type;\n            }\n        };\n\n        // Get the text for the link mode of the interface.\n        $scope.getLinkModeText = function(nic) {\n            var text = LINK_MODE_TEXTS[nic.mode];\n            if(angular.isDefined(text)) {\n                return text;\n            } else {\n                return nic.mode;\n            }\n        };\n\n        // Get the text to display in the VLAN dropdown.\n        $scope.getVLANText = function(vlan) {\n            if(!angular.isObject(vlan)) {\n                return \"\";\n            }\n\n            if(vlan.vid === 0) {\n                return \"untagged\";\n            } else if(angular.isString(vlan.name) && vlan.name.length > 0) {\n                return vlan.vid + \" (\" + vlan.name + \")\";\n            } else {\n                return vlan.vid;\n            }\n        };\n\n        // Get the text to display in the subnet dropdown.\n        $scope.getSubnetText = function(subnet) {\n            if(!angular.isObject(subnet)) {\n                return \"Unconfigured\";\n            } else if(angular.isString(subnet.name) &&\n                subnet.name.length > 0 &&\n                subnet.cidr !== subnet.name) {\n                return subnet.cidr + \" (\" + subnet.name + \")\";\n            } else {\n                return subnet.cidr;\n            }\n        };\n\n        // Get the subnet from its ID.\n        $scope.getSubnet = function(subnetId) {\n            return SubnetsManager.getItemFromList(subnetId);\n        };\n\n        // Return True if the interface name that the user typed is invalid.\n        $scope.isInterfaceNameInvalid = function(nic) {\n            if(!angular.isString(nic.name) || nic.name.length === 0) {\n                return true;\n            } else if(angular.isArray($scope.node.interfaces)) {\n                var i;\n                for(i = 0; i < $scope.node.interfaces.length; i++) {\n                    var otherNic = $scope.node.interfaces[i];\n                    if(otherNic.name === nic.name && otherNic.id !== nic.id) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return True if the link mode select should be disabled.\n        $scope.isLinkModeDisabled = function(nic) {\n            // This is only disabled when a subnet has not been selected.\n            if(angular.isFunction(nic.getValue)) {\n                return !angular.isObject(nic.getValue('subnet'));\n            } else {\n                return !angular.isObject(nic.subnet);\n            }\n        };\n\n        // Return the interface errors.\n        $scope.getInterfaceError = function(nic) {\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                return $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            return null;\n        };\n\n        // Return True if the interface IP address that the user typed is\n        // invalid.\n        $scope.isIPAddressInvalid = function(nic) {\n            if(angular.isString(nic.ip_address) && nic.mode === 'static') {\n                return (\n                    !ValidationService.validateIP(nic.ip_address) ||\n                    !ValidationService.validateIPInNetwork(\n                        nic.ip_address, nic.subnet.cidr));\n            } else {\n                return false;\n            }\n        };\n\n        // Return unique key for the interface.\n        $scope.getUniqueKey = function(nic) {\n            return nic.id + \"/\" + nic.link_id;\n        };\n\n        // Toggle selection of the interface.\n        $scope.toggleInterfaceSelect = function(nic) {\n            var key = $scope.getUniqueKey(nic);\n            var idx = $scope.selectedInterfaces.indexOf(key);\n            if(idx > -1) {\n                $scope.selectedInterfaces.splice(idx, 1);\n            } else {\n                $scope.selectedInterfaces.push(key);\n            }\n\n            if($scope.selectedInterfaces.length > 1) {\n                if($scope.selectedMode !== SELECTION_MODE.BOND) {\n                    $scope.selectedMode = SELECTION_MODE.MULTI;\n                }\n            } else if($scope.selectedInterfaces.length === 1) {\n                $scope.selectedMode = SELECTION_MODE.SINGLE;\n            } else {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            }\n        };\n\n        // Return true when the interface is selected.\n        $scope.isInterfaceSelected = function(nic) {\n            return $scope.selectedInterfaces.indexOf(\n                $scope.getUniqueKey(nic)) > -1;\n        };\n\n        // Returns true if the interface is not selected\n        $scope.cannotEditInterface = function(nic) {\n            if ($scope.selectedMode === SELECTION_MODE.NONE) {\n                return false;\n            } else if (\n                  $scope.selectedMode !== SELECTION_MODE.MULTI &&\n                  $scope.isInterfaceSelected(nic)) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return true if in editing mode for the interface.\n        $scope.isEditing = function(nic) {\n            if($scope.selectedMode !== SELECTION_MODE.EDIT) {\n                return false;\n            } else {\n                return $scope.editInterface.id === nic.id;\n            }\n        };\n\n        // Start editing this interface.\n        $scope.edit = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            $scope.selectedMode = SELECTION_MODE.EDIT;\n            if($scope.$parent.isDevice) {\n                $scope.editInterface = {\n                    id: nic.id,\n                    name: nic.name,\n                    mac_address: nic.mac_address,\n                    tags: nic.tags.map(function(tag) { return tag.text; }),\n                    subnet: nic.subnet,\n                    ip_address: nic.ip_address,\n                    ip_assignment: nic.ip_assignment,\n                    link_id: nic.link_id\n                };\n                if(nic.subnet !== undefined && nic.subnet !== null) {\n                    $scope.editInterface.defaultSubnet = nic.subnet;\n                } else {\n                    $scope.editInterface.defaultSubnet = $scope.subnets[0];\n                }\n            } else {\n                $scope.editInterface = {\n                    id: nic.id,\n                    name: nic.name,\n                    mac_address: nic.mac_address,\n                    tags: nic.tags.map(function(tag) { return tag.text; }),\n                    fabric: nic.fabric,\n                    vlan: nic.vlan,\n                    subnet: nic.subnet,\n                    mode: nic.mode,\n                    ip_address: nic.ip_address,\n                    link_id: nic.link_id\n                };\n            }\n        };\n\n        // Called when the fabric is changed.\n        $scope.fabricChanged = function(nic) {\n            // Update the VLAN on the node to be the default VLAN for that\n            // fabric. The first VLAN for the fabric is the default.\n            if(nic.fabric !== null) {\n                nic.vlan = getDefaultVLAN(nic.fabric);\n            } else {\n                nic.vlan = null;\n            }\n            $scope.vlanChanged(nic);\n        };\n\n        // Called when the fabric is changed in a maas-obj-form.\n        $scope.fabricChangedForm = function(key, value, form) {\n            var vlan;\n            if(value !== null) {\n                vlan = getDefaultVLAN(value);\n            } else {\n                vlan = null;\n            }\n            form.updateValue('vlan', vlan);\n            $scope.vlanChangedForm('vlan', vlan, form);\n        };\n\n        // Called when the VLAN is changed.\n        $scope.vlanChanged = function(nic) {\n            nic.subnet = null;\n            $scope.subnetChanged(nic);\n        };\n\n        // Called when the VLAN is changed on a maas-obj-form\n        $scope.vlanChangedForm = function(key, value, form) {\n            form.updateValue('subnet', null);\n            $scope.subnetChangedForm('subnet', null, form);\n        };\n\n        // Called when the subnet is changed.\n        $scope.subnetChanged = function(nic) {\n            if(!angular.isObject(nic.subnet)) {\n                // Set to 'Unconfigured' so the link mode should be set to\n                // 'link_up'.\n                nic.mode = LINK_MODE.LINK_UP;\n            }\n            if ($scope.$parent.isDevice) {\n                nic.ip_address = null;\n            }\n            $scope.modeChanged(nic);\n        };\n\n        // Called when the subnet is changed.\n        $scope.subnetChangedForm = function(key, value, form) {\n            if(!angular.isObject(value)) {\n                // Set to 'Unconfigured' so the link mode should be set to\n                // 'link_up'.\n                form.updateValue('mode', LINK_MODE.LINK_UP);\n            }\n            mode = form.getValue('mode');\n            form.updateValue('ip_address', null);\n            $scope.modeChangedForm('mode', mode, form);\n        };\n\n        // Called when the mode is changed.\n        $scope.modeChanged = function(nic) {\n            // Clear the IP address when the mode is changed.\n            nic.ip_address = \"\";\n            if(nic.mode === 'static') {\n                var originalLink = mapNICToOriginalLink(nic.id, nic.link_id);\n                if(angular.isObject(originalLink) &&\n                    nic.subnet.id === originalLink.subnet_id) {\n                    // Set the original IP address if same subnet.\n                    nic.ip_address = originalLink.ip_address;\n                }\n            }\n        };\n\n        // Called when the mode is changed on a maas-obj-form.\n        $scope.modeChangedForm = function(key, value, form) {\n            // Clear the IP address when the mode is changed.\n            form.updateValue('ip_address', \"\");\n            if(value === 'static') {\n                var originalLink = mapNICToOriginalLink(\n                  form.getValue('id'), form.getValue('link_id'));\n                if(angular.isObject(originalLink) &&\n                    form.getValue('subnet').id === originalLink.subnet_id) {\n                    // Set the original IP address if same subnet.\n                    form.updateValue('ip_address', originalLink.ip_address);\n                }\n            }\n        };\n\n        // Called to cancel edit mode.\n        $scope.editCancel = function(nic) {\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n            $scope.editInterface = null;\n        };\n\n        // Preprocess things for updateInterfaceForm.\n        $scope.preProcessInterface = function(nic) {\n            var params = angular.copy(nic);\n\n            delete params.id;\n            params.system_id = $scope.node.system_id;\n            params.interface_id = nic.id;\n\n            // we need IDs not objects.\n            if(nic.fabric !== undefined && nic.fabric !== null) {\n                params.fabric = nic.fabric.id;\n            } else {\n                params.fabric = null;\n            }\n            if(nic.vlan !== undefined && nic.vlan !== null) {\n                params.vlan = nic.vlan.id;\n            } else {\n                params.vlan = null;\n            }\n            if(nic.subnet !== undefined && nic.subnet !== null) {\n                params.subnet = params.subnet.id;\n            } else {\n                delete params.subnet;\n            }\n\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            } else {\n                delete params.link_id;\n            }\n            if((nic.mode === LINK_MODE.STATIC ||\n                nic.ip_assignment !== IP_ASSIGNMENT.DYNAMIC) &&\n               angular.isString(nic.ip_address) &&\n               nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            } else {\n                delete params.ip_address;\n            }\n            return params;\n        };\n\n        // Save the following interface on the node.\n        $scope.saveInterface = function(nic) {\n            var params;\n            if($scope.$parent.isDevice) {\n                params = {\n                    \"name\": nic.name,\n                    \"mac_address\": nic.mac_address,\n                    \"ip_assignment\": nic.ip_assignment,\n                    \"ip_address\": nic.ip_address\n                };\n            } else {\n                params = {\n                    \"name\": nic.name,\n                    \"mac_address\": nic.mac_address,\n                    \"mode\": nic.mode,\n                    \"tags\": nic.tags.map(\n                        function(tag) { return tag.text; })\n                };\n            }\n            if(nic.fabric !== undefined && nic.fabric !== null) {\n                params.fabric = nic.fabric.id;\n            } else {\n                params.fabric = null;\n            }\n            if(nic.vlan !== undefined && nic.vlan !== null) {\n                params.vlan = nic.vlan.id;\n            } else {\n                params.vlan = null;\n            }\n            if (nic.subnet !== undefined && nic.subnet !== null) {\n                params.subnet = nic.subnet.id;\n            } else {\n                params.subnet = null;\n            }\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            if(angular.isString(nic.ip_address) && nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            }\n            return $scope.$parent.nodesManager.updateInterface(\n                $scope.node, nic.id, params).then(null, function(error) {\n                    // XXX blake_r: Just log the error in the console, but\n                    // we need to expose this as a better message to the\n                    // user.\n                    console.log(error);\n\n                    // Update the interfaces so it is back to the way it\n                    // was before the user changed it.\n                    updateInterfaces();\n                });\n        };\n\n        // Save the following link on the node.\n        $scope.saveInterfaceLink = function(nic) {\n            var params = {\n                \"mode\": nic.mode\n            };\n            if($scope.$parent.isDevice) {\n                params.ip_assignment = nic.ip_assignment;\n            }\n            if(angular.isObject(nic.subnet)) {\n                params.subnet = nic.subnet.id;\n            }\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            if(nic.mode === LINK_MODE.STATIC &&\n                angular.isString(nic.ip_address) &&\n                nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            }\n            return $scope.$parent.nodesManager.linkSubnet(\n                $scope.node, nic.id, params).then(null, function(error) {\n                    console.log(error);\n                    if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                        $scope.interfaceErrorsByLinkId[nic.link_id] = error;\n                    }\n                    // Update the interfaces so it is back to the way it\n                    // was before the user changed it.\n                    updateInterfaces();\n                    throw error;\n                });\n        };\n\n        // Called to save the interface.\n        $scope.editSave = function(editInterface) {\n            $scope.editCancel();\n            return editInterface;\n        };\n\n        // Return true if the interface delete confirm is being shown.\n        $scope.isShowingDeleteConfirm = function() {\n            return $scope.selectedMode === SELECTION_MODE.DELETE;\n        };\n\n        // Return true if the interface add interface is being shown.\n        $scope.isShowingAdd = function() {\n            return $scope.selectedMode === SELECTION_MODE.ADD;\n        };\n\n        // Return true if either an alias or VLAN can be added.\n        $scope.canAddAliasOrVLAN = function(nic) {\n            if($scope.$parent.isController) {\n                return false;\n            } else if ($scope.isAllNetworkingDisabled()) {\n                return false;\n            } else {\n                return $scope.canAddAlias(nic) || $scope.canAddVLAN(nic);\n            }\n        };\n\n        // Return true if the alias can be added to interface.\n        $scope.canAddAlias = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            } else if(nic.type === INTERFACE_TYPE.ALIAS) {\n                return false;\n            } else if(nic.links.length === 0 ||\n                nic.links[0].mode === LINK_MODE.LINK_UP) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return true if the VLAN can be added to interface.\n        $scope.canAddVLAN = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            } else if(nic.type === INTERFACE_TYPE.ALIAS ||\n                nic.type === INTERFACE_TYPE.VLAN) {\n                return false;\n            }\n            var unusedVLANs = getUnusedVLANs(nic);\n            return unusedVLANs.length > 0;\n        };\n\n        // Return true if another VLAN can be added to this already being\n        // added interface.\n        $scope.canAddAnotherVLAN = function(nic) {\n            if(!$scope.canAddVLAN(nic)) {\n                return false;\n            }\n            var unusedVLANs = getUnusedVLANs(nic);\n            return unusedVLANs.length > 1;\n        };\n\n        // Return the text to use for the remove link and message.\n        $scope.getRemoveTypeText = function(nic) {\n            if(nic.type === INTERFACE_TYPE.PHYSICAL) {\n                return \"interface\";\n            } else if(nic.type === INTERFACE_TYPE.VLAN) {\n                return \"VLAN\";\n            } else {\n                return nic.type;\n            }\n        };\n\n        // Return true if the interface can be removed.\n        $scope.canBeRemoved = function() {\n            return (\n                !$scope.$parent.isController &&\n                !$scope.isAllNetworkingDisabled());\n        };\n\n        // Enter remove mode.\n        $scope.remove = function() {\n            $scope.selectedMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter remove by selecting the node first.\n        $scope.quickRemove = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            $scope.remove();\n        };\n\n        // Cancel the current mode go back to sinle selection mode.\n        $scope.cancel = function() {\n            $scope.newInterface = {};\n            $scope.newBondInterface = {};\n            $scope.newBridgeInterface = {};\n            if($scope.selectedMode === SELECTION_MODE.CREATE_BOND) {\n                $scope.selectedMode = SELECTION_MODE.MULTI;\n            } else if($scope.selectedMode === SELECTION_MODE.CREATE_PHYSICAL) {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            } else {\n                $scope.selectedMode = SELECTION_MODE.SINGLE;\n            }\n        };\n\n        // Confirm the removal of interface.\n        $scope.confirmRemove = function(nic) {\n            $scope.selectedMode = SELECTION_MODE.NONE;\n            $scope.selectedInterfaces = [];\n            if(nic.type !== INTERFACE_TYPE.ALIAS) {\n                $scope.$parent.nodesManager.deleteInterface(\n                    $scope.node, nic.id);\n            } else {\n                $scope.$parent.nodesManager.unlinkSubnet(\n                    $scope.node, nic.id, nic.link_id);\n            }\n\n            // Remove the interface from available interfaces\n            var idx = $scope.interfaces.indexOf(nic);\n            if(idx > -1) {\n                $scope.interfaces.splice(idx, 1);\n            }\n        };\n\n        // Enter add mode.\n        $scope.add = function(type, nic) {\n            // When this is called right after another VLAN was just added, we\n            // remove its used VLAN from the available list.\n            var ignoreVLANs = [];\n            if(angular.isObject($scope.newInterface.vlan)) {\n                ignoreVLANs.push($scope.newInterface.vlan);\n            }\n\n            // Get the default VLAN for the new interface.\n            var vlans = getUnusedVLANs(nic, ignoreVLANs);\n            var defaultVLAN = null;\n            if(vlans.length > 0) {\n                defaultVLAN = vlans[0];\n            }\n            var defaultSubnet = null;\n            var defaultMode = LINK_MODE.LINK_UP;\n\n            // Alias used defaults based from its parent.\n            if(type === INTERFACE_TYPE.ALIAS) {\n                defaultVLAN = nic.vlan;\n                defaultSubnet = $filter('filter')(\n                    $scope.subnets, {vlan:defaultVLAN.id}, true)[0];\n                defaultMode = LINK_MODE.AUTO;\n            }\n\n            // Setup the new interface and enter add mode.\n            $scope.newInterface = {\n                type: type,\n                vlan: defaultVLAN,\n                subnet: defaultSubnet,\n                mode: defaultMode,\n                parent: nic,\n                tags: []\n            };\n            $scope.selectedMode = SELECTION_MODE.ADD;\n        };\n\n        // Quickly enter add by selecting the node first.\n        $scope.quickAdd = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            var type = 'alias';\n            if(!$scope.canAddAlias(nic)) {\n                type = 'vlan';\n            }\n            $scope.add(type, nic);\n        };\n\n        // Return the name of the interface being added.\n        $scope.getAddName = function() {\n            if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                var aliasIdx = $scope.newInterface.parent.links.length;\n                return $scope.newInterface.parent.name + \":\" + aliasIdx;\n            } else if ($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                return (\n                    $scope.newInterface.parent.name + \".\" +\n                    $scope.newInterface.vlan.vid);\n            }\n        };\n\n        // Called when the type of interface is changed.\n        $scope.addTypeChanged = function() {\n            if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                $scope.newInterface.vlan = $scope.newInterface.parent.vlan;\n                $scope.newInterface.subnet = $filter('filter')(\n                    $scope.subnets,\n                    {vlan:$scope.newInterface.vlan.id}, true)[0];\n                $scope.newInterface.mode = LINK_MODE.AUTO;\n            } else if($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                var vlans = getUnusedVLANs($scope.newInterface.parent);\n                $scope.newInterface.vlan = null;\n                if(vlans.length > 0) {\n                    $scope.newInterface.vlan = vlans[0];\n                }\n                $scope.newInterface.subnet = null;\n                $scope.newInterface.mode = LINK_MODE.LINK_UP;\n            }\n        };\n\n        // Perform the add action over the websocket.\n        $scope.addInterface = function(type) {\n            var nic;\n            if($scope.$parent.isDevice) {\n                nic = {\n                    id: $scope.newInterface.parent.id,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    ip_assignment: $scope.newInterface.ip_assignment,\n                    subnet: $scope.newInterface.subnet,\n                    ip_address: $scope.newInterface.ip_address\n                };\n                $scope.saveInterfaceLink(nic);\n            } else if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                // Add a link to the current interface.\n                nic = {\n                    id: $scope.newInterface.parent.id,\n                    mode: $scope.newInterface.mode,\n                    subnet: $scope.newInterface.subnet,\n                    ip_address: $scope.newInterface.ip_address\n                };\n                $scope.saveInterfaceLink(nic);\n            } else if($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                var params = {\n                    parent: $scope.newInterface.parent.id,\n                    vlan: $scope.newInterface.vlan.id,\n                    mode: $scope.newInterface.mode,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; })\n                };\n                if(angular.isObject($scope.newInterface.subnet)) {\n                    params.subnet = $scope.newInterface.subnet.id;\n                    params.ip_address = $scope.newInterface.ip_address;\n                }\n                $scope.$parent.nodesManager.createVLANInterface(\n                    $scope.node, params).then(null, function(error) {\n                        // Should do something better but for now just log\n                        // the error.\n                        console.log(error);\n                    });\n            }\n\n            // Add again based on the clicked option.\n            if(angular.isString(type)) {\n                $scope.add(type, $scope.newInterface.parent);\n            } else {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n                $scope.selectedInterfaces = [];\n                $scope.newInterface = {};\n            }\n        };\n\n        // Return true if the networking information cannot be edited\n        // or if this interface should be disabled in the list. Only\n        // returns true when in create bond mode.\n        $scope.isDisabled = function() {\n            if ($scope.isAllNetworkingDisabled()) {\n                return true;\n            } else {\n                return (\n                    $scope.selectedMode !== SELECTION_MODE.NONE &&\n                    $scope.selectedMode !== SELECTION_MODE.SINGLE &&\n                    $scope.selectedMode !== SELECTION_MODE.MULTI);\n            }\n        };\n\n        // Return true when a bond can be created based on the current\n        // selection. Only can be done if no aliases are selected and all\n        // selected interfaces are on the same VLAN.\n        $scope.canCreateBond = function() {\n            if($scope.selectedMode !== SELECTION_MODE.MULTI) {\n                return false;\n            }\n            var interfaces = getSelectedInterfaces();\n            var i, vlan;\n            for(i = 0; i < interfaces.length; i++) {\n                var nic = interfaces[i];\n                if(nic.type === INTERFACE_TYPE.ALIAS ||\n                    nic.type === INTERFACE_TYPE.BOND) {\n                    return false;\n                } else if(!angular.isObject(vlan)) {\n                    vlan = nic.vlan;\n                } else if(vlan !== nic.vlan) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        // Return true when the create bond view is being shown.\n        $scope.isShowingCreateBond = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_BOND;\n        };\n\n        // Show the create bond view.\n        $scope.showCreateBond = function() {\n            if($scope.selectedMode === SELECTION_MODE.MULTI &&\n                $scope.canCreateBond()) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_BOND;\n\n                var parents = getSelectedInterfaces();\n                $scope.newBondInterface = {\n                    name: getNextName(\"bond\"),\n                    tags: [],\n                    parents: parents,\n                    primary: parents[0],\n                    mac_address: \"\",\n                    mode: \"active-backup\",\n                    lacpRate: \"slow\",\n                    xmitHashPolicy: \"layer2\"\n                };\n            }\n        };\n\n        // Return true if the interface has a parent that is a boot interface.\n        $scope.hasBootInterface = function(nic) {\n            if(!angular.isArray(nic.parents)) {\n                return false;\n            }\n            var i;\n            for(i = 0; i < nic.parents.length; i++) {\n                if(nic.parents[i].is_boot) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return the MAC address that should be shown as a placeholder. This\n        // this is the MAC address of the primary interface.\n        $scope.getInterfacePlaceholderMACAddress = function(nic) {\n            if(!angular.isObject(nic.primary)) {\n                return \"\";\n            } else {\n                return nic.primary.mac_address;\n            }\n        };\n\n        // Return true if the user has inputed a value in the MAC address field\n        // but it is invalid.\n        $scope.isMACAddressInvalid = function(mac_address, invalidEmpty) {\n            if(angular.isUndefined(invalidEmpty)) {\n                invalidEmpty = false;\n            }\n            if(!angular.isString(mac_address) || mac_address === \"\") {\n                return invalidEmpty;\n            }\n            return !ValidationService.validateMAC(mac_address);\n        };\n\n        // Return true when the LACR rate selection should be shown.\n        $scope.showLACPRate = function() {\n            return $scope.newBondInterface.mode === \"802.3ad\";\n        };\n\n        // Return true when the XMIT hash policy should be shown.\n        $scope.showXMITHashPolicy = function() {\n            return (\n                $scope.newBondInterface.mode === \"balance-xor\" ||\n                $scope.newBondInterface.mode === \"802.3ad\" ||\n                $scope.newBondInterface.mode === \"balance-tlb\");\n        };\n\n        // Return true if cannot add the bond.\n        $scope.cannotAddBond = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newBondInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newBondInterface.mac_address));\n        };\n\n        // Actually add the bond.\n        $scope.addBond = function() {\n            if($scope.cannotAddBond()) {\n               return;\n            }\n\n            var parents = $scope.newBondInterface.parents.map(\n                function(nic) { return nic.id; });\n            var mac_address = $scope.newBondInterface.mac_address;\n            if(mac_address === \"\") {\n                mac_address = $scope.newBondInterface.primary.mac_address;\n            }\n            var vlan_id, vlan = $scope.newBondInterface.primary.vlan;\n            if(angular.isObject(vlan)) {\n                vlan_id = vlan.id;\n            } else {\n                vlan_id = null;\n            }\n            var params = {\n                name: $scope.newBondInterface.name,\n                mac_address: mac_address,\n                tags: $scope.newBondInterface.tags.map(\n                    function(tag) { return tag.text; }),\n                parents: parents,\n                vlan: vlan_id,\n                bond_mode: $scope.newBondInterface.mode,\n                bond_lacp_rate: $scope.newBondInterface.lacpRate,\n                bond_xmit_hash_policy: $scope.newBondInterface.xmitHashPolicy\n            };\n            $scope.$parent.nodesManager.createBondInterface(\n                $scope.node, params).then(null, function(error) {\n                    // Should do something better but for now just log\n                    // the error.\n                    console.log(error);\n                });\n\n            // Remove the parent interfaces so that they don't show up\n            // in the listing unti the new bond appears.\n            angular.forEach($scope.newBondInterface.parents, function(parent) {\n                var idx = $scope.interfaces.indexOf(parent);\n                if(idx > -1) {\n                    $scope.interfaces.splice(idx, 1);\n                }\n            });\n\n            // Clear the bond interface and reset the mode.\n            $scope.newBondInterface = {};\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n        };\n\n        // Return true when a bridge can be created based on the current\n        // selection. Only can be done if no aliases are selected and only\n        // one interface is selected.\n        $scope.canCreateBridge = function() {\n            if($scope.selectedMode !== SELECTION_MODE.SINGLE) {\n                return false;\n            }\n            var nic = getSelectedInterfaces()[0];\n            if(nic.type === INTERFACE_TYPE.ALIAS ||\n                nic.type === INTERFACE_TYPE.BRIDGE) {\n                return false;\n            }\n            return true;\n        };\n\n        // Return true when the create bridge view is being shown.\n        $scope.isShowingCreateBridge = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_BRIDGE;\n        };\n\n        // Show the create bridge view.\n        $scope.showCreateBridge = function() {\n            if($scope.selectedMode === SELECTION_MODE.SINGLE &&\n                $scope.canCreateBridge()) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_BRIDGE;\n\n                var parents = getSelectedInterfaces();\n                $scope.newBridgeInterface = {\n                    name: getNextName(\"br\"),\n                    tags: [],\n                    parents: parents,\n                    primary: parents[0],\n                    mac_address: \"\",\n                    bridge_stp: false,\n                    bridge_fd: 15\n                };\n            }\n        };\n\n        // Return true if cannot add the bridge.\n        $scope.cannotAddBridge = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newBridgeInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newBridgeInterface.mac_address));\n        };\n\n        // Actually add the bridge.\n        $scope.addBridge = function() {\n            if($scope.cannotAddBridge()) {\n               return;\n            }\n\n            var parents = [$scope.newBridgeInterface.primary.id];\n            var mac_address = $scope.newBridgeInterface.mac_address;\n            if(mac_address === \"\") {\n                mac_address = $scope.newBridgeInterface.primary.mac_address;\n            }\n            var params = {\n                name: $scope.newBridgeInterface.name,\n                mac_address: mac_address,\n                tags: $scope.newBridgeInterface.tags.map(\n                    function(tag) { return tag.text; }),\n                parents: parents,\n                vlan: $scope.newBridgeInterface.primary.vlan.id,\n                bridge_stp: $scope.newBridgeInterface.bridge_stp,\n                bridge_fd: $scope.newBridgeInterface.bridge_fd\n            };\n            $scope.$parent.nodesManager.createBridgeInterface(\n                $scope.node, params).then(null, function(error) {\n                    // Should do something better but for now just log\n                    // the error.\n                    console.log(error);\n                });\n\n            // Remove the parent interface so that they don't show up\n            // in the listing unti the new bond appears.\n            var idx = $scope.interfaces.indexOf(\n                $scope.newBridgeInterface.primary);\n            if(idx > -1) {\n                $scope.interfaces.splice(idx, 1);\n            }\n\n            // Clear the bridge interface and reset the mode.\n            $scope.newBridgeInterface = {};\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n        };\n\n        // Return true when the create physical interface view is being shown.\n        $scope.isShowingCreatePhysical = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_PHYSICAL;\n        };\n\n        // Show the create interface view.\n        $scope.showCreatePhysical = function() {\n            if($scope.selectedMode === SELECTION_MODE.NONE) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_PHYSICAL;\n                if($scope.$parent.isDevice) {\n                    $scope.newInterface = {\n                        name: getNextName(\"eth\"),\n                        mac_address: \"\",\n                        macError: false,\n                        tags: [],\n                        errorMsg: null,\n                        subnet: null,\n                        ip_assignment: IP_ASSIGNMENT.DYNAMIC\n                    };\n                } else {\n                    $scope.newInterface = {\n                        name: getNextName(\"eth\"),\n                        mac_address: \"\",\n                        macError: false,\n                        tags: [],\n                        errorMsg: null,\n                        fabric: $scope.fabrics[0],\n                        vlan: getDefaultVLAN($scope.fabrics[0]),\n                        subnet: null,\n                        mode: LINK_MODE.LINK_UP\n                    };\n                }\n            }\n        };\n\n        // Return true if cannot add the interface.\n        $scope.cannotAddPhysicalInterface = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newInterface.mac_address, true));\n        };\n\n        // Actually add the new physical interface.\n        $scope.addPhysicalInterface = function() {\n            if($scope.cannotAddPhysicalInterface()) {\n               return;\n            }\n\n            var params;\n            if($scope.$parent.isDevice) {\n                params = {\n                    name: $scope.newInterface.name,\n                    mac_address: $scope.newInterface.mac_address,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    ip_assignment: $scope.newInterface.ip_assignment,\n                    ip_address: $scope.newInterface.ip_address\n                };\n            } else {\n                params = {\n                    name: $scope.newInterface.name,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    mac_address: $scope.newInterface.mac_address,\n                    vlan: $scope.newInterface.vlan.id,\n                    mode: $scope.newInterface.mode\n                };\n            }\n            if(angular.isObject($scope.newInterface.subnet)) {\n                params.subnet = $scope.newInterface.subnet.id;\n            }\n            $scope.newInterface.macError = false;\n            $scope.newInterface.errorMsg = null;\n            $scope.$parent.nodesManager.createPhysicalInterface(\n                $scope.node, params).then(function() {\n                    // Clear the interface and reset the mode.\n                    $scope.newInterface = {};\n                    $scope.selectedMode = SELECTION_MODE.NONE;\n                },\n                function(errorStr) {\n                    error = JSONService.tryParse(errorStr);\n                    if(!angular.isObject(error)) {\n                        // Was not a JSON error. This is wrong here as it\n                        // should be, so just log to the console.\n                        console.log(errorStr);\n                    } else {\n                        macError = error.mac_address;\n                        if(angular.isArray(macError)) {\n                            $scope.newInterface.macError = true;\n                            $scope.newInterface.errorMsg = macError[0];\n                        }\n                    }\n                });\n        };\n\n        // Load all the required managers. NodesManager and GeneralManager\n        // are loaded by the parent controller \"NodeDetailsController\".\n        ManagerHelperService.loadManagers($scope, [\n            FabricsManager,\n            VLANsManager,\n            SubnetsManager,\n            UsersManager,\n            ControllersManager\n        ]).then(function() {\n            $scope.managersHaveLoaded = true;\n            updateLoaded();\n        });\n\n        // Tell $parent that the networkingController has been loaded.\n        $scope.$parent.controllerLoaded('networkingController', $scope);\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Storage Controller\n */\n\n\n// Filter that is specific to the NodeStorageController. Remove the available\n// disks from the list if being used in the availableNew.\nangular.module('MAAS').filter('removeAvailableByNew', function() {\n    return function(disks, availableNew) {\n        if(!angular.isObject(availableNew) || (\n            !angular.isObject(availableNew.device) &&\n            !angular.isArray(availableNew.devices))) {\n            return disks;\n        }\n\n        var filtered = [];\n        var single = true;\n        if(angular.isArray(availableNew.devices)) {\n            single = false;\n        }\n        angular.forEach(disks, function(disk) {\n            if(single) {\n                if(disk !== availableNew.device) {\n                    filtered.push(disk);\n                }\n            } else {\n                var i, found = false;\n                for(i = 0; i < availableNew.devices.length; i++) {\n                    if(disk === availableNew.devices[i]) {\n                        found = true;\n                        break;\n                    }\n                }\n                if(!found) {\n                    filtered.push(disk);\n                }\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').controller('NodeStorageController', [\n    '$scope', 'MachinesManager', 'ConverterService', 'UsersManager',\n    function($scope, MachinesManager, ConverterService, UsersManager) {\n\n        // From models/partitiontable.py - must be kept in sync.\n        var INITIAL_PARTITION_OFFSET = 4 * 1024 * 1024;\n        var END_OF_PARTITION_TABLE_SPACE = 1024 * 1024;\n        var PARTITION_TABLE_EXTRA_SPACE = INITIAL_PARTITION_OFFSET +\n            END_OF_PARTITION_TABLE_SPACE;\n        var PREP_PARTITION_SIZE = 8 * 1024 * 1024;\n\n        // From models/partition.py - must be kept in sync.\n        var PARTITION_ALIGNMENT_SIZE = 4 * 1024 * 1024;\n        var MIN_PARTITION_SIZE = PARTITION_ALIGNMENT_SIZE;\n\n        // Different selection modes.\n        var SELECTION_MODE = {\n            NONE: null,\n            SINGLE: \"single\",\n            MUTLI: \"multi\",\n            UNMOUNT: \"unmount\",\n            UNFORMAT: \"unformat\",\n            EDIT: \"edit\",\n            DELETE: \"delete\",\n            FORMAT_AND_MOUNT: \"format-mount\",\n            PARTITION: \"partition\",\n            BCACHE: \"bcache\",\n            RAID: \"raid\",\n            VOLUME_GROUP: \"volume-group\",\n            LOGICAL_VOLUME: \"logical-volume\"\n        };\n\n        // Different available raid modes.\n        var RAID_MODES = [\n            {\n                level: \"raid-0\",\n                title: \"RAID 0\",\n                min_disks: 2,\n                allows_spares: false,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * numDisks;\n                }\n            },\n            {\n                level: \"raid-1\",\n                title: \"RAID 1\",\n                min_disks: 2,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize;\n                }\n            },\n            {\n                level: \"raid-5\",\n                title: \"RAID 5\",\n                min_disks: 3,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * (numDisks - 1);\n                }\n            },\n            {\n                level: \"raid-6\",\n                title: \"RAID 6\",\n                min_disks: 4,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * (numDisks - 2);\n                }\n            },\n            {\n                level: \"raid-10\",\n                title: \"RAID 10\",\n                min_disks: 3,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * numDisks / 2;\n                }\n            }\n        ];\n\n        $scope.tableInfo = {column: 'name'};\n        $scope.has_disks = false;\n        $scope.filesystems = [];\n        $scope.filesystemsMap = {};\n        $scope.filesystemMode = SELECTION_MODE.NONE;\n        $scope.filesystemAllSelected = false;\n        $scope.cachesets = [];\n        $scope.cachesetsMap = {};\n        $scope.cachesetsMode = SELECTION_MODE.NONE;\n        $scope.cachesetsAllSelected = false;\n        $scope.available = [];\n        $scope.availableMap = {};\n        $scope.availableMode = SELECTION_MODE.NONE;\n        $scope.availableAllSelected = false;\n        $scope.availableNew = {};\n        $scope.used = [];\n        $scope.showMembers = [];\n\n        // Return True if the filesystem is mounted.\n        function isMountedFilesystem(filesystem) {\n            return angular.isObject(filesystem) &&\n                angular.isString(filesystem.mount_point) &&\n                filesystem.mount_point !== \"\";\n        }\n\n        // Return True if the item has a filesystem and it's mounted.\n        function hasMountedFilesystem(item) {\n            return angular.isObject(item) &&\n                isMountedFilesystem(item.filesystem);\n        }\n\n        // Returns the fstype if the item has a filesystem and its unmounted.\n        function hasFormattedUnmountedFilesystem(item) {\n            if(angular.isObject(item.filesystem) &&\n                angular.isString(item.filesystem.fstype) &&\n                item.filesystem.fstype !== '' &&\n                (angular.isString(item.filesystem.mount_point) === false ||\n                    item.filesystem.mount_point === '')) {\n                return item.filesystem.fstype;\n            }else{\n                return null;\n            }\n        }\n\n        // Return True if the item is in use.\n        function isInUse(item) {\n            if(item.type === \"cache-set\") {\n                return true;\n            } else if(angular.isObject(item.filesystem)) {\n                if(item.filesystem.is_format_fstype &&\n                    angular.isString(item.filesystem.mount_point) &&\n                    item.filesystem.mount_point !== \"\") {\n                    return true;\n                } else if(!item.filesystem.is_format_fstype) {\n                    return true;\n                }\n                return false;\n            }\n            return item.available_size < MIN_PARTITION_SIZE;\n        }\n\n        // Return the tags formatted for ngTagInput.\n        function getTags(disk) {\n            var tags = [];\n            angular.forEach(disk.tags, function(tag) {\n                tags.push({ text: tag });\n            });\n            return tags;\n        }\n\n        // Return a unique key that will never change.\n        function getUniqueKey(disk) {\n            if(disk.type === \"cache-set\") {\n                return \"cache-set-\" + disk.cache_set_id;\n            } else {\n                var key = disk.type + \"-\" + disk.block_id;\n                if(angular.isNumber(disk.partition_id)) {\n                    key += \"-\" + disk.partition_id;\n                }\n                return key;\n            }\n        }\n\n        // Update the list of filesystems. Only filesystems with a mount point\n        // set go here. If no mount point is set, it goes in available.\n        function updateFilesystems() {\n            // Create the new list of filesystems.\n            var filesystems = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(hasMountedFilesystem(disk)) {\n                    var data = {\n                        \"type\": \"filesystem\",\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"fstype\": disk.filesystem.fstype,\n                        \"mount_point\": disk.filesystem.mount_point,\n                        \"mount_options\": disk.filesystem.mount_options,\n                        \"block_id\": disk.id,\n                        \"partition_id\": null,\n                        \"filesystem_id\": disk.filesystem.id,\n                        \"original_type\": disk.type,\n                        \"original\": disk\n                    };\n                    if(disk.type === \"virtual\") {\n                        disk.parent_type = disk.parent.type;\n                    }\n                    filesystems.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(hasMountedFilesystem(partition)) {\n                        filesystems.push({\n                            \"type\": \"filesystem\",\n                            \"name\": partition.name,\n                            \"size_human\": partition.size_human,\n                            \"fstype\": partition.filesystem.fstype,\n                            \"mount_point\": partition.filesystem.mount_point,\n                            \"mount_options\":\n                                partition.filesystem.mount_options,\n                            \"block_id\": disk.id,\n                            \"partition_id\": partition.id,\n                            \"filesystem_id\": partition.filesystem.id,\n                            \"original_type\": \"partition\",\n                            \"original\": partition\n                        });\n                    }\n                });\n            });\n\n            // Add special filesystems to the filesystem list. A special\n            // filesystem cannot exist unless mounted, so we don't need\n            // to check.\n            angular.forEach(\n                $scope.node.special_filesystems,\n                function(filesystem) {\n                    filesystems.push({\n                        \"type\": \"filesystem\",\n                        \"name\": \"—\",\n                        \"size_human\": \"—\",\n                        \"fstype\": filesystem.fstype,\n                        \"mount_point\": filesystem.mount_point,\n                        \"mount_options\": filesystem.mount_options,\n                        \"block_id\": null,\n                        \"partition_id\": null,\n                        \"original_type\": \"special\"\n                    });\n                });\n\n            // Update the selected filesystems with the currently selected\n            // filesystems.\n            angular.forEach(filesystems, function(filesystem) {\n                var key = getUniqueKey(filesystem);\n                var oldFilesystem = $scope.filesystemsMap[key];\n                if(angular.isObject(oldFilesystem)) {\n                    filesystem.$selected = oldFilesystem.$selected;\n                } else {\n                    filesystem.$selected = false;\n                }\n            });\n\n            // Update the filesystems and filesystemsMap on the scope.\n            $scope.filesystems = filesystems;\n            $scope.filesystemsMap = {};\n            angular.forEach(filesystems, function(filesystem) {\n                $scope.filesystemsMap[getUniqueKey(filesystem)] = filesystem;\n            });\n\n            // Update the selection mode.\n            $scope.updateFilesystemSelection(false);\n        }\n\n        // Update the list of cache sets.\n        function updateCacheSets() {\n            // Create the new list of cache sets.\n            var cachesets = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(disk.type === \"cache-set\") {\n                    cachesets.push({\n                        \"type\": \"cache-set\",\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"cache_set_id\": disk.id,\n                        \"used_by\": disk.used_for\n                    });\n                }\n            });\n\n            // Update the selected cache sets with the currently selected\n            // cache sets.\n            angular.forEach(cachesets, function(cacheset) {\n                var key = getUniqueKey(cacheset);\n                var oldCacheSet = $scope.cachesetsMap[key];\n                if(angular.isObject(oldCacheSet)) {\n                    cacheset.$selected = oldCacheSet.$selected;\n                } else {\n                    cacheset.$selected = false;\n                }\n            });\n\n            // Update the cachesets and cachesetsMap on the scope.\n            $scope.cachesets = cachesets;\n            $scope.cachesetsMap = {};\n            angular.forEach(cachesets, function(cacheset) {\n                $scope.cachesetsMap[getUniqueKey(cacheset)] = cacheset;\n            });\n\n            // Update the selection mode.\n            $scope.updateCacheSetsSelection(false);\n        }\n\n        // Update list of all available disks.\n        function updateAvailable() {\n            var available = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(!isInUse(disk)) {\n                    var has_partitions = false;\n                    if(angular.isArray(disk.partitions) &&\n                        disk.partitions.length > 0) {\n                        has_partitions = true;\n                    }\n                    var data = {\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"available_size_human\": disk.available_size_human,\n                        \"used_size_human\": disk.used_size_human,\n                        \"type\": disk.type,\n                        \"model\": disk.model,\n                        \"serial\": disk.serial,\n                        \"tags\": getTags(disk),\n                        \"fstype\": hasFormattedUnmountedFilesystem(disk),\n                        \"mount_point\": null,\n                        \"mount_options\": null,\n                        \"block_id\": disk.id,\n                        \"partition_id\": null,\n                        \"has_partitions\": has_partitions,\n                        \"is_boot\": disk.is_boot,\n                        \"original\": disk,\n                        \"test_status\": disk.test_status,\n                        \"firmware_version\": disk.firmware_version\n                    };\n                    if(disk.type === \"virtual\") {\n                        data.parent_type = disk.parent.type;\n                    }\n                    available.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(!isInUse(partition)) {\n                        available.push({\n                            \"name\": partition.name,\n                            \"size_human\": partition.size_human,\n                            \"available_size_human\": (\n                                partition.available_size_human),\n                            \"used_size_human\": partition.used_size_human,\n                            \"type\": \"partition\",\n                            \"model\": \"\",\n                            \"serial\": \"\",\n                            \"tags\": [],\n                            \"fstype\":\n                                hasFormattedUnmountedFilesystem(partition),\n                            \"mount_point\": null,\n                            \"mount_options\": null,\n                            \"block_id\": disk.id,\n                            \"partition_id\": partition.id,\n                            \"has_partitions\": false,\n                            \"is_boot\": false,\n                            \"original\": partition\n                        });\n                    }\n                });\n            });\n\n            // Update the selected available disks with the currently selected\n            // available disks. Also copy the $options so they are not lost\n            // for the current action.\n            angular.forEach(available, function(disk) {\n                var key = getUniqueKey(disk);\n                var oldDisk = $scope.availableMap[key];\n                if(angular.isObject(oldDisk)) {\n                    disk.$selected = oldDisk.$selected;\n                    disk.$options = oldDisk.$options;\n                } else {\n                    disk.$selected = false;\n                    disk.$options = {};\n                }\n            });\n\n            // Update available and availableMap on the scope.\n            $scope.available = available;\n            $scope.availableMap = {};\n            angular.forEach(available, function(disk) {\n                $scope.availableMap[getUniqueKey(disk)] = disk;\n            });\n\n            // Update device or devices on the availableNew object to be\n            // there new objects.\n            if(angular.isObject($scope.availableNew)) {\n                // Update device.\n                if(angular.isObject($scope.availableNew.device)) {\n                    var key = getUniqueKey($scope.availableNew.device);\n                    $scope.availableNew.device = $scope.availableMap[key];\n                // Update devices.\n                } else if(angular.isArray($scope.availableNew.devices)) {\n                    var newDevices = [];\n                    angular.forEach(\n                        $scope.availableNew.devices, function(device) {\n                            var key = getUniqueKey(device);\n                            var newDevice = $scope.availableMap[key];\n                            if(angular.isObject(newDevice)) {\n                                newDevices.push(newDevice);\n                            }\n                        });\n                    $scope.availableNew.devices = newDevices;\n                }\n            }\n\n            // Update the selection mode.\n            $scope.updateAvailableSelection(false);\n        }\n\n        // Update list of all used disks.\n        function updateUsed() {\n            var used = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(isInUse(disk) && disk.type !== \"cache-set\") {\n                    var has_partitions = false;\n                    if(angular.isArray(disk.partitions) &&\n                        disk.partitions.length > 0) {\n                        has_partitions = true;\n                    }\n                    var data = {\n                        \"name\": disk.name,\n                        \"type\": disk.type,\n                        \"model\": disk.model,\n                        \"serial\": disk.serial,\n                        \"tags\": getTags(disk),\n                        \"used_for\": disk.used_for,\n                        \"is_boot\": disk.is_boot,\n                        \"has_partitions\": has_partitions,\n                        \"test_status\": disk.test_status,\n                        \"firmware_version\": disk.firmware_version\n                    };\n                    if(disk.type === \"virtual\") {\n                        data.parent_type = disk.parent.type;\n                    }\n                    used.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(isInUse(partition) && partition.type !== \"cache-set\") {\n                        used.push({\n                            \"name\": partition.name,\n                            \"type\": \"partition\",\n                            \"model\": \"\",\n                            \"serial\": \"\",\n                            \"tags\": [],\n                            \"used_for\": partition.used_for,\n                            \"is_boot\": false\n                        });\n                    }\n                });\n            });\n            $scope.used = used;\n        }\n\n        // Updates the filesystem, available, and used list.\n        function updateDisks() {\n            if(angular.isArray($scope.node.disks)) {\n                $scope.has_disks = $scope.node.disks.length > 0;\n                updateFilesystems();\n                updateCacheSets();\n                updateAvailable();\n                updateUsed();\n            } else {\n                $scope.has_disks = false;\n                $scope.filesystems = [];\n                $scope.filesystemsMap = {};\n                $scope.filesystemMode = SELECTION_MODE.NONE;\n                $scope.filesystemAllSelected = false;\n                $scope.cachesets = [];\n                $scope.cachesetsMap = {};\n                $scope.cachesetsMode = SELECTION_MODE.NONE;\n                $scope.cachesetsAllSelected = false;\n                $scope.available = [];\n                $scope.availableMap = {};\n                $scope.availableMode = SELECTION_MODE.NONE;\n                $scope.availableAllSelected = false;\n                $scope.availableNew = {};\n                $scope.used = [];\n            }\n        }\n\n        // Deselect all items in the array.\n        function deselectAll(items) {\n            angular.forEach(items, function(item) {\n                item.$selected = false;\n            });\n        }\n\n        // Capitalize the first letter of the string.\n        function capitalizeFirstLetter(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n\n        // Return true if the string is a number.\n        function isNumber(string) {\n            var pattern = /^-?\\d+\\.?\\d*$/;\n            return pattern.test(string);\n        }\n\n        // Extract the index from the name based on prefix.\n        function getIndexFromName(prefix, name) {\n            var pattern = new RegExp(\"^\" + prefix + \"([0-9]+)$\");\n            var match = pattern.exec(name);\n            if(angular.isArray(match) && match.length === 2) {\n                return parseInt(match[1], 10);\n            }\n        }\n\n        // Get the next device name based on prefix.\n        function getNextName(prefix) {\n            var idx = -1;\n            angular.forEach($scope.node.disks, function(disk) {\n                var dIdx = getIndexFromName(prefix, disk.name);\n                if(angular.isNumber(dIdx)) {\n                    idx = Math.max(idx, dIdx);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    dIdx = getIndexFromName(prefix, partition.name);\n                    if(angular.isNumber(dIdx)) {\n                        idx = Math.max(idx, dIdx);\n                    }\n                });\n            });\n            return prefix + (idx + 1);\n        }\n\n        // Return true if another disk exists with name.\n        function isNameAlreadyInUse(name, exclude_disk) {\n            if(!angular.isArray($scope.node.disks)) {\n                return false;\n            }\n\n            var i, j;\n            for(i = 0; i < $scope.node.disks.length; i++) {\n                var disk = $scope.node.disks[i];\n                if(disk.name === name) {\n                    if(!angular.isObject(exclude_disk) ||\n                        exclude_disk.type === \"partition\" ||\n                        exclude_disk.block_id !== disk.id) {\n                        return true;\n                    }\n                }\n                if(angular.isArray(disk.partitions)) {\n                    for(j = 0; j < disk.partitions.length; j++) {\n                        var partition = disk.partitions[j];\n                        if(partition.name === name) {\n                            if(!angular.isObject(exclude_disk) ||\n                                exclude_disk.type !== \"partition\" ||\n                                exclude_disk.partition_id !== partition.id) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        // Return true if the disk is a logical volume.\n        function isLogicalVolume(disk) {\n            return disk.type === \"virtual\" && disk.parent_type === \"lvm-vg\";\n        }\n\n        // Called by $parent when the node has been loaded.\n        $scope.nodeLoaded = function() {\n            $scope.$watch(\"node.disks\", updateDisks);\n        };\n\n        // Return true if the item can be a boot disk.\n        $scope.isBootDiskDisabled = function(item, section) {\n            // Only superusers can change the boot disk.\n            if(!$scope.isSuperUser()) {\n                return true;\n            }\n\n            // Not ready or allocated so the boot disk cannot be changed.\n            if (angular.isObject($scope.node) &&\n                [\"Ready\", \"Allocated\"].indexOf(\n                    $scope.node.status) === -1) {\n                return true;\n            }\n\n            // Only physical disks can be the boot disk.\n            if(item.type !== \"physical\") {\n                return true;\n            }\n\n            // If the disk is in the used section and does not have any\n            // partitions then it cannot be a boot disk. Boot disk either\n            // require that it be unused or that some partitions exists\n            // on the disk. This is because the boot disk has to have a\n            // partition table header.\n            if(section === \"used\") {\n                return !item.has_partitions;\n            }\n            return false;\n        };\n\n        // Called to change the disk to a boot disk.\n        $scope.setAsBootDisk = function(item) {\n            // Do nothing if already the boot disk.\n            if(item.is_boot) {\n                return;\n            }\n            // Do nothing if disabled.\n            if($scope.isBootDiskDisabled(item)) {\n                return;\n            }\n\n            MachinesManager.setBootDisk($scope.node, item.block_id);\n        };\n\n        // Return array of selected filesystems.\n        $scope.getSelectedFilesystems = function() {\n            var filesystems = [];\n            angular.forEach($scope.filesystems, function(filesystem) {\n                if(filesystem.$selected) {\n                    filesystems.push(filesystem);\n                }\n            });\n            return filesystems;\n        };\n\n        // Update the currect mode for the filesystem section and the all\n        // selected value.\n        $scope.updateFilesystemSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var filesystems = $scope.getSelectedFilesystems();\n            if(filesystems.length === 0) {\n                $scope.filesystemMode = SELECTION_MODE.NONE;\n            } else if(filesystems.length === 1 && force) {\n                $scope.filesystemMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.filesystemMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.filesystems.length === 0) {\n                $scope.filesystemAllSelected = false;\n            } else if(filesystems.length === $scope.filesystems.length) {\n                $scope.filesystemAllSelected = true;\n            } else {\n                $scope.filesystemAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the filesystem.\n        $scope.toggleFilesystemSelect = function(filesystem) {\n            filesystem.$selected = !filesystem.$selected;\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Toggle the selection of all filesystems.\n        $scope.toggleFilesystemAllSelect = function() {\n            angular.forEach($scope.filesystems, function(filesystem) {\n                if($scope.filesystemAllSelected) {\n                    filesystem.$selected = false;\n                } else {\n                    filesystem.$selected = true;\n                }\n            });\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Return true if checkboxes in the filesystem section should be\n        // disabled.\n        $scope.isFilesystemsDisabled = function() {\n            return ((\n                $scope.filesystemMode !== SELECTION_MODE.NONE &&\n                $scope.filesystemMode !== SELECTION_MODE.SINGLE &&\n                $scope.filesystemMode !== SELECTION_MODE.MUTLI) ||\n                $scope.isAllStorageDisabled());\n        };\n\n        // Cancel the current filesystem operation.\n        $scope.filesystemCancel = function() {\n            deselectAll($scope.filesystems);\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Enter unmount mode.\n        $scope.filesystemUnmount = function() {\n            $scope.filesystemMode = SELECTION_MODE.UNMOUNT;\n        };\n\n        // Quickly enter unmount by selecting the filesystem first.\n        $scope.quickFilesystemUnmount = function(filesystem) {\n            deselectAll($scope.filesystems);\n            filesystem.$selected = true;\n            $scope.updateFilesystemSelection(true);\n            $scope.filesystemUnmount();\n        };\n\n        // Confirm the unmount action for filesystem.\n        $scope.filesystemConfirmUnmount = function(filesystem) {\n            MachinesManager.updateFilesystem(\n                $scope.node,\n                filesystem.block_id, filesystem.partition_id,\n                filesystem.fstype, null, null);\n\n            var idx = $scope.filesystems.indexOf(filesystem);\n            $scope.filesystems.splice(idx, 1);\n            $scope.updateFilesystemSelection();\n        };\n\n        // Enter delete mode.\n        $scope.filesystemDelete = function() {\n            $scope.filesystemMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete by selecting the filesystem first.\n        $scope.quickFilesystemDelete = function(filesystem) {\n            deselectAll($scope.filesystems);\n            filesystem.$selected = true;\n            $scope.updateFilesystemSelection(true);\n            $scope.filesystemDelete();\n        };\n\n        // Confirm the delete action for filesystem.\n        $scope.filesystemConfirmDelete = function(filesystem) {\n            if(filesystem.original_type === \"special\") {\n                // Delete the special filesystem.\n                MachinesManager.unmountSpecialFilesystem(\n                    $scope.node, filesystem.mount_point);\n            } else if(filesystem.original_type === \"partition\") {\n                // Delete the partition.\n                MachinesManager.deletePartition(\n                    $scope.node, filesystem.original.id);\n            } else {\n                // Delete the disk.\n                MachinesManager.deleteFilesystem(\n                    $scope.node, filesystem.block_id, filesystem.partition_id,\n                    filesystem.filesystem_id);\n            }\n\n            var idx = $scope.filesystems.indexOf(filesystem);\n            $scope.filesystems.splice(idx, 1);\n            $scope.updateFilesystemSelection();\n        };\n\n        // Return true if the disk has an unmouted filesystem.\n        $scope.hasUnmountedFilesystem = function(disk) {\n            if(angular.isString(disk.fstype) && disk.fstype !== \"\") {\n                if(!angular.isString(disk.mount_point) ||\n                    disk.mount_point === \"\") {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return true if the free space label should be shown.\n        $scope.showFreeSpace = function(disk) {\n            if(disk.type === \"lvm-vg\") {\n                return true;\n            } else if(disk.type === \"physical\" || disk.type === \"virtual\") {\n                return disk.has_partitions;\n            } else {\n                return false;\n            }\n        };\n\n        // Return the device type for the disk.\n        $scope.getDeviceType = function(disk) {\n            if(angular.isUndefined(disk)) {\n                return \"\";\n            }\n\n            if(disk.type === \"virtual\") {\n                if(disk.parent_type === \"lvm-vg\") {\n                    return \"Logical volume\";\n                } else if(disk.parent_type.indexOf(\"raid-\") === 0) {\n                    return \"RAID \" + disk.parent_type.split(\"-\")[1];\n                } else {\n                    return capitalizeFirstLetter(disk.parent_type);\n                }\n            } else if(disk.type === \"lvm-vg\") {\n                return \"Volume group\";\n            } else {\n                return capitalizeFirstLetter(disk.type);\n            }\n        };\n\n        // Return array of selected available disks.\n        $scope.getSelectedAvailable = function() {\n            var available = [];\n            angular.forEach($scope.available, function(disk) {\n                if(disk.$selected) {\n                    available.push(disk);\n                }\n            });\n            return available;\n        };\n\n        // Update the currect mode for the available section and the all\n        // selected value.\n        $scope.updateAvailableSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var available = $scope.getSelectedAvailable();\n            if(available.length === 0) {\n                $scope.availableMode = SELECTION_MODE.NONE;\n            } else if(available.length === 1 && force) {\n                $scope.availableMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.availableMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.available.length === 0) {\n                $scope.availableAllSelected = false;\n            } else if(available.length === $scope.available.length) {\n                $scope.availableAllSelected = true;\n            } else {\n                $scope.availableAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the available disk.\n        $scope.toggleAvailableSelect = function(disk) {\n            disk.$selected = !disk.$selected;\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Toggle the selection of all available disks.\n        $scope.toggleAvailableAllSelect = function() {\n            angular.forEach($scope.available, function(disk) {\n                if(!$scope.availableAllSelected) {\n                    disk.$selected = true;\n                } else {\n                    disk.$selected = false;\n                }\n            });\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if checkboxes in the avaiable section should be\n        // disabled.\n        $scope.isAvailableDisabled = function() {\n            return ((\n                $scope.availableMode !== SELECTION_MODE.NONE &&\n                $scope.availableMode !== SELECTION_MODE.SINGLE &&\n                $scope.availableMode !== SELECTION_MODE.MUTLI) ||\n                $scope.isAllStorageDisabled());\n        };\n\n        // Return true if the disk can be formatted and mounted.\n        $scope.canFormatAndMount = function(disk) {\n            if($scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"lvm-vg\" || disk.has_partitions) {\n                return false;\n            } else if(disk.type === \"physical\" && disk.original.is_boot) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return the text for the partition button.\n        $scope.getPartitionButtonText = function(disk) {\n            if(disk.has_partitions) {\n                return \"Add partition\";\n            } else {\n                return \"Partition\";\n            }\n        };\n\n        $scope.availablePartitionSpace = function(disk) {\n            var space_to_reserve = 0;\n            if(!angular.isString(disk.original.partition_table_type)\n                || disk.original.partition_table_type === \"\") {\n                // Disk has no partition table, so reserve space for it.\n                space_to_reserve = PARTITION_TABLE_EXTRA_SPACE;\n                // ppc64el node requires that space be saved for the prep\n                // partition.\n                if($scope.node.architecture.indexOf(\"ppc64el\") === 0) {\n                    space_to_reserve += PREP_PARTITION_SIZE;\n                }\n            }\n            return ConverterService.roundByBlockSize(\n                disk.original.available_size - space_to_reserve,\n                PARTITION_ALIGNMENT_SIZE);\n        };\n\n        // Return true if a partition can be added to disk.\n        $scope.canAddPartition = function(disk) {\n            if(!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"partition\" || disk.type === \"lvm-vg\") {\n                return false;\n            } else if(disk.type === \"virtual\" &&\n                (disk.parent_type === \"lvm-vg\" ||\n                    disk.parent_type === \"bcache\")) {\n                return false;\n            } else if(angular.isString(disk.fstype) && disk.fstype !== \"\") {\n                return false;\n            }\n            // If we can fit a minimum partition, we're golden.\n            return ($scope.availablePartitionSpace(disk) -\n                MIN_PARTITION_SIZE) >= 0;\n        };\n\n        // Return true if the name is invalid.\n        $scope.isNameInvalid = function(disk) {\n            if(disk.name === \"\") {\n                return false;\n            } else if(isNameAlreadyInUse(disk.name, disk)) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Prevent logical volumes from changing the volume group prefix.\n        $scope.nameHasChanged = function(disk) {\n            if(isLogicalVolume(disk)) {\n                var parentName = disk.original.name.split(\"-\")[0] + \"-\";\n                var startsWith = disk.name.indexOf(parentName);\n                if(startsWith !== 0) {\n                    disk.name = parentName;\n                }\n            }\n        };\n\n        // Cancel the current available operation.\n        $scope.availableCancel = function(disk) {\n            $scope.updateAvailableSelection(true);\n            $scope.availableNew = {};\n        };\n\n        // Return true if the filesystem can be mounted at a directory.\n        $scope.usesMountPoint = function(fstype) {\n            return angular.isString(fstype) && fstype !== \"swap\";\n        };\n\n        // Return true if the filesystem uses storage (partition or\n        // block device).\n        $scope.usesStorage = function(fstype) {\n            return angular.isString(fstype) &&\n                fstype !== \"tmpfs\" && fstype !== \"ramfs\";\n        };\n\n        // Return true if the mount point is invalid.\n        $scope.isMountPointInvalid = function(mountPoint) {\n            if(angular.isUndefined(mountPoint) || mountPoint === \"\") {\n                return false;\n            } else if (mountPoint === \"none\") {\n                // XXX: Hack to allow \"swap\" filesystems to be mounted.\n                // This should be allowed only when fstype is 'swap' but\n                // doing that would require more refactoring (or more\n                // hacks) that I have time for right now.\n                return false;\n            } else if(mountPoint[0] !== \"/\") {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Return true if the disk can be deleted.\n        $scope.canDelete = function(disk) {\n            if (!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"lvm-vg\") {\n                return disk.original.used_size === 0;\n            } else {\n                return !disk.has_partitions;\n            }\n        };\n\n        // Enter delete mode.\n        $scope.availableDelete = function() {\n            $scope.availableMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete mode.\n        $scope.availableQuickDelete = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availableDelete();\n        };\n\n        // Return true if it can be edited.\n        $scope.canEdit = function(disk) {\n          if (!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n              return false;\n          } else {\n              return true;\n          }\n        };\n\n        // Enter Edit mode, disable certain fields based on disk type\n        $scope.availableEdit = function(disk) {\n            $scope.availableMode = SELECTION_MODE.EDIT;\n\n            if (disk.type === \"lvm-vg\") {\n                disk.$options = {\n                    editingTags: false,\n                    editingFilesystem: false\n                };\n            } else if (disk.type === \"partition\") {\n                disk.$options = {\n                    editingTags: false,\n                    editingFilesystem: true,\n                    fstype: disk.fstype\n                };\n            } else {\n                disk.$options = {\n                    editingFilesystem: true,\n                    editingTags: true,\n                    tags: angular.copy(disk.tags),\n                    fstype: disk.fstype\n                };\n                if (!$scope.canFormatAndMount(disk)) {\n                    disk.$options.editingFilesystem = false;\n                }\n            }\n        };\n\n        // Quickly enter Edit mode\n        $scope.availableQuickEdit = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availableEdit(disk);\n        };\n\n        // Save the disk which is in Edit mode\n        $scope.availableConfirmEdit = function(disk) {\n            var params = {\n                name: disk.name\n            };\n\n            // Do nothing if not valid.\n            if($scope.isNameInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Reset the name if its blank.\n            if(disk.name === \"\") {\n                disk.name = disk.original.name;\n            }\n\n            // Ensure logical volume has parent prefix in its name.\n            if(isLogicalVolume(disk)){\n                var parentName = disk.original.name.split(\"-\")[0] + \"-\";\n                params.name = disk.name.slice(parentName.length);\n            }\n\n            // Set filesystem options so formatting and mounting is performed.\n            if(angular.isDefined(disk.$options.fstype)) {\n                params.fstype = disk.$options.fstype;\n                params.mount_point = disk.$options.mountPoint || '';\n                params.mount_options = disk.$options.mountOptions || '';\n            }\n\n            // Update the tags for the disk.\n            if(angular.isArray(disk.$options.tags)) {\n                params.tags = disk.$options.tags.map(\n                    function(tag) { return tag.text; });\n            }\n\n            // Save the options.\n            MachinesManager.updateDisk(\n                $scope.node, disk.block_id, params);\n\n            // Set the options on the object so no flicker occurs while waiting\n            // for the new object to be received.\n            disk.fstype = disk.$options.fstype;\n            disk.mount_point = disk.$options.mountPoint;\n            disk.mount_options = disk.$options.mountOptions;\n            disk.tags = disk.$options.tags;\n            disk.$options = {};\n\n            // If the mount_point is set the we need to transition this to\n            // the filesystem section.\n            if(angular.isString(disk.mount_point) && disk.mount_point !== \"\") {\n                $scope.filesystems.push({\n                    \"name\": disk.name,\n                    \"size_human\": disk.size_human,\n                    \"fstype\": disk.fstype,\n                    \"mount_point\": disk.mount_point,\n                    \"mount_options\": disk.mount_options,\n                    \"block_id\": disk.block_id,\n                    \"partition_id\": disk.partition_id\n                });\n\n                // Remove the selected disk from available.\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n\n            // Deselect the disk after saving\n            disk.$selected = false;\n\n            // Update the current selections.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return the text for remove confirmation message.\n        $scope.getRemoveTypeText = function(disk) {\n            if(disk.type === \"filesystem\") {\n                if (angular.isObject(disk.original)) {\n                    disk = disk.original;\n                } else {\n                    return \"special filesystem\";\n                }\n            }\n\n            if(disk.type === \"physical\") {\n                return \"physical disk\";\n            } else if(disk.type === \"partition\") {\n                return \"partition\";\n            } else if(disk.type === \"lvm-vg\") {\n                return \"volume group\";\n            } else if(disk.type === \"virtual\") {\n                if(disk.parent_type === \"lvm-vg\") {\n                    return \"logical volume\";\n                } else if(disk.parent_type.indexOf(\"raid-\") === 0) {\n                    return \"RAID \" + disk.parent_type.split(\"-\")[1] + \" disk\";\n                } else {\n                    return disk.parent_type + \" disk\";\n                }\n            }\n        };\n\n        // Delete the disk, partition, or volume group.\n        $scope.availableConfirmDelete = function(disk) {\n            if(disk.type === \"lvm-vg\") {\n                // Delete the volume group.\n                MachinesManager.deleteVolumeGroup(\n                    $scope.node, disk.block_id);\n            } else if(disk.type === \"partition\") {\n                // Delete the partition.\n                MachinesManager.deletePartition(\n                    $scope.node, disk.partition_id);\n            } else {\n                // Delete the disk.\n                MachinesManager.deleteDisk(\n                    $scope.node, disk.block_id);\n            }\n\n            // Remove the selected disk from available.\n            var idx = $scope.available.indexOf(disk);\n            $scope.available.splice(idx, 1);\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Enter partition mode.\n        $scope.availablePartition = function(disk) {\n            $scope.availableMode = SELECTION_MODE.PARTITION;\n            // Set starting size to the maximum available space.\n            var size_and_units = disk.available_size_human.split(\" \");\n            disk.$options = {\n                size: size_and_units[0],\n                sizeUnits: size_and_units[1],\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\"\n            };\n        };\n\n        // Quickly enter partition mode.\n        $scope.availableQuickPartition = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availablePartition(disk);\n        };\n\n        // Get the new name of the partition.\n        $scope.getAddPartitionName = function(disk) {\n            var length, partitions = disk.original.partitions;\n            if(angular.isArray(partitions)) {\n                length = partitions.length;\n            } else {\n                length = 0;\n            }\n            if(disk.original.partition_table_type === \"mbr\" &&\n                length > 2) {\n                return disk.name + \"-part\" + (length + 2);\n            } else if($scope.node.architecture.indexOf(\"ppc64el\") === 0 &&\n                disk.original.is_boot) {\n                // Boot disk on ppc64el machines skip the first partition as\n                // its reserved for the prep partition.\n                return disk.name + \"-part\" + (length + 2);\n            } else {\n                return disk.name + \"-part\" + (length + 1);\n            }\n        };\n\n        // Return true if the size is invalid.\n        $scope.isAddPartitionSizeInvalid = function(disk) {\n            if(disk.$options.size === \"\" || !isNumber(disk.$options.size)) {\n                return true;\n            } else {\n                var bytes = ConverterService.unitsToBytes(\n                    disk.$options.size, disk.$options.sizeUnits);\n                if(bytes < MIN_PARTITION_SIZE) {\n                    return true;\n                } else if(bytes > disk.original.available_size) {\n                    // Round the size down to the lowest tolerance for that\n                    // to see if it now fits.\n                    var rounded = ConverterService.roundUnits(\n                        disk.$options.size, disk.$options.sizeUnits);\n                    if(rounded > disk.original.available_size) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        };\n\n        // Confirm the partition creation.\n        $scope.availableConfirmPartition = function(disk) {\n            // Do nothing if not valid.\n            if($scope.isAddPartitionSizeInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Get the bytes to create the partition.\n            var bytes = ConverterService.unitsToBytes(\n                disk.$options.size, disk.$options.sizeUnits);\n\n            // Accepting prefilled defaults means use whole disk (lp:1509535).\n            var size_and_units = disk.original.available_size_human.split(\" \");\n            if(disk.$options.size === size_and_units[0] &&\n               disk.$options.sizeUnits === size_and_units[1]) {\n                bytes = disk.original.available_size;\n            }\n\n            var removeDisk = false;\n            var available_space = $scope.availablePartitionSpace(disk);\n            if(bytes >= available_space) {\n                // Clamp to available space.\n                bytes = available_space;\n                // Remove the disk if partition uses all the remaining space.\n                removeDisk = true;\n            }\n\n            // Create the partition.\n            var params = {};\n            if(angular.isString(disk.$options.fstype) &&\n                disk.$options.fstype !== \"\") {\n                params.fstype = disk.$options.fstype;\n                if(disk.$options.mountPoint !== \"\") {\n                    params.mount_point = disk.$options.mountPoint;\n                    params.mount_options = disk.$options.mountOptions;\n                }\n            }\n            MachinesManager.createPartition(\n                $scope.node, disk.block_id, bytes, params);\n\n            // Remove the disk if needed.\n            if(removeDisk) {\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return array of selected cache sets.\n        $scope.getSelectedCacheSets = function() {\n            var cachesets = [];\n            angular.forEach($scope.cachesets, function(cacheset) {\n                if(cacheset.$selected) {\n                    cachesets.push(cacheset);\n                }\n            });\n            return cachesets;\n        };\n\n        // Update the currect mode for the cache sets section and the all\n        // selected value.\n        $scope.updateCacheSetsSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var cachesets = $scope.getSelectedCacheSets();\n            if(cachesets.length === 0) {\n                $scope.cachesetsMode = SELECTION_MODE.NONE;\n            } else if(cachesets.length === 1 && force) {\n                $scope.cachesetsMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.cachesetsMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.cachesets.length === 0) {\n                $scope.cachesetsAllSelected = false;\n            } else if(cachesets.length === $scope.cachesets.length) {\n                $scope.cachesetsAllSelected = true;\n            } else {\n                $scope.cachesetsAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the filesystem.\n        $scope.toggleCacheSetSelect = function(cacheset) {\n            cacheset.$selected = !cacheset.$selected;\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Toggle the selection of all filesystems.\n        $scope.toggleCacheSetAllSelect = function() {\n            angular.forEach($scope.cachesets, function(cacheset) {\n                if($scope.cachesetsAllSelected) {\n                    cacheset.$selected = false;\n                } else {\n                    cacheset.$selected = true;\n                }\n            });\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Return true if checkboxes in the cache sets section should be\n        // disabled.\n        $scope.isCacheSetsDisabled = function() {\n            return ((\n                $scope.isAllStorageDisabled() &&\n                !$scope.isSuperUser()) || (\n                $scope.cachesetsMode !== SELECTION_MODE.NONE &&\n                $scope.cachesetsMode !== SELECTION_MODE.SINGLE &&\n                $scope.cachesetsMode !== SELECTION_MODE.MUTLI));\n        };\n\n        // Cancel the current cache set operation.\n        $scope.cacheSetCancel = function() {\n            deselectAll($scope.cachesets);\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Can delete the cache set.\n        $scope.canDeleteCacheSet = function(cacheset) {\n            return (cacheset.used_by === \"\" &&\n                    !$scope.isAllStorageDisabled() &&\n                    $scope.isSuperUser());\n        };\n\n        // Enter delete mode.\n        $scope.cacheSetDelete = function() {\n            $scope.cachesetsMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete by selecting the cache set first.\n        $scope.quickCacheSetDelete = function(cacheset) {\n            deselectAll($scope.cachesets);\n            cacheset.$selected = true;\n            $scope.updateCacheSetsSelection(true);\n            $scope.cacheSetDelete();\n        };\n\n        // Confirm the delete action for cache set.\n        $scope.cacheSetConfirmDelete = function(cacheset) {\n            MachinesManager.deleteCacheSet(\n                $scope.node, cacheset.cache_set_id);\n\n            var idx = $scope.cachesets.indexOf(cacheset);\n            $scope.cachesets.splice(idx, 1);\n            $scope.updateCacheSetsSelection();\n        };\n\n        // Return true if a cache set can be created.\n        $scope.canCreateCacheSet = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length === 1) {\n                return (\n                    !selected[0].has_partitions &&\n                    !$scope.hasUnmountedFilesystem(selected[0]) &&\n                    selected[0].type !== \"lvm-vg\");\n            }\n            return false;\n        };\n\n        // Called to create a cache set.\n        $scope.createCacheSet = function() {\n            if(!$scope.canCreateCacheSet()) {\n                return;\n            }\n\n            // Create cache set.\n            var disk = $scope.getSelectedAvailable()[0];\n            MachinesManager.createCacheSet(\n                $scope.node, disk.block_id, disk.partition_id);\n\n            // Remove from available.\n            var idx = $scope.available.indexOf(disk);\n            $scope.available.splice(idx, 1);\n        };\n\n        // Return the reason a bcache device cannot be created.\n        $scope.getCannotCreateBcacheMsg = function() {\n            if($scope.cachesets.length === 0) {\n                return \"Create at least one cache set to create bcache\";\n            } else {\n                var selected = $scope.getSelectedAvailable();\n                if(selected.length === 1) {\n                    if($scope.hasUnmountedFilesystem(selected[0])) {\n                        return (\n                            \"Device is formatted; unformat the \" +\n                            \"device to create bcache\");\n                    } else if(selected[0].type === \"lvm-vg\") {\n                        return (\n                            \"Cannot use a logical volume as a backing \" +\n                            \"device for bcache.\");\n                    } else if(selected[0].has_partitions) {\n                        return (\n                            \"Device has already been partitioned; create a \" +\n                            \"new partition to use as the bcache backing \" +\n                            \"device\");\n                    } else {\n                        return null;\n                    }\n                } else {\n                    return \"Select only one available device to create bcache\";\n                }\n            }\n        };\n\n        // Return true if a bcache can be created.\n        $scope.canCreateBcache = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var msg = $scope.getCannotCreateBcacheMsg();\n            if(msg === null) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Enter bcache mode.\n        $scope.createBcache = function() {\n            if(!$scope.canCreateBcache()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.BCACHE;\n            $scope.availableNew = {\n                name: getNextName(\"bcache\"),\n                device: $scope.getSelectedAvailable()[0],\n                cacheset: $scope.cachesets[0],\n                cacheMode: \"writeback\",\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\",\n                tags: []\n            };\n        };\n\n        // Clear mount point when the fstype is changed.\n        $scope.fstypeChanged = function(options) {\n            if(options.fstype === null) {\n                options.mountPoint = \"\";\n                options.mountOptions = \"\";\n            }\n            else {\n                // Update the mount point to \"none\" if \"swap\" is\n                // selected, and vice-versa.\n                if ($scope.usesMountPoint(options.fstype)) {\n                    if (options.mountPoint === \"none\") {\n                        options.mountPoint = \"\";\n                    }\n                }\n                else {\n                    options.mountPoint = \"none\";\n                }\n            }\n        };\n\n        // Return true when the name of the new disk is invalid.\n        $scope.isNewDiskNameInvalid = function() {\n            if(!angular.isObject($scope.node) ||\n                !angular.isArray($scope.node.disks)) {\n                return true;\n            }\n\n            if($scope.availableNew.name === \"\") {\n                return true;\n            } else {\n                var i, j;\n                for(i = 0; i < $scope.node.disks.length; i++) {\n                    var disk = $scope.node.disks[i];\n                    if($scope.availableNew.name === disk.name) {\n                        return true;\n                    }\n                    if(angular.isArray(disk.partitions)) {\n                        for(j = 0; j < disk.partitions.length; j++) {\n                            var partition = disk.partitions[j];\n                            if($scope.availableNew.name === partition.name) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return true if bcache can be saved.\n        $scope.createBcacheCanSave = function() {\n            return (\n                !$scope.isNewDiskNameInvalid() &&\n                !$scope.isMountPointInvalid($scope.availableNew.mountPoint));\n        };\n\n        // Confirm and create the bcache device.\n        $scope.availableConfirmCreateBcache = function() {\n            if(!$scope.createBcacheCanSave()) {\n                return;\n            }\n\n            // Create the bcache.\n            var params = {\n                name: $scope.availableNew.name,\n                cache_set: $scope.availableNew.cacheset.cache_set_id,\n                cache_mode: $scope.availableNew.cacheMode\n            };\n            if($scope.availableNew.device.type === \"partition\") {\n                params.partition_id = $scope.availableNew.device.partition_id;\n            } else {\n                params.block_id = $scope.availableNew.device.block_id;\n            }\n            if(angular.isString($scope.availableNew.fstype) &&\n                $scope.availableNew.fstype !== \"\") {\n                params.fstype = $scope.availableNew.fstype;\n                // XXX: Inconsistent tests of mountPoint/mount_point; in\n                // places it's compared to \"\" (like here), in others\n                // it's tested with angular.isDefined(), others with\n                // angular.isString(), others angular.isString() ===\n                // false. This is *begging* for bugs.\n                if($scope.availableNew.mountPoint !== \"\") {\n                    params.mount_point = $scope.availableNew.mountPoint;\n                    params.mount_options = $scope.availableNew.mountOptions;\n                }\n            }\n            if(angular.isArray($scope.availableNew.tags)\n                && $scope.availableNew.tags.length > 0) {\n                params.tags = $scope.availableNew.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createBcache($scope.node, params);\n\n            // Remove device from available.\n            var idx = $scope.available.indexOf($scope.availableNew.device);\n            $scope.available.splice(idx, 1);\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a RAID can be created.\n        $scope.canCreateRAID = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length > 1) {\n                var i;\n                for(i = 0; i < selected.length; i++) {\n                    if($scope.hasUnmountedFilesystem(selected[i])) {\n                        return false;\n                    } else if(selected[i].type === \"lvm-vg\") {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n\n        // Called to create a RAID.\n        $scope.createRAID = function() {\n            if(!$scope.canCreateRAID()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.RAID;\n            $scope.availableNew = {\n                name: getNextName(\"md\"),\n                devices: $scope.getSelectedAvailable(),\n                mode: null,\n                spares: [],\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\",\n                tags: []\n            };\n            $scope.availableNew.mode = $scope.getAvailableRAIDModes()[0];\n        };\n\n        // Get the available RAID modes.\n        $scope.getAvailableRAIDModes = function() {\n            if(!angular.isObject($scope.availableNew) ||\n                !angular.isArray($scope.availableNew.devices)) {\n                return [];\n            }\n\n            var modes = [];\n            angular.forEach(RAID_MODES, function(mode) {\n                if($scope.availableNew.devices.length >= mode.min_disks) {\n                    modes.push(mode);\n                }\n            });\n            return modes;\n        };\n\n        // Return the total number of available spares for the current mode.\n        $scope.getTotalNumberOfAvailableSpares = function() {\n            var mode = $scope.availableNew.mode;\n            if(angular.isUndefined(mode) || !mode.allows_spares) {\n                return 0;\n            } else {\n                var diff = $scope.availableNew.devices.length - mode.min_disks;\n                if(diff < 0) {\n                    diff = 0;\n                }\n                return diff;\n            }\n        };\n\n        // Return the number of remaining spares that can be selected.\n        $scope.getNumberOfRemainingSpares = function() {\n            var allowed = $scope.getTotalNumberOfAvailableSpares();\n            if(allowed <= 0) {\n                return 0;\n            } else {\n                return allowed - $scope.availableNew.spares.length;\n            }\n        };\n\n        // Return true if the spares column should be shown.\n        $scope.showSparesColumn = function() {\n            return $scope.getTotalNumberOfAvailableSpares() > 0;\n        };\n\n        // Called when the RAID mode is changed to reset the selected spares.\n        $scope.RAIDModeChanged = function() {\n            $scope.availableNew.spares = [];\n        };\n\n        // Return true if the disk is an active RAID member.\n        $scope.isActiveRAIDMember = function(disk) {\n            if(!angular.isArray($scope.availableNew.spares)) {\n                return true;\n            } else {\n                var idx = $scope.availableNew.spares.indexOf(\n                    getUniqueKey(disk));\n                return idx === -1;\n            }\n        };\n\n        // Return true if the disk is a spare RAID member.\n        $scope.isSpareRAIDMember = function(disk) {\n            return !$scope.isActiveRAIDMember(disk);\n        };\n\n        // Set the disk as an active RAID member.\n        $scope.setAsActiveRAIDMember = function(disk) {\n            var idx = $scope.availableNew.spares.indexOf(getUniqueKey(disk));\n            if(idx > -1) {\n                $scope.availableNew.spares.splice(idx, 1);\n            }\n        };\n\n        // Set the disk as a spare RAID member.\n        $scope.setAsSpareRAIDMember = function(disk) {\n            var key = getUniqueKey(disk);\n            var idx = $scope.availableNew.spares.indexOf(key);\n            if(idx === -1) {\n                $scope.availableNew.spares.push(key);\n            }\n        };\n\n        // Return the size of the new RAID device.\n        $scope.getNewRAIDSize = function() {\n            if(angular.isUndefined($scope.availableNew.mode)) {\n                return \"\";\n            }\n            var calculateSize = $scope.availableNew.mode.calculateSize;\n            if(!angular.isFunction(calculateSize)) {\n                return \"\";\n            }\n\n            // Get the number of disks and the minimum disk size in the RAID.\n            var numDisks = (\n                $scope.availableNew.devices.length -\n                $scope.availableNew.spares.length);\n            var minSize = Number.MAX_VALUE;\n            angular.forEach($scope.availableNew.devices, function(device) {\n                // Get the size of the device. For a block device it will be\n                // at available_size and for a partition it will be at size.\n                var deviceSize = (\n                    device.original.available_size || device.original.size);\n                minSize = Math.min(minSize, deviceSize);\n            });\n\n            // Calculate the new size.\n            var size = calculateSize(minSize, numDisks);\n            return ConverterService.bytesToUnits(size).string;\n        };\n\n        // Return true if RAID can be saved.\n        $scope.createRAIDCanSave = function() {\n            return (\n                !$scope.isNewDiskNameInvalid() &&\n                !$scope.isMountPointInvalid($scope.availableNew.mountPoint));\n        };\n\n        // Confirm and create the RAID device.\n        $scope.availableConfirmCreateRAID = function() {\n            if(!$scope.createRAIDCanSave()) {\n                return;\n            }\n\n            // Create the RAID.\n            var params = {\n                name: $scope.availableNew.name,\n                level: $scope.availableNew.mode.level,\n                block_devices: [],\n                partitions: [],\n                spare_devices: [],\n                spare_partitions: []\n            };\n            angular.forEach($scope.availableNew.devices, function(device) {\n                if($scope.isActiveRAIDMember(device)) {\n                    if(device.type === \"partition\") {\n                        params.partitions.push(device.partition_id);\n                    } else {\n                        params.block_devices.push(device.block_id);\n                    }\n                } else {\n                    if(device.type === \"partition\") {\n                        params.spare_partitions.push(device.partition_id);\n                    } else {\n                        params.spare_devices.push(device.block_id);\n                    }\n                }\n            });\n            if(angular.isString($scope.availableNew.fstype) &&\n                $scope.availableNew.fstype !== \"\") {\n                params.fstype = $scope.availableNew.fstype;\n                if($scope.availableNew.mountPoint !== \"\") {\n                    params.mount_point = $scope.availableNew.mountPoint;\n                    params.mount_options = $scope.availableNew.mountOptions;\n                }\n            }\n            if(angular.isArray($scope.availableNew.tags)\n                && $scope.availableNew.tags.length > 0) {\n                params.tags = $scope.availableNew.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createRAID($scope.node, params);\n\n            // Remove devices from available.\n            angular.forEach($scope.availableNew.devices, function(device) {\n                var idx = $scope.available.indexOf($scope.availableNew.device);\n                $scope.available.splice(idx, 1);\n            });\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a volume group can be created.\n        $scope.canCreateVolumeGroup = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length > 0) {\n                var i;\n                for(i = 0; i < selected.length; i++) {\n                    if(selected[i].has_partitions) {\n                        return false;\n                    } else if($scope.hasUnmountedFilesystem(selected[i])) {\n                        return false;\n                    } else if(selected[i].type === \"lvm-vg\") {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n\n        // Called to create a volume group.\n        $scope.createVolumeGroup = function() {\n            if(!$scope.canCreateVolumeGroup()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.VOLUME_GROUP;\n            $scope.availableNew = {\n                name: getNextName(\"vg\"),\n                devices: $scope.getSelectedAvailable()\n            };\n        };\n\n        // Return the size of the new volume group.\n        $scope.getNewVolumeGroupSize = function() {\n            var total = 0;\n            angular.forEach($scope.availableNew.devices, function(device) {\n                // Add available_size or size if available_size is not set.\n                total += (\n                    device.original.available_size || device.original.size);\n            });\n            return ConverterService.bytesToUnits(total).string;\n        };\n\n        // Return true if volume group can be saved.\n        $scope.createVolumeGroupCanSave = function() {\n            return !$scope.isNewDiskNameInvalid();\n        };\n\n        // Confirm and create the volume group device.\n        $scope.availableConfirmCreateVolumeGroup = function() {\n            if(!$scope.createVolumeGroupCanSave()) {\n                return;\n            }\n\n            // Create the RAID.\n            var params = {\n                name: $scope.availableNew.name,\n                block_devices: [],\n                partitions: []\n            };\n            angular.forEach($scope.availableNew.devices, function(device) {\n                if(device.type === \"partition\") {\n                    params.partitions.push(device.partition_id);\n                } else {\n                    params.block_devices.push(device.block_id);\n                }\n            });\n            MachinesManager.createVolumeGroup($scope.node, params);\n\n            // Remove devices from available.\n            angular.forEach($scope.availableNew.devices, function(device) {\n                var idx = $scope.available.indexOf($scope.availableNew.device);\n                $scope.available.splice(idx, 1);\n            });\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a logical volume can be added to disk.\n        $scope.canAddLogicalVolume = function(disk) {\n            if(disk.type !== \"lvm-vg\") {\n                return false;\n            } else if(disk.original.available_size < MIN_PARTITION_SIZE) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Enter logical volume mode.\n        $scope.availableLogicalVolume = function(disk) {\n            $scope.availableMode = SELECTION_MODE.LOGICAL_VOLUME;\n            disk.$selected = true;\n            // Set starting size to the maximum available space.\n            var size_and_units = disk.available_size_human.split(\" \");\n            var namePrefix = disk.name + \"-lv\";\n            disk.$options = {\n                name: getNextName(namePrefix),\n                size: size_and_units[0],\n                sizeUnits: size_and_units[1],\n                fstype: null,\n                tags: []\n            };\n        };\n\n        // Return true if the name of the logical volume is invalid.\n        $scope.isLogicalVolumeNameInvalid = function(disk) {\n            if(!angular.isString(disk.$options.name)) {\n                return false;\n            }\n            var startsWith = disk.$options.name.indexOf(disk.name + \"-\");\n            return (\n                startsWith !== 0 ||\n                disk.$options.name.length <= disk.name.length + 1 ||\n                isNameAlreadyInUse(disk.$options.name));\n        };\n\n        // Don't allow the name of the logical volume to remove the volume\n        // group name.\n        $scope.newLogicalVolumeNameChanged = function(disk) {\n            if(!angular.isString(disk.$options.name)) {\n                return;\n            }\n            var startsWith = disk.$options.name.indexOf(disk.name + \"-\");\n            if(startsWith !== 0) {\n                disk.$options.name = disk.name + \"-\";\n            }\n        };\n\n        // Return true if the logical volume size is invalid.\n        $scope.isAddLogicalVolumeSizeInvalid = function(disk) {\n            // Uses the same logic as the partition size checked.\n            return $scope.isAddPartitionSizeInvalid(disk);\n        };\n\n        // Confirm the logical volume creation.\n        $scope.availableConfirmLogicalVolume = function(disk) {\n            // Do nothing if not valid.\n            if($scope.isLogicalVolumeNameInvalid(disk) ||\n                $scope.isAddLogicalVolumeSizeInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Get the bytes to create the partition.\n            var bytes = ConverterService.unitsToBytes(\n                disk.$options.size, disk.$options.sizeUnits);\n\n            // Accepting prefilled defaults means use whole disk (lp:1509535).\n            var size_and_units = disk.original.available_size_human.split(\" \");\n            if(disk.$options.size === size_and_units[0] &&\n               disk.$options.sizeUnits === size_and_units[1]) {\n                bytes = disk.original.available_size;\n            }\n\n            // Clamp to available space.\n            if(bytes > disk.original.available_size) {\n                bytes = disk.original.available_size;\n            }\n\n            // Remove the disk if it is going to use all the remaining space.\n            var removeDisk = false;\n            if(bytes === disk.original.available_size) {\n                removeDisk = true;\n            }\n\n            // Remove the volume group name from the name.\n            var name = disk.$options.name.slice(disk.name.length + 1);\n\n            // Create the logical volume.\n            var params = {};\n            if(angular.isString(disk.$options.fstype) &&\n                disk.$options.fstype !== \"\") {\n                params.fstype = disk.$options.fstype;\n                if(disk.$options.mountPoint !== \"\") {\n                    params.mount_point = disk.$options.mountPoint;\n                    params.mount_options = disk.$options.mountOptions;\n                }\n            }\n            if(angular.isArray(disk.$options.tags)\n                && disk.$options.tags.length > 0) {\n                params.tags = disk.$options.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createLogicalVolume(\n                $scope.node, disk.block_id, name, bytes, params);\n\n            // Remove the disk if needed.\n            if(removeDisk) {\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Returns true if storage cannot be edited.\n        // (it can't be changed when the node is in any state other\n        //  than Ready or Allocated)\n        $scope.isAllStorageDisabled = function() {\n            var authUser = UsersManager.getAuthUser();\n            if(!angular.isObject(authUser) || !angular.isObject($scope.node) ||\n                (!authUser.is_superuser &&\n                 authUser.username !== $scope.node.owner)) {\n                return true;\n            }else if (angular.isObject($scope.node) &&\n                [\"Ready\", \"Allocated\"].indexOf(\n                    $scope.node.status) === -1) {\n                // If the node is not ready or allocated, disable storage panel.\n                return true;\n            } else {\n                // The node must be either ready or broken. Enable it.\n                return false;\n            }\n        };\n\n        // Returns true if there are storage layout errors\n        $scope.hasStorageLayoutIssues = function() {\n            if(angular.isObject($scope.node) &&\n                angular.isArray($scope.node.storage_layout_issues)) {\n                return $scope.node.storage_layout_issues.length > 0;\n            }\n            return false;\n        };\n\n        // Tell $parent that the storageController has been loaded.\n        $scope.$parent.controllerLoaded('storageController', $scope);\n    }]);\n","/*\n * Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Manage a node's filesystems, including adding special filesystems.\n */\n\n(function() {\n\n    function SpecialFilesystem() {\n        this.fstype = \"tmpfs\";\n        this.mountPoint = \"\";\n        this.mountOptions = \"\";\n    }\n\n    SpecialFilesystem.prototype.isValid = function() {\n        return this.mountPoint.startsWith(\"/\");\n    };\n\n    SpecialFilesystem.prototype.describe = function() {\n        var parts = [this.fstype];\n        // Add the mount point if specified and valid.\n        if (this.mountPoint.startsWith(\"/\")) {\n            parts.push(\"at \" + this.mountPoint);\n        }\n        // Filesystem-specific bits.\n        switch (this.fstype) {\n        case \"tmpfs\":\n            // Extract size=n parameter from mount options. Other\n            // options could be added in the future.\n            var size = this.mountOptions.match(/\\bsize=(\\d+)(%?)/);\n            if (size !== null) {\n                if (size[2] === \"%\") {\n                    parts.push(\"limited to \" + size[1] + \"% of memory\");\n                } else {\n                    parts.push(\"limited to \" + size[1] + \" bytes\");\n                }\n            }\n            break;\n        case \"ramfs\":\n            // This filesystem does not recognise any options. Consider\n            // warning about lack of a size limit.\n            break;\n        }\n        return parts.join(\" \");\n    };\n\n    function NodeFilesystemsController($scope) {\n\n        // Which drop-down is currently selected, e.g. \"special\".\n        $scope.dropdown = null;\n\n        // Select the \"special\" drop-down.\n        $scope.addSpecialFilesystem = function() {\n            $scope.dropdown = \"special\";\n        };\n\n        // Deselect the \"special\" drop-down.\n        $scope.addSpecialFilesystemFinished = function() {\n            if ($scope.dropdown === \"special\") {\n                $scope.dropdown = null;\n            }\n        };\n    }\n\n    function NodeAddSpecialFilesystemController($scope, MachinesManager) {\n\n        $scope.filesystem = new SpecialFilesystem();\n        $scope.description = null;  // Updated by watch.\n\n        $scope.$watch(\"filesystem\", function(filesystem) {\n            $scope.description = filesystem.describe();\n        }, true);\n\n        $scope.canMount = function() {\n            return $scope.filesystem.isValid();\n        };\n\n        $scope.mount = function() {\n            MachinesManager.mountSpecialFilesystem(\n                $scope.node, $scope.filesystem.fstype,\n                $scope.filesystem.mountPoint,\n                $scope.filesystem.mountOptions);\n            $scope.addSpecialFilesystemFinished();\n        };\n\n        $scope.cancel = function() {\n            $scope.filesystem = new SpecialFilesystem();\n            $scope.addSpecialFilesystemFinished();\n        };\n    }\n\n    angular.module(\"MAAS\").controller(\n        \"NodeFilesystemsController\", [\n            \"$scope\", NodeFilesystemsController\n        ]);\n\n    angular.module(\"MAAS\").controller(\n        \"NodeAddSpecialFilesystemController\", [\n            \"$scope\", \"MachinesManager\",\n            NodeAddSpecialFilesystemController\n        ]);\n\n}());\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Events Controller\n */\n\nangular.module('MAAS').controller('NodeEventsController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'ControllersManager', 'EventsManagerFactory',\n    'ManagerHelperService', 'ErrorService', function($scope, $rootScope,\n        $routeParams, $location, MachinesManager, ControllersManager,\n        EventsManagerFactory, ManagerHelperService, ErrorService) {\n\n        // Events manager that is loaded once the node is loaded.\n        var eventsManager = null;\n\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.node = null;\n        $scope.events = [];\n        $scope.eventsLoaded = false;\n        $scope.days = 1;\n\n        // Called once the node is loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            // Get the events manager and load it.\n            eventsManager = EventsManagerFactory.getManager(node.id);\n            $scope.events = eventsManager.getItems();\n            $scope.days = eventsManager.getMaximumDays();\n            eventsManager.loadItems().then(function() {\n                $scope.eventsLoaded = true;\n            });\n\n            // Update the title when the fqdn of the node changes.\n            $scope.$watch(\"node.fqdn\", function() {\n                $rootScope.title = $scope.node.fqdn + \" - events\";\n            });\n        }\n\n        // Return the nice text for the given event.\n        $scope.getEventText = function(event) {\n            var text = event.type.description;\n            if(angular.isString(event.description) &&\n                event.description.length > 0) {\n                text += \" - \" + event.description;\n            }\n            return text;\n        };\n\n        // Called to load more events.\n        $scope.loadMore = function() {\n            $scope.days += 1;\n            eventsManager.loadMaximumDays($scope.days);\n        };\n\n        if($location.path().indexOf('/controller') !== -1) {\n            $scope.nodesManager = ControllersManager;\n            $scope.type_name = 'controller';\n            $rootScope.page = 'controllers';\n        }else{\n            $scope.nodesManager = MachinesManager;\n            $scope.type_name = 'machine';\n            $rootScope.page = 'machines';\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n            // If redirected from the NodeDetailsController then the node\n            // will already be active. No need to set it active again.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n\n        // Destroy the events manager when the scope is destroyed. This is so\n        // the client will not recieve any more notifications about events\n        // for this node.\n        $scope.$on(\"$destroy\", function() {\n            if(angular.isObject(eventsManager)) {\n                eventsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Script Result Controller\n */\n\nangular.module('MAAS').controller('NodeResultController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'ControllersManager', 'NodeResultsManagerFactory',\n    'ManagerHelperService', 'ErrorService',\n    function($scope, $rootScope, $routeParams, $location, MachinesManager,\n             ControllersManager, NodeResultsManagerFactory,\n             ManagerHelperService, ErrorService) {\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.resultLoaded = false;\n        $scope.node = null;\n        $scope.output = 'combined';\n        $scope.result = null;\n\n        $scope.get_result_data = function(output) {\n            $scope.output = output;\n            $scope.data = \"Loading...\";\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            nodeResultsManager.get_result_data(\n                $scope.result.id, $scope.output).then(\n                    function(data) {\n                        if(data === '') {\n                            $scope.data = \"Empty file.\";\n                        }else{\n                            $scope.data = data;\n                        }\n                    });\n        };\n\n        // Called once the node is loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            // Get the NodeResultsManager and load it.\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            var requestedResult = parseInt($routeParams.id, 10);\n            nodeResultsManager.getItem(requestedResult).then(function(result) {\n                $scope.result = result;\n                $scope.get_result_data($scope.output);\n                $scope.resultLoaded = true;\n                $rootScope.title = $scope.node.fqdn + \" - \" +\n                    $scope.result.name;\n            });\n        }\n\n        // Update the title when the fqdn of the node changes.\n        $scope.$watch(\"node.fqdn\", function() {\n            if(angular.isObject($scope.node) &&\n               angular.isObject($scope.result)) {\n                $rootScope.title = $scope.node.fqdn + \" - \" +\n                    $scope.result.name;\n            }\n        });\n\n        if($location.path().indexOf(\"/controller\") !== -1) {\n            $scope.nodesManager = ControllersManager;\n            $scope.type_name = 'controller';\n            $rootScope.page = 'controllers';\n        }else{\n            $scope.nodesManager = MachinesManager;\n            $scope.type_name = 'machine';\n            $rootScope.page = 'machines';\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n            // If redirected from the NodeDetailsController then the node\n            // will already be active. No need to set it active again.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n\n        // Destroy the NodeResultsManager when the scope is destroyed. This is\n        // so the client will not recieve any more notifications about results\n        // from this node.\n        $scope.$on(\"$destroy\", function() {\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            if(angular.isObject(nodeResultsManager)) {\n                nodeResultsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Results Controller\n */\n\nangular.module('MAAS').controller('NodeResultsController', [\n    '$scope', '$routeParams', '$location', 'MachinesManager',\n    'ControllersManager', 'NodeResultsManagerFactory', 'ManagerHelperService',\n    'ErrorService',\n    function($scope, $routeParams, $location, MachinesManager,\n             ControllersManager, NodeResultsManagerFactory,\n             ManagerHelperService, ErrorService) {\n\n        // NodeResultsManager that is loaded once the node is loaded.\n        $scope.nodeResultsManager = null;\n        // References to manager data used in scope.\n        $scope.commissioning_results = null;\n        $scope.testing_results = null;\n        $scope.installation_results = null;\n        $scope.results = null;\n\n        // List of logs available.\n        $scope.logs = {\n            option: null,\n            availableOptions: []\n        };\n        // Log content being displayed.\n        $scope.logOutput = 'Loading...';\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.resultsLoaded = false;\n        $scope.node = null;\n\n        function updateLogs() {\n            var i;\n            var option;\n            var had_installation = $scope.logs.availableOptions.length === 3;\n            $scope.logs.availableOptions.length = 0;\n            // XXX ltrager 2017-12-01 - Only show the current installation log\n            // if the machine is deploying, deployed, or failed deploying. The\n            // logs page needs to be redesigned to show previous installation\n            // results.\n            if($scope.installation_results &&\n                    $scope.installation_results.length > 0 && (\n                        $scope.node.status_code === 6 ||\n                        $scope.node.status_code === 9 ||\n                        $scope.node.status_code === 11)) {\n                $scope.logs.availableOptions.push({\n                    'title': 'Installation output',\n                    'id': $scope.installation_results[0].id\n                });\n            }\n            $scope.logs.availableOptions.push({\n                'title': 'Machine output (YAML)',\n                'id': 'summary_yaml'\n            });\n            $scope.logs.availableOptions.push({\n                'title': 'Machine output (XML)',\n                'id': 'summary_xml'\n            });\n            if(!had_installation &&\n               $scope.logs.availableOptions.length === 3) {\n                // A new installation log has appeared, show it.\n                $scope.logs.option = $scope.logs.availableOptions[0];\n            }else if(!$scope.selectedLog || (\n                had_installation && $scope.logs.length === 2)) {\n                // No longer in a deployed state.\n                $scope.logs.option = $scope.logs.availableOptions[0];\n            }\n        }\n\n        // Called once the node has loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n            // Get the NodeResultsManager and load it.\n            $scope.nodeResultsManager = NodeResultsManagerFactory.getManager(\n                node, $scope.section.area);\n            $scope.nodeResultsManager.loadItems().then(function() {\n                $scope.commissioning_results =\n                    $scope.nodeResultsManager.commissioning_results;\n                $scope.testing_results =\n                    $scope.nodeResultsManager.testing_results;\n                $scope.installation_results =\n                    $scope.nodeResultsManager.installation_results;\n                $scope.results = $scope.nodeResultsManager.results;\n                // Only load and monitor logs when on the logs page.\n                if($scope.section.area === \"logs\") {\n                    updateLogs();\n                    $scope.$watch(\"installation_results\", updateLogs, true);\n                    $scope.$watch(\n                        \"installation_results\", $scope.updateLogOutput, true);\n                }\n                $scope.resultsLoaded = true;\n            });\n        }\n\n        if($location.path().indexOf('/controller') !== -1 ){\n            $scope.nodesManager = ControllersManager;\n        } else {\n            $scope.nodesManager = MachinesManager;\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n                // If redirected from the NodeDetailsController then the node\n                // will already be active. No need to set it active again.\n                var activeNode = $scope.nodesManager.getActiveItem();\n                if(angular.isObject(activeNode) &&\n                   activeNode.system_id === $routeParams.system_id) {\n                    nodeLoaded(activeNode);\n                } else {\n                    $scope.nodesManager.setActiveItem(\n                        $routeParams.system_id).then(function(node) {\n                            nodeLoaded(node);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                }\n            });\n\n        $scope.updateLogOutput = function() {\n            $scope.logOutput = \"Loading...\";\n            if(!$scope.node) {\n                return;\n            }else if($scope.logs.option.id === 'summary_xml') {\n                $scope.nodesManager.getSummaryXML($scope.node).then(\n                    function(output) {\n                        $scope.logOutput = output;\n                    });\n            }else if($scope.logs.option.id === 'summary_yaml') {\n                $scope.nodesManager.getSummaryYAML($scope.node).then(\n                    function(output) {\n                        $scope.logOutput = output;\n                    });\n            } else {\n                var result = null;\n                var i;\n                // Find the installation result to be displayed.\n                for(i = 0; i < $scope.installation_results.length; i++) {\n                    if($scope.installation_results[i].id ===\n                       $scope.logs.option.id) {\n                        result = $scope.installation_results[i];\n                        break;\n                    }\n                }\n                switch(result.status) {\n                    case 0:\n                        $scope.logOutput = \"System is booting...\";\n                        break;\n                    case 1:\n                        $scope.logOutput = \"Installation has begun!\";\n                        break;\n                    case 2:\n                        $scope.nodeResultsManager.get_result_data(\n                            result.id, 'combined').then(function(output) {\n                                if(output === '') {\n                                    $scope.logOutput =\n                                        \"Installation has succeeded but \" +\n                                        \"no output was given.\";\n                                } else {\n                                    $scope.logOutput = output;\n                                }\n                            });\n                        break;\n                    case 3:\n                        $scope.nodeResultsManager.get_result_data(\n                            result.id, 'combined').then(function(output) {\n                                if(output === '') {\n                                    $scope.logOutput =\n                                        \"Installation has failed and no \" +\n                                        \"output was given.\";\n                                } else {\n                                    $scope.logOutput = output;\n                                }\n                            });\n                        break;\n                    case 4:\n                        $scope.logOutput =\n                            \"Installation failed after 40 minutes.\";\n                        break;\n                    case 5:\n                        $scope.logOutput = \"Installation was aborted.\";\n                        break;\n                    default:\n                        $scope.logOutput = \"BUG: Unknown log status \" +\n                            result.status;\n                        break;\n                }\n            }\n        };\n\n        $scope.loadHistory = function(result) {\n            result.showing_results = false;\n            // History has already been loaded, no need to request it.\n            if(angular.isArray(result.history_list)) {\n                result.showing_history = true;\n                return;\n            }\n            result.loading_history = true;\n            $scope.nodeResultsManager.get_history(result.id).then(\n                function(history) {\n                    result.history_list = history;\n                    result.loading_history = false;\n                    result.showing_history = true;\n                });\n        };\n\n        // Destroy the NodeResultsManager when the scope is destroyed. This is\n        // so the client will not recieve any more notifications about results\n        // from this node.\n        $scope.$on(\"$destroy\", function() {\n            if(angular.isObject($scope.nodeResultsManager)) {\n                $scope.nodeResultsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes List Controller\n */\n\nangular.module('MAAS').controller('NodesListController', [\n    '$scope', '$interval', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'DevicesManager', 'ControllersManager',\n    'GeneralManager', 'ManagerHelperService', 'SearchService',\n    'ZonesManager', 'UsersManager', 'ServicesManager', 'ScriptsManager',\n    'SwitchesManager',\n    function($scope, $interval, $rootScope, $routeParams, $location,\n        MachinesManager, DevicesManager, ControllersManager, GeneralManager,\n        ManagerHelperService, SearchService, ZonesManager, UsersManager,\n        ServicesManager, ScriptsManager, SwitchesManager) {\n\n        // Mapping of device.ip_assignment to viewable text.\n        var DEVICE_IP_ASSIGNMENT = {\n            external: \"External\",\n            dynamic: \"Dynamic\",\n            \"static\": \"Static\"\n        };\n\n        // Set title and page.\n        $rootScope.title = \"Machines\";\n        $rootScope.page = \"machines\";\n\n        // Set initial values.\n        $scope.machines = MachinesManager.getItems();\n        $scope.zones = ZonesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.switches = SwitchesManager.getItems();\n        $scope.showswitches = $routeParams.switches === 'on';\n        $scope.currentpage = \"machines\";\n        $scope.osinfo = GeneralManager.getData(\"osinfo\");\n        $scope.scripts = ScriptsManager.getItems();\n        $scope.loading = true;\n\n        $scope.tabs = {};\n        // Machines tab.\n        $scope.tabs.machines = {};\n        $scope.tabs.machines.pagetitle = \"Machines\";\n        $scope.tabs.machines.currentpage = \"machines\";\n        $scope.tabs.machines.manager = MachinesManager;\n        $scope.tabs.machines.previous_search = \"\";\n        $scope.tabs.machines.search = \"\";\n        $scope.tabs.machines.searchValid = true;\n        $scope.tabs.machines.selectedItems = MachinesManager.getSelectedItems();\n        $scope.tabs.machines.metadata = MachinesManager.getMetadata();\n        $scope.tabs.machines.filters = SearchService.getEmptyFilter();\n        $scope.tabs.machines.actionOption = null;\n        $scope.tabs.machines.takeActionOptions = GeneralManager.getData(\n            \"machine_actions\");\n        $scope.tabs.machines.actionErrorCount = 0;\n        $scope.tabs.machines.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.machines.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.tabs.machines.zoneSelection = null;\n        $scope.tabs.machines.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.tabs.machines.releaseOptions = {};\n        $scope.tabs.machines.commissioningSelection = [];\n        $scope.tabs.machines.testSelection = [];\n\n        // Device tab.\n        $scope.tabs.devices = {};\n        $scope.tabs.devices.pagetitle = \"Devices\";\n        $scope.tabs.devices.currentpage = \"devices\";\n        $scope.tabs.devices.manager = DevicesManager;\n        $scope.tabs.devices.previous_search = \"\";\n        $scope.tabs.devices.search = \"\";\n        $scope.tabs.devices.searchValid = true;\n        $scope.tabs.devices.selectedItems = DevicesManager.getSelectedItems();\n        $scope.tabs.devices.filtered_items = [];\n        $scope.tabs.devices.predicate = 'fqdn';\n        $scope.tabs.devices.allViewableChecked = false;\n        $scope.tabs.devices.metadata = DevicesManager.getMetadata();\n        $scope.tabs.devices.filters = SearchService.getEmptyFilter();\n        $scope.tabs.devices.column = 'fqdn';\n        $scope.tabs.devices.actionOption = null;\n        $scope.tabs.devices.takeActionOptions = GeneralManager.getData(\n            \"device_actions\");\n        $scope.tabs.devices.actionErrorCount = 0;\n        $scope.tabs.devices.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.devices.zoneSelection = null;\n\n        // Controller tab.\n        $scope.tabs.controllers = {};\n        $scope.tabs.controllers.pagetitle = \"Controllers\";\n        $scope.tabs.controllers.currentpage = \"controllers\";\n        $scope.tabs.controllers.manager = ControllersManager;\n        $scope.tabs.controllers.previous_search = \"\";\n        $scope.tabs.controllers.search = \"\";\n        $scope.tabs.controllers.searchValid = true;\n        $scope.tabs.controllers.selectedItems =\n            ControllersManager.getSelectedItems();\n        $scope.tabs.controllers.filtered_items = [];\n        $scope.tabs.controllers.predicate = 'fqdn';\n        $scope.tabs.controllers.allViewableChecked = false;\n        $scope.tabs.controllers.metadata = ControllersManager.getMetadata();\n        $scope.tabs.controllers.filters = SearchService.getEmptyFilter();\n        $scope.tabs.controllers.column = 'fqdn';\n        $scope.tabs.controllers.actionOption = null;\n        // Rack controllers contain all options\n        $scope.tabs.controllers.takeActionOptions = GeneralManager.getData(\n            \"rack_controller_actions\");\n        $scope.tabs.controllers.actionErrorCount = 0;\n        $scope.tabs.controllers.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.controllers.zoneSelection = null;\n        $scope.tabs.controllers.syncStatuses = {};\n        $scope.tabs.controllers.addController = false;\n        $scope.tabs.controllers.registerUrl = MAAS_config.register_url;\n        $scope.tabs.controllers.registerSecret = MAAS_config.register_secret;\n\n        // Switch tab.\n        $scope.tabs.switches = {};\n        $scope.tabs.switches.pagetitle = \"Switches\";\n        $scope.tabs.switches.currentpage = \"switches\";\n        $scope.tabs.switches.manager = SwitchesManager;\n        $scope.tabs.switches.previous_search = \"\";\n        $scope.tabs.switches.search = \"\";\n        $scope.tabs.switches.searchValid = true;\n        $scope.tabs.switches.selectedItems = SwitchesManager.getSelectedItems();\n        $scope.tabs.switches.predicate = 'fqdn';\n        $scope.tabs.switches.allViewableChecked = false;\n        $scope.tabs.switches.metadata = SwitchesManager.getMetadata();\n        $scope.tabs.switches.filters = SearchService.getEmptyFilter();\n        $scope.tabs.switches.column = 'fqdn';\n        $scope.tabs.switches.actionOption = null;\n        // XXX: Which actions should there be?\n        $scope.tabs.switches.takeActionOptions = GeneralManager.getData(\n            \"machine_actions\");\n        $scope.tabs.switches.actionErrorCount = 0;\n        $scope.tabs.switches.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.switches.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.tabs.switches.zoneSelection = null;\n        $scope.tabs.switches.commissioningSelection = [];\n        $scope.tabs.switches.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.tabs.switches.releaseOptions = {};\n\n\n        // Options for add hardware dropdown.\n        $scope.addHardwareOption = null;\n        $scope.addHardwareOptions = [\n            {\n                name: \"machine\",\n                title: \"Machine\"\n            },\n            {\n                name: \"chassis\",\n                title: \"Chassis\"\n            }\n        ];\n\n        // This will hold the AddHardwareController once it is initialized.\n        // The controller will set this variable as it's always a child of\n        // this scope.\n        $scope.addHardwareScope = null;\n\n        // This will hold the AddDeviceController once it is initialized.\n        // The controller will set this variable as it's always a child of\n        // this scope.\n        $scope.addDeviceScope = null;\n\n        // When the addHardwareScope is hidden it will emit this event. We\n        // clear the call to action button, so it can be used again.\n        $scope.$on(\"addHardwareHidden\", function() {\n            $scope.addHardwareOption = null;\n        });\n\n        // Return true if the tab is in viewing selected mode.\n        function isViewingSelected(tab) {\n            var search = $scope.tabs[tab].search.toLowerCase();\n            return search === \"in:(selected)\" || search === \"in:selected\";\n        }\n\n        // Sets the search bar to only show selected.\n        function enterViewSelected(tab) {\n            $scope.tabs[tab].previous_search = $scope.tabs[tab].search;\n            $scope.tabs[tab].search = \"in:(Selected)\";\n        }\n\n        // Clear search bar from viewing selected.\n        function leaveViewSelected(tab) {\n            if(isViewingSelected(tab)) {\n                $scope.tabs[tab].search = $scope.tabs[tab].previous_search;\n                $scope.updateFilters(tab);\n            }\n        }\n\n        // Called to update `allViewableChecked`.\n        function updateAllViewableChecked(tab) {\n            // Not checked when the filtered nodes are empty.\n            if($scope.tabs[tab].filtered_items.length === 0) {\n                $scope.tabs[tab].allViewableChecked = false;\n                return;\n            }\n\n            // Loop through all filtered nodes and see if all are checked.\n            var i;\n            for(i = 0; i < $scope.tabs[tab].filtered_items.length; i++) {\n                if(!$scope.tabs[tab].filtered_items[i].$selected) {\n                    $scope.tabs[tab].allViewableChecked = false;\n                    return;\n                }\n            }\n            $scope.tabs[tab].allViewableChecked = true;\n        }\n\n        function clearAction(tab) {\n            resetActionProgress(tab);\n            leaveViewSelected(tab);\n            $scope.tabs[tab].actionOption = null;\n            $scope.tabs[tab].zoneSelection = null;\n            if(tab === \"machines\" || tab === \"switches\") {\n                // Possible for this to be called before the osSelect\n                // direction is initialized. In that case it has not\n                // created the $reset function on the model object.\n                if(angular.isFunction(\n                    $scope.tabs[tab].osSelection.$reset)) {\n                    $scope.tabs[tab].osSelection.$reset();\n                }\n                $scope.tabs[tab].commissionOptions.enableSSH = false;\n                $scope.tabs[tab].commissionOptions.skipNetworking = false;\n                $scope.tabs[tab].commissionOptions.skipStorage = false;\n                $scope.tabs[tab].commissionOptions.updateFirmware = false;\n                $scope.tabs[tab].commissionOptions.configureHBA = false;\n            }\n            $scope.tabs[tab].commissioningSelection = [];\n            $scope.tabs[tab].testSelection = [];\n        }\n\n        // Clear the action if required.\n        function shouldClearAction(tab) {\n            if($scope.tabs[tab].selectedItems.length === 0) {\n                clearAction(tab);\n            }\n            if($scope.tabs[tab].actionOption && !isViewingSelected(tab)) {\n                $scope.tabs[tab].actionOption = null;\n            }\n        }\n\n        // Called when the filtered_items are updated. Checks if the\n        // filtered_items are empty and if the search still matches the\n        // previous search. This will reset the search when no nodes match\n        // the current filter.\n        function removeEmptyFilter(tab) {\n            if($scope.tabs[tab].filtered_items.length === 0 &&\n                $scope.tabs[tab].search !== \"\" &&\n                $scope.tabs[tab].search === $scope.tabs[tab].previous_search) {\n                $scope.tabs[tab].search = \"\";\n                $scope.updateFilters(tab);\n            }\n        }\n\n        // Update the number of selected items which have an error based on the\n        // current selected action.\n        function updateActionErrorCount(tab) {\n            var i;\n            $scope.tabs[tab].actionErrorCount = 0;\n            for(i = 0; i < $scope.tabs[tab].selectedItems.length; i++) {\n                var supported = $scope.supportsAction(\n                    $scope.tabs[tab].selectedItems[i], tab);\n                if(!supported) {\n                    $scope.tabs[tab].actionErrorCount += 1;\n                }\n                $scope.tabs[tab].selectedItems[i].action_failed = false;\n            }\n        }\n\n        // Reset actionProgress on tab to zero.\n        function resetActionProgress(tab) {\n            var progress = $scope.tabs[tab].actionProgress;\n            progress.completed = progress.total = 0;\n            progress.errors = {};\n            progress.showing_confirmation = false;\n            progress.affected_nodes = 0;\n        }\n\n        // Add error to action progress and group error messages by nodes.\n        function addErrorToActionProgress(tab, error, node) {\n            var progress = $scope.tabs[tab].actionProgress;\n            progress.completed += 1;\n            var nodes = progress.errors[error];\n            if(angular.isUndefined(nodes)) {\n                progress.errors[error] = [node];\n            } else {\n                nodes.push(node);\n            }\n        }\n\n        // After an action has been performed check if we can leave all nodes\n        // selected or if an error occured and we should only show the failed\n        // nodes.\n        function updateSelectedItems(tab) {\n            if(!$scope.hasActionsFailed(tab)) {\n                if(!$scope.hasActionsInProgress(tab)) {\n                     clearAction(tab);\n                     enterViewSelected(tab);\n                }\n                return;\n            }\n            angular.forEach($scope.tabs[tab].manager.getItems(),\n                    function(node) {\n                if(node.action_failed === false) {\n                    $scope.tabs[tab].manager.unselectItem(node.system_id);\n                }\n            });\n        }\n\n        // Toggles between the current tab.\n        $scope.toggleTab = function(tab) {\n            $rootScope.title = $scope.tabs[tab].pagetitle;\n            $rootScope.page = tab;\n            $scope.currentpage = tab;\n        };\n\n        // Clear the search bar.\n        $scope.clearSearch = function(tab) {\n            $scope.tabs[tab].search = \"\";\n            $scope.updateFilters(tab);\n        };\n\n        // Mark a node as selected or unselected.\n        $scope.toggleChecked = function(node, tab) {\n            if(tab !== 'machines' && tab !== 'switches') {\n                if($scope.tabs[tab].manager.isSelected(node.system_id)) {\n                    $scope.tabs[tab].manager.unselectItem(node.system_id);\n                } else {\n                    $scope.tabs[tab].manager.selectItem(node.system_id);\n                }\n                updateAllViewableChecked(tab);\n            }\n            updateActionErrorCount(tab);\n            shouldClearAction(tab);\n        };\n\n        // Select all viewable nodes or deselect all viewable nodes.\n        $scope.toggleCheckAll = function(tab) {\n            if(tab !== 'machines' && tab !== 'switches') {\n                if($scope.tabs[tab].allViewableChecked) {\n                    angular.forEach(\n                        $scope.tabs[tab].filtered_items, function(node) {\n                            $scope.tabs[tab].manager.unselectItem(\n                                node.system_id);\n                    });\n                } else {\n                    angular.forEach(\n                        $scope.tabs[tab].filtered_items, function(node) {\n                            $scope.tabs[tab].manager.selectItem(\n                                node.system_id);\n                    });\n                }\n                updateAllViewableChecked(tab);\n            }\n            updateActionErrorCount(tab);\n            shouldClearAction(tab);\n        };\n\n        $scope.onNodeListingChanged = function(nodes, tab) {\n            if(nodes.length === 0 &&\n                $scope.tabs[tab].search !== \"\" &&\n                $scope.tabs[tab].search === $scope.tabs[tab].previous_search) {\n                $scope.tabs[tab].search = \"\";\n                $scope.updateFilters(tab);\n            }\n        };\n\n        // When the filtered nodes change update if all check buttons\n        // should be checked or not.\n        $scope.$watchCollection(\"tabs.devices.filtered_items\", function() {\n            updateAllViewableChecked(\"devices\");\n            removeEmptyFilter(\"devices\");\n        });\n        $scope.$watchCollection(\"tabs.controllers.filtered_items\", function() {\n            updateAllViewableChecked(\"controllers\");\n            removeEmptyFilter(\"controllers\");\n        });\n\n        // Shows the current selection.\n        $scope.showSelected = function(tab) {\n            enterViewSelected(tab);\n            $scope.updateFilters(tab);\n        };\n\n        // Adds or removes a filter to the search.\n        $scope.toggleFilter = function(type, value, tab) {\n            // Don't allow a filter to be changed when an action is\n            // in progress.\n            if(angular.isObject($scope.tabs[tab].actionOption)) {\n                return;\n            }\n            $scope.tabs[tab].filters = SearchService.toggleFilter(\n                $scope.tabs[tab].filters, type, value, true);\n            $scope.tabs[tab].search = SearchService.filtersToString(\n                $scope.tabs[tab].filters);\n        };\n\n        // Return True if the filter is active.\n        $scope.isFilterActive = function(type, value, tab) {\n            return SearchService.isFilterActive(\n                $scope.tabs[tab].filters, type, value, true);\n        };\n\n        // Update the filters object when the search bar is updated.\n        $scope.updateFilters = function(tab) {\n            var filters = SearchService.getCurrentFilters(\n                $scope.tabs[tab].search);\n            if(filters === null) {\n                $scope.tabs[tab].filters = SearchService.getEmptyFilter();\n                $scope.tabs[tab].searchValid = false;\n            } else {\n                $scope.tabs[tab].filters = filters;\n                $scope.tabs[tab].searchValid = true;\n            }\n            shouldClearAction(tab);\n        };\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate, tab) {\n            $scope.tabs[tab].predicate = predicate;\n            $scope.tabs[tab].reverse = !$scope.tabs[tab].reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        $scope.selectColumnOrSort = function(predicate, tab) {\n            if($scope.tabs[tab].column !== predicate) {\n                $scope.tabs[tab].column = predicate;\n            } else {\n                $scope.sortTable(predicate, tab);\n            }\n        };\n\n        // Return True if the node supports the action.\n        $scope.supportsAction = function(node, tab) {\n            if(!$scope.tabs[tab].actionOption) {\n                return true;\n            }\n            return node.actions.indexOf(\n                $scope.tabs[tab].actionOption.name) >= 0;\n        };\n\n        // Called when the action option gets changed.\n        $scope.actionOptionSelected = function(tab) {\n            updateActionErrorCount(tab);\n            enterViewSelected(tab);\n\n            // Hide the add hardware/device section.\n            if (tab === 'machines') {\n                if(angular.isObject($scope.addHardwareScope)) {\n                    $scope.addHardwareScope.hide();\n                }\n            } else if(tab === 'devices') {\n                if(angular.isObject($scope.addDeviceScope)) {\n                    $scope.addDeviceScope.hide();\n                }\n            }\n        };\n\n        // Return True if there is an action error.\n        $scope.isActionError = function(tab) {\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                $scope.tabs[tab].actionErrorCount === 0 &&\n                ($scope.osinfo.osystems.length === 0 ||\n                UsersManager.getSSHKeyCount() === 0)) {\n                return true;\n            }\n            return $scope.tabs[tab].actionErrorCount !== 0;\n        };\n\n        // Return True if unable to deploy because of missing images.\n        $scope.isDeployError = function(tab) {\n            if($scope.tabs[tab].actionErrorCount !== 0) {\n                return false;\n            }\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                $scope.osinfo.osystems.length === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Return True if unable to deploy because of missing ssh keys.\n        $scope.isSSHKeyError = function(tab) {\n            if($scope.tabs[tab].actionErrorCount !== 0) {\n                return false;\n            }\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                UsersManager.getSSHKeyCount() === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Called when the current action is cancelled.\n        $scope.actionCancel = function(tab) {\n            resetActionProgress(tab);\n            leaveViewSelected(tab);\n            $scope.tabs[tab].actionOption = null;\n        };\n\n        // Perform the action on all nodes.\n        $scope.actionGo = function(tab) {\n            var extra = {};\n            var i;\n            // Set deploy parameters if a deploy or set zone action.\n            if($scope.tabs[tab].actionOption.name === \"deploy\" &&\n                angular.isString($scope.tabs[tab].osSelection.osystem) &&\n                angular.isString($scope.tabs[tab].osSelection.release)) {\n\n                // Set extra. UI side the release is structured os/release, but\n                // when it is sent over the websocket only the \"release\" is\n                // sent.\n                extra.osystem = $scope.tabs[tab].osSelection.osystem;\n                var release = $scope.tabs[tab].osSelection.release;\n                release = release.split(\"/\");\n                release = release[release.length-1];\n                extra.distro_series = release;\n                // hwe_kernel is optional so only include it if its specified\n                if(angular.isString($scope.tabs[tab].osSelection.hwe_kernel) &&\n                   ($scope.tabs[tab].osSelection.hwe_kernel.indexOf('hwe-')\n                    >= 0 ||\n                    $scope.tabs[tab].osSelection.hwe_kernel.indexOf('ga-')\n                    >= 0)) {\n                    extra.hwe_kernel = $scope.tabs[tab].osSelection.hwe_kernel;\n                }\n            } else if($scope.tabs[tab].actionOption.name === \"set-zone\" &&\n                angular.isNumber($scope.tabs[tab].zoneSelection.id)) {\n                // Set the zone parameter.\n                extra.zone_id = $scope.tabs[tab].zoneSelection.id;\n            } else if($scope.tabs[tab].actionOption.name === \"commission\") {\n                // Set the commission options.\n                extra.enable_ssh = (\n                    $scope.tabs[tab].commissionOptions.enableSSH);\n                extra.skip_networking = (\n                    $scope.tabs[tab].commissionOptions.skipNetworking);\n                extra.skip_storage = (\n                    $scope.tabs[tab].commissionOptions.skipStorage);\n                extra.commissioning_scripts = [];\n                for(i=0;i<$scope.tabs[tab].commissioningSelection.length;i++) {\n                    extra.commissioning_scripts.push(\n                        $scope.tabs[tab].commissioningSelection[i].id);\n                }\n                if($scope.tabs[tab].commissionOptions.updateFirmware) {\n                    extra.commissioning_scripts.push('update_firmware')\n                }\n                if($scope.tabs[tab].commissionOptions.configureHBA) {\n                    extra.commissioning_scripts.push('configure_hba')\n                }\n                if(extra.commissioning_scripts.length === 0) {\n                    // Tell the region not to run any custom commissioning\n                    // scripts.\n                    extra.commissioning_scripts.push('none');\n                }\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.tabs[tab].testSelection.length;i++) {\n                    extra.testing_scripts.push(\n                        $scope.tabs[tab].testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.tabs[tab].actionOption.name === \"test\") {\n                if(!$scope.tabs[tab].actionProgress.showing_confirmation) {\n                    var progress = $scope.tabs[tab].actionProgress;\n                    for(i=0;i<$scope.tabs[tab].selectedItems.length;i++) {\n                        if($scope.tabs[tab].selectedItems[i].status_code === 6)\n                        {\n                            progress.showing_confirmation = true;\n                            progress.affected_nodes++;\n                        }\n                    }\n                    if($scope.tabs[tab].actionProgress.affected_nodes != 0) {\n                        return;\n                    }\n                }\n                // Set the test options.\n                extra.enable_ssh = (\n                    $scope.tabs[tab].commissionOptions.enableSSH);\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.tabs[tab].testSelection.length;i++) {\n                    extra.testing_scripts.push(\n                        $scope.tabs[tab].testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.tabs[tab].actionOption.name === \"release\") {\n                // Set the release options.\n                extra.erase = (\n                    $scope.tabs[tab].releaseOptions.erase);\n                extra.secure_erase = (\n                    $scope.tabs[tab].releaseOptions.secureErase);\n                extra.quick_erase = (\n                    $scope.tabs[tab].releaseOptions.quickErase);\n            }\n\n            // Setup actionProgress.\n            resetActionProgress(tab);\n            $scope.tabs[tab].actionProgress.total =\n                $scope.tabs[tab].selectedItems.length;\n\n            // Perform the action on all selected items.\n            angular.forEach($scope.tabs[tab].selectedItems, function(node) {\n                $scope.tabs[tab].manager.performAction(\n                    node, $scope.tabs[tab].actionOption.name,\n                    extra).then(function() {\n                        $scope.tabs[tab].actionProgress.completed += 1;\n                        node.action_failed = false;\n                        updateSelectedItems(tab);\n                    }, function(error) {\n                        addErrorToActionProgress(tab, error, node);\n                        node.action_failed = true;\n                        updateSelectedItems(tab);\n                    });\n            });\n        };\n\n        // Returns true when actions are being performed.\n        $scope.hasActionsInProgress = function(tab) {\n            var progress = $scope.tabs[tab].actionProgress;\n            return progress.total > 0 && progress.completed !== progress.total;\n        };\n\n        // Returns true if any of the actions have failed.\n        $scope.hasActionsFailed = function(tab) {\n            return Object.keys(\n                $scope.tabs[tab].actionProgress.errors).length > 0;\n        };\n\n        // Called to when the addHardwareOption has changed.\n        $scope.addHardwareOptionChanged = function() {\n            if($scope.addHardwareOption) {\n                $scope.addHardwareScope.show(\n                    $scope.addHardwareOption.name);\n            }\n        };\n\n        // Called when the add device button is pressed.\n        $scope.addDevice = function() {\n            $scope.addDeviceScope.show();\n        };\n\n        // Called when the cancel add device button is pressed.\n        $scope.cancelAddDevice = function() {\n            $scope.addDeviceScope.cancel();\n        };\n\n        // Get the display text for device ip assignment type.\n        $scope.getDeviceIPAssignment = function(ipAssignment) {\n            return DEVICE_IP_ASSIGNMENT[ipAssignment];\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        $scope.hasCustomCommissioningScripts = function() {\n            var i;\n            for(i=0;i<$scope.scripts.length;i++) {\n                if($scope.scripts[i].script_type === 0) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Reload osinfo when the page reloads\n        $scope.$on(\"$routeChangeSuccess\", function () {\n            GeneralManager.loadItems([\"osinfo\"]).then(function() {\n                $scope.osinfo = GeneralManager.getData(\"osinfo\");\n            });\n        });\n\n        // Switch to the specified tab, if specified.\n        angular.forEach(\n            [\"machines\", \"devices\", \"controllers\", \"switches\"],\n            function(node_type) {\n                if($location.path().indexOf(\"/\" + node_type) !== -1) {\n                    $scope.toggleTab(node_type);\n                }\n            });\n\n        // Load the required managers for this controller. The ServicesManager\n        // is required by the maasControllerStatus directive that is used\n        // in the partial for this controller.\n        ManagerHelperService.loadManagers($scope, [\n            $scope.tabs[$scope.currentpage].manager,\n            GeneralManager, ZonesManager, UsersManager, ServicesManager,\n            ScriptsManager]).then(function() {\n                $scope.loading = false;\n            });\n\n\n        // Stop polling and save the current filter when the scope is destroyed.\n        $scope.$on(\"$destroy\", function() {\n            $interval.cancel($scope.statusPoll);\n            SearchService.storeFilters(\n                \"machines\", $scope.tabs.machines.filters);\n            SearchService.storeFilters(\"devices\", $scope.tabs.devices.filters);\n            SearchService.storeFilters(\n                \"controllers\", $scope.tabs.controllers.filters);\n            SearchService.storeFilters(\n                \"switches\", $scope.tabs.switches.filters);\n        });\n\n        // Restore the filters if any saved.\n        var machinesFilter = SearchService.retrieveFilters(\"machines\");\n        if(angular.isObject(machinesFilter)) {\n            $scope.tabs.machines.search = SearchService.filtersToString(\n                machinesFilter);\n            $scope.updateFilters(\"machines\");\n        }\n        var devicesFilter = SearchService.retrieveFilters(\"devices\");\n        if(angular.isObject(devicesFilter)) {\n            $scope.tabs.devices.search = SearchService.filtersToString(\n                devicesFilter);\n            $scope.updateFilters(\"devices\");\n        }\n        var controllersFilter = SearchService.retrieveFilters(\"controllers\");\n        if(angular.isObject(controllersFilter)) {\n            $scope.tabs.controllers.search = SearchService.filtersToString(\n                controllersFilter);\n            $scope.updateFilters(\"controllers\");\n        }\n        var switchesFilter = SearchService.retrieveFilters(\"switches\");\n        if(angular.isObject(switchesFilter)) {\n            $scope.tabs.switches.search = SearchService.filtersToString(\n                switchesFilter);\n            $scope.updateFilters(\"switches\");\n        }\n\n        // Set the query if the present in $routeParams.\n        var query = $routeParams.query;\n        if(angular.isString(query)) {\n            $scope.tabs[$scope.currentpage].search = query;\n            $scope.updateFilters($scope.currentpage);\n        }\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pod Details Controller\n */\n\nangular.module('MAAS').controller('PodDetailsController', [\n    '$scope', '$rootScope', '$location', '$routeParams',\n    'PodsManager', 'GeneralManager', 'UsersManager', 'DomainsManager',\n    'ZonesManager', 'ManagerHelperService', 'ErrorService', function(\n        $scope, $rootScope, $location, $routeParams,\n        PodsManager, GeneralManager, UsersManager, DomainsManager,\n        ZonesManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"pods\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.pod = null;\n        $scope.podManager = PodsManager;\n        $scope.action = {\n          option: null,\n          options: [\n            {\n              name: 'refresh',\n              title: 'Refresh',\n              sentence: 'refresh',\n              operation: angular.bind(PodsManager, PodsManager.refresh)\n            },\n            {\n              name: 'delete',\n              title: 'Delete',\n              sentence: 'delete',\n              operation: angular.bind(PodsManager, PodsManager.deleteItem)\n            }\n          ],\n          inProgress: false,\n          error: null\n        };\n        $scope.compose = {\n          action: {\n            name: 'compose',\n            title: 'Compose',\n            sentence: 'compose'\n          },\n          obj: {\n            storage: [{\n              type: 'local',\n              size: 8,\n              tags: [],\n              boot: true\n            }]\n          }\n        };\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.domains = DomainsManager.getItems();\n        $scope.zones = ZonesManager.getItems();\n        $scope.section = {\n          area: 'summary'\n        };\n        $scope.machinesSearch = 'pod-id:=invalid';\n        $scope.editing = false;\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If power_types exist then a rack controller is connected.\n            return $scope.power_types.length > 0;\n        };\n\n        // Return true when the edit buttons can be clicked.\n        $scope.canEdit = function() {\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser());\n        };\n\n        // Called to edit the pod configuration.\n        $scope.editPodConfiguration = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.editing = true;\n        };\n\n        // Called when the cancel or save button is pressed.\n        $scope.exitEditPodConfiguration = function() {\n            $scope.editing = false;\n        };\n\n        // Return true if there is an action error.\n        $scope.isActionError = function() {\n            return $scope.action.error !== null;\n        };\n\n        // Called when the action.option has changed.\n        $scope.actionOptionChanged = function() {\n            // Clear the action error.\n            $scope.action.error = null;\n        };\n\n        // Cancel the action.\n        $scope.actionCancel = function() {\n            $scope.action.option = null;\n            $scope.action.error = null;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            $scope.action.inProgress = true;\n            $scope.action.option.operation($scope.pod).then(function() {\n                  // If the action was delete, then go back to listing.\n                  if($scope.action.option.name === \"delete\") {\n                      $location.path(\"/pods\");\n                  }\n                  $scope.action.inProgress = false;\n                  $scope.action.option = null;\n                  $scope.action.error = null;\n              }, function(error) {\n                  $scope.action.inProgress = false;\n                  $scope.action.error = error;\n              });\n        };\n\n        // Return the title of the pod type.\n        $scope.getPodTypeTitle = function() {\n            var i;\n            for(i = 0; i < $scope.power_types.length; i++) {\n                var power_type = $scope.power_types[i];\n                if(power_type.name === $scope.pod.type) {\n                    return power_type.description;\n                }\n            }\n            return $scope.pod.type;\n        };\n\n        // Returns true if the pod is composable.\n        $scope.canCompose = function() {\n            if(angular.isObject($scope.pod)) {\n                return ($scope.isSuperUser() &&\n                    $scope.pod.capabilities.indexOf('composable') >= 0);\n            } else {\n                return false;\n            }\n        };\n\n        // Opens the compose action menu.\n        $scope.composeMachine = function() {\n            $scope.action.option = $scope.compose.action;\n        };\n\n        // Called before the compose params is sent over the websocket.\n        $scope.composePreProcess = function(params) {\n            params = angular.copy(params);\n            params.id = $scope.pod.id;\n            // Sort boot disk first.\n            var sorted = $scope.compose.obj.storage.sort(function(a, b) {\n              if(a.boot === b.boot) {\n                return 0;\n              } else if(a.boot && !b.boot) {\n                return -1;\n              } else {\n                return 1;\n              }\n            });\n            // Create the storage constraint.\n            var storage = [];\n            angular.forEach(sorted, function(disk, idx) {\n              var constraint = idx + ':' + disk.size;\n              var tags = disk.tags.map(function(tag) {\n                return tag.text;\n              });\n              tags.splice(0, 0, disk.type);\n              constraint += '(' + tags.join(',') + ')';\n              storage.push(constraint);\n            });\n            params.storage = storage.join(',');\n            return params;\n        };\n\n        // Called to cancel composition.\n        $scope.cancelCompose = function() {\n          $scope.compose.obj = {\n            storage: [{\n              type: 'local',\n              size: 8,\n              tags: [],\n              boot: true\n            }]\n          };\n          $scope.action.option = null;\n        };\n\n        // Add another storage device.\n        $scope.composeAddStorage = function() {\n          var storage = {\n            type: 'local',\n            size: 8,\n            tags: [],\n            boot: false\n          };\n          if($scope.pod.capabilities.indexOf('iscsi_storage') >= 0) {\n            storage.type = 'iscsi';\n          }\n          $scope.compose.obj.storage.push(storage);\n        };\n\n        // Change which disk is the boot disk.\n        $scope.composeSetBootDisk = function(storage) {\n          angular.forEach($scope.compose.obj.storage, function(disk) {\n            disk.boot = false;\n          });\n          storage.boot = true;\n        };\n\n        // Remove a disk from storage config.\n        $scope.composeRemoveDisk = function(storage) {\n          var idx = $scope.compose.obj.storage.indexOf(storage);\n          if(idx >= 0) {\n            $scope.compose.obj.storage.splice(idx, 1);\n          }\n        };\n\n        // Start watching key fields.\n        $scope.startWatching = function() {\n            $scope.$watch(\"pod.name\", function() {\n                $rootScope.title = 'Pod ' + $scope.pod.name;\n            });\n            $scope.$watch(\"pod.capabilities\", function() {\n                // Show the composable action if the pod supports composition.\n                var idx = $scope.action.options.indexOf(\n                    $scope.compose.action);\n                if(!$scope.canCompose()) {\n                    if(idx >= 0) {\n                        $scope.action.options.splice(idx, 1);\n                    }\n                } else {\n                    if(idx === -1) {\n                        $scope.action.options.splice(\n                            0, 0, $scope.compose.action);\n                    }\n                }\n            });\n            $scope.$watch(\"action.option\", function(now, then) {\n                // When the compose action is selected set the default\n                // parameters.\n                if(now && now.name === 'compose') {\n                    if(!then || then.name !== 'compose') {\n                        $scope.compose.obj.domain = (\n                            DomainsManager.getDefaultDomain().id);\n                        $scope.compose.obj.zone = (\n                            ZonesManager.getDefaultZone().id);\n                    }\n                }\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            PodsManager, GeneralManager, UsersManager,\n            DomainsManager, ZonesManager]).then(function() {\n\n            // Possibly redirected from another controller that already had\n            // this pod set to active. Only call setActiveItem if not already\n            // the activeItem.\n            var activePod = PodsManager.getActiveItem();\n            if(angular.isObject(activePod) &&\n                activePod.id === parseInt($routeParams.id, 10)) {\n                $scope.pod = activePod;\n                $scope.loaded = true;\n                $scope.machinesSearch = 'pod-id:=' + $scope.pod.id;\n                $scope.startWatching();\n            } else {\n                PodsManager.setActiveItem(\n                    parseInt($routeParams.id, 10)).then(function(pod) {\n                        $scope.pod = pod;\n                        $scope.loaded = true;\n                        $scope.machinesSearch = 'pod-id:=' + $scope.pod.id;\n                        $scope.startWatching();\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pods List Controller\n */\n\nangular.module('MAAS').controller('PodsListController', [\n    '$scope', '$rootScope',\n    'PodsManager', 'UsersManager', 'GeneralManager', 'ZonesManager',\n    'ManagerHelperService', function(\n        $scope, $rootScope, PodsManager, UsersManager, GeneralManager,\n        ZonesManager, ManagerHelperService) {\n\n        // Set title and page.\n        $rootScope.title = \"Pods\";\n        $rootScope.page = \"pods\";\n\n        // Set initial values.\n        $scope.podManager = PodsManager;\n        $scope.pods = PodsManager.getItems();\n        $scope.loading = true;\n\n        $scope.filteredItems = [];\n        $scope.selectedItems = PodsManager.getSelectedItems();\n        $scope.predicate = 'name';\n        $scope.allViewableChecked = false;\n        $scope.action = {\n          option: null,\n          options: [\n            {\n              name: 'refresh',\n              title: 'Refresh',\n              sentence: 'refresh',\n              operation: angular.bind(PodsManager, PodsManager.refresh)\n            },\n            {\n              name: 'delete',\n              title: 'Delete',\n              sentence: 'delete',\n              operation: angular.bind(PodsManager, PodsManager.deleteItem)\n            }\n          ],\n          progress: {\n              total: 0,\n              completed: 0,\n              errors: 0\n          }\n        };\n        $scope.add = {\n          open: false,\n          obj: {\n              cpu_over_commit_ratio: 1,\n              memory_over_commit_ratio: 1\n          }\n        };\n        $scope.powerTypes = GeneralManager.getData(\"power_types\");\n        $scope.zones = ZonesManager.getItems();\n\n        // Called to update `allViewableChecked`.\n        function updateAllViewableChecked() {\n            // Not checked when no pods.\n            if($scope.pods.length === 0) {\n                $scope.allViewableChecked = false;\n                return;\n            }\n\n            // Loop through all filtered pods and see if all are checked.\n            var i;\n            for(i = 0; i < $scope.pods.length; i++) {\n                if(!$scope.pods[i].$selected) {\n                    $scope.allViewableChecked = false;\n                    return;\n                }\n            }\n            $scope.allViewableChecked = true;\n        }\n\n        function clearAction() {\n            resetActionProgress();\n            $scope.action.option = null;\n        }\n\n        // Clear the action if required.\n        function shouldClearAction() {\n            if($scope.selectedItems.length === 0) {\n                clearAction();\n                if($scope.action.option) {\n                    $scope.action.option = null;\n                }\n            }\n        }\n\n        // Reset actionProgress to zero.\n        function resetActionProgress() {\n            var progress = $scope.action.progress;\n            progress.completed = progress.total = progress.errors = 0;\n            angular.forEach($scope.pods, function(pod) {\n                delete pod.action_failed;\n            });\n        }\n\n        // After an action has been performed check if we can leave all pods\n        // selected or if an error occured and we should only show the failed\n        // pods.\n        function updateSelectedItems() {\n            if(!$scope.hasActionsFailed()) {\n                if(!$scope.hasActionsInProgress()) {\n                     clearAction();\n                }\n                return;\n            }\n            angular.forEach($scope.pods, function(pod) {\n                if(pod.action_failed === false) {\n                    PodsManager.unselectItem(pod.id);\n                }\n            });\n            shouldClearAction();\n        }\n\n        // Mark a pod as selected or unselected.\n        $scope.toggleChecked = function(pod) {\n            if(PodsManager.isSelected(pod.id)) {\n                PodsManager.unselectItem(pod.id);\n            } else {\n                PodsManager.selectItem(pod.id);\n            }\n            updateAllViewableChecked();\n            shouldClearAction();\n        };\n\n        // Select all viewable pods or deselect all viewable pods.\n        $scope.toggleCheckAll = function() {\n            if($scope.allViewableChecked) {\n                angular.forEach($scope.pods, function(pod) {\n                    PodsManager.unselectItem(pod.id);\n                });\n            } else {\n                angular.forEach($scope.pods, function(pod) {\n                    PodsManager.selectItem(pod.id);\n                });\n            }\n            updateAllViewableChecked();\n            shouldClearAction();\n        };\n\n        // When the pods change update if all check buttons should be\n        // checked or not.\n        $scope.$watchCollection(\"pods\", function() {\n            updateAllViewableChecked();\n        });\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Called when the current action is cancelled.\n        $scope.actionCancel = function() {\n            resetActionProgress();\n            $scope.action.option = null;\n        };\n\n        // Perform the action on all pods.\n        $scope.actionGo = function() {\n            var extra = {};\n\n            // Setup actionProgress.\n            resetActionProgress();\n            $scope.action.progress.total = $scope.selectedItems.length;\n\n            // Perform the action on all selected items.\n            var operation = $scope.action.option.operation;\n            angular.forEach($scope.selectedItems, function(pod) {\n                operation(pod).then(function() {\n                        $scope.action.progress.completed += 1;\n                        pod.action_failed = false;\n                        updateSelectedItems();\n                    }, function(error) {\n                        $scope.action.progress.errors += 1;\n                        pod.action_error = error;\n                        pod.action_failed = true;\n                        updateSelectedItems();\n                    });\n            });\n        };\n\n        // Returns true when actions are being performed.\n        $scope.hasActionsInProgress = function() {\n            var progress = $scope.action.progress;\n            return progress.total > 0 && (\n                progress.completed + progress.errors) !== progress.total;\n        };\n\n        // Returns true if any of the actions have failed.\n        $scope.hasActionsFailed = function() {\n            var progress = $scope.action.progress;\n            return progress.errors > 0;\n        };\n\n        // Called when the add pod button is pressed.\n        $scope.addPod = function() {\n            $scope.add.open = true;\n            $scope.add.obj.zone = ZonesManager.getDefaultZone().id;\n            $scope.add.obj.cpu_over_commit_ratio = 1;\n            $scope.add.obj.memory_over_commit_ratio = 1;\n        };\n\n        // Called when the cancel add pod button is pressed.\n        $scope.cancelAddPod = function() {\n            $scope.add.open = false;\n            $scope.add.obj = {};\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return the title of the power type.\n        $scope.getPowerTypeTitle = function(power_type) {\n            var i;\n            for(i = 0; i < $scope.powerTypes.length; i++) {\n                var powerType = $scope.powerTypes[i];\n                if(powerType.name === power_type) {\n                    return powerType.description;\n                }\n            }\n            return power_type;\n        };\n\n        // Load the required managers for this controller.\n        ManagerHelperService.loadManagers($scope, [\n            PodsManager, UsersManager, GeneralManager, ZonesManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Preferences Controller\n */\n\nangular.module('MAAS').controller('PreferencesController', [\n    '$scope', 'UsersManager', 'ManagerHelperService',\n    function(\n        $scope, UsersManager, ManagerHelperService) {\n            $scope.loading = true;\n            ManagerHelperService.loadManager(\n                $scope, UsersManager).then(function() {\n                    $scope.loading = false;\n                });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Settings Controller\n */\n\nangular.module('MAAS').controller('SettingsController', [\n    '$scope', '$rootScope', '$routeParams', 'PackageRepositoriesManager',\n    'DHCPSnippetsManager', 'MachinesManager', 'ControllersManager',\n    'DevicesManager', 'SubnetsManager', 'GeneralManager',\n    'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, PackageRepositoriesManager,\n             DHCPSnippetsManager, MachinesManager, ControllersManager,\n             DevicesManager, SubnetsManager, GeneralManager,\n             ManagerHelperService) {\n\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"settings\";\n\n        // Initial values.\n        $scope.loading = true;\n        $scope.snippetsManager = DHCPSnippetsManager;\n        $scope.snippets = DHCPSnippetsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.machines = MachinesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.known_architectures =\n            GeneralManager.getData(\"known_architectures\");\n        $scope.pockets_to_disable =\n            GeneralManager.getData(\"pockets_to_disable\");\n        $scope.components_to_disable =\n            GeneralManager.getData(\"components_to_disable\");\n        $scope.packageRepositoriesManager = PackageRepositoriesManager;\n        $scope.repositories =\n            PackageRepositoriesManager.getItems();\n        $scope.newSnippet = null;\n        $scope.editSnippet = null;\n        $scope.deleteSnippet = null;\n        $scope.snippetTypes = [\"Global\", \"Subnet\", \"Node\"];\n        $scope.newRepository = null;\n        $scope.editRepository = null;\n        $scope.deleteRepository = null;\n\n        // Called when the enabled toggle is changed.\n        $scope.repositoryEnabledToggle = function(repository) {\n            PackageRepositoriesManager.updateItem(repository);\n        };\n\n        // Called to enter remove mode for a repository.\n        $scope.repositoryEnterRemove = function(repository) {\n            $scope.newRepository = null;\n            $scope.editRepository = null;\n            $scope.deleteRepository = repository;\n        };\n\n        // Called to exit remove mode for a repository.\n        $scope.repositoryExitRemove = function() {\n            $scope.deleteRepository = null;\n        };\n\n        // Called to confirm the removal of a repository.\n        $scope.repositoryConfirmRemove = function() {\n            PackageRepositoriesManager.deleteItem(\n                $scope.deleteRepository).then(function() {\n                    $scope.repositoryExitRemove();\n                });\n        };\n\n        // Return true if the repository is a PPA.\n        $scope.isPPA = function(data) {\n            if(!angular.isObject(data)) {\n                return false;\n            }\n            if(!angular.isString(data.url)) {\n                return false;\n            }\n            return data.url.indexOf(\"ppa:\") === 0 ||\n                data.url.indexOf(\"ppa.launchpad.net\") > -1;\n        };\n\n        // Return true if the repository is a mirror.\n        $scope.isMirror = function(data) {\n            if(!angular.isObject(data)) {\n                return false;\n            }\n            if(!angular.isString(data.name)) {\n                return false;\n            }\n            return data.name === \"main_archive\" ||\n                data.name === \"ports_archive\";\n        };\n\n        // Called to enter edit mode for a repository.\n        $scope.repositoryEnterEdit = function(repository) {\n            $scope.newRepository = null;\n            $scope.deleteRepository = null;\n            $scope.editRepository = repository;\n        };\n\n        // Called to exit edit mode for a repository.\n        $scope.repositoryExitEdit = function() {\n            $scope.editRepository = null;\n        };\n\n        // Called to start adding a new repository.\n        $scope.repositoryAdd = function(isPPA) {\n            var repo = {\n                name: \"\",\n                enabled: true,\n                url: \"\",\n                key: \"\",\n                arches: [\"i386\", \"amd64\"],\n                distributions: [],\n                components: []\n            };\n            if (isPPA) {\n                repo.url = \"ppa:\";\n            }\n            $scope.newRepository = repo;\n        };\n\n        // Called to cancel addind a new repository.\n        $scope.repositoryAddCancel = function() {\n            $scope.newRepository = null;\n        };\n\n        // Return the node from either the machines, devices, or controllers\n        // manager.\n        function getNode(system_id) {\n            var node = MachinesManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n            node = DevicesManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n            node = ControllersManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n        }\n\n        // Return the name of the subnet.\n        $scope.getSubnetName = function(subnet) {\n            return SubnetsManager.getName(subnet);\n        };\n\n        // Return the text for the type of snippet.\n        $scope.getSnippetTypeText = function(snippet) {\n            if(angular.isString(snippet.node)) {\n                return \"Node\";\n            } else if(angular.isNumber(snippet.subnet)) {\n                return \"Subnet\";\n            } else {\n                return \"Global\";\n            }\n        };\n\n        // Return the object the snippet applies to.\n        $scope.getSnippetAppliesToObject = function(snippet) {\n            if(angular.isString(snippet.node)) {\n                return getNode(snippet.node);\n            } else if(angular.isNumber(snippet.subnet)) {\n                return SubnetsManager.getItemFromList(snippet.subnet);\n            }\n        };\n\n        // Return the applies to text that is disabled in none edit mode.\n        $scope.getSnippetAppliesToText = function(snippet) {\n            var obj = $scope.getSnippetAppliesToObject(snippet);\n            if(angular.isString(snippet.node) && angular.isObject(obj)) {\n                return obj.fqdn;\n            } else if(angular.isNumber(snippet.subnet) &&\n                angular.isObject(obj)) {\n                return SubnetsManager.getName(obj);\n            } else {\n                return \"\";\n            }\n        };\n\n        // Called to enter remove mode for a DHCP snippet.\n        $scope.snippetEnterRemove = function(snippet) {\n            $scope.newSnippet = null;\n            $scope.editSnippet = null;\n            $scope.deleteSnippet = snippet;\n        };\n\n        // Called to exit remove mode for a DHCP snippet.\n        $scope.snippetExitRemove = function() {\n            $scope.deleteSnippet = null;\n        };\n\n        // Called to confirm the removal of a snippet.\n        $scope.snippetConfirmRemove = function() {\n            DHCPSnippetsManager.deleteItem($scope.deleteSnippet).then(\n                function() {\n                    $scope.snippetExitRemove();\n                });\n        };\n\n        // Called to enter edit mode for a DHCP snippet.\n        $scope.snippetEnterEdit = function(snippet) {\n            $scope.newSnippet = null;\n            $scope.deleteSnippet = null;\n            $scope.editSnippet = snippet;\n            $scope.editSnippet.type = $scope.getSnippetTypeText(snippet);\n        };\n\n        // Called to exit edit mode for a DHCP snippet.\n        $scope.snippetExitEdit = function() {\n            $scope.editSnippet = null;\n        };\n\n        // Called when the active toggle is changed.\n        $scope.snippetToggle = function(snippet) {\n            DHCPSnippetsManager.updateItem(snippet).then(null,\n                function(error) {\n                    // Revert state change and clear toggling.\n                    snippet.enabled = !snippet.enabled;\n                    console.log(error);\n                });\n        };\n\n        // Called to start adding a new snippet.\n        $scope.snippetAdd = function() {\n            $scope.editSnippet = null;\n            $scope.deleteSnippet = null;\n            $scope.newSnippet = {\n                name: \"\",\n                type: \"Global\",\n                enabled: true\n            };\n        };\n\n        // Called to cancel addind a new snippet.\n        $scope.snippetAddCancel = function() {\n            $scope.newSnippet = null;\n        };\n\n        // Setup page variables based on section.\n        if($routeParams.section === \"dhcp\") {\n            $rootScope.title = \"DHCP snippets\";\n            $scope.currentpage = 'dhcp';\n        }\n        else if($routeParams.section === \"repositories\") {\n            $rootScope.title = \"Package repositories\";\n            $scope.currentpage = 'repositories';\n        }\n\n        // Load the required managers.\n        ManagerHelperService.loadManagers($scope, [\n                PackageRepositoriesManager, DHCPSnippetsManager,\n                MachinesManager, DevicesManager, ControllersManager,\n                SubnetsManager, GeneralManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Details Controller\n */\n\nangular.module('MAAS').controller('SpaceDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'SpacesManager', 'VLANsManager', 'SubnetsManager', 'FabricsManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        SpacesManager, VLANsManager, SubnetsManager, FabricsManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.space = null;\n        $scope.spaceManager = SpacesManager;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.loaded = false;\n        $scope.editSummary = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.space.name;\n        }\n\n        // Called when the space has been loaded.\n        function spaceLoaded(space) {\n            $scope.space = space;\n            updateTitle();\n            $scope.predicate = \"[subnet_name, vlan_name]\";\n            $scope.$watch(\"subnets\", updateSubnets, true);\n            updateSubnets();\n            $scope.loaded = true;\n        }\n\n        // Generate a table that can easily be rendered in the view.\n        function updateSubnets() {\n            var rows = [];\n            angular.forEach($filter('filter')(\n                    $scope.subnets, {space:$scope.space.id}, true),\n                    function(subnet) {\n                var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                var row = {\n                    vlan: vlan,\n                    vlan_name: VLANsManager.getName(vlan),\n                    subnet: subnet,\n                    subnet_name: SubnetsManager.getName(subnet),\n                    fabric: fabric,\n                    fabric_name: fabric.name\n                };\n                rows.push(row);\n            });\n            $scope.rows = rows;\n        }\n\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Called when the \"edit\" button is cliked in the space summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the space summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Return true if this is the default Space\n        $scope.isDefaultSpace = function() {\n            if(!angular.isObject($scope.space)) {\n                return false;\n            }\n            return $scope.space.id === 0;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.space)) {\n                return $scope.space.subnet_ids.length === 0;\n            }\n            return false;\n        };\n\n        // Called when the delete space button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete space button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete space button is pressed.\n        $scope.deleteConfirmButton = function() {\n            SpacesManager.deleteSpace($scope.space).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/networks\");\n                $location.search('by', 'space');\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            SpacesManager, SubnetsManager, VLANsManager, FabricsManager,\n            UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this space set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeSpace = SpacesManager.getActiveItem();\n            var requestedSpace = parseInt($routeParams.space_id, 10);\n            if(isNaN(requestedSpace)) {\n                ErrorService.raiseError(\"Invalid space identifier.\");\n            } else if(angular.isObject(activeSpace) &&\n                activeSpace.id === requestedSpace) {\n                spaceLoaded(activeSpace);\n            } else {\n                SpacesManager.setActiveItem(\n                    requestedSpace).then(function(space) {\n                        spaceLoaded(space);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Subnet Details Controller\n */\n\nangular.module('MAAS').filter('filterSource', ['ValidationService',\n    function() {\n        return function(subnets, source) {\n            var filtered = [];\n            angular.forEach(subnets, function(subnet) {\n                if(subnet.id !== source.id &&\n                    subnet.version === source.version) {\n                    filtered.push(subnet);\n                }\n            });\n            return filtered;\n        };\n    }]);\n\nangular.module('MAAS').controller('SubnetDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'ConfigsManager', 'SubnetsManager', 'SpacesManager', 'VLANsManager',\n    'UsersManager', 'FabricsManager', 'StaticRoutesManager',\n    'ManagerHelperService', 'ErrorService', 'ConverterService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location, ConfigsManager,\n        SubnetsManager, SpacesManager, VLANsManager, UsersManager,\n        FabricsManager, StaticRoutesManager, ManagerHelperService, ErrorService,\n        ConverterService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.subnet = null;\n        $scope.editSummary = false;\n        $scope.active_discovery_data = null;\n        $scope.active_discovery_interval = null;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.subnetManager = SubnetsManager;\n        $scope.staticRoutes = StaticRoutesManager.getItems();\n        $scope.staticRoutesManager = StaticRoutesManager;\n        $scope.space = null;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.actionError = null;\n        $scope.actionOption = null;\n        $scope.actionOptions = [];\n        $scope.reverse = false;\n        $scope.newStaticRoute = null;\n        $scope.editStaticRoute = null;\n        $scope.deleteStaticRoute = null;\n\n        $scope.MAP_SUBNET_ACTION = {\n            name: \"map_subnet\",\n            title: \"Map subnet\"\n        };\n        $scope.DELETE_ACTION = {\n            name: \"delete\",\n            title: \"Delete\"\n        };\n\n        // Alloc type mapping.\n        var ALLOC_TYPES = {\n            0: 'Automatic',\n            1: 'Static',\n            4: 'User reserved',\n            5: 'DHCP',\n            6: 'Observed'\n        };\n\n        // Node type mapping.\n        var NODE_TYPES = {\n            0: 'Machine',\n            1: 'Device',\n            2: 'Rack controller',\n            3: 'Region controller',\n            4: 'Rack and region controller',\n            5: 'Chassis',\n            6: 'Storage'\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            subnet = $scope.subnet;\n            if(subnet && subnet.cidr) {\n                $rootScope.title = subnet.cidr;\n                if(subnet.name && subnet.cidr !== subnet.name) {\n                    $rootScope.title += \" (\" +subnet.name + \")\";\n                }\n            }\n        }\n\n        // Update the IP version of the CIDR.\n        function updateIPVersion() {\n            var ip = $scope.subnet.cidr.split('/')[0];\n            if(ip.indexOf(':') === -1) {\n                $scope.ipVersion = 4;\n            } else {\n                $scope.ipVersion = 6;\n            }\n        }\n\n        // Sort for IP address.\n        $scope.ipSort = function(ipAddress) {\n            if($scope.ipVersion === 4) {\n                return ConverterService.ipv4ToInteger(ipAddress.ip);\n            } else {\n                return ConverterService.ipv6Expand(ipAddress.ip);\n            }\n        };\n\n        // Set default predicate to the ipSort function.\n        $scope.predicate = $scope.ipSort;\n\n        // Return the name of the allocation type.\n        $scope.getAllocType = function(allocType) {\n            var str = ALLOC_TYPES[allocType];\n            if(angular.isString(str)) {\n                return str;\n            } else {\n                return \"Unknown\";\n            }\n        };\n\n        $scope.getSubnetCIDR = function(destId) {\n            return SubnetsManager.getItemFromList(destId).cidr;\n        };\n\n        // Sort based on the name of the allocation type.\n        $scope.allocTypeSort = function(ipAddress) {\n            return $scope.getAllocType(ipAddress.alloc_type);\n        };\n\n        // Return the name of the node type for the given IP.\n        $scope.getUsageForIP = function(ip) {\n            if(angular.isObject(ip.node_summary)) {\n                var nodeType = ip.node_summary.node_type;\n                var str = NODE_TYPES[nodeType];\n                if(angular.isString(str)) {\n                    return str;\n                } else {\n                    return \"Unknown\";\n                }\n            } else if(angular.isObject(ip.bmcs)) {\n                return \"BMC\";\n            } else if(angular.isObject(ip.dns_records)) {\n                return \"DNS\";\n            } else {\n                return \"Unknown\";\n            }\n        };\n\n        // Sort based on the node type string.\n        $scope.nodeTypeSort = function(ipAddress) {\n            return $scope.getUsageForIP(ipAddress);\n        };\n\n        // Sort based on the owner name.\n        $scope.ownerSort = function(ipAddress) {\n            var owner = ipAddress.user;\n            if(angular.isString(owner) && owner.length > 0) {\n                return owner;\n            } else {\n                return \"MAAS\";\n            }\n        };\n\n        // Called to change the sort order of the IP table.\n        $scope.sortIPTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Return the name of the VLAN.\n        $scope.getVLANName = function(vlan) {\n           return VLANsManager.getName(vlan);\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        $scope.actionRetry = function() {\n            // When we clear actionError, the HTML will be re-rendered to\n            // hide the error message (and the user will be taken back to\n            // the previous action they were performing, since we reset\n            // the actionOption in the error handler.\n            $scope.actionError = null;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            if($scope.actionOption.name === \"map_subnet\") {\n                SubnetsManager.scanSubnet($scope.subnet).then(function(result) {\n                    if(result && result.scan_started_on.length === 0) {\n                        $scope.actionError =\n                            ManagerHelperService.parseValidationError(\n                                result.result);\n                    } else {\n                        $scope.actionOption = null;\n                        $scope.actionError = null;\n                    }\n                }, function(error) {\n                    $scope.actionError =\n                        ManagerHelperService.parseValidationError(error);\n                });\n            } else if($scope.actionOption.name === \"delete\") {\n                SubnetsManager.deleteSubnet(\n                    $scope.subnet).then(function(result) {\n                        $scope.actionOption = null;\n                        $scope.actionError = null;\n                        $location.path(\"/networks\");\n                    }, function(error) {\n                        $scope.actionError =\n                            ManagerHelperService.parseValidationError(error);\n                });\n            }\n        };\n\n        // Called when a action is selected.\n        $scope.actionChanged = function() {\n            $scope.actionError = null;\n        };\n\n        // Called when the \"Cancel\" button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionOption = null;\n            $scope.actionError = null;\n        };\n\n        // Called when the managers load to populate the actions the user\n        // is allowed to perform.\n        $scope.updateActions = function() {\n            if(UsersManager.isSuperUser()) {\n                $scope.actionOptions = [\n                    $scope.MAP_SUBNET_ACTION,\n                    $scope.DELETE_ACTION\n                ];\n            } else {\n                $scope.actionOptions = [];\n            }\n        };\n\n        // Called when the \"edit\" button is cliked in the subnet summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the subnet summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Called by maas-obj-form before it saves the subnet. The passed\n        // subnet is the object right before its sent over the websocket.\n        $scope.subnetPreSave = function(subnet, changedFields) {\n            // Adjust the subnet object if the fabric changed.\n            if(changedFields.indexOf(\"fabric\") !== -1) {\n                // Fabric changed, the websocket expects VLAN to be updated, so\n                // we set the VLAN to the default VLAN for the new fabric.\n                subnet.vlan = FabricsManager.getItemFromList(\n                    subnet.fabric).default_vlan_id;\n            }\n            return subnet;\n        };\n\n        // Called to start adding a new static route.\n        $scope.addStaticRoute = function() {\n            $scope.editStaticRoute = null;\n            $scope.deleteStaticRoute = null;\n            $scope.newStaticRoute = {\n                source: $scope.subnet.id,\n                gateway_ip: \"\",\n                destination: null,\n                metric: 0\n            };\n        };\n\n        // Cancel adding the new static route.\n        $scope.cancelAddStaticRoute = function() {\n            $scope.newStaticRoute = null;\n        };\n\n        // Return true if the static route is in edit mode.\n        $scope.isStaticRouteInEditMode = function(route) {\n            return $scope.editStaticRoute === route;\n        };\n\n        // Toggle edit mode for the static route.\n        $scope.staticRouteToggleEditMode = function(route) {\n            $scope.newStaticRoute = null;\n            $scope.deleteStaticRoute = null;\n            if($scope.isStaticRouteInEditMode(route)) {\n                $scope.editStaticRoute  = null;\n            } else {\n                $scope.editStaticRoute = route;\n            }\n        };\n\n        // Return true if the static route is in delete mode.\n        $scope.isStaticRouteInDeleteMode = function(route) {\n            return $scope.deleteStaticRoute === route;\n        };\n\n        // Enter delete mode for the static route.\n        $scope.staticRouteEnterDeleteMode = function(route) {\n            $scope.newStaticRoute = null;\n            $scope.editStaticRoute = null;\n            $scope.deleteStaticRoute = route;\n        };\n\n        // Exit delete mode for the statc route.\n        $scope.staticRouteCancelDelete = function() {\n            $scope.deleteStaticRoute = null;\n        };\n\n        // Perform the delete operation on the static route.\n        $scope.staticRouteConfirmDelete = function() {\n            StaticRoutesManager.deleteItem($scope.deleteStaticRoute).then(\n                function() {\n                    $scope.deleteStaticRoute = null;\n                });\n        };\n\n        // Called when the subnet has been loaded.\n        function subnetLoaded(subnet) {\n            $scope.subnet = subnet;\n            $scope.loaded = true;\n\n            updateTitle();\n\n            // Watch the vlan and fabric field so if its changed on the subnet\n            // we make sure that the fabric is updated. It is possible that\n            // fabric is removed from the subnet since it is injected from this\n            // controller, so when it is removed we add it back.\n            var updateFabric = function() {\n                $scope.subnet.fabric = (\n                    VLANsManager.getItemFromList($scope.subnet.vlan).fabric);\n                $scope.subnet.fabric_name = (\n                  FabricsManager.getItemFromList(subnet.fabric).name);\n            };\n            var updateSpace = function() {\n                $scope.space = (\n                    SpacesManager.getItemFromList($scope.subnet.space));\n            };\n            var updateVlan = function() {\n                var vlan = VLANsManager.getItemFromList($scope.subnet.vlan);\n                $scope.subnet.vlan_name = (\n                    VLANsManager.getName(vlan)\n                );\n            };\n\n            $scope.$watch(\"subnet.fabric\", updateFabric);\n            $scope.$watch(\"subnet.fabric_name\", updateFabric);\n            $scope.$watch(\"subnet.vlan\", updateFabric);\n            $scope.$watch(\"subnet.vlan_name\", updateVlan);\n            $scope.$watch(\"subnet.space\", updateSpace);\n            $scope.$watch(\"subnet.cidr\", updateIPVersion);\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            ConfigsManager, SubnetsManager, SpacesManager, VLANsManager,\n            UsersManager, FabricsManager, StaticRoutesManager\n        ]).then(function() {\n\n            $scope.updateActions();\n            $scope.active_discovery_data = ConfigsManager.getItemFromList(\n                \"active_discovery_interval\");\n            // Find active discovery interval\n            angular.forEach(\n                $scope.active_discovery_data.choices, function(choice) {\n                    if(choice[0] === $scope.active_discovery_data.value) {\n                        $scope.active_discovery_interval = choice[1];\n                    }\n                });\n\n            // Possibly redirected from another controller that already had\n            // this subnet set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeSubnet = SubnetsManager.getActiveItem();\n            var requestedSubnet = parseInt($routeParams.subnet_id, 10);\n            if(isNaN(requestedSubnet)) {\n                ErrorService.raiseError(\"Invalid subnet identifier.\");\n            } else if(angular.isObject(activeSubnet) &&\n                activeSubnet.id === requestedSubnet) {\n                subnetLoaded(activeSubnet);\n            } else {\n                SubnetsManager.setActiveItem(\n                    requestedSubnet).then(function(subnet) {\n                        subnetLoaded(subnet);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS VLAN Details Controller\n */\n\nangular.module('MAAS').filter('ignoreSelf', function () {\n    return function(objects, self) {\n        var filtered = [];\n        angular.forEach(objects, function(obj) {\n            if(obj !== self) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').controller('VLANDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'VLANsManager', 'SubnetsManager', 'SpacesManager', 'FabricsManager',\n    'ControllersManager', 'UsersManager', 'ManagerHelperService',\n    'ErrorService', 'ValidationService', function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        VLANsManager, SubnetsManager, SpacesManager, FabricsManager,\n        ControllersManager, UsersManager, ManagerHelperService, ErrorService,\n        ValidationService) {\n        var vm = this;\n\n        var filterByVLAN = $filter('filterByVLAN');\n        var filterControllersByVLAN = $filter('filterControllersByVLAN');\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        vm.PROVIDE_DHCP_ACTION = {\n            // Note: 'title' is set dynamically depending on whether or not\n            // DHCP is already enabled on this VLAN.\n            name: \"enable_dhcp\"\n        };\n        vm.RELAY_DHCP_ACTION = {\n            // Note: 'title' is set ndynamically depending on whether or not\n            // DHCP relay is already enabled on this VLAN.\n            name: \"relay_dhcp\"\n        };\n        vm.DISABLE_DHCP_ACTION = {\n            name: \"disable_dhcp\",\n            title: \"Disable DHCP\"\n        };\n        vm.DELETE_ACTION = {\n            name: \"delete\",\n            title: \"Delete\"\n        };\n\n        // Initial values.\n        vm.loaded = false;\n        vm.vlan = null;\n        vm.title = null;\n        vm.actionOption = null;\n        vm.actionOptions = [];\n        vm.vlanManager = VLANsManager;\n        vm.vlans = VLANsManager.getItems();\n        vm.subnets = SubnetsManager.getItems();\n        vm.spaces = SpacesManager.getItems();\n        vm.fabrics = FabricsManager.getItems();\n        vm.controllers = ControllersManager.getItems();\n        vm.actionError = null;\n        vm.relatedSubnets = [];\n        vm.relatedControllers = [];\n        vm.provideDHCPAction = {};\n        vm.primaryRack = null;\n        vm.secondaryRack = null;\n        vm.editSummary = false;\n\n\n        // Return true if the authenticated user is super user.\n        vm.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Called when the \"edit\" button is cliked in the vlan summary\n        vm.enterEditSummary = function() {\n            vm.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the vlan summary\n        vm.exitEditSummary = function() {\n            vm.editSummary = false;\n        };\n\n        // Get the space name for the VLAN.\n        vm.getSpaceName = function() {\n            var space = SpacesManager.getItemFromList(vm.vlan.space);\n            if(space) {\n              return space.name;\n            } else {\n              return \"(undefined)\";\n            }\n        };\n\n        // Get the aciton structure for the action with the specified name.\n        vm.getActionByName = function(name) {\n            var i;\n            for(i = 0 ; i < vm.actionOptions.length ; i++) {\n                if(vm.actionOptions[i].name === name) {\n                    return vm.actionOptions[i];\n                }\n            }\n            return null;\n        };\n\n        // Initialize the provideDHCPAction structure with the current primary\n        // and secondary rack, plus an indication regarding whether or not\n        // adding a dynamic IP range is required.\n        vm.initProvideDHCP = function(forRelay) {\n            vm.provideDHCPAction = {};\n            var dhcp = vm.provideDHCPAction;\n            dhcp.subnet = null;\n            dhcp.relayVLAN = null;\n            if (angular.isNumber(vm.vlan.relay_vlan)) {\n                dhcp.relayVLAN = VLANsManager.getItemFromList(\n                    vm.vlan.relay_vlan);\n            }\n            if (angular.isObject(vm.primaryRack)) {\n                dhcp.primaryRack = vm.primaryRack.system_id;\n            } else if(vm.relatedControllers.length > 0) {\n                // Select the primary controller arbitrarily by default.\n                dhcp.primaryRack = vm.relatedControllers[0].system_id;\n            }\n            if (angular.isObject(vm.secondaryRack)) {\n                dhcp.secondaryRack = vm.secondaryRack.system_id;\n            } else if(vm.relatedControllers.length > 1) {\n                // Select the secondary controller arbitrarily by default.\n                dhcp.secondaryRack = vm.relatedControllers[1].system_id;\n            }\n            dhcp.maxIPs = 0;\n            dhcp.startIP = null;\n            dhcp.endIP = null;\n            dhcp.gatewayIP = \"\";\n            if (angular.isObject(vm.relatedSubnets)) {\n                // Select a subnet arbitrarily by default.\n                if (vm.relatedSubnets.length > 0 &&\n                        angular.isObject(vm.relatedSubnets[0].subnet)) {\n                    dhcp.subnet = vm.relatedSubnets[0].subnet.id;\n                }\n                dhcp.needsDynamicRange = true;\n                var i, subnet;\n                for (i = 0; i < vm.relatedSubnets.length; i++) {\n                    subnet = vm.relatedSubnets[i].subnet;\n                    // If any related subnet already has a dynamic range, we\n                    // cannot prompt the user to enter one here. If a\n                    // suggestion does not exist, a range does not exist\n                    // already.\n                    var iprange = subnet.statistics.suggested_dynamic_range;\n                    if (!angular.isObject(iprange)) {\n                        // If there is already a dynamic range on one of the\n                        // subnets, it's the \"subnet of least surprise\" if\n                        // the user is choosing to reconfigure their rack\n                        // controllers. (if they want DHCP on *another* subnet,\n                        // they should need to be explicit about it.)\n                        dhcp.subnet = subnet.id;\n                        dhcp.needsDynamicRange = false;\n                        break;\n                    }\n                }\n                // We must prompt the user for a subnet and a gateway IP\n                // address if any subnet does not yet contain a gateway IP\n                // address.\n                dhcp.needsGatewayIP = false;\n                dhcp.subnetMissingGatewayIP = true;\n                for (i = 0; i < vm.relatedSubnets.length; i++) {\n                    subnet = vm.relatedSubnets[i].subnet;\n                    if(subnet.gateway_ip === null ||\n                        subnet.gateway_ip === '') {\n                        dhcp.needsGatewayIP = true;\n                        break;\n                    }\n                }\n            }\n            // Since we are setting default values for these three options,\n            // ensure all the appropriate updates occur.\n            if(!forRelay) {\n                vm.updatePrimaryRack();\n                vm.updateSecondaryRack();\n            }\n            vm.updateSubnet(forRelay);\n        };\n\n        // Called when the actionOption has changed.\n        vm.actionOptionChanged = function() {\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                vm.initProvideDHCP(false);\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                vm.initProvideDHCP(true);\n            }\n            // Clear the action error.\n            vm.actionError = null;\n        };\n\n        // Cancel the action.\n        vm.actionCancel = function() {\n            // When the user wants to cancel an action, we need to clear out\n            // both the actionOption (so that the action screen will not be\n            // presented again) and the actionError (so that the error screen\n            // is hidden).\n            vm.actionOption = null;\n            vm.actionError = null;\n        };\n\n        // Called from the Provide DHCP form when the primary rack changes.\n        vm.updatePrimaryRack = function() {\n            var dhcp = vm.provideDHCPAction;\n            // If the user selects the secondary controller to be the primary,\n            // then the primary controller needs to be cleared out.\n            if(dhcp.primaryRack === dhcp.secondaryRack) {\n                dhcp.secondaryRack = null;\n            }\n            var i;\n            for(i = 0 ; i < vm.relatedControllers.length ; i++) {\n                if(vm.relatedControllers[i].system_id !== dhcp.primaryRack) {\n                    dhcp.secondaryRack = vm.relatedControllers[i].system_id;\n                    break;\n                }\n            }\n        };\n\n        // Called from the Provide DHCP form when the secondary rack changes.\n        vm.updateSecondaryRack = function() {\n            var dhcp = vm.provideDHCPAction;\n            // This should no longer be possible due to the filters on the\n            // drop-down boxes, but just in case.\n            if(dhcp.primaryRack === dhcp.secondaryRack) {\n                dhcp.primaryRack = null;\n                dhcp.secondaryRack = null;\n            }\n        };\n\n        // Called from the view to exclude the primary rack when selecting\n        // the secondary rack controller.\n        vm.filterPrimaryRack = function(rack) {\n            var dhcp = vm.provideDHCPAction;\n            return rack.system_id !== dhcp.primaryRack;\n        };\n\n        // Called from the Provide DHCP form when the subnet selection changes.\n        vm.updateSubnet = function(forRelay) {\n            var dhcp = vm.provideDHCPAction;\n            var subnet = SubnetsManager.getItemFromList(dhcp.subnet);\n            if(angular.isObject(subnet)) {\n                var suggested_gateway = null;\n                var iprange = null;\n                if(angular.isObject(subnet.statistics)) {\n                    suggested_gateway = subnet.statistics.suggested_gateway;\n                    iprange = subnet.statistics.suggested_dynamic_range;\n                }\n                if(angular.isObject(iprange) && iprange.num_addresses > 0) {\n                    dhcp.maxIPs = iprange.num_addresses;\n                    if(forRelay) {\n                        dhcp.startIP = \"\";\n                        dhcp.endIP = \"\";\n                        dhcp.startPlaceholder = iprange.start + \"(optional)\";\n                        dhcp.endPlaceholder = iprange.end + \" (optional)\";\n                    } else {\n                        dhcp.startIP = iprange.start;\n                        dhcp.endIP = iprange.end;\n                        dhcp.startPlaceholder = iprange.start;\n                        dhcp.endPlaceholder = iprange.end;\n                    }\n                } else {\n                    // Need to add a dynamic range, but according to our data,\n                    // there is no room on the subnet for a dynamic range.\n                    dhcp.maxIPs = 0;\n                    dhcp.startIP = \"\";\n                    dhcp.endIP = \"\";\n                    dhcp.startPlaceholder = \"(no available IPs)\";\n                    dhcp.endPlaceholder = \"(no available IPs)\";\n                }\n                if(angular.isString(suggested_gateway)) {\n                    if(forRelay) {\n                      dhcp.gatewayIP = \"\";\n                      dhcp.gatewayPlaceholder = (\n                          suggested_gateway + \" (optional)\");\n                    } else {\n                        dhcp.gatewayIP = suggested_gateway;\n                        dhcp.gatewayPlaceholder = suggested_gateway;\n                    }\n                } else {\n                    // This means the subnet already has a gateway, so don't\n                    // bother populating it.\n                    dhcp.gatewayIP = \"\";\n                    dhcp.gatewayPlaceholder = \"\";\n                }\n            } else {\n                // Don't need to add a dynamic range, so ensure these fields\n                // are cleared out.\n                dhcp.maxIPs = 0;\n                dhcp.startIP = null;\n                dhcp.endIP = null;\n                dhcp.gatewayIP = \"\";\n            }\n            if(angular.isObject(subnet)) {\n                dhcp.subnetMissingGatewayIP = !angular.isString(\n                    subnet.gateway_ip);\n            } else {\n                dhcp.subnetMissingGatewayIP = false;\n            }\n            if(dhcp.subnetMissingGatewayIP === false) {\n                dhcp.gatewayIP = null;\n            }\n       };\n\n        vm.actionRetry = function() {\n            // When we clear actionError, the HTML will be re-rendered to\n            // hide the error message (and the user will be taken back to\n            // the previous action they were performing, since we reset\n            // the actionOption in the error handler.\n            vm.actionError = null;\n        };\n\n        // Return True if the current action can be performed.\n        vm.canPerformAction = function() {\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                return vm.relatedSubnets.length > 0;\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                return angular.isObject(vm.provideDHCPAction.relayVLAN);\n            } else {\n                return true;\n            }\n        };\n\n        // Perform the action.\n        vm.actionGo = function() {\n            // Do nothing if action cannot be performed.\n            if(!vm.canPerformAction()) {\n               return;\n            }\n\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                var dhcp = vm.provideDHCPAction;\n                var controllers = [];\n                // These will be undefined if they don't exist, and the region\n                // will simply get an empty dictionary.\n                var extra = {};\n                extra.subnet = dhcp.subnet;\n                extra.start = dhcp.startIP;\n                extra.end = dhcp.endIP;\n                extra.gateway = dhcp.gatewayIP;\n                if(angular.isString(dhcp.primaryRack)) {\n                    controllers.push(dhcp.primaryRack);\n                }\n                if(angular.isString(dhcp.secondaryRack)) {\n                    controllers.push(dhcp.secondaryRack);\n                }\n                // Abort the action without calling down to the region if\n                // the user didn't select a controller.\n                if(controllers.length === 0) {\n                    vm.actionError =\n                        \"A primary rack controller must be specified.\";\n                    return;\n                }\n                VLANsManager.configureDHCP(\n                    vm.vlan, controllers, extra).then(function() {\n                        vm.actionOption = null;\n                        vm.actionError = null;\n                    }, function(result) {\n                        vm.actionError = result.error;\n                        vm.actionOption = vm.PROVIDE_DHCP_ACTION;\n                    });\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                // These will be undefined if they don't exist, and the region\n                // will simply get an empty dictionary.\n                var extraDHCP = {};\n                extraDHCP.subnet = vm.provideDHCPAction.subnet;\n                extraDHCP.start = vm.provideDHCPAction.startIP;\n                extraDHCP.end = vm.provideDHCPAction.endIP;\n                extraDHCP.gateway = vm.provideDHCPAction.gatewayIP;\n                var relay = vm.provideDHCPAction.relayVLAN.id;\n                VLANsManager.configureDHCP(\n                    vm.vlan, [], extraDHCP, relay).then(function() {\n                        vm.actionOption = null;\n                        vm.actionError = null;\n                    }, function(result) {\n                        vm.actionError = result.error;\n                        vm.actionOption = vm.RELAY_DHCP_ACTION;\n                    });\n            } else if(vm.actionOption.name === \"disable_dhcp\") {\n                VLANsManager.disableDHCP(vm.vlan).then(function() {\n                    vm.actionOption = null;\n                    vm.actionError = null;\n                }, function(result) {\n                    vm.actionError = result.error;\n                    vm.actionOption = vm.DISABLE_DHCP_ACTION;\n                });\n            } else if(vm.actionOption.name === \"delete\") {\n                VLANsManager.deleteVLAN(vm.vlan).then(function() {\n                    $location.path(\"/networks\");\n                    vm.actionOption = null;\n                    vm.actionError = null;\n                }, function(result) {\n                    vm.actionError = result.error;\n                    vm.actionOption = vm.DELETE_ACTION;\n                });\n            }\n        };\n\n        // Return true if there is an action error.\n        vm.isActionError = function() {\n            return vm.actionError !== null;\n        };\n\n        // Return the name of the VLAN.\n        vm.getFullVLANName = function(vlan_id) {\n            var vlan = VLANsManager.getItemFromList(vlan_id);\n            var fabric = FabricsManager.getItemFromList(vlan.fabric);\n            return (\n                FabricsManager.getName(fabric) + \".\" +\n                VLANsManager.getName(vlan));\n        };\n\n        // Return the current DHCP status.\n        vm.getDHCPStatus = function() {\n            if(vm.vlan) {\n              if(vm.vlan.dhcp_on) {\n                return \"Enabled\";\n              } else if(vm.vlan.relay_vlan) {\n                return \"Relayed via \" + vm.getFullVLANName(vm.vlan.relay_vlan);\n              } else {\n                return \"Disabled\";\n              }\n            } else {\n              return \"\";\n            }\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            var vlan = vm.vlan;\n            var fabric = vm.fabric;\n            if(angular.isObject(vlan) && angular.isObject(fabric)) {\n                if (!vlan.name) {\n                    if(vlan.vid === 0) {\n                        vm.title = \"Default VLAN\";\n                    } else {\n                        vm.title = \"VLAN \" + vlan.vid;\n                    }\n                } else {\n                    vm.title = vlan.name;\n                }\n                vm.title += \" in \" + fabric.name;\n                $rootScope.title = vm.title;\n            }\n        }\n\n        // Called from a $watch when the management racks are updated.\n        function updateManagementRacks() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            if(vlan.primary_rack) {\n                vm.primaryRack = ControllersManager.getItemFromList(\n                    vlan.primary_rack);\n            } else {\n                vm.primaryRack = null;\n            }\n            if(vlan.secondary_rack) {\n                vm.secondaryRack = ControllersManager.getItemFromList(\n                    vlan.secondary_rack);\n            } else {\n                vm.secondaryRack = null;\n            }\n        }\n\n        // Called from a $watch when the related controllers may have changed.\n        function updateRelatedControllers() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            var racks = [];\n            angular.forEach(vlan.rack_sids, function(rack_sid) {\n                var rack = ControllersManager.getItemFromList(rack_sid);\n                if(angular.isObject(rack)) {\n                    racks.push(rack);\n                }\n            });\n            vm.relatedControllers = racks;\n        }\n\n        // Called from a $watch when the related subnets or spaces may have\n        // changed.\n        function updateRelatedSubnets() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            var subnets = [];\n            angular.forEach(\n                    filterByVLAN(vm.subnets, vlan), function(subnet) {\n                var space = SpacesManager.getItemFromList(subnet.space);\n                if(!angular.isObject(space)) {\n                    space = {name: \"(undefined)\"};\n                }\n                var row = {\n                    subnet: subnet,\n                    space: space\n                };\n                subnets.push(row);\n            });\n            vm.relatedSubnets = subnets;\n        }\n\n        function updatePossibleActions() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            // Clear out the actionOptions array. (this needs to be the same\n            // object, since it's watched from $scope.)\n            vm.actionOptions.length = 0;\n            if(UsersManager.isSuperUser()) {\n                if(!vlan.relay_vlan) {\n                  if(vlan.dhcp_on === true) {\n                      vm.PROVIDE_DHCP_ACTION.title = \"Reconfigure DHCP\";\n                      vm.actionOptions.push(vm.PROVIDE_DHCP_ACTION);\n                      vm.actionOptions.push(vm.DISABLE_DHCP_ACTION);\n                  } else {\n                      vm.PROVIDE_DHCP_ACTION.title = \"Provide DHCP\";\n                      vm.RELAY_DHCP_ACTION.title = \"Relay DHCP\";\n                      vm.actionOptions.push(vm.PROVIDE_DHCP_ACTION);\n                      vm.actionOptions.push(vm.RELAY_DHCP_ACTION);\n                  }\n                } else {\n                  vm.actionOptions.push(vm.RELAY_DHCP_ACTION);\n                  vm.actionOptions.push(vm.DISABLE_DHCP_ACTION);\n                  vm.RELAY_DHCP_ACTION.title = \"Reconfigure DHCP relay\";\n                }\n                if(!vm.isFabricDefault) {\n                    vm.actionOptions.push(vm.DELETE_ACTION);\n                }\n            }\n        }\n\n        // Called when the vlan has been loaded.\n        function vlanLoaded(vlan) {\n            vm.vlan = vlan;\n            vm.fabric = FabricsManager.getItemFromList(vlan.fabric);\n            vm.isFabricDefault = vm.fabric.default_vlan_id === vm.vlan.id;\n            vm.loaded = true;\n\n            updateTitle();\n            updateManagementRacks();\n            updateRelatedControllers();\n            updateRelatedSubnets();\n            updatePossibleActions();\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            VLANsManager, SubnetsManager, SpacesManager, FabricsManager,\n            ControllersManager, UsersManager\n        ]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this vlan set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeVLAN = VLANsManager.getActiveItem();\n            var requestedVLAN = parseInt($routeParams.vlan_id, 10);\n            if(isNaN(requestedVLAN)) {\n                ErrorService.raiseError(\"Invalid VLAN identifier.\");\n            } else if(angular.isObject(activeVLAN) &&\n                activeVLAN.id === requestedVLAN) {\n                vlanLoaded(activeVLAN);\n            } else {\n                VLANsManager.setActiveItem(\n                    requestedVLAN).then(function(vlan) {\n                        vlanLoaded(vlan);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n\n            $scope.$watch(\"vlanDetails.vlan.name\", updateTitle);\n            $scope.$watch(\"vlanDetails.vlan.vid\", updateTitle);\n            $scope.$watch(\"vlanDetails.vlan.dhcp_on\", updatePossibleActions);\n            $scope.$watch(\n                \"vlanDetails.vlan.relay_vlan\", updatePossibleActions);\n            $scope.$watch(\"vlanDetails.fabric.name\", updateTitle);\n            $scope.$watch(\n                \"vlanDetails.vlan.primary_rack\", updateManagementRacks);\n            $scope.$watch(\n                \"vlanDetails.vlan.secondary_rack\", updateManagementRacks);\n\n            $scope.$watchCollection(\n                \"vlanDetails.subnets\", updateRelatedSubnets);\n            $scope.$watchCollection(\n                \"vlanDetails.spaces\", updateRelatedSubnets);\n            $scope.$watchCollection(\n                \"vlanDetails.controllers\", updateRelatedControllers);\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zone Details Controller\n */\n\nangular.module('MAAS').controller('ZoneDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location', 'MachinesManager',\n    'DevicesManager', 'ZonesManager', 'UsersManager',\n    'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $location, MachinesManager,\n        DevicesManager, ZonesManager, UsersManager, ManagerHelperService,\n        ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"zones\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.zone = null;\n        $scope.zoneManager = ZonesManager;\n        $scope.editSummary = false;\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.zone.name;\n        }\n\n        // Called when the zone has been loaded.\n        function zoneLoaded(zone) {\n            $scope.zone = zone;\n            $scope.loaded = true;\n            updateTitle();\n        }\n\n\n        // Called when the \"edit\" button is cliked in the zone summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the zone summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default zone.\n        $scope.isDefaultZone = function() {\n            if(angular.isObject($scope.zone)) {\n                return $scope.zone.id === 1;\n            }\n            return false;\n        };\n\n        // Called to check if the zone can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.zone)) {\n                return $scope.zone.id !== 0;\n            }\n            return false;\n        };\n\n        // Called when the delete zone button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete zone button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete space button is pressed.\n        $scope.deleteConfirmButton = function() {\n            ZonesManager.deleteItem($scope.zone).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/zones\");\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this zone set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeZone = ZonesManager.getActiveItem();\n            var requestedZone = parseInt($routeParams.zone_id, 10);\n            if(isNaN(requestedZone)) {\n                ErrorService.raiseError(\"Invalid zone identifier.\");\n            } else if(angular.isObject(activeZone) &&\n                activeZone.id === requestedZone) {\n                zoneLoaded(activeZone);\n            } else {\n                ZonesManager.setActiveItem(\n                    requestedZone).then(function(zone) {\n                        zoneLoaded(zone);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zones List Controller\n */\n\nangular.module('MAAS').controller('ZonesListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', 'MachinesManager',\n    'DevicesManager', 'ControllersManager', 'ZonesManager', 'ServicesManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function($scope, $rootScope, $routeParams, $filter, MachinesManager,\n        DevicesManager, ControllersManager, ZonesManager, ServicesManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Zones\";\n        $rootScope.page = \"zones\";\n\n        // Set initial values.\n        $scope.zoneManager = ZonesManager;\n        $scope.zones = ZonesManager.getItems();\n        $scope.currentpage = \"zones\";\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.loading = true;\n        $scope.action = {\n          open: false,\n          obj: {}\n        };\n\n        // Open add zone view.\n        $scope.addZone = function() {\n          $scope.action.open = true;\n        };\n\n        // Saving has completed.\n        $scope.closeZone = function() {\n          $scope.action.open = false;\n          $scope.action.obj = {};\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, UsersManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n        }\n    ]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Accordion directive.\n *\n * Provides an accordion effect to an element with maas-accordion class and\n * all child elements with maas-accordion-tab. Only one accordion tab is open\n * at a time, selecting another accordion will set \"active\" on that\n * accordion tab.\n */\n\n\nangular.module('MAAS').directive('maasAccordion', function() {\n    return {\n        restrict: \"C\",\n        link: function(scope, element, attrs) {\n\n            // Called when accordion tabs are clicked. Removes active on\n            // all other tabs except to the tab that was clicked.\n            var clickHandler = function(evt) {\n                var tab = evt.data.tab;\n                angular.element(tab).toggleClass(\"is-selected\");\n            };\n\n            // Listen for the click event on all tabs in the accordion.\n            var tabs = element.find(\".maas-accordion-tab\");\n            angular.forEach(tabs, function(tab) {\n                tab = angular.element(tab);\n                tab.on(\"click\", {\n                    tab: tab\n                }, clickHandler);\n            });\n\n            // Remove the handlers when the scope is destroyed.\n            scope.$on(\"$destroy\", function() {\n                angular.forEach(tabs, function(tab) {\n                    angular.element(tab).off(\"click\", clickHandler);\n                });\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Boot images directive.\n*/\n\nangular.module('MAAS').directive('maasBootImagesStatus', [\n    'BootResourcesManager',\n    function(BootResourcesManager) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            template: [\n                '<p class=\"page-header__status\" ',\n                    'data-ng-if=\"data.region_import_running\">',\n                    '<span class=\"u-text--loading\">',\n                        '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                        'Step 1/2: Region controller importing',\n                    '</span>',\n                '</p>',\n                '<p class=\"page-header__status\" ',\n                    'data-ng-if=\"!data.region_import_running && ',\n                    'data.rack_import_running\">',\n                    '<span class=\"u-text--loading\">',\n                        '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                        'Step 2/2: Rack controller(s) importing',\n                    '</span>',\n                '</p>'\n            ].join(''),\n            controller: function($scope, $rootScope, $element, $document) {\n                // This controller doesn't start the polling. The\n                // `maasBootImages` controller should be used on the page to\n                // start the polling. This just presents a nice status spinner\n                // when the polling is enabled.\n                $scope.data = BootResourcesManager.getData();\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasBootImages', [\n    '$filter', 'BootResourcesManager', 'UsersManager', 'ManagerHelperService',\n    function($filter, BootResourcesManager,\n        UsersManager, ManagerHelperService) {\n        return {\n            restrict: \"E\",\n            scope: {\n                design: \"=?\"\n            },\n            templateUrl: (\n                'static/partials/boot-images.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.saving = false;\n                $scope.stopping = false;\n                $scope.design = $scope.design || 'page';\n                $scope.bootResources = BootResourcesManager.getData();\n                $scope.ubuntuImages = [];\n                $scope.source = {\n                    isNew: false,\n                    tooMany: false,\n                    showingAdvanced: false,\n                    connecting: false,\n                    errorMessage: \"\",\n                    source_type: 'maas.io',\n                    url: '',\n                    keyring_filename: '',\n                    keyring_data: '',\n                    releases: [],\n                    arches: [],\n                    selections: {\n                        changed: false,\n                        releases: [],\n                        arches: []\n                    }\n                };\n                $scope.ubuntuCoreImages = [];\n                $scope.ubuntu_core = {\n                    changed: false,\n                    images: []\n                };\n                $scope.otherImages = [];\n                $scope.other = {\n                    changed: false,\n                    images: []\n                };\n                $scope.generatedImages = [];\n                $scope.customImages = [];\n                $scope.ubuntuDeleteId = null;\n                $scope.removingImage = null;\n\n                // Return true if the authenticated user is super user.\n                $scope.isSuperUser = function() {\n                    return UsersManager.isSuperUser();\n                };\n\n                // Return the overall title icon.\n                $scope.getTitleIcon = function() {\n                    if($scope.bootResources.resources.length === 0) {\n                        return 'p-icon--success-muted';\n                    } else {\n                        return 'p-icon--success';\n                    }\n                };\n\n                // Return true if the mirror path section should be shown.\n                $scope.showMirrorPath = function() {\n                    if($scope.source.source_type === 'custom') {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                };\n\n                // Return true if the advanced options are shown.\n                $scope.isShowingAdvancedOptions = function() {\n                    return $scope.source.showingAdvanced;\n                };\n\n                // Toggle showing the advanced options.\n                $scope.toggleAdvancedOptions = function() {\n                    $scope.source.showingAdvanced = (\n                        !$scope.source.showingAdvanced);\n                };\n\n                // Return true if both keyring options are set.\n                $scope.bothKeyringOptionsSet = function() {\n                    return (\n                        $scope.source.keyring_filename.length > 0 &&\n                        $scope.source.keyring_data.length > 0);\n                };\n\n                // Return true when the connect button for the mirror path\n                // should be shown.\n                $scope.showConnectButton = function() {\n                    return $scope.source.isNew;\n                };\n\n                // Called when the source radio chanaged.\n                $scope.sourceChanged = function() {\n                    var currentSources = $scope.bootResources.ubuntu.sources;\n                    if(currentSources.length === 0) {\n                        $scope.source.isNew = true;\n                    } else {\n                        var prevNew = $scope.source.isNew;\n                        $scope.source.isNew = (\n                            $scope.source.source_type !==\n                            currentSources[0].source_type);\n                        if($scope.source.source_type === 'custom') {\n                            $scope.source.isNew = $scope.source.isNew || (\n                                $scope.source.url !==\n                                currentSources[0].url\n                            );\n                        }\n                        if(prevNew && !$scope.source.isNew) {\n                            // No longer a new source set url and keyring to\n                            // original.\n                            $scope.source.url = currentSources[0].url;\n                            $scope.source.keyring_filename = (\n                                currentSources[0].keyring_filename);\n                            $scope.source.keyring_data = (\n                                currentSources[0].keyring_data);\n                        }\n                        $scope.source.releases = [];\n                        $scope.source.arches = [];\n                        $scope.source.selections = {\n                            changed: false,\n                            releases: [],\n                            arches: []\n                        };\n                    }\n                    $scope.updateSource();\n                    $scope.regenerateUbuntuImages();\n\n                    // When the source is new and its maas.io automatically\n                    // fetch the source information.\n                    if($scope.source.isNew &&\n                        $scope.source.source_type === 'maas.io') {\n                        $scope.connect();\n                    }\n                };\n\n                // Return true when the connect button should be disabled.\n                $scope.isConnectButtonDisabled = function() {\n                    if($scope.source.source_type === 'maas.io') {\n                        return false;\n                    } else {\n                        return ($scope.bothKeyringOptionsSet() ||\n                            $scope.source.url.length === 0 ||\n                            $scope.source.connecting);\n                    }\n                };\n\n                // Return the source parameters.\n                $scope.getSourceParams = function() {\n                    if($scope.source.source_type === 'maas.io') {\n                        return {\n                            source_type: 'maas.io'\n                        };\n                    } else {\n                        return {\n                            source_type: $scope.source.source_type,\n                            url: $scope.source.url,\n                            keyring_filename: $scope.source.keyring_filename,\n                            keyring_data: $scope.source.keyring_data\n                        };\n                    }\n                };\n\n                // Select the default images that should be selected. Current\n                // defaults are '16.04 LTS' and 'amd64'.\n                $scope.selectDefaults = function() {\n                    angular.forEach($scope.source.releases, function(release) {\n                        if(release.name === \"xenial\") {\n                            $scope.source.selections.releases.push(release);\n                        }\n                    });\n                    angular.forEach($scope.source.arches, function(arch) {\n                        if(arch.name === \"amd64\") {\n                            $scope.source.selections.arches.push(arch);\n                        }\n                    });\n                };\n\n                // Connected to the simplestreams endpoint. This only gets the\n                // information from the endpoint it does not save it into the\n                // database.\n                $scope.connect = function() {\n                    if($scope.isConnectButtonDisabled()) {\n                        return;\n                    }\n\n                    var source = $scope.getSourceParams();\n                    $scope.source.connecting = true;\n                    $scope.source.releases = [];\n                    $scope.source.arches = [];\n                    $scope.source.selections.changed = true;\n                    $scope.source.selections.releases = [];\n                    $scope.source.selections.arches = [];\n                    $scope.regenerateUbuntuImages();\n                    BootResourcesManager.fetch(source).then(function(data) {\n                        $scope.source.connecting = false;\n                        data = angular.fromJson(data);\n                        $scope.source.releases = data.releases;\n                        $scope.source.arches = data.arches;\n                        $scope.selectDefaults();\n                        $scope.regenerateUbuntuImages();\n                    }, function(error) {\n                        $scope.source.connecting = false;\n                        $scope.source.errorMessage = error;\n                    });\n                };\n\n                // Return true if the connect block should be shown.\n                $scope.showConnectBlock = function() {\n                    return $scope.source.tooMany || (\n                        $scope.source.isNew && !$scope.showSelections());\n                };\n\n                // Return true if the release and architecture selection\n                // should be shown.\n                $scope.showSelections = function() {\n                    return (\n                        $scope.source.releases.length > 0 &&\n                        $scope.source.arches.length > 0);\n                };\n\n                // Return the Ubuntu LTS releases.\n                $scope.getUbuntuLTSReleases = function() {\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    if($scope.source.isNew) {\n                        releases = $scope.source.releases;\n                    }\n                    var filtered = [];\n                    angular.forEach(releases, function(release) {\n                        if(!release.deleted &&\n                            release.title.indexOf('LTS') !== -1) {\n                            filtered.push(release);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return the Ubuntu non-LTS releases.\n                $scope.getUbuntuNonLTSReleases = function() {\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    if($scope.source.isNew) {\n                        releases = $scope.source.releases;\n                    }\n                    var filtered = [];\n                    angular.forEach(releases, function(release) {\n                        if(!release.deleted &&\n                            release.title.indexOf('LTS') === -1) {\n                            filtered.push(release);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return the available architectures.\n                $scope.getArchitectures = function() {\n                    var arches = $scope.bootResources.ubuntu.arches;\n                    if($scope.source.isNew) {\n                        arches = $scope.source.arches;\n                    }\n                    var filtered = [];\n                    angular.forEach(arches, function(arch) {\n                        if(!arch.deleted) {\n                            filtered.push(arch);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return true if the source has this selected.\n                $scope.isSelected = function(type, obj) {\n                    return $scope.source.selections[type].indexOf(obj) >= 0;\n                };\n\n                // Toggle the selection of the release or the architecture.\n                $scope.toggleSelection = function(type, obj) {\n                    var idx = $scope.source.selections[type].indexOf(obj);\n                    if(idx === -1) {\n                        $scope.source.selections[type].push(obj);\n                    } else {\n                        $scope.source.selections[type].splice(idx, 1);\n                    }\n                    $scope.source.selections.changed = true;\n                    $scope.regenerateUbuntuImages();\n                };\n\n                // Return true if the images table should be shown.\n                $scope.showImagesTable = function() {\n                    if($scope.ubuntuImages.length > 0) {\n                        return true;\n                    } else {\n                        // Show the images table source has\n                        // releases and architectures.\n                        return (\n                            $scope.source.arches.length > 0 &&\n                            $scope.source.releases.length > 0);\n                    }\n                };\n\n                // Regenerates the Ubuntu images list for the directive.\n                $scope.regenerateUbuntuImages = function() {\n                    var getResource = function() { return null; };\n                    var resources = $scope.bootResources.resources.filter(\n                        function(resource) {\n                            var name_split = resource.name.split('/');\n                            var resource_os = name_split[0];\n                            return (\n                                resource.rtype === 0 &&\n                                resource_os === 'ubuntu');\n                        });\n                    if(!$scope.source.isNew) {\n                        getResource = function(release, arch) {\n                            var i;\n                            for(i = 0; i < resources.length; i++) {\n                                // Only care about Ubuntu images.\n                                var resource = (resources[i]);\n                                var name_split = resource.name.split('/');\n                                var resource_release = name_split[1];\n                                if(resource_release === release &&\n                                    resource.arch === arch) {\n                                    resources.splice(i, 1);\n                                    return resource;\n                                }\n                            }\n                            return null;\n                        };\n                    }\n\n                    // Create the images based on the selections.\n                    $scope.ubuntuImages.length = 0;\n                    angular.forEach($scope.source.selections.releases,\n                        function(release) {\n                            angular.forEach($scope.source.selections.arches,\n                                function(arch) {\n                                    var image = {\n                                        icon: 'p-icon--status-queued',\n                                        title: release.title,\n                                        arch: arch.title,\n                                        size: '-',\n                                        status: 'Selected for download',\n                                        beingDeleted: false,\n                                        name: release.name\n                                    };\n                                    var resource = getResource(\n                                        release.name, arch.name);\n                                    if(angular.isObject(resource)) {\n                                        image.resourceId = resource.id;\n                                        image.icon = (\n                                            'p-icon--status-' + resource.icon);\n                                        image.size = resource.size;\n                                        image.status = resource.status;\n                                        if(resource.downloading) {\n                                            image.icon += ' u-animation--pulse';\n                                        }\n                                    }\n                                    $scope.ubuntuImages.push(image);\n                                });\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    if(!$scope.source.isNew) {\n                        angular.forEach(resources, function(resource) {\n                            var name_split = resource.name.split('/');\n                            var image = {\n                                icon: 'p-icon--status-failed',\n                                title: resource.title,\n                                arch: resource.arch,\n                                size: resource.size,\n                                status: 'Will be deleted',\n                                beingDeleted: true,\n                                name: name_split[1]\n                            };\n                            $scope.ubuntuImages.push(image);\n                        });\n                    }\n                };\n\n                // Regenerates the Ubuntu Core images list for the directive.\n                $scope.regenerateUbuntuCoreImages = function() {\n                    var isUbuntuCore = function(resource) {\n                        var name_split = resource.name.split('/');\n                        var resource_os = name_split[0];\n                        return (\n                            resource.rtype === 0 &&\n                            resource_os === 'ubuntu-core');\n                    };\n                    var resources = (\n                        $scope.bootResources.resources.filter(isUbuntuCore));\n                    var getResource = function(release, arch) {\n                        var i;\n                        for(i = 0; i < resources.length; i++) {\n                            // Only care about other images. Removing custom,\n                            // bootloaders, and Ubuntu images.\n                            var resource = (resources[i]);\n                            var name_split = resource.name.split('/');\n                            var resource_release = name_split[1];\n                            if(resource_release === release &&\n                                resource.arch === arch) {\n                                resources.splice(i, 1);\n                                return resource;\n                            }\n                        }\n                        return null;\n                    };\n\n                    // Create the images based on the selections.\n                    $scope.ubuntuCoreImages.length = 0;\n                    angular.forEach($scope.ubuntu_core.images,\n                        function(ubuntuCoreImage) {\n                            if(ubuntuCoreImage.checked) {\n                                var name_split = ubuntuCoreImage.name.split(\n                                    '/');\n                                var image = {\n                                    icon: 'p-icon--status-queued',\n                                    title: ubuntuCoreImage.title,\n                                    arch: name_split[1],\n                                    size: '-',\n                                    status: 'Selected for download',\n                                    beingDeleted: false\n                                };\n                                var resource = getResource(\n                                    name_split[3], name_split[1]);\n                                if(angular.isObject(resource)) {\n                                    image.icon = (\n                                        'p-icon--status-' + resource.icon);\n                                    image.size = resource.size;\n                                    image.status = resource.status;\n                                    if(resource.downloading) {\n                                        image.icon += ' u-animation--pulse';\n                                    }\n                                }\n                                $scope.ubuntuCoreImages.push(image);\n                            }\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    angular.forEach(resources, function(resource) {\n                        var image = {\n                            icon: 'p-icon--status-failed',\n                            title: resource.title,\n                            arch: resource.arch,\n                            size: resource.size,\n                            status: 'Will be deleted',\n                            beingDeleted: true\n                        };\n                        $scope.ubuntuCoreImages.push(image);\n                    });\n                };\n\n                // Regenerates the other images list for the directive.\n                $scope.regenerateOtherImages = function() {\n                    var isOther = function(resource) {\n                        var name_split = resource.name.split('/');\n                        var resource_os = name_split[0];\n                        return (\n                            resource.rtype === 0 &&\n                            resource_os !== 'ubuntu' &&\n                            resource_os !== 'ubuntu-core' &&\n                            resource_os !== 'custom');\n                    };\n                    var resources = (\n                        $scope.bootResources.resources.filter(isOther));\n                    var getResource = function(release, arch) {\n                        var i;\n                        for(i = 0; i < resources.length; i++) {\n                            // Only care about other images. Removing custom,\n                            // bootloaders, and Ubuntu images.\n                            var resource = (resources[i]);\n                            var name_split = resource.name.split('/');\n                            var resource_release = name_split[1];\n                            if(resource_release === release &&\n                                resource.arch === arch) {\n                                resources.splice(i, 1);\n                                return resource;\n                            }\n                        }\n                        return null;\n                    };\n\n                    // Create the images based on the selections.\n                    $scope.otherImages.length = 0;\n                    angular.forEach($scope.other.images,\n                        function(otherImage) {\n                            if(otherImage.checked) {\n                                var name_split = otherImage.name.split('/');\n                                var image = {\n                                    icon: 'p-icon--status-queued',\n                                    title: otherImage.title,\n                                    arch: name_split[1],\n                                    size: '-',\n                                    status: 'Selected for download',\n                                    beingDeleted: false\n                                };\n                                var resource = getResource(\n                                    name_split[3], name_split[1]);\n                                if(angular.isObject(resource)) {\n                                    image.icon = (\n                                        'p-icon--status-' + resource.icon);\n                                    image.size = resource.size;\n                                    image.status = resource.status;\n                                    if(resource.downloading) {\n                                        image.icon += ' u-animation--pulse';\n                                    }\n                                }\n                                $scope.otherImages.push(image);\n                            }\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    angular.forEach(resources, function(resource) {\n                        var image = {\n                            icon: 'p-icon--status-failed',\n                            title: resource.title,\n                            arch: resource.arch,\n                            size: resource.size,\n                            status: 'Will be deleted',\n                            beingDeleted: true\n                        };\n                        $scope.otherImages.push(image);\n                    });\n                };\n\n                // Helper for basic image generation.\n                $scope._regenerateImages = function(rtype, images) {\n                    // Create the generated images list.\n                    images.length = 0;\n                    angular.forEach($scope.bootResources.resources,\n                        function(resource) {\n                            if(resource.rtype === rtype) {\n                                var image = {\n                                    icon: 'p-icon--status-' + resource.icon,\n                                    title: resource.title,\n                                    arch: resource.arch,\n                                    image_id: resource.id,\n                                    size: resource.size,\n                                    status: resource.status\n                                };\n                                if(resource.downloading) {\n                                    image.icon += ' u-animation--pulse';\n                                }\n                                images.push(image);\n                            }\n                        });\n                };\n\n                // Regenerates the generated images list for the directive.\n                $scope.regenerateGeneratedImages = function() {\n                    $scope._regenerateImages(1, $scope.generatedImages);\n                };\n\n                // Regenerates the custom images list for the directive.\n                $scope.regenerateCustomImages = function() {\n                    $scope._regenerateImages(2, $scope.customImages);\n                };\n\n                // Returns true if at least one LTS is selected.\n                $scope.ltsIsSelected = function() {\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        // Must have LTS in the title and not being deleted.\n                        if(!$scope.ubuntuImages[i].beingDeleted &&\n                            $scope.ubuntuImages[i].title.indexOf('LTS') >= 0) {\n                            // Must be greater than Ubuntu series 14.\n                            var series = parseInt(\n                                $scope.ubuntuImages[i].title.split('.')[0], 10);\n                            if(series >= 14) {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                };\n\n                // Returns true if the commission series is selected\n                $scope.commissioningSeriesSelected = function() {\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if(!$scope.ubuntuImages[i].beingDeleted &&\n                           $scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n\n                // Return if we are asking about deleting this image.\n                $scope.isShowingDeleteConfirm = function(image) {\n                    return image === $scope.removingImage;\n                };\n\n                // Mark the image for deletion.\n                $scope.quickRemove = function(image) {\n                    $scope.removingImage = image;\n                };\n\n                // Cancel image deletion.\n                $scope.cancelRemove = function() {\n                    $scope.removingImage = null;\n                };\n\n                // Mark the image for deletion.\n                $scope.confirmRemove = function(image) {\n                    if(image === $scope.removingImage) {\n                        BootResourcesManager.deleteImage(\n                            {id: image.image_id});\n                    }\n                    $scope.cancelRemove();\n                };\n\n                // Return true if the stop import button should be shown.\n                $scope.showStopImportButton = function() {\n                    return $scope.bootResources.region_import_running;\n                };\n\n                // Return true if should show save selection button, this\n                // doesn't mean it can actually be clicked.\n                $scope.showSaveSelection = function() {\n                    return $scope.showImagesTable();\n                };\n\n                // Return true if can save the current selection.\n                $scope.canSaveSelection = function() {\n                    var commissioning_series_being_deleted = false;\n                    var commissioning_series_arches = 0;\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if($scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series) {\n                            commissioning_series_arches++;\n                        }\n                    }\n                    // Only prevent the current commissioning series from\n                    // being deleted if it isn't the commissioning series isn't\n                    // available on another architecture.. If the current\n                    // commissioning series isn't currently selected another\n                    // LTS may be choosen, downloaded, and configured as the\n                    // commissioning series.\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if($scope.ubuntuImages[i].beingDeleted &&\n                           $scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series &&\n                           commissioning_series_arches === 1) {\n                            commissioning_series_being_deleted = true;\n                            break;\n                        }\n                    }\n                    return (\n                        !commissioning_series_being_deleted &&\n                        !$scope.saving &&\n                        !$scope.stopping &&\n                        $scope.ltsIsSelected());\n                };\n\n                // Return the text for the save selection button.\n                $scope.getSaveSelectionText = function() {\n                    if($scope.saving) {\n                        return \"Saving...\";\n                    } else {\n                        return \"Update selection\";\n                    }\n                };\n\n                // Return true if can stop current import.\n                $scope.canStopImport = function() {\n                    return !$scope.saving && !$scope.stopping;\n                };\n\n                // Return the text for the stop import button.\n                $scope.getStopImportText = function() {\n                    if($scope.stopping) {\n                        return \"Stopping...\";\n                    } else {\n                        return \"Stop import\";\n                    }\n                };\n\n                // Called to stop the import.\n                $scope.stopImport = function() {\n                    if(!$scope.canStopImport()) {\n                        return;\n                    }\n\n                    $scope.stopping = true;\n                    BootResourcesManager.stopImport().then(function() {\n                        $scope.stopping = false;\n                    });\n                };\n\n                // Save the selections into boot selections.\n                $scope.saveSelection = function() {\n                    if(!$scope.canSaveSelection()) {\n                        return;\n                    }\n\n                    var params = $scope.getSourceParams();\n                    params.releases = (\n                        $scope.source.selections.releases.map(function(obj) {\n                            return obj.name;\n                        }));\n                    params.arches = (\n                        $scope.source.selections.arches.map(function(obj) {\n                            return obj.name;\n                        }));\n                    $scope.saving = true;\n                    BootResourcesManager.saveUbuntu(params).then(function() {\n                        $scope.saving = false;\n                        $scope.source.isNew = false;\n                        $scope.source.selections.changed = false;\n                        $scope.updateSource();\n                    });\n                };\n\n                // Re-create an array with the new objects using the old\n                // selected array.\n                $scope.getNewSelections = function(newObjs, oldSelections) {\n                    var newSelections = [];\n                    angular.forEach(newObjs, function(obj) {\n                        angular.forEach(oldSelections, function(selection) {\n                            if(obj.name === selection.name) {\n                                newSelections.push(obj);\n                            }\n                        });\n                    });\n                    return newSelections;\n                };\n\n                // Update the source information.\n                $scope.updateSource = function() {\n                    // Do not update if the source is new.\n                    if($scope.source.isNew) {\n                        return;\n                    }\n\n                    var source_len = $scope.bootResources.ubuntu.sources.length;\n                    if(source_len === 0) {\n                        $scope.source.isNew = true;\n                        $scope.source.source_type = 'custom';\n                        $scope.source.errorMessage = (\n                            \"Currently no source exists.\");\n                    } else if(source_len === 1) {\n                        var source = $scope.bootResources.ubuntu.sources[0];\n                        $scope.source.source_type = source.source_type;\n                        if(source.source_type === \"maas.io\") {\n                            $scope.source.url = \"\";\n                            $scope.source.keyring_filename = \"\";\n                            $scope.source.keyring_data = \"\";\n                        } else {\n                            $scope.source.url = source.url;\n                            $scope.source.keyring_filename = (\n                                source.keyring_filename);\n                            $scope.source.keyring_data = source.keyring_data;\n                        }\n                        $scope.source.releases = (\n                            $scope.bootResources.ubuntu.releases);\n                        $scope.source.arches = (\n                            $scope.bootResources.ubuntu.arches);\n                        if(!$scope.source.selections.changed) {\n                            // User didn't make a change update to the\n                            // current selections server side.\n                            $scope.source.selections.releases = (\n                                $scope.source.releases.filter(function(obj) {\n                                    return obj.checked;\n                                }));\n                            $scope.source.selections.arches = (\n                                $scope.source.arches.filter(function(obj) {\n                                return obj.checked;\n                            }));\n                        } else {\n                            // Update the objects to be the new objects, with\n                            // the same selections.\n                            $scope.source.selections.releases = (\n                                $scope.getNewSelections(\n                                    $scope.source.releases,\n                                    $scope.source.selections.releases));\n                            $scope.source.selections.arches = (\n                                $scope.getNewSelections(\n                                    $scope.source.arches,\n                                    $scope.source.selections.arches));\n                        }\n                        $scope.regenerateUbuntuImages();\n                    } else {\n                        // Having more than one source prevents modification\n                        // of the sources.\n                        $scope.source.tooMany = true;\n                        $scope.source.releases = (\n                            $scope.bootResources.ubuntu.releases);\n                        $scope.source.arches = (\n                            $scope.bootResources.ubuntu.arches);\n                        $scope.source.selections.releases = (\n                            $scope.source.releases.filter(function(obj) {\n                                return obj.checked;\n                            }));\n                        $scope.source.selections.arches = (\n                            $scope.source.arches.filter(function(obj) {\n                            return obj.checked;\n                        }));\n                        $scope.source.errorMessage = (\n                            \"More than one image source exists. UI does not \" +\n                            \"support modification of sources when more than \" +\n                            \"one has been defined. Used the API to adjust \" +\n                            \"your sources.\");\n                        $scope.regenerateUbuntuImages();\n                    }\n                };\n\n                // Toggle the selection of Ubuntu Core images.\n                $scope.toggleUbuntuCoreSelection = function(image) {\n                    $scope.ubuntu_core.changed = true;\n                    image.checked = !image.checked;\n                    $scope.regenerateUbuntuCoreImages();\n                };\n\n                // Save the Ubuntu Core image selections into boot selections.\n                $scope.saveUbuntuCoreSelection = function() {\n                    var params = {\n                        images: $scope.ubuntu_core.images.filter(function(\n                                image) {\n                            return image.checked;\n                        }).map(function(image) {\n                            return image.name;\n                        })\n                    };\n                    $scope.saving = true;\n                    BootResourcesManager.saveUbuntuCore(params).then(\n                            function() {\n                        $scope.saving = false;\n                    });\n                };\n\n                // Toggle the selection of other images.\n                $scope.toggleOtherSelection = function(image) {\n                    $scope.other.changed = true;\n                    image.checked = !image.checked;\n                    $scope.regenerateOtherImages();\n                };\n\n                // Save the other image selections into boot selections.\n                $scope.saveOtherSelection = function() {\n                    var params = {\n                        images: $scope.other.images.filter(function(image) {\n                            return image.checked;\n                        }).map(function(image) {\n                            return image.name;\n                        })\n                    };\n                    $scope.saving = true;\n                    BootResourcesManager.saveOther(params).then(function() {\n                        $scope.saving = false;\n                    });\n                };\n\n                // Return True if the Ubuntu image can be removed.\n                $scope.canBeRemoved = function(image) {\n                    // Image must have a resourceId to be able to be removed.\n                    if(!angular.isNumber(image.resourceId)) {\n                        return false;\n                    }\n\n                    // If the release or architecture is set to deleted\n                    // then this image can be deleted.\n                    var i;\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    var arches = $scope.bootResources.ubuntu.arches;\n                    for(i = 0; i < releases.length; i++) {\n                        var release = releases[i];\n                        if(release.deleted && image.title === release.title) {\n                            return true;\n                        }\n                    }\n                    for(i = 0; i < arches.length; i++) {\n                        var arch = arches[i];\n                        if(arch.deleted && image.arch === arch.name) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n\n                // Deletes the give image.\n                $scope.deleteImage = function(image) {\n                    if(angular.isObject(image)) {\n                        $scope.ubuntuDeleteId = image.resourceId;\n                    } else {\n                        $scope.ubuntuDeleteId = null;\n                    }\n                };\n\n                // Deletes the give image.\n                $scope.confirmDeleteImage = function() {\n                    // Delete the image by its resourceId.\n                    BootResourcesManager.deleteImage(\n                        {id: $scope.ubuntuDeleteId});\n                    $scope.ubuntuDeleteId = null;\n                };\n\n                // Start polling now that the directive is viewable and ensure\n                // the UserManager is loaded.\n                var ready = 2;\n                BootResourcesManager.startPolling().then(function() {\n                    ready -= 1;\n                    if(ready === 0) {\n                        $scope.loading = false;\n                    }\n                });\n                ManagerHelperService.loadManager(\n                    $scope, UsersManager).then(function() {\n                    ready -= 1;\n                    if(ready === 0) {\n                        $scope.loading = false;\n                    }\n                });\n\n                // Update the source information with the ubuntu source\n                // information changes.\n                $scope.$watch(\"bootResources.ubuntu\", function() {\n                    if(!angular.isObject($scope.bootResources.ubuntu)) {\n                        return;\n                    }\n                    $scope.updateSource();\n                });\n\n                // Regenerate the images array when the resources change.\n                $scope.$watch(\"bootResources.resources\", function() {\n                    if(!angular.isArray($scope.bootResources.resources)) {\n                        return;\n                    }\n                    $scope.regenerateUbuntuImages();\n                    $scope.regenerateUbuntuCoreImages();\n                    $scope.regenerateOtherImages();\n                    $scope.regenerateGeneratedImages();\n                    $scope.regenerateCustomImages();\n                });\n\n                $scope.$watch(\"bootResources.ubuntu_core_images\", function() {\n                    var images = $scope.bootResources.ubuntu_core_images;\n                    if(!angular.isArray(images)) {\n                        return;\n                    }\n                    if(!$scope.ubuntu_core.changed) {\n                        $scope.ubuntu_core.images = images;\n                    }\n                    $scope.regenerateUbuntuCoreImages();\n                });\n\n                $scope.$watch(\"bootResources.other_images\", function() {\n                    if(!angular.isArray($scope.bootResources.other_images)) {\n                        return;\n                    }\n                    if(!$scope.other.changed) {\n                        $scope.other.images = $scope.bootResources.other_images;\n                    }\n                    $scope.regenerateOtherImages();\n                });\n\n                // Stop polling when the directive is destroyed.\n                $scope.$on('$destroy', function() {\n                    BootResourcesManager.stopPolling();\n                });\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Call to action directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the cta.html into the template cache.\n    $templateCache.put('directive/templates/cta.html', [\n      '<div class=\"p-contextual-menu\">',\n        '<button ',\n          'class=\"p-button p-contextual-menu__toggle\" ',\n          'aria-controls=\"#cta-menu\" ',\n          'aria-expanded=\"false\" ',\n          'aria-haspopup=\"true\" ',\n          'data-ng-click=\"shown=!shown\"',\n        '>',\n          '{$ getTitle() $}',\n          '<i class=\"p-icon--chevron on-right\"></i>',\n        '</button>',\n        '<div class=\"p-contextual-menu__dropdown\" ',\n          'id=\"cta-menu\" ',\n          'aria-hidden=\"false\" ',\n          'aria-label=\"submenu\"',\n          'data-ng-show=\"shown\"',\n        '>',\n          '<button ',\n            'class=\"',\n              'p-button u-no-margin--left p-contextual-menu__link',\n            '\" ',\n            'data-ng-repeat=\"select in maasCta\" ',\n            'data-ng-click=\"selectItem(select)\">',\n              '{$ getOptionTitle(select) $}',\n          '</button>',\n        '</div>',\n      '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasCta', function() {\n    return {\n        restrict: \"A\",\n        replace: true,\n        require: \"ngModel\",\n        scope: {\n            maasCta: '=',\n            ngModel: '='\n        },\n        templateUrl: 'directive/templates/cta.html',\n        link : function(scope, element, attrs, ngModelCtrl) {\n            // Use the link function to grab the ngModel controller.\n\n            // Title of the button when not active.\n            var defaultTitle = \"Take action\";\n            if(angular.isString(attrs.defaultTitle) &&\n                attrs.defaultTitle !== \"\") {\n                defaultTitle = attrs.defaultTitle;\n            }\n\n            // When an item is selected in the list set the title, hide the\n            // dropdown, and set the value to the given model.\n            scope.selectItem = function(select) {\n                scope.shown = false;\n                ngModelCtrl.$setViewValue(select);\n            };\n\n            // Return the title of the dropdown button.\n            scope.getTitle = function() {\n                if(angular.isObject(ngModelCtrl.$modelValue)) {\n                    option = ngModelCtrl.$modelValue;\n                    scope.secondary = true;\n                    // Some designs have the requirement that the title of\n                    // the menu option change if it is selected.\n                    if(angular.isString(option.selectedTitle)) {\n                        return option.selectedTitle;\n                    }\n                    return option.title;\n                } else {\n                    scope.secondary = false;\n                    return defaultTitle;\n                }\n            };\n\n            // Called to get the title for each option. (Sometimes the title\n            // of an option is different when it is selected.)\n            scope.getOptionTitle = function(option) {\n                if(!scope.secondary) {\n                    return option.title;\n                } else {\n                    if(angular.isString(option.selectedTitle)) {\n                        return option.selectedTitle;\n                    } else {\n                        return option.title;\n                    }\n                }\n            };\n\n            // When the model changes in the above selectItem function this\n            // function will be called causing the ngChange directive to be\n            // fired.\n            ngModelCtrl.$viewChangeListeners.push(function() {\n                scope.$eval(attrs.ngChange);\n            });\n        },\n        controller: function($scope, $rootScope, $element, $document) {\n            // Default dropdown is hidden.\n            $scope.shown = false;\n            $scope.secondary = false;\n\n            // Don't propagate the element click. This stops the click event\n            // from firing on the body element.\n            $element.bind('click', function (evt) {\n                evt.stopPropagation();\n            });\n\n            // If a click makes it to the body element then hide the dropdown.\n            $document.find('body').bind('click', function () {\n                // Use $apply because this function will be called outside\n                // of the digest cycle.\n                $rootScope.$apply($scope.shown = false);\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller status icon. Used in the controllers listing on the nodes page.\n */\n\nangular.module('MAAS').directive('maasCardLoader', ['$compile',\n  function($compile) {\n      return {\n          restrict: \"A\",\n          link: function(scope, element, attrs) {\n            var templateUrl = (\n                'static/partials/cards/' + attrs.maasCardLoader + (\n                  '.html?v=' + MAAS_config.files_version));\n            var include = (\n              '<ng-include src=\"\\'' + templateUrl + '\\'\"></ng-include>');\n            element.html(include);\n            $compile(element.contents())(scope);\n          }\n      };\n  }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Accordion directive.\n *\n * Provides an accordion effect to an element with maas-accordion class and\n * all child elements with maas-accordion-tab. Only one accordion tab is open\n * at a time, selecting another accordion will set \"active\" on that\n * accordion tab.\n */\n\n\n angular.module('MAAS').directive('maasCodeLines', function () {\n     return {\n         restrict: \"A\",\n         scope: {\n             maasCodeLines: '&'\n         },\n         link: function(scope, element, attributes) {\n\n             function insertContent() {\n\n                 // Empty the element contents and include again, this asures\n                 // its the most up-to-date content\n                 element.empty();\n                 element.text(scope.maasCodeLines);\n\n                 // Count the line contents\n                 var lines = element.html().split('\\n'),\n                     newLine = '',\n                     insert = \"<code>\";\n\n                 // Each line is to be wrapped by a span which is style & given\n                 // its appropriate line number\n                 $.each(lines, function() {\n                   insert += newLine + '<span class=\"code-line\">' +\n                   this + '</span>';\n                   newLine = '\\n';\n                 });\n                 insert += \"</code>\";\n\n                 // Re-insert the contents\n                 element.html(insert);\n             }\n\n             // Watch the contents of the element so when it changes to\n             // re-add the line numbers.\n             scope.$watch(scope.maasCodeLines, insertContent);\n         }\n     };\n });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Content editable directive.\n *\n * HTML provides a feature that allows any element to be editable with\n * contenteditable attribute. This directive uses that attribute to link\n * the contents of that element to a model. This directive is not prefixed\n * with maas so Angular can identify all elements with this attribute.\n */\n\n\nangular.module('MAAS').directive('contenteditable', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            ngDisabled: \"&\",\n            maasEditing: \"&\"\n        },\n        link: function(scope, element, attrs, ngModel) {\n\n            // If the element is disabled then make the element lose focus.\n            var focusHandler = function() {\n                if(scope.ngDisabled()) {\n                    element.blur();\n                } else {\n                    // Didn't lose focus, so its now editing.\n                    scope.$apply(scope.maasEditing());\n                }\n            };\n            element.bind(\"focus\", focusHandler);\n\n            // Update the value of the model when events occur that\n            // can change the value of the model.\n            var changeHandler = function() {\n                scope.$apply(ngModel.$setViewValue(element.text()));\n            };\n            element.bind(\"blur keyup change\", changeHandler);\n\n            // When the model changes set the html content for that element.\n            ngModel.$render = function() {\n                element.html(ngModel.$viewValue || \"\");\n            };\n\n            // When the model changes this function will be called causing the\n            // ngChange directive to be fired.\n            ngModel.$viewChangeListeners.push(function() {\n                scope.$eval(attrs.ngChange);\n            });\n\n            // Remove the event handler on the element when the scope is\n            // destroyed.\n            scope.$on(\"$destroy\", function() {\n                element.unbind(\"blur keyup change\", changeHandler);\n                element.unbind(\"focus\", focusHandler);\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller image status directive.\n *\n * Shows the image status for a controller.\n */\n\n angular.module('MAAS').service('ControllerImageStatusService',\n    ['$timeout', '$interval', 'ControllersManager', function(\n        $timeout, $interval, ControllersManager) {\n     var self = this;\n\n     // How often to check the sync status of a controller in seconds.\n     var CHECK_INTERVAL = 30;\n\n     // List of controllers that need to have the image status updated.\n     this.controllers = [];\n\n     // List of current controller statues.\n     this.statuses = {};\n\n     // Interval function that is called to update the statuses.\n     this.updateStatuses = function() {\n         var controllerIds = [];\n         angular.forEach(self.controllers, function(system_id) {\n             controllerIds.push({system_id: system_id});\n         });\n\n         // Check the image states.\n         ControllersManager.checkImageStates(controllerIds).then(\n                 function(results) {\n             angular.forEach(controllerIds, function(controller) {\n                 var status = results[controller.system_id];\n                 if(status) {\n                     self.statuses[controller.system_id] = status;\n                 } else {\n                     self.statuses[controller.system_id] = \"Unknown\";\n                 }\n             });\n         });\n     };\n\n     // Register this controller system_id.\n     this.register = function(system_id) {\n         var known = self.controllers.indexOf(system_id) >= 0;\n         if(!known) {\n             self.controllers.push(system_id);\n         }\n\n         // When the interval is already running and its a new controller then\n         // the interval needs to be reset. When it already exists it doesn't\n         // need to be reset.\n         if(angular.isDefined(self.runningInterval)) {\n             if(known) {\n                 return;\n             } else {\n                 $interval.cancel(self.runningInterval);\n                 self.runningInterval = undefined;\n             }\n         }\n\n         // If its not running and the timeout has been started we re-create\n         // the timeout. This delays the start of the interval until the\n         // all directives on the page have been fully loaded.\n         if(angular.isDefined(self.startTimeout)) {\n             $timeout.cancel(self.startTimeout);\n         }\n         self.startTimeout = $timeout(function() {\n             self.startTimeout = undefined;\n             self.runningInterval = $interval(function() {\n                 self.updateStatuses();\n             }, CHECK_INTERVAL * 1000);\n             self.updateStatuses();\n         }, 100);\n     };\n\n     // Unregister the controller.\n     this.unregister = function(system_id) {\n        var idx = self.controllers.indexOf(system_id);\n        if(idx > -1) {\n            self.controllers.splice(idx, 1);\n        }\n\n        // If no controllers are left stop all intervals and timeouts.\n        if(self.controllers.length === 0) {\n            if(angular.isDefined(self.startTimeout)) {\n                $timeout.cancel(self.startTimeout);\n                self.startTimeout = undefined;\n            }\n            if(angular.isDefined(self.runningInterval)) {\n                $interval.cancel(self.runningInterval);\n                self.runningInterval = undefined;\n            }\n        }\n     };\n\n     // Return true if the spinner should be shown.\n     this.showSpinner = function(system_id) {\n         var status = self.statuses[system_id];\n         if(angular.isString(status) && status !== \"Syncing\") {\n             return false;\n         } else {\n             return true;\n         }\n     };\n\n     // Get the image status.\n     this.getImageStatus = function(system_id) {\n         var status = self.statuses[system_id];\n         if(angular.isString(status)) {\n             return status;\n         } else {\n             return \"Asking for status...\";\n         }\n     };\n}]);\n\nangular.module('MAAS').directive('maasControllerImageStatus',\n    ['ControllerImageStatusService', function(\n        ControllerImageStatusService) {\n\n    return {\n        restrict: \"E\",\n        scope: {\n            systemId: \"=\"\n        },\n        template: [\n            '<i class=\"p-icon--loading u-animation--spin\"',\n                'data-ng-if=\"showSpinner()\"></i> ',\n            '{$ getImageStatus() $}'].join(''),\n        link: function(scope, element, attrs) {\n            // Don't register until the systemId is set.\n            var unwatch, registered = false;\n            unwatch = scope.$watch(\"systemId\", function() {\n                if(angular.isDefined(scope.systemId) && !registered) {\n                    ControllerImageStatusService.register(scope.systemId);\n                    registered = true;\n                    unwatch();\n                }\n            });\n\n            scope.showSpinner = function() {\n                return ControllerImageStatusService.showSpinner(\n                    scope.systemId);\n            };\n            scope.getImageStatus = function() {\n                return ControllerImageStatusService.getImageStatus(\n                    scope.systemId);\n            };\n\n            // Unregister when destroyed.\n            scope.$on(\"$destroy\", function() {\n                if(registered) {\n                    ControllerImageStatusService.unregister(scope.systemId);\n                }\n            });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller status icon. Used in the controllers listing on the nodes page.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the controller-status.html into the template cache.\n    $templateCache.put('directive/templates/controller-status.html', [\n        '<span>',\n          '<span class=\"p-icon--{$ serviceClass $}\" data-ng-if=\"!textOnly\">',\n          '</span>',\n          '<span data-ng-if=\"textOnly\" data-ng-bind=\"serviceText\"></span>',\n        '</span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasControllerStatus', [\n    \"ControllersManager\", \"ServicesManager\",\n    function(ControllersManager, ServicesManager) {\n        return {\n            restrict: \"A\",\n            scope: {\n                controller: '=maasControllerStatus',\n                textOnly: '=?maasTextOnly'\n            },\n            templateUrl: 'directive/templates/controller-status.html',\n            controller: function($scope) {\n\n                $scope.serviceClass = \"unknown\";\n                $scope.services = ServicesManager.getItems();\n                $scope.serviceText = \"\";\n                if($scope.textOnly) {\n                  $scope.textOnly = true;\n                } else {\n                  $scope.textOnly = false;\n                }\n\n                // Return the status class for the service.\n                function getClass(service) {\n                    if(service.status === \"running\") {\n                        return \"success\";\n                    } else if (service.status === \"degraded\") {\n                        return \"warning\";\n                    } else if (service.status === \"dead\") {\n                        return \"error\";\n                    } else {\n                        return \"unknown\";\n                    }\n                }\n\n                // Return the number of times class is displayed.\n                function countClass(classes, class_name) {\n                  var counter = 0;\n                  angular.forEach(classes, function(name) {\n                    if(name === class_name) {\n                      counter++;\n                    }\n                  });\n                  return counter;\n                }\n\n                // Update the class based on status of the services on the\n                // controller.\n                function updateStatusClass() {\n                    $scope.serviceClass = \"unknown\";\n                    if(angular.isObject($scope.controller)) {\n                        var services = ControllersManager.getServices(\n                            $scope.controller);\n                        if(services.length > 0) {\n                            var classes = services.map(getClass);\n                            if(classes.indexOf(\"error\") !== -1) {\n                                $scope.serviceClass = \"power-error\";\n                                $scope.serviceText = countClass(\n                                  classes, \"error\") + \" dead\";\n                            } else if(classes.indexOf(\"warning\") !== -1) {\n                                $scope.serviceClass = \"warning\";\n                                $scope.serviceText = countClass(\n                                  classes, \"warning\") + \" degraded\";\n                            } else {\n                                $scope.serviceClass = \"success\";\n                                $scope.serviceText = countClass(\n                                  classes, \"success\") + \" running\";\n                            }\n                        }\n                    }\n                }\n\n                // Watch the services array and the services on the controller,\n                // if any changes then update the status.\n                $scope.$watch(\"controller.service_ids\", updateStatusClass);\n                $scope.$watchCollection(\"services\", updateStatusClass);\n\n                // Update on creation.\n                updateStatusClass();\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Double click overlay directive.\n *\n * Provides the ability for a disabled element to still accept the\n * double click event. By default if an element is disabled then it will\n * receive no click events. This overlays the element with another element\n * that will still receive click events.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the style for the maas-dbl-overlay class. We inject the style\n    // instead of placing it in maas-styles.css because it is required for\n    // this directive to work at all.\n    var styleElement = document.createElement('style');\n    styleElement.innerHTML = [\n        '.maas-dbl-overlay {',\n            'display: inline-block;',\n            'position: relative;',\n        '}',\n        '.maas-dbl-overlay--overlay {',\n            'position: absolute;',\n            'left: 0;',\n            'right: 0;',\n            'top: 0;',\n            'bottom: 0;',\n            '-webkit-touch-callout: none;',\n            '-webkit-user-select: none;',\n            '-khtml-user-select: none;',\n            '-moz-user-select: none;',\n            '-ms-user-select: none;',\n            'user-select: none;',\n        '}'\n    ].join('');\n    document.getElementsByTagName('head')[0].appendChild(styleElement);\n\n    // Inject the double_click_overlay.html into the template cache.\n    $templateCache.put('directive/templates/double_click_overlay.html', [\n        '<div class=\"maas-dbl-overlay\">',\n            '<span data-ng-transclude></span>',\n            '<div class=\"maas-dbl-overlay--overlay\"></div>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasDblClickOverlay', ['BrowserService',\n    function(BrowserService) {\n        return {\n            restrict: \"A\",\n            transclude: true,\n            replace: true,\n            scope: {\n                maasDblClickOverlay: '&'\n            },\n            templateUrl: 'directive/templates/double_click_overlay.html',\n            link: function(scope, element, attrs) {\n                // Create the click function that will be called when the\n                // overlay is clicked. This changes based on the element that\n                // is transcluded into this directive.\n                var overlay = element.find(\".maas-dbl-overlay--overlay\");\n                var transclude = element.find(\n                    \"span[data-ng-transclude]\").children()[0];\n                var clickElement;\n                if(transclude.tagName === \"SELECT\") {\n                    clickElement = function() {\n                        // Have to create a custom mousedown event for the\n                        // select click to be handled. Using 'click()' or\n                        //'focus()' will not work.\n                        var evt = document.createEvent('MouseEvents');\n                        evt.initMouseEvent(\n                            'mousedown', true, true, window, 0, 0, 0, 0, 0,\n                            false, false, false, false, 0, null);\n                        transclude.dispatchEvent(evt);\n                    };\n\n                    // Selects use a pointer for the cursor.\n                    overlay.css({ cursor: \"pointer\" });\n                } else if(transclude.tagName === \"INPUT\") {\n                    clickElement = function() {\n                        // An input will become in focus when clicked.\n                        angular.element(transclude).triggerHandler('focus');\n                    };\n\n                    // Inputs use a text for the cursor.\n                    overlay.css({ cursor: \"text\" });\n                } else {\n                    clickElement = function() {\n                        // Standard element just call click on that element.\n                        angular.element(transclude).triggerHandler('click');\n                    };\n\n                    // Don't set cursor on other element types.\n                }\n\n                // Add the click and double click handlers.\n                var overlayClick = function(evt) {\n                    clickElement();\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                };\n                var overlayDblClick = function(evt) {\n                    // Call the double click handler with in the scope.\n                    scope.$apply(scope.maasDblClickOverlay);\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                };\n\n                // Enable the handlers if not Firefox. It firefox, then hide\n                // the overlay as Firefox does not allow sending click events\n                // to select elements.\n                if(BrowserService.browser !== \"firefox\") {\n                    overlay.on(\"click\", overlayClick);\n                    overlay.on(\"dblclick\", overlayDblClick);\n                } else {\n                    overlay.addClass(\"ng-hide\");\n                }\n\n                // Remove the handlers when the scope is destroyed.\n                scope.$on(\"$destroy\", function() {\n                    overlay.off(\"click\", overlayClick);\n                    overlay.off(\"dblclick\", overlayDblClick);\n                });\n            }\n        };\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n*/\n\nangular.module('MAAS').directive('maasEnter', function () {\n    return {\n        restrict: \"A\",\n        link: function (scope, element, attrs) {\n            element.bind(\"keydown keypress\", function (evt) {\n                if(evt.which === 13) {\n                    scope.$apply(function () {\n                        scope.$eval(attrs.maasEnter);\n                    });\n                    evt.preventDefault();\n                }\n            });\n        }\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Enter blur directive.\n *\n * When the enter key is pressed make the element lose focus (aka. blur event).\n */\n\n\nangular.module('MAAS').directive('maasEnterBlur', function() {\n    return {\n        restrict: \"A\",\n        link: function(scope, element, attrs) {\n            element.bind(\"keydown keypress\", function(evt) {\n                if(evt.which === 13) {\n                    element.blur();\n                    evt.preventDefault();\n                }\n            });\n        }\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Error overlay.\n *\n * Directive overrides the entire transcluded element if an error occurs or\n * connection to the region over the websocket fails or becomes disconnected.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the error_overlay.html into the template cache.\n    $templateCache.put('directive/templates/error_overlay.html', [\n        '<header id=\"error-header\" class=\"page-header\" data-ng-show=\"show()\">',\n            '<div class=\"row\">',\n                '<h1 class=\"page-header__title\">',\n                    '<span class=\"p-icon--loading u-animation--spin ',\n                        'u-margin--right-small\"',\n                        'data-ng-hide=\"clientError\"></span>',\n                    '{$ getTitle() $}',\n                '</h1>',\n                '<div class=\"page-header__controls\">',\n                    '<button class=\"button--secondary button--inline\"',\n                        'data-ng-click=\"reload()\"',\n                        'data-ng-show=\"clientError\">Reload</button>',\n                '</div>',\n                '<div class=\"page-header__dropdown is-open\" ',\n                    'data-ng-show=\"error\">',\n                    '<div class=\"page-header__section twelve-col',\n                        'u-margin--bottom-none\">',\n                        '<p class=\"page-header__message',\n                                  'page-header__message--error\">',\n                            '{$ error $}',\n                        '</p>',\n                    '</div>',\n                '</div>',\n            '</div>',\n        '</header>',\n        '<div class=\"ng-hide u-no-margin--top\" data-ng-hide=\"show()\">',\n            '<div data-ng-transclude></div>',\n        '</div>'\n    ].join(''));\n\n    // Preload the svg and png error icon. Its possible that it has never been\n    // loaded by the browser and if the region connection goes down and the\n    // directive gets shown with an error the icon will be missing.\n    //\n    // Note: This is skipped if unit testing because it will throw 404 errors\n    // continuously.\n    if(!angular.isDefined(window.jasmine)) {\n        var image = new Image();\n        image.src = \"static/assets/images/icons/error.svg\";\n        image = new Image();\n        image.src = \"static/assets/images/icons/error.png\";\n    }\n}]);\n\nangular.module('MAAS').directive('maasErrorOverlay', [\n    '$window', '$timeout', 'RegionConnection', 'ErrorService',\n    function($window, $timeout, RegionConnection, ErrorService) {\n        return {\n            restrict: \"A\",\n            transclude: true,\n            scope: true,\n            templateUrl: 'directive/templates/error_overlay.html',\n            link: function(scope, element, attrs) {\n\n                scope.connected = false;\n                scope.showDisconnected = false;\n                scope.clientError = false;\n                scope.wasConnected = false;\n\n                // Holds the promise that sets showDisconnected to true. Will\n                // be cleared when the scope is destroyed.\n                var markDisconnected;\n\n                // Returns true when the overlay should be shown.\n                scope.show = function() {\n                    // Always show if clientError.\n                    if(scope.clientError) {\n                        return true;\n                    }\n                    // Never show if connected.\n                    if(scope.connected) {\n                        return false;\n                    }\n                    // Never been connected then always show.\n                    if(!scope.wasConnected) {\n                        return true;\n                    }\n                    // Not connected.\n                    return scope.showDisconnected;\n                };\n\n                // Returns the title for the header.\n                scope.getTitle = function() {\n                    if(scope.clientError) {\n                        return \"Error occurred\";\n                    } else if(scope.wasConnected) {\n                        return \"Connection lost, reconnecting...\";\n                    } else {\n                        return \"Connecting...\";\n                    }\n                };\n\n                // Called to reload the page.\n                scope.reload = function() {\n                    $window.location.reload();\n                };\n\n                // Called to when the connection status of the region\n                // changes. Updates the scope connected and error values.\n                var watchConnection = function() {\n                    // Do nothing if already a client error.\n                    if(scope.clientError) {\n                        return;\n                    }\n\n                    // Set connected and the time it changed.\n                    var connected = RegionConnection.isConnected();\n                    if(connected !== scope.connected) {\n                        scope.connected = connected;\n                        if(!connected) {\n                            scope.showDisconnected = false;\n\n                            // Show disconnected after 1/2 second. This removes\n                            // the flicker that can occur, if it disconnecets\n                            // and reconnected quickly.\n                            markDisconnected = $timeout(function() {\n                                scope.showDisconnected = true;\n                                markDisconnected = undefined;\n                            }, 500);\n                        }\n                    }\n\n                    // Set error and whether of not the connection\n                    // has ever been made.\n                    scope.error = RegionConnection.error;\n                    if(!scope.wasConnected && connected) {\n                        scope.wasConnected = true;\n                    }\n                };\n\n                // Watch the isConnected and error value on the\n                // RegionConnection.\n                scope.$watch(function() {\n                    return RegionConnection.isConnected();\n                }, watchConnection);\n                scope.$watch(function() {\n                    return RegionConnection.error;\n                }, watchConnection);\n\n                // Called then the error value on the ErrorService changes.\n                var watchError = function() {\n                    var error = ErrorService._error;\n                    if(angular.isString(error)) {\n                        scope.clientError = true;\n                        scope.error = ErrorService._error;\n                    }\n                };\n\n                // Watch _error on the ErrorService.\n                scope.$watch(function() {\n                    return ErrorService._error;\n                }, watchError);\n\n                // Cancel the timeout on scope destroy.\n                scope.$on(\"$destroy\", function() {\n                    if(angular.isDefined(markDisconnected)) {\n                        $timeout.cancel(markDisconnected);\n                    }\n                });\n            }\n        };\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Error toggle.\n *\n * Hides the element if an error occurs or no connection to the region\n * is present.\n */\n\nangular.module('MAAS').directive('maasErrorToggle', [\n    '$timeout', 'RegionConnection', 'ErrorService',\n    function($timeout, RegionConnection, ErrorService) {\n        return {\n            restrict: \"A\",\n            link: function(scope, element, attrs) {\n\n                // Holds timeout promise for setting ng-hide when\n                // connection is lost.\n                var disconnectedPromise;\n\n                // Cancel the disconnected timeout.\n                var cancelTimeout = function() {\n                    if(angular.isDefined(disconnectedPromise)) {\n                        $timeout.cancel(disconnectedPromise);\n                        disconnectedPromise = undefined;\n                    }\n                };\n\n                // Called to when the connection status of the region\n                // changes or the error on the ErrorService is set.\n                // The element is shown when connected and no errors.\n                var watchConnectionAndError = function() {\n                    var connected = RegionConnection.isConnected();\n                    var error = ErrorService._error;\n                    if(connected && !angular.isString(error)) {\n                        cancelTimeout();\n                        element.removeClass(\"ng-hide\");\n                    } else if(angular.isString(error)) {\n                        cancelTimeout();\n                        element.addClass(\"ng-hide\");\n                    } else if(!connected) {\n                        // Hide the element after 1/2 second. This stops\n                        // flickering when the connection goes down and\n                        // reconnects quickly.\n                        cancelTimeout();\n                        disconnectedPromise = $timeout(function() {\n                            element.addClass(\"ng-hide\");\n                        }, 500);\n                    }\n                };\n\n                // Watch the RegionConnection.isConnected() and\n                // ErrorService._error value.\n                scope.$watch(function() {\n                    return RegionConnection.isConnected();\n                }, watchConnectionAndError);\n                scope.$watch(function() {\n                    return ErrorService._error;\n                }, watchConnectionAndError);\n\n                // Cancel disconnect timeout on destroy.\n                scope.$on(\"$destroy\", function() {\n                    cancelTimeout();\n                });\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * IP Ranges directive.\n*/\n\nangular.module('MAAS').directive('maasIpRanges', [\n    '$filter', 'IPRangesManager', 'UsersManager',\n    'ManagerHelperService', 'ConverterService', function(\n        $filter, IPRangesManager, UsersManager, ManagerHelperService,\n        ConverterService) {\n        return {\n            restrict: \"E\",\n            scope: {\n                subnet: \"=\",\n                vlan: \"=\"\n            },\n            templateUrl: (\n                'static/partials/ipranges.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.ipranges = IPRangesManager.getItems();\n                $scope.iprangeManager = IPRangesManager;\n                $scope.newRange = null;\n                $scope.editIPRange = null;\n                $scope.deleteIPRange = null;\n\n                // Return true if the authenticated user is super user.\n                $scope.isSuperUser = function() {\n                    return UsersManager.isSuperUser();\n                };\n\n                // Called to start adding a new IP range.\n                $scope.addRange = function(type) {\n                    $scope.newRange = {\n                        type: type,\n                        start_ip: \"\",\n                        end_ip: \"\",\n                        comment: \"\"\n                    };\n                    if(angular.isObject($scope.subnet)) {\n                        $scope.newRange.subnet = $scope.subnet.id;\n                    }\n                    if(angular.isObject($scope.vlan)) {\n                        $scope.newRange.vlan = $scope.vlan.id;\n                    }\n                    if(type === \"dynamic\") {\n                        $scope.newRange.comment = \"Dynamic\";\n                    }\n                };\n\n                // Cancel adding the new IP range.\n                $scope.cancelAddRange = function() {\n                    $scope.newRange = null;\n                };\n\n                // Return true if the IP range can be modified by the\n                // authenticated user.\n                $scope.ipRangeCanBeModified = function(range) {\n                    if($scope.isSuperUser()) {\n                        return true;\n                    } else {\n                        // Can only modify reserved and same user.\n                        return (\n                            range.type === \"reserved\" &&\n                            range.user === UsersManager.getAuthUser().id);\n                    }\n                };\n\n                // Return true if the IP range is in edit mode.\n                $scope.isIPRangeInEditMode = function(range) {\n                    return $scope.editIPRange === range;\n                };\n\n                // Toggle edit mode for the IP range.\n                $scope.ipRangeToggleEditMode = function(range) {\n                    $scope.deleteIPRange = null;\n                    if($scope.isIPRangeInEditMode(range)) {\n                        $scope.editIPRange = null;\n                    } else {\n                        $scope.editIPRange = range;\n                    }\n                };\n\n                // Clear edit mode for the IP range.\n                $scope.ipRangeClearEditMode = function() {\n                    $scope.editIPRange = null;\n                };\n\n                // Return true if the IP range is in delete mode.\n                $scope.isIPRangeInDeleteMode = function(range) {\n                    return $scope.deleteIPRange === range;\n                };\n\n                // Enter delete mode for the IP range.\n                $scope.ipRangeEnterDeleteMode = function(range) {\n                    $scope.editIPRange = null;\n                    $scope.deleteIPRange = range;\n                };\n\n                // Exit delete mode for the IP range.\n                $scope.ipRangeCancelDelete = function() {\n                    $scope.deleteIPRange = null;\n                };\n\n                // Perform the delete operation on the IP range.\n                $scope.ipRangeConfirmDelete = function() {\n                    IPRangesManager.deleteItem(\n                        $scope.deleteIPRange).then(function() {\n                            $scope.deleteIPRange = null;\n                    });\n                };\n\n                // Sort ranges by starting IP address.\n                $scope.ipRangeSort = function(range) {\n                    if(range.start_ip.indexOf(':') !== -1) {\n                        return ConverterService.ipv6Expand(range.start_ip);\n                    } else {\n                        return ConverterService.ipv4ToInteger(range.start_ip);\n                    }\n                };\n\n                // Load the reqiured managers.\n                ManagerHelperService.loadManagers($scope, [\n                    IPRangesManager, UsersManager]).then(\n                        function() {\n                            $scope.loading = false;\n                        });\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Login button for external authentication.\n */\n\nangular.module('MAAS').factory('getBakery', function() {\n    return function(visitPage) {\n        return new Bakery(\n            new WebHandler(),\n            new BakeryStorage(localStorage, {}), {visitPage: visitPage});\n    };\n}).directive('externalLogin', ['$window', 'getBakery',\n                               function($window, getBakery) {\n    return {\n        restrict: 'E',\n        scope: {},\n        template: [\n            '<a target=\"_blank\" class=\"p-button--positive\"',\n            '    href=\"{{ loginURL }}\"',\n            '    title=\"Login through {{ externalAuthURL }}\">',\n            '  Go to login page',\n            '</a>',\n            '<div id=\"login-error\" class=\"p-form-validation__message\"',\n            '    ng-if=\"errorMessage\">',\n            '  <strong>Error getting login link:</strong><br>',\n            '  {{ errorMessage }}',\n            '</div>',\n        ].join(''),\n        controller: function($scope, $rootScope, $element, $document) {\n            $scope.errorMessage = '';\n            $scope.loginURL = '#';\n            $scope.externalAuthURL = $element.attr('auth-url');\n\n            const visitPage = function(error) {\n                $scope.$apply(function() {\n                    $scope.loginURL =  error.Info.VisitURL;\n                    $scope.errorMessage = '';\n                });\n            }\n            const bakery = getBakery(visitPage);\n            const nextPath = $element.attr('next-path');\n            bakery.get(\n                '/MAAS/accounts/discharge-request/',\n                {'Accept': 'application/json',\n                 'Content-Type': 'application/json'},\n                function(error, response) {\n                    if (response.currentTarget.status != 200) {\n                        $scope.$apply(function() {\n                            $scope.errorMessage = (\n                                response.currentTarget.responseText);\n                        });\n                    } else {\n                        $window.location.replace(nextPath);\n                    }\n                });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS object directive.\n *\n * Directive that connects a field to an object from the websocket. The field\n * is an instant save on blur.\n */\n\nangular.module('MAAS').directive('maasObjForm', ['JSONService',\n    function(JSONService) {\n        function MAASFormController(scope) {\n            this.obj = scope.obj;\n            this.manager = scope.manager;\n            this.fields = {};\n            this.scope = scope;\n            this.scope.saving = false;\n            this.scope.savingKeys = [];\n            if(angular.isObject(this.scope.obj)) {\n                this.scope.obj.$maasForm = this;\n            }\n\n            // Set the managerMethod.\n            this.managerMethod = scope.managerMethod;\n            if(angular.isUndefined(this.managerMethod)) {\n                this.managerMethod = \"updateItem\";\n            }\n\n            var self = this;\n            scope.$watch(\"obj\", function() {\n                // Update the object when it changes.\n                self.obj = scope.obj;\n                if(angular.isObject(self.obj)) {\n                    self.obj.$maasForm = self;\n                }\n            });\n            scope.$on(\"$destroy\", function() {\n                // Remove the $maasForm from the object when directive is\n                // deleted.\n                if(angular.isObject(self.obj)) {\n                    delete self.obj.$maasForm;\n                }\n            });\n        }\n\n        // Get the current value for a field in the form.\n        MAASFormController.prototype.getValue = function (key) {\n            var field = this.fields[key];\n            if(angular.isObject(field) && angular.isObject(field.scope)) {\n                return field.scope.getValue();\n            }\n        };\n\n        // Update the current value for a field in the form.\n        MAASFormController.prototype.updateValue = function (key, value) {\n            var field = this.fields[key];\n            if(angular.isObject(field) && angular.isObject(field.scope)) {\n                return field.scope.updateValue(value);\n            }\n        };\n\n        // Clone the current object for this form without the $maasForm\n        // property set.\n        MAASFormController.prototype.cloneObject = function() {\n            if(!angular.isObject(this.obj)) {\n                return this.obj;\n            } else {\n                delete this.obj.$maasForm;\n                var clonedObj = angular.copy(this.obj);\n                this.obj.$maasForm = this;\n                return clonedObj;\n            }\n        };\n\n        // Return true if table form.\n        MAASFormController.prototype.isTableForm = function () {\n            if(angular.isUndefined(this.scope.tableForm)) {\n                // Default is not a table form.\n                return false;\n            } else {\n                return this.scope.tableForm;\n            }\n        };\n\n        // Return true if the form should be saved on blur.\n        MAASFormController.prototype.saveOnBlur = function() {\n            if(angular.isUndefined(this.scope.saveOnBlur)) {\n                // Default is save on blur.\n                return true;\n            } else {\n                return this.scope.saveOnBlur;\n            }\n        };\n\n        // Return true if the form is saving this field.\n        MAASFormController.prototype.isSaving = function(key) {\n            return (\n                this.scope.saving && this.scope.savingKeys.indexOf(key) >= 0);\n        };\n\n        // Return true if the input should show the saving spinner. This is\n        // only show on inputs in forms that are using save on blur.\n        MAASFormController.prototype.showInputSaving = function(key) {\n            return this.saveOnBlur() && this.isSaving(key);\n        };\n\n        // Return true if any field in the form as an error.\n        MAASFormController.prototype.hasErrors = function() {\n            var hasErrors = false;\n            angular.forEach(this.fields, function(field) {\n                if(field.scope.hasErrors()) {\n                    hasErrors = true;\n                }\n            });\n            if(angular.isDefined(this.errorScope)) {\n                if(this.errorScope.hasErrors()) {\n                    hasErrors = true;\n                }\n            }\n            return hasErrors;\n        };\n\n        // Called by maas-obj-field to register it as a editable field.\n        MAASFormController.prototype.registerField = function(key, scope) {\n            // Store the state of the field and its scope.\n            this.fields[key] = {\n                editing: false,\n                scope: scope\n            };\n\n            // Watch for changes on the value of the object.\n            var self = this;\n            this.scope.$watch(\"obj.\" + key, function() {\n                if(angular.isObject(self.obj) && !self.fields[key].editing) {\n                    self.fields[key].scope.updateValue(self.obj[key]);\n                }\n            });\n\n            // Return the current value for the field.\n            if(angular.isObject(this.obj)) {\n                return this.obj[key];\n            } else {\n                return null;\n            }\n        };\n\n        // Called by maas-obj-field to unregister it as a editable field.\n        MAASFormController.prototype.unregisterField = function(key) {\n            delete this.fields[key];\n        };\n\n        // Called by maas-obj-field to place field in edit mode.\n        MAASFormController.prototype.startEditingField = function(key) {\n            this.fields[key].editing = true;\n        };\n\n        // Called by maas-obj-field to end edit mode for the field.\n        MAASFormController.prototype.stopEditingField = function(key, value) {\n            var field = this.fields[key];\n\n            // Do nothing if not save on blur.\n            if(!this.saveOnBlur()) {\n                field.editing = false;\n                return;\n            }\n\n            // Clear errors before saving.\n            field.scope.clearErrors();\n\n            // Copy the object and update the editing field.\n            var updatedObj = this.cloneObject();\n            updatedObj[key] = value;\n            if(updatedObj[key] === this.obj[key]) {\n                // Nothing changed.\n                field.editing = false;\n                return;\n            }\n\n            // Update the item in the manager.\n            this.scope.saving = true;\n            this.scope.savingKeys = [key];\n            this.updateItem(updatedObj, [key]);\n        };\n\n        // Update the item using the manager.\n        MAASFormController.prototype.updateItem = function(updatedObj, keys) {\n            var key = keys[0];\n            var field = this.fields[key];\n            var self = this;\n\n            // Pre-process the updatedObj if one is defined.\n            if(angular.isFunction(this.scope.preProcess)) {\n                updatedObj = this.scope.preProcess(updatedObj, keys);\n            }\n\n            // Update the item with the manager.\n            return this.manager[this.managerMethod](\n                updatedObj).then(function(newObj) {\n                    // Update the value of the element.\n                    field.editing = false;\n                    field.scope.updateValue(newObj[key]);\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    if(angular.isFunction(self.scope.afterSave)) {\n                        self.scope.afterSave(newObj);\n                    }\n                    return newObj;\n                }, function(error) {\n                    var errorJson = JSONService.tryParse(error);\n                    if(angular.isObject(errorJson)) {\n                        // Add the error to each field it matches.\n                        angular.forEach(errorJson, function(value, key) {\n                            var errorField = self.fields[key];\n                            if(!angular.isArray(value)) {\n                                value = [value];\n                            }\n\n                            if(angular.isObject(errorField)) {\n                                // Error on a field we know about, place the\n                                // error on that field.\n                                errorField.scope.setErrors(value);\n                            } else {\n                                // Error on a field we don't know about, place\n                                // the error on the editing field. Prefixing\n                                // the error with the field.\n                                if(key !== \"__all__\") {\n                                    value = value.map(function(v) {\n                                        return key + \": \" + v;\n                                    });\n                                }\n                                field.scope.setErrors(value);\n                            }\n                        });\n                    } else {\n                        // Add the string error to just the field error.\n                        field.scope.setErrors([error]);\n                    }\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    return error;\n                });\n        };\n\n        // Called when saveOnBlur is false to save the whole form.\n        MAASFormController.prototype.saveForm = function () {\n            var keys = [];\n            var updatedObj = this.cloneObject();\n            angular.forEach(this.fields, function(value, key) {\n                value.scope.clearErrors();\n                var newValue = value.scope.getValue();\n                if(angular.isDefined(newValue) &&\n                    updatedObj[key] !== newValue) {\n                    updatedObj[key] = newValue;\n                    keys.push(key);\n                }\n            });\n\n\n            // Pre-process the updatedObj if one is defined.\n            if(angular.isFunction(this.scope.preProcess)) {\n                updatedObj = this.scope.preProcess(updatedObj, keys);\n            }\n\n            // Clear the errors on the errorScope before save.\n            if(angular.isDefined(this.errorScope)) {\n                this.errorScope.clearErrors();\n            }\n\n            var self = this;\n            this.scope.saving = true;\n            this.scope.savingKeys = keys;\n            return this.manager[this.managerMethod](\n                updatedObj).then(function(newObj) {\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    if(angular.isFunction(self.scope.afterSave)) {\n                        self.scope.afterSave(newObj);\n                    }\n                    return newObj;\n                }, function(error) {\n                    var errorJson = JSONService.tryParse(error);\n                    if(angular.isObject(errorJson)) {\n                        // Add the error to each field it matches.\n                        angular.forEach(errorJson, function(value, key) {\n                            var errorField = self.fields[key];\n                            if(!angular.isArray(value)) {\n                                value = [value];\n                            }\n\n                            if(angular.isObject(errorField)) {\n                                // Error on a field we know about, place the\n                                // error on that field.\n                                errorField.scope.setErrors(value);\n                            } else {\n                                if(key !== \"__all__\") {\n                                    value = value.map(function(v) {\n                                        return key + \": \" + v;\n                                    });\n                                }\n                                // Error on a field we don't know about, place\n                                // the error on errorScope if set.\n                                if(angular.isDefined(self.errorScope)) {\n                                    self.errorScope.setErrors(value);\n                                } else {\n                                    // No error scope, just log to console.\n                                    console.log(value);\n                                }\n                            }\n                        });\n                    } else {\n                        // Add the string error to just the field error.\n                        if(angular.isDefined(self.errorScope)) {\n                            self.errorScope.setErrors([error]);\n                        } else {\n                            // No error scope, just log to console.\n                            console.log(error);\n                        }\n                    }\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    return error;\n                });\n        };\n\n        return {\n            restrict: \"E\",\n            scope: {\n                obj: \"=\",\n                manager: \"=\",\n                managerMethod: \"@\",\n                preProcess: \"=\",\n                afterSave: \"=\",\n                tableForm: \"=\",\n                saveOnBlur: \"=\",\n                inline: \"=\",\n                ngDisabled: \"&\"\n            },\n            transclude: true,\n            template: (\n                '<form class=\"p-form\" data-ng-class=\"{saving: saving, ' +\n                '\\'p-form--inline\\': inline, ' +\n                '\\'p-form--stacked\\': tableForm}\" ' +\n                'ng-transclude></form>'),\n            controller: ['$scope', MAASFormController]\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjFieldGroup', ['JSONService',\n    function(JSONService) {\n        // Controller for this directive.\n        function MAASGroupController(scope, timeout) {\n            this.fields = {};\n            this.scope = scope;\n            this.scope.saving = false;\n            this.scope.savingKeys = [];\n            this.timeout = timeout;\n\n            var self = this;\n            this.scope.isEditing = function() {\n                var editing = false;\n                angular.forEach(self.fields, function(value) {\n                    if(!editing) {\n                        editing = value.editing;\n                    }\n                });\n                return editing;\n            };\n        }\n\n        // Return true if table form.\n        MAASGroupController.prototype.isTableForm = function () {\n            return this.formController.isTableForm();\n        };\n\n        // Return true if should save on blur.\n        MAASGroupController.prototype.saveOnBlur = function () {\n            return this.formController.saveOnBlur();\n        };\n\n        // Return true if group is saving.\n        MAASGroupController.prototype.isSaving = function(key) {\n            return (\n                this.scope.saving && this.scope.savingKeys.indexOf(key) >= 0);\n        };\n\n        // Return true if the input should show the saving spinner. This is\n        // only show on inputs in forms that are using save on blur.\n        MAASGroupController.prototype.showInputSaving = function(key) {\n            // In a group we say the entire group is saving, not just that\n            // one key in the field is being saved.\n            return this.saveOnBlur() && this.scope.saving;\n        };\n\n        // Called by maas-obj-field to register it as a editable field.\n        MAASGroupController.prototype.registerField = function(key, scope) {\n            // Store the state of the field and its scope.\n            this.fields[key] = {\n                editing: false,\n                scope: scope\n            };\n            return this.formController.registerField(key, scope);\n        };\n\n        // Called by maas-obj-field to unregister it as a editable field.\n        MAASGroupController.prototype.unregisterField = function(key) {\n            delete this.fields[key];\n            this.formController.unregisterField(key);\n        };\n\n        // Called by maas-obj-field to place field in edit mode.\n        MAASGroupController.prototype.startEditingField = function(key) {\n            this.fields[key].editing = true;\n\n            // Set all fields in the group as editing in the formController.\n            var self = this;\n            angular.forEach(this.fields, function(value, key) {\n                self.formController.startEditingField(key);\n            });\n        };\n\n        // Called by maas-obj-field to exit edit mode for the field.\n        MAASGroupController.prototype.stopEditingField = function(key, value) {\n            var field = this.fields[key];\n            field.editing = false;\n\n            // Exit early if not save on blur.\n            if(!this.saveOnBlur()) {\n                return;\n            }\n\n            // Delay the handling of stop to make sure start is not called on\n            // the next field in the group.\n            var self = this;\n            this.timeout(function() {\n                // If any other fields are in edit mode then nothing to do.\n                var editing = false;\n                angular.forEach(self.fields, function(value) {\n                    if(!editing) {\n                        editing = value.editing;\n                    }\n                });\n                if(editing) {\n                    return;\n                }\n\n                // Copy the object and update the editing fields.\n                var keys = [];\n                var changed = false;\n                var updatedObj = self.formController.cloneObject();\n                angular.forEach(self.fields, function(value, key) {\n                    value.scope.clearErrors();\n                    var newValue = value.scope.getValue();\n                    if(angular.isDefined(newValue) &&\n                        updatedObj[key] !== newValue) {\n                        keys.push(key);\n                        updatedObj[key] = newValue;\n                        changed = true;\n                    }\n                });\n                if(!changed) {\n                    return;\n                }\n\n                // Place the field that actually triggered the update first.\n                var keyIdx = keys.indexOf(key);\n                if(keyIdx !== -1) {\n                    keys.splice(keyIdx, 1);\n                    keys.splice(0, 0, key);\n                }\n\n                // Save the object.\n                self.scope.saving = true;\n                self.scope.savingKeys = keys;\n                self.formController.updateItem(updatedObj, keys).then(\n                    function(obj) {\n                      self.scope.saving = false;\n                      self.scope.savingKeys = [];\n                      return obj;\n                  }, function(error) {\n                      self.scope.saving = false;\n                      self.scope.savingKeys = [];\n                      return error;\n                  });\n            }, 10); // Really short has to be next click.\n        };\n\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\", \"maasObjFieldGroup\"],\n            scope: {},\n            transclude: true,\n            template: (\n                '<div class=\"form__siblings\" ' +\n                'data-ng-class=\"{\\'is-active\\': isEditing()}\" ' +\n                'data-ng-transclude></div>'),\n            controller: ['$scope', '$timeout', MAASGroupController],\n            link: {\n                pre: function(scope, element, attrs, controllers) {\n                    // Set formController on the MAASGroupController to\n                    // point to its parent MAASFormController. This is done in\n                    // pre-link so the controller has the formController before\n                    // registerField is called.\n                    controllers[1].formController = controllers[0];\n\n                    // Set ngDisabled on this scope from the form controller.\n                    scope.ngDisabled = controllers[0].scope.ngDisabled;\n\n                    // Set the object to always be the same on the scope.\n                    controllers[0].scope.$watch(\"obj\", function(obj) {\n                        scope.obj = obj;\n                    });\n                }\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjField', ['$compile',\n    function($compile) {\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\", \"?^^maasObjFieldGroup\"],\n            scope: {\n                onChange: \"=\",\n                subtleText: \"@\"\n            },\n            transclude: true,\n            template: (\n                '<div data-ng-transclude></div>'),\n            link: function(scope, element, attrs, controllers) {\n                // Select the controller based on which is available.\n                var controller = controllers[1];\n                if(!angular.isObject(controller)) {\n                    controller = controllers[0];\n                }\n\n                // Set ngDisabled from the parent controller.\n                scope.ngDisabled = controller.scope.ngDisabled;\n\n                element.addClass(\"p-form__group\");\n                if(attrs.subtle !== \"false\") {\n                    element.addClass(\"form__group--subtle\");\n                }\n\n                // type and key required.\n                var missingAttrs = [];\n                if(!angular.isString(attrs.type) || attrs.type.length === 0) {\n                    missingAttrs.push(\"type\");\n                }\n                if(!angular.isString(attrs.key) || attrs.key.length === 0) {\n                    missingAttrs.push(\"key\");\n                }\n                if(missingAttrs.length > 0) {\n                    throw new Error(\n                        missingAttrs.join(\", \") +\n                        \" are required on maas-obj-field.\");\n                }\n                if(angular.isString(attrs.disabled)) {\n                    scope.ngDisabled = () => true;\n                }\n\n                // Remove transcluded element.\n                element.find(\"div\").remove();\n\n                // Render the label.\n                var label = attrs.label || attrs.key;\n\n                if(attrs.disableLabel !== \"true\" &&\n                        !(attrs.type === \"hidden\")) {\n                    var labelElement = angular.element('<label/>');\n                    labelElement.attr('for', attrs.key);\n                    labelElement.text(label);\n                    labelElement.addClass('p-form__label');\n                    if(attrs.labelWidth) {\n                        labelElement.addClass(\"col-\" + attrs.labelWidth);\n                    } else {\n                        labelElement.addClass(\"u-margin--right\");\n                    }\n                    if(attrs.labelLeft === \"true\") {\n                        labelElement.addClass('u-padding--left');\n                        labelElement.addClass('u-position--relative');\n                    }\n                    element.append(labelElement);\n\n                    // Add a label info icon with tooltip.\n                    if(angular.isString(attrs.labelInfo)\n                            && attrs.labelInfo.length > 0) {\n                        var infoWrapper = angular.element(\n                            '<span>&nbsp;</span>');\n                        infoWrapper.addClass('p-tooltip p-tooltip--btm-right');\n\n                        var infoIcon = angular.element('<i/>');\n                        infoIcon.addClass('p-icon--information');\n                        infoIcon.attr(\n                            'aria-describedby', attrs.key + '-tooptip');\n\n                        var infoTooltip = angular.element('<p></p>');\n                        infoTooltip.addClass('p-tooltip__message');\n                        infoTooltip.text(attrs.labelInfo);\n                        infoTooltip.attr('id', attrs.key + '-tooptip');\n\n                        infoWrapper.append(infoIcon);\n                        infoWrapper.append(infoTooltip);\n\n                        labelElement.append(infoWrapper);\n\n                        // prevents the icon from being clickable\n                        infoIcon.bind('click', function (evt) {\n                            evt.preventDefault();\n                        });\n                    }\n                }\n\n                // Add the wrapper for the input.\n                var inputWrapper = angular.element('<div></div>');\n                inputWrapper.addClass(\"p-form__control\");\n\n                if(attrs.inputWidth) {\n                    inputWrapper.addClass(\"col-\" + attrs.inputWidth);\n                }\n\n                // Render the input based on the type.\n                var placeholder = attrs.placeholder || label;\n                var inputElement = null;\n                if(attrs.type === \"text\" || attrs.type === \"textarea\" ||\n                   attrs.type === \"password\") {\n                    if(attrs.type === \"text\") {\n                        inputElement = $compile(\n                            '<input type=\"text\" id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">')(scope);\n                    } else if(attrs.type === \"textarea\") {\n                        inputElement = $compile(\n                            '<textarea id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">' +\n                                '</textarea>')(scope);\n                    } else if(attrs.type === \"password\") {\n                        inputElement = $compile(\n                            '<input type=\"password\" id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">')(scope);\n                    }\n\n                    // Allow enter on blur, by default.\n                    if(attrs.blurOnEnter) {\n                        inputElement.bind(\"keydown keypress\", function(evt) {\n                            if(evt.which === 13) {\n                                inputElement.blur();\n                                evt.preventDefault();\n                            }\n                        });\n                    }\n\n                    // Revert value on esc.\n                    var self = this;\n                    inputElement.bind(\"keydown keypress\", function(evt) {\n                        if(evt.which === 27) {\n                            inputElement.val(controller.scope.obj[attrs.key]);\n                            inputElement.blur();\n                            evt.preventDefault();\n                        }\n                    });\n\n                    // Register the field with the controller and set the\n                    // current value for the field.\n                    var currentValue = controller.registerField(\n                        attrs.key, scope);\n                    inputElement.val(currentValue);\n\n                    // When element is in focus then editing is on.\n                    inputElement.on(\"focus\", function() {\n                        scope.$apply(function() {\n                            controller.startEditingField(attrs.key);\n                        });\n                    });\n\n                    // When element is not in focus then editing is done.\n                    inputElement.on(\"blur\", function() {\n                        scope.$apply(function() {\n                            controller.stopEditingField(\n                                attrs.key, inputElement.val());\n                        });\n                    });\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        inputElement.val(newValue);\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return inputElement.val();\n                    };\n                } else if(attrs.type === \"options\") {\n                    // Requires the options attribute on the element. This\n                    // is copied directly into the ngOptions directive on\n                    // the select.\n                    var options = attrs.options;\n                    if(!angular.isString(options) || options.length === 0) {\n                        throw new Error(\n                            \"options attribute is required on type \" +\n                            \"'options' on maas-obj-field.\");\n                    }\n\n                    // Placeholder by default is disabled, allow it to be\n                    // enabled.\n                    var disabled = \"disabled\";\n                    if(attrs.placeholderEnabled === \"true\") {\n                        disabled = \"\";\n                    }\n\n                    // Create a child scope of the parent scope for this\n                    // directive. Since this directive is created with an\n                    // isolated scope we need the child to use the parent so\n                    // ngOptions can use properties defined in that scope.\n                    var childScope = scope.$parent.$new();\n                    childScope._ngDisabled = scope.ngDisabled;\n                    childScope._selectValue = controller.registerField(\n                        attrs.key, scope);\n                    childScope._selectNgChange = function() {\n                        scope._change();\n                        controller.stopEditingField(\n                            attrs.key, childScope._selectValue);\n                    };\n\n                    // Construct the select.\n                    inputElement = $compile(\n                        '<select id=\"' + attrs.key + '\" ' +\n                        'data-ng-model=\"_selectValue\" ' +\n                        'data-ng-options=\"' + options + '\"' +\n                        'data-ng-change=\"_selectNgChange()\"' +\n                        'data-ng-disabled=\"_ngDisabled()\">' +\n                        '<option value=\"\" ' + disabled + '>' + placeholder +\n                        '</option></select>')(childScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        childScope._selectValue = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return childScope._selectValue;\n                    };\n                } else if(attrs.type === \"checkboxes\") {\n                    // Requires the values attribute on the element.\n                    var values = attrs.values;\n                    if(!angular.isString(values) || values.length === 0) {\n                        throw new Error(\n                            \"values attribute is required on type \" +\n                            \"'checkboxes' on maas-obj-field.\");\n                    }\n\n                    // Create a child scope of the parent scope for this\n                    // directive. Since this directive is created with an\n                    // isolated scope we need the child to use the parent so\n                    // values can come from the parent scope.\n                    var checkScope = scope.$parent.$new();\n                    checkScope._selectedValues = controller.registerField(\n                        attrs.key, scope);\n                    checkScope._checked = function(val) {\n                        return checkScope._selectedValues.indexOf(val) > -1;\n                    };\n                    checkScope._toggleChecked = function(val) {\n                        var idx = checkScope._selectedValues.indexOf(val);\n                        if(idx > -1) {\n                            // Uncheck.\n                            checkScope._selectedValues.splice(idx, 1);\n                        } else {\n                            // Check.\n                            checkScope._selectedValues.push(val);\n                        }\n                    };\n\n                    // Construct the checkbox list.\n                    inputElement = angular.element([\n                        '<div class=\"width--full\" ',\n                            'data-ng-repeat=\"val in ' + values +'\">',\n                            '<input id=\"' + attrs.key + '_' + '{$ val $}',\n                                '\" type=\"checkbox\" value=\"{$ val $}\" ',\n                                'class=\"checkbox\" ',\n                                'data-ng-checked=\"_checked(val)\" ',\n                                'data-ng-click=\"_toggleChecked(val)\">',\n                            '<label for=\"' + attrs.key + '_',\n                                '{$ val $}' + '\" ',\n                                'class=\"checkbox-label\">{$ val $}</label>',\n                        '</div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(checkScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        checkScope._selectedValues = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return checkScope._selectedValues;\n                    };\n                } else if(attrs.type === \"tags\") {\n                    var tagsScope = scope.$new();\n                    var tags = controller.registerField(\n                        attrs.key, scope);\n                    tagsScope._tags = tags.map(function(val) {\n                        return {text: val};\n                    });\n\n                    // Construct the tags input.\n                    inputElement = angular.element([\n                        '<span data-ng-if=\"ngDisabled()\" ',\n                            'data-ng-repeat=\"tag in _tags\">',\n                            '{$ tag.text $} </span>',\n                        '<tags-input id=\"' + attrs.key + '\" ',\n                            'data-ng-model=\"_tags\" ',\n                            'data-ng-if=\"!ngDisabled()\" ',\n                            'placeholder=\"' + placeholder + '\" ',\n                            'data-ng-change=\"_change()\" ',\n                            'allow-tags-pattern=\"[\\\\w-]+\"></tags-input>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(tagsScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        tagsScope._tags = newValue.map(\n                            function(val) {\n                                return {text: val};\n                            });\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return tagsScope._tags.map(\n                            function(val) {\n                                return val.text;\n                            });\n                    };\n                } else if(attrs.type === \"hidden\") {\n                    var hiddenScope = scope.$new();\n                    hiddenScope._toggle = controller.registerField(\n                        attrs.key, scope);\n                    inputElement = angular.element([\n                        '<input type=\"hidden\" name=\"' + attrs.key + '\" ',\n                        'id=\"' + attrs.key + '\" ',\n                        'value=\"' + attrs.value + '\">',\n                        '</input>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(hiddenScope);\n                    scope.getValue = () => attrs.value;\n                    scope.updateValue = () => null;\n                } else if(attrs.type === \"onoffswitch\") {\n                    var switchScope = scope.$new();\n                    switchScope._toggle = controller.registerField(\n                        attrs.key, scope);\n                    switchScope._changed = function() {\n                        scope._change();\n                        controller.startEditingField(attrs.key);\n                        controller.stopEditingField(\n                            attrs.key, switchScope.getValue());\n                    };\n\n                    // Construct the on and off toggle.\n                    inputElement = angular.element([\n                      '<div class=\"maas-p-switch\">',\n                        '<input type=\"checkbox\" name=\"' + attrs.key + '\" ',\n                          'class=\"maas-p-switch--input\" ',\n                          'id=\"' + attrs.key + '\" ',\n                          'data-ng-model=\"_toggle\" ',\n                          'data-ng-change=\"_changed()\">',\n                        '<div class=\"maas-p-switch--mask\"></div>',\n                      '</div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(switchScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        // WARNING: This code is difficult to unit test, since\n                        // we could not figure out how to get the\n                        // isolateScope() from the transcluded element. Be sure\n                        // to manually test versions of this toggle with and\n                        // without the on-value and off-value attributes, such\n                        // as by verifying that both the on/off toggle on both\n                        // the discovery page and the subnet details page work.\n                        if(attrs.onValue && attrs.onValue === newValue) {\n                            switchScope._toggle = true;\n                        } else if(attrs.offValue &&\n                                attrs.offValue === newValue) {\n                            switchScope._toggle = false;\n                        } else {\n                            switchScope._toggle = newValue;\n                        }\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        // WARNING: This code is difficult to unit test, since\n                        // we could not figure out how to get the\n                        // isolateScope() from the transcluded element. Be sure\n                        // to manually test versions of this toggle with and\n                        // without the on-value and off-value attributes, such\n                        // as by verifying that both the on/off toggle on both\n                        // the discovery page and the subnet details page work.\n                        if(switchScope._toggle) {\n                            if(attrs.onValue) {\n                                return attrs.onValue;\n                            } else {\n                                return true;\n                            }\n                        } else {\n                            if(attrs.offValue) {\n                                return attrs.offValue;\n                            } else {\n                                return false;\n                            }\n                        }\n                    };\n                } else if(attrs.type == \"slider\") {\n                    var sliderScope = scope.$new();\n                    sliderScope._slider = controller.registerField(\n                        attrs.key, scope);\n                    sliderScope._ngDisabled = scope.ngDisabled;\n\n                    // Construct the tags input.\n                    inputElement = angular.element([\n                        '<div class=\"p-slider__wrapper\">',\n                        '<input class=\"p-slider\" type=\"range\"',\n                        'min=\"' + attrs.min + '\" max=\"' + attrs.max + '\" ',\n                        'value=\"1\" step=\"1\" id=\"' + attrs.key + '\" ',\n                        'data-ng-model=\"_slider\" data-ng-disabled=\"',\n                        '_ngDisabled()\">',\n                        '<input class=\"p-slider__input\" type=\"text\" ',\n                        'maxlength=\"3\" id=\"' + attrs.key + '-input\" ',\n                        'data-ng-model=\"_slider\" data-ng-disabled=\"',\n                        '_ngDisabled()\"></div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(sliderScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        sliderScope._slider = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return sliderScope._slider;\n                    };\n                } else {\n                    throw new Error(\n                        \"Unknown type on maas-obj-field: \" + attrs.type);\n                }\n\n                // Called on change.\n                scope._change = function() {\n                    if(angular.isFunction(scope.onChange)) {\n                        scope.onChange(\n                            attrs.key,\n                            controller.getValue(attrs.key),\n                            controller);\n                    }\n                };\n\n                // Copy input class to the input element.\n                if(attrs.inputClass) {\n                    inputElement.addClass(attrs.inputClass);\n                }\n                inputWrapper.append(inputElement);\n\n                // Errors element.\n                var errorsElement = angular.element(\n                    '<ul class=\"p-list u-no-margin--top\"></ul>');\n                if(!controller.isTableForm()) {\n                    errorsElement.addClass(\"form__error\");\n                }\n                inputWrapper.append(errorsElement);\n\n                // Help text elements\n                if (attrs.helpText) {\n                    var helpTextElement = angular.element(\n                        '<p>' + attrs.helpText + '</p>');\n                    helpTextElement.addClass(\"p-form-help-text\");\n                    inputWrapper.append(helpTextElement);\n                }\n\n                // Called by controller to clear all errors.\n                scope.clearErrors = function() {\n                    inputElement.removeClass(\"ng-dirty\");\n                    inputElement.removeClass(\"p-form-validation__input\");\n                    inputWrapper.removeClass(\"p-form-validation\");\n                    inputWrapper.removeClass(\"is-error\");\n                    inputWrapper.removeClass(\"u-no-margin--top\");\n                    errorsElement.empty();\n                };\n\n                // Called by controller to set errors.\n                scope.setErrors = function(errors) {\n                    if(errors.length > 0) {\n                        inputWrapper.addClass(\"p-form-validation\");\n                        inputWrapper.addClass(\"is-error\");\n                        inputWrapper.addClass(\"u-no-margin--top\");\n                        inputElement.addClass(\"ng-dirty\");\n                        inputElement.addClass(\"p-form-validation__input\");\n                        angular.forEach(errors, function(error) {\n                            errorsElement.append(\n                              '<li class=\"p-form-validation__message\">' +\n                              '<strong>Error:</strong> ' + error + '</li>'\n                            );\n                        });\n                        // Set the input in focus but outside of the current\n                        // digest cycle.\n                        setTimeout(function() {\n                            inputElement.focus();\n                        }, 1);\n                    }\n                };\n\n                // Called by controller to see if error is set on field.\n                scope.hasErrors = function() {\n                    return inputWrapper.hasClass(\"is-error\");\n                };\n\n                // Subtle text element.\n                if(attrs.subtleText) {\n                    var subtleTextElement = $compile(\n                        angular.element(\n                            '<span class=\"p-form-help-text\" ' +\n                            'data-ng-bind=\"subtleText\"></span>'))(scope);\n                    inputWrapper.append(subtleTextElement);\n                }\n                element.append(inputWrapper);\n\n                // Watch the showing of saving spinner. Update the elements\n                // correctly to show the saving.\n                scope.$watch(function() {\n                    return controller.showInputSaving(attrs.key);\n                }, function(value) {\n                    if(value) {\n                        inputWrapper.children(\n                            ':first').addClass('u-border--information');\n                        inputWrapper.append(\n                            '<i class=\"obj-saving icon ' +\n                            'p-icon--spinner u-animation--spin\"></i>');\n                        inputWrapper.addClass('p-tooltip');\n                        inputWrapper.addClass('p-tooltip--bottom');\n                        inputWrapper.attr('aria-label', 'Saving');\n                    } else {\n                      inputWrapper.children(\n                          ':first').removeClass('u-border--information');\n                        inputWrapper.find('i.obj-saving').remove();\n                        inputWrapper.removeClass('p-tooltip');\n                        inputWrapper.removeClass('p-tooltip--right');\n                        inputWrapper.removeAttr('aria-label');\n                    }\n                });\n\n                // Called when the scope is destroyed.\n                scope.$on(\"$destroy\", function() {\n                    controller.unregisterField(attrs.key);\n                });\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjSave', function() {\n        return {\n            restrict: \"A\",\n            require: [\"^^maasObjForm\"],\n            scope: {},\n            link: function(scope, element, attrs, controllers) {\n                // Only allow maas-obj-save when saveOnBlur is false.\n                var controller = controllers[0];\n                if(controller.saveOnBlur()) {\n                    throw new Error(\n                        \"maas-obj-save is only allowed when save-on-blur is \" +\n                        \"set to false.\");\n                }\n\n                element.on(\"click\", function() {\n                    scope.$apply(function() {\n                        controller.saveForm();\n                    });\n                });\n            }\n        };\n    });\n\nangular.module('MAAS').directive('maasObjErrors', function() {\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\"],\n            scope: {},\n            template: '<ul class=\"p-list u-no-margin--top\"></ul>',\n            link: function(scope, element, attrs, controllers) {\n                // Set on the controller the global error handler.\n                controllers[0].errorScope = scope;\n                var ul = element.find(\"ul\");\n\n                // Called by controller to clear all errors.\n                scope.clearErrors = function() {\n                    ul.empty();\n                };\n\n                // Called by controller to set errors.\n                scope.setErrors = function(errors) {\n                    if(errors.length > 0) {\n                        angular.forEach(errors, function(error) {\n                            ul.append(\n                              '<li class=\"p-list__item\">' +\n                              '<i class=\"p-icon--error\"></i> ' +\n                              error + '</li>'\n                            );\n                        });\n                    }\n                };\n\n                // Called by controller to see if error is set on field.\n                scope.hasErrors = function() {\n                    return ul.children().length > 0;\n                };\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjSaving', function() {\n        return {\n            restrict: \"E\",\n            require: \"^^maasObjForm\",\n            scope: {},\n            transclude: true,\n            template: [\n              '<span data-ng-if=\"saving\">',\n                '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                '<span data-ng-transclude></span>',\n              '</span>'].join(''),\n            link: function(scope, element, attrs, controller) {\n                scope.saving = false;\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    scope.saving = value;\n                });\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjShowSaving', function() {\n        return {\n            restrict: \"A\",\n            require: \"^^maasObjForm\",\n            link: function(scope, element, attrs, controller) {\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    if(value) {\n                        element.removeClass(\"ng-hide\");\n                    } else {\n                        element.addClass(\"ng-hide\");\n                    }\n                });\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjHideSaving', function() {\n        return {\n            restrict: \"A\",\n            require: \"^^maasObjForm\",\n            link: function(scope, element, attrs, controller) {\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    if(value) {\n                        element.addClass(\"ng-hide\");\n                    } else {\n                        element.removeClass(\"ng-hide\");\n                    }\n                });\n            }\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Creates the auto-formatting for MAC address inputs.\n */\n\nangular.module('MAAS').directive('macAddress', function () {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: function (scope, ele, attr, ngModelCtrl, ngModel) {\n            if (!ngModelCtrl) {\n              return;\n            }\n\n            var macAddressParse = function (value) {\n                return value.toUpperCase();\n            };\n\n            var macAddressFormat = function (value) {\n\n                if (!value) {\n                  return undefined;\n                }\n\n                var numbers = value.replace(/:/g, \"\");\n\n                if (value.length % 3 === 0) {\n\n                    return numbers.replace(/([0-9A-Za-z]{2})/g, \"$1:\");\n                }\n            };\n\n            ngModelCtrl.$parsers.push(macAddressParse);\n            ngModelCtrl.$formatters.push(macAddressFormat);\n\n            ele.on('input', function () {\n                var value = macAddressFormat(ele.val());\n\n                if (value !== undefined) {\n                    ngModelCtrl.$setViewValue(value);\n                    ngModelCtrl.$render();\n                }\n                scope.$apply();\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Machines listing directive.\n*\n* Renders the machines listing.\n*/\n// testing\n\n\n\nangular.module('MAAS').directive('maasMachinesTable', [\n  'MachinesManager', 'GeneralManager', 'ManagerHelperService',\n  function (MachinesManager, GeneralManager, ManagerHelperService) {\n    return {\n      restrict: \"E\",\n      scope: {\n        search: \"=\",\n        ngDisabled: \"&\",\n        machineHasError: \"&\",\n        hideCheckboxes: \"=?\",\n        onListingChange: \"&\",\n        onCheckAll: \"&\",\n        onCheck: \"&\"\n      },\n      templateUrl: (\n        'static/partials/machines-table.html?v=' + (\n          MAAS_config.files_version)),\n      link: function(scope, element, attrs) {\n        // Statuses that should show spinner.\n        var SPINNER_STATUSES = [\n          1,   // commissioning\n          9,   // deploying\n          12,  // releasing\n          14,  // disk erasing\n          17,  // entering rescue mode\n          19,  // exiting rescue mode\n          21   // testing\n        ];\n\n        // Scope variables.\n        scope.table = {\n          column: 'fqdn',\n          predicate: 'fqdn',\n          reverse: false,\n          allViewableChecked: false,\n          machines: MachinesManager.getItems(),\n          filteredMachines: [],\n          osinfo: GeneralManager.getData(\"osinfo\")\n        };\n\n        // Ensures that the checkbox for select all is the correct value.\n        scope.updateAllChecked = function() {\n          // Not checked when the filtered machines are empty.\n          if(scope.table.filteredMachines.length === 0) {\n              scope.table.allViewableChecked = false;\n              return;\n          }\n\n          // Loop through all filtered machines and see if all are checked.\n          var i;\n          for(i = 0; i < scope.table.filteredMachines.length; i++) {\n              if(!scope.table.filteredMachines[i].$selected) {\n                  scope.table.allViewableChecked = false;\n                  return;\n              }\n          }\n          scope.table.allViewableChecked = true;\n        };\n\n        // Selects and deselects visible machines.\n        scope.toggleCheckAll = function() {\n          if(scope.table.allViewableChecked) {\n            angular.forEach(\n              scope.table.filteredMachines, function(machine) {\n                MachinesManager.unselectItem(machine.system_id);\n              });\n          } else {\n            angular.forEach(\n              scope.table.filteredMachines, function(machine) {\n                MachinesManager.selectItem(machine.system_id);\n              });\n          }\n          scope.updateAllChecked();\n          scope.onCheckAll();\n        };\n\n        // Selects and unselects machine.\n        scope.toggleChecked = function(machine) {\n          if(MachinesManager.isSelected(machine.system_id)) {\n            MachinesManager.unselectItem(machine.system_id);\n          } else {\n            MachinesManager.selectItem(machine.system_id);\n          }\n          scope.updateAllChecked();\n          scope.onCheck({$machine: machine});\n        };\n\n        // Sorts the table by predicate.\n        scope.sortTable = function(predicate) {\n            scope.table.predicate = predicate;\n            scope.table.reverse = !scope.table.reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        scope.selectColumnOrSort = function(predicate) {\n            if(scope.table.column !== predicate) {\n                scope.table.column = predicate;\n            } else {\n                scope.sortTable(predicate);\n            }\n        };\n\n        // Return true if spinner should be shown.\n        scope.showSpinner = function(machine) {\n            return SPINNER_STATUSES.indexOf(machine.status_code) > -1;\n        };\n\n        scope.showFailedTestWarning = function(machine) {\n            if(scope.showSpinner(machine)) {\n                return false;\n            }\n            switch(machine.status_code) {\n                // NEW\n                case 0:\n                // COMMISSIONING\n                case 1:\n                // FAILED_COMMISSIONING\n                case 2:\n                // TESTING\n                case 21:\n                // FAILED_TESTING\n                case 22:\n                    return false;\n            }\n            switch(machine.testing_status) {\n                // Tests havn't been run\n                case -1:\n                // Tests have passed\n                case 2:\n                    return false;\n            }\n            return true;\n        };\n\n        // Return true if the other node status should be shown.\n        scope.showNodeStatus = function(machine) {\n            // -1 means tests havn't been run, 2 means tests have passed.\n            if(!scope.showSpinner(machine) &&\n               !scope.showFailedTestWarning(machine) &&\n               machine.other_test_status !== -1 &&\n               machine.other_test_status !== 2) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Returns the release title from osinfo.\n        scope.getReleaseTitle = function(os_release) {\n          if(angular.isArray(scope.table.osinfo.releases)) {\n            for(i = 0; i < scope.table.osinfo.releases.length; i++) {\n              var release = scope.table.osinfo.releases[i];\n              if(release[0] === os_release) {\n                return release[1];\n              }\n            }\n          }\n          return os_release;\n        };\n\n        // Returns the status text to show.\n        scope.getStatusText = function(machine) {\n          var showRelease = ['Deploying', 'Deployed'];\n          if(showRelease.indexOf(machine.status) === -1) {\n            return machine.status;\n          } else {\n            var releaseTitle = scope.getReleaseTitle(\n              machine.osystem + '/' + machine.distro_series);\n            if(machine.osystem === \"ubuntu\") {\n              releaseTitle = releaseTitle.split('\"')[0].trim();\n            }\n            if(machine.status === \"Deployed\") {\n              return releaseTitle;\n            }\n            if(machine.status === \"Deploying\") {\n              return machine.status + ' ' + releaseTitle;\n            }\n          }\n        };\n\n        // When the list of filtered machines change update the all checkbox.\n        scope.$watchCollection(\"table.filteredMachines\", function() {\n          scope.updateAllChecked();\n          scope.onListingChange({$machines: scope.table.filteredMachines});\n        });\n      }\n    };\n}]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Navigation directive.\n *\n * Provides the navigation interactions on all screen sizes\n */\n\n\nangular.module('MAAS').directive(\n  'maasNavigationDropdown', ['$document', function($document) {\n  return {\n    restrict: \"A\",\n    link: function(scope, element, attrs) {\n\n      element.on('click', function(e) {\n        e.stopPropagation();\n        element.parent().find('.p-dropdown__menu').toggleClass('u-hide');\n      });\n\n      $document.on('click', function() {\n        element.parent().find('.p-dropdown__menu').addClass('u-hide');\n      });\n    }\n  };\n}]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Navigation directive.\n *\n * Provides the navigation interactions on all screen sizes\n */\n\n\nangular.module('MAAS').directive(\n  'maasNavigationMobile', ['$document', function($document) {\n  return {\n    restrict: \"A\",\n    link: function(scope, element, attrs) {\n\n      element.on('click', function(e) {\n        e.stopPropagation();\n        var mobileNavMenu = element.parent().parent().find('#mobile-nav-menu');\n        mobileNavMenu.toggleClass('u-show');\n      });\n    }\n  };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Notifications.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject notifications.html into the template cache.\n    $templateCache.put('directive/templates/notifications.html', [\n      '<div class=\"u-no-margin--top\" data-ng-repeat=\"category in categories\"',\n        ' data-ng-init=\"notifications = categoryNotifications[category]\">',\n        // 1 notification.\n        '<span class=\"row\" data-ng-if=\"notifications.length == 1\">',\n          '<ul class=\"p-list\" data-ng-class=\"{\\'is-open\\': shown}\">',\n            '<li data-ng-repeat=\"notification in notifications\"',\n            ' class=\"p-notification\"',\n            ' data-ng-class=\"categoryClasses[notification.category]\">',\n              '<p class=\"p-notification__response\">',\n                '<span data-ng-bind-html=\"notification.message\"></span> ',\n                '<a class=\"p-notification__action\"',\n                ' data-ng-click=\"dismiss(notification)\">Dismiss</a>',\n              '</p>',\n            '</li>',\n          '</ul>',\n        '</span>',\n        // 2 or more notifications.\n        '<div class=\"row p-notification--group\" ',\n             'data-ng-if=\"notifications.length >= 2\"',\n        ' data-ng-init=\"shown = false\">',\n            '<div data-ng-class=\"categoryClasses[notifications[0].category]\">',\n                '<a aria-label=\"{$ notifications.length $} ',\n                    '{$ categoryTitles[category] $}, click to open messages.\"',\n                    ' maas-enter=\"shown = !shown\"',\n                    ' class=\"p-notification__toggle\"',\n                    ' data-ng-click=\"shown = !shown\">',\n                    '<p class=\"p-notification__response\">',\n                        '<span class=\"p-notification__status\"',\n                        ' data-count=\"{$ notifications.length $}\"',\n                        ' data-ng-bind=\"notifications.length + \\' \\' + ',\n                                       'categoryTitles[category]\"></span>',\n                        '<small>',\n                        '<i data-ng-class=\"{ \\'p-icon--expand\\': !shown,',\n                        ' \\'p-icon--collapse\\': shown }\"></i></small>',\n                    '</p>',\n                '</a>',\n                '<ul class=\"p-list--divided\" ',\n                    'data-ng-class=\"{\\'u-hide\\': !shown}\">',\n                    '<li data-ng-repeat=\"notification in notifications\"',\n                    ' class=\"p-list__item\">',\n                    '<p class=\"p-notification__response\">',\n                        '<span data-ng-bind-html=\"notification.message\">',\n                        '</span> ',\n                        '<a class=\"p-notification__action\"',\n                        ' data-ng-click=\"dismiss(notification)\">Dismiss</a>',\n                    '</p>',\n                    '</li>',\n                '</ul>',\n            '</div>',\n        '</div>',\n      '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasNotifications', [\n    \"NotificationsManager\", \"ManagerHelperService\",\n    function(NotificationsManager, ManagerHelperService) {\n        return {\n            restrict: \"E\",\n            templateUrl: 'directive/templates/notifications.html',\n            link: function($scope, element, attrs) {\n                ManagerHelperService.loadManager($scope, NotificationsManager);\n                $scope.notifications = NotificationsManager.getItems();\n                $scope.dismiss = angular.bind(\n                    NotificationsManager, NotificationsManager.dismiss);\n\n                $scope.categories = [\n                    \"error\",\n                    \"warning\",\n                    \"success\",\n                    \"info\"\n                ];\n                $scope.categoryTitles = {\n                    error: \"Errors\",\n                    warning: \"Warnings\",\n                    success: \"Successes\",\n                    info: \"Other messages\"\n                };\n                $scope.categoryClasses = {\n                    error: \"p-notification--negative\",\n                    warning: \"p-notification--caution\",\n                    success: \"p-notification--positive\",\n                    info: \"p-notification\"  // No suffix.\n                };\n                $scope.categoryNotifications = {\n                    error: [],\n                    warning: [],\n                    success: [],\n                    info: []\n                };\n\n                $scope.$watchCollection(\n                    \"notifications\", function() {\n                        var cns = $scope.categoryNotifications;\n                        angular.forEach(\n                            $scope.categories, function(category) {\n                                cns[category].length = 0;\n                            }\n                        );\n                        angular.forEach(\n                            $scope.notifications, function(notification) {\n                                cns[notification.category].push(notification);\n                            }\n                        );\n                    }\n                );\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * OS/Release select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the os-select.html into the template cache.\n    $templateCache.put('directive/templates/os-select.html', [\n        '<div class=\"form__group-input\"> ',\n            '<select name=\"os\" class=\"u-margin--right\" ',\n                'data-ng-model=\"ngModel.osystem\" ',\n                'data-ng-change=\"selectedOSChanged()\" ',\n                'data-ng-options=\"',\n                'os[0] as os[1] for os in maasOsSelect.osystems\">',\n            '</select>',\n        '</div>',\n        '<div class=\"form__group-input\"> ',\n            '<select name=\"release\" class=\"u-margin--right\" ',\n                'data-ng-model=\"ngModel.release\" ',\n                'data-ng-change=\"selectedReleaseChanged()\" ',\n                'data-ng-options=\"',\n                'release[0] as release[1] for release in releases\">',\n            '</select>',\n        '</div>',\n        '<div class=\"form__group-input\"> ',\n            '<select name=\"hwe_kernel\" data-ng-model=\"ngModel.hwe_kernel\" ',\n                'data-ng-show=\"hwe_kernels.length\"',\n                'data-ng-options=\"',\n                'hwe_kernel[0] as hwe_kernel[1] for hwe_kernel ',\n                'in hwe_kernels\">',\n                '<option value=\"\">Default kernel</option>',\n            '</select>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasOsSelect', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            maasOsSelect: '=',\n            ngModel: '='\n        },\n        templateUrl: 'directive/templates/os-select.html',\n        controller: function($scope) {\n\n            // Return only the selectable releases based on the selected os.\n            function getSelectableReleases() {\n                if(angular.isObject($scope.maasOsSelect) &&\n                    angular.isArray($scope.maasOsSelect.releases)) {\n                    var i, allChoices = $scope.maasOsSelect.releases;\n                    var choice, choices = [];\n                    for(i = 0; i < allChoices.length; i++) {\n                        choice = allChoices[i];\n                        if(choice[0].indexOf($scope.ngModel.osystem + '/') > -1)\n                        {\n                            choices.push(choice);\n                        }\n                    }\n                    return choices;\n                }\n                return [];\n            }\n\n            // Return only the selectable kernels based on the selected os.\n            function getSelectableKernels() {\n                if(angular.isObject($scope.maasOsSelect) &&\n                    angular.isObject($scope.maasOsSelect.kernels) &&\n                    angular.isString($scope.ngModel.osystem) &&\n                    angular.isString($scope.ngModel.release)) {\n                    var os = $scope.ngModel.osystem;\n                    var release = $scope.ngModel.release.split('/')[1];\n                    var osKernels = $scope.maasOsSelect.kernels[os];\n                    if(angular.isObject(osKernels)) {\n                        return osKernels[release];\n                    }\n                }\n                return [];\n            }\n\n            // Returns the defaultValue if its in the choices array. Otherwise\n            // it returns the weighted choice if present, followed by the\n            // first choice.\n            function getDefaultOrFirst(array, defaultValue, weightValue) {\n                var i, first, weightedPresent = false;\n                for(i = 0; i < array.length; i++) {\n                    if(angular.isUndefined(first)) {\n                        first = array[i][0];\n                    }\n                    if(array[i][0] === defaultValue) {\n                        return defaultValue;\n                    }\n                    if(angular.isString(weightValue) &&\n                        array[i][0] === weightValue) {\n                        weightedPresent = true;\n                    }\n                }\n                if(weightedPresent) {\n                    return weightValue;\n                }\n                if(angular.isUndefined(first)) {\n                    return null;\n                }\n                return first;\n            }\n\n            // Sets the default selected values for the ngModel. Only sets the\n            // values once the maasOsSelect is populated. Sets the selected\n            // osystem to default_osystem if present, followed by 'ubuntu' if\n            // present, followed by the first available. Sets the selected\n            // release to the default_release if present, followed by the first\n            // available.\n            function setDefault() {\n                // Do nothing if model is already set.\n                if(angular.isString($scope.ngModel.osystem) &&\n                    angular.isString($scope.ngModel.release)) {\n                    return;\n                }\n                // Do nothing if the default is not set.\n                if(angular.isUndefined($scope.maasOsSelect.default_osystem) ||\n                    angular.isUndefined($scope.maasOsSelect.default_release)) {\n                    return;\n                }\n\n                // Set the intial defaults.\n                $scope.ngModel.osystem = getDefaultOrFirst(\n                    $scope.maasOsSelect.osystems,\n                    $scope.maasOsSelect.default_osystem, \"ubuntu\");\n                $scope.releases = getSelectableReleases();\n                $scope.ngModel.release = getDefaultOrFirst(\n                    $scope.releases,\n                    $scope.ngModel.osystem + \"/\" +\n                    $scope.maasOsSelect.default_release);\n                $scope.ngModel.kernel = \"\";\n            }\n\n            // Defaults\n            if(!angular.isObject($scope.ngModel)) {\n                $scope.ngModel = {\n                    osystem: null,\n                    release: null,\n                    hwe_kernel: null\n                };\n            }\n            $scope.releases = getSelectableReleases();\n            $scope.hwe_kernels = getSelectableKernels();\n\n            // Add the reset function to ngModel, allowing users to call\n            // this function to reset the defauls.\n            $scope.ngModel.$reset = function() {\n                $scope.ngModel.osystem = null;\n                $scope.ngModel.release = null;\n                $scope.ngModel.hwe_kernel = null;\n                setDefault();\n            };\n\n            // If the available os change update the available releases and\n            // set the default.\n            $scope.$watch(\"maasOsSelect.releases\", function() {\n                $scope.releases = getSelectableReleases();\n                setDefault();\n            });\n\n            // If the available release change update the available kernels and\n            // set the default.\n            $scope.$watch(\"maasOsSelect.kernels\", function() {\n                $scope.hwe_kernels = getSelectableKernels();\n                setDefault();\n            });\n\n            // Updates the default and selectable releases.\n            $scope.selectedOSChanged = function() {\n                $scope.releases = getSelectableReleases();\n                $scope.hwe_kernels = getSelectableKernels();\n                $scope.ngModel.release = null;\n                $scope.ngModel.hwe_kernel = null;\n                if($scope.releases.length > 0) {\n                    $scope.ngModel.release = $scope.releases[0][0];\n                }\n            };\n\n            // Updates the default and selectable kernels.\n            $scope.selectedReleaseChanged = function() {\n                $scope.hwe_kernels = getSelectableKernels();\n                $scope.ngModel.hwe_kernel = null;\n            };\n        }\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Placeholder directive.\n *\n * Allows the placeholder attribute on an element to be dynamic.\n */\n\n\nangular.module('MAAS').directive('ngPlaceholder', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            ngPlaceholder: \"=\"\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('ngPlaceholder', function() {\n                element[0].placeholder = scope.ngPlaceholder;\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Pod parameters directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the power-parameters.html into the template cache.\n    $templateCache.put('directive/templates/pod-parameters.html', [\n        '<maas-obj-field type=\"options\" key=\"type\" label=\"Pod type\" ',\n          'label-width=\"2\" input-width=\"5\" ',\n          'placeholder=\"Select the pod type\" ',\n          'options=\"type.name as type.description for type in podTypes\" ',\n          'ng-if=\"!hideType\">',\n        '</maas-obj-field>',\n        '<div pod-fields></div>'\n    ].join(''));\n}]);\n\n\nangular.module('MAAS').directive(\n    'maasPodParameters', [\n        '$compile', 'GeneralManager', 'ManagerHelperService', function(\n        $compile, GeneralManager, ManagerHelperService) {\n    return {\n        restrict: \"E\",\n        require: \"^^maasObjForm\",\n        scope: {\n          hideType: '='\n        },\n        templateUrl: 'directive/templates/pod-parameters.html',\n        link: function(scope, element, attrs, controller) {\n            scope.powerTypes = GeneralManager.getData('power_types');\n            scope.podTypes = [];\n            scope.type = null;\n\n            var childScope, fieldsElement = angular.element(\n                element.find('div[pod-fields]'));\n\n            // Function to update the editable fields.\n            var updateFields = function(podType) {\n                var type = null;\n                var i;\n                for(i = 0; i < scope.podTypes.length; i++) {\n                    if(scope.podTypes[i].name === podType) {\n                      type = scope.podTypes[i];\n                    }\n                }\n\n                fieldsElement.empty();\n                if(childScope) {\n                  childScope.$destroy();\n                }\n                if(angular.isObject(type)) {\n                  var html = '<maas-obj-field-group>';\n                  angular.forEach(type.fields, function(field) {\n                      if(field.scope === 'bmc') {\n                          if(field.name === 'power_pass') {\n                              html += (\n                                  '<maas-obj-field type=\"password\" key=\"');\n                          } else {\n                              html += (\n                                  '<maas-obj-field type=\"text\" key=\"');\n                          }\n                          html += (field.name + '\" label=\"' + field.label +\n                            '\" ' + 'label-width=\"2\" input-width=\"5\">' +\n                            '</maas-obj-field>');\n                      }\n                  });\n\n                  if(type.name === 'virsh') {\n                      html += (\n                          '<maas-obj-field type=\"slider\" key=\"' +\n                          'cpu_over_commit_ratio\" label=\"CPU over commit\" ' +\n                          'min=\"0\" max=\"10\" label-width=\"2\" input-width=\"5\">' +\n                          '</maas-obj-field>');\n                      html += (\n                          '<maas-obj-field type=\"slider\" key=\"' +\n                          'memory_over_commit_ratio\" label=\"' +\n                          'Memory over commit\" min=\"0\" max=\"10\" ' +\n                          'label-width=\"2\" input-width=\"5\"></maas-obj-field>');\n                  }\n                  html += '</maas-obj-field-group>';\n                  childScope = scope.$new();\n                  var ele = angular.element(html);\n                  fieldsElement.append(ele);\n                  $compile(ele)(\n                      childScope, undefined, {maasObjForm: controller});\n                }\n            };\n\n            // Return the selected type.\n            var getType = function() {\n                if(scope.hideType) {\n                    return controller.obj.type;\n                } else {\n                    return controller.getValue('type');\n                }\n            };\n\n            // Update the fields when the type changes.\n            scope.$watch(getType, updateFields);\n\n            // Update the pod types when the power types is updated.\n            scope.$watchCollection(\"powerTypes\", function() {\n                scope.podTypes.length = 0;\n                angular.forEach(scope.powerTypes, function(type) {\n                    if(type.driver_type === \"pod\") {\n                        scope.podTypes.push(type);\n                    }\n                });\n                updateFields(getType());\n            });\n\n            // Load the general manager.\n            ManagerHelperService.loadManager(scope, GeneralManager);\n        }\n    };\n}]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Power parameters directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the power-parameters.html into the template cache.\n    $templateCache.put('directive/templates/power-parameters.html', [\n        '<div class=\"p-form__group\">',\n            '<label for=\"power-type\" ',\n                    'class=\"form__group-label col-2\">Power type</label>',\n            '<div class=\"form__group-input col-3\">',\n                '<select name=\"power-type\" id=\"power-type\" ',\n                    'data-ng-disabled=\"ngDisabled\" ',\n                    'data-ng-class=\"{ invalid: !ngModel.type }\" ',\n                    'data-ng-model=\"ngModel.type\" ',\n                    'data-ng-options=\"',\n                    'type as type.description ',\n                    'for type in maasPowerParameters track by type.name\">',\n                    '<option value=\"\" disabled selected>',\n                        'Select your power type',\n                    '</option>',\n                '</select>',\n            '</div>',\n        '</div>',\n        '<div class=\"p-form__group\" ',\n            'data-ng-repeat=\"field in ngModel.type.fields\">',\n            '<label for=\"{$ field.name $}\" class=\"form__group-label col-2\">',\n                '{$ field.label $}',\n            '</label>',\n            '<div class=\"form__group-input col-3\">',\n                '<maas-power-input field=\"field\" ',\n                    'data-ng-disabled=\"ngDisabled\" ',\n                    'data-ng-model=\"ngModel.parameters[field.name]\">',\n            '</div>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasPowerInput', ['$compile',\n    function($compile) {\n        return {\n            restrict: \"E\",\n            require: \"ngModel\",\n            scope: {\n                field: '=',\n                ngModel: '='\n            },\n            link: function(scope, element, attrs) {\n                var type = scope.field.field_type;\n                var req = scope.field.required ? 'required=\"required\" ' : '';\n                var html = \"\";\n                if(type === \"string\" || type === \"mac_address\" ||\n                   type === \"password\") {\n                    // Build an input element with the correct attributes.\n                    var input_type = 'type=\"text\"';\n                    if(type === \"password\") {\n                        // If the input field is a password field, display it\n                        // as text or password depending on if we're editing\n                        // the fields.\n                        input_type = \"data-ng-type=\\\"ngModel.editing && \" +\n                            \"'text' || 'password'\\\"\";\n                    }\n                    html =\n                        '<input ' + input_type + ' ' +\n                        'name=\"' + scope.field.name + '\" ' +\n                        req + 'data-ng-model=\"' + attrs.ngModel + '\" ' +\n                        'data-ng-disabled=\"' + attrs.ngDisabled + '\" ';\n\n                    // Add mac address validation.\n                    if(type === \"mac_address\") {\n                        html +=\n                            'data-ng-pattern=\"' +\n                            '/^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$/\"';\n                    }\n                    html += '>';\n\n                    // Set the default value for the input on the model.\n                    if(angular.isUndefined(scope.ngModel)) {\n                        scope.ngModel = scope.field[\"default\"];\n                    }\n                } else if(type === \"choice\") {\n                    // Build a select element with the correct attributes.\n                    html =\n                        '<select name=\"' + scope.field.name + '\"' +\n                        req + 'data-ng-model=\"' + attrs.ngModel + '\" ' +\n                        'data-ng-disabled=\"' + attrs.ngDisabled + '\" ' +\n                        'data-ng-options=\"' +\n                        'choice[0] as choice[1] for choice in field.choices' +\n                        '\">';\n                    html += '</select>';\n\n                    // Set the default choice on the model.\n                    if(angular.isUndefined(scope.ngModel)) {\n                        if(scope.field[\"default\"]) {\n                            scope.ngModel = scope.field[\"default\"];\n                        }\n                    }\n                } else {\n                    throw new Error(\"Unknown power_type: \"+ type);\n                }\n\n                // Replace the element with the compiled html using the parents\n                // scope. The parent scope is used because we want to build the\n                // element as if it was in the parent scope, not the scope that\n                // is defined in this directive.\n                element.replaceWith($compile(html)(scope.$parent));\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasPowerParameters', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            maasPowerParameters: '=',\n            ngModel: '=',\n            ngDisabled: '='\n        },\n        templateUrl: 'directive/templates/power-parameters.html'\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Proxy settings directive.\n*/\n\nangular.module('MAAS').directive('maasProxySettings', [\n    '$sce', 'ConfigsManager', 'ManagerHelperService', 'JSONService',\n    function($sce, ConfigsManager, ManagerHelperService, JSONService) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            templateUrl: 'static/partials/proxy-settings.html',\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                ManagerHelperService.loadManager(\n                    $scope, ConfigsManager).then(function() {\n                    $scope.loading = false;\n                    $scope.httpProxy = ConfigsManager.getItemFromList(\n                        \"http_proxy\");\n                    $scope.enableHttpProxy = ConfigsManager.getItemFromList(\n                        \"enable_http_proxy\");\n                    $scope.usePeerProxy = ConfigsManager.getItemFromList(\n                        \"use_peer_proxy\");\n                    if ($scope.enableHttpProxy.value) {\n                        if ($scope.httpProxy.value) {\n                            if ($scope.usePeerProxy.value) {\n                                $scope.proxy_type = \"peer-proxy\";\n                            } else {\n                                $scope.proxy_type = \"external-proxy\";\n                            }\n                        } else {\n                            $scope.proxy_type = \"builtin-proxy\";\n                        }\n                    } else {\n                        $scope.proxy_type = \"no-proxy\";\n                    }\n                });\n            }\n        };\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Release name.\n *\n * Converts the provided release name into the release title.\n */\n\n\nangular.module('MAAS').directive('maasReleaseName', [\n    'GeneralManager', 'ManagerHelperService',\n    function(GeneralManager, ManagerHelperService) {\n    return {\n        restrict: \"A\",\n        scope: {\n          releaseName: \"=maasReleaseName\"\n        },\n        link: function(scope, element, attrs) {\n            scope.osinfo = GeneralManager.getData(\"osinfo\");\n\n            // Gets the release name.\n            var getName = function() {\n                if(angular.isArray(scope.osinfo.releases)) {\n                  for(i = 0; i < scope.osinfo.releases.length; i++) {\n                      var release = scope.osinfo.releases[i];\n                      if(release[0] === scope.releaseName) {\n                          return release[1];\n                      }\n                  }\n                }\n                return scope.releaseName;\n            };\n\n            // Sets the text inside the element.\n            var setText = function() {\n                element.text(getName());\n            };\n\n            // Update the text when the release name or osinfo changes.\n            scope.$watch('releaseName', function() {\n              setText();\n            });\n            scope.$watchCollection('osinfo.releases', function() {\n              setText();\n            });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Release options directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the release-options.html into the template cache.\n    $templateCache.put('directive/templates/release-options.html', [\n        '<ul class=\"p-inline-list--settings u-no-margin--top\">',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"diskErase\" ',\n                    'type=\"checkbox\" data-ng-model=\"maasReleaseOptions.erase\" ',\n                    'data-ng-disabled=\"globalOptions.erase\" ',\n                    'data-ng-change=\"onEraseChange()\">',\n                '<label for=\"diskErase\">',\n                    'Erase disks before releasing',\n                '</label>',\n            '</li>',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"secureErase\" ',\n                    'type=\"checkbox\" ',\n                    'data-ng-model=\"maasReleaseOptions.secureErase\" ',\n                    'data-ng-disabled=\"!maasReleaseOptions.erase\">',\n                '<label for=\"secureErase\">',\n                    'Use secure erase',\n                '</label>',\n            '</li>',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"quickErase\" type=\"checkbox\" ',\n                    'data-ng-model=\"maasReleaseOptions.quickErase\" ',\n                    'data-ng-disabled=\"!maasReleaseOptions.erase\">',\n                '<label for=\"quickErase\">',\n                    'Use quick erase (not secure)',\n                '</label>',\n            '</li>',\n        '</ul>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasReleaseOptions', [\n    'GeneralManager', function(GeneralManager) {\n        return {\n            restrict: \"A\",\n            scope: {\n                maasReleaseOptions: '='\n            },\n            templateUrl: 'directive/templates/release-options.html',\n            link: function(scope, element, attrs) {\n                // On click of enabling erasing set the others to the\n                // global default value.\n                scope.onEraseChange = function() {\n                    if(scope.maasReleaseOptions.erase) {\n                        scope.maasReleaseOptions.secureErase = (\n                            scope.globalOptions.secure_erase);\n                        scope.maasReleaseOptions.quickErase = (\n                            scope.globalOptions.quick_erase);\n                    } else {\n                        scope.maasReleaseOptions.secureErase = false;\n                        scope.maasReleaseOptions.quickErase = false;\n                    }\n                };\n\n                // Watch the global options. Once set update the defaults\n                // of maasReleaseOptions.\n                scope.globalOptions = GeneralManager.getData(\n                    \"release_options\");\n                scope.$watch('globalOptions', function() {\n                    if(angular.isDefined(scope.globalOptions.erase)) {\n                        // Set the initial defauls for the release options.\n                        scope.maasReleaseOptions.erase = (\n                            scope.globalOptions.erase);\n                        scope.onEraseChange();\n                    }\n                }, true);\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script expander\n *\n * Expands a scripts content.\n */\n\n\nangular.module('MAAS').directive('pScriptExpander', function() {\n    return {\n        restrict: \"C\",\n        link: function($scope, $element, $attrs) {\n            var link = $element.find('.p-script-expander__trigger');\n            var target = $element.find('.p-script-expander__content');\n            target.addClass('u-hide');\n\n            link.on('click', function(evt) {\n                evt.preventDefault();\n                target.toggleClass('u-hide');\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Script results listing directive.\n*\n*/\n\nangular.module('MAAS').directive('maasScriptResultsList', function() {\n    return {\n        templateUrl: (\n        'static/partials/script-results-list.html?v=' + (\n            MAAS_config.files_version))\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script runtime counter directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script_runtime.html into the template cache.\n    $templateCache.put('directive/templates/script_runtime.html', [\n        '<span data-ng-if=\"(scriptStatus === 1 || scriptStatus === 7) &&',\n        \" estimatedRunTime !== 'Unknown'\" + '\">{{counter}} of ',\n        '~{{estimatedRunTime}}</span>',\n        '<span data-ng-if=\"(scriptStatus === 1 || scriptStatus === 7) &&',\n        \" estimatedRunTime == 'Unknown'\" + '\">{{counter}}</span>',\n        '<span data-ng-if=\"scriptStatus === 0 && estimatedRunTime !== ',\n        \"'Unknown'\" + '\">~{{estimatedRunTime}}</span>',\n        '<span data-ng-if=\"scriptStatus !== 0 && scriptStatus !== 1 ',\n        '&& scriptStatus !== 7\">{{runTime}}</span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasScriptRunTime', function() {\n    return {\n        restrict: \"A\",\n        require: [\"startTime\", \"runTime\", \"estimatedRunTime\", \"scriptStatus\"],\n        scope: {\n            startTime: '=',\n            runTime: '@',\n            estimatedRunTime: '@',\n            scriptStatus: '='\n        },\n        templateUrl: 'directive/templates/script_runtime.html',\n        controller: function($scope, $interval) {\n            $scope.counter = \"0:00:00\";\n\n            function incrementCounter() {\n                if(($scope.scriptStatus === 1 || $scope.scriptStatus === 7) &&\n                    $scope.startTime) {\n                    var seconds = Math.floor(\n                        (Date.now() / 1000) - $scope.startTime);\n                    var minutes = Math.floor(seconds / 60);\n                    var hours = Math.floor(minutes / 60);\n                    var days = Math.floor(hours / 24);\n                    hours = hours - (days * 24);\n                    minutes = minutes - (days * 24 * 60) - (hours * 60);\n                    seconds = seconds - (days * 24 * 60 * 60) -\n                        (hours * 60 * 60) - (minutes * 60);\n                    var new_counter = \"\";\n                    // This outputs the same format used by Python. It is\n                    // import to use the same format as when scripts are not\n                    // running runtime is taken from the region using Python's\n                    // format.\n                    if(days === 1) {\n                        new_counter = days + \" day, \";\n                    }else if(days > 1) {\n                        new_counter = days + \" days, \";\n                    }\n                    new_counter += hours + \":\";\n                    if(minutes < 10) {\n                        new_counter += \"0\" + minutes + \":\";\n                    } else {\n                        new_counter += minutes + \":\";\n                    }\n                    if(seconds < 10) {\n                        new_counter += \"0\" + seconds;\n                    } else {\n                        new_counter += seconds;\n                    }\n                    $scope.counter = new_counter;\n                }\n            }\n\n            // Update the counter on init, start the interval and stop it when\n            // the directive is destroyed.\n            incrementCounter();\n            var promise = $interval(incrementCounter, 1000);\n            $scope.$on('$destroy', function() {\n              $interval.cancel(promise);\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script-select.html into the template cache.\n    $templateCache.put('directive/templates/script-select.html', [\n        '<tags-input data-ng-model=\"ngModel\" placeholder=\"Select scripts\" ',\n                'key-property=\"id\" display-property=\"name\" min-length=1',\n                'on-tag-adding=\"onTagAdding($tag)\" spellcheck=\"false\"',\n                'add-from-autocomplete-only=\"true\" on-tag-removed=\"refocus()\"',\n                'on-tag-adding=\"onTagAdding($tag)\" on-tag-added=\"refocus()\">',\n            '<auto-complete source=\"getScripts($query)\" min-length=\"0\" ',\n                    'load-on-down-arrow=\"true\" load-on-focus=\"true\" ',\n                    'load-on-empty=\"true\" template=\"script-template\" ',\n                    'max-results-to-show=\"1000\">',\n            '</auto-complete>',\n        '</tags-input>',\n        '<script type=\"text/ng-template\" id=\"script-template\">',\n            '<div>',\n                '<p>',\n                    '{{data.name}} {{data.tags_string}}',\n                '</p>',\n                '<span class=\"p-form-help-text\">',\n                    '{{data.description}}',\n                '</span>',\n            '</div>',\n        '</script>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive(\n        'maasScriptSelect',\n        ['$q', 'ScriptsManager', 'ManagerHelperService',\n        function($q, ScriptsManager, ManagerHelperService) {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            ngModel: '=',\n            scriptType: '='\n        },\n        templateUrl: 'directive/templates/script-select.html',\n        link: function($scope, element, attrs, ngModelCtrl) {\n\n            $scope.allScripts = ScriptsManager.getItems();\n            $scope.scripts = [];\n            $scope.getScripts = function(query) {\n                $scope.scripts.length = 0;\n                angular.forEach($scope.allScripts, function(script) {\n                    if(script.script_type === $scope.scriptType &&\n                            script.name.indexOf(query) >= 0) {\n                        script.tags_string = '';\n                        angular.forEach(script.tags, function (tag) {\n                            if(script.tags_string === '') {\n                                script.tags_string = '(' + tag;\n                            } else {\n                                script.tags_string += ', ' + tag;\n                            }\n                        });\n                        if(script.tags_string !== '') {\n                            script.tags_string += ')';\n                        }\n                        $scope.scripts.push(script);\n                    }\n                });\n                return {\n                    data: $scope.scripts\n                };\n            };\n            $scope.onTagAdding = function(tag) {\n                return tag.id !== undefined;\n            };\n\n            $scope.refocus = function() {\n                var tagsInput = element.find('tags-input');\n                var tagsInputScope = tagsInput.isolateScope();\n                tagsInputScope.eventHandlers.input.change('');\n                tagsInputScope.eventHandlers.input.focus();\n                tagsInput.find('input').focus();\n            };\n\n            if(!angular.isArray($scope.ngModel)) {\n                $scope.ngModel = [];\n            }\n            ManagerHelperService.loadManager($scope, ScriptsManager).then(\n                function() {\n                    $scope.ngModel.length = 0;\n                    angular.forEach($scope.allScripts, function(script) {\n                        if(script.script_type === $scope.scriptType &&\n                           script.for_hardware.length === 0) {\n                            if($scope.scriptType === 0) {\n                                // By default MAAS runs all custom\n                                // commissioning scripts in addition to all\n                                // builtin commissioning scripts.\n                                $scope.ngModel.push(script);\n                            } else if($scope.scriptType === 2 &&\n                                    script.tags.indexOf('commissioning') >= 0) {\n                                // By default MAAS runs testing scripts which\n                                // have been tagged 'commissioning'\n                                $scope.ngModel.push(script);\n                            }\n                        }\n                    });\n                }\n            );\n        }\n    };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script status icon select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script_status.html into the template cache.\n    $templateCache.put('directive/templates/script_status.html', [\n        '<span data-ng-class=\"icon\" data-ng-show=\"show\"></span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasScriptStatus', function() {\n    return {\n        restrict: \"A\",\n        require: \"scriptStatus\",\n        scope: {\n            scriptStatus: '='\n        },\n        templateUrl: 'directive/templates/script_status.html',\n        controller: function($scope) {\n            function getIcon() {\n                $scope.show = true;\n                switch($scope.scriptStatus) {\n                    // SCRIPT_STATUS.PENDING\n                    case 0:\n                        $scope.icon = 'p-icon--pending';\n                        break;\n                    // SCRIPT_STATUS.RUNNING\n                    case 1:\n                    // SCRIPT_STATUS.INSTALLING\n                    case 7:\n                        $scope.icon = 'p-icon--running';\n                        break;\n                    // SCRIPT_STATUS.PASSED\n                    case 2:\n                        $scope.icon = 'p-icon--pass';\n                        break;\n                    // SCRIPT_STATUS.FAILED\n                    case 3:\n                    // SCRIPT_STATUS.ABORTED\n                    case 5:\n                    // SCRIPT_STATUS.DEGRADED\n                    case 6:\n                    // SCRIPT_STATUS.FAILED_INSTALLING\n                    case 8:\n                        $scope.icon = 'p-icon--power-error';\n                        break;\n                    // SCRIPT_STATUS.TIMEDOUT\n                    case 4:\n                        $scope.icon = 'p-icon--timed-out';\n                        break;\n                    case -1:\n                        // No scripts have been run.\n                        $scope.show = false;\n                        break;\n                    default:\n                        $scope.icon = 'p-icon--help';\n                        break;\n                }\n            }\n\n            getIcon();\n\n            $scope.$watch(\"scriptStatus\", function() {\n                getIcon();\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * SSH keys directive.\n*/\n\nangular.module('MAAS').directive('maasSshKeys', [\n    '$sce', 'SSHKeysManager', 'ManagerHelperService', 'JSONService',\n    function($sce, SSHKeysManager, ManagerHelperService, JSONService) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            templateUrl: (\n                'static/partials/ssh-keys.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.keys = SSHKeysManager.getItems();\n                $scope.groupedKeys = [];\n                $scope.add = {\n                    source: 'lp',\n                    authId: '',\n                    key: '',\n                    error: null,\n                    saving: false\n                };\n                $scope.sourceTitles = {\n                    'lp': 'Launchpad',\n                    'gh': 'Github',\n                    'upload': 'Upload'\n                };\n                $scope.openRow = null;\n                $scope.rowMode = null;\n\n                // Expose trustAsHtml on the scope for the view to use.\n                $scope.trustAsHtml = $sce.trustAsHtml;\n\n                // Open a row.\n                $scope.open = function(obj, mode) {\n                    $scope.openRow = obj.id;\n                    $scope.rowMode = mode;\n                };\n\n                // Close the open row.\n                $scope.close = function() {\n                    $scope.openRow = null;\n                };\n\n                // Returns true if the key can be imported.\n                $scope.canImportKeys = function() {\n                    if($scope.add.saving) {\n                        return false;\n                    } else if ($scope.add.source === 'lp' ||\n                        $scope.add.source === 'gh') {\n                        return $scope.add.authId.length > 0;\n                    } else {\n                        return $scope.add.key.length > 0;\n                    }\n                };\n\n                // Called to import the key.\n                $scope.importKeys = function() {\n                    if(!$scope.canImportKeys()) {\n                        return;\n                    }\n                    $scope.add.error = null;\n                    $scope.add.saving = true;\n                    if($scope.add.source === 'lp' ||\n                        $scope.add.source === 'gh') {\n                        SSHKeysManager.importKeys({\n                            'protocol': $scope.add.source,\n                            'auth_id': $scope.add.authId\n                        }).then(function() {\n                            $scope.add.saving = false;\n                            $scope.add.source = 'lp';\n                            $scope.add.authId = '';\n                            $scope.add.key = '';\n                        }, function(error) {\n                            $scope.add.saving = false;\n                            var errorJson = JSONService.tryParse(error);\n                            if(angular.isObject(errorJson)) {\n                                if(angular.isArray(errorJson.__all__)) {\n                                    $scope.add.error = errorJson.__all__[0];\n                                } else {\n                                    $scope.add.error = error;\n                                }\n                            } else {\n                                $scope.add.error = error;\n                            }\n                        });\n                    } else {\n                        SSHKeysManager.createItem({\n                            'key': $scope.add.key\n                        }).then(function() {\n                            $scope.add.saving = false;\n                            $scope.add.source = 'lp';\n                            $scope.add.authId = '';\n                            $scope.add.key = '';\n                        }, function(error) {\n                            $scope.add.saving = false;\n                            var errorJson = JSONService.tryParse(error);\n                            if(angular.isObject(errorJson)) {\n                                if(angular.isArray(errorJson.key)) {\n                                    $scope.add.error = errorJson.key[0];\n                                } else if(angular.isArray(errorJson.__all__)) {\n                                    $scope.add.error = errorJson.__all__[0];\n                                } else {\n                                    $scope.add.error = error;\n                                }\n                            } else {\n                                $scope.add.error = error;\n                            }\n                        });\n                    }\n                };\n\n                // Called to delete the selected group of keys.\n                $scope.confirmDelete = function(obj) {\n                    angular.forEach(obj.keys, function(key) {\n                        SSHKeysManager.deleteItem(key);\n                    });\n                };\n\n                // Updates the groupedKeys that is used to render the table.\n                $scope.$watchCollection(\"keys\", function() {\n                    $scope.groupedKeys = [];\n                    var keyMap = {};\n                    angular.forEach($scope.keys, function(key) {\n                        var groupObj, keysource = key.keysource;\n                        if(angular.isObject(keysource)) {\n                            var keysourceKey = (\n                                keysource.protocol + '/' + keysource.auth_id);\n                            groupObj = keyMap[keysourceKey];\n                            if(angular.isObject(groupObj)) {\n                                groupObj.keys.push(key);\n                            } else {\n                                groupObj = {\n                                    id: keysourceKey,\n                                    source: keysource.protocol,\n                                    authId: keysource.auth_id,\n                                    keys: [key]\n                                };\n                                keyMap[keysourceKey] = groupObj;\n                                $scope.groupedKeys.push(groupObj);\n                            }\n                        } else {\n                            groupObj = {\n                                id: 'upload/' + key.id,\n                                source: 'upload',\n                                authId: '',\n                                keys: [key]\n                            };\n                            $scope.groupedKeys.push(groupObj);\n                        }\n                    });\n                });\n\n                ManagerHelperService.loadManager($scope, SSHKeysManager).then(\n                    function() {\n                        $scope.loading = false;\n                    });\n            }\n        };\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Switches listing directive.\n*\n* Renders the switches listing.\n*/\n\n\nangular.module('MAAS').directive('maasSwitchesTable', [\n  'SwitchesManager', 'GeneralManager', 'ManagerHelperService',\n  function (SwitchesManager, GeneralManager, ManagerHelperService) {\n    return {\n      restrict: \"E\",\n      scope: {\n        search: \"=\",\n        ngDisabled: \"&\",\n        switchHasError: \"&\",\n        hideCheckboxes: \"=?\",\n        onListingChange: \"&\",\n        onCheckAll: \"&\",\n        onCheck: \"&\"\n      },\n      templateUrl: (\n        'static/partials/switches-table.html?v=' + (\n          MAAS_config.files_version)),\n      link: function(scope, element, attrs) {\n        // Statuses that should show spinner.\n        var SPINNER_STATUSES = [\n          1,   // commissioning\n          9,   // deploying\n          12,  // releasing\n          14,  // disk erasing\n          17,  // entering rescue mode\n          19,  // exiting rescue mode\n          21   // testing\n        ];\n\n        // Scope variables.\n        scope.table = {\n          column: 'fqdn',\n          predicate: 'fqdn',\n          reverse: false,\n          allViewableChecked: false,\n          switches: SwitchesManager.getItems(),\n          filteredSwitches: [],\n          osinfo: GeneralManager.getData(\"osinfo\")\n        };\n\n        // Ensures that the checkbox for select all is the correct value.\n        scope.updateAllChecked = function() {\n          // Not checked when the filtered switches are empty.\n          if(scope.table.filteredSwitches.length === 0) {\n              scope.table.allViewableChecked = false;\n              return;\n          }\n\n          // Loop through all filtered switches and see if all are checked.\n          var i;\n          for(i = 0; i < scope.table.filteredSwitches.length; i++) {\n              if(!scope.table.filteredSwitches[i].$selected) {\n                  scope.table.allViewableChecked = false;\n                  return;\n              }\n          }\n          scope.table.allViewableChecked = true;\n        };\n\n        // Selects and deselects visible switches.\n        scope.toggleCheckAll = function() {\n          if(scope.table.allViewableChecked) {\n            angular.forEach(\n              scope.table.filteredSwitches, function(switch_) {\n                SwitchesManager.unselectItem(switch_.system_id);\n              });\n          } else {\n            angular.forEach(\n              scope.table.filteredSwitches, function(switch_) {\n                SwitchesManager.selectItem(switch_.system_id);\n              });\n          }\n          scope.updateAllChecked();\n          scope.onCheckAll();\n        };\n\n        // Selects and unselects switch.\n        scope.toggleChecked = function(switch_) {\n          if(SwitchesManager.isSelected(switch_.system_id)) {\n            SwitchesManager.unselectItem(switch_.system_id);\n          } else {\n            SwitchesManager.selectItem(switch_.system_id);\n          }\n          scope.updateAllChecked();\n          scope.onCheck({$switch_: switch_});\n        };\n\n        // Sorts the table by predicate.\n        scope.sortTable = function(predicate) {\n            scope.table.predicate = predicate;\n            scope.table.reverse = !scope.table.reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        scope.selectColumnOrSort = function(predicate) {\n            if(scope.table.column !== predicate) {\n                scope.table.column = predicate;\n            } else {\n                scope.sortTable(predicate);\n            }\n        };\n\n        // Return true if spinner should be shown.\n        scope.showSpinner = function(switch_) {\n          return SPINNER_STATUSES.indexOf(switch_.status_code) > -1;\n        };\n\n        // Returns the release title from osinfo.\n        scope.getReleaseTitle = function(os_release) {\n          if(angular.isArray(scope.table.osinfo.releases)) {\n            for(i = 0; i < scope.table.osinfo.releases.length; i++) {\n              var release = scope.table.osinfo.releases[i];\n              if(release[0] === os_release) {\n                return release[1];\n              }\n            }\n          }\n          return os_release;\n        };\n\n        // Returns the status text to show.\n        scope.getStatusText = function(switch_) {\n          var showRelease = ['Deploying', 'Deployed'];\n          if(showRelease.indexOf(switch_.status) === -1) {\n            return switch_.status;\n          } else {\n            var releaseTitle = scope.getReleaseTitle(\n              switch_.osystem + '/' + switch_.distro_series);\n            if(switch_.osystem === \"ubuntu\") {\n              releaseTitle = releaseTitle.split('\"')[0].trim();\n            }\n            if(switch_.status === \"Deployed\") {\n              return releaseTitle;\n            }\n            if(switch_.status === \"Deploying\") {\n              return switch_.status + ' ' + releaseTitle;\n            }\n          }\n        };\n\n        // When the list of filtered switches change update the all checkbox.\n        scope.$watchCollection(\"table.filteredSwitches\", function() {\n          scope.updateAllChecked();\n          scope.onListingChange({$switches: scope.table.filteredSwitches});\n        });\n      }\n    };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Toggle control.\n */\n\nangular.module('MAAS').directive('toggleCtrl',[\n    '$document',\n    function($document) {\n        return {\n            restrict: 'A',\n            link: function($scope, $element, $attr){\n\n                $scope.isToggled = false;\n                $scope.toggleMenu = function() {\n                  $scope.isToggled = !$scope.isToggled;\n                };\n\n                var clickHandler = function(event) {\n                    if ($element.find(event.target).length > 0) {\n                        return;\n                    }\n                    $scope.$apply(function() {\n                        $scope.isToggled = false;\n                    });\n                };\n\n                $document.on('click', clickHandler);\n                $scope.$on('$destroy', function() {\n                    $document.off('click', clickHandler);\n                });\n            }\n        };\n}]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Type directive.\n */\n\nangular.module('MAAS').directive('ngType', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            ngType: \"=\"\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('ngType', function() {\n                valid_types = [\n                    'button',\n                    'checkbox',\n                    'color',\n                    'date ',\n                    'datetime ',\n                    'datetime-local ',\n                    'email ',\n                    'file',\n                    'hidden',\n                    'image',\n                    'month ',\n                    'number ',\n                    'password',\n                    'radio',\n                    'range ',\n                    'reset',\n                    'search',\n                    'submit',\n                    'tel',\n                    'text',\n                    'time ',\n                    'url',\n                    'week'\n                ];\n                if(valid_types.indexOf(scope.ngType) !== -1) {\n                    element[0].type = scope.ngType;\n                }\n                else {\n                    throw new Error(\"Invalid input type: \" + scope.ngType);\n                }\n\n            });\n        }\n    };\n});","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Version reloader.\n *\n * Watches the version reported by the GeneralManager if it changes then\n * the entire page is reloaded by-passing the local browser cache.\n */\n\n\nangular.module('MAAS').directive('maasVersionReloader', [\n    '$window', 'GeneralManager', 'ManagerHelperService', 'LogService',\n    function($window, GeneralManager, ManagerHelperService, LogService) {\n        return {\n            restrict: \"A\",\n            controller: function($scope) {\n                $scope.version = GeneralManager.getData(\"version\");\n\n                // Reload the page by-passing the browser cache.\n                $scope.reloadPage = function() {\n                    // Force cache reload by passing true.\n                    $window.location.reload(true);\n                };\n\n                ManagerHelperService.loadManager($scope, GeneralManager).then(\n                    function() {\n                        GeneralManager.enableAutoReload(true);\n                        LogService.info(\n                            'Version reloader: Monitoring MAAS \"' +\n                            $scope.site + '\"; version', $scope.version.text,\n                            \"via\", $window.location.href);\n                        $scope.$watch(\"version.text\",\n                            function(newValue, oldValue) {\n                                if(newValue !== oldValue) {\n                                    LogService.info(\n                                        \"MAAS version changed from '\" +\n                                        oldValue + \"' to '\" + newValue +\n                                        \"'; forcing reload.\");\n                                    $scope.reloadPage();\n                                }\n                            });\n                    });\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Window Width.\n *\n * Watches the window width and calculates what the inner width of the window.\n * Applying the attribute window-wdith on the parent element and calling\n * data-ng-if=\"width > 768\" you can use this to hide / show elements for mobile\n * development.\n *\n */\n\n\nangular.module('MAAS').directive('windowWidth', [\n    '$window',\n    function ($window) {\n        return {\n            restrict: 'A',\n            link: function($scope, element, attrs){\n                $scope.windowWidth = $window.innerWidth;\n                function onResize(){\n                    // uncomment for only fire when $window.innerWidth change\n                    if ($scope.windowWidth !== $window.innerWidth) {\n                        $scope.windowWidth = $window.innerWidth;\n                        $scope.$apply(function () {\n                            $scope.message = \"Timeout called!\";\n                        });\n                    }\n                }\n\n                function cleanUp() {\n                    angular.element($window).off('resize', onResize);\n                }\n\n                angular.element($window).on('resize', onResize);\n                $scope.$on('$destroy', cleanUp);\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS BootResource Manager\n *\n * Manager for the boot resources. This manager is unique from all the other\n * managers because it uses polling instead of having the region push the\n * information.\n *\n * Why is it polling?\n * The boot resource information is split between the region controller and\n * all rack controllers. The region controller does not cache any information\n * about a rack controllers images it contacts the rack as its source of truth.\n * This means that the client needs to use polling so the region controller\n * can ask each rack controller what is the status of your images.\n */\n\nangular.module('MAAS').factory(\n    'BootResourcesManager',\n    ['$q', '$timeout', 'RegionConnection', 'ErrorService',\n    function($q, $timeout, RegionConnection, ErrorService) {\n\n        // Constructor\n        function BootResourcesManager() {\n            // Set true once been loaded the first time.\n            this._loaded = false;\n\n            // Holds the data recieved from polling.\n            this._data = {};\n\n            // Set to true when polling has been enabled.\n            this._polling = false;\n\n            // The next promise for the polling interval.\n            this._nextPromise = null;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 500;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n        }\n\n        // Return the data.\n        BootResourcesManager.prototype.getData = function() {\n            return this._data;\n        };\n\n        // Return true when data has been loaded.\n        BootResourcesManager.prototype.isLoaded = function() {\n            return this._loaded;\n        };\n\n        // Returns true when currently polling.\n        BootResourcesManager.prototype.isPolling = function() {\n            return this._polling;\n        };\n\n        // Starts the polling for data.\n        BootResourcesManager.prototype.startPolling = function() {\n            if(!this._polling) {\n                this._polling = true;\n                return this._poll();\n            } else {\n                return this._nextPromise;\n            }\n        };\n\n        // Stops the polling for data.\n        BootResourcesManager.prototype.stopPolling = function() {\n            this._polling = false;\n            if(angular.isObject(this._nextPromise)) {\n                $timeout.cancel(this._nextPromise);\n                this._nextPromise = null;\n            }\n        };\n\n        // Load the data from the region.\n        BootResourcesManager.prototype._loadData = function(raiseError) {\n            raiseError = raiseError || false;\n            var self = this;\n            return RegionConnection.callMethod(\"bootresource.poll\").then(\n                function(newData) {\n                    angular.copy(angular.fromJson(newData), self._data);\n                    self._loaded = true;\n                    return self._data;\n                }, function(error) {\n                    if(raiseError) {\n                        ErrorService.raiseError(error);\n                    }\n                });\n        };\n\n        // Registers the next polling attempt.\n        BootResourcesManager.prototype._pollAgain = function(timeout) {\n            var self = this;\n            this._nextPromise = $timeout(function() {\n                self._poll();\n            }, timeout);\n            return this._nextPromise;\n        };\n\n        // Polls for the data from the region.\n        BootResourcesManager.prototype._poll = function() {\n            var self = this;\n\n            // Can only poll if connected.\n            if(!RegionConnection.isConnected()) {\n                return this._pollAgain(this._pollErrorTimeout);\n            }\n\n            return this._loadData(false).then(function(newData) {\n                var pollTimeout = self._pollTimeout;\n                if(!angular.isObject(newData) ||\n                    newData.connection_error ||\n                    !angular.isArray(newData.resources) ||\n                    newData.resources.length === 0) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(pollTimeout);\n                return newData;\n            }, function(error) {\n                // Don't raise the error, just log it and try again.\n                console.log(error);\n                self._pollAgain(self._pollErrorTimeout);\n            });\n        };\n\n        // Loads the resources. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest.\n        BootResourcesManager.prototype.loadItems = function() {\n            var defer = $q.defer();\n            this._loadData(true).then(function() {\n                defer.resolve();\n            });\n            return defer.promise;\n        };\n\n        // Does nothing. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest.\n        BootResourcesManager.prototype.enableAutoReload = function() { };\n\n        // Stop the running image import process.\n        BootResourcesManager.prototype.stopImport = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.stop_import\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the ubuntu options and start the import process.\n        BootResourcesManager.prototype.saveUbuntu = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_ubuntu\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the Ubuntu Core images and start the import process.\n        BootResourcesManager.prototype.saveUbuntuCore = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_ubuntu_core\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the other images and start the import process.\n        BootResourcesManager.prototype.saveOther = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_other\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Fetch the releases and arches from the provided source.\n        BootResourcesManager.prototype.fetch = function(source) {\n            return RegionConnection.callMethod(\"bootresource.fetch\", source);\n        };\n\n        // Delete an image.\n        BootResourcesManager.prototype.deleteImage = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.delete_image\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        return new BootResourcesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Configs Manager\n *\n * Manages all of the config values in the browser. This manager is used for\n * the first-user journey and the settings page.\n */\n\n angular.module('MAAS').factory(\n     'ConfigsManager',\n     ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n             $q, $rootScope, RegionConnection, Manager) {\n\n         function ConfigsManager() {\n             Manager.call(this);\n\n             this._pk = \"name\";\n             this._handler = \"config\";\n\n             // Listen for notify events for the config object.\n             var self = this;\n             RegionConnection.registerNotifier(\"config\",\n                 function(action, data) {\n                     self.onNotify(action, data);\n                 });\n         }\n\n         ConfigsManager.prototype = new Manager();\n\n         return new ConfigsManager();\n     }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Controllers Manager\n *\n * Manages all of the controllers in the browser. This manager is used for the\n * controller listing and view pages. The manager is a subclass of\n * NodesManager.\n */\n\nangular.module('MAAS').factory(\n    'ControllersManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', 'ServicesManager',\n            function($q, $rootScope, RegionConnection, NodesManager,\n            ServicesManager) {\n\n        function ControllersManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"controller\";\n\n            // Listen for notify events for the controller object.\n            var self = this;\n            RegionConnection.registerNotifier(\"controller\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n        ControllersManager.prototype = new NodesManager();\n\n        ControllersManager.prototype.getServices = function(controller) {\n            var services = [];\n            angular.forEach(controller.service_ids, function(service_id) {\n                var service = ServicesManager.getItemFromList(service_id);\n                if(angular.isObject(service)) {\n                    services.push(service);\n                }\n            });\n            return services;\n        };\n\n        // Check the boot image import status.\n        ControllersManager.prototype.checkImageStates = function(controllers) {\n            return RegionConnection.callMethod(\n                this._handler + \".check_images\", controllers);\n        };\n\n        return new ControllersManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Devices Manager\n *\n * Manages all of the devices in the browser. This manager is used for the\n * device listing and the device view page. The manager uses the\n * RegionConnection to load the devices, update the devices, and listen for\n * notification events about devices.\n */\n\nangular.module('MAAS').factory(\n    'DevicesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function DevicesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"device\";\n            this._metadataAttributes = {\n                \"owner\": null,\n                \"subnets\": null,\n                \"tags\": null,\n                \"zone\": function(device) {\n                    return device.zone.name;\n                }\n            };\n\n            // Listen for notify events for the device object.\n            var self = this;\n            RegionConnection.registerNotifier(\"device\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        DevicesManager.prototype = new NodesManager();\n\n        // Create a device.\n        DevicesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the device to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"device.create\", node);\n        };\n\n        // Create an interface on device.\n        DevicesManager.prototype.createInterface = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"device.create_interface\", params).then(function(device) {\n                    self._replaceItem(device);\n                    return device;\n                });\n        };\n\n        // Perform the action on the device.\n        DevicesManager.prototype.performAction = function(\n            device, action, extra) {\n\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(\"device.action\", {\n                \"system_id\": device.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        return new DevicesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS DHCPSnippet Manager\n *\n * Manages all of the DHCPSnippets in the browser. The manager uses the\n * RegionConnection to load the DHCPSnippets, update the DHCPSnippets, and\n * listen for notification events about DHCPSnippets.\n */\n\nangular.module('MAAS').factory(\n    'DHCPSnippetsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function DHCPSnippetsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"dhcpsnippet\";\n\n            // Listen for notify events for the DHCPSnippet object.\n            var self = this;\n            RegionConnection.registerNotifier(\"dhcpsnippet\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        DHCPSnippetsManager.prototype = new Manager();\n\n        // Create the snippet.\n        DHCPSnippetsManager.prototype.create = function(snippet) {\n            return RegionConnection.callMethod(\n                this._handler + \".create\", snippet, true);\n        };\n\n        return new DHCPSnippetsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Discovery Manager\n *\n * A Discovery is a MAC, IP binding with an optional hostname that MAAS\n * believes it has discovered. It is associated with a particular fabric and\n * VLAN, and is aware of which rack or region interface most recently\n * discovered it.\n *\n * This class manages all of the discoveries in the browser. It uses the\n * RegionConnection to load the discoveries and listen for notification events\n * about discoveries.\n */\n\nangular.module('MAAS').factory(\n    'DiscoveriesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'PollingManager',\n    function($q, $rootScope, RegionConnection, PollingManager) {\n\n        function DiscoveriesManager() {\n            PollingManager.call(this);\n\n            this._pk = \"first_seen\";\n            this._batchKey = \"first_seen\";\n            this._handler = \"discovery\";\n\n            // Poll every 10 seconds when its empty as its okay for\n            // this to be empty.\n            this._pollEmptyTimeout = 5000;\n        }\n\n        DiscoveriesManager.prototype = new PollingManager();\n\n        return new DiscoveriesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domain Manager\n *\n * Manages all of the domains in the browser. The manager uses the\n * RegionConnection to load the domains, update the domains, and listen for\n * notification events about domains.\n */\n\nangular.module('MAAS').factory(\n    'DomainsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function DomainsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"domain\";\n\n            // Listen for notify events for the domain object.\n            var self = this;\n            RegionConnection.registerNotifier(\"domain\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        DomainsManager.prototype = new Manager();\n\n        // Create a domain.\n        DomainsManager.prototype.create = function(domain) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"domain.create\", domain);\n        };\n\n        // Delete the domain.\n        DomainsManager.prototype.deleteDomain = function(domain) {\n            return RegionConnection.callMethod(\"domain.delete\", domain);\n        };\n\n        // Create a DNS record.\n        DomainsManager.prototype.createDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.create_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.create_dnsdata\", record);\n            }\n        };\n\n        // Update a DNS record.\n        DomainsManager.prototype.updateDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.update_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.update_dnsdata\", record);\n            }\n        };\n\n        // Delete a DNS record.\n        DomainsManager.prototype.deleteDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.delete_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.delete_dnsdata\", record);\n            }\n        };\n\n        DomainsManager.prototype.getDefaultDomain = function() {\n            if(this._items.length === 0) {\n                return null;\n            } else {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].id === 0) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return this._items[0];\n        };\n\n        DomainsManager.prototype.getDomainByName = function(name) {\n            if(this._items.length > 0) {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].name === name) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return null;\n        };\n\n        return new DomainsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Event Manager Factory\n *\n * Manages all of the events for a node in the browser. The manager uses the\n * RegionConnection to load the events and listen for event notifications.\n */\n\nangular.module('MAAS').factory(\n    'EventsManagerFactory',\n    ['RegionConnection', 'Manager', 'ErrorService',\n    function(RegionConnection, Manager, ErrorService) {\n\n        function EventsManager(nodeId, factory) {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"event\";\n            this._nodeId = nodeId;\n            this._factory = factory;\n            this._maxDays = 1;\n        }\n\n        EventsManager.prototype = new Manager();\n\n        // Return the initial batch parameters with the id of the node\n        // and the maximum number of days to load.\n        EventsManager.prototype._initBatchLoadParameters = function() {\n            return {\n                \"node_id\": this._nodeId,\n                \"max_days\": this._maxDays\n            };\n        };\n\n        // Destroys its self. Removes self from the EventsManagerFactory.\n        EventsManager.prototype.destroy = function(){\n            this._factory.destroyManager(this);\n\n            // If this manager has ever loaded then the region is sending\n            // events about this node. Tell the RegionConnection not to\n            // stop sending notification for events from this node.\n            if(this.isLoaded()) {\n                RegionConnection.callMethod(\"event.clear\", {\n                    node_id: this._nodeId\n                });\n            }\n        };\n\n        // Get the maximum number of days the manager will load.\n        EventsManager.prototype.getMaximumDays = function() {\n            return this._maxDays;\n        };\n\n        // Changes the maximum number of days to load and loads the items.\n        EventsManager.prototype.loadMaximumDays = function(days) {\n            var self = this;\n            var setMaximumDays = function() {\n                self._maxDays = days;\n                self.loadItems();\n            };\n\n            if(this.isLoading()) {\n                // Call loadItems to get an extra defer to know when\n                // the loading is done.\n                this.loadItems().then(function() {\n                    setMaximumDays();\n                });\n            } else {\n                setMaximumDays();\n            }\n        };\n\n        // Factory that holds all created EventsManagers.\n        function EventsManagerFactory() {\n            // Holds a list of all EventsManager that have been created.\n            this._managers = [];\n\n            // Listen for notify events for the event object.\n            var self = this;\n            RegionConnection.registerNotifier(\"event\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        // Gets the EventManager for the nodes with node_id.\n        EventsManagerFactory.prototype._getManager = function(nodeId) {\n            var i;\n            for(i = 0; i < this._managers.length; i++) {\n                if(this._managers[i]._nodeId === nodeId) {\n                    return this._managers[i];\n                }\n            }\n            return null;\n        };\n\n        // Gets the EventManager for the nodes node_id. Creates a new manager\n        // if one does not exist.\n        EventsManagerFactory.prototype.getManager = function(nodeId) {\n            var manager = this._getManager(nodeId);\n            if(!angular.isObject(manager)) {\n                // Not created so create it.\n                manager = new EventsManager(nodeId, this);\n                this._managers.push(manager);\n                return manager;\n            }\n            return manager;\n        };\n\n        // Destroy the EventManager.\n        EventsManagerFactory.prototype.destroyManager = function(manager) {\n            var idx = this._managers.indexOf(manager);\n            if(idx >= 0) {\n                this._managers.splice(idx, 1);\n            }\n        };\n\n        // Called when the RegionConnection gets a notification for an event.\n        EventsManagerFactory.prototype.onNotify = function(action, data) {\n            if(action === \"delete\") {\n                // Send all delete actions to all managers. Only one will\n                // remove the event with the given id.\n                angular.forEach(this._managers, function(manager) {\n                    manager.onNotify(action, data);\n                });\n            } else if (action === \"create\" || action === \"update\") {\n                // Get the manager based on the node_id in data, and send\n                // it the notification.\n                var manager = this._getManager(data.node_id);\n                if(angular.isObject(manager)) {\n                    manager.onNotify(action, data);\n                }\n            }\n        };\n\n        return new EventsManagerFactory();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Fabric Manager\n *\n * Manages all of the fabrics in the browser. The manager uses the\n * RegionConnection to load the fabrics, update the fabrics, and listen for\n * notification events about fabrics.\n */\n\nangular.module('MAAS').factory(\n    'FabricsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'VLANsManager',\n    function(\n    $q, $rootScope, RegionConnection, Manager, VLANsManager) {\n\n        function FabricsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"fabric\";\n\n            // Listen for notify events for the fabric object.\n            var self = this;\n            RegionConnection.registerNotifier(\"fabric\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        FabricsManager.prototype = new Manager();\n\n        // Given a Fabric object, returns its display name.\n        FabricsManager.prototype.getName = function(fabric) {\n            if(!angular.isObject(fabric)) {\n                return;\n            }\n            if(angular.isString(fabric.name)) {\n                return fabric.name;\n            } else {\n                return this._handler + \"-\" + fabric[this._pk];\n            }\n        };\n\n        // Delete the Fabric.\n        FabricsManager.prototype.deleteFabric = function(fabric) {\n            return RegionConnection.callMethod(\n                \"fabric.delete\", { \"id\": fabric.id }, true);\n        };\n\n        // Create a Fabric.\n        FabricsManager.prototype.create = function(fabric) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"fabric.create\", fabric);\n        };\n\n\n        return new FabricsManager();\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS General Manager\n *\n * Manager for general information from the region. The general handler on the\n * region side does not push information to the client. This manager uses\n * polling to grab this data periodically from the region.\n *\n * This manage provides different pieces of data and is structure differently\n * than extending the Manager service. It still provides the Manager service\n * interface allowing the ManagerHelperService to load this manager.\n */\n\nangular.module('MAAS').factory(\n    'GeneralManager',\n    ['$q', '$timeout', 'RegionConnection', 'ErrorService',\n    function($q, $timeout, RegionConnection, ErrorService) {\n\n        // Constructor\n        function GeneralManager() {\n            // Holds the available endpoints and its data.\n            this._data = {\n                machine_actions: {\n                    method: \"general.machine_actions\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                device_actions: {\n                    method: \"general.device_actions\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                region_controller_actions: {\n                    method: \"general.region_controller_actions\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                rack_controller_actions: {\n                    method: \"general.rack_controller_actions\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                region_and_rack_controller_actions: {\n                    method: \"general.region_and_rack_controller_actions\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                architectures: {\n                    method: \"general.architectures\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                known_architectures: {\n                    method: \"general.known_architectures\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                pockets_to_disable: {\n                    method: \"general.pockets_to_disable\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                components_to_disable: {\n                    method: \"general.components_to_disable\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                hwe_kernels: {\n                    method: \"general.hwe_kernels\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                min_hwe_kernels: {\n                    method: \"general.min_hwe_kernels\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                default_min_hwe_kernel: {\n                    method: \"general.default_min_hwe_kernel\",\n                    data: { text: '' },\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        oldData.text = newData;\n                    }\n                },\n                osinfo: {\n                    method: \"general.osinfo\",\n                    data: {},\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    isEmpty: function(data) {\n                        var osystems = data.osystems;\n                        return (angular.isUndefined(osystems) ||\n                            osystems.length === 0);\n                    },\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                },\n                bond_options: {\n                    method: \"general.bond_options\",\n                    data: {},\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                },\n                version: {\n                    method: \"general.version\",\n                    data: { text: null },\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        oldData.text = newData;\n                    }\n                },\n                power_types: {\n                    method: \"general.power_types\",\n                    data: [],\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        // Add new power types.\n                        var i, j, newPowerType, oldPowerType;\n                        for(i = 0; i < newData.length; i++) {\n                            newPowerType = newData[i];\n                            var newItem = true;\n                            for(j = 0; j < oldData.length; j++) {\n                                oldPowerType = oldData[j];\n                                if(newPowerType.name === oldPowerType.name) {\n                                    newItem = false;\n                                    break;\n                                }\n                            }\n\n                            // Item was previously not in the list so it is\n                            // inserted into the array.\n                            if(newItem) {\n                                oldData.push(newPowerType);\n                            }\n                        }\n\n                        // Remove any power types that are not included in\n                        // the newData.\n                        for(i = oldData.length - 1; i >= 0; i--) {\n                            oldPowerType = oldData[i];\n                            var found = false;\n                            for(j = 0; j < newData.length; j++) {\n                                newPowerType = newData[j];\n                                if(newPowerType.name === oldPowerType.name) {\n                                    found = true;\n                                    break;\n                                }\n                            }\n\n                            // Item was previously not in the list so it is\n                            // inserted into the array.\n                            if(!found) {\n                                oldData.splice(i, 1);\n                            }\n                        }\n                    }\n                },\n                release_options: {\n                    method: \"general.release_options\",\n                    data: {},\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                }\n            };\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 3000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n\n            // Set to true when the items list should reload upon re-connection\n            // to the region.\n            this._autoReload = false;\n\n            // Use the same notify type as a default manager.\n            this._type = 'notify';\n\n            // The scopes that have loaded this manager.\n            this._scopes = [];\n        }\n\n        GeneralManager.prototype._getInternalData = function(name) {\n            var data = this._data[name];\n            if(angular.isUndefined(data)) {\n                throw new Error(\"Unknown data: \" + name);\n            }\n            return data;\n        };\n\n        // Return loaded data.\n        GeneralManager.prototype.getData = function(name) {\n            return this._getInternalData(name).data;\n        };\n\n        // Return true when all data has been loaded.\n        GeneralManager.prototype.isLoaded = function() {\n            var loaded = true;\n            angular.forEach(this._data, function(data) {\n                if(!data.loaded) {\n                    loaded = false;\n                }\n            });\n            return loaded;\n        };\n\n        // Return true when data has been loaded.\n        GeneralManager.prototype.isDataLoaded = function(name) {\n            return this._getInternalData(name).loaded;\n        };\n\n        // Returns true when the manager is currently polling.\n        GeneralManager.prototype.isPolling = function() {\n            var polling = false;\n            angular.forEach(this._data, function(data) {\n                if(data.polling.length > 0) {\n                    polling = true;\n                }\n            });\n            return polling;\n        };\n\n        // Returns true when the manager is currently polling for that data.\n        GeneralManager.prototype.isDataPolling = function(name) {\n            return this._getInternalData(name).polling;\n        };\n\n        // Starts the manager polling for data.\n        GeneralManager.prototype.startPolling = function(scope, name) {\n            var data = this._getInternalData(name);\n            var idx = data.polling.indexOf(scope);\n            if(idx === -1) {\n                data.polling.push(scope);\n                if(data.polling.length === 1) {\n                    // Polling needs to be started. This is the first scope\n                    // that is requesting for polling to be performed.\n                    this._poll(data);\n                }\n            }\n        };\n\n        // Stops the manager polling for data.\n        GeneralManager.prototype.stopPolling = function(scope, name) {\n            var data = this._getInternalData(name);\n            var idx = data.polling.indexOf(scope);\n            if(idx >= 0) {\n                data.polling.splice(idx, 1);\n            }\n            if(data.polling.length === 0 &&\n                angular.isObject(data.nextPromise)) {\n                $timeout.cancel(data.nextPromise);\n                data.nextPromise = null;\n            }\n        };\n\n        // Load the data from the region.\n        GeneralManager.prototype._loadData = function(data, raiseError) {\n            var replaceData = data.replaceData;\n            raiseError = raiseError || false;\n\n            // Set default replaceData function if data doesn't provide its\n            // own function.\n            if(angular.isUndefined(replaceData)) {\n                replaceData = function(oldData, newData) {\n                    oldData.length = 0;\n                    oldData.push.apply(oldData, newData);\n                };\n            }\n\n            return RegionConnection.callMethod(data.method).then(\n                function(newData) {\n                    replaceData(data.data, newData);\n                    data.loaded = true;\n                    return data.data;\n                }, function(error) {\n                    if(raiseError) {\n                        ErrorService.raiseError(error);\n                    }\n                    return error;\n                });\n        };\n\n        GeneralManager.prototype._pollAgain = function(data, timeout) {\n            var self = this;\n            data.nextPromise = $timeout(function() {\n                self._poll(data);\n            }, timeout);\n        };\n\n        // Polls for the data from the region.\n        GeneralManager.prototype._poll = function(data) {\n            var self = this;\n            var isEmpty = data.isEmpty;\n\n            // Set default isEmpty function if data doesn't provide its\n            // own function.\n            if(angular.isUndefined(isEmpty)) {\n                isEmpty = function(data) {\n                    return data.length === 0;\n                };\n            }\n\n            // Can only poll if connected.\n            if(!RegionConnection.isConnected()) {\n                this._pollAgain(data, this._pollErrorTimeout);\n                return;\n            }\n\n            return this._loadData(data, false).then(function(newData) {\n                var pollTimeout = self._pollTimeout;\n                if(isEmpty(data.data)) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(data, pollTimeout);\n                return newData;\n            }, function(error) {\n                // Don't raise the error, just log it and try again.\n                console.log(error);\n                self._pollAgain(data, self._pollErrorTimeout);\n            });\n        };\n\n        // Loads all the items. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest. Optionally pass a\n        // list of specific items to load. Useful when reloading data.\n        GeneralManager.prototype.loadItems = function(items) {\n            var self = this;\n            var defer = $q.defer();\n            var waitingCount;\n            if(angular.isArray(items)) {\n                waitingCount = items.length;\n            }else{\n                waitingCount = Object.keys(this._data).length;\n            }\n            var done = function() {\n                waitingCount -= 1;\n                if(waitingCount === 0) {\n                    defer.resolve();\n                }\n            };\n\n            angular.forEach(this._data, function(data, name) {\n                if(angular.isArray(items) && items.indexOf(name) === -1) {\n                    return;\n                }\n                self._loadData(data, true).then(function() {\n                    done();\n                });\n            });\n\n            return defer.promise;\n        };\n\n        // Enables auto reloading of the item list on connection to region.\n        GeneralManager.prototype.enableAutoReload = function() {\n            if(!this._autoReload) {\n                this._autoReload = true;\n                var self = this;\n                this._reloadFunc = function() {\n                    self.loadItems();\n                };\n                RegionConnection.registerHandler(\"open\", this._reloadFunc);\n            }\n        };\n\n        // Disable auto reloading of the item list on connection to region.\n        GeneralManager.prototype.disableAutoReload = function() {\n            if(this._autoReload) {\n                RegionConnection.unregisterHandler(\"open\", this._reloadFunc);\n                this._reloadFunc = null;\n                this._autoReload = false;\n            }\n        };\n\n        return new GeneralManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS IPRange Manager\n *\n * Manages all of the IPRanges in the browser. The manager uses the\n * RegionConnection to load the IPRanges, update the IPRanges, and listen for\n * notification events about IPRanges.\n */\n\nangular.module('MAAS').factory(\n    'IPRangesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function IPRangesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"iprange\";\n\n            // Listen for notify events for the iprange object.\n            var self = this;\n            RegionConnection.registerNotifier(\"iprange\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        IPRangesManager.prototype = new Manager();\n\n        return new IPRangesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Machines Manager\n *\n * Manages all of the machines in the browser. This manager is used for the\n * machine listing and view pages. The manager is a subclass of NodesManager.\n */\n\nangular.module('MAAS').factory(\n    'MachinesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function MachinesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"machine\";\n\n            this._metadataAttributes = {\n                \"architecture\": null,\n                \"status\": null,\n                \"owner\": null,\n                \"tags\": null,\n                \"pod\": function(machine) {\n                    return (machine.pod === undefined) ? '' :machine.pod.name;\n                },\n                \"zone\": function(machine) {\n                    return machine.zone.name;\n                },\n                \"subnets\": null,\n                \"fabrics\": null,\n                \"spaces\": null,\n                \"storage_tags\": null,\n                \"release\": function(machine) {\n                    if(machine.status_code === 6 || machine.status_code === 9) {\n                        return machine.osystem + \"/\" + machine.distro_series;\n                    } else {\n                        return '';\n                    }\n                }\n            };\n\n            // Listen for notify events for the machine object.\n            var self = this;\n            RegionConnection.registerNotifier(\"machine\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n\n        }\n        MachinesManager.prototype = new NodesManager();\n\n        MachinesManager.prototype.mountSpecialFilesystem =\n            function(machine, fstype, mount_point, mount_options) {\n                var method = this._handler + \".mount_special\";\n                var params = {\n                    system_id: machine.system_id,\n                    fstype: fstype,\n                    mount_point: mount_point,\n                    mount_options: mount_options\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        MachinesManager.prototype.unmountSpecialFilesystem =\n            function(machine, mount_point) {\n                var method = this._handler + \".unmount_special\";\n                var params = {\n                    system_id: machine.system_id,\n                    mount_point: mount_point\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        return new MachinesManager();\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS NodeResultsManager Manager\n *\n * Manages all of the NodeResults in the browser. The manager uses the\n * RegionConnection to load the NodeResults, and listen for\n * notification events about NodeResults.\n */\n\nangular.module('MAAS').factory(\n    'NodeResultsManagerFactory', ['RegionConnection', 'Manager',\n    function(RegionConnection, Manager) {\n\n        function NodeResultsManager(node, factory) {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"noderesult\";\n            this._node = node;\n            this._factory = factory;\n\n            // Store as an array to preserve order.\n            this.commissioning_results = [\n                {\n                    title: null,\n                    hardware_type: 0,\n                    results: {}\n                },\n                {\n                    title: \"CPU\",\n                    hardware_type: 1,\n                    results: {}\n                },\n                {\n                    title: \"Memory\",\n                    hardware_type: 2,\n                    results: {}\n                },\n                {\n                    title: \"Storage\",\n                    hardware_type: 3,\n                    results: {}\n                }\n            ];\n            this.testing_results = [\n                {\n                    title: \"CPU\",\n                    hardware_type: 1,\n                    results: {}\n                },\n                {\n                    title: \"Memory\",\n                    hardware_type: 2,\n                    results: {}\n                },\n                {\n                    title: \"Storage\",\n                    hardware_type: 3,\n                    results: {}\n                },\n                {\n                    title: \"Other Results\",\n                    hardware_type: 0,\n                    results: {}\n                }\n            ];\n            this.installation_results = [];\n\n            // Listen for notify events for the ScriptResult object.\n            // This is noderesult instead of scriptresult because the\n            // class name is NodeResultHandler.\n            var self = this;\n            RegionConnection.registerNotifier(\"noderesult\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        NodeResultsManager.prototype = new Manager();\n\n        NodeResultsManager.prototype._getStorageSubtext = function(disk) {\n            var deviceinfo = '';\n            if(disk.model !== '') {\n                deviceinfo += \"Model: \" + disk.model;\n            }\n            if(disk.serial !== '') {\n                if(deviceinfo !== '') {\n                    deviceinfo += ', ';\n                }\n                deviceinfo += \"Serial: \" + disk.serial;\n            }\n            if(deviceinfo !== '') {\n                return '/dev/' + disk.name + ' (' + deviceinfo + ')';\n            }else{\n                return '/dev/' + disk.name;\n            }\n        };\n\n        NodeResultsManager.prototype._updateObject = function(\n            existing, updated) {\n            angular.forEach(updated, function(value, key) {\n                if(existing[key] !== value && key !== 'showing_results' &&\n                   key !== 'showing_history' && key !== 'showing_menu' &&\n                   key !== '$selected') {\n                    existing[key] = value;\n                }\n            });\n        };\n\n        NodeResultsManager.prototype._addOrReplace = function(results, result) {\n            var i;\n            for(i = 0; i < results.length; i++) {\n                if(results[i].name === result.name) {\n                    // Object already exists, update fields.\n                    result.$selected = results[i].$selected;\n                    result.showing_results = results[i].showing_results;\n                    result.showing_history = results[i].showing_history;\n                    result.showing_menu = results[i].showing_menu;\n                    angular.copy(result, results[i]);\n                    return;\n                }\n            }\n            // No result with the same name exists, add it to the sorted list.\n            for(i = 0; i < results.length; i++) {\n                if(results[i].name > result.name) {\n                    results.splice(i, 0, result);\n                    return;\n                }\n            }\n            results.push(result);\n        };\n\n        NodeResultsManager.prototype._processItem = function(result) {\n            var results;\n            result.showing_results = false;\n            result.showing_history = false;\n            result.showing_menu = false;\n            result.result_section = \"scripts\";\n\n            if(result.result_type === 0) {\n                results = this.commissioning_results;\n            } else if(result.result_type === 1) {\n                // Installation results are not split into hardware types or\n                // have subtext labels.\n                this._addOrReplace(this.installation_results, result);\n                return;\n            } else {\n                // Store all remaining result types as test results in case\n                // another result type is ever added.\n                results = this.testing_results;\n                result.result_section = \"tests\";\n            }\n            var i;\n            // Fallback to storing results in other results incase a new type\n            // is added\n            var hardware_type_results = results[3];\n            for(i = 0; i < results.length; i++) {\n                if(results[i].hardware_type === result.hardware_type) {\n                    hardware_type_results = results[i].results;\n                    break;\n                }\n            }\n\n            if(result.hardware_type === 3 &&\n               result.physical_blockdevice !== null) {\n                // Storage results are split into individual components.\n                var disk, subtext;\n                // If the storage result is associated with a specific\n                // component generate subtext for that component.\n                for(i = 0; i < this._node.disks.length; i++) {\n                    disk = this._node.disks[i];\n                    if(disk.id === result.physical_blockdevice) {\n                        subtext = this._getStorageSubtext(disk);\n                        if(!angular.isArray(\n                            hardware_type_results[subtext])) {\n                                hardware_type_results[subtext] = [];\n                        }\n                        this._addOrReplace(\n                            hardware_type_results[subtext], result);\n                        break;\n                    }\n                }\n            } else {\n                // Other hardware types are not split into individual\n                // components.\n                if(!angular.isArray(hardware_type_results[null])) {\n                    hardware_type_results[null] = [];\n                }\n                this._addOrReplace(hardware_type_results[null], result);\n            }\n        };\n\n        NodeResultsManager.prototype._removeItem = function(result) {\n            var idx = this._getIndexOfItem(this._items, result.id);\n            if(idx >= 0) {\n                this._updateMetadata(this._items[idx], \"delete\");\n            }\n            this._removeItemByIdFromArray(this._items, result.id);\n            this._removeItemByIdFromArray(this._selectedItems, result.id);\n\n            var self = this;\n            angular.forEach(this.commissioning_results, function(hw_type) {\n                angular.forEach(hw_type.results, function(results, subtext) {\n                    self._removeItemByIdFromArray(results, result.id);\n                    if(results.length === 0)\n                    {\n                        delete hw_type.results[subtext];\n                    }\n                });\n            });\n            angular.forEach(this.testing_results, function(hw_type) {\n                angular.forEach(hw_type.results, function(results, subtext) {\n                    self._removeItemByIdFromArray(results, result.id);\n                    if(results.length === 0)\n                    {\n                        delete hw_type.results[subtext];\n                    }\n                });\n            });\n            this._removeItemByIdFromArray(this.installation_results, result.id);\n        };\n\n        // Return the list of ScriptResults for the given node when retrieving\n        // the initial list.\n        NodeResultsManager.prototype._initBatchLoadParameters = function() {\n            var ret = {\n                \"system_id\": this._node.system_id\n            };\n            // Limit the results returned to what can be viewed.\n            if(this._area === \"summary\") {\n                ret.has_surfaced = true;\n                ret.result_type = 2;\n            }else if(this._area === \"testing\") {\n                ret.result_type = 2;\n            }else if(this._area === \"commissioning\") {\n                ret.result_type = 0;\n            }else if(this._area === \"logs\") {\n                ret.result_type = 1;\n            }\n            return ret;\n        };\n\n        // Destroys itself. Removes self from the NodeResultsManagerFactory.\n        NodeResultsManager.prototype.destroy = function() {\n            this._factory.destroyManager(this);\n\n            // If this manager has ever loaded then the region is sending\n            // results from this node. Tell the RegionConnection to stop.\n            if(this.isLoaded()) {\n                var method = this._handler + \".clear\";\n                RegionConnection.callMethod(method, {\n                    system_id: this._node.system_id\n                });\n            }\n        };\n\n        // Get result data.\n        NodeResultsManager.prototype.get_result_data = function(\n            script_id, data_type) {\n            var method = this._handler + \".get_result_data\";\n            var params = {\n                id: script_id,\n                data_type: data_type\n            };\n            return RegionConnection.callMethod(method, params);\n        };\n\n        // Get historic data.\n        NodeResultsManager.prototype.get_history = function(script_id) {\n            var method = this._handler + \".get_history\";\n            var params = {\n                id: script_id,\n            };\n            return RegionConnection.callMethod(method, params);\n        };\n\n        // Factory that holds all created NodeResultsManagers.\n        function NodeResultsManagerFactory() {\n            // Holds a list of all NodeResultsManagers that have been created.\n            this._managers = [];\n        }\n\n        // Gets the NodeResultsManager for the nodes with node_system_id.\n        NodeResultsManagerFactory.prototype._getManager = function(node) {\n            var i;\n            for(i = 0; i < this._managers.length; i++) {\n                if(this._managers[i]._node.system_id === node.system_id) {\n                    return this._managers[i];\n                }\n            }\n            return null;\n        };\n\n        // Gets the NodeResultsManager for the nodes system_id. Creates a new\n        // manager if one does not exist.\n        NodeResultsManagerFactory.prototype.getManager = function(\n            node, area) {\n            var manager = this._getManager(node);\n            if(!angular.isObject(manager)) {\n                // Not created so create it.\n                manager = new NodeResultsManager(node, this);\n                this._managers.push(manager);\n            }\n            manager._area = area;\n            if(area === \"commissioning\") {\n                manager.results = manager.commissioning_results;\n            }else if(area === \"logs\") {\n                manager.results = manager.installation_results;\n            }else{\n                manager.results = manager.testing_results;\n            }\n            return manager;\n        };\n\n        // Destroy the NodeResultsManager.\n        NodeResultsManagerFactory.prototype.destroyManager = function(manager) {\n            var idx = this._managers.indexOf(manager);\n            if(idx >= 0) {\n                this._managers.splice(idx, 1);\n            }\n        };\n\n        return new NodeResultsManagerFactory();\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Manager\n *\n * Manages all of the nodes in the browser. This manager is used for the\n * machine and controller listing and view pages (as machines and controllers\n * are both Nodes).  The manager uses the RegionConnection to load the nodes,\n * update the nodes, and listen for notification events about nodes.\n */\n\nangular.module('MAAS').service(\n    'NodesManager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, $timeout, RegionConnection, Manager) {\n\n        function NodesManager() {\n            Manager.call(this);\n        }\n\n        NodesManager.prototype = new Manager();\n\n        // Create a node.\n        NodesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the node to the list. Adding it here will cause angular\n            // to complain because the same object exist in the list.\n            return RegionConnection.callMethod(\n                this._handler + \".create\", node);\n        };\n\n        // Perform the action on the node.\n        NodesManager.prototype.performAction = function(\n            node, action, extra) {\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(this._handler + \".action\", {\n                \"system_id\": node.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        // Check the power state for the node.\n        NodesManager.prototype.checkPowerState = function(node) {\n            return RegionConnection.callMethod(this._handler + \".check_power\", {\n                \"system_id\": node.system_id\n                }).then(function(state) {\n                    node.power_state = state;\n                    return state;\n                }, function(error) {\n                    node.power_state = \"error\";\n\n                    // Already been logged server side, but log it client\n                    // side so if they really care they can see why.\n                    console.log(error);\n\n                    // Return the state as error to the remaining callbacks.\n                    return \"error\";\n                });\n        };\n\n        // Create the physical interface on the node.\n        NodesManager.prototype.createPhysicalInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_physical\", params);\n            };\n\n        // Create the VLAN interface on the node.\n        NodesManager.prototype.createVLANInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_vlan\", params);\n            };\n\n        // Create the bond interface on the node.\n        NodesManager.prototype.createBondInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bond\", params);\n            };\n\n        // Create the bridge interface on the node.\n        NodesManager.prototype.createBridgeInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bridge\", params);\n            };\n\n        // Update the interface for the node.\n        NodesManager.prototype.updateInterface = function(\n            node, interface_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.interface_id = interface_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".update_interface\", params);\n            };\n\n        // Update an interface from a maas-obj-form.\n        NodesManager.prototype.updateInterfaceForm = function(\n            params) {\n                return RegionConnection.callMethod(\n                    this._handler + \".update_interface\", params);\n            };\n\n        // Delete the interface for the node.\n        NodesManager.prototype.deleteInterface = function(\n            node, interface_id) {\n                var params = {\n                    system_id: node.system_id,\n                    interface_id: interface_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".delete_interface\", params);\n            };\n\n        // Create or update the link to the subnet for the interface.\n        NodesManager.prototype.linkSubnet = function(\n            node, interface_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.interface_id = interface_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".link_subnet\", params);\n            };\n\n        // Remove the link to the subnet for the interface.\n        NodesManager.prototype.unlinkSubnet = function(\n            node, interface_id, link_id) {\n                var params = {\n                    system_id: node.system_id,\n                    interface_id: interface_id,\n                    link_id: link_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".unlink_subnet\", params);\n            };\n\n        // Send the update information to the region.\n        NodesManager.prototype.updateFilesystem = function(\n            node, block_id, partition_id, fstype, mount_point, mount_options,\n            tags) {\n                var self = this;\n                var method = this._handler + \".update_filesystem\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id,\n                    partition_id: partition_id,\n                    fstype: fstype,\n                    mount_point: mount_point,\n                    mount_options: mount_options,\n                    tags: tags\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the disk.\n        NodesManager.prototype.deleteDisk = function(\n            node, block_id) {\n                var self = this;\n                var method = this._handler + \".delete_disk\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the partition.\n        NodesManager.prototype.deletePartition = function(\n            node, partition_id) {\n                var self = this;\n                var method = this._handler + \".delete_partition\";\n                var params = {\n                    system_id: node.system_id,\n                    partition_id: partition_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the disk or partition.\n        NodesManager.prototype.deleteVolumeGroup = function(\n            node, volume_group_id) {\n                var self = this;\n                var method = this._handler + \".delete_volume_group\";\n                var params = {\n                    system_id: node.system_id,\n                    volume_group_id: volume_group_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete a cache set.\n        NodesManager.prototype.deleteCacheSet = function(\n            node, cache_set_id) {\n                var self = this;\n                var method = this._handler + \".delete_cache_set\";\n                var params = {\n                    system_id: node.system_id,\n                    cache_set_id: cache_set_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete a filesystem.\n        NodesManager.prototype.deleteFilesystem = function(\n            node, blockdevice_id, partition_id, filesystem_id) {\n                var self = this;\n                var method = this._handler + \".delete_filesystem\";\n                var params = {\n                    system_id: node.system_id,\n                    blockdevice_id: blockdevice_id,\n                    partition_id: partition_id,\n                    filesystem_id: filesystem_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new partition.\n        NodesManager.prototype.createPartition = function(\n            node, block_id, size, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                var self = this;\n                var method = this._handler + \".create_partition\";\n                params.system_id = node.system_id;\n                params.block_id = block_id;\n                params.partition_size = size;\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new cache set.\n        NodesManager.prototype.createCacheSet = function(\n            node, block_id, partition_id) {\n                var self = this;\n                var method = this._handler + \".create_cache_set\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id,\n                    partition_id: partition_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new bcache device.\n        NodesManager.prototype.createBcache = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bcache\", params);\n            };\n\n        // Create a new RAID device.\n        NodesManager.prototype.createRAID = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_raid\", params);\n            };\n\n        // Create a new volume group.\n        NodesManager.prototype.createVolumeGroup = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_volume_group\", params);\n            };\n\n        // Create a new logical volume.\n        NodesManager.prototype.createLogicalVolume = function(\n            node, volume_group_id, name, size, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                var self = this;\n                var method = this._handler + \".create_logical_volume\";\n                params.system_id = node.system_id;\n                params.volume_group_id = volume_group_id;\n                params.name = name;\n                params.size = size;\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Update a disk.\n        NodesManager.prototype.updateDisk = function(\n            node, block_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.block_id = block_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".update_disk\", params);\n            };\n\n        // Set disk as the boot disk.\n        NodesManager.prototype.setBootDisk = function(\n            node, block_id) {\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".set_boot_disk\", params);\n            };\n\n        NodesManager.prototype.getSummaryXML = function(node) {\n            return RegionConnection.callMethod(\n                this._handler + \".get_summary_xml\",\n                {\"system_id\": node.system_id});\n        };\n\n        NodesManager.prototype.getSummaryYAML = function(node) {\n            return RegionConnection.callMethod(\n                this._handler + \".get_summary_yaml\",\n                {\"system_id\": node.system_id});\n        };\n\n        return NodesManager;\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Notifications Manager.\n *\n * Manages notifications in the browser. Uses RegionConnection to load\n * notifications, await new, updated, and deleted notifications, and to\n * dismiss them.\n */\n\nangular.module('MAAS').factory(\n    'NotificationsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n     function($q, $rootScope, RegionConnection, Manager) {\n\n        function NotificationsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"notification\";\n\n            // Listen for notify events for the notification object.\n            RegionConnection.registerNotifier(\n                \"notification\", angular.bind(this, this.onNotify));\n        }\n\n        NotificationsManager.prototype = new Manager();\n        NotificationsManager.prototype.dismiss = function(notification) {\n            return RegionConnection.callMethod(\n                \"notification.dismiss\", {id: notification.id});\n        };\n\n        return new NotificationsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS PackageRepositories Manager\n *\n * Manages all of the PackageRepositories in the browser. The manager uses the\n * RegionConnection to load the PackageRepositories, update them, and listen\n * for notification events about them.\n */\n\nangular.module('MAAS').factory(\n    'PackageRepositoriesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function PackageRepositoriesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"packagerepository\";\n\n            // Listen for notify events for the PackageRepository object.\n            var self = this;\n            RegionConnection.registerNotifier(\"packagerepository\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        PackageRepositoriesManager.prototype = new Manager();\n\n        // Create the repository.\n        PackageRepositoriesManager.prototype.create = function(repository) {\n            return RegionConnection.callMethod(\n                this._handler + \".create\", repository, true);\n        };\n\n        return new PackageRepositoriesManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pods Manager\n *\n * Manages all of the pods in the browser. The manager uses the\n * RegionConnection to load the pods, update the pods, and listen for\n * notification events about pods.\n */\n\nangular.module('MAAS').service(\n    'PodsManager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, $timeout, RegionConnection, Manager) {\n\n        function PodsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"pod\";\n\n            // Listen for notify events for the pod object.\n            var self = this;\n            RegionConnection.registerNotifier(\"pod\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        PodsManager.prototype = new Manager();\n\n        // Refresh the pod information\n        PodsManager.prototype.refresh = function(pod) {\n            var self = this;\n            return RegionConnection.callMethod(\"pod.refresh\", pod).then(\n                function(pod) {\n                    self._replaceItem(pod);\n                    return pod;\n                });\n        };\n\n        // Compose a machine in the pod.\n        PodsManager.prototype.compose = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\"pod.compose\", params).then(\n                function(pod) {\n                    self._replaceItem(pod);\n                    return pod;\n                });\n        };\n\n        return new PodsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Region Connection\n *\n * Provides the websocket connection between the client and the MAAS regiond\n * service.\n */\n\nangular.module('MAAS').factory(\n    'RegionConnection',\n    ['$q', '$rootScope', '$timeout', '$window', '$cookies', function(\n        $q, $rootScope, $timeout, $window, $cookies) {\n\n        // Message types\n        var MSG_TYPE = {\n            REQUEST: 0,\n            RESPONSE: 1,\n            NOTIFY: 2\n        };\n\n        // Response types\n        var RESPONSE_TYPE = {\n            SUCCESS: 0,\n            ERROR: 1\n        };\n\n        // Constructor\n        function RegionConnection() {\n            this.callbacks = {};\n            this.requests = {};\n            this.requestId = 0;\n            this.url = null;\n            this.websocket = null;\n            this.connected = false;\n            this.autoReconnect = true;\n            this.retryTimeout = 5000;\n            this.error = null;\n\n            // Defer used for defaultConnect. If defaultConnect is called\n            // quickly only the first one will start the connection. The\n            // remaining will recieve this defer.\n            this.defaultConnectDefer = null;\n\n            // List of functions to call when a WebSocket event occurs. Each\n            // function will get the WebSocket event passed to it.\n            this.handlers = {\n                open: [],\n                error: [],\n                close: []\n            };\n\n            // Object containing a fields with list of functions. When\n            // a NOTIFY message is received it will match the name to a field\n            // in this object. If the field exists in the object the list\n            // of functions will be called with the action and obj_id.\n            this.notifiers = {};\n        }\n\n        // Return a new request id.\n        RegionConnection.prototype.newRequestId = function() {\n            this.requestId += 1;\n            return this.requestId;\n        };\n\n        // Register event handler.\n        RegionConnection.prototype.registerHandler = function (name, func) {\n            if(!angular.isDefined(this.handlers[name])) {\n                throw new Error(\"Invalid handler: \" + name);\n            }\n            if(!angular.isFunction(func)) {\n                throw new Error(\"Requires a function to register a handler.\");\n            }\n            this.handlers[name].push(func);\n        };\n\n        // Unregister event handler.\n        RegionConnection.prototype.unregisterHandler = function (name, func) {\n            if(!angular.isDefined(this.handlers[name])) {\n                throw new Error(\"Invalid handler: \" + name);\n            }\n            var idx = this.handlers[name].indexOf(func);\n            if(idx >= 0) {\n                this.handlers[name].splice(idx, 1);\n            }\n        };\n\n        // Register notification handler.\n        RegionConnection.prototype.registerNotifier = function(name, func) {\n            if(!angular.isFunction(func)) {\n                throw new Error(\"Requires a function to register a notifier.\");\n            }\n            if(angular.isUndefined(this.notifiers[name])) {\n                this.notifiers[name] = [];\n            }\n            this.notifiers[name].push(func);\n        };\n\n        // Unregister notification handler.\n        RegionConnection.prototype.unregisterNotifier = function(name, func) {\n            if(angular.isUndefined(this.notifiers[name])) {\n                return;\n            }\n            var idx = this.notifiers[name].indexOf(func);\n            if(idx >= 0) {\n                this.notifiers[name].splice(idx, 1);\n            }\n        };\n\n        // Return True if currently connected to region.\n        RegionConnection.prototype.isConnected = function() {\n            return this.connected;\n        };\n\n        // Builds the websocket connection.\n        RegionConnection.prototype.buildSocket = function(url) {\n            return new WebSocket(url);\n        };\n\n        // Opens the websocket connection.\n        RegionConnection.prototype.connect = function() {\n            this.url = this._buildUrl();\n            this.autoReconnect = true;\n            this.websocket = this.buildSocket(this.url);\n\n            var self = this;\n            this.websocket.onopen = function(evt) {\n                self.connected = true;\n                angular.forEach(self.handlers.open, function(func) {\n                    func(evt);\n                });\n            };\n            this.websocket.onerror = function(evt) {\n                angular.forEach(self.handlers.error, function(func) {\n                    func(evt);\n                });\n            };\n            this.websocket.onclose = function(evt) {\n                self.connected = false;\n                self.error = \"Unable to connect to: \" + self.url.split(\"?\")[0];\n                angular.forEach(self.handlers.close, function(func) {\n                    func(evt);\n                });\n                if(self.autoReconnect) {\n                    $timeout(function() {\n                        self.connect();\n                    }, self.retryTimeout);\n                }\n            };\n            this.websocket.onmessage = function(evt) {\n                self.onMessage(angular.fromJson(evt.data));\n            };\n        };\n\n        // Closes the websocket connection.\n        RegionConnection.prototype.close = function() {\n            this.autoReconnect = false;\n            this.websocket.close();\n            this.websocket = null;\n        };\n\n        // Return the protocol used for the websocket connection.\n        RegionConnection.prototype._getProtocol = function() {\n            return $window.location.protocol;\n        };\n\n        // Return connection url to websocket from current location and\n        // html options.\n        RegionConnection.prototype._buildUrl = function() {\n            var host = $window.location.hostname;\n            var port = $window.location.port;\n            var path = $window.location.pathname;\n            var proto = 'ws';\n            if (this._getProtocol() === 'https:') {\n                proto = 'wss';\n            }\n\n            // Path and port can be overridden by href and data-websocket-port\n            // in the base element respectively.\n            var base = angular.element(\"base\");\n            if(angular.isDefined(base)) {\n                var newPath = base.attr(\"href\");\n                if(angular.isDefined(newPath)) {\n                    path = newPath;\n                }\n                var newPort = base.data(\"websocket-port\");\n                if(angular.isDefined(newPort)) {\n                    port = newPort;\n                }\n            }\n\n            // Append final '/' if missing from end of path.\n            if(path[path.length - 1] !== '/') {\n                path += '/';\n            }\n\n            // Build the URL. Include the :port only if it has a value.\n            url = proto + \"://\" + host;\n            if(angular.isString(port) && port.length > 0){\n                url += \":\" + port;\n            }\n            url += path + \"ws\";\n\n            // Include the csrftoken in the URL if it's defined.\n            var csrftoken;\n            if(angular.isFunction($cookies.get)) {\n                csrftoken = $cookies.get('csrftoken');\n            } else {\n                csrftoken = $cookies.csrftoken;\n            }\n            if(angular.isDefined(csrftoken)) {\n                url += '?csrftoken=' + encodeURIComponent(csrftoken);\n            }\n\n            return url;\n        };\n\n        // Opens the default websocket connection.\n        RegionConnection.prototype.defaultConnect = function() {\n            // Already been called but the connection has not been completed.\n            if(angular.isObject(this.defaultConnectDefer)) {\n                return this.defaultConnectDefer.promise;\n            }\n\n            // Already connected.\n            var defer;\n            if(this.isConnected()) {\n                // Create a new defer as the defaultConnectDefer would\n                // have already been resolved.\n                defer = $q.defer();\n\n                // Cannot resolve the defer inline as it hasn't been given\n                // back to the caller. It will be called in the next loop.\n                $timeout(defer.resolve);\n                return defer.promise;\n            }\n\n            // Start the connection.\n            var self = this, opened, errored;\n            defer = this.defaultConnectDefer = $q.defer();\n            opened = function(evt) {\n                this.defaultConnectDefer = null;\n                self.unregisterHandler(\"open\", opened);\n                self.unregisterHandler(\"error\", errored);\n                $rootScope.$apply(defer.resolve(evt));\n            };\n            errored = function(evt) {\n                this.defaultConnectDefer = null;\n                self.unregisterHandler(\"open\", opened);\n                self.unregisterHandler(\"error\", errored);\n                $rootScope.$apply(defer.reject(evt));\n            };\n            this.registerHandler(\"open\", opened);\n            this.registerHandler(\"error\", errored);\n            this.connect();\n            return defer.promise;\n        };\n\n        // Called when a message is received.\n        RegionConnection.prototype.onMessage = function(msg) {\n            // Response\n            if(msg.type === MSG_TYPE.RESPONSE) {\n                this.onResponse(msg);\n            // Notify\n            } else if(msg.type === MSG_TYPE.NOTIFY) {\n                this.onNotify(msg);\n            }\n        };\n\n        // Called when a response message is recieved.\n        RegionConnection.prototype.onResponse = function(msg) {\n            // Grab the registered defer from the callbacks list.\n            var defer = this.callbacks[msg.request_id];\n            var remembered_request = this.requests[msg.request_id];\n            if(angular.isDefined(defer)) {\n                if(msg.rtype === RESPONSE_TYPE.SUCCESS) {\n                    // Resolve the defer inside of the digest cycle, so any\n                    // update to an object or collection will trigger a\n                    // watcher.\n                    $rootScope.$apply(defer.resolve(msg.result));\n                } else if(msg.rtype === RESPONSE_TYPE.ERROR) {\n                    // Reject the defer since an error occurred.\n                    if(angular.isObject(remembered_request)) {\n                        $rootScope.$apply(defer.reject({\n                            \"error\": msg.error,\n                            \"request\": remembered_request\n                        }));\n                    } else {\n                        $rootScope.$apply(defer.reject(msg.error));\n                    }\n                }\n                // Remove the defer from the callback list.\n                delete this.callbacks[msg.request_id];\n                delete this.requests[msg.request_id];\n            }\n        };\n\n        // Called when a notify response is recieved.\n        RegionConnection.prototype.onNotify = function(msg) {\n            var handlers = this.notifiers[msg.name];\n            if(angular.isArray(handlers)) {\n                angular.forEach(handlers, function(handler) {\n                    handler(msg.action, msg.data);\n                });\n            }\n        };\n\n        // Call method on the region.\n        RegionConnection.prototype.callMethod = function(\n                method, params, remember) {\n            var defer = $q.defer();\n            var request_id = this.newRequestId();\n            var request = {\n                type: MSG_TYPE.REQUEST,\n                request_id: request_id,\n                method: method,\n                params: params\n            };\n            this.callbacks[request_id] = defer;\n            // If requested, remember what the details of the request were,\n            // so that the controller can refresh its memory.\n            if (remember) {\n                this.requests[request_id] = request;\n            }\n            this.websocket.send(angular.toJson(request));\n            return defer.promise;\n        };\n\n        return new RegionConnection();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS ScriptsManager Manager\n *\n * Manages all of the Scripts in the browser. The manager uses the\n * RegionConnection to load the Scripts, and listen for notification\n * events about Scripts.\n */\n\nangular.module('MAAS').factory(\n    'ScriptsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function ScriptsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"script\";\n\n            // Listen for notify events for the Script object.\n            var self = this;\n            RegionConnection.registerNotifier(\"script\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ScriptsManager.prototype = new Manager();\n\n        return new ScriptsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Service Manager\n *\n * Manages all of the services for a node in the browser. The manager uses the\n * RegionConnection to load the services and listen for service notifications.\n */\n\nangular.module('MAAS').factory(\n    'ServicesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function ServicesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"service\";\n\n            // Listen for notify events for the service object.\n            var self = this;\n            RegionConnection.registerNotifier(\"service\",\n                function(action, data) {\n                    self.onNotify(action, data);\n            });\n        }\n\n        ServicesManager.prototype = new Manager();\n\n        return new ServicesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Manager\n *\n * Manages all of the spaces in the browser. The manager uses the\n * RegionConnection to load the spaces, update the spaces, and listen for\n * notification events about spaces.\n */\n\nangular.module('MAAS').factory(\n    'SpacesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'SubnetsManager',\n    function($q, $rootScope, RegionConnection, Manager, SubnetsManager) {\n\n        function SpacesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"space\";\n\n            // Listen for notify events for the space object.\n            var self = this;\n            RegionConnection.registerNotifier(\"space\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SpacesManager.prototype = new Manager();\n\n        // Create a space.\n        SpacesManager.prototype.create = function(space) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"space.create\", space);\n        };\n\n\n        // Delete the space.\n        SpacesManager.prototype.deleteSpace = function(space) {\n            return RegionConnection.callMethod(\"space.delete\", space);\n        };\n\n        return new SpacesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS SSHKey Manager\n *\n * Manages all of the SSHKeys in the browser. The manager uses the\n * RegionConnection to load the SSHKeys, update the SSHKeys, and\n * listen for notification events about SSHKeys.\n */\n\nangular.module('MAAS').factory(\n    'SSHKeysManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function SSHKeysManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"sshkey\";\n\n            // Listen for notify events for the sshkey object.\n            var self = this;\n            RegionConnection.registerNotifier(\"sshkey\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SSHKeysManager.prototype = new Manager();\n\n        // Imports SSH keys from a launchpad and github.\n        SSHKeysManager.prototype.importKeys = function(params) {\n            // We don't add the results to the list because a NOTIFY event will\n            // add the ssh key to the list. Adding it here will cause angular\n            // to complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"sshkey.import_keys\", params);\n        };\n\n        return new SSHKeysManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS StaticRoute Manager\n *\n * Manages all of the StaticRoutes in the browser. The manager uses the\n * RegionConnection to load the StaticRoutes, update the StaticRoutes, and\n * listen for notification events about StaticRoutes.\n */\n\nangular.module('MAAS').factory(\n    'StaticRoutesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function StaticRoutesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"staticroute\";\n\n            // Listen for notify events for the staticroute object.\n            var self = this;\n            RegionConnection.registerNotifier(\"staticroute\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        StaticRoutesManager.prototype = new Manager();\n\n        return new StaticRoutesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Subnet Manager\n *\n * Manages all of the subnets in the browser. The manager uses the\n * RegionConnection to load the subnets, update the subnets, and listen for\n * notification events about subnets.\n */\n\nangular.module('MAAS').factory(\n    'SubnetsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function SubnetsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"subnet\";\n\n            // Listen for notify events for the subnet object.\n            var self = this;\n            RegionConnection.registerNotifier(\"subnet\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SubnetsManager.prototype = new Manager();\n\n        // Return the name of the subnet. Will include the name of the subnet\n        // in '(', ')' if it exists and not the same as the cidr.\n        SubnetsManager.prototype.getName = function(subnet) {\n            if(!angular.isObject(subnet)) {\n                return \"\";\n            }\n\n            var name = subnet.cidr;\n            if(angular.isString(subnet.name) &&\n                subnet.name !== \"\" &&\n                subnet.name !== subnet.cidr) {\n                name += \" (\" + subnet.name + \")\";\n            }\n            return name;\n        };\n\n        SubnetsManager.prototype.getLargestRange = function(subnet) {\n            var largest_range = {num_addresses: 0, start: \"\", end: \"\"};\n            angular.forEach(subnet.statistics.ranges, function(iprange) {\n                if(angular.equals(iprange.purpose, [\"unused\"]) &&\n                        iprange.num_addresses > largest_range.num_addresses) {\n                    largest_range = iprange;\n                }\n            });\n            return largest_range;\n        };\n\n        SubnetsManager.prototype.hasDynamicRange = function(subnet) {\n            var i;\n            for(i = 0; i < subnet.statistics.ranges.length ; i++) {\n                var iprange = subnet.statistics.ranges[i];\n                if(iprange.purpose.indexOf(\"dynamic\") !== -1) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Create a subnet.\n        SubnetsManager.prototype.create = function(subnet) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"subnet.create\", subnet);\n        };\n\n        // Delete the subnet.\n        SubnetsManager.prototype.deleteSubnet = function(subnet) {\n            return RegionConnection.callMethod(\"subnet.delete\", {\n                \"id\": subnet.id\n            });\n        };\n\n        // Perform a neighbour discovery scan on the subnet.\n        SubnetsManager.prototype.scanSubnet = function(subnet) {\n            return RegionConnection.callMethod(\"subnet.scan\", {\n                \"id\": subnet.id\n            });\n        };\n\n        return new SubnetsManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Switches Manager\n *\n * Manages all of the switches in the browser. This manager is used for the\n * switches listing and the switches view page. The manager uses the\n * RegionConnection to load the switches, update the switches, and listen for\n * notification events about switches.\n */\n\nangular.module('MAAS').factory(\n    'SwitchesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function SwitchesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"switch\";\n            this._metadataAttributes = {\n                \"owner\": null,\n                \"subnets\": null,\n                \"tags\": null,\n                \"zone\": function(device) {\n                    return device.zone.name;\n                }\n            };\n\n            // Listen for notify events for the switch object.\n            var self = this;\n            RegionConnection.registerNotifier(\"switch\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        SwitchesManager.prototype = new NodesManager();\n\n        // Create a switch.\n        SwitchesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the device to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"switch.create\", node);\n        };\n\n        // Perform the action on the switch.\n        SwitchesManager.prototype.performAction = function(\n            device, action, extra) {\n\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(\"switch.action\", {\n                \"system_id\": device.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        return new SwitchesManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Tag Manager\n *\n * Manages all of the tags in the browser. The manager uses the\n * RegionConnection to load the tags, update the tags, and listen for\n * notification events about tags.\n */\n\nangular.module('MAAS').factory(\n    'TagsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function TagsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"tag\";\n\n            // Listen for notify events for the tag object.\n            var self = this;\n            RegionConnection.registerNotifier(\"tag\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        TagsManager.prototype = new Manager();\n\n        // Helper for autocomplete that will return a string of tags that\n        // contain the query text.\n        TagsManager.prototype.autocomplete = function(query) {\n            var matching = [];\n            angular.forEach(this._items, function(item) {\n                if(item.name.indexOf(query) > -1) {\n                    matching.push(item.name);\n                }\n            });\n            return matching;\n        };\n\n        return new TagsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS User Manager\n *\n * Manages all of the users in the browser. The manager uses the\n * RegionConnection to load the users, update the users, and listen for\n * notification events about users.\n */\n\nangular.module('MAAS').factory(\n    'UsersManager',\n    ['RegionConnection', 'Manager', 'ErrorService',\n    function(RegionConnection, Manager, ErrorService) {\n\n        function UsersManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"user\";\n\n            // Holds the authenticated user for the connection.\n            this._authUser = null;\n\n            // Listen for notify events for the user object.\n            var self = this;\n            RegionConnection.registerNotifier(\"user\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        UsersManager.prototype = new Manager();\n\n        // Get the authenticated user for the connection.\n        UsersManager.prototype.getAuthUser = function() {\n            return this._authUser;\n        };\n\n        // Return true if the authenticated user is super user.\n        UsersManager.prototype.isSuperUser = function() {\n            var authUser = this.getAuthUser();\n            if(!angular.isObject(authUser)) {\n                return false;\n            }\n            return authUser.is_superuser;\n        };\n\n        // Return true if the authenticated user has uploaded at\n        // least one SSH key.\n        UsersManager.prototype.getSSHKeyCount = function() {\n            authuser = this._authUser;\n            if(!angular.isObject(authuser)) {\n                return 0;\n            }\n            return authuser.sshkeys_count;\n        };\n\n        // Load the authenticated user.\n        UsersManager.prototype._loadAuthUser = function() {\n            var self = this;\n            return RegionConnection.callMethod(\"user.auth_user\", {}).then(\n                function(user) {\n                    if(angular.isObject(self._authUser)) {\n                        // Copy the user into the authUser. This keeps the\n                        // reference the same, not requiring another call to\n                        // getAuthUser.\n                        angular.copy(user, self._authUser);\n                    } else {\n                        self._authUser = user;\n                    }\n                    return self._authUser;\n                }, function(error) {\n                    ErrorService.raiseError(error);\n                });\n        };\n\n        UsersManager.prototype._replaceItem = function(item) {\n            Manager.prototype._replaceItem.call(this, item);\n\n            // Update the authenticated user if updated item has the\n            // same primary key.\n            if(angular.isObject(this._authUser) &&\n                this._authUser[this._pk] === item[this._pk]) {\n                // Copy the item into the authUser. This keeps the reference\n                // the same, not requiring another call to getAuthUser.\n                angular.copy(item, this._authUser);\n            }\n        };\n\n        UsersManager.prototype.loadItems = function() {\n            // Load the auth user when all the items are loaded as well.\n            this._loadAuthUser();\n            return Manager.prototype.loadItems.call(this);\n        };\n\n        UsersManager.prototype.reloadItems = function() {\n            // Load the auth user when all the items are reloaded as well.\n            this._loadAuthUser();\n            return Manager.prototype.reloadItems.call(this);\n        };\n\n        // Mark the user as completed the intro.\n        UsersManager.prototype.markIntroComplete = function() {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"user.mark_intro_complete\", {}).then(\n                    function(user) {\n                        if(angular.isObject(self._authUser)) {\n                            // Copy the user into the authUser. This keeps the\n                            // reference the same, not requiring another call\n                            // to getAuthUser.\n                            angular.copy(user, self._authUser);\n                        } else {\n                            self._authUser = user;\n                        }\n                        return self._authUser;\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n        };\n\n        return new UsersManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS VLAN Manager\n *\n * Manages all of the VLANs in the browser. The manager uses the\n * RegionConnection to load the VLANs, update the VLANs, and listen for\n * notification events about VLANs.\n */\n\nangular.module('MAAS').factory(\n    'VLANsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'SubnetsManager',\n    function($q, $rootScope, RegionConnection, Manager, SubnetsManager) {\n\n        function VLANsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"vlan\";\n\n            // Listen for notify events for the vlan object.\n            var self = this;\n            RegionConnection.registerNotifier(\"vlan\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        VLANsManager.prototype = new Manager();\n\n        VLANsManager.prototype.getName = function(vlan) {\n            var name = vlan.vid;\n            if(vlan.vid === 0) {\n                name = \"untagged\";\n            } else if(angular.isString(vlan.name) && vlan.name !== \"\") {\n                name += \" (\" + vlan.name + \")\";\n            }\n            return name;\n        };\n\n        // Delete the VLAN.\n        VLANsManager.prototype.deleteVLAN = function(vlan) {\n            return RegionConnection.callMethod(\n                \"vlan.delete\", { \"id\": vlan.id }, true);\n        };\n\n        // This is needed for testing: in the normal course of things,\n        // rack_sids is generated entirely by the websocket handler.\n        VLANsManager.prototype.addRackController = function(vlan, rack) {\n            vlan.rack_sids.push(rack.system_id);\n        };\n\n        // Configure DHCP on the VLAN\n        VLANsManager.prototype.configureDHCP = function(\n           vlan, controllers, extra, relay_vlan) {\n           var params = {\n               \"id\": vlan.id,\n               \"controllers\": controllers,\n               \"extra\": extra\n           };\n           if(relay_vlan === null || angular.isNumber(relay_vlan)) {\n              params.relay_vlan = relay_vlan;\n           }\n           return RegionConnection.callMethod(\n                \"vlan.configure_dhcp\", params, true);\n        };\n\n        // Disable DHCP on the VLAN\n        VLANsManager.prototype.disableDHCP = function(vlan) {\n            return RegionConnection.callMethod(\n                \"vlan.configure_dhcp\", {\n                    \"id\": vlan.id,\n                    \"controllers\": [],\n                    \"relay_vlan\": null\n                }, true);\n        };\n\n        // Create a VLAN.\n        VLANsManager.prototype.create = function(vlan) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"vlan.create\", vlan);\n        };\n\n        return new VLANsManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zone Manager\n *\n * Manages all of the zones in the browser. The manager uses the\n * RegionConnection to load the zones, update the zones, and listen for\n * notification events about zones.\n */\n\nangular.module('MAAS').factory(\n    'ZonesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function ZonesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"zone\";\n\n            // Listen for notify events for the zone object.\n            var self = this;\n            RegionConnection.registerNotifier(\"zone\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ZonesManager.prototype = new Manager();\n\n        // Return the default zone.\n        ZonesManager.prototype.getDefaultZone = function() {\n            if(this._items.length === 0) {\n                return null;\n            } else {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].id === 0) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return this._items[0];\n        };\n\n        return new ZonesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter VLANs by Fabric.\n */\n\nangular.module('MAAS').filter('filterByFabric', function() {\n    return function(vlans, fabric) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(fabric)) {\n            id = fabric.id;\n        } else if(angular.isNumber(fabric)) {\n            id = fabric;\n        } else {\n            return filtered;\n        }\n        angular.forEach(vlans, function(vlan) {\n            if(vlan.fabric === id) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by Space.\n */\n\nangular.module('MAAS').filter('filterBySpace', function() {\n    return function(objects, space) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(space)) {\n            id = space.id;\n        } else if(angular.isNumber(space)) {\n            id = space;\n        } else {\n            return filtered;\n        }\n        angular.forEach(objects, function(object) {\n            if(object.space === id) {\n                filtered.push(object);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').filter('filterByNullSpace', function() {\n    return function(objects) {\n        var filtered = [];\n        angular.forEach(objects, function(object) {\n            if(object.space === null) {\n                filtered.push(object);\n            }\n        });\n        return filtered;\n    };\n});","/* Copyright 2016-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Filter objects with subnet foreign key references by a particular subnet.\n */\n\nangular.module('MAAS').filter('filterBySubnet', function() {\n    return function(foreign_objects, subnet, key) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(subnet)) {\n            id = subnet.id;\n        } else if(angular.isNumber(subnet)) {\n            id = subnet;\n        } else {\n            return filtered;\n        }\n        if(angular.isUndefined(key)) {\n            key = 'subnet';\n        }\n        angular.forEach(foreign_objects, function(obj) {\n            if(obj[key] === id) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n\n// Filters by subnet, unless the subnet is not defined. If the subnet is not\n// defined, filters by VLAN.\nangular.module('MAAS').filter('filterBySubnetOrVlan', function() {\n    return function(foreign_objects, subnet, vlan) {\n        var filtered = [];\n        var id;\n        var key = null;\n        if(angular.isDefined(subnet) && subnet !== null) {\n            key = 'subnet';\n            if(angular.isObject(subnet)) {\n                id = subnet.id;\n            } else if(angular.isNumber(subnet)) {\n                id = subnet;\n            }\n        } else if(angular.isDefined(vlan) && vlan !== null) {\n            key = 'vlan';\n            if(angular.isObject(vlan)) {\n                id = vlan.id;\n            } else if(angular.isNumber(vlan)) {\n                id = vlan;\n            }\n        } else {\n            return filtered;\n        }\n        angular.forEach(foreign_objects, function(obj) {\n            if(obj[key] === id) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by VLAN.\n */\n\nangular.module('MAAS').filter('filterByVLAN', function() {\n    return function(subnets, vlan) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(vlan)) {\n            id = vlan.id;\n        } else if(angular.isNumber(vlan)) {\n            id = vlan;\n        } else {\n            return filtered;\n        }\n        angular.forEach(subnets, function(subnet) {\n            if(subnet.vlan === id) {\n                filtered.push(subnet);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').filter('filterControllersByVLAN', function() {\n    return function(controllers, vlan) {\n        var filtered = [];\n        if(!angular.isObject(vlan)) {\n            return filtered;\n        }\n        angular.forEach(controllers, function(controller) {\n            // XXX mpontillo disable VLAN check until VLAN is populated\n            // on the rack controller's interfaces.\n            // if(controller.vlan_ids.indexOf(vlan.id) != -1) {\n\n            // XXX mpontillo 2016-02-22 this is a hack to prevent too many\n            // nodes from being sent through the filter; we have a bug which\n            // sends nodes in which are not controllers.\n            if(controller.node_type === 2 || controller.node_type === 4) {\n                filtered.push(controller);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Filter\n */\n\nangular.module('MAAS').filter('nodesFilter', ['$filter', 'SearchService',\n    function($filter, SearchService) {\n\n        // Default filter built-in angular. Used on all extra filters that do\n        // not specify a specific type.\n        var standardFilter = $filter('filter');\n\n        // Helpers that convert the pseudo field on node to an actual\n        // value from the node.\n        var mappings = {\n            cpu: function(node) {\n                return node.cpu_count;\n            },\n            cores: function(node) {\n                return node.cpu_count;\n            },\n            ram: function(node) {\n                return node.memory;\n            },\n            mac: function(node) {\n                macs = [];\n                macs.push(node.pxe_mac);\n                macs.push.apply(macs, node.extra_macs);\n                return macs;\n            },\n            zone: function(node) {\n                return node.zone.name;\n            },\n            pod: function(node) {\n                return (node.pod === undefined) ? undefined : node.pod.name;\n            },\n            'pod-id': function(node) {\n                return (node.pod === undefined) ? undefined : node.pod.id;\n            },\n            power: function(node) {\n                return node.power_state;\n            },\n            release: function(node) {\n                if(node.status_code === 6 || node.status_code === 9) {\n                    return node.osystem + \"/\" + node.distro_series;\n                } else {\n                    return '';\n                }\n            }\n        };\n\n        // Return true when value is an integer.\n        function isInteger(value) {\n            // +1 done to silence js-lint.\n            return value % +1 === 0;\n        }\n\n        // Return true when lowercase value contains the already\n        // lowercased lowerTerm.\n        function _matches(value, lowerTerm, exact) {\n            if(angular.isNumber(value)) {\n                if(exact) {\n                    if(isInteger(value)) {\n                        return value === parseInt(lowerTerm, 10);\n                    } else {\n                        return value === parseFloat(lowerTerm);\n                    }\n                } else {\n                    if(isInteger(value)) {\n                        return value >= parseInt(lowerTerm, 10);\n                    } else {\n                        return value >= parseFloat(lowerTerm);\n                    }\n                }\n            } else if(angular.isString(value)) {\n                if(exact) {\n                    return value.toLowerCase() === lowerTerm;\n                } else {\n                    return value.toLowerCase().indexOf(lowerTerm) >= 0;\n                }\n            } else {\n                return value === lowerTerm;\n            }\n        }\n\n        // Return true if value matches lowerTerm, unless negate is true then\n        // return false if matches.\n        function matches(value, lowerTerm, exact, negate) {\n            var match = _matches(value, lowerTerm, exact);\n            if(negate) {\n                return !match;\n            }\n            return match;\n        }\n\n        return function(nodes, search) {\n            if(angular.isUndefined(nodes) ||\n                angular.isUndefined(search) ||\n                nodes.length === 0) {\n                return nodes;\n            }\n\n            var filtered = nodes;\n            var filters = SearchService.getCurrentFilters(search);\n            angular.forEach(filters, function(terms, attr) {\n                if(attr === '_') {\n                    // Use the standard filter on terms that do not specify\n                    // an attribute.\n                    angular.forEach(terms, function(term) {\n                        filtered = standardFilter(filtered, term);\n                    });\n                } else if(attr === 'in') {\n                    // \"in:\" is used to filter the nodes by those that are\n                    // currently selected.\n                    angular.forEach(terms, function(term) {\n                        var matched = [];\n                        angular.forEach(filtered, function(node) {\n                            if(node.$selected &&\n                                term.toLowerCase() === \"selected\") {\n                                matched.push(node);\n                            } else if(!node.$selected &&\n                                term.toLowerCase() === \"!selected\") {\n                                matched.push(node);\n                            }\n                        });\n                        filtered = matched;\n                    });\n                } else {\n                    // Mapping function for the attribute.\n                    var mapFunc = mappings[attr];\n\n                    // Loop through each item and only select the matching.\n                    var matched = [];\n                    angular.forEach(filtered, function(node) {\n                        var value;\n                        if(angular.isFunction(mapFunc)) {\n                            value = mapFunc(node);\n                        } else if(node.hasOwnProperty(attr)) {\n                            value = node[attr];\n                        }\n\n                        // Unable to get value for this node. So skip it.\n                        if(angular.isUndefined(value)) {\n                            return;\n                        }\n\n                        var i, j;\n                        for(i = 0; i < terms.length; i++) {\n                            var term = terms[i].toLowerCase();\n                            var exact = false, negate = false;\n\n                            // '!' at the beginning means the term is negated.\n                            while(term.indexOf('!') === 0) {\n                                negate = !negate;\n                                term = term.substring(1);\n                            }\n\n                            // '=' at the beginning means to match exactly.\n                            if(term.indexOf('=') === 0) {\n                                exact = true;\n                                term = term.substring(1);\n                            }\n\n                            // Allow '!' after the '=' as well.\n                            while(term.indexOf('!') === 0) {\n                                negate = !negate;\n                                term = term.substring(1);\n                            }\n\n                            if(angular.isArray(value)) {\n                                // If value is an array check if the\n                                // term matches any value in the\n                                // array. If negated, check whether no\n                                // value in the array matches.\n                                if(negate) {\n                                    // Push to matched only if no value in\n                                    // the array matches term.\n                                    var no_match = true;\n                                    for(j = 0; j < value.length; j++) {\n                                        if(matches(\n                                            value[j], term, exact, false)) {\n                                            no_match = false;\n                                            break; // Skip remaining tests.\n                                        }\n                                    }\n                                    if(no_match) {\n                                        matched.push(node);\n                                        return;\n                                    }\n                                } else {\n                                    for(j = 0; j < value.length; j++) {\n                                        if(matches(\n                                            value[j], term, exact, false)) {\n                                            matched.push(node);\n                                            return;\n                                        }\n                                    }\n                                }\n                            } else {\n                                // Standard value check that it matches the\n                                // term.\n                                if(matches(value, term, exact, negate)) {\n                                    matched.push(node);\n                                    return;\n                                }\n                            }\n                        }\n                    });\n                    filtered = matched;\n                }\n            });\n            return filtered;\n        };\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by VLAN.\n */\n\nangular.module('MAAS').filter('orderByDate', function() {\n    return function(items, field, field2) {\n        var sorted = items.slice();\n        sorted.sort(function(a, b) {\n            aDate = new Date(a[field]);\n            bDate = new Date(b[field]);\n\n            // Sort by ID as well if equal.\n            if(angular.isString(field2) &&\n                aDate.getTime() === bDate.getTime()) {\n                return (\n                    a[field2] > b[field2] ? -1 : a[field2] < b[field2] ? 1 : 0);\n            } else {\n              return aDate > bDate ? -1 : aDate < bDate ? 1 : 0;\n            }\n        });\n        return sorted;\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter to remove the default VLAN as an option.\n */\n\nangular.module('MAAS').filter('removeDefaultVLAN', function() {\n    return function(vlans) {\n        var filtered = [];\n        angular.forEach(vlans, function(vlan) {\n            if(vlan.vid !== 0) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Module\n *\n * Initializes the MAAS module with its required dependencies and sets up\n * the interpolater to use '{$' and '$}' instead of '{{' and '}}' as this\n * conflicts with Django templates.\n */\n\nangular.module('MAAS',\n    ['ngRoute', 'ngCookies', 'ngSanitize', 'ngTagsInput', 'vs-repeat']).config(\n    function($interpolateProvider, $routeProvider, $httpProvider) {\n        $interpolateProvider.startSymbol('{$');\n        $interpolateProvider.endSymbol('$}');\n\n        // Set the $httpProvider to send the csrftoken in the header of any\n        // http request.\n        $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n        $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n        // Helper that wrappers the templateUrl to append the files version\n        // to the path. Used to override client cache.\n        function versionedPath(path) {\n            return path + \"?v=\" + MAAS_config.files_version;\n        }\n\n        // Setup routes only for the index page, all remaining pages should\n        // not use routes. Once all pages are converted to using Angular this\n        // will go away. Causing the page to never have to reload.\n        var href = angular.element(\"base\").attr('href');\n        var path = document.location.pathname;\n        if(path[path.length - 1] !== '/') {\n            path += '/';\n        }\n        if(path === href) {\n            var routes = $routeProvider.\n                when('/intro', {\n                    templateUrl: versionedPath(\n                        'static/partials/intro.html'),\n                    controller: 'IntroController'\n                }).\n                when('/intro/user', {\n                    templateUrl: versionedPath(\n                        'static/partials/intro-user.html'),\n                    controller: 'IntroUserController'\n                }).\n                when('/machines', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/machine/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/machine/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/machine/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/devices', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/device/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/device/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/device/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/controllers', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/controller/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/controller/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/controller/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/nodes', {\n                    redirectTo: '/machines'\n                }).\n                when('/node/machine/:system_id', {\n                    redirectTo: '/machine/:system_id'\n                }).\n                when('/node/machine/:system_id/:result_type/:id', {\n                    redirectTo: '/machine/:system_id/:result_type/:id'\n                }).\n                when('/node/machine/:system_id/events', {\n                    redirectTo: '/machine/:system_id/events'\n                }).\n                when('/node/device/:system_id', {\n                    redirectTo: '/device/:system_id'\n                }).\n                when('/node/device/:system_id/:result_type/:id', {\n                    redirectTo: '/device/:system_id/:result_type/:id'\n                }).\n                when('/node/device/:system_id/events', {\n                    redirectTo: '/device/:system_id/events'\n                }).\n                when('/node/controller/:system_id', {\n                    redirectTo: '/controller/:system_id'\n                }).\n                when('/node/controller/:system_id/:result_type/:id', {\n                    redirectTo: '/controller/:system_id/:result_type/:id'\n                }).\n                when('/node/controller/:system_id/events', {\n                    redirectTo: '/controller/:system_id/events'\n                }).\n                when('/pods', {\n                    templateUrl: versionedPath(\n                        'static/partials/pods-list.html'),\n                    controller: 'PodsListController'\n                }).\n                when('/pod/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/pod-details.html'),\n                    controller: 'PodDetailsController'\n                }).\n                when('/images', {\n                    templateUrl: versionedPath(\n                        'static/partials/images.html'),\n                    controller: 'ImagesController'\n                }).\n                when('/domains', {\n                    templateUrl: versionedPath(\n                        'static/partials/domains-list.html'),\n                    controller: 'DomainsListController'\n                }).\n                when('/domain/:domain_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/domain-details.html'),\n                    controller: 'DomainDetailsController'\n                }).\n                when('/space/:space_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/space-details.html'),\n                    controller: 'SpaceDetailsController'\n                }).\n                when('/fabric/:fabric_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/fabric-details.html'),\n                    controller: 'FabricDetailsController'\n                }).\n                when('/subnets', {\n                    redirectTo: '/networks?by=fabric'\n                }).\n                when('/networks', {\n                    templateUrl: versionedPath(\n                        'static/partials/networks-list.html'),\n                    controller: 'NetworksListController',\n                    reloadOnSearch: false\n                }).\n                when('/subnet/:subnet_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/subnet-details.html'),\n                    controller: 'SubnetDetailsController'\n                }).\n                when('/vlan/:vlan_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/vlan-details.html'),\n                    controller: 'VLANDetailsController',\n                    controllerAs: 'vlanDetails'\n                }).\n                when('/settings/:section', {\n                    templateUrl: versionedPath(\n                        'static/partials/settings.html'),\n                    controller: 'SettingsController'\n                }).\n                when('/zone/:zone_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/zone-details.html'),\n                    controller: 'ZoneDetailsController'\n                }).\n                when('/zones', {\n                    templateUrl: versionedPath(\n                        'static/partials/zones-list.html'),\n                    controller: 'ZonesListController',\n                    reloadOnSearch: false\n                });\n            if(MAAS_config.superuser) {\n                // Only superuser's can access the dashboard at the moment.\n                routes = routes.when('/dashboard', {\n                    templateUrl: versionedPath(\n                        'static/partials/dashboard.html'),\n                    controller: 'DashboardController'\n                }).\n                otherwise({\n                    redirectTo: '/dashboard'\n                });\n            } else {\n                routes = routes.otherwise({\n                    redirectTo: '/machines'\n                });\n            }\n        }\n    });\n\n// Force users to #/intro when it has not been completed.\nangular.module('MAAS').run(['$rootScope', '$location',\n    function ($rootScope, $location) {\n        $rootScope.$on('$routeChangeStart', function(event, next, current) {\n            if(!MAAS_config.completed_intro) {\n                if(next.controller !== 'IntroController') {\n                    $location.path('/intro');\n                }\n            } else if (!MAAS_config.user_completed_intro) {\n                if(next.controller !== 'IntroUserController') {\n                    $location.path('/intro/user');\n                }\n            }\n        });\n    }]);\n\n// Send pageview to Google Anayltics when the route has changed.\nangular.module('MAAS').run(['$rootScope',\n    function ($rootScope) {\n        window.ga = window.ga || function() {\n            (window.ga.q = window.ga.q || []).push(arguments);\n        };\n        window.ga.l = +new Date();\n        window.ga('create', 'UA-1018242-63', 'auto', {\n          userId: MAAS_config.analytics_user_id\n        });\n        window.ga('set', 'dimension1', MAAS_config.version);\n        window.ga('set', 'dimension2', MAAS_config.uuid);\n        $rootScope.$on('$routeChangeSuccess', function() {\n            var path = window.location.pathname + window.location.hash;\n            window.ga('send', 'pageview', path);\n        });\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Browser Service\n *\n * Detects the browser used by the client. This is very simple case, because\n * at the moment we really only care about if the browser is Firefox. This\n * could be improved for other browsers, but this should only be used as a\n * last resort to prevent something bad happening on a misbehaving browser.\n */\n\nangular.module('MAAS').service('BrowserService', ['$window',\n    function($window) {\n\n        // The first items in the array will be matched first. So if the user\n        // agent for the browser contains both you need to make the more\n        // specific one first. E.g. Chrome contains both \"Chrome\" and \"Safari\"\n        // in its user-agent string. Since \"Safari\" does not chrome comes first\n        // so it matches that browser more specifically.\n        var BROWSERS = [\n            {\n                name: \"chrome\",\n                regex: /chrome/i\n            },\n            {\n                name: \"safari\",\n                regex: /safari/i\n            },\n            {\n                name: \"firefox\",\n                regex: /firefox/i\n            },\n            {\n                name: \"ie\",\n                regex: /MSIE/\n            }\n        ];\n\n        this.browser = \"other\";\n\n        // Set the browser if a regex matches. The first to match wins.\n        var self = this;\n        angular.forEach(BROWSERS, function(matcher) {\n            if(matcher.regex.test($window.navigator.userAgent) &&\n                self.browser === \"other\") {\n                self.browser = matcher.name;\n            }\n        });\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Converter Service\n *\n * Used by controllers to convert user inputs.\n */\n\nangular.module('MAAS').service('ConverterService', function() {\n\n        // Case is important: 1kB is 1000 bytes, whereas 1KB is 1024 bytes.\n        // See https://en.wikipedia.org/wiki/Byte#Unit_symbol\n        var UNITS = ['bytes', 'kB', 'MB', 'GB', 'TB'];\n\n        var KILOBYTE = 1000.0;\n        var MEGABYTE = 1000.0 * 1000.0;\n        var GIGABYTE = 1000.0 * 1000.0 * 1000.0;\n        var TERABYTE = 1000.0 * 1000.0 * 1000.0 * 1000.0;\n\n        // Convert the bytes to a unit.\n        this.bytesToUnits = function(bytes) {\n            // Support string being passed.\n            if(angular.isString(bytes)) {\n                bytes = parseInt(bytes, 10);\n            }\n\n            var i, unit, converted = bytes;\n            for(i = 0; i < UNITS.length; i++) {\n                unit = UNITS[i];\n                if(Math.abs(converted) < 1000.0 || unit === 'TB') {\n                    var string = converted.toFixed(1) + \" \" + unit;\n                    if(unit === 'bytes') {\n                        string = converted + \" \" + unit;\n                    }\n                    return {\n                        original: bytes,\n                        converted: converted,\n                        units: unit,\n                        string: string\n                    };\n                }\n                converted /= 1000.0;\n            }\n        };\n\n        // Convert the data based on the unit to bytes.\n        this.unitsToBytes = function(data, unit) {\n            // Support string being passed.\n            if(angular.isString(data)) {\n                data = parseFloat(data);\n            }\n            if(unit === 'bytes') {\n                return Math.floor(data);\n            } else if(unit === 'kB') {\n                return Math.floor(data * KILOBYTE);\n            } else if(unit === 'MB') {\n                return Math.floor(data * MEGABYTE);\n            } else if(unit === 'GB') {\n                return Math.floor(data * GIGABYTE);\n            } else if(unit === 'TB') {\n                return Math.floor(data * TERABYTE);\n            }\n        };\n\n        // Convert the data based on unit down to the lowest tolerance to still\n        // be the same value in that unit.\n        this.roundUnits = function(data, unit) {\n            // Support string being passed.\n            if(angular.isString(data)) {\n                data = parseFloat(data);\n            }\n            if(unit === 'bytes') {\n                return Math.floor(data);\n            } else if(unit === 'kB') {\n                return Math.floor(data * KILOBYTE) - (0.05 * KILOBYTE);\n            } else if(unit === 'MB') {\n                return Math.floor(data * MEGABYTE) - (0.05 * MEGABYTE);\n            } else if(unit === 'GB') {\n                return Math.floor(data * GIGABYTE) - (0.05 * GIGABYTE);\n            } else if(unit === 'TB') {\n                return Math.floor(data * TERABYTE) - (0.05 * TERABYTE);\n            }\n        };\n\n        // Round the bytes down to size based on the block size.\n        this.roundByBlockSize = function(bytes, block_size) {\n            return block_size * Math.floor(bytes / block_size);\n        };\n\n        // Convert string ipv4 address into octets array.\n        this.ipv4ToOctets = function(ipAddress) {\n            var parts = ipAddress.split('.');\n            var octets = [];\n            angular.forEach(parts, function(part) {\n                octets.push(parseInt(part, 10));\n            });\n            return octets;\n        };\n\n        // Convert string ipv4 address into integer.\n        this.ipv4ToInteger = function(ipAddress) {\n            var octets = this.ipv4ToOctets(ipAddress);\n            return (\n                (octets[0] * Math.pow(256,3)) +\n                (octets[1] * Math.pow(256,2)) +\n                (octets[2] * 256) + octets[3]);\n        };\n\n        // Convert ipv6 address to a full ipv6 address, removing the\n        // '::' shortcut and padding each group with zeros.\n        this.ipv6Expand = function(ipAddress) {\n            var i, expandedAddress = ipAddress;\n            if(expandedAddress.indexOf(\"::\") !== -1) {\n                // '::' is present so replace it with the required\n                // number of '0000:' based on its location in the string.\n                var split = ipAddress.split(\"::\");\n                var groups = 0;\n                for(i = 0; i < split.length; i++) {\n                    groups += split[i].split(\":\").length;\n                }\n                expandedAddress = split[0] + \":\";\n                for(i = 0; i < 8 - groups; i++) {\n                    expandedAddress += \"0000:\";\n                }\n                expandedAddress += split[1];\n            }\n            // Pad the output of each part with zeros.\n            var output = [], parts = expandedAddress.split(\":\");\n            angular.forEach(parts, function(part) {\n                output.push(\"0000\".substr(part.length) + part);\n            });\n            return output.join(\":\");\n        };\n\n        // Convert string ipv6 into groups array.\n        this.ipv6ToGroups = function(ipAddress) {\n            var groups = [];\n            var parts = this.ipv6Expand(ipAddress).split(\":\");\n            angular.forEach(parts, function(part) {\n                groups.push(parseInt(part, 16));\n            });\n            return groups;\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Error Service\n */\n\nangular.module('MAAS').service('ErrorService', function() {\n\n        // Holds the client error.\n        this._error = null;\n\n        // Raise this error in the UI.\n        this.raiseError = function(error) {\n            // Possible that this method is called more than once.\n            // Only take the first error.\n            if(!angular.isString(this._error)) {\n                this._error = error;\n            }\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS JSON Service\n *\n * Used by controllers to parse JSON.\n */\n\nangular.module('MAAS').service('JSONService', function() {\n\n    // Return the JSON for the string or null if it cannot be parsed.\n    this.tryParse = function(jsonString) {\n        try {\n            var obj = JSON.parse(jsonString);\n            // JSON.parse(false) or JSON.parse(1234) will throw errors, but\n            // JSON.parse(null) returns 'null', and typeof null === \"object\".\n            if (obj && typeof obj === \"object\" && obj !== null) {\n                return obj;\n            }\n        }\n        catch (e) { }\n        return null;\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Log Service\n *\n * Allows logging to be enabled or disabled, and allows a particular log level\n * to be set, which will allow logs of a specified importance (or more) to be\n * seen.\n *\n * Also appends a time index (in seconds, accurate to milliseconds) to the\n * beginning of the log string.\n */\n\nangular.module('MAAS').service('LogService', [\n    '$window', function($window) {\n        var self = this;\n\n        // Global enable/disable for MAAS logging. If set to `false`, this\n        // value takes precedence over the logLevel.\n        self.logging = true;\n\n        // Specifies the log level.\n        // Level 1: error() logging\n        // Level 2: error() and warn() logging\n        // Level 3: all of the above, plus info()\n        // Level 4: all of the above, plus log()\n        // Level 5: all of the above, plus debug()\n        self.logLevel = 5;\n\n        // Returns a monotonic time (in milliseconds) since page load.\n        self.now = function() {\n            return $window.performance ? $window.performance.now() : 0;\n        };\n\n        // Standard logging functions.\n        self._debug = console.debug;\n        self._log = console.log;\n        self._info = console.info;\n        self._warn = console.warn;\n        self._error = console.error;\n\n        // Formats the specified time (in milliseconds) in seconds.\n        this.formatMilliseconds = function(milliseconds) {\n            return parseFloat(milliseconds / 1000.0).toFixed(3);\n        };\n\n        // Internal function to log using the specified destination, with the\n        // specified list of arguments.\n        this.__log = function(destination, args) {\n            if(self.logging === true) {\n                // Add time index to the beginning of the log.\n                Array.prototype.unshift.call(args,\n                    \"[\" + self.formatMilliseconds(self.now()) + \"]\");\n                destination.apply(self, args);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._debug().\n        this.debug = function() {\n            if(self.logLevel >= 5) {\n                self.__log(self._debug, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._log().\n        this.log = function() {\n            if(self.logLevel >= 4) {\n                self.__log(self._log, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._info().\n        this.info = function() {\n            if(self.logLevel >= 3) {\n                self.__log(self._info, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._warn().\n        this.warn = function() {\n            if(self.logLevel >= 2) {\n                self.__log(self._warn, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._err().\n        this.error = function() {\n            if(self.logLevel >= 1) {\n                self.__log(self._error, arguments);\n            }\n        };\n    }\n]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Base Manager\n *\n * Manages a collection of items from the websocket in the browser. The manager\n * uses the RegionConnection to load the items, update the items, and listen\n * for notification events about the items.\n */\n\nangular.module('MAAS').service(\n    'Manager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', function(\n            $q, $rootScope, $timeout, RegionConnection) {\n\n        // Actions that are used to update the statuses metadata.\n        var METADATA_ACTIONS = {\n            CREATE: \"create\",\n            UPDATE: \"update\",\n            DELETE: \"delete\"\n        };\n\n        // Constructor\n        function Manager() {\n            // Primary key on the items in the list. Used to match items.\n            this._pk = \"id\";\n\n            // Key used when loading batches. Typically the same as _pk\n            // but not always.\n            this._batchKey = \"id\";\n\n            // The field from which to get a human-readable name.\n            this._name_field = \"name\";\n\n            // Handler on the region to call to list, create, update, delete,\n            // and listen for notifications. Must be set by overriding manager.\n            this._handler = null;\n\n            // Holds all items in the system. This list must always be the same\n            // object.\n            this._items = [];\n\n            // The way this manager recieves its updated information. 'notify'\n            // means this manager recieved notify messages from the websocket.\n            // See PollingManager for the other possible type. This is only\n            // used by the `ManagerHelperService` to identify how updating\n            // the data should be handled.\n            this._type = 'notify';\n\n            // Holds list of scopes that currently have this manager loaded.\n            this._scopes = [];\n\n            // True when all of the items have been loaded. This is done on\n            // intial connection to the region.\n            this._loaded = false;\n\n            // True when the items list is currently being loaded or reloaded.\n            // Actions will not be processed while this is false.\n            this._isLoading = false;\n\n            // Holds list of defers that need to be called once the loading of\n            // items has finished. This is used when a caller calls loadItems\n            // when its already loading.\n            this._extraLoadDefers = [];\n\n            // Holds list of defers that need to be called once the reloading\n            // of items has finished. This is used when a caller calls\n            // reloadItems when its already reloading.\n            this._extraReloadDefers = [];\n\n            // Holds all of the notify actions that need to be processed. This\n            // is used to hold the actions while the items are being loaded.\n            // Once all of the items are loaded the queue will be processed.\n            this._actionQueue = [];\n\n            // Holds list of all of the currently selected items. This is held\n            // in a seperate list to remove the need to loop through the full\n            // listing to grab the selected items.\n            this._selectedItems = [];\n\n            // Set to true when the items list should reload upon re-connection\n            // to the region.\n            this._autoReload = false;\n\n            // Holds the item that is currenly being viewed. This object will\n            // be updated if any notify events are recieved for it. This allows\n            // the ability of not having to keep pulling the item out of the\n            // items list.\n            this._activeItem = null;\n\n            // Holds metadata information that is used to helper filtering.\n            this._metadata = {};\n\n            // List of attributes to track on the loaded items. Each attribute\n            // in this list will be placed in _metadata to track its currect\n            // values and the number of items with that value.\n            this._metadataAttributes = [];\n        }\n\n        // Return index of the item in the given array.\n        Manager.prototype._getIndexOfItem = function(array, pk_value) {\n            var i;\n            for(i = 0, len = array.length; i < len; i++) {\n                if(array[i][this._pk] === pk_value) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n\n        // Replace the item in the array at the same index.\n        Manager.prototype._replaceItemInArray = function(array, item) {\n            var idx = this._getIndexOfItem(array, item[this._pk]);\n            if(idx >= 0) {\n                // Keep the current selection on the item.\n                item.$selected = array[idx].$selected;\n                angular.copy(item, array[idx]);\n            }\n        };\n\n        // Remove the item from the array.\n        Manager.prototype._removeItemByIdFromArray = function(\n            array, pk_value) {\n            var idx = this._getIndexOfItem(array, pk_value);\n            if(idx >= 0) {\n                array.splice(idx, 1);\n            }\n        };\n\n        // Return the parameters that should be used for the batch load\n        // request. Should be used by subclass that want to add extra\n        // parameters to the batch request. By default it returns an empty\n        // object.\n        Manager.prototype._initBatchLoadParameters = function() {\n            return {};\n        };\n\n        // Batch load items from the region in groups of 50.\n        Manager.prototype._batchLoadItems = function(array, extra_func) {\n            var self = this;\n            var defer = $q.defer();\n            var method = this._handler + \".list\";\n            function callLoad() {\n                var params = self._initBatchLoadParameters();\n                params.limit = 50;\n\n                // Get the last batchKey in the list so the region knows to\n                // start at that offset.\n                if(array.length > 0) {\n                    params.start = array[array.length-1][self._batchKey];\n                }\n                RegionConnection.callMethod(\n                    method, params).then(function(items) {\n                        // Pass each item to extra_func function if given.\n                        if(angular.isFunction(extra_func)) {\n                            angular.forEach(items, function(item) {\n                                extra_func(item);\n                            });\n                        }\n\n                        array.push.apply(array, items);\n                        if(items.length === 50) {\n                            // Could be more items, request the next 50.\n                            callLoad(array);\n                        } else {\n                            defer.resolve(array);\n                        }\n                    }, defer.reject);\n            }\n            callLoad();\n            return defer.promise;\n        };\n\n        // Resolves array of defers with item.\n        Manager.prototype._resolveDefers = function(defersArray, item) {\n            angular.forEach(defersArray, function(defer) {\n                defer.resolve(item);\n            });\n        };\n\n        // Rejects array of defers with error.\n        Manager.prototype._rejectDefers = function(defersArray, error) {\n            angular.forEach(defersArray, function(defer) {\n                defer.reject(error);\n            });\n        };\n\n        // Return list of items.\n        Manager.prototype.getItems = function() {\n            return this._items;\n        };\n\n        // Clears the currect state of the manager.\n        Manager.prototype.clear = function() {\n            this._loaded = false;\n            this._items.length = 0;\n            this._actionQueue.length = 0;\n            this._selectedItems.length = 0;\n            this._activeItem = null;\n            this._metadata = {};\n            this._metadataAttributes.length = 0;\n        };\n\n        // Load all the items.\n        Manager.prototype.loadItems = function() {\n            // If the items have already been loaded then, we need to\n            // reload the items list not load the initial list.\n            if(this._loaded) {\n                return this.reloadItems();\n            }\n\n            // If its already loading then the caller just needs to be informed\n            // of when it has finished loading.\n            if(this._isLoading) {\n                var defer = $q.defer();\n                this._extraLoadDefers.push(defer);\n                return defer.promise;\n            }\n\n            var self = this;\n            this._isLoading = true;\n            return this._batchLoadItems(this._items, function(item) {\n                item.$selected = false;\n                self._updateMetadata(item, METADATA_ACTIONS.CREATE);\n                self._processItem(item);\n            }).then(function() {\n                self._loaded = true;\n                self._isLoading = false;\n                self.processActions();\n                self._resolveDefers(self._extraLoadDefers, self._items);\n                self._extraLoadDefers = [];\n                return self._items;\n            }, function(error) {\n                self._rejectDefers(self._extraLoadDefers, error);\n                self._extraLoadDefers = [];\n                return $q.reject(error);\n            });\n        };\n\n        // Reload the items list.\n        Manager.prototype.reloadItems = function() {\n            // If the items have not been loaded then, we need to\n            // load the initial list.\n            if(!this._loaded) {\n                return this.loadItems();\n            }\n\n            // If its already reloading then the caller just needs to be\n            // informed of when it has refinished loading.\n            if(this._isLoading) {\n                var defer = $q.defer();\n                this._extraReloadDefers.push(defer);\n                return defer.promise;\n            }\n\n            // Updates the items list with the reloaded items.\n            var self = this;\n            function updateItems(items) {\n                // Iterate in reverse so we can remove items inline, without\n                // having to adjust the index.\n                var i = self._items.length;\n                while(i--) {\n                    var item = self._items[i];\n                    var updatedIdx = self._getIndexOfItem(\n                        items, item[self._pk]);\n                    if(updatedIdx === -1) {\n                        self._updateMetadata(item, METADATA_ACTIONS.DELETE);\n                        self._items.splice(i, 1);\n                        self._removeItemByIdFromArray(\n                            self._selectedItems, item[self._pk]);\n                    } else {\n                        var updatedItem = items[updatedIdx];\n                        self._updateMetadata(\n                            updatedItem, METADATA_ACTIONS.UPDATE);\n                        updatedItem.$selected = item.$selected;\n                        angular.copy(items[updatedIdx], item);\n                        items.splice(updatedIdx, 1);\n                    }\n                }\n\n                // The remain items in items array are the new items.\n                angular.forEach(items, function(item) {\n                    self._items.push(item);\n                    self._processItem(item);\n                });\n            }\n\n            // The reload action loads all of the items into this list\n            // instead of the items list. This list will then be used to\n            // update the items list.\n            var currentItems = [];\n\n            // Start the reload process and once complete call updateItems.\n            self._isLoading = true;\n            return this._batchLoadItems(currentItems).then(function(items) {\n                updateItems(items);\n                self._isLoading = false;\n                self.processActions();\n\n                // Set the activeItem again so the region knows that its\n                // the active item.\n                if(angular.isObject(self._activeItem)) {\n                    self.setActiveItem(self._activeItem[self._pk]);\n                }\n\n                self._resolveDefers(self._extraReloadDefers, self._items);\n                self._extraReloadDefers = [];\n                return self._items;\n            }, function(error) {\n                self._rejectDefers(self._extraReloadDefers, error);\n                self._extraReloadDefers = [];\n                return $q.reject(error);\n            });\n        };\n\n        // Enables auto reloading of the item list on connection to region.\n        Manager.prototype.enableAutoReload = function() {\n            if(!this._autoReload) {\n                this._autoReload = true;\n                var self = this;\n                this._reloadFunc = function() {\n                    self.reloadItems();\n                };\n                RegionConnection.registerHandler(\"open\", this._reloadFunc);\n            }\n        };\n\n        // Disable auto reloading of the item list on connection to region.\n        Manager.prototype.disableAutoReload = function() {\n            if(this._autoReload) {\n                RegionConnection.unregisterHandler(\"open\", this._reloadFunc);\n                this._reloadFunc = null;\n                this._autoReload = false;\n            }\n        };\n\n        // True when the initial item list has finished loading.\n        Manager.prototype.isLoaded = function() {\n            return this._loaded;\n        };\n\n        // True when the item list is currently being loaded or reloaded.\n        Manager.prototype.isLoading = function() {\n            return this._isLoading;\n        };\n\n        // Allow for extra processing of items as they are added or updated.\n        Manager.prototype._processItem = function(item) {\n        };\n\n        // Replace item in the items and selectedItems list.\n        Manager.prototype._replaceItem = function(item) {\n            this._updateMetadata(item, METADATA_ACTIONS.UPDATE);\n            this._replaceItemInArray(this._items, item);\n        };\n\n        // Remove item in the items and selectedItems list.\n        Manager.prototype._removeItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx >= 0) {\n                this._updateMetadata(this._items[idx], METADATA_ACTIONS.DELETE);\n            }\n            this._removeItemByIdFromArray(this._items, pk_value);\n            this._removeItemByIdFromArray(this._selectedItems, pk_value);\n        };\n\n        // Get the item from the list. Does not make a get request to the\n        // region to load more data.\n        Manager.prototype.getItemFromList = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx >= 0) {\n                return this._items[idx];\n            } else {\n                return null;\n            }\n        };\n\n        // Get the item from the region.\n        Manager.prototype.getItem = function(pk_value) {\n            var self = this;\n            var method = this._handler + \".get\";\n            var params = {};\n            params[this._pk] = pk_value;\n            return RegionConnection.callMethod(\n                method, params).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the create information to the region.\n        Manager.prototype.createItem = function(item) {\n            var self = this;\n            var method = this._handler + \".create\";\n            item = angular.copy(item);\n            delete item.$selected;\n            return RegionConnection.callMethod(\n                method, item).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the update information to the region.\n        Manager.prototype.updateItem = function(item) {\n            var self = this;\n            var method = this._handler + \".update\";\n            item = angular.copy(item);\n            delete item.$selected;\n            return RegionConnection.callMethod(\n                method, item).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the delete call for item to the region.\n        Manager.prototype.deleteItem = function(item) {\n            var self = this;\n            var method = this._handler + \".delete\";\n            var params = {};\n            params[this._pk] = item[this._pk];\n            return RegionConnection.callMethod(\n                method, params).then(function() {\n                    self._removeItem(item[self._pk]);\n                });\n        };\n\n        // Return the active item.\n        Manager.prototype.getActiveItem = function() {\n            return this._activeItem;\n        };\n\n        // Set the active item.\n        Manager.prototype.setActiveItem = function(pk_value) {\n            if(!this._loaded) {\n                throw new Error(\n                    \"Cannot set active item unless the manager is loaded.\");\n            }\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                this._activeItem = null;\n                // Item with pk_value does not exists. Reject the returned\n                // deferred.\n                var defer = $q.defer();\n                $timeout(function() {\n                    defer.reject(\"No item with pk: \" + pk_value);\n                });\n                return defer.promise;\n            } else {\n                this._activeItem = this._items[idx];\n                // Data that is loaded from the list call is limited and\n                // doesn't contain all of the needed data for an activeItem.\n                // Call set_active on the handler for the region to know\n                // this item needs all information when updated.\n                var self = this;\n                var method = this._handler + \".set_active\";\n                var params = {};\n                params[this._pk] = pk_value;\n                return RegionConnection.callMethod(\n                    method, params).then(function(item) {\n                        self._replaceItem(item);\n                        return self._activeItem;\n                    });\n            }\n        };\n\n        // Clears the active item.\n        Manager.prototype.clearActiveItem = function() {\n            this._activeItem = null;\n        };\n\n        // True when the item list is stable and not being loaded or reloaded.\n        Manager.prototype.canProcessActions = function() {\n            return !this._isLoading;\n        };\n\n        // Handle notify from RegionConnection about an item.\n        Manager.prototype.onNotify = function(action, data) {\n            // Place the notification in the action queue.\n            this._actionQueue.push({\n                action: action,\n                data: data\n            });\n            // Processing incoming actions is enabled. Otherwise they\n            // will be queued until processActions is called.\n            if(this.canProcessActions()) {\n               $rootScope.$apply(this.processActions());\n            }\n        };\n\n        // Process all actions to keep the item information up-to-date.\n        Manager.prototype.processActions = function() {\n            while(this._actionQueue.length > 0) {\n                var action = this._actionQueue.shift();\n                if(action.action === \"create\") {\n                    // Check that the received data doesn't already exists\n                    // in the _items list. If it does then this is actually\n                    // an update action not a create action.\n                    var idx = this._getIndexOfItem(\n                        this._items, action.data[this._pk]);\n                    if(idx >= 0) {\n                        // Actually this is an update action not a create\n                        // action. So replace the item instead of adding it.\n                        this._replaceItem(action.data);\n                    } else {\n                        action.data.$selected = false;\n                        this._updateMetadata(\n                            action.data, METADATA_ACTIONS.CREATE);\n                        this._items.push(action.data);\n                    }\n                    this._processItem(action.data);\n                } else if(action.action === \"update\") {\n                    this._replaceItem(action.data);\n                    this._processItem(action.data);\n                } else if(action.action === \"delete\") {\n                    this._removeItem(action.data);\n                }\n            }\n        };\n\n        // Return list of selected items.\n        Manager.prototype.getSelectedItems = function() {\n            return this._selectedItems;\n        };\n\n        // Mark the given item as selected.\n        Manager.prototype.selectItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: selection of \" + this._handler + \"(\" + pk_value +\n                    \") failed because its missing in the items list.\");\n                return;\n            }\n\n            var item = this._items[idx];\n            item.$selected = true;\n\n            idx = this._selectedItems.indexOf(item);\n            if(idx === -1) {\n                this._selectedItems.push(item);\n            }\n        };\n\n        // Mark the given item as unselected.\n        Manager.prototype.unselectItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: de-selection of \" + this._handler + \"(\" +\n                    pk_value + \") failed because its missing in the \" +\n                    \"nodes list.\");\n                return;\n            }\n\n            var item = this._items[idx];\n            item.$selected = false;\n\n            idx = this._selectedItems.indexOf(item);\n            if(idx >= 0) {\n                this._selectedItems.splice(idx, 1);\n            }\n        };\n\n        // Determine if a item is selected.\n        Manager.prototype.isSelected = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: unable to determine if \" + this._handler + \"(\" +\n                    pk_value + \") is selected because its missing in the \" +\n                    \"nodes list.\");\n                return false;\n            }\n\n            return this._items[idx].$selected === true;\n        };\n\n        // Return the metadata object value from `metadatas` matching `name`.\n        Manager.prototype._getMetadataValue = function(metadatas, name) {\n            var i;\n            for(i = 0; i < metadatas.length; i++) {\n                if(metadatas[i].name === name) {\n                    return metadatas[i];\n                }\n            }\n            return null;\n        };\n\n        // Add new value to metadatas if it doesnt exists or increment the\n        // count if it already does.\n        Manager.prototype._addMetadataValue = function(metadatas, value) {\n            var metadata = this._getMetadataValue(metadatas, value);\n            if(metadata) {\n                metadata.count += 1;\n            } else {\n                metadata = {\n                    name: value,\n                    count: 1\n                };\n                metadatas.push(metadata);\n            }\n        };\n\n        // Remove value from metadatas.\n        Manager.prototype._removeMetadataValue = function(metadatas, value) {\n            var metadata = this._getMetadataValue(metadatas, value);\n            if(metadata) {\n                metadata.count -= 1;\n                if(metadata.count <= 0) {\n                    metadatas.splice(metadatas.indexOf(metadata), 1);\n                }\n            }\n        };\n\n        // Update the metadata entry in `metadatas` for the array value and\n        // based on the action.\n        Manager.prototype._updateMetadataArrayEntry = function(\n                metadatas, newValue, action, oldValue) {\n            var self = this;\n\n            if(action === METADATA_ACTIONS.CREATE) {\n                angular.forEach(newValue, function(value) {\n                    // On create ignore empty values.\n                    if(value === '') {\n                        return;\n                    }\n                    self._addMetadataValue(metadatas, value);\n                });\n            } else if(action === METADATA_ACTIONS.DELETE) {\n                angular.forEach(newValue, function(value) {\n                    self._removeMetadataValue(metadatas, value);\n                });\n            } else if(action === METADATA_ACTIONS.UPDATE &&\n                angular.isDefined(oldValue)) {\n                // Any values in added are new on the item, and any values left\n                // in oldArray have been removed.\n                var added = [];\n                var oldArray = angular.copy(oldValue);\n                angular.forEach(newValue, function(value) {\n                    var idx = oldArray.indexOf(value);\n                    if(idx === -1) {\n                        // Value not in oldArray so it has been added.\n                        added.push(value);\n                    } else {\n                        // Value already in oldArray so its already tracked.\n                        oldArray.splice(idx, 1);\n                    }\n                });\n\n                // Add the new values.\n                angular.forEach(added, function(value) {\n                    self._addMetadataValue(metadatas, value);\n                });\n\n                // Remove the old values.\n                angular.forEach(oldArray, function(value) {\n                    self._removeMetadataValue(metadatas, value);\n                });\n            }\n        };\n\n        // Update the metadata entry in `metadatas` for the newValue and based\n        // on the action. Method does not work with array values, use\n        // _updateMetadataArrayEntry for values that are arrays.\n        Manager.prototype._updateMetadataValueEntry = function(\n                metadatas, newValue, action, oldValue) {\n            if(action === METADATA_ACTIONS.CREATE) {\n                // On create ignore empty values.\n                if(newValue === '') {\n                    return;\n                }\n                this._addMetadataValue(metadatas, newValue);\n            } else if(action === METADATA_ACTIONS.DELETE) {\n                this._removeMetadataValue(metadatas, newValue);\n            } else if(action === METADATA_ACTIONS.UPDATE &&\n                angular.isDefined(oldValue)) {\n                if(oldValue !== newValue) {\n                    if(oldValue !== \"\") {\n                        // Decrement the old value\n                        this._removeMetadataValue(metadatas, oldValue);\n                    }\n\n                    // Increment the new value with the \"create\"\n                    // operation.\n                    this._updateMetadataEntry(\n                        metadatas, newValue, METADATA_ACTIONS.CREATE, oldValue);\n                }\n            }\n        };\n\n        // Update the metadata entry in `metadatas` with the newValue and based\n        // on the action. Update action will use the oldValue to remove it from\n        // the metadata.\n        Manager.prototype._updateMetadataEntry = function(\n                metadatas, newValue, action, oldValue) {\n            if(angular.isArray(newValue)) {\n                this._updateMetadataArrayEntry(\n                    metadatas, newValue, action, oldValue);\n            } else {\n                this._updateMetadataValueEntry(\n                    metadatas, newValue, action, oldValue);\n            }\n        };\n\n        // Return the metadata object.\n        Manager.prototype.getMetadata = function() {\n            return this._metadata;\n        };\n\n        // Update the metadata objects based on the given item and action.\n        Manager.prototype._updateMetadata = function(item, action) {\n            var self = this;\n            var oldItem, idx;\n            if(action === METADATA_ACTIONS.UPDATE) {\n                // Update actions require the oldItem if it exist in the\n                // current item listing.\n                idx = this._getIndexOfItem(this._items, item[this._pk]);\n                if(idx >= 0) {\n                    oldItem = this._items[idx];\n                }\n            }\n            angular.forEach(this._metadataAttributes, function(func, attr) {\n                if(angular.isUndefined(self._metadata[attr])) {\n                    self._metadata[attr] = [];\n                }\n                var newValue, oldValue;\n                if(angular.isFunction(func)) {\n                    newValue = func(item);\n                    if(angular.isObject(oldItem)) {\n                        oldValue = func(oldItem);\n                    }\n                } else {\n                    newValue = item[attr];\n                    if(angular.isObject(oldItem)) {\n                        oldValue = oldItem[attr];\n                    }\n                }\n                self._updateMetadataEntry(\n                    self._metadata[attr], newValue, action, oldValue);\n            });\n        };\n\n        // Default implementation of getName(): returns the default name for\n        // this object, if it exists.\n        Manager.prototype.getName = function(obj) {\n            if(!angular.isObject(obj)) {\n                return;\n            }\n            if(angular.isString(obj[this._name_field])) {\n                return obj[this._name_field];\n            }\n        };\n\n        return Manager;\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Manager Helper Service\n *\n * Used by controllers to load managers. It helps the initialization of\n * managers and makes sure that all items in the manager are loaded\n * before resolving the defer.\n */\n\nangular.module('MAAS').service('ManagerHelperService', [\n    '$q', '$timeout', 'ErrorService', 'RegionConnection',\n    function($q, $timeout, ErrorService, RegionConnection) {\n\n        // Loads the manager.\n        this.loadManager = function(scope, manager) {\n            var defer = $q.defer();\n\n            // If the manager already has this scope loaded then nothing needs\n            // to be done.\n            if(manager._scopes.indexOf(scope) > -1) {\n                $timeout(function() {\n                    defer.resolve(manager);\n                });\n                return defer.promise;\n            }\n\n            // Do this entire operation with in the context of the region\n            // connection is connected.\n            RegionConnection.defaultConnect().then(function() {\n                if(manager._type === 'notify') {\n                    if(manager.isLoaded()) {\n                        $timeout(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        });\n                    } else {\n                        manager.loadItems().then(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                    }\n                    // Always enable auto reload. This will make sure the items\n                    // are reloaded if the connection goes down.\n                    manager.enableAutoReload();\n\n                    // Remove the scope for the loaded scopes for the manager.\n                    scope.$on(\"$destroy\", function() {\n                        var idx = manager._scopes.indexOf(scope);\n                        if(idx > -1) {\n                            manager._scopes.splice(idx, 1);\n                        }\n                    });\n                } else if(manager._type === 'poll') {\n                    if(manager.isPolling()) {\n                        $timeout(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        });\n                    } else {\n                        manager.startPolling().then(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                    }\n\n                    // Stop the polling when the scope is destroyed and its\n                    // not in use by any other scopes.\n                    scope.$on(\"$destroy\", function() {\n                        var idx = manager._scopes.indexOf(scope);\n                        if(idx > -1) {\n                            manager._scopes.splice(idx, 1);\n                        }\n                        if(manager._scopes.length === 0) {\n                            manager.stopPolling();\n                        }\n                    });\n                } else {\n                    throw new Error(\"Unknown manager type: \" + manager._type);\n                }\n            });\n            return defer.promise;\n        };\n\n        // Gets the list of managers.\n        this.loadManagers = function(scope, managers) {\n            var defer = $q.defer();\n            var loadedManagers = [];\n\n            // Resolves the defer if all managers are loaded.\n            var resolveAllLoaded = function() {\n                if(loadedManagers.length === managers.length) {\n                    defer.resolve(managers);\n                }\n            };\n\n            var self = this;\n            angular.forEach(managers, function(manager) {\n                self.loadManager(scope, manager).then(function(loadedManager) {\n                    loadedManagers.push(loadedManager);\n                    resolveAllLoaded();\n                });\n            });\n            return defer.promise;\n        };\n\n        // Tries to parse the specified string as JSON. If parsing fails,\n        // returns the original string. (This is useful since some manager\n        // calls return an error that could be either plain text, or JSON.)\n        this.tryParsingJSON = function(string) {\n            var error;\n            try {\n                error = JSON.parse(string);\n            } catch(e) {\n                if (e instanceof SyntaxError) {\n                    return string;\n                } else {\n                    throw e;\n                }\n            }\n            return error;\n        };\n\n        // Returns a printable version of the specified dictionary (useful\n        // for displaying an error to the user).\n        this.getPrintableString = function(dict, showNames) {\n            var result = '';\n            angular.forEach(dict, function(value, key) {\n                var error = dict[key];\n                if(showNames === true) {\n                    result += key + \": \";\n                }\n                if(angular.isString(error) || angular.isNumber(error)) {\n                    result += error + \"  \";\n                } else if(angular.isObject(error)) {\n                    angular.forEach(error, function(error) {\n                        result += error + \"  \";\n                    });\n                }\n                result = result.trim() + \"\\n\";\n            });\n            return result.trim();\n        };\n\n        // Convert the Python dict error message to displayed message.\n        // We know it's probably a form ValidationError dictionary, so just use\n        // it as such, and recover if that doesn't parse as JSON.\n        this.parseValidationError = function(error, showNames) {\n            error = this.tryParsingJSON(error);\n            if(!angular.isObject(error)) {\n                return error;\n            } else {\n                return this.getPrintableString(error, showNames);\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Manager\n *\n * Manages all of the spaces in the browser. The manager uses the\n * RegionConnection to load the spaces, update the spaces, and listen for\n * notification events about spaces.\n */\n\nangular.module('MAAS').factory(\n    'PollingManager',\n    ['$q', '$timeout', 'RegionConnection', 'Manager',\n    function($q, $timeout, RegionConnection, Manager) {\n\n        function PollingManager() {\n            Manager.call(this);\n\n            // The way this manager recieves its updated information. 'poll'\n            // means this manager periodicly polls for new data from the\n            // websocket.\n            this._type = 'poll';\n\n            // Set to true when polling has been enabled.\n            this._polling = false;\n\n            // The next promise for the polling interval.\n            this._nextPromise = null;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 3000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n        }\n\n        PollingManager.prototype = new Manager();\n\n        // Returns true when currently polling.\n        PollingManager.prototype.isPolling = function() {\n            return this._polling;\n        };\n\n        // Starts the polling.\n        PollingManager.prototype.startPolling = function() {\n            if(!this._polling) {\n                this._polling = true;\n                return this._poll();\n            } else {\n                return this._nextPromise;\n            }\n        };\n\n        // Stops the polling.\n        PollingManager.prototype.stopPolling = function() {\n            this._polling = false;\n            if(angular.isObject(this._nextPromise)) {\n                $timeout.cancel(this._nextPromise);\n                this._nextPromise = null;\n            }\n        };\n\n        // Registers the next polling attempt.\n        PollingManager.prototype._pollAgain = function(timeout) {\n            var self = this;\n            this._nextPromise = $timeout(function() {\n                self._poll();\n            }, timeout);\n            return this._nextPromise;\n        };\n\n        // Polls for the data from the region.\n        PollingManager.prototype._poll = function() {\n            var self = this;\n            return this.reloadItems().then(function(items) {\n                var pollTimeout = self._pollTimeout;\n                if(items.length === 0) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(pollTimeout);\n                return items;\n            }, function(error) {\n                self._pollAgain(self._pollErrorTimeout);\n                return $q.reject(error);\n            });\n        };\n\n        return PollingManager;\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Search Services\n */\n\nangular.module('MAAS').service('SearchService', function() {\n\n    // Holds an empty filter object.\n    var emptyFilter = { _: [] };\n\n    // Return a new empty filter;\n    this.getEmptyFilter = function() {\n        return angular.copy(emptyFilter);\n    };\n\n    // Splits the search string into different terms based on white space.\n    // This handles the ability for whitespace to be inside of '(', ')'.\n    //\n    // XXX blake_r 28-01-15: This could be improved with a regex, but was\n    // unable to come up with one that would allow me to validate the end\n    // ')' in the string.\n    this.getSplitSearch = function(search) {\n        var terms = search.split(' ');\n        var fixedTerms = [];\n        var spanningParentheses = false;\n        angular.forEach(terms, function(term, idx) {\n            if(spanningParentheses) {\n                // Previous term had an opening '(' but not a ')'. This\n                // term should join that previous term.\n                fixedTerms[fixedTerms.length - 1] += ' ' + term;\n\n                // If the term contains the ending ')' then its the last\n                // in the group.\n                if(term.indexOf(')') !== -1) {\n                    spanningParentheses = false;\n                }\n            } else {\n                // Term is not part of a previous '(' span.\n                fixedTerms.push(term);\n\n                var startIdx = term.indexOf('(');\n                if(startIdx !== -1) {\n                    if(term.indexOf(')', startIdx) === -1) {\n                        // Contains a starting '(' but not a ending ')'.\n                        spanningParentheses = true;\n                    }\n                }\n            }\n        });\n\n        if(spanningParentheses) {\n            // Missing ending parentheses so error with terms.\n            return null;\n        }\n        return fixedTerms;\n    };\n\n    // Return all of the currently active filters for the given search.\n    this.getCurrentFilters = function(search) {\n        var filters = this.getEmptyFilter();\n        if(search.length === 0) {\n            return filters;\n        }\n        var searchTerms = this.getSplitSearch(search);\n        if(!searchTerms) {\n            return null;\n        }\n        angular.forEach(searchTerms, function(terms) {\n            terms = terms.split(':');\n            if(terms.length === 1) {\n                // Search term is not specifing a specific field. Gets\n                // add to the '_' section of the filters.\n                if(filters._.indexOf(terms[0]) === -1) {\n                    filters._.push(terms[0]);\n                }\n            } else {\n                var field = terms.shift();\n                var values = terms.join(\":\");\n\n                // Remove the starting '(' and ending ')'.\n                values = values.replace('(', '');\n                values = values.replace(')', '');\n\n                // If empty values then do nothing.\n                if(values.length === 0) {\n                    return;\n                }\n\n                // Split the values based on comma.\n                values = values.split(',');\n\n                // Add the values to filters.\n                if(angular.isUndefined(filters[field])) {\n                    filters[field] = [];\n                }\n                angular.forEach(values, function(value) {\n                    if(filters[field].indexOf(value) === -1) {\n                        filters[field].push(value);\n                    }\n                });\n            }\n        });\n        return filters;\n    };\n\n    // Convert \"filters\" into a search string.\n    this.filtersToString = function(filters) {\n        var search = \"\";\n        angular.forEach(filters, function(terms, type) {\n            // Skip empty and skip \"_\" as it gets appended at the\n            // beginning of the search.\n            if(terms.length === 0 || type === \"_\") {\n                return;\n            }\n            search += type + \":(\" + terms.join(\",\") + \") \";\n        });\n        if(filters._.length > 0) {\n            search = filters._.join(\" \") + \" \" + search;\n        }\n        return search.trim();\n    };\n\n    // Return the index of the value in the type for the filter.\n    this._getFilterValueIndex = function(filters, type, value) {\n        var values = filters[type];\n        if(angular.isUndefined(values)) {\n            return -1;\n        }\n        var lowerValues = values.map(function(value) {\n            return value.toLowerCase();\n        });\n        return lowerValues.indexOf(value.toLowerCase());\n    };\n\n    // Return true if the type and value are in the filters.\n    this.isFilterActive = function(filters, type, value, exact) {\n        var values = filters[type];\n        if(angular.isUndefined(values)) {\n            return false;\n        }\n        if(angular.isUndefined(exact)) {\n            exact = false;\n        }\n        if(exact) {\n            value = \"=\" + value;\n        }\n        return this._getFilterValueIndex(filters, type, value) !== -1;\n    };\n\n    // Toggles a filter on or off based on type and value.\n    this.toggleFilter = function(filters, type, value, exact) {\n        if(angular.isUndefined(filters[type])) {\n            filters[type] = [];\n        }\n        if(exact) {\n            value = \"=\" + value;\n        }\n        var idx = this._getFilterValueIndex(filters, type, value);\n        if(idx === -1) {\n            filters[type].push(value);\n        } else {\n            filters[type].splice(idx, 1);\n        }\n        return filters;\n    };\n\n    // Holds all stored filters.\n    var storedFilters = {};\n\n    // Store a filter for later.\n    this.storeFilters = function(name, filters) {\n        storedFilters[name] = filters;\n    };\n\n    // Retrieve a stored fitler.\n    this.retrieveFilters = function(name) {\n        return storedFilters[name];\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Validation Service\n *\n * Used by controllers to validate user inputs.\n */\n\nangular.module('MAAS').service('ValidationService', [\n    'ConverterService', function(ConverterService) {\n\n        // Pattern that matches a domainname.\n        // XXX 2016-02-24 lamont: This also matches \"example.com.\",\n        // which is wrong.\n        var domainnamePattern =\n            /^([a-z\\d]|[a-z\\d][a-z\\d-.]*[a-z\\d])*$/i;\n\n        // Pattern that matches a hostname.\n        var hostnamePattern =\n            /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])*$/;\n\n        // Pattern that matches a MAC.\n        var macPattern = /^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$/;\n\n        // Pattern used to match IPv4.\n        var ipv4Pattern = new RegExp([\n            '^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n            ].join(''));\n\n        // Returns true if the octets in one equal two with the cidr mask in\n        // bits applied to both.\n        function cidrMatcher(one, two, size, bits) {\n            var part = 0;\n            while(bits > 0) {\n                var shift = size - bits;\n                if(shift < 0) {\n                    shift = 0;\n                }\n\n                var oneShift = one[part] >> shift;\n                var twoShift = two[part] >> shift;\n                if(oneShift !== twoShift) {\n                    return false;\n                }\n                bits -= size;\n                part += 1;\n            }\n            return true;\n        }\n\n        // Return true if the domainname is valid, false otherwise.\n        this.validateDomainName = function(domainname) {\n            // Invalid if the domain is not a string, empty, or more than\n            // 253 characters.\n            if(!angular.isString(domainname) ||\n                domainname.length === 0 || domainname.length > 253) {\n                return false;\n            }\n            return domainnamePattern.test(domainname);\n        };\n\n        // Return true if the hostname is valid, false otherwise.\n        this.validateHostname = function(hostname) {\n            // Invalid if the hostname is not a string, empty, or more than\n            // 63 characters.\n            if(!angular.isString(hostname) ||\n                hostname.length === 0 || hostname.length > 63) {\n                return false;\n            }\n            return hostnamePattern.test(hostname);\n        };\n\n        // Return true if the MAC is valid, false otherwise.\n        this.validateMAC = function(macAddress) {\n            // Invalid if the macAddress is not a string.\n            if(!angular.isString(macAddress)) {\n                return false;\n            }\n            return macPattern.test(macAddress.trim());\n        };\n\n        // Return true if the IP is valid IPv4 address, false otherwise.\n        this.validateIPv4 = function(ipAddress) {\n            // Invalid if the ipAddress is not a string or empty.\n            if(!angular.isString(ipAddress) || ipAddress.length === 0) {\n                return false;\n            }\n            return ipv4Pattern.test(ipAddress);\n        };\n\n        // Return true if the IP is valid IPv6 address, false otherwise.\n        this.validateIPv6 = function(ipAddress) {\n            // Invalid if the ipAddress is not a string, empty, or missing\n            // at least one ':'.\n            if(!angular.isString(ipAddress) ||\n                ipAddress.length === 0 ||\n                ipAddress.indexOf(':') === -1) {\n                return false;\n            }\n            var expandedAddress = ConverterService.ipv6Expand(ipAddress);\n            var octets = ConverterService.ipv6ToGroups(expandedAddress);\n            if(octets.length !== 8) {\n                return false;\n            }\n\n            // Make sure all octets are in range.\n            var i;\n            for(i = 0; i < 8; i++) {\n                if(isNaN(octets[i]) || octets[i] < 0 || octets[i] > 0xffff) {\n                    // Out of range.\n                    return false;\n                }\n            }\n\n            // Don't allow unspecified, loopback, multicast, link-local\n            // unicast, or anything out of range.\n            if(octets[0] < 1 ||\n                octets[0] === 0xff00 ||\n                octets[0] === 0xfe80) {\n                return false;\n            }\n            return true;\n        };\n\n        // Return true if the IP is valid, false otherwise.\n        this.validateIP = function(ipAddress) {\n            return (\n                this.validateIPv4(ipAddress) || this.validateIPv6(ipAddress));\n        };\n\n        // Return true if the ipAddress is in the network.\n        this.validateIPInNetwork = function(ipAddress, network) {\n            var networkSplit = network.split('/');\n            var networkAddress = networkSplit[0];\n            var cidrBits = parseInt(networkSplit[1], 10);\n\n            if(this.validateIPv4(ipAddress) &&\n                this.validateIPv4(networkAddress)) {\n                return cidrMatcher(\n                    ConverterService.ipv4ToOctets(ipAddress),\n                    ConverterService.ipv4ToOctets(networkAddress),\n                    8, cidrBits);\n            } else if(this.validateIPv6(ipAddress) &&\n                this.validateIPv6(networkAddress)) {\n                return cidrMatcher(\n                    ConverterService.ipv6ToGroups(ipAddress),\n                    ConverterService.ipv6ToGroups(networkAddress),\n                    16, cidrBits);\n            }\n            return false;\n        };\n\n        // Return true if the ipAddress is in the network and between the\n        // lowAddress and highAddress inclusive.\n        this.validateIPInRange = function(\n            ipAddress, network, lowAddress, highAddress) {\n            // If the ip address is not even in the network then its\n            // not in the range.\n            if(!this.validateIPInNetwork(ipAddress, network)) {\n                return false;\n            }\n\n            var i, ipOctets, lowOctets, highOctets;\n            if(this.validateIPv4(ipAddress) &&\n                this.validateIPv4(lowAddress) &&\n                this.validateIPv4(highAddress)) {\n\n                // Check that each octet is of the ip address is more or equal\n                // to the low address and less or equal to the high address.\n                ipOctets = ConverterService.ipv4ToOctets(ipAddress);\n                lowOctets = ConverterService.ipv4ToOctets(lowAddress);\n                highOctets = ConverterService.ipv4ToOctets(highAddress);\n                for(i = 0; i < 4; i++) {\n                    if(ipOctets[i] > highOctets[i] ||\n                        ipOctets[i] < lowOctets[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            } else if(this.validateIPv6(ipAddress) &&\n                this.validateIPv6(lowAddress) &&\n                this.validateIPv6(highAddress)) {\n\n                // Check that each octet is of the ip address is more or equal\n                // to the low address and less or equal to the high address.\n                ipOctets = ConverterService.ipv6ToGroups(ipAddress);\n                lowOctets = ConverterService.ipv6ToGroups(lowAddress);\n                highOctets = ConverterService.ipv6ToGroups(highAddress);\n                for(i = 0; i < 8; i++) {\n                    if(ipOctets[i] > highOctets[i] ||\n                        ipOctets[i] < lowOctets[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n    }]);\n","/*\nTODO:\n - Keyboard navigation\n*/\n\n\nvar MAASUI = MAASUI || {};\n\n/**\n * A set of framework-agnostic JavaScript utilities for the MAAS UI\n * @namespace MAASUI.utils\n * @return {Object} public methods\n */\nMAASUI.utils = (function() {\n  /**\n   * Run the supplied function when page content is loaded\n   * @namespace MAASUI.utils\n   * @method ready\n   * @param {Object} fn - the function to run\n   */\n  var ready = function(fn) {\n    if (document.attachEvent ? document.readyState === \"complete\" :\n        document.readyState !== \"loading\") {\n      fn();\n    } else {\n      document.addEventListener('DOMContentLoaded', fn);\n    }\n    return true;\n  };\n\n  /**\n   * Toggle a specified class on the provided element\n   * @namespace MAASUI.utils\n   * @method toggleClass\n   * @param {Object} el - a DOM element\n   * @param {String} className - the class name to toggle\n   * @return {bool} true for success or false if incorrect params are given\n   */\n  var toggleClass = function(el, className) {\n    if (typeof(el) != 'undefined' && el != null) {\n      if (el.classList) {\n        el.classList.toggle(className);\n      } else {\n        var classes = el.className.split(' ');\n        var existingIndex = classes.indexOf(className);\n        if (existingIndex >= 0) {\n          classes.splice(existingIndex, 1);\n        } else {\n          classes.push(className);\n        }\n        el.className = classes.join(' ');\n      }\n    } else {\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Remove a specified class from the provided element\n   * @namespace MAASUI.utils\n   * @method removeClass\n   * @param {Object} el - a DOM element\n   * @param {String} className - the class name to remove\n   * @return {bool} true for success or false if incorrect params are given\n   */\n  var removeClass = function(el, className) {\n    if (typeof(el) != 'undefined' && el != null) {\n      if (el.classList) {\n        el.classList.remove(className);\n      } else {\n        el.className = el.className.replace(new RegExp(\n          '(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    } else {\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Check if a DOM element has a class\n   * @namespace MAASUI.utils\n   * @method hasClass\n   * @param {Object} el - a DOM element\n   * @param {String} className - the class name to check\n   * @return {bool} is the class present\n   */\n  var hasClass = function(el, className) {\n    var hasClass = false;\n\n    if (el.classList) {\n      hasClass = el.classList.contains(className);\n    } else {\n      hasClass = new RegExp(\n        '(^| )' + className + '( |$)', 'gi').test(el.className);\n    }\n\n    return hasClass;\n  };\n\n  /**\n   * Remove a specified class from the provided element\n   * @namespace MAASUI.utils\n   * @method addClass\n   * @param {Object} el - a DOM element\n   * @param {String} className - the class name to add\n   */\n  var addClass = function(el, className) {\n    if (!hasClass(el, className)) {\n      if (el.classList) {\n        el.classList.add(className);\n      } else {\n        el.className += ' ' + className;\n      }\n    }\n  };\n\n  /**\n   * Find an element's closest ancestor with a specific class\n   * @namespace MAASUI.utils\n   * @method findAncestor\n   * @param {Object} el - a DOM element\n   * @param {String} className - the class name of the ancestor to find\n   */\n  var findAncestor = function(el, className) {\n    while ((el = el.parentElement) && !el.classList.contains(className));\n    return el;\n  }\n\n  return {\n    ready: ready,\n    toggleClass: toggleClass,\n    removeClass: removeClass,\n    hasClass: hasClass,\n    addClass: addClass,\n    findAncestor: findAncestor\n  };\n})();\n"],"sourceRoot":""}