{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/maasserver/static/js/angular/controllers/add_device.js","webpack:///./src/maasserver/static/js/angular/controllers/add_domain.js","webpack:///./src/maasserver/static/js/angular/controllers/add_hardware.js","webpack:///./src/maasserver/static/js/angular/controllers/dashboard.js","webpack:///./src/maasserver/static/js/angular/controllers/domain_details.js","webpack:///./src/maasserver/static/js/angular/controllers/domains_list.js","webpack:///./src/maasserver/static/js/angular/controllers/fabric_details.js","webpack:///./src/maasserver/static/js/angular/controllers/images.js","webpack:///./src/maasserver/static/js/angular/controllers/intro.js","webpack:///./src/maasserver/static/js/angular/controllers/intro_user.js","webpack:///./src/maasserver/static/js/angular/controllers/networks_list.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_networking.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_storage.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_storage_filesystems.js","webpack:///./src/maasserver/static/js/angular/controllers/node_events.js","webpack:///./src/maasserver/static/js/angular/controllers/node_result.js","webpack:///./src/maasserver/static/js/angular/controllers/node_results.js","webpack:///./src/maasserver/static/js/angular/controllers/nodes_list.js","webpack:///./src/maasserver/static/js/angular/controllers/pod_details.js","webpack:///./src/maasserver/static/js/angular/controllers/pods_list.js","webpack:///./src/maasserver/static/js/angular/controllers/prefs.js","webpack:///./src/maasserver/static/js/angular/controllers/settings.js","webpack:///./src/maasserver/static/js/angular/controllers/space_details.js","webpack:///./src/maasserver/static/js/angular/controllers/subnet_details.js","webpack:///./src/maasserver/static/js/angular/controllers/vlan_details.js","webpack:///./src/maasserver/static/js/angular/controllers/zone_details.js","webpack:///./src/maasserver/static/js/angular/controllers/zones_list.js","webpack:///./src/maasserver/static/js/angular/directives/accordion.js","webpack:///./src/maasserver/static/js/angular/directives/boot_images.js","webpack:///./src/maasserver/static/js/angular/directives/call_to_action.js","webpack:///./src/maasserver/static/js/angular/directives/card_loader.js","webpack:///./src/maasserver/static/js/angular/directives/code_lines.js","webpack:///./src/maasserver/static/js/angular/directives/contenteditable.js","webpack:///./src/maasserver/static/js/angular/directives/controller_image_status.js","webpack:///./src/maasserver/static/js/angular/directives/controller_status.js","webpack:///./src/maasserver/static/js/angular/directives/dbl_click_overlay.js","webpack:///./src/maasserver/static/js/angular/directives/default_os_select.js","webpack:///./src/maasserver/static/js/angular/directives/enter.js","webpack:///./src/maasserver/static/js/angular/directives/enter_blur.js","webpack:///./src/maasserver/static/js/angular/directives/error_overlay.js","webpack:///./src/maasserver/static/js/angular/directives/error_toggle.js","webpack:///./src/maasserver/static/js/angular/directives/ipranges.js","webpack:///./src/maasserver/static/js/angular/directives/login.js","webpack:///./src/maasserver/static/js/angular/directives/maas_obj_form.js","webpack:///./src/maasserver/static/js/angular/directives/mac_address.js","webpack:///./src/maasserver/static/js/angular/directives/machines_table.js","webpack:///./src/maasserver/static/js/angular/directives/navigation_dropdown.js","webpack:///./src/maasserver/static/js/angular/directives/navigation_mobile.js","webpack:///./src/maasserver/static/js/angular/directives/notifications.js","webpack:///./src/maasserver/static/js/angular/directives/os_select.js","webpack:///./src/maasserver/static/js/angular/directives/placeholder.js","webpack:///./src/maasserver/static/js/angular/directives/pod_parameters.js","webpack:///./src/maasserver/static/js/angular/directives/power_parameters.js","webpack:///./src/maasserver/static/js/angular/directives/pref_keys.js","webpack:///./src/maasserver/static/js/angular/directives/proxy_settings.js","webpack:///./src/maasserver/static/js/angular/directives/release_name.js","webpack:///./src/maasserver/static/js/angular/directives/release_options.js","webpack:///./src/maasserver/static/js/angular/directives/script_expander.js","webpack:///./src/maasserver/static/js/angular/directives/script_results_list.js","webpack:///./src/maasserver/static/js/angular/directives/script_runtime.js","webpack:///./src/maasserver/static/js/angular/directives/script_select.js","webpack:///./src/maasserver/static/js/angular/directives/script_status.js","webpack:///./src/maasserver/static/js/angular/directives/ssh_keys.js","webpack:///./src/maasserver/static/js/angular/directives/switches_table.js","webpack:///./src/maasserver/static/js/angular/directives/toggle_control.js","webpack:///./src/maasserver/static/js/angular/directives/type.js","webpack:///./src/maasserver/static/js/angular/directives/version_reloader.js","webpack:///./src/maasserver/static/js/angular/directives/window_width.js","webpack:///./src/maasserver/static/js/angular/factories/bootresources.js","webpack:///./src/maasserver/static/js/angular/factories/configs.js","webpack:///./src/maasserver/static/js/angular/factories/controllers.js","webpack:///./src/maasserver/static/js/angular/factories/devices.js","webpack:///./src/maasserver/static/js/angular/factories/dhcpsnippets.js","webpack:///./src/maasserver/static/js/angular/factories/discoveries.js","webpack:///./src/maasserver/static/js/angular/factories/domains.js","webpack:///./src/maasserver/static/js/angular/factories/events.js","webpack:///./src/maasserver/static/js/angular/factories/fabrics.js","webpack:///./src/maasserver/static/js/angular/factories/general.js","webpack:///./src/maasserver/static/js/angular/factories/ipranges.js","webpack:///./src/maasserver/static/js/angular/factories/machines.js","webpack:///./src/maasserver/static/js/angular/factories/node_results.js","webpack:///./src/maasserver/static/js/angular/factories/nodes.js","webpack:///./src/maasserver/static/js/angular/factories/notifications.js","webpack:///./src/maasserver/static/js/angular/factories/packagerepositories.js","webpack:///./src/maasserver/static/js/angular/factories/pods.js","webpack:///./src/maasserver/static/js/angular/factories/region.js","webpack:///./src/maasserver/static/js/angular/factories/resourcepools.js","webpack:///./src/maasserver/static/js/angular/factories/scripts.js","webpack:///./src/maasserver/static/js/angular/factories/services.js","webpack:///./src/maasserver/static/js/angular/factories/spaces.js","webpack:///./src/maasserver/static/js/angular/factories/sshkeys.js","webpack:///./src/maasserver/static/js/angular/factories/staticroutes.js","webpack:///./src/maasserver/static/js/angular/factories/subnets.js","webpack:///./src/maasserver/static/js/angular/factories/switches.js","webpack:///./src/maasserver/static/js/angular/factories/tags.js","webpack:///./src/maasserver/static/js/angular/factories/users.js","webpack:///./src/maasserver/static/js/angular/factories/vlans.js","webpack:///./src/maasserver/static/js/angular/factories/zones.js","webpack:///./src/maasserver/static/js/angular/filters/by_fabric.js","webpack:///./src/maasserver/static/js/angular/filters/by_space.js","webpack:///./src/maasserver/static/js/angular/filters/by_subnet.js","webpack:///./src/maasserver/static/js/angular/filters/by_vlan.js","webpack:///./src/maasserver/static/js/angular/filters/nodes.js","webpack:///./src/maasserver/static/js/angular/filters/order_by_date.js","webpack:///./src/maasserver/static/js/angular/filters/remove_default_vlan.js","webpack:///./src/maasserver/static/js/angular/maas.js","webpack:///./src/maasserver/static/js/angular/services/browser.js","webpack:///./src/maasserver/static/js/angular/services/converter.js","webpack:///./src/maasserver/static/js/angular/services/error.js","webpack:///./src/maasserver/static/js/angular/services/json.js","webpack:///./src/maasserver/static/js/angular/services/log.js","webpack:///./src/maasserver/static/js/angular/services/manager.js","webpack:///./src/maasserver/static/js/angular/services/managerhelper.js","webpack:///./src/maasserver/static/js/angular/services/pollingmanager.js","webpack:///./src/maasserver/static/js/angular/services/search.js","webpack:///./src/maasserver/static/js/angular/services/validation.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","angular","controller","$scope","DevicesManager","SubnetsManager","DomainsManager","ManagerHelperService","ValidationService","newDevice","cloneDevice","isObject","domain","interfaces","mac","ipAssignment","subnetId","ipAddress","getDefaultDomain","$parent","addDeviceScope","subnets","getItems","domains","viewable","error","ipAssignments","title","device","show","loadManagers","then","hide","unloadManagers","$emit","nameHasError","length","validateHostname","macHasError","deviceInterface","validateMAC","ipHasError","validateIP","validateIPInNetwork","cidr","isNumber","subnet","getItemFromList","deviceHasError","externalIpError","staticIpError","addInterface","push","isPrimaryInterface","indexOf","deleteInterface","splice","cancel","save","addAnother","convertedDevice","hostname","primary_mac","extra_macs","forEach","nic","ip_assignment","ip_address","convertDeviceToProtocol","create","parseValidationError","addDomainScope","authoritative","validateDomainName","domainHasError","copy","convertDomainToProtocol","$q","$http","ZonesManager","MachinesManager","GeneralManager","RegionConnection","addHardwareScope","model","zones","architectures","getData","hwe_kernels","default_min_hwe_kernel","power_types","macAddressRegex","machine","chassis","virshFields","label","field_type","default","choices","required","defaultArchitecture","newMachine","cloneMachine","macs","zone","architecture","min_hwe_kernel","power","type","parameters","text","newChassis","cloneChassis","chassisPowerTypes","description","fields","mode","loadedItems","loadedManagers","defer","promise","loadItems","resolve","showMachine","showChassis","addMac","removeMac","idx","invalidName","validateMac","machineHasError","in_error","chassisHasErrors","power_type","field","isUndefined","powerParametersHasError","saveMachine","pxe_mac","shift","map","power_parameters","id","saveChassis","params","chassis_type","username","method","url","data","$","param","headers","Content-Type","$window","$rootScope","$routeParams","$location","DiscoveriesManager","VLANsManager","ConfigsManager","deviceIPOptions","page","loaded","discoveredDevices","machines","devices","configManager","networkDiscovery","column","selectedDevice","convertTo","predicate","last_seen","sortTable","reverse","proxyManager","updateItem","createItem","createInterface","Error","getDiscoveryName","discovery","getSubnetName","getName","getVLANName","vlanId","vlan","toggleSelected","deviceId","discovered","getDomainByName","slice","split","parent","goTo","saved","filter","option","preProcess","item","mac_address","ip","afterSave","obj","_removeItem","isString","path","UsersManager","ErrorService","domainLoaded","displayname","editSummary","action","editRow","deleteRow","domainsManager","newObject","supportedRecordTypes","enterEditSummary","exitEditSummary","isRecordAutogenerated","row","dnsresource_id","editRecord","previous_rrdata","rrdata","previous_rrtype","rrtype","previous_name","previous_ttl","ttl","removeRecord","confirmRemoveRecord","deleteDNSRecord","stopEditingRow","isSuperUser","isDefaultDomain","canBeDeleted","rrsets","deleteButton","actionInProgress","addRecordButton","cancelAction","deleteConfirmButton","deleteDomain","activeDomain","getActiveItem","requestedDomain","parseInt","domain_id","isNaN","raiseError","setActiveItem","$filter","currentpage","loading","addDomain","cancelAddDomain","FabricsManager","SpacesManager","ControllersManager","fabricLoaded","fabric","$watch","updateVLANs","rows","racks","vlans","space","space_name","vlan_name","subnet_name","rack_sids","rack_sid","rack","system_id","keys","key","fabricManager","controllers","isDefaultFabric","confirmingDelete","cancelDeleteButton","deleteFabric","search","reply","activeFabric","requestedFabric","fabric_id","BootResourcesManager","bootResources","autoImport","isArray","resources","PackageRepositoriesManager","repoManager","hasImages","maasName","upstreamDNS","mainArchive","portsArchive","httpProxy","skip","clickContinue","welcomeInError","form","$maasForm","hasErrors","networkInError","inError","objs","canContinue","force","location","reload","MAAS_config","completed_intro","managers","repo","user","sshkeys_count","markIntroComplete","user_completed_intro","loadManager","getAuthUser","filterByVLAN","filterByFabric","filterBySpace","filterByNullSpace","getURLParameters","by","groupBy","ADD_FABRIC_ACTION","selectedTitle","objectName","ADD_VLAN_ACTION","ADD_SPACE_ACTION","ADD_SUBNET_ACTION","subnetManager","fabrics","spaceManager","spaces","vlanManager","group","orphanVLANs","actionObjectInitializers","vlan_ids","updateGroupBy","previous_space","index","updateOrphanVLANs","previous_fabric","previous_vlan","fabric_name","updateFabricsGroupBy","updateActions","actionOptions","actionChanged","actionOption","getFabricNameById","fabricId","actionSubnetPreSave","$on","$interval","TagsManager","ServicesManager","ScriptsManager","ResourcePoolsManager","page_managers","DEVICE_IP_ASSIGNMENT","external","dynamic","static","updateTitle","node","fqdn","updateHeader","header","editing","editing_domain","options","selected","updateAvailableActionOptions","actionTypeForNodeType","0","1","2","3","4","isDataLoaded","node_type","allOptions","availableOptions","actions","updatePower","bmc_node_count","power_bmc_node_count","canEdit","in_pod","isDefined","pod","updateSummary","summary","pool","tags","hasUsableArchitectures","hasInvalidArchitecture","updateServices","isController","services","getServices","service","updateDevices","child","nicIdx","deviceWithMAC","links","link","lIdx","deviceWithLink","nodeLoaded","$watchCollection","storageController","networkingController","showing_confirmation","osinfo","section","area","osSelection","osystem","release","hwe_kernel","commissionOptions","enableSSH","skipNetworking","skipStorage","updateFirmware","configureHBA","commissioningSelection","testSelection","releaseOptions","checkingPower","scripts","getDeviceIPAssignment","events","limit","updateNode","queryPower","nodesManager","checkPowerState","console","log","tagsAutocomplete","query","autocomplete","getPowerStateClass","power_state","getPowerStateText","canCheckPowerState","isUbuntuOS","isUbuntuCoreOS","isCustomOS","isActionError","isDeployError","missing_osinfo","osystems","isSSHKeyError","getSSHKeyCount","optionChanged","actionCancel","actionGo","extra","distro_series","enable_ssh","skip_networking","skip_storage","commissioning_scripts","testing_scripts","status_code","erase","secure_erase","secureErase","quick_erase","quickErase","performAction","$reset","getArchitecturePlaceholder","isDevice","invalidArchitecture","isRackControllerConnected","isLocked","locked","editHeaderDomain","editHeader","editHeaderInvalid","cancelEditHeader","saveEditHeader","cancelEditSummary","saveEditSummary","tag","invalidPowerType","editPower","cancelEditPower","saveEditPower","allowShowMoreEvents","showMoreEvents","getEventText","event","getPowerEventError","level","hasPowerEventError","getPowerEventErrorText","hasActionPowerError","actionName","hasPowerError","missing_packages","getPowerErrors","result","packages","sort","getServiceClass","status","hasCustomCommissioningScripts","script_type","controllerLoaded","scope","showFailedTestWarning","testing_status","getCPUSubtext","cpu_count","cpu_speed","type_name","type_name_title","concat","activeNode","originalInterfaces","filtered","usedVLANs","inter","parents","vlan_id","childInterface","found","link_id","interfaceType","vid","modes","isFunction","getValue","this","nicType","allowLinkUp","JSONService","INTERFACE_TYPE","PHYSICAL","BOND","BRIDGE","VLAN","ALIAS","INTERFACE_TYPE_TEXTS","physical","bond","bridge","alias","LINK_MODE","AUTO","STATIC","DHCP","LINK_UP","LINK_MODE_TEXTS","auto","dhcp","link_up","SELECTION_MODE","NONE","SINGLE","MULTI","DELETE","ADD","CREATE_BOND","CREATE_BRIDGE","CREATE_PHYSICAL","EDIT","IP_ASSIGNMENT","updateLoaded","nodeHasLoaded","managersHaveLoaded","updateInterfaces","vlanTable","addedVlans","children","editInterface","selectedMode","formatted","members","vlanRecord","primary_rack","secondary_rack","sort_key","getVLANText","a","b","localeCompare","nic_copy","subnet_id","interfaceLinksMap","linkMaps","newInterface","parentId","linkId","newParent","iType","isAlias","isVLAN","canAddAlias","canAddVLAN","addTypeChanged","leaveSingleSelectionMode","updateNewInterface","mapNICToOriginalLink","nic_id","originalInteface","getDefaultVLAN","default_vlan_id","getUnusedVLANs","ignoreVLANs","getSelectedInterfaces","selectedInterfaces","splitKey","getNextName","prefix","tableInfo","interfaceErrorsByLinkId","newBondInterface","newBridgeInterface","bondOptions","isLimitedEditingAllowed","isAllNetworkingDisabled","isBootInterface","is_boot","getInterfaceTypeText","getLinkModeText","getSubnetText","getSubnet","isInterfaceNameInvalid","otherNic","isLinkModeDisabled","getInterfaceError","isIPAddressInvalid","getUniqueKey","toggleInterfaceSelect","isInterfaceSelected","cannotEditInterface","isEditing","edit","undefined","defaultSubnet","fabricChanged","vlanChanged","fabricChangedForm","updateValue","vlanChangedForm","subnetChanged","subnetChangedForm","modeChanged","modeChangedForm","originalLink","editCancel","preProcessInterface","interface_id","saveInterface","updateInterface","saveInterfaceLink","linkSubnet","editSave","isShowingDeleteConfirm","isShowingAdd","canAddAliasOrVLAN","canAddAnotherVLAN","getRemoveTypeText","canBeRemoved","remove","quickRemove","confirmRemove","unlinkSubnet","add","defaultVLAN","defaultMode","quickAdd","getAddName","aliasIdx","createVLANInterface","isDisabled","canCreateBond","isShowingCreateBond","showCreateBond","primary","lacpRate","xmitHashPolicy","hasBootInterface","getInterfacePlaceholderMACAddress","isMACAddressInvalid","invalidEmpty","showLACPRate","showXMITHashPolicy","cannotAddBond","addBond","bond_mode","bond_lacp_rate","bond_xmit_hash_policy","createBondInterface","canCreateBridge","isShowingCreateBridge","showCreateBridge","bridge_stp","bridge_fd","cannotAddBridge","addBridge","createBridgeInterface","isShowingCreatePhysical","showCreatePhysical","macError","errorMsg","cannotAddPhysicalInterface","addPhysicalInterface","createPhysicalInterface","errorStr","tryParse","disks","availableNew","single","disk","ConverterService","MIN_PARTITION_SIZE","MUTLI","UNMOUNT","UNFORMAT","FORMAT_AND_MOUNT","PARTITION","BCACHE","RAID","VOLUME_GROUP","LOGICAL_VOLUME","RAID_MODES","min_disks","allows_spares","calculateSize","minSize","numDisks","hasMountedFilesystem","filesystem","mount_point","hasFormattedUnmountedFilesystem","fstype","isInUse","is_format_fstype","available_size","getTags","cache_set_id","block_id","partition_id","updateDisks","used","cachesets","filesystems","has_disks","size_human","mount_options","filesystem_id","original_type","original","parent_type","partitions","partition","special_filesystems","oldFilesystem","filesystemsMap","$selected","updateFilesystemSelection","used_by","used_for","cacheset","oldCacheSet","cachesetsMap","updateCacheSetsSelection","available","has_partitions","available_size_human","used_size_human","serial","test_status","firmware_version","oldDisk","availableMap","$options","newDevices","updateAvailableSelection","updateAvailable","filesystemMode","filesystemAllSelected","cachesetsMode","cachesetsAllSelected","availableMode","availableAllSelected","deselectAll","items","capitalizeFirstLetter","string","charAt","toUpperCase","getIndexFromName","match","RegExp","exec","dIdx","Math","max","isNameAlreadyInUse","exclude_disk","j","isLogicalVolume","showMembers","isBootDiskDisabled","setAsBootDisk","setBootDisk","getSelectedFilesystems","toggleFilesystemSelect","toggleFilesystemAllSelect","isFilesystemsDisabled","isAllStorageDisabled","filesystemCancel","filesystemUnmount","quickFilesystemUnmount","filesystemConfirmUnmount","updateFilesystem","filesystemDelete","quickFilesystemDelete","filesystemConfirmDelete","unmountSpecialFilesystem","deletePartition","deleteFilesystem","hasUnmountedFilesystem","showFreeSpace","getDeviceType","getSelectedAvailable","toggleAvailableSelect","toggleAvailableAllSelect","isAvailableDisabled","canFormatAndMount","getPartitionButtonText","availablePartitionSpace","space_to_reserve","partition_table_type","INITIAL_PARTITION_OFFSET","roundByBlockSize","canAddPartition","isNameInvalid","nameHasChanged","parentName","availableCancel","usesMountPoint","usesStorage","isMountPointInvalid","mountPoint","canDelete","used_size","availableDelete","availableQuickDelete","availableEdit","editingTags","editingFilesystem","availableQuickEdit","availableConfirmEdit","mountOptions","updateDisk","availableConfirmDelete","deleteVolumeGroup","deleteDisk","availablePartition","size_and_units","size","sizeUnits","availableQuickPartition","getAddPartitionName","isAddPartitionSizeInvalid","test","bytes","unitsToBytes","roundUnits","availableConfirmPartition","removeDisk","available_space","createPartition","getSelectedCacheSets","toggleCacheSetSelect","toggleCacheSetAllSelect","isCacheSetsDisabled","cacheSetCancel","canDeleteCacheSet","cacheSetDelete","quickCacheSetDelete","cacheSetConfirmDelete","deleteCacheSet","canCreateCacheSet","createCacheSet","getCannotCreateBcacheMsg","canCreateBcache","createBcache","cacheMode","fstypeChanged","isNewDiskNameInvalid","createBcacheCanSave","availableConfirmCreateBcache","cache_set","cache_mode","canCreateRAID","createRAID","spares","getAvailableRAIDModes","getTotalNumberOfAvailableSpares","diff","getNumberOfRemainingSpares","allowed","showSparesColumn","RAIDModeChanged","isActiveRAIDMember","isSpareRAIDMember","setAsActiveRAIDMember","setAsSpareRAIDMember","getNewRAIDSize","Number","MAX_VALUE","deviceSize","min","bytesToUnits","createRAIDCanSave","availableConfirmCreateRAID","block_devices","spare_devices","spare_partitions","canCreateVolumeGroup","createVolumeGroup","getNewVolumeGroupSize","total","createVolumeGroupCanSave","availableConfirmCreateVolumeGroup","canAddLogicalVolume","availableLogicalVolume","namePrefix","isLogicalVolumeNameInvalid","newLogicalVolumeNameChanged","isAddLogicalVolumeSizeInvalid","availableConfirmLogicalVolume","createLogicalVolume","authUser","is_superuser","owner","hasStorageLayoutIssues","storage_layout_issues","SpecialFilesystem","isValid","startsWith","describe","parts","join","dropdown","addSpecialFilesystem","addSpecialFilesystemFinished","canMount","mount","mountSpecialFilesystem","EventsManagerFactory","eventsManager","getManager","days","getMaximumDays","eventsLoaded","loadMore","loadMaximumDays","destroy","NodeResultsManagerFactory","nodeResultsManager","requestedResult","getItem","get_result_data","output","resultLoaded","updateLogs","had_installation","logs","installation_results","selectedLog","commissioning_results","testing_results","results","updateLogOutput","resultsLoaded","logOutput","getSummaryXML","getSummaryYAML","loadHistory","showing_results","history_list","showing_history","loading_history","get_history","history","SearchService","SwitchesManager","isViewingSelected","tab","tabs","toLowerCase","enterViewSelected","previous_search","leaveViewSelected","updateFilters","updateAllViewableChecked","filtered_items","allViewableChecked","clearAction","resetActionProgress","zoneSelection","poolSelection","poolAction","newPool","shouldClearAction","selectedItems","removeEmptyFilter","updateActionErrorCount","actionErrorCount","supportsAction","action_failed","progress","actionProgress","completed","errors","affected_nodes","updateSelectedItems","hasActionsFailed","manager","unselectItem","hasActionsInProgress","pools","switches","showswitches","pluralize","verb","pagetitle","searchValid","getSelectedItems","metadata","getMetadata","filters","getEmptyFilter","takeActionOptions","addPool","cancelAddPool","activeTarget","activeTargetAction","actionErrorMessage","initiatePoolAction","cancelPoolAction","isPoolAction","actionConfirmDeletePool","deleteItem","isDefaultPool","syncStatuses","addController","registerUrl","register_url","registerSecret","register_secret","addHardwareOption","addHardwareOptions","toggleTab","clearSearch","toggleChecked","isSelected","selectItem","toggleCheckAll","onNodeListingChanged","nodes","showSelected","toggleFilter","filtersToString","isFilterActive","getCurrentFilters","selectColumnOrSort","actionOptionSelected","tabName","zone_id","new_pool","pool_id","addErrorToActionProgress","addHardwareOptionChanged","addDevice","cancelAddDevice","statusPoll","storeFilters","machinesFilter","retrieveFilters","devicesFilter","controllersFilter","switchesFilter","PodsManager","podManager","sentence","operation","bind","refresh","inProgress","compose","storage","boot","machinesSearch","editPodConfiguration","exitEditPodConfiguration","actionOptionChanged","getPodTypeTitle","canCompose","capabilities","composeMachine","composePreProcess","sorted","constraint","cancelCompose","composeAddStorage","composeSetBootDisk","composeRemoveDisk","startWatching","now","getDefaultZone","activePod","pods","filteredItems","open","cpu_over_commit_ratio","memory_over_commit_ratio","powerTypes","action_error","addPod","cancelAddPod","canAddPod","getPowerTypeTitle","powerType","DHCPSnippetsManager","snippetsManager","snippets","known_architectures","pockets_to_disable","components_to_disable","packageRepositoriesManager","repositories","newSnippet","editSnippet","deleteSnippet","snippetTypes","newRepository","editRepository","deleteRepository","repositoryEnabledToggle","repository","repositoryEnterRemove","repositoryExitRemove","repositoryConfirmRemove","isPPA","isMirror","repositoryEnterEdit","repositoryExitEdit","repositoryAdd","enabled","arches","distributions","components","repositoryAddCancel","getSnippetTypeText","snippet","getSnippetAppliesToObject","getSnippetAppliesToText","snippetEnterRemove","snippetExitRemove","snippetConfirmRemove","snippetEnterEdit","snippetExitEdit","snippetToggle","snippetAdd","snippetAddCancel","spaceLoaded","updateSubnets","isDefaultSpace","subnet_ids","deleteSpace","activeSpace","requestedSpace","space_id","source","version","StaticRoutesManager","active_discovery_data","active_discovery_interval","staticRoutes","staticRoutesManager","actionError","newStaticRoute","editStaticRoute","deleteStaticRoute","MAP_SUBNET_ACTION","DELETE_ACTION","ALLOC_TYPES","5","6","NODE_TYPES","updateIPVersion","ipVersion","subnetLoaded","updateFabric","ipSort","ipv4ToInteger","ipv6Expand","getAllocType","allocType","str","getSubnetCIDR","destId","allocTypeSort","alloc_type","getUsageForIP","node_summary","isContainer","is_container","nodeType","bmcs","dns_records","nodeTypeSort","ownerSort","sortIPTable","actionRetry","scanSubnet","scan_started_on","deleteSubnet","subnetPreSave","changedFields","addStaticRoute","gateway_ip","destination","metric","cancelAddStaticRoute","isStaticRouteInEditMode","route","staticRouteToggleEditMode","isStaticRouteInDeleteMode","staticRouteEnterDeleteMode","staticRouteCancelDelete","staticRouteConfirmDelete","choice","activeSubnet","requestedSubnet","objects","self","vm","updateManagementRacks","primaryRack","secondaryRack","updateRelatedControllers","relatedControllers","updateRelatedSubnets","relatedSubnets","updatePossibleActions","relay_vlan","RELAY_DHCP_ACTION","DISABLE_DHCP_ACTION","dhcp_on","PROVIDE_DHCP_ACTION","isFabricDefault","vlanLoaded","provideDHCPAction","getSpaceName","getActionByName","initProvideDHCP","forRelay","relayVLAN","maxIPs","startIP","endIP","gatewayIP","needsDynamicRange","iprange","statistics","suggested_dynamic_range","needsGatewayIP","subnetMissingGatewayIP","updatePrimaryRack","updateSecondaryRack","updateSubnet","filterPrimaryRack","suggested_gateway","num_addresses","startPlaceholder","start","endPlaceholder","end","gatewayPlaceholder","canPerformAction","gateway","configureDHCP","extraDHCP","relay","disableDHCP","deleteVLAN","getFullVLANName","getDHCPStatus","activeVLAN","requestedVLAN","zoneLoaded","zoneManager","isDefaultZone","activeZone","requestedZone","addZone","closeZone","directive","restrict","element","attrs","clickHandler","evt","toggleClass","find","on","off","template","$element","$document","design","templateUrl","files_version","saving","stopping","ubuntuImages","isNew","tooMany","showingAdvanced","connecting","errorMessage","source_type","keyring_filename","keyring_data","releases","selections","changed","ubuntuCoreImages","ubuntu_core","images","otherImages","other","generatedImages","customImages","ubuntuDeleteId","removingImage","getTitleIcon","showMirrorPath","isShowingAdvancedOptions","toggleAdvancedOptions","bothKeyringOptionsSet","showConnectButton","sourceChanged","currentSources","ubuntu","sources","prevNew","updateSource","regenerateUbuntuImages","connect","isConnectButtonDisabled","getSourceParams","selectDefaults","arch","fetch","fromJson","showConnectBlock","showSelections","getUbuntuLTSReleases","deleted","getUbuntuNonLTSReleases","getArchitectures","toggleSelection","showImagesTable","getResource","resource","resource_os","rtype","image","icon","beingDeleted","resourceId","downloading","name_split","regenerateUbuntuCoreImages","ubuntuCoreImage","checked","regenerateOtherImages","otherImage","_regenerateImages","image_id","regenerateGeneratedImages","regenerateCustomImages","ltsIsSelected","commissioningSeriesSelected","commissioning_series","cancelRemove","deleteImage","showStopImportButton","region_import_running","showSaveSelection","canSaveSelection","commissioning_series_being_deleted","commissioning_series_arches","getSaveSelectionText","canStopImport","getStopImportText","stopImport","saveSelection","saveUbuntu","getNewSelections","newObjs","oldSelections","newSelections","selection","source_len","toggleUbuntuCoreSelection","saveUbuntuCoreSelection","saveUbuntuCore","toggleOtherSelection","saveOtherSelection","saveOther","confirmDeleteImage","ready","startPolling","ubuntu_core_images","other_images","stopPolling","run","$templateCache","put","replace","require","maasCta","ngModel","ngModelCtrl","defaultTitle","select","shown","$setViewValue","getTitle","$modelValue","secondary","getOptionTitle","$viewChangeListeners","$eval","ngChange","stopPropagation","$apply","$compile","include","maasCardLoader","html","contents","maasCodeLines","attributes","empty","lines","newLine","insert","each","ngDisabled","maasEditing","focusHandler","blur","changeHandler","$render","$viewValue","unbind","$timeout","statuses","updateStatuses","controllerIds","checkImageStates","register","known","runningInterval","startTimeout","CHECK_INTERVAL","unregister","showSpinner","getImageStatus","ControllerImageStatusService","systemId","unwatch","registered","textOnly","getClass","countClass","classes","class_name","counter","updateStatusClass","serviceClass","serviceText","styleElement","document","createElement","innerHTML","getElementsByTagName","appendChild","BrowserService","transclude","maasDblClickOverlay","clickElement","overlay","tagName","createEvent","initMouseEvent","window","dispatchEvent","css","cursor","triggerHandler","overlayClick","preventDefault","overlayDblClick","browser","addClass","osInput","seriesInput","$attrs","osElement","seriesElement","switchTo","newOSValue","initialSkip","sel","val","split_value","removeClass","attr","modifyOption","first_option","hasClass","selectVisableOption","which","maasEnter","jasmine","Image","src","markDisconnected","connected","showDisconnected","clientError","wasConnected","watchConnection","isConnected","_error","disconnectedPromise","cancelTimeout","watchConnectionAndError","IPRangesManager","ipranges","iprangeManager","newRange","editIPRange","deleteIPRange","addRange","start_ip","end_ip","comment","cancelAddRange","ipRangeCanBeModified","range","isIPRangeInEditMode","ipRangeToggleEditMode","ipRangeClearEditMode","isIPRangeInDeleteMode","ipRangeEnterDeleteMode","ipRangeCancelDelete","ipRangeConfirmDelete","ipRangeSort","factory","visitPage","Bakery","WebHandler","BakeryStorage","localStorage","getBakery","loginURL","externalAuthURL","bakery","Info","VisitURL","nextPath","Accept","response","currentTarget","responseText","MAASFormController","savingKeys","managerMethod","cloneObject","clonedObj","isTableForm","tableForm","saveOnBlur","isSaving","showInputSaving","errorScope","registerField","unregisterField","startEditingField","stopEditingField","clearErrors","updatedObj","newObj","errorJson","errorField","setErrors","v","saveForm","newValue","inline","MAASGroupController","timeout","formController","keyIdx","pre","onChange","subtleText","subtle","missingAttrs","disabled","disableLabel","labelElement","labelWidth","labelLeft","append","labelInfo","infoWrapper","infoIcon","infoTooltip","inputWrapper","inputWidth","placeholder","inputElement","blurOnEnter","currentValue","placeholderEnabled","childScope","$new","_ngDisabled","_selectValue","_selectNgChange","_change","values","checkScope","_selectedValues","_checked","_toggleChecked","tagsScope","_tags","hiddenScope","_toggle","switchScope","_changed","onValue","offValue","sliderScope","_slider","inputClass","errorsElement","helpText","helpTextElement","setTimeout","focus","subtleTextElement","removeAttr","ul","ele","macAddressFormat","numbers","$parsers","$formatters","hideCheckboxes","onListingChange","onCheckAll","onCheck","SPINNER_STATUSES","table","visibleColumns","fqdn_mac","owner_pool","filteredMachines","updateAllChecked","$machine","showNodeStatus","other_test_status","getReleaseTitle","os_release","getStatusText","releaseTitle","trim","$machines","e","NotificationsManager","notifications","dismiss","categories","categoryTitles","warning","success","info","categoryClasses","categoryNotifications","cns","category","notification","maasOsSelect","getSelectableReleases","allChoices","getSelectableKernels","kernels","os","osKernels","getDefaultOrFirst","array","defaultValue","weightValue","first","weightedPresent","setDefault","default_osystem","default_release","kernel","selectedOSChanged","selectedReleaseChanged","ngPlaceholder","hideType","podTypes","fieldsElement","updateFields","podType","$destroy","hideSlider","maasObjForm","getType","driver_type","req","input_type","replaceWith","maasPowerParameters","addKey","defaultConnect","createAuthorisationToken","token","injector","deleteKey","deleteAuthorisationToken","newScope","newElement","spinElement","prepend","prefsController","$sce","enableHttpProxy","usePeerProxy","proxy_type","releaseName","setText","maasReleaseOptions","onEraseChange","globalOptions","target","startTime","runTime","estimatedRunTime","scriptStatus","incrementCounter","seconds","floor","Date","minutes","hours","new_counter","scriptType","allScripts","getScripts","script","tags_string","onTagAdding","refocus","tagsInput","tagsInputScope","isolateScope","eventHandlers","input","change","for_hardware","getIcon","SSHKeysManager","groupedKeys","authId","sourceTitles","lp","gh","upload","openRow","rowMode","trustAsHtml","close","canImportKeys","importKeys","protocol","auth_id","__all__","confirmDelete","keyMap","groupObj","keysource","keysourceKey","switchHasError","filteredSwitches","switch_","$switch_","$switches","$attr","isToggled","toggleMenu","ngType","valid_types","LogService","reloadPage","enableAutoReload","site","href","oldValue","onResize","windowWidth","innerWidth","message","_loaded","_data","_polling","_nextPromise","_pollTimeout","_pollErrorTimeout","_pollEmptyTimeout","isLoaded","isPolling","_poll","_loadData","callMethod","newData","_pollAgain","pollTimeout","connection_error","Manager","_pk","_handler","registerNotifier","onNotify","NodesManager","service_ids","service_id","_metadataAttributes","_replaceItem","PollingManager","_batchKey","createDNSRecord","record","ip_addresses","updateDNSRecord","_items","EventsManager","nodeId","_nodeId","_factory","_maxDays","_managers","_initBatchLoadParameters","node_id","max_days","destroyManager","setMaximumDays","isLoading","_getManager","machine_actions","requested","polling","nextPromise","device_actions","request","region_controller_actions","rack_controller_actions","region_and_rack_controller_actions","min_hwe_kernels","replaceData","oldData","isEmpty","bond_options","newPowerType","oldPowerType","newItem","release_options","_autoReload","_type","_scopes","_getInternalData","isDataPolling","apply","waitingCount","_reloadFunc","registerHandler","disableAutoReload","unregisterHandler","storage_tags","NodeResultsManager","_node","hardware_type","_getStorageSubtext","deviceinfo","_updateObject","existing","updated","_addOrReplace","showing_menu","_processItem","result_section","result_type","subtext","hardware_type_results","physical_blockdevice","_getIndexOfItem","_updateMetadata","_removeItemByIdFromArray","_selectedItems","hw_type","ret","_area","has_surfaced","script_id","data_type","state","updateInterfaceForm","volume_group_id","blockdevice_id","partition_size","$cookies","MSG_TYPE","RESPONSE_TYPE","callbacks","requests","requestId","websocket","autoReconnect","retryTimeout","defaultConnectDefer","handlers","notifiers","newRequestId","func","unregisterNotifier","buildSocket","WebSocket","_buildUrl","onopen","onerror","onclose","onmessage","onMessage","_getProtocol","host","port","pathname","proto","csrftoken","base","newPath","newPort","encodeURIComponent","opened","errored","reject","msg","onResponse","request_id","remembered_request","handler","remember","send","toJson","getLargestRange","largest_range","ranges","equals","purpose","hasDynamicRange","matching","_authUser","authuser","_loadAuthUser","reloadItems","catch","addRackController","foreign_objects","standardFilter","mappings","cpu","cores","ram","memory","pod-id","isInteger","matches","lowerTerm","exact","negate","parseFloat","_matches","terms","term","matched","mapFunc","substring","no_match","field2","aDate","bDate","getTime","config","$interpolateProvider","$routeProvider","$httpProvider","versionedPath","startSymbol","endSymbol","defaults","xsrfCookieName","xsrfHeaderName","routes","when","redirectTo","reloadOnSearch","controllerAs","superuser","otherwise","next","current","ga","q","arguments","userId","analytics_user_id","uuid","hash","regex","matcher","navigator","userAgent","UNITS","unit","converted","abs","toFixed","units","block_size","ipv4ToOctets","octets","part","pow","expandedAddress","groups","substr","ipv6ToGroups","jsonString","JSON","parse","_typeof","logging","logLevel","performance","_debug","debug","_log","_info","_warn","warn","formatMilliseconds","milliseconds","__log","args","Array","unshift","METADATA_ACTIONS","CREATE","UPDATE","_name_field","_isLoading","_extraLoadDefers","_extraReloadDefers","_actionQueue","_activeItem","_metadata","pk_value","len","_replaceItemInArray","_batchLoadItems","extra_func","callLoad","_resolveDefers","defersArray","_rejectDefers","clear","processActions","updatedIdx","updatedItem","updateItems","clearActiveItem","canProcessActions","_getMetadataValue","metadatas","_addMetadataValue","count","_removeMetadataValue","_updateMetadataArrayEntry","added","oldArray","_updateMetadataValueEntry","_updateMetadataEntry","oldItem","unloadManager","loadedManager","tryParsingJSON","SyntaxError","getPrintableString","dict","showNames","emptyFilter","_","getSplitSearch","fixedTerms","spanningParentheses","startIdx","searchTerms","_getFilterValueIndex","storedFilters","domainnamePattern","hostnamePattern","macPattern","ipv4Pattern","cidrMatcher","one","two","bits","domainname","macAddress","validateIPv4","validateIPv6","network","networkSplit","networkAddress","cidrBits","validateIPInRange","lowAddress","highAddress","ipOctets","lowOctets","highOctets"],"mappings":"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","file":"maas-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Device Controller\n */\n\nangular.module('MAAS').controller('AddDeviceController', [\n    '$scope', 'DevicesManager', 'SubnetsManager', 'DomainsManager',\n    'ManagerHelperService', 'ValidationService', function(\n        $scope, DevicesManager, SubnetsManager, DomainsManager,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addDeviceScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addDeviceScope = $scope;\n\n        // Set initial values.\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.viewable = false;\n        $scope.error = null;\n\n        // Device ip assignment options.\n        $scope.ipAssignments = [\n            {\n                name: \"external\",\n                title: \"External\"\n            },\n            {\n                name: \"dynamic\",\n                title: \"Dynamic\"\n            },\n            {\n                name: \"static\",\n                title: \"Static\"\n            }\n        ];\n\n        // Makes a new interface.\n        function makeInterface() {\n            return {\n                mac: \"\",\n                ipAssignment: null,\n                subnetId: null,\n                ipAddress: \"\"\n            };\n        }\n\n        // Makes a new device.\n        function newDevice(cloneDevice) {\n            if(angular.isObject(cloneDevice)) {\n                return {\n                    name: \"\",\n                    domain: cloneDevice.domain,\n                    interfaces: [makeInterface()]\n                };\n            } else {\n                return {\n                    name: \"\",\n                    domain: DomainsManager.getDefaultDomain(),\n                    interfaces: [makeInterface()]\n                };\n            }\n        }\n\n        // Input values.\n        $scope.device = null;\n\n        // Converts the device information from how it is held in the UI to\n        // how it is handled over the websocket.\n        function convertDeviceToProtocol(device) {\n            // Return the new object.\n            var convertedDevice = {\n                hostname: device.name,\n                domain: device.domain,\n                primary_mac: device.interfaces[0].mac,\n                extra_macs: [],\n                interfaces: []\n            };\n            var i;\n            for(i = 1; i < device.interfaces.length; i++) {\n                convertedDevice.extra_macs.push(device.interfaces[i].mac);\n            }\n            angular.forEach(device.interfaces, function(nic) {\n                convertedDevice.interfaces.push({\n                    mac: nic.mac,\n                    ip_assignment: nic.ipAssignment.name,\n                    ip_address: nic.ipAddress,\n                    \"subnet\": nic.subnetId\n                });\n            });\n            return convertedDevice;\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function() {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n            // Load subnets to get the available subnets.\n            ManagerHelperService.loadManagers(\n                    $scope, [SubnetsManager, DomainsManager]).then(function() {\n                $scope.device = newDevice($scope.device);\n                $scope.viewable = true;\n            });\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            ManagerHelperService.unloadManagers(\n                $scope, [SubnetsManager, DomainsManager]);\n            // Emit the hidden event.\n            $scope.$emit('addDeviceHidden');\n        };\n\n        // Returns true if the name is in error.\n        $scope.nameHasError = function() {\n            // If the name is empty don't show error.\n            if($scope.device === null || $scope.device.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateHostname($scope.device.name);\n        };\n\n        // Returns true if the MAC is in error.\n        $scope.macHasError = function(deviceInterface) {\n            // If the MAC is empty don't show error.\n            if(deviceInterface.mac.length === 0) {\n                return false;\n            }\n            // If the MAC is invalid show error.\n            if(!ValidationService.validateMAC(deviceInterface.mac)) {\n                return true;\n            }\n            // If the MAC is the same as another MAC show error.\n            var i;\n            for(i = 0; i < $scope.device.interfaces.length; i++) {\n                var isSelf = $scope.device.interfaces[i] === deviceInterface;\n                if(!isSelf &&\n                    $scope.device.interfaces[i].mac === deviceInterface.mac) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Returns true if the IP address is in error.\n        $scope.ipHasError = function(deviceInterface) {\n            // If the IP is empty don't show error.\n            if(deviceInterface.ipAddress.length === 0) {\n                return false;\n            }\n            // If ip address is invalid, then exit early.\n            if(!ValidationService.validateIP(deviceInterface.ipAddress)) {\n                return true;\n            }\n            var i, inNetwork;\n            if(angular.isObject(deviceInterface.ipAssignment)){\n                if(deviceInterface.ipAssignment.name === \"external\") {\n                    // External IP address cannot be within a known subnet.\n                    for(i = 0; i < $scope.subnets.length; i++) {\n                        inNetwork = ValidationService.validateIPInNetwork(\n                            deviceInterface.ipAddress,\n                            $scope.subnets[i].cidr);\n                        if(inNetwork) {\n                            return true;\n                        }\n                    }\n                } else if(deviceInterface.ipAssignment.name === \"static\" &&\n                    angular.isNumber(deviceInterface.subnetId)) {\n                    // Static IP address must be within a subnet.\n                    var subnet = SubnetsManager.getItemFromList(\n                        deviceInterface.subnetId);\n                    inNetwork = ValidationService.validateIPInNetwork(\n                        deviceInterface.ipAddress, subnet.cidr);\n                    if(!inNetwork) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return true when the device is missing information or invalid\n        // information.\n        $scope.deviceHasError = function() {\n            if($scope.device === null || $scope.device.name === '' ||\n                    $scope.nameHasError()) {\n                return true;\n            }\n\n            var i;\n            for(i = 0; i < $scope.device.interfaces.length; i++) {\n                var deviceInterface = $scope.device.interfaces[i];\n                if(deviceInterface.mac === '' ||\n                    $scope.macHasError(deviceInterface) ||\n                    !angular.isObject(deviceInterface.ipAssignment)) {\n                    return true;\n                }\n                var externalIpError = (\n                    deviceInterface.ipAssignment.name === \"external\" && (\n                        deviceInterface.ipAddress === '' ||\n                        $scope.ipHasError(deviceInterface)));\n                var staticIpError = (\n                    deviceInterface.ipAssignment.name === \"static\" && (\n                        !angular.isNumber(deviceInterface.subnetId) ||\n                        $scope.ipHasError(deviceInterface)));\n                if(externalIpError || staticIpError) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Adds new interface to device.\n        $scope.addInterface = function() {\n            $scope.device.interfaces.push(makeInterface());\n        };\n\n        // Returns true if the first interface in the device interfaces array.\n        $scope.isPrimaryInterface = function(deviceInterface) {\n            return $scope.device.interfaces.indexOf(deviceInterface) === 0;\n        };\n\n        // Removes the interface from the devices interfaces array.\n        $scope.deleteInterface = function(deviceInterface) {\n            // Don't remove the primary.\n            if($scope.isPrimaryInterface(deviceInterface)) {\n                return;\n            }\n            $scope.device.interfaces.splice(\n                $scope.device.interfaces.indexOf(deviceInterface), 1);\n        };\n\n        // Called when cancel clicked.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.device = newDevice();\n            $scope.hide();\n        };\n\n        // Called when save is clicked.\n        $scope.save = function(addAnother) {\n            // Do nothing if device in error.\n            if($scope.deviceHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Create the device.\n            var device = convertDeviceToProtocol($scope.device);\n            DevicesManager.create(device).then(function(device) {\n                if(addAnother) {\n                    $scope.device = newDevice($scope.device);\n                } else {\n                    $scope.device = newDevice();\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Domain Controller\n */\n\nangular.module('MAAS').controller('AddDomainController', [\n    '$scope', 'DomainsManager', 'ManagerHelperService',\n    'ValidationService', function($scope, DomainsManager,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addDomainScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addDomainScope = $scope;\n\n        // Set initial values.\n        $scope.viewable = false;\n        $scope.error = null;\n\n        // Makes a new domain.\n        function makeDomain() {\n            return {\n                name: \"\",\n                authoritative: true\n            };\n        }\n\n        // Initial domain.\n        $scope.domain = makeDomain();\n\n        // Converts the domain information from how it is held in the UI to\n        // how it is handled over the websocket.  Since they're identical, we\n        // just return a copy: some day, they might be different, so we retain\n        // the function against that day.\n        function convertDomainToProtocol(domain) {\n            return angular.copy(domain);\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function() {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n            $scope.domain = makeDomain();\n            $scope.viewable = true;\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            // Emit the hidden event.\n            $scope.$emit('addDomainHidden');\n        };\n\n        // Returns true if the name is in error.\n        $scope.nameHasError = function() {\n            // If the name is empty don't show error.\n            if($scope.domain.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateDomainName($scope.domain.name);\n        };\n\n        // Return true when the domain is missing information or invalid\n        // information.\n        $scope.domainHasError = function() {\n            if($scope.domain.name === '' || $scope.nameHasError()) {\n                return true;\n            }\n\n            return false;\n        };\n\n        // Called when cancel clicked.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.domain = makeDomain();\n            $scope.hide();\n        };\n\n        // Called when save is clicked.\n        $scope.save = function(addAnother) {\n            // Do nothing if domain in error.\n            if($scope.domainHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the domain.\n            $scope.error = null;\n\n            // Create the domain.\n            var domain = convertDomainToProtocol($scope.domain);\n            DomainsManager.create(domain).then(function() {\n                $scope.domain = makeDomain();\n                if(!addAnother) {\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Hardware Controller\n */\n\nangular.module('MAAS').controller('AddHardwareController', [\n    '$q', '$scope', '$http', 'ZonesManager', 'MachinesManager',\n    'GeneralManager', 'DomainsManager', 'RegionConnection',\n    'ManagerHelperService', 'ValidationService', function(\n        $q, $scope, $http, ZonesManager, MachinesManager,\n        GeneralManager, DomainsManager, RegionConnection,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addHardwareScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addHardwareScope = $scope;\n\n        // Set initial values.\n        $scope.viewable = false;\n        $scope.model = 'machine';\n        $scope.zones = ZonesManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.architectures = GeneralManager.getData(\"architectures\");\n        $scope.hwe_kernels = GeneralManager.getData(\"hwe_kernels\");\n        $scope.default_min_hwe_kernel = GeneralManager.getData(\n            \"default_min_hwe_kernel\");\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.error = null;\n        $scope.macAddressRegex = /^([0-9A-F]{2}[::]){5}([0-9A-F]{2})$/gmi;\n\n        // Input values.\n        $scope.machine = null;\n        $scope.chassis = null;\n\n        // Hard coded chassis types. This is because there is no method in\n        // MAAS to get a full list of supported chassis. This needs to be\n        // fixed ASAP.\n        var virshFields = [\n            {\n                name: 'hostname',\n                label: 'Address',\n                field_type: 'string',\n                \"default\": '',  // Using \"default\" to make lint happy.\n                choices: [],\n                required: true\n            },\n            {\n                name: 'password',\n                label: 'Password',\n                field_type: 'string',\n                \"default\": '',\n                choices: [],\n                required: false\n            },\n            {\n                name: 'prefix_filter',\n                label: 'Prefix filter',\n                field_type: 'string',\n                \"default\": '',\n                choices: [],\n                required: false\n            }\n        ];\n        $scope.chassisPowerTypes = [\n            {\n                name: 'mscm',\n                description: 'Moonshot Chassis Manager',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Host',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'powerkvm',\n                description: 'PowerKVM',\n                fields: virshFields\n            },\n            {\n                name: 'recs_box',\n                description: 'Christmann RECS|Box',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Hostname',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'port',\n                        label: 'Port',\n                        field_type: 'string',\n                        \"default\": '80',\n                        choices: [],\n                        required: false\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'seamicro15k',\n                description: 'SeaMicro 15000',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Hostname',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'power_control',\n                        label: 'Power Control',\n                        field_type: 'choice',\n                        \"default\": 'restapi2',\n                        choices: [\n                            ['restapi2', 'REST API V2.0'],\n                            ['restapi', 'REST API V0.9'],\n                            ['ipmi', 'IPMI']\n                        ],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'ucsm',\n                description: 'UCS Chassis Manager',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'URL',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'virsh',\n                description: 'Virsh (virtual systems)',\n                fields: virshFields\n            },\n            {\n                name: 'vmware',\n                description: 'VMware',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Host',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'prefix_filter',\n                        label: 'Prefix filter',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: false\n                    }\n                ]\n            }\n        ];\n\n        // Get the default zone from the loaded zones.\n        function defaultZone() {\n            if($scope.zones.length === 0) {\n                return null;\n            } else {\n                return $scope.zones[0];\n            }\n        }\n\n        // Get the default architecture from the loaded architectures.\n        function defaultArchitecture() {\n            if($scope.architectures.length === 0) {\n                return '';\n            } else {\n                // Return amd64/generic first if available.\n                var i;\n                for(i = 0; i < $scope.architectures.length; i++) {\n                    if($scope.architectures[i] === \"amd64/generic\") {\n                        return $scope.architectures[i];\n                    }\n                }\n                return $scope.architectures[0];\n            }\n        }\n\n        // Return a new MAC address object.\n        function newMAC() {\n            return {\n                mac: '',\n                error: false\n            };\n        }\n\n        // Return a new machine object.\n        function newMachine(cloneMachine) {\n            // Clone the machine instead of just creating a new one.\n            // This helps the user by already having the previous selected\n            // items selected for the new machine.\n            if(angular.isObject(cloneMachine)) {\n                return {\n                    name: '',\n                    domain: cloneMachine.domain,\n                    macs: [newMAC()],\n                    zone: cloneMachine.zone,\n                    architecture: cloneMachine.architecture,\n                    min_hwe_kernel: cloneMachine.min_hwe_kernel,\n                    power: {\n                        type: cloneMachine.power.type,\n                        parameters: {}\n                    }\n                };\n            }\n\n            // No clone machine. So create a new blank machine.\n            return {\n                name: '',\n                domain: DomainsManager.getDefaultDomain(),\n                macs: [newMAC()],\n                zone: defaultZone(),\n                architecture: defaultArchitecture(),\n                min_hwe_kernel: $scope.default_min_hwe_kernel.text,\n                power: {\n                    type: null,\n                    parameters: {}\n                }\n            };\n        }\n\n        // Return a new chassis object.\n        function newChassis(cloneChassis) {\n            // Clone the chassis instead of just creating a new one.\n            // This helps the user by already having the previous selected\n            // items selected for the new machine.\n            if(angular.isObject(cloneChassis)) {\n                return {\n                    domain: cloneChassis.domain,\n                    power: {\n                        type: null,\n                        parameters: {}\n                    }\n                };\n            } else {\n                return {\n                    domain: DomainsManager.getDefaultDomain(),\n                    power: {\n                        type: null,\n                        parameters: {}\n                    }\n                };\n            }\n        }\n\n        // Converts the machine information from how it is held in the UI to\n        // how it is handled over the websocket.\n        function convertMachineToProtocol(machine) {\n            // Convert the mac addresses.\n            var macs = angular.copy(machine.macs);\n            var pxe_mac = macs.shift().mac;\n            var extra_macs = macs.map(function(mac) { return mac.mac; });\n\n            // Return the new object.\n            return {\n                hostname: machine.name,\n                domain: machine.domain,\n                architecture: machine.architecture,\n                min_hwe_kernel: machine.min_hwe_kernel,\n                pxe_mac: pxe_mac,\n                extra_macs: extra_macs,\n                power_type: machine.power.type.name,\n                power_parameters: angular.copy(machine.power.parameters),\n                zone: {\n                    id: machine.zone.id,\n                    name: machine.zone.name\n                }\n            };\n        }\n\n        // Validate that all the parameters are there for the given power type.\n        function powerParametersHasError(power_type, parameters) {\n            var i;\n            for(i = 0; i < power_type.fields.length; i++) {\n                var field = power_type.fields[i];\n                var value = parameters[field.name];\n                if(field.required) {\n                    if(angular.isUndefined(value) || value === '') {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function(mode) {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n\n            $scope.mode = mode;\n\n            var loadedItems = false, loadedManagers = false;\n            var defer = $q.defer();\n            defer.promise.then(function() {\n                   // Add the first machine and chassis.\n                $scope.machine = newMachine($scope.machine);\n                $scope.chassis = newChassis($scope.chassis);\n                $scope.error = null;\n\n                // If the machine doesn't have an architecture\n                // set then it was created before all of the\n                // architectures were loaded. Set the default\n                // architecture for that machine.\n                if(angular.isObject($scope.machine) &&\n                    $scope.machine.architecture === '') {\n                    $scope.machine.architecture = defaultArchitecture();\n                }\n                $scope.viewable = true;\n            });\n\n            // The parent scope has already loaded the GeneralManager. If the\n            // general manager is reloaded all items from the parents scope\n            // will be reloaded as well. Call loadItems so only the items\n            // the add hardware form cares about are loaded.\n            GeneralManager.loadItems([\n                \"architectures\", \"hwe_kernels\", \"default_min_hwe_kernel\"\n            ]).then(function() {\n                loadedItems = true;\n                if(loadedManagers) {\n                    defer.resolve();\n                }\n            });\n            ManagerHelperService.loadManagers(\n                $scope, [ZonesManager, DomainsManager]).then(function() {\n                    loadedManagers = true;\n                    if(loadedItems) {\n                        defer.resolve();\n                    }\n                });\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            ManagerHelperService.unloadManagers(\n                $scope, [ZonesManager, DomainsManager]);\n\n            // Emit the hidden event.\n            $scope.$emit('addHardwareHidden');\n        };\n\n        // Return True when architectures loaded and in machine mode.\n        $scope.showMachine = function() {\n            if($scope.architectures.length === 0) {\n                return false;\n            }\n            return $scope.mode === \"machine\";\n        };\n\n        // Return True when architectures loaded and in chassis mode.\n        $scope.showChassis = function() {\n            if($scope.architectures.length === 0) {\n                return false;\n            }\n            return $scope.mode === \"chassis\";\n        };\n\n        // Add a new MAC address to the machine.\n        $scope.addMac = function() {\n            $scope.machine.macs.push(newMAC());\n        };\n\n        // Remove a MAC address to the machine.\n        $scope.removeMac = function(mac) {\n            var idx = $scope.machine.macs.indexOf(mac);\n            if(idx > -1) {\n                $scope.machine.macs.splice(idx, 1);\n            }\n        };\n\n        // Return true if the machine name is invalid.\n        $scope.invalidName = function() {\n            // Not invalid if empty.\n            if($scope.machine.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateHostname($scope.machine.name);\n        };\n\n        // Validate that the mac address is valid.\n        $scope.validateMac = function(mac) {\n            if(mac.mac === '') {\n                mac.error = false;\n            } else {\n                mac.error = !ValidationService.validateMAC(mac.mac);\n            }\n        };\n\n        // Return true when the machine is missing information or invalid\n        // information.\n        $scope.machineHasError = function() {\n            // Early-out for errors.\n            in_error = (\n                $scope.machine === null ||\n                $scope.machine.zone === null ||\n                $scope.machine.architecture === '' ||\n                $scope.machine.power.type === null ||\n                $scope.invalidName($scope.machine));\n            if(in_error) {\n                return in_error;\n            }\n\n            // Make sure none of the mac addresses are in error. The first one\n            // cannot be blank the remaining are allowed to be empty.\n            if($scope.machine.macs[0].mac === '' ||\n                $scope.machine.macs[0].error) {\n                return true;\n            }\n            var i;\n            for(i = 1; i < $scope.machine.macs.length; i++) {\n                var mac = $scope.machine.macs[i];\n                if(mac.mac !== '' && mac.error) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return true if the chassis has errors.\n        $scope.chassisHasErrors = function() {\n            // Early-out for errors.\n            in_error = (\n                $scope.chassis === null ||\n                $scope.chassis.power.type === null);\n            if(in_error) {\n                return in_error;\n            }\n            return powerParametersHasError(\n                $scope.chassis.power.type, $scope.chassis.power.parameters);\n        };\n\n        // Called when the cancel button is pressed.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.machine = newMachine();\n            $scope.chassis = newChassis();\n\n            // Hide the controller.\n            $scope.hide();\n        };\n\n        // Called to perform the saving of the machine.\n        $scope.saveMachine = function(addAnother) {\n            // Does nothing if machine has errors.\n            if($scope.machineHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Add the machine.\n            MachinesManager.create(\n                convertMachineToProtocol($scope.machine)).then(\n                    function() {\n                        if(addAnother) {\n                            $scope.machine = newMachine($scope.machine);\n                        } else {\n                            $scope.machine = newMachine();\n\n                            // Hide the scope if not adding another.\n                            $scope.hide();\n                        }\n                    }, function(error) {\n                        $scope.error =\n                            ManagerHelperService.parseValidationError(error);\n                    });\n        };\n\n        // Called to perform the saving of the chassis.\n        $scope.saveChassis = function(addAnother) {\n            // Does nothing if error exists.\n            if($scope.chassisHasErrors()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Create the parameters.\n            var params = angular.copy($scope.chassis.power.parameters);\n            params.chassis_type = $scope.chassis.power.type.name;\n            params.domain = $scope.chassis.domain.name;\n\n            // XXX ltrager 24-02-2016: Something is adding the username field\n            // even though its not defined in virshFields. The API rejects\n            // requests with improper fields so remove it before we send the\n            // request.\n            if(\n                    params.chassis_type === \"powerkvm\" ||\n                    params.chassis_type === \"virsh\") {\n                delete params.username;\n            }\n            // Add the chassis. For now we use the API as the websocket doesn't\n            // support probe and enlist.\n            $http({\n                method: 'POST',\n                url: 'api/2.0/machines/?op=add_chassis',\n                data: $.param(params),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function() {\n                if(addAnother) {\n                    $scope.chassis = newChassis($scope.chassis);\n                } else {\n                    $scope.chassis = newChassis();\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error.data);\n            });\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Dashboard Controller\n */\n\nangular.module('MAAS').controller('DashboardController', [\n    '$scope', '$window', '$rootScope', '$routeParams', '$location',\n    'DiscoveriesManager', 'DomainsManager', 'MachinesManager',\n    'DevicesManager', 'SubnetsManager', 'VLANsManager', 'ConfigsManager',\n    'ManagerHelperService',\n    function($scope, $window, $rootScope, $routeParams, $location,\n             DiscoveriesManager, DomainsManager, MachinesManager,\n             DevicesManager, SubnetsManager, VLANsManager, ConfigsManager,\n             ManagerHelperService) {\n\n        // Default device IP options.\n        var deviceIPOptions = [\n            ['static', 'Static'],\n            ['dynamic', 'Dynamic'],\n            ['external', 'External']\n        ];\n\n        // Set title and page.\n        $rootScope.title = \"Dashboard\";\n        $rootScope.page = \"dashboard\";\n\n        // Set initial values.\n        $scope.loaded = false;\n        $scope.discoveredDevices = DiscoveriesManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.machines = MachinesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.configManager = ConfigsManager;\n        $scope.networkDiscovery = null;\n        $scope.column = 'mac';\n        $scope.selectedDevice = null;\n        $scope.convertTo = null;\n\n        // Set default predicate to last_seen.\n        $scope.predicate = $scope.last_seen;\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Proxy manager that the maas-obj-form directive uses to call the\n        // correct method based on current type.\n        $scope.proxyManager = {\n            updateItem: function(params) {\n                if($scope.convertTo.type === 'device') {\n                    return DevicesManager.createItem(params);\n                } else if($scope.convertTo.type === 'interface') {\n                    return DevicesManager.createInterface(params);\n                } else {\n                    throw new Error(\"Unknown type: \" + $scope.convertTo.type);\n                }\n            }\n        };\n\n        // Return the name name for the Discovery.\n        $scope.getDiscoveryName = function(discovery) {\n            if(discovery.hostname === null) {\n                return 'unknown';\n            }\n            else {\n                return discovery.hostname;\n            }\n        };\n\n        // Get the name of the subnet from its ID.\n        $scope.getSubnetName = function(subnetId) {\n            var subnet = SubnetsManager.getItemFromList(subnetId);\n            return SubnetsManager.getName(subnet);\n        };\n\n        // Get the name of the VLAN from its ID.\n        $scope.getVLANName = function(vlanId) {\n            var vlan = VLANsManager.getItemFromList(vlanId);\n            return VLANsManager.getName(vlan);\n        };\n\n        // Sets selected device\n        $scope.toggleSelected = function(deviceId) {\n            if($scope.selectedDevice === deviceId) {\n                $scope.selectedDevice = null;\n            } else {\n                var discovered = DiscoveriesManager.getItemFromList(deviceId);\n                var hostname = $scope.getDiscoveryName(discovered);\n                var domain;\n                if(hostname === 'unknown') {\n                    hostname = '';\n                }\n                if(hostname.indexOf('.') > 0) {\n                    domain = DomainsManager.getDomainByName(\n                        hostname.slice(hostname.indexOf('.') + 1));\n                    hostname = hostname.split(\".\", 1)[0];\n                    if(domain === null) {\n                        domain = DomainsManager.getDefaultDomain();\n                    }\n                } else {\n                    domain = DomainsManager.getDefaultDomain();\n                }\n                $scope.convertTo = {\n                    type: 'device',\n                    hostname: hostname,\n                    domain: domain,\n                    parent: null,\n                    ip_assignment: 'dynamic',\n                    goTo: false,\n                    saved: false,\n                    deviceIPOptions: deviceIPOptions.filter(\n                        function(option) {\n                            // Filter the options to not include static if\n                            // a subnet is not defined for this discovered\n                            // item.\n                            if(option[0] === 'static' &&\n                                !angular.isNumber(discovered.subnet)) {\n                                return false;\n                            } else {\n                                return true;\n                            }\n                        })\n                };\n                $scope.selectedDevice = deviceId;\n            }\n        };\n\n        // Called before the createItem is called to adjust the values\n        // passed over the call.\n        $scope.preProcess = function(item) {\n            var discovered = DiscoveriesManager.getItemFromList(\n                $scope.selectedDevice);\n            item = angular.copy(item);\n            if($scope.convertTo.type === 'device') {\n                item.primary_mac = discovered.mac_address;\n                item.extra_macs = [];\n                item.interfaces = [{\n                    mac: discovered.mac_address,\n                    ip_assignment: item.ip_assignment,\n                    ip_address: discovered.ip,\n                    subnet: discovered.subnet\n                }];\n            } else if($scope.convertTo.type === 'interface') {\n                item.mac_address = discovered.mac_address;\n                item.ip_address = discovered.ip;\n                item.subnet = discovered.subnet;\n            }\n            return item;\n        };\n\n        // Called after the createItem has been successful.\n        $scope.afterSave = function(obj) {\n            DiscoveriesManager._removeItem($scope.selectedDevice);\n            $scope.selectedDevice = null;\n            $scope.convertTo.hostname = obj.hostname;\n            $scope.convertTo.parent = obj.parent;\n            $scope.convertTo.saved = true;\n            if($scope.convertTo.goTo) {\n                if(angular.isString(obj.parent)) {\n                    $location.path('/device/' + obj.parent);\n                } else {\n                    $location.path('/devices/');\n                }\n            }\n        };\n\n        // Load all the managers and get the network discovery config item.\n        ManagerHelperService.loadManagers($scope, [\n            DiscoveriesManager, DomainsManager, MachinesManager,\n            DevicesManager, SubnetsManager, VLANsManager, ConfigsManager]).then(\n            function() {\n                $scope.loaded = true;\n                $scope.networkDiscovery = ConfigsManager.getItemFromList(\n                    'network_discovery');\n            });\n    }\n]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domain Details Controller\n */\n\nangular.module('MAAS').controller('DomainDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'DomainsManager', 'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $location,\n        DomainsManager, UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"domains\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.domain = null;\n        $scope.editSummary = false;\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.action = null;\n        $scope.editRow = null;\n        $scope.deleteRow = null;\n\n        $scope.domainsManager = DomainsManager;\n        $scope.newObject = {};\n\n        $scope.supportedRecordTypes = [\n            'A', 'AAAA', 'CNAME', 'MX', 'NS', 'SRV', 'SSHFP', 'TXT'\n        ];\n\n        // Set default predicate to name.\n        $scope.predicate = 'name';\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is clicked in the domain summary.\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        $scope.isRecordAutogenerated = function(row) {\n            // We can't edit records that don't have a dnsresource_id.\n            // (If the row doesn't have one, it has probably been automatically\n            // generated by means of a deployed node, or some other reason.)\n            return !row.dnsresource_id;\n        };\n\n        $scope.editRecord = function(row) {\n            $scope.editRow = row;\n            // We'll need the original values to determine if an update is\n            // required.\n            row.previous_rrdata = row.rrdata;\n            row.previous_rrtype = row.rrtype;\n            row.previous_name = row.name;\n            row.previous_ttl = row.ttl;\n            $scope.deleteRow = null;\n        };\n\n        $scope.removeRecord = function(row) {\n            $scope.deleteRow = row;\n            $scope.editRow = null;\n        };\n\n        $scope.confirmRemoveRecord = function(row) {\n            // The websocket handler needs the domain ID, so add it in.\n            row.domain = $scope.domain.id;\n            $scope.domainsManager.deleteDNSRecord(row);\n            $scope.stopEditingRow();\n        };\n\n        $scope.stopEditingRow = function() {\n            $scope.editRow = null;\n            $scope.deleteRow = null;\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.domain.displayname;\n        }\n\n        // Called when the domain has been loaded.\n        function domainLoaded(domain) {\n            $scope.domain = domain;\n            $scope.loaded = true;\n\n            updateTitle();\n        }\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default domain.\n        $scope.isDefaultDomain = function() {\n            if(angular.isObject($scope.domain)) {\n                return $scope.domain.id === 0;\n            }\n            return false;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.domain)) {\n                return $scope.domain.rrsets.length === 0;\n            }\n            return false;\n        };\n\n        // Called when the delete domain button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.actionInProgress = true;\n            $scope.action = 'delete';\n        };\n\n        // Called when the add record button is pressed.\n        $scope.addRecordButton = function() {\n            $scope.error = null;\n            $scope.actionInProgress = true;\n            $scope.action = 'add_record';\n        };\n\n        // Called when the cancel delete domain button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionInProgress = false;\n        };\n\n        // Called when the confirm delete domain button is pressed.\n        $scope.deleteConfirmButton = function() {\n            DomainsManager.deleteDomain($scope.domain).then(function() {\n                $scope.actionInProgress = false;\n                $location.path(\"/domains\");\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers(\n            $scope, [DomainsManager, UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this domain set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeDomain = DomainsManager.getActiveItem();\n            var requestedDomain = parseInt($routeParams.domain_id, 10);\n            if(isNaN(requestedDomain)) {\n                ErrorService.raiseError(\"Invalid domain identifier.\");\n            } else if(angular.isObject(activeDomain) &&\n                activeDomain.id === requestedDomain) {\n                domainLoaded(activeDomain);\n            } else {\n                DomainsManager.setActiveItem(\n                    requestedDomain).then(function(domain) {\n                        domainLoaded(domain);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domains List Controller\n */\n\nangular.module('MAAS').controller('DomainsListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', 'DomainsManager',\n    'UsersManager', 'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, $filter, DomainsManager,\n        UsersManager, ManagerHelperService) {\n\n        // Load the filters that are used inside the controller.\n\n        // Set title and page.\n        $rootScope.title = \"DNS\";\n        $rootScope.page = \"domains\";\n\n        // Set initial values.\n        $scope.domains = DomainsManager.getItems();\n        $scope.currentpage = \"domains\";\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.loading = true;\n\n        // This will hold the AddDomainController once it's initialized.  The\n        // controller will set this variable as it's always a child of this\n        // scope.\n        $scope.addDomainScope = null;\n\n        // Called when the add domain button is pressed.\n        $scope.addDomain = function() {\n            $scope.addDomainScope.show();\n        };\n\n        // Called when the cancel add domain button is pressed.\n        $scope.cancelAddDomain = function() {\n            $scope.addDomainScope.cancel();\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        ManagerHelperService.loadManagers(\n            $scope, [DomainsManager, UsersManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n        }\n    ]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Fabric Details Controller\n */\n\nangular.module('MAAS').controller('FabricDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'FabricsManager', 'VLANsManager', 'SubnetsManager', 'SpacesManager',\n    'ControllersManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        FabricsManager, VLANsManager, SubnetsManager, SpacesManager,\n        ControllersManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.fabric = null;\n        $scope.fabricManager = FabricsManager;\n        $scope.editSummary = false;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.loaded = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.fabric.name;\n        }\n\n        // Called when the \"edit\" button is cliked in the fabric summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the fabric summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Called when the fabric has been loaded.\n        function fabricLoaded(fabric) {\n            if(angular.isObject(fabric)) {\n                $scope.fabric = fabric;\n                updateTitle();\n                $scope.$watch(\"vlans\", updateVLANs, true);\n                $scope.$watch(\"subnets\", updateVLANs, true);\n                $scope.$watch(\"controllers\", updateVLANs, true);\n                $scope.loaded = true;\n                // Initial table sort order.\n                $scope.predicate = \"['vlan_name', 'vlan.id', 'subnet_name']\";\n            }\n        }\n\n        // Generate a table that can easily be rendered in the view.\n        function updateVLANs() {\n            var rows = [];\n            var racks = {};\n            angular.forEach($filter('filter')(\n                    $scope.vlans, {fabric:$scope.fabric.id}, true),\n                    function(vlan) {\n                var subnets =\n                    $filter('filter')($scope.subnets, {vlan:vlan.id}, true);\n                if(subnets.length > 0) {\n                    angular.forEach(subnets, function(subnet) {\n                        var space = SpacesManager.getItemFromList(subnet.space);\n                        var space_name = (space === null) ?\n                            \"(undefined)\" : space.name;\n                        var row = {\n                            vlan: vlan,\n                            vlan_name: VLANsManager.getName(vlan),\n                            subnet: subnet,\n                            subnet_name: SubnetsManager.getName(subnet),\n                            space: space,\n                            space_name: space_name\n                        };\n                        rows.push(row);\n                    });\n                } else {\n                    // If there are no subnets, populate a row based on the\n                    // information we have (just the VLAN).\n                    var row = {\n                        vlan: vlan,\n                        vlan_name: VLANsManager.getName(vlan),\n                        subnet: null,\n                        subnet_name: null,\n                        space: null,\n                        space_name: null\n                    };\n                    rows.push(row);\n                }\n                // Enumerate racks for vlan.\n                angular.forEach(vlan.rack_sids, function(rack_sid) {\n                    var rack = ControllersManager.getItemFromList(rack_sid);\n                    if(angular.isObject(rack)) {\n                        racks[rack.system_id] = rack;\n                    }\n                });\n            });\n            $scope.rows = rows;\n            $scope.racks = Object.keys(racks).map(function(key) {\n                return racks[key];\n            });\n        }\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default Fabric\n        $scope.isDefaultFabric = function() {\n            if(!angular.isObject($scope.fabric)) {\n                return false;\n            }\n            return $scope.fabric.id === 0;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.fabric)) {\n                return $scope.fabric.id !== 0;\n            }\n            return false;\n        };\n\n        // Called when the delete fabric button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete fabric button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete fabric button is pressed.\n        $scope.deleteConfirmButton = function() {\n            FabricsManager.deleteFabric($scope.fabric).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/networks\");\n                $location.search('by', 'fabric');\n            }, function(reply) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(reply.error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            FabricsManager, VLANsManager, SubnetsManager, SpacesManager,\n            ControllersManager, UsersManager]).then(\n            function() {\n                // Possibly redirected from another controller that already had\n                // this fabric set to active. Only call setActiveItem if not\n                // already the activeItem.\n                var activeFabric = FabricsManager.getActiveItem();\n                var requestedFabric = parseInt($routeParams.fabric_id, 10);\n\n                if(isNaN(requestedFabric)) {\n                    ErrorService.raiseError(\"Invalid fabric identifier.\");\n                } else if(angular.isObject(activeFabric) &&\n                    activeFabric.id === requestedFabric) {\n                    fabricLoaded(activeFabric);\n                } else {\n                    FabricsManager.setActiveItem(\n                        requestedFabric).then(function(fabric) {\n                            fabricLoaded(fabric);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                }\n            });\n    }\n]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Images Controller\n */\n\nangular.module('MAAS').controller('ImagesController', [\n    '$rootScope', '$scope', 'BootResourcesManager',\n    'ConfigsManager', 'UsersManager', 'ManagerHelperService', function(\n        $rootScope, $scope, BootResourcesManager,\n        ConfigsManager, UsersManager, ManagerHelperService) {\n\n            $rootScope.page = \"images\";\n            $rootScope.title = \"Loading...\";\n\n            $scope.loading = true;\n            $scope.bootResources = BootResourcesManager.getData();\n            $scope.configManager = ConfigsManager;\n            $scope.autoImport = null;\n\n            // Return true if the user is a super user.\n            $scope.isSuperUser = function() {\n                return UsersManager.isSuperUser();\n            };\n\n            // Load the required managers.\n            ManagerHelperService.loadManagers(\n                $scope, [ConfigsManager, UsersManager]).then(function() {\n                $scope.autoImport = ConfigsManager.getItemFromList(\n                    \"boot_images_auto_import\");\n            });\n\n            // The boot-images directive will load the bootResources manager,\n            // we just watch until resources is set. That means the page is\n            // loaded.\n            $scope.$watch(\"bootResources.resources\", function() {\n                if(angular.isArray($scope.bootResources.resources)) {\n                    $scope.loading = false;\n                    $rootScope.title = \"Images\";\n                }\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Intro Controller\n */\n\nangular.module('MAAS').controller('IntroController', [\n    '$rootScope', '$scope', '$window', '$location',\n    'ConfigsManager', 'PackageRepositoriesManager', 'BootResourcesManager',\n    'ManagerHelperService',\n    function(\n        $rootScope, $scope, $window, $location,\n        ConfigsManager, PackageRepositoriesManager, BootResourcesManager,\n        ManagerHelperService) {\n\n            $rootScope.page = \"intro\";\n            $rootScope.title = \"Welcome\";\n\n            $scope.loading = true;\n            $scope.configManager = ConfigsManager;\n            $scope.repoManager = PackageRepositoriesManager;\n            $scope.bootResources = BootResourcesManager.getData();\n            $scope.hasImages = false;\n            $scope.maasName = null;\n            $scope.upstreamDNS = null;\n            $scope.mainArchive = null;\n            $scope.portsArchive = null;\n            $scope.httpProxy = null;\n\n            // Set the skip function on the rootScope to allow skipping the\n            // intro view.\n            $rootScope.skip = function() {\n                $scope.clickContinue(true);\n            };\n\n            // Return true if the welcome section is not in error.\n            $scope.welcomeInError = function() {\n                var form = $scope.maasName.$maasForm;\n                if(angular.isObject(form)) {\n                    return form.hasErrors();\n                } else {\n                    return false;\n                }\n            };\n\n            // Return true if the network section is in error.\n            $scope.networkInError = function() {\n                var inError = false;\n                var objs = [\n                    $scope.upstreamDNS,\n                    $scope.mainArchive,\n                    $scope.portsArchive,\n                    $scope.httpProxy];\n                angular.forEach(objs, function(obj) {\n                    var form = obj.$maasForm;\n                    if(angular.isObject(form) && form.hasErrors()) {\n                        inError = true;\n                    }\n                });\n                return inError;\n            };\n\n            // Return true if continue can be clicked.\n            $scope.canContinue = function() {\n                return (\n                    !$scope.welcomeInError() &&\n                    !$scope.networkInError() &&\n                    $scope.hasImages);\n            };\n\n            // Called when continue button is clicked.\n            $scope.clickContinue = function(force) {\n                if(angular.isUndefined(force)) {\n                    force = false;\n                }\n                if(force || $scope.canContinue()) {\n                    ConfigsManager.updateItem({\n                        'name': 'completed_intro',\n                        'value': true\n                    }).then(function() {\n                        // Reload the whole page so that the MAAS_config will be\n                        // set to the new value.\n                        $window.location.reload();\n                    });\n                }\n            };\n\n            // If intro has been completed redirect to '/'.\n            if(MAAS_config.completed_intro) {\n                $location.path('/');\n            } else {\n                // Load the required managers.\n                var managers = [ConfigsManager, PackageRepositoriesManager];\n                ManagerHelperService.loadManagers(\n                    $scope, managers).then(function() {\n                    $scope.loading = false;\n                    $scope.maasName = ConfigsManager.getItemFromList(\n                        \"maas_name\");\n                    $scope.upstreamDNS = ConfigsManager.getItemFromList(\n                        \"upstream_dns\");\n                    $scope.httpProxy = ConfigsManager.getItemFromList(\n                        \"http_proxy\");\n                    $scope.mainArchive = (\n                        PackageRepositoriesManager.getItems().filter(\n                            function(repo) {\n                                return (repo['default'] &&\n                                    repo.name === \"main_archive\");\n                            })[0]);\n                    $scope.portsArchive = (\n                        PackageRepositoriesManager.getItems().filter(\n                            function(repo) {\n                                return (repo['default'] &&\n                                    repo.name === \"ports_archive\");\n                            })[0]);\n                });\n\n                // Don't load the boot resources as the boot-images directive\n                // performs that action. Just watch and make sure that\n                // at least one resource exists before continuing.\n                $scope.$watch(\"bootResources.resources\", function() {\n                    if(angular.isArray($scope.bootResources.resources) &&\n                        $scope.bootResources.resources.length > 0) {\n                        $scope.hasImages = true;\n                    } else {\n                        $scope.hasImages = false;\n                    }\n                });\n            }\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Intro Controller\n */\n\nangular.module('MAAS').controller('IntroUserController', [\n    '$rootScope', '$scope', '$window', '$location',\n    'UsersManager', 'ManagerHelperService',\n    function(\n        $rootScope, $scope, $window, $location,\n        UsersManager, ManagerHelperService) {\n\n            $rootScope.page = \"intro\";\n            $rootScope.title = \"Welcome\";\n\n            $scope.loading = true;\n            $scope.user = null;\n\n            // Set the skip function on the rootScope to allow skipping the\n            // intro view.\n            $rootScope.skip = function() {\n                $scope.clickContinue(true);\n            };\n\n            // Return true if super user.\n            $scope.isSuperUser = function() {\n                return UsersManager.isSuperUser();\n            };\n\n            // Return true if continue can be clicked.\n            $scope.canContinue = function() {\n                return $scope.user.sshkeys_count > 0;\n            };\n\n            // Called when continue button is clicked.\n            $scope.clickContinue = function(force) {\n                if(angular.isUndefined(force)) {\n                    force = false;\n                }\n                if(force || $scope.canContinue()) {\n                    UsersManager.markIntroComplete().then(function() {\n                        // Reload the whole page so that the MAAS_config will\n                        // be set to the new value.\n                        $window.location.reload();\n                    });\n                }\n            };\n\n            // If intro has been completed redirect to '/'.\n            if(MAAS_config.user_completed_intro) {\n                $location.path('/');\n            } else {\n                // Load the required managers.\n                ManagerHelperService.loadManager(\n                    $scope, UsersManager).then(function() {\n                        $scope.loading = false;\n                        $scope.user = UsersManager.getAuthUser();\n                    });\n            }\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Networks List Controller\n */\n\nangular.module('MAAS').controller('NetworksListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'SubnetsManager', 'FabricsManager', 'SpacesManager', 'VLANsManager',\n    'UsersManager', 'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, $filter, $location,\n             SubnetsManager, FabricsManager, SpacesManager, VLANsManager,\n             UsersManager, ManagerHelperService) {\n\n        // Load the filters that are used inside the controller.\n        var filterByVLAN = $filter('filterByVLAN');\n        var filterByFabric = $filter('filterByFabric');\n        var filterBySpace = $filter('filterBySpace');\n        var filterByNullSpace = $filter('filterByNullSpace');\n\n        // Set title and page.\n        $rootScope.title = \"Subnets\";\n        $rootScope.page = \"networks\";\n\n        // Set the initial value of $scope.groupBy based on the URL\n        // parameters, but default to the 'fabric' groupBy if it's not found.\n        $scope.getURLParameters = function() {\n            if(angular.isString($location.search().by)) {\n                $scope.groupBy = $location.search().by;\n            } else {\n                $scope.groupBy = 'fabric';\n            }\n        };\n\n        $scope.ADD_FABRIC_ACTION = {\n            name: \"add_fabric\",\n            title: \"Fabric\",\n            selectedTitle: \"Add fabric\",\n            objectName: 'fabric'\n        };\n        $scope.ADD_VLAN_ACTION = {\n            name: \"add_vlan\",\n            title: \"VLAN\",\n            selectedTitle: \"Add VLAN\",\n            objectName: 'vlan'\n        };\n        $scope.ADD_SPACE_ACTION = {\n            name: \"add_space\",\n            title: \"Space\",\n            selectedTitle: \"Add space\",\n            objectName: 'space'\n        };\n        $scope.ADD_SUBNET_ACTION = {\n            name: \"add_subnet\",\n            title: \"Subnet\",\n            selectedTitle: \"Add subnet\",\n            objectName: 'subnet'\n        };\n\n        $scope.getURLParameters();\n\n        // Set initial values.\n        $scope.subnetManager = SubnetsManager;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.fabricManager = FabricsManager;\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.spaceManager = SpacesManager;\n        $scope.spaces = SpacesManager.getItems();\n        $scope.vlanManager = VLANsManager;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.loading = true;\n\n        $scope.group = {};\n        // Used when grouping by fabrics.\n        $scope.group.fabrics = {};\n        // User when grouping by spaces.\n        $scope.group.spaces = {};\n        $scope.group.spaces.orphanVLANs = [];\n\n        // Initializers for action objects.\n        var actionObjectInitializers = {\n            fabric: function() {\n                return {};\n            },\n            vlan: function() {\n                // Set initial fabric.\n                return {\n                    fabric: $scope.fabrics[0].id\n                };\n            },\n            space: function() {\n                return {};\n            },\n            subnet: function() {\n                // Set initial VLAN and space.\n                return {\n                    vlan: $scope.fabrics[0].vlan_ids[0]\n                };\n            }\n        };\n\n        // Return the name of the subnet.\n        function getSubnetName(subnet) {\n            return SubnetsManager.getName(subnet);\n        }\n\n        // Generate a table that can be easily rendered in the view.\n        // Traverses the fabrics and VLANs in-order so that if previous\n        // fabrics and VLANs' names are identical, they can be hidden from\n        // the table cell.\n        function updateFabricsGroupBy() {\n            var rows = [];\n            var previous_fabric = {id:-1};\n            var previous_vlan = {id:-1};\n            var fabrics = $filter('orderBy')($scope.fabrics, ['name']);\n            angular.forEach(fabrics, function(fabric) {\n                var vlans = filterByFabric($scope.vlans, fabric);\n                vlans = $filter('orderBy')(vlans, ['vid']);\n                angular.forEach(vlans, function(vlan) {\n                    var subnets = filterByVLAN($scope.subnets, vlan);\n                    if(subnets.length > 0) {\n                        angular.forEach(subnets, function(subnet) {\n                            var space = SpacesManager.getItemFromList(\n                                subnet.space);\n                            var row = {\n                                fabric: fabric,\n                                fabric_name: \"\",\n                                vlan: vlan,\n                                vlan_name: \"\",\n                                space: space,\n                                subnet: subnet,\n                                subnet_name: getSubnetName(subnet)\n                            };\n                            if(fabric.id !== previous_fabric.id) {\n                                previous_fabric.id = fabric.id;\n                                row.fabric_name = fabric.name;\n                            }\n                            if(vlan.id !== previous_vlan.id) {\n                                previous_vlan.id = vlan.id;\n                                row.vlan_name = $scope.getVLANName(vlan);\n                            }\n                            rows.push(row);\n                        });\n                    } else {\n                        var row = {\n                            fabric: fabric,\n                            fabric_name: \"\",\n                            vlan: vlan,\n                            vlan_name: $scope.getVLANName(vlan)\n                        };\n                        if(fabric.id !== previous_fabric.id) {\n                            previous_fabric.id = fabric.id;\n                            row.fabric_name = fabric.name;\n                        }\n                        rows.push(row);\n                    }\n                });\n            });\n            $scope.group.fabrics.rows = rows;\n        }\n\n        // Generate a table that can be easily rendered in the view.\n        // Traverses the spaces in-order so that if the previous space's name\n        // is identical, it can be hidden from the table cell.\n        // Note that this view only shows items that can be related to a space.\n        // That is, VLANs and fabrics with no corresponding subnets (and\n        // therefore spaces) cannot be shown in this table.\n        function updateSpacesGroupBy() {\n            var rows = [];\n            var spaces = $filter('orderBy')($scope.spaces, ['name']);\n            var previous_space = {id: -1};\n            angular.forEach(spaces, function(space) {\n                var subnets = filterBySpace($scope.subnets, space);\n                subnets = $filter('orderBy')(subnets, ['cidr']);\n                var index = 0;\n                angular.forEach(subnets, function(subnet) {\n                    index++;\n                    var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                    var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                    var row = {\n                        fabric: fabric,\n                        vlan: vlan,\n                        vlan_name: $scope.getVLANName(vlan),\n                        subnet: subnet,\n                        subnet_name: getSubnetName(subnet),\n                        space: space,\n                        space_name: \"\"\n                    };\n                    if(space.id !== previous_space.id) {\n                        previous_space.id = space.id;\n                        row.space_name = space.name;\n                    }\n                    rows.push(row);\n                });\n                if(index === 0) {\n                    rows.push({\n                        space: space,\n                        space_name: space.name\n                    });\n                }\n            });\n            $scope.group.spaces.rows = rows;\n        }\n\n        function updateOrphanVLANs() {\n            var rows = [];\n            var subnets = filterByNullSpace($scope.subnets);\n            subnets = $filter('orderBy')(subnets, ['cidr']);\n            angular.forEach(subnets, function(subnet) {\n                var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                var row = {\n                    fabric: fabric,\n                    vlan: vlan,\n                    vlan_name: $scope.getVLANName(vlan),\n                    subnet: subnet,\n                    subnet_name: getSubnetName(subnet),\n                    space: null\n                };\n                rows.push(row);\n            });\n            $scope.group.spaces.orphanVLANs = rows;\n        }\n\n        // Update the \"Group by\" selection. This is called from a few places:\n        // * When the $watch notices data has changed\n        // * When the URL bar is updated, after the URL is parsed and\n        //   $scope.groupBy is updated\n        // * When the drop-down \"Group by\" selection box changes\n        $scope.updateGroupBy = function() {\n            var groupBy = $scope.groupBy;\n            if(groupBy === 'space') {\n                $location.search('by', 'space');\n                updateSpacesGroupBy();\n                updateOrphanVLANs();\n            } else {\n                // The only other option is 'fabric', but in case the user\n                // made a typo on the URL bar we just assume it was 'fabric'\n                // as a fallback.\n                $location.search('by', 'fabric');\n                updateFabricsGroupBy();\n            }\n        };\n\n        // Called when the managers load to populate the actions the user\n        // is allowed to perform.\n        $scope.updateActions = function() {\n            if(UsersManager.isSuperUser()) {\n                $scope.actionOptions = [\n                    $scope.ADD_FABRIC_ACTION,\n                    $scope.ADD_VLAN_ACTION,\n                    $scope.ADD_SPACE_ACTION,\n                    $scope.ADD_SUBNET_ACTION\n                ];\n            } else {\n                $scope.actionOptions = [];\n            }\n        };\n\n        // Called when a action is selected.\n        $scope.actionChanged = function() {\n            $scope.newObject = (\n                actionObjectInitializers[$scope.actionOption.objectName]());\n        };\n\n        // Called when the \"Cancel\" button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionOption = null;\n            $scope.newObject = null;\n        };\n\n        // Return the name name for the VLAN.\n        $scope.getVLANName = function(vlan) {\n            return VLANsManager.getName(vlan);\n        };\n\n        // Return the name of the fabric from its given ID.\n        $scope.getFabricNameById = function(fabricId) {\n            return FabricsManager.getName(\n                FabricsManager.getItemFromList(fabricId));\n        };\n\n        // Called before the subnet object is saved. Sets the fabric\n        // field to be the fabric for the selected VLAN.\n        $scope.actionSubnetPreSave = function(obj) {\n            obj.fabric = VLANsManager.getItemFromList(obj.vlan).fabric;\n            return obj;\n        };\n\n        ManagerHelperService.loadManagers($scope, [\n            SubnetsManager, FabricsManager, SpacesManager, VLANsManager,\n            UsersManager]).then(\n            function() {\n                $scope.loading = false;\n\n                $scope.updateActions();\n\n                $scope.$watch(\n                    \"[subnets, fabrics, spaces, vlans]\",\n                    $scope.updateGroupBy, true);\n\n                // If the route has been updated, a new search string must\n                // potentially be rendered.\n                $scope.$on(\"$routeUpdate\", function() {\n                    $scope.getURLParameters();\n                    $scope.updateGroupBy();\n                });\n                $scope.updateGroupBy();\n            });\n    }\n]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Details Controller\n */\n\nangular.module('MAAS').controller('NodeDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location', '$interval',\n    'DevicesManager', 'MachinesManager', 'ControllersManager', 'ZonesManager',\n    'GeneralManager', 'UsersManager', 'TagsManager', 'DomainsManager',\n    'ManagerHelperService', 'ServicesManager', 'ErrorService',\n    'ValidationService', 'ScriptsManager', 'ResourcePoolsManager', function(\n        $scope, $rootScope, $routeParams, $location, $interval, DevicesManager,\n        MachinesManager, ControllersManager, ZonesManager, GeneralManager,\n        UsersManager, TagsManager, DomainsManager, ManagerHelperService,\n        ServicesManager, ErrorService, ValidationService, ScriptsManager,\n        ResourcePoolsManager) {\n\n        // Mapping of device.ip_assignment to viewable text.\n        var DEVICE_IP_ASSIGNMENT = {\n            external: \"External\",\n            dynamic: \"Dynamic\",\n            \"static\": \"Static\"\n        };\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.MAAS_config = MAAS_config;\n        $scope.loaded = false;\n        $scope.node = null;\n        $scope.action = {\n          option: null,\n          allOptions: null,\n          availableOptions: [],\n          error: null,\n          showing_confirmation: false\n        };\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.osinfo = GeneralManager.getData(\"osinfo\");\n        $scope.section = {\n            area: angular.isString(\n                $routeParams.area) ? $routeParams.area : \"summary\"\n        };\n        $scope.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.commissioningSelection = [];\n        $scope.testSelection = [];\n        $scope.releaseOptions = {};\n        $scope.checkingPower = false;\n        $scope.devices = [];\n        $scope.scripts = ScriptsManager.getItems();\n\n        // Node header section.\n        $scope.header = {\n            editing: false,\n            editing_domain: false,\n            hostname: {\n                value: \"\"\n            },\n            domain: {\n                selected: null,\n                options: DomainsManager.getItems()\n            }\n        };\n\n        // Summary section.\n        $scope.summary = {\n            editing: false,\n            architecture: {\n                selected: null,\n                options: GeneralManager.getData(\"architectures\")\n            },\n            min_hwe_kernel: {\n                selected: null,\n                options: GeneralManager.getData(\"min_hwe_kernels\")\n            },\n            zone: {\n                selected: null,\n                options: ZonesManager.getItems()\n            },\n            pool: {\n                selected: null,\n                options: ResourcePoolsManager.getItems()\n            },\n            tags: []\n        };\n\n        // Service monitor section (for controllers).\n        $scope.services = {};\n\n        // Power section.\n        $scope.power = {\n            editing: false,\n            type: null,\n            bmc_node_count: 0,\n            parameters: {},\n            in_pod: false\n        };\n\n        // Get the display text for device ip assignment type.\n        $scope.getDeviceIPAssignment = function(ipAssignment) {\n            return DEVICE_IP_ASSIGNMENT[ipAssignment];\n        };\n\n        // Events section.\n        $scope.events = {\n            limit: 10\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            if($scope.node && $scope.node.fqdn) {\n                $rootScope.title = $scope.node.fqdn;\n            }\n        }\n\n        function updateHeader() {\n            // Don't update the value if in editing mode. As this would\n            // overwrite the users changes.\n            if($scope.header.editing || $scope.header.editing_domain) {\n                return;\n            }\n            $scope.header.hostname.value = $scope.node.fqdn;\n            // DomainsManager gives us all Domain information while the node\n            // only contains the name and id. Because of this we need to loop\n            // through the DomainsManager options and find the option with the\n            // id matching the node id. Otherwise we end up setting our\n            // selected field to an option not from DomainsManager which\n            // doesn't work.\n            var i;\n            for(i=0;i<$scope.header.domain.options.length;i++) {\n                var option = $scope.header.domain.options[i];\n                if(option.id === $scope.node.domain.id) {\n                    $scope.header.domain.selected = option;\n                    break;\n                }\n            }\n        }\n\n        // Update the available action options for the node.\n        function updateAvailableActionOptions() {\n            if(!angular.isObject($scope.node)) {\n                return;\n            }\n            var actionTypeForNodeType = {\n                0: \"machine_actions\",\n                1: \"device_actions\",\n                2: \"rack_controller_actions\",\n                3: \"region_controller_actions\",\n                4: \"region_and_rack_controller_actions\"\n            };\n            if(GeneralManager.isDataLoaded(\n                    actionTypeForNodeType[$scope.node.node_type])) {\n                // Build the available action options control from the\n                // allowed actions, except set-zone which does not make\n                // sense in this view because the form has this\n                // functionality\n                $scope.action.allOptions = GeneralManager.getData(\n                    actionTypeForNodeType[$scope.node.node_type]);\n                $scope.action.availableOptions.length = 0;\n                angular.forEach($scope.action.allOptions, function(option) {\n                    if($scope.node.actions.indexOf(option.name) >= 0\n                       && option.name !== \"set-zone\"\n                       && option.name !== \"set-pool\") {\n                        $scope.action.availableOptions.push(option);\n                    }\n                });\n            } else {\n                // The GeneralManager only loads data requested on load. This\n                // isn't called until after load as its triggered on the loaded\n                // node's actions. If the node's action list isn't loaded load\n                // it then update the available options.\n                var self = updateAvailableActionOptions;\n                GeneralManager.loadItems(\n                    [actionTypeForNodeType[$scope.node.node_type]]).then(\n                    updateAvailableActionOptions);\n            }\n        }\n\n        // Updates the currently selected items in the power section.\n        function updatePower() {\n            // Do not update the selected items, when editing this would\n            // cause the users selection to change.\n            if($scope.power.editing) {\n                return;\n            }\n\n            var i;\n            $scope.power.type = null;\n            for(i = 0; i < $scope.power_types.length; i++) {\n                if($scope.node.power_type === $scope.power_types[i].name) {\n                    $scope.power.type = $scope.power_types[i];\n                    break;\n                }\n            }\n\n            $scope.power.bmc_node_count = $scope.node.power_bmc_node_count;\n\n            $scope.power.parameters = angular.copy(\n                $scope.node.power_parameters);\n            if(!angular.isObject($scope.power.parameters)) {\n                $scope.power.parameters = {};\n            }\n\n            // Force editing mode on, if the power_type is missing for a\n            // machine. This is placed at the bottom because we wanted the\n            // selected items to be filled in at least once.\n            if($scope.canEdit() && $scope.node.power_type === \"\" &&\n               $scope.node.node_type === 0) {\n                $scope.power.editing = true;\n            }\n\n            $scope.power.in_pod = angular.isDefined($scope.node.pod);\n        }\n\n        // Updates the currently selected items in the summary section.\n        function updateSummary() {\n            // Do not update the selected items, when editing this would\n            // cause the users selection to change.\n            if($scope.summary.editing) {\n                return;\n            }\n\n            if(angular.isObject($scope.node.zone)) {\n                $scope.summary.zone.selected = ZonesManager.getItemFromList(\n                    $scope.node.zone.id);\n            }\n            if(angular.isObject($scope.node.pool)) {\n                $scope.summary.pool.selected = (\n                    ResourcePoolsManager.getItemFromList($scope.node.pool.id));\n            }\n            $scope.summary.architecture.selected = $scope.node.architecture;\n            $scope.summary.min_hwe_kernel.selected = $scope.node.min_hwe_kernel;\n            $scope.summary.tags = angular.copy($scope.node.tags);\n\n            // Force editing mode on, if the architecture is invalid. This is\n            // placed at the bottom because we wanted the selected items to\n            // be filled in at least once.\n            if($scope.canEdit() &&\n                $scope.hasUsableArchitectures() &&\n                $scope.hasInvalidArchitecture()) {\n                $scope.summary.editing = true;\n            }\n        }\n\n        // Updates the service monitor section.\n        function updateServices() {\n            if($scope.isController) {\n                $scope.services = {};\n                angular.forEach(ControllersManager.getServices(\n                        $scope.node), function(service) {\n                    $scope.services[service.name] = service;\n                });\n            }\n        }\n\n        // Update the devices array on the scope based on the device children\n        // on the node.\n        function updateDevices() {\n            $scope.devices = [];\n            angular.forEach($scope.node.devices, function(child) {\n                var device = {\n                    name: child.fqdn\n                };\n\n                // Add the interfaces to the device object if any exists.\n                if(angular.isArray(child.interfaces) &&\n                    child.interfaces.length > 0) {\n                    angular.forEach(child.interfaces, function(nic, nicIdx) {\n                        var deviceWithMAC = angular.copy(device);\n                        deviceWithMAC.mac_address = nic.mac_address;\n\n                        // Remove device name so it is not duplicated in the\n                        // table since this is another MAC address on this\n                        // device.\n                        if(nicIdx > 0) {\n                            deviceWithMAC.name = \"\";\n                        }\n\n                        // Add this links to the device object if any exists.\n                        if(angular.isArray(nic.links) &&\n                            nic.links.length > 0) {\n                            angular.forEach(nic.links, function(link, lIdx) {\n                                var deviceWithLink = angular.copy(\n                                    deviceWithMAC);\n                                deviceWithLink.ip_address = link.ip_address;\n\n                                // Remove the MAC address so it is not\n                                // duplicated in the table since this is\n                                // another link on this interface.\n                                if(lIdx > 0) {\n                                    deviceWithLink.mac_address = \"\";\n                                }\n\n                                $scope.devices.push(deviceWithLink);\n                            });\n                        } else {\n                            $scope.devices.push(deviceWithMAC);\n                        }\n                    });\n                } else {\n                    $scope.devices.push(device);\n                }\n            });\n        }\n\n        // Starts the watchers on the scope.\n        function startWatching() {\n            // Update the title and name when the node fqdn changes.\n            $scope.$watch(\"node.fqdn\", function() {\n                updateTitle();\n                updateHeader();\n            });\n\n            // Update the devices on the node.\n            $scope.$watch(\"node.devices\", updateDevices);\n\n            // Update the availableActionOptions when the node actions change.\n            $scope.$watch(\"node.actions\", updateAvailableActionOptions);\n\n            // Update the summary when the node or architectures list is\n            // updated.\n            $scope.$watch(\"node.architecture\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.architecture.options, updateSummary);\n\n            // Uppdate the summary when min_hwe_kernel is updated.\n            $scope.$watch(\"node.min_hwe_kernel\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.min_hwe_kernel.options, updateSummary);\n\n            // Update the summary when the node or zone list is\n            // updated.\n            $scope.$watch(\"node.zone.id\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.zone.options, updateSummary);\n\n            // Update the summary when the node or the resouce pool list is\n            // updated.\n            $scope.$watch(\"node.pool.id\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.pool.options, updateSummary);\n\n            // Update the power when the node power_type or power_parameters\n            // are updated.\n            $scope.$watch(\"node.power_type\", updatePower);\n            $scope.$watch(\"node.power_parameters\", updatePower);\n            $scope.$watchCollection(\"power_types\", updatePower);\n\n            // Update the services when the services list is updated.\n            $scope.$watch(\"node.service_ids\", updateServices);\n        }\n\n        // Called when the node has been loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            updateTitle();\n            updateSummary();\n            updateServices();\n            startWatching();\n\n            // Tell the storageController and networkingController that the\n            // node has been loaded.\n            if(angular.isObject($scope.storageController)) {\n                $scope.storageController.nodeLoaded();\n            }\n            if(angular.isObject($scope.networkingController)) {\n                $scope.networkingController.nodeLoaded();\n            }\n        }\n\n        // Update the node with new data on the region.\n        $scope.updateNode = function(node, queryPower) {\n            if(angular.isUndefined(queryPower)) {\n                queryPower = false;\n            }\n            return $scope.nodesManager.updateItem(node).then(function(node) {\n                updateHeader();\n                updateSummary();\n                if(queryPower) {\n                    $scope.checkPowerState();\n                }\n            }, function(error) {\n                console.log(error);\n                updateHeader();\n                updateSummary();\n            });\n        };\n\n        // Called for autocomplete when the user is typing a tag name.\n        $scope.tagsAutocomplete = function(query) {\n            return TagsManager.autocomplete(query);\n        };\n\n        $scope.getPowerStateClass = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return \"\";\n            }\n\n            if($scope.checkingPower) {\n                return \"checking\";\n            } else {\n                return $scope.node.power_state;\n            }\n        };\n\n        // Get the power state text to show.\n        $scope.getPowerStateText = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return \"\";\n            }\n\n            if($scope.checkingPower) {\n                return \"Checking power\";\n            } else if($scope.node.power_state === \"unknown\") {\n                return \"\";\n            } else {\n                return \"Power \" + $scope.node.power_state;\n            }\n        };\n\n        // Returns true when the \"check now\" button for updating the power\n        // state should be shown.\n        $scope.canCheckPowerState = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return false. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n            return (\n                $scope.node.power_state !== \"unknown\" &&\n                !$scope.checkingPower);\n        };\n\n        // Check the power state of the node.\n        $scope.checkPowerState = function() {\n            $scope.checkingPower = true;\n            $scope.nodesManager.checkPowerState($scope.node).then(function() {\n                $scope.checkingPower = false;\n            });\n        };\n\n        $scope.isUbuntuOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"ubuntu\") {\n                return true;\n            }\n            return false;\n        };\n\n        $scope.isUbuntuCoreOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"ubuntu-core\") {\n                return true;\n            }\n            return false;\n        };\n\n        $scope.isCustomOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"custom\") {\n                return true;\n            }\n            return false;\n        };\n\n        // Return true if there is an action error.\n        $scope.isActionError = function() {\n            return $scope.action.error !== null;\n        };\n\n        // Return True if in deploy action and the osinfo is missing.\n        $scope.isDeployError = function() {\n            // Never a deploy error when there is an action error.\n            if($scope.isActionError()) {\n                return false;\n            }\n\n            var missing_osinfo = (\n                angular.isUndefined($scope.osinfo.osystems) ||\n                $scope.osinfo.osystems.length === 0);\n            if(angular.isObject($scope.action.option) &&\n                $scope.action.option.name === \"deploy\" &&\n                missing_osinfo) {\n                return true;\n            }\n            return false;\n        };\n\n        // Return True if unable to deploy because of missing ssh keys.\n        $scope.isSSHKeyError = function() {\n            // Never a deploy error when there is an action error.\n            if($scope.isActionError()) {\n                return false;\n            }\n            if(angular.isObject($scope.action.option) &&\n                $scope.action.option.name === \"deploy\" &&\n                UsersManager.getSSHKeyCount() === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Called when the actionOption has changed.\n        $scope.action.optionChanged = function() {\n            // Clear the action error.\n            $scope.action.error = null;\n            $scope.action.showing_confirmation = false;\n        };\n\n        // Cancel the action.\n        $scope.actionCancel = function() {\n            $scope.action.option = null;\n            $scope.action.error = null;\n            $scope.action.showing_confirmation = false;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            var extra = {};\n            var i;\n            // Set deploy parameters if a deploy.\n            if($scope.action.option.name === \"deploy\" &&\n                angular.isString($scope.osSelection.osystem) &&\n                angular.isString($scope.osSelection.release)) {\n\n                // Set extra. UI side the release is structured os/release, but\n                // when it is sent over the websocket only the \"release\" is\n                // sent.\n                extra.osystem = $scope.osSelection.osystem;\n                var release = $scope.osSelection.release;\n                release = release.split(\"/\");\n                release = release[release.length-1];\n                extra.distro_series = release;\n                // hwe_kernel is optional so only include it if its specified\n                if(angular.isString($scope.osSelection.hwe_kernel) &&\n                   ($scope.osSelection.hwe_kernel.indexOf('hwe-') >= 0 ||\n                    $scope.osSelection.hwe_kernel.indexOf('ga-') >= 0)) {\n                    extra.hwe_kernel = $scope.osSelection.hwe_kernel;\n                }\n            } else if($scope.action.option.name === \"commission\") {\n                extra.enable_ssh = $scope.commissionOptions.enableSSH;\n                extra.skip_networking = (\n                    $scope.commissionOptions.skipNetworking);\n                extra.skip_storage = $scope.commissionOptions.skipStorage;\n                extra.commissioning_scripts = [];\n                for(i=0;i<$scope.commissioningSelection.length;i++) {\n                    extra.commissioning_scripts.push(\n                        $scope.commissioningSelection[i].id);\n                }\n                if($scope.commissionOptions.updateFirmware) {\n                    extra.commissioning_scripts.push('update_firmware')\n                }\n                if($scope.commissionOptions.configureHBA) {\n                    extra.commissioning_scripts.push('configure_hba')\n                }\n                if(extra.commissioning_scripts.length === 0) {\n                    // Tell the region not to run any custom commissioning\n                    // scripts.\n                    extra.commissioning_scripts.push('none');\n                }\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.testSelection.length;i++) {\n                    extra.testing_scripts.push($scope.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.action.option.name === \"test\") {\n                if($scope.node.status_code === 6 &&\n                        !$scope.action.showing_confirmation) {\n                    $scope.action.showing_confirmation = true;\n                    return;\n                }\n                // Set the test options.\n                extra.enable_ssh = $scope.commissionOptions.enableSSH;\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.testSelection.length;i++) {\n                    extra.testing_scripts.push($scope.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.action.option.name === \"release\") {\n                // Set the release options.\n                extra.erase = $scope.releaseOptions.erase;\n                extra.secure_erase = $scope.releaseOptions.secureErase;\n                extra.quick_erase = $scope.releaseOptions.quickErase;\n            }\n\n            $scope.nodesManager.performAction(\n                $scope.node, $scope.action.option.name, extra).then(function() {\n                    // If the action was delete, then go back to listing.\n                    if($scope.action.option.name === \"delete\") {\n                        $location.path(\"/machines\");\n                    }\n                    $scope.action.option = null;\n                    $scope.action.error = null;\n                    $scope.action.showing_confirmation = false;\n                    $scope.osSelection.$reset();\n                    $scope.commissionOptions.enableSSH = false;\n                    $scope.commissionOptions.skipNetworking = false;\n                    $scope.commissionOptions.skipStorage = false;\n                    $scope.commissionOptions.updateFirmware = false;\n                    $scope.commissionOptions.configureHBA = false;\n                    $scope.commissioningSelection = [];\n                    $scope.testSelection = [];\n                }, function(error) {\n                    $scope.action.error = error;\n                });\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if their are usable architectures.\n        $scope.hasUsableArchitectures = function() {\n            return $scope.summary.architecture.options.length > 0;\n        };\n\n        // Return the placeholder text for the architecture dropdown.\n        $scope.getArchitecturePlaceholder = function() {\n            if($scope.hasUsableArchitectures()) {\n                return \"Choose an architecture\";\n            } else {\n                return \"-- No usable architectures --\";\n            }\n        };\n\n        // Return true if the saved architecture is invalid.\n        $scope.hasInvalidArchitecture = function() {\n            if(angular.isObject($scope.node)) {\n                return (\n                    !$scope.isDevice && (\n                        $scope.node.architecture === \"\" ||\n                        $scope.summary.architecture.options.indexOf(\n                            $scope.node.architecture) === -1));\n            } else {\n                return false;\n            }\n        };\n\n        // Return true if the current architecture selection is invalid.\n        $scope.invalidArchitecture = function() {\n            return (\n                !$scope.isDevice && !$scope.isController && (\n                    $scope.summary.architecture.selected === \"\" ||\n                    $scope.summary.architecture.options.indexOf(\n                        $scope.summary.architecture.selected) === -1));\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If power_types exist then a rack controller is connected.\n            return $scope.power_types.length > 0;\n        };\n\n        // Return true if the node is locked\n        $scope.isLocked = function() {\n            if ($scope.node === null) {\n                return false;\n            }\n\n            return $scope.node.locked;\n        };\n\n        // Return true when the edit buttons can be clicked.\n        $scope.canEdit = function() {\n            // Devices can be edited, since either the user is a super\n            // user, or he owns the device (since he can't see devices\n            // that he doesn't own).\n            if ($scope.isDevice) {\n                return true;\n            }\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser() &&\n                    ! $scope.isLocked());\n        };\n\n        // Called to edit the domain name.\n        $scope.editHeaderDomain = function() {\n            if($scope.canEdit()) {\n                return;\n            }\n\n            // Do nothing if already editing because we don't want to reset\n            // the current value.\n            if($scope.header.editing_domain) {\n                return;\n            }\n            $scope.header.editing = false;\n            $scope.header.editing_domain = true;\n\n            // Set the value to the hostname, as hostname and domain are edited\n            // using different fields.\n            $scope.header.hostname.value = $scope.node.hostname;\n        };\n\n        // Called to edit the node name.\n        $scope.editHeader = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n\n            // Do nothing if already editing because we don't want to reset\n            // the current value.\n            if($scope.header.editing) {\n                return;\n            }\n            $scope.header.editing = true;\n            $scope.header.editing_domain = false;\n\n            // Set the value to the hostname, as hostname and domain are edited\n            // using different fields.\n            $scope.header.hostname.value = $scope.node.hostname;\n        };\n\n        // Return true when the hostname or domain in the header is invalid.\n        $scope.editHeaderInvalid = function() {\n            // Not invalid unless editing.\n            if(!$scope.header.editing && !$scope.header.editing_domain) {\n                return false;\n            }\n\n            // The value cannot be blank.\n            var value = $scope.header.hostname.value;\n            if(value.length === 0) {\n                return true;\n            }\n            return !ValidationService.validateHostname(value);\n        };\n\n        // Called to cancel editing of the node hostname and domain.\n        $scope.cancelEditHeader = function() {\n            $scope.header.editing = false;\n            $scope.header.editing_domain = false;\n            updateHeader();\n        };\n\n        // Called to save editing of node hostname or domain.\n        $scope.saveEditHeader = function() {\n            // Does nothing if invalid.\n            if($scope.editHeaderInvalid()) {\n                return;\n            }\n            $scope.header.editing = false;\n            $scope.header.editing_domain = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.hostname = $scope.header.hostname.value;\n            node.domain = $scope.header.domain.selected;\n\n            // Update the node.\n            $scope.updateNode(node);\n        };\n\n        // Called to enter edit mode in the summary section.\n        $scope.editSummary = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.summary.editing = true;\n        };\n\n        // Called to cancel editing in the summary section.\n        $scope.cancelEditSummary = function() {\n            // Leave edit mode only if node has valid architecture.\n            if($scope.isDevice || $scope.isController) {\n                $scope.summary.editing = false;\n            } else if(!$scope.hasInvalidArchitecture()) {\n                $scope.summary.editing = false;\n            }\n\n            updateSummary();\n        };\n\n        // Called to save the changes made in the summary section.\n        $scope.saveEditSummary = function() {\n            // Do nothing if invalidArchitecture.\n            if($scope.invalidArchitecture()) {\n                return;\n            }\n\n            $scope.summary.editing = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.zone = angular.copy($scope.summary.zone.selected);\n            node.pool = angular.copy($scope.summary.pool.selected);\n            node.architecture = $scope.summary.architecture.selected;\n            if($scope.summary.min_hwe_kernel.selected === null) {\n                node.min_hwe_kernel = \"\";\n            } else {\n                node.min_hwe_kernel = $scope.summary.min_hwe_kernel.selected;\n            }\n            node.tags = [];\n            angular.forEach($scope.summary.tags, function(tag) {\n                node.tags.push(tag.text);\n            });\n\n            // Update the node.\n            $scope.updateNode(node);\n        };\n\n        // Return true if the current power type selection is invalid.\n        $scope.invalidPowerType = function() {\n            return !angular.isObject($scope.power.type);\n        };\n\n        // Called to enter edit mode in the power section.\n        $scope.editPower = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.power.editing = true;\n        };\n\n        // Called to cancel editing in the power section.\n        $scope.cancelEditPower = function() {\n            // If the node is not a machine, only leave edit mode if node has\n            // valid power type.\n            if ($scope.node.node_type !== 0 || $scope.node.power_type !== \"\") {\n                $scope.power.editing = false;\n            }\n            updatePower();\n        };\n\n        // Called to save the changes made in the power section.\n        $scope.saveEditPower = function() {\n            // Does nothing if invalid power type.\n            if($scope.invalidPowerType()) {\n                return;\n            }\n            $scope.power.editing = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.power_type = $scope.power.type.name;\n            node.power_parameters = angular.copy($scope.power.parameters);\n\n            // Update the node.\n            $scope.updateNode(node, true);\n        };\n\n        // Return true if the \"load more\" events button should be available.\n        $scope.allowShowMoreEvents = function() {\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n            if(!angular.isArray($scope.node.events)) {\n                return false;\n            }\n            return (\n                $scope.node.events.length > 0 &&\n                $scope.node.events.length > $scope.events.limit &&\n                $scope.events.limit < 50);\n        };\n\n        // Show another 10 events.\n        $scope.showMoreEvents = function() {\n            $scope.events.limit += 10;\n        };\n\n        // Return the nice text for the given event.\n        $scope.getEventText = function(event) {\n            var text = event.type.description;\n            if(angular.isString(event.description) &&\n                event.description.length > 0) {\n                text += \" - \" + event.description;\n            }\n            return text;\n        };\n\n        $scope.getPowerEventError = function() {\n            if(!angular.isObject($scope.node) ||\n                !angular.isArray($scope.node.events)) {\n                return;\n            }\n\n            var i;\n            for(i = 0; i < $scope.node.events.length; i++) {\n                var event = $scope.node.events[i];\n                if(event.type.level === \"warning\" &&\n                   event.type.description === \"Failed to query node's BMC\") {\n                    // Latest power event is an error\n                    return event;\n                } else if(event.type.level === \"info\" &&\n                          event.type.description === \"Queried node's BMC\") {\n                    // Latest power event is not an error\n                    return;\n                }\n            }\n            // No power event found, thus no error\n            return;\n        };\n\n        $scope.hasPowerEventError = function() {\n            var event = $scope.getPowerEventError();\n            return angular.isObject(event);\n        };\n\n        $scope.getPowerEventErrorText = function() {\n            var event = $scope.getPowerEventError();\n            if(angular.isObject(event)) {\n                // Return text\n                return event.description;\n            } else {\n                return \"\";\n            }\n        };\n\n        // true if power error prevents the provided action\n        $scope.hasActionPowerError = function(actionName) {\n            if(!$scope.hasPowerError()) {\n                return false; // no error, no need to check state\n            }\n            // these states attempt to manipulate power\n            var powerChangingStates = [\n                'commission',\n                'deploy',\n                'on',\n                'off',\n                'release'\n            ];\n            if(actionName && powerChangingStates.indexOf(actionName) > -1) {\n                return true;\n            }\n            return false;\n        };\n\n        // Check to see if the power type has any missing system packages.\n        $scope.hasPowerError = function() {\n            if(angular.isObject($scope.power.type)) {\n                return $scope.power.type.missing_packages.length > 0;\n            } else {\n                return false;\n            }\n        };\n\n        // Returns a formatted string of missing system packages.\n        $scope.getPowerErrors = function() {\n            var i;\n            var result = \"\";\n            if(angular.isObject($scope.power.type)) {\n                var packages = $scope.power.type.missing_packages;\n                packages.sort();\n                for(i = 0; i < packages.length; i++) {\n                    result += packages[i];\n                    if(i+2 < packages.length) {\n                        result += \", \";\n                    }\n                    else if(i+1 < packages.length) {\n                        result += \" and \";\n                    }\n                }\n                result += packages.length > 1 ? \" packages\" : \" package\";\n            }\n            return result;\n        };\n\n        // Return the class to apply to the service.\n        $scope.getServiceClass = function(service) {\n            if(!angular.isObject(service)) {\n                return \"none\";\n            } else {\n                if(service.status === \"running\") {\n                    return \"success\";\n                } else if(service.status === \"dead\") {\n                    return \"error\";\n                } else if(service.status === \"degraded\") {\n                    return \"warning\";\n                } else {\n                    return \"none\";\n                }\n            }\n        };\n\n        $scope.hasCustomCommissioningScripts = function() {\n            var i;\n            for(i=0;i<$scope.scripts.length;i++) {\n                if($scope.scripts[i].script_type === 0) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Called by the children controllers to let the parent know.\n        $scope.controllerLoaded = function(name, scope) {\n            $scope[name] = scope;\n            if(angular.isObject(scope.node)) {\n              scope.nodeLoaded();\n            }\n        };\n\n        // Only show a warning that tests have failed if there are failed tests\n        // and the node isn't currently commissioning or testing.\n        $scope.showFailedTestWarning = function() {\n            // Devices can't have failed tests and don't have status_code\n            // defined.\n            if($scope.node.node_type === 1 || !$scope.node.status_code) {\n                return false;\n            }\n            switch($scope.node.status_code) {\n                // NEW\n                case 0:\n                // COMMISSIONING\n                case 1:\n                // FAILED_COMMISSIONING\n                case 2:\n                // TESTING\n                case 21:\n                // FAILED_TESTING\n                case 22:\n                    return false;\n            }\n            switch($scope.node.testing_status) {\n                // Tests havn't been run\n                case -1:\n                // Tests have passed\n                case 2:\n                    return false;\n            }\n            return true;\n        };\n\n        // Get the subtext for the CPU card. Only nodes commissioned after\n        // MAAS 2.4 will have the CPU speed.\n        $scope.getCPUSubtext = function() {\n            var label = $scope.node.cpu_count + \" cores\";\n            if(!$scope.node.cpu_speed || $scope.node.cpu_speed === 0) {\n                return label;\n            } else if($scope.node.cpu_speed < 1000) {\n                return label + \" @ \" + $scope.node.cpu_speed + \" Mhz\";\n            } else {\n                return label + \" @ \" + ($scope.node.cpu_speed / 1000) + \" Ghz\";\n            }\n        }\n\n        // Reload osinfo when the page reloads\n        $scope.$on(\"$routeUpdate\", function () {\n            GeneralManager.loadItems(\n                [\"osinfo\", \"architectures\", \"min_hwe_kernels\"]);\n        });\n\n        var page_managers;\n        if($location.path().indexOf('/controller') !== -1) {\n            $scope.nodesManager = ControllersManager;\n            page_managers = [ControllersManager, ScriptsManager];\n            $scope.isController = true;\n            $scope.isDevice = false;\n            $scope.type_name = 'controller';\n            $scope.type_name_title = 'Controller';\n            $rootScope.page = 'controllers';\n        } else if($location.path().indexOf('/device') !== -1) {\n            $scope.nodesManager = DevicesManager;\n            page_managers = [DevicesManager];\n            $scope.isController = false;\n            $scope.isDevice = true;\n            $scope.type_name = 'device';\n            $scope.type_name_title = 'Device';\n            $rootScope.page = 'devices';\n        } else {\n            $scope.nodesManager = MachinesManager;\n            page_managers = [MachinesManager, ScriptsManager];\n            $scope.isController = false;\n            $scope.isDevice = false;\n            $scope.type_name = 'machine';\n            $scope.type_name_title = 'Machine';\n            $rootScope.page = 'machines';\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            ZonesManager,\n            GeneralManager,\n            UsersManager,\n            TagsManager,\n            DomainsManager,\n            ServicesManager,\n            ResourcePoolsManager,\n        ].concat(page_managers)).then(function() {\n            // Possibly redirected from another controller that already had\n            // this node set to active. Only call setActiveItem if not already\n            // the activeItem.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n                activeNode = $scope.nodesManager.getActiveItem();\n            }\n            if($scope.isDevice) {\n                $scope.ip_assignment = activeNode.ip_assignment;\n            }\n        });\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Networking Controller\n */\n\n// Filter that is specific to the NodeNetworkingController. Filters the\n// list of VLANs to be only those that are unused by the interface.\nangular.module('MAAS').filter('filterByUnusedForInterface', function() {\n    return function(vlans, nic, originalInterfaces) {\n        var filtered = [];\n        if(!angular.isObject(nic) ||\n            !angular.isObject(originalInterfaces)) {\n            return filtered;\n        }\n        var usedVLANs = [];\n        angular.forEach(originalInterfaces, function(inter) {\n            if(inter.type === \"vlan\") {\n                var parent = inter.parents[0];\n                if(parent === nic.id) {\n                    usedVLANs.push(inter.vlan_id);\n                }\n            }\n        });\n        angular.forEach(vlans, function(vlan) {\n            var idx = usedVLANs.indexOf(vlan.id);\n            if(idx === -1) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Filters the\n// list of interfaces to not include the current parent interfaces being\n// bonded together.\nangular.module('MAAS').filter('removeInterfaceParents', function() {\n    return function(interfaces, childInterface, skip) {\n        if(skip || !angular.isObject(childInterface) ||\n            !angular.isArray(childInterface.parents)) {\n            return interfaces;\n        }\n        var filtered = [];\n        angular.forEach(interfaces, function(nic) {\n            var i, parent, found = false;\n            for(i = 0; i < childInterface.parents.length; i++) {\n                parent = childInterface.parents[i];\n                if(parent.id === nic.id && parent.link_id === nic.link_id) {\n                    found = true;\n                    break;\n                }\n            }\n            if(!found) {\n                filtered.push(nic);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Remove the default\n// VLAN if the interface is a VLAN interface.\nangular.module('MAAS').filter('removeDefaultVLANIfVLAN', function() {\n    return function(vlans, interfaceType) {\n        if(!angular.isString(interfaceType)) {\n            return vlans;\n        }\n        var filtered = [];\n        angular.forEach(vlans, function(vlan) {\n            if(interfaceType !== \"vlan\") {\n                filtered.push(vlan);\n            } else if(vlan.vid !== 0) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Only provide the\n// available modes for that interface type.\nangular.module('MAAS').filter('filterLinkModes', function() {\n    return function(modes, nic) {\n        if(!angular.isObject(nic)) {\n            return modes;\n        }\n        var filtered = [];\n\n        // If this is not a $maasForm, make it work like one.\n        // We need to use getValue() to access attributes, because each\n        // type of maas-obj-form gets to define how values come out.\n        if(!angular.isFunction(nic.getValue)) {\n            nic.getValue = function(name) {\n                return this[name];\n            };\n        }\n\n        if(!angular.isObject(nic.getValue('subnet'))) {\n            // No subnet is configure so the only allowed mode\n            // is 'link_up'.\n            angular.forEach(modes, function(mode) {\n                if(mode.mode === \"link_up\") {\n                    filtered.push(mode);\n                }\n            });\n        } else {\n            // Don't add LINK_UP if more than one link exists or\n            // if the interface is an alias.\n            var links = nic.getValue('links');\n            var nicType = nic.getValue('type');\n            var allowLinkUp = (\n                (angular.isObject(links) && links.length > 1) ||\n                (nicType === \"alias\"));\n            angular.forEach(modes, function(mode) {\n                if(allowLinkUp && mode.mode === \"link_up\") {\n                    return;\n                }\n                // Can't run DHCP twice on one NIC.\n                if(nicType === \"alias\" && mode.mode === \"dhcp\") {\n                    return;\n                }\n                filtered.push(mode);\n            });\n        }\n        return filtered;\n    };\n});\n\n\nangular.module('MAAS').controller('NodeNetworkingController', [\n    '$scope', '$filter', 'FabricsManager', 'VLANsManager', 'SubnetsManager',\n    'MachinesManager', 'ControllersManager', 'DevicesManager',\n    'GeneralManager', 'UsersManager',\n    'ManagerHelperService', 'ValidationService', 'JSONService',\n    function(\n        $scope, $filter, FabricsManager, VLANsManager, SubnetsManager,\n        MachinesManager, ControllersManager, DevicesManager,\n        GeneralManager, UsersManager,\n        ManagerHelperService, ValidationService, JSONService) {\n\n        // Different interface types.\n        var INTERFACE_TYPE = {\n            PHYSICAL: \"physical\",\n            BOND: \"bond\",\n            BRIDGE: \"bridge\",\n            VLAN: \"vlan\",\n            ALIAS: \"alias\"\n        };\n        var INTERFACE_TYPE_TEXTS = {\n            \"physical\": \"Physical\",\n            \"bond\": \"Bond\",\n            \"bridge\": \"Bridge\",\n            \"vlan\": \"VLAN\",\n            \"alias\": \"Alias\"\n        };\n\n        // Different link modes for an interface.\n        var LINK_MODE = {\n            AUTO: \"auto\",\n            STATIC: \"static\",\n            DHCP: \"dhcp\",\n            LINK_UP: \"link_up\"\n        };\n        var LINK_MODE_TEXTS = {\n            \"auto\": \"Auto assign\",\n            \"static\": \"Static assign\",\n            \"dhcp\": \"DHCP\",\n            \"link_up\": \"Unconfigured\"\n        };\n\n        // Different selection modes.\n        var SELECTION_MODE = {\n            NONE: null,\n            SINGLE: \"single\",\n            MULTI: \"multi\",\n            DELETE: \"delete\",\n            ADD: \"add\",\n            CREATE_BOND: \"create-bond\",\n            CREATE_BRIDGE: \"create-bridge\",\n            CREATE_PHYSICAL: \"create-physical\",\n            EDIT: \"edit\"\n        };\n\n        var IP_ASSIGNMENT = {\n            DYNAMIC: \"dynamic\",\n            EXTERNAL: \"external\",\n            STATIC: \"static\"\n        };\n\n        // Device ip assignment options.\n        $scope.ipAssignments = [\n            {\n                name: IP_ASSIGNMENT.EXTERNAL,\n                text: \"External\"\n            },\n            {\n                name: IP_ASSIGNMENT.DYNAMIC,\n                text: \"Dynamic\"\n            },\n            {\n                name: IP_ASSIGNMENT.STATIC,\n                text: \"Static\"\n            }\n        ];\n\n        // Set the initial values for this scope.\n        $scope.loaded = false;\n        $scope.nodeHasLoaded = false;\n        $scope.managersHaveLoaded = false;\n        $scope.tableInfo = {column: 'name'};\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.vlans = VLANsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.interfaces = [];\n        $scope.interfaceLinksMap = {};\n        $scope.interfaceErrorsByLinkId = {};\n        $scope.originalInterfaces = {};\n        $scope.selectedInterfaces = [];\n        $scope.selectedMode = null;\n        $scope.newInterface = {};\n        $scope.newBondInterface = {};\n        $scope.newBridgeInterface = {};\n        $scope.editInterface = null;\n        $scope.bondOptions = GeneralManager.getData(\"bond_options\");\n        $scope.modes = [\n            {\n                mode: LINK_MODE.AUTO,\n                text: LINK_MODE_TEXTS[LINK_MODE.AUTO]\n            },\n            {\n                mode: LINK_MODE.STATIC,\n                text: LINK_MODE_TEXTS[LINK_MODE.STATIC]\n            },\n            {\n                mode: LINK_MODE.DHCP,\n                text: LINK_MODE_TEXTS[LINK_MODE.DHCP]\n            },\n            {\n                mode: LINK_MODE.LINK_UP,\n                text: LINK_MODE_TEXTS[LINK_MODE.LINK_UP]\n            }\n        ];\n\n        // Sets loaded to true if both the node has been loaded at the\n        // other required managers for this scope have been loaded.\n        function updateLoaded() {\n            $scope.loaded = $scope.nodeHasLoaded && $scope.managersHaveLoaded;\n            if($scope.loaded) {\n                updateInterfaces();\n            }\n        }\n\n        // Update the list of interfaces for the node. For each link on the\n        // interface, the interface is duplicated in the list to make render\n        // in a data-ng-repeat easier.\n        function updateInterfaces() {\n            $scope.originalInterfaces = {};\n            angular.forEach($scope.node.interfaces, function(nic) {\n                $scope.originalInterfaces[nic.id] = nic;\n            });\n\n            var interfaces = [];\n            // vlanTable contains data packaged for the 'Served VLANs' section,\n            // which is essentially Interface LEFT JOIN VLAN LEFT JOIN Subnet.\n            var vlanTable = [];\n            // Keep track of VLAN IDs we've processed.\n            var addedVlans = {};\n\n            angular.forEach($scope.node.interfaces, function(nic) {\n                // When a interface has a child that is a bond or bridge.\n                // Then that interface is not included in the interface list.\n                // Parent interface with a bond or bridge child can only have\n                // one child.\n                if(nic.children.length === 1) {\n                    var child = $scope.originalInterfaces[nic.children[0]];\n                    if(child.type === INTERFACE_TYPE.BOND ||\n                       child.type === INTERFACE_TYPE.BRIDGE) {\n                        // This parent now has a bond or bridge for a child.\n                        // If this was the editInterface, then it needs to be\n                        // unset. We only need to check the \"id\" (not\n                        // the \"link_id\"), because if this interface did have\n                        // aliases they have now been removed.\n                        if(angular.isObject($scope.editInterface) &&\n                            $scope.editInterface.id === nic.id) {\n                            $scope.editInterface = null;\n                            $scope.selectedMode = SELECTION_MODE.NONE;\n                        }\n                        return;\n                    }\n                }\n\n                // When the interface is a bond or a bridge, place the children\n                // as members for that interface.\n                if(nic.type === INTERFACE_TYPE.BOND ||\n                   nic.type === INTERFACE_TYPE.BRIDGE) {\n                    nic.members = [];\n                    angular.forEach(nic.parents, function(parent) {\n                        nic.members.push(\n                            angular.copy($scope.originalInterfaces[parent]));\n                    });\n                }\n\n                // Format the tags when they have not already been formatted.\n                if(angular.isArray(nic.tags) &&\n                    nic.tags.length > 0 &&\n                    !angular.isString(nic.tags[0].text)) {\n                    nic.tags = formatTags(nic.tags);\n                }\n\n                nic.vlan = VLANsManager.getItemFromList(nic.vlan_id);\n                if(angular.isObject(nic.vlan)) {\n                    nic.fabric = FabricsManager.getItemFromList(\n                            nic.vlan.fabric);\n\n                    // Build the vlanTable for controller detail page.\n                    if ($scope.$parent.isController) {\n                        // Skip duplicate VLANs (by id, they can share names).\n                        if(!(Object.prototype.hasOwnProperty.call(\n                                addedVlans, nic.vlan.id))) {\n                            addedVlans[nic.vlan.id] = true;\n                            var vlanRecord = {\n                                \"fabric\": nic.fabric,\n                                \"vlan\": nic.vlan,\n                                \"subnets\": $filter('filter')(\n                                    $scope.subnets, {vlan:nic.vlan.id}, true),\n                                \"primary_rack\": null,\n                                \"secondary_rack\": null,\n                                \"sort_key\": nic.fabric.name + \"|\" +\n                                    $scope.getVLANText(nic.vlan)\n                            };\n                            if(nic.vlan.primary_rack) {\n                                vlanRecord.primary_rack =\n                                    ControllersManager.getItemFromList(\n                                        nic.vlan.primary_rack);\n                            }\n                            if(nic.vlan.secondary_rack) {\n                                vlanRecord.secondary_rack =\n                                    ControllersManager.getItemFromList(\n                                        nic.vlan.secondary_rack);\n                            }\n                            vlanTable.push(vlanRecord);\n                        }\n                        // Sort the table by (VLANText, fabric.name).\n                        vlanTable.sort(function(a, b) {\n                            return a.sort_key.localeCompare(b.sort_key);\n                        });\n                    }\n                }\n\n                // Update the interface based on its links or duplicate the\n                // interface if it has multiple links.\n                if(nic.links.length === 0) {\n                    // No links on this interface. The interface is either\n                    // disabled or has no links (which means the interface\n                    // is in LINK_UP mode).\n                    nic.link_id = -1;\n                    nic.subnet = null;\n                    nic.mode = LINK_MODE.LINK_UP;\n                    nic.ip_address = \"\";\n                    interfaces.push(nic);\n                } else {\n                    var idx = 0;\n                    angular.forEach(nic.links, function(link) {\n                        var nic_copy = angular.copy(nic);\n                        nic_copy.link_id = link.id;\n                        nic_copy.subnet = SubnetsManager.getItemFromList(\n                            link.subnet_id);\n                        nic_copy.mode = link.mode;\n                        nic_copy.ip_address = link.ip_address;\n                        if(angular.isUndefined(nic_copy.ip_address)) {\n                            nic_copy.ip_address = \"\";\n                        }\n                        // We don't want to deep copy the VLAN and fabric\n                        // object so we set those back to the original.\n                        nic_copy.vlan = nic.vlan;\n                        nic_copy.fabric = nic.fabric;\n                        if(idx > 0) {\n                            // Each extra link is an alais on the original\n                            // interface.\n                            nic_copy.type = INTERFACE_TYPE.ALIAS;\n                            nic_copy.name += \":\" + idx;\n                        }\n                        idx++;\n                        interfaces.push(nic_copy);\n                    });\n                }\n            });\n\n            // Update the scopes interfaces.\n            $scope.interfaces = interfaces;\n            $scope.vlanTable = vlanTable;\n\n            // Update the scope interface links mapping.\n            $scope.interfaceLinksMap = {};\n            angular.forEach($scope.interfaces, function(nic) {\n                var linkMaps = $scope.interfaceLinksMap[nic.id];\n                if(angular.isUndefined(linkMaps)) {\n                    linkMaps = {};\n                    $scope.interfaceLinksMap[nic.id] = linkMaps;\n                }\n                linkMaps[nic.link_id] = nic;\n            });\n\n            // Clear the editInterface if it no longer exists in the\n            // interfaceLinksMap.\n            if(angular.isObject($scope.editInterface)) {\n                var links = $scope.interfaceLinksMap[$scope.editInterface.id];\n                if(angular.isUndefined(links)) {\n                    $scope.editInterface = null;\n                    $scope.selectedMode = SELECTION_MODE.NONE;\n                } else {\n                    var link = links[$scope.editInterface.link_id];\n                    if(angular.isUndefined(link)) {\n                        $scope.editInterface = null;\n                        $scope.selectedMode = SELECTION_MODE.NONE;\n                    }\n                }\n            }\n\n            // Update newInterface.parent if it has changed.\n            updateNewInterface();\n        }\n\n        // Return the original link object for the given interface.\n        function mapNICToOriginalLink(nic_id, link_id) {\n            var originalInteface = $scope.originalInterfaces[nic_id];\n            if(angular.isObject(originalInteface)) {\n                var i, link = null;\n                for(i = 0; i < originalInteface.links.length; i++) {\n                    link = originalInteface.links[i];\n                    if(link.id === link_id) {\n                        break;\n                    }\n                }\n                return link;\n            } else {\n                return null;\n            }\n        }\n\n        // Leave single selection mode.\n        function leaveSingleSelectionMode() {\n            if($scope.selectedMode === SELECTION_MODE.SINGLE ||\n                $scope.selectedMode === SELECTION_MODE.ADD ||\n                $scope.selectedMode === SELECTION_MODE.DELETE) {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            }\n        }\n\n        // Update the new interface since the interfaces list has\n        // been reloaded.\n        function updateNewInterface() {\n            if(angular.isObject($scope.newInterface.parent)) {\n                var parentId = $scope.newInterface.parent.id;\n                var linkId = $scope.newInterface.parent.link_id;\n                var links = $scope.interfaceLinksMap[parentId];\n                if(angular.isObject(links)) {\n                    var newParent = links[linkId];\n                    if(angular.isObject(newParent)) {\n                        $scope.newInterface.parent = newParent;\n\n                        var iType = $scope.newInterface.type;\n                        var isAlias = iType === INTERFACE_TYPE.ALIAS;\n                        var isVLAN = iType === INTERFACE_TYPE.VLAN;\n                        var canAddAlias = $scope.canAddAlias(newParent);\n                        var canAddVLAN = $scope.canAddVLAN(newParent);\n                        if(!canAddAlias && !canAddVLAN) {\n                            // Cannot do any adding now.\n                            $scope.newInterface = {};\n                            leaveSingleSelectionMode();\n                        } else {\n                            if(isAlias && !canAddAlias && canAddVLAN) {\n                                $scope.newInterface.type = \"vlan\";\n                                $scope.addTypeChanged();\n                            } else if(isVLAN && !canAddVLAN && canAddAlias) {\n                                $scope.newInterface.type = \"alias\";\n                                $scope.addTypeChanged();\n                            }\n                        }\n                        return;\n                    }\n                }\n\n                // Parent no longer exists. Exit the single selection modes.\n                $scope.newInterface = {};\n                leaveSingleSelectionMode();\n            }\n        }\n\n        // Return the default VLAN for a fabric.\n        function getDefaultVLAN(fabric) {\n            return VLANsManager.getItemFromList(fabric.default_vlan_id);\n        }\n\n        // Return list of unused VLANs for an interface. Also remove the\n        // ignoreVLANs from the returned list.\n        function getUnusedVLANs(nic, ignoreVLANs) {\n            var vlans = $filter('removeDefaultVLAN')($scope.vlans);\n            vlans = $filter('filterByFabric')(vlans, nic.fabric);\n            vlans = $filter('filterByUnusedForInterface')(\n                vlans, nic, $scope.originalInterfaces);\n\n            // Remove the VLAN's that should be ignored when getting the unused\n            // VLANs. This is done to help the selection of the next default.\n            if(angular.isUndefined(ignoreVLANs)) {\n                ignoreVLANs = [];\n            }\n            angular.forEach(ignoreVLANs, function(vlan) {\n                var i;\n                for(i = 0; i < vlans.length; i++) {\n                    if(vlans[i].id === vlan.id) {\n                        vlans.splice(i, 1);\n                        break;\n                    }\n                }\n            });\n            return vlans;\n        }\n\n        // Return the currently selected interface objects.\n        function getSelectedInterfaces() {\n            var interfaces = [];\n            angular.forEach($scope.selectedInterfaces, function(key) {\n                var splitKey = key.split('/');\n                var links = $scope.interfaceLinksMap[splitKey[0]];\n                if(angular.isObject(links)) {\n                    var nic = links[splitKey[1]];\n                    if(angular.isObject(nic)) {\n                        interfaces.push(nic);\n                    }\n                }\n            });\n            return interfaces;\n        }\n\n        // Get the next available name.\n        function getNextName(prefix) {\n            var idx = 0;\n            angular.forEach($scope.originalInterfaces, function(nic) {\n                if(nic.name === prefix + idx) {\n                    idx++;\n                }\n            });\n            return prefix + idx;\n        }\n\n        // Return the tags formatted for ngTagInput.\n        function formatTags(tags) {\n            var formatted = [];\n            angular.forEach(tags, function(tag) {\n                formatted.push({ text: tag });\n            });\n            return formatted;\n        }\n\n        // Called by $parent when the node has been loaded.\n        $scope.nodeLoaded = function() {\n            $scope.$watch(\"node.interfaces\", updateInterfaces);\n            // Watch subnets for the served VLANs section.\n            if ($scope.$parent.isController) {\n                $scope.$watch(\"subnets\", updateInterfaces, true);\n            }\n            $scope.nodeHasLoaded = true;\n            updateLoaded();\n        };\n\n        // Return true if only the name or mac address of an interface can\n        // be edited.\n        $scope.isLimitedEditingAllowed = function(nic) {\n            if (!$scope.isSuperUser()) {\n                // If the user is not the superuser, pretend it's not Ready.\n                return false;\n            }\n            if ($scope.$parent.isController || $scope.$parent.isDevice) {\n                // Controllers and Devices are never in limited mode.\n                return false;\n            }\n            return (\n                angular.isObject($scope.node) &&\n                $scope.node.status === \"Deployed\" &&\n                nic.type !== \"vlan\");\n        };\n\n        // Return true if the networking information cannot be edited.\n        // (it can't be changed when the node is in any state other\n        // than Ready or Broken and the user is not a superuser)\n        $scope.isAllNetworkingDisabled = function() {\n            if (!$scope.isSuperUser() && !$scope.$parent.isDevice) {\n                // If the user is not a superuser and not looking at a\n                // device, disable the networking panel.\n                return true;\n            }\n            if ($scope.$parent.isController || $scope.$parent.isDevice) {\n                // Never disable the full networking panel when its a\n                // Controller or Device.\n                return false;\n            }\n            if (angular.isObject($scope.node) &&\n                    [\"New\", \"Ready\", \"Allocated\", \"Broken\"].indexOf(\n                        $scope.node.status) === -1) {\n                // If a non-controller node is not ready allocated, or broken,\n                // disable networking panel.\n                return true;\n            }\n            // User must be a superuser and the node must be\n            // either ready or broken. Enable it.\n            return false;\n        };\n\n        // Return true if the interface is the boot interface or has a parent\n        // that is the boot interface.\n        $scope.isBootInterface = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            }\n\n            if(nic.is_boot && nic.type !== INTERFACE_TYPE.ALIAS) {\n                return true;\n            } else if(nic.type === INTERFACE_TYPE.BOND ||\n                      nic.type === INTERFACE_TYPE.BRIDGE) {\n                var i;\n                for(i = 0; i < nic.members.length; i++) {\n                    if(nic.members[i].is_boot) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Get the text for the type of the interface.\n        $scope.getInterfaceTypeText = function(nic) {\n            var text = INTERFACE_TYPE_TEXTS[nic.type];\n            if(angular.isDefined(text)) {\n                return text;\n            } else {\n                return nic.type;\n            }\n        };\n\n        // Get the text for the link mode of the interface.\n        $scope.getLinkModeText = function(nic) {\n            var text = LINK_MODE_TEXTS[nic.mode];\n            if(angular.isDefined(text)) {\n                return text;\n            } else {\n                return nic.mode;\n            }\n        };\n\n        // Get the text to display in the VLAN dropdown.\n        $scope.getVLANText = function(vlan) {\n            if(!angular.isObject(vlan)) {\n                return \"\";\n            }\n\n            if(vlan.vid === 0) {\n                return \"untagged\";\n            } else if(angular.isString(vlan.name) && vlan.name.length > 0) {\n                return vlan.vid + \" (\" + vlan.name + \")\";\n            } else {\n                return vlan.vid;\n            }\n        };\n\n        // Get the text to display in the subnet dropdown.\n        $scope.getSubnetText = function(subnet) {\n            if(!angular.isObject(subnet)) {\n                return \"Unconfigured\";\n            } else if(angular.isString(subnet.name) &&\n                subnet.name.length > 0 &&\n                subnet.cidr !== subnet.name) {\n                return subnet.cidr + \" (\" + subnet.name + \")\";\n            } else {\n                return subnet.cidr;\n            }\n        };\n\n        // Get the subnet from its ID.\n        $scope.getSubnet = function(subnetId) {\n            return SubnetsManager.getItemFromList(subnetId);\n        };\n\n        // Return True if the interface name that the user typed is invalid.\n        $scope.isInterfaceNameInvalid = function(nic) {\n            if(!angular.isObject(nic) || !nic.hasOwnProperty('name') ||\n                    nic.name.length === 0) {\n                return true;\n            } else if(angular.isArray($scope.node.interfaces)) {\n                var i;\n                for(i = 0; i < $scope.node.interfaces.length; i++) {\n                    var otherNic = $scope.node.interfaces[i];\n                    if(otherNic.name === nic.name && otherNic.id !== nic.id) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return True if the link mode select should be disabled.\n        $scope.isLinkModeDisabled = function(nic) {\n            // This is only disabled when a subnet has not been selected.\n            if(angular.isFunction(nic.getValue)) {\n                return !angular.isObject(nic.getValue('subnet'));\n            } else {\n                return !angular.isObject(nic.subnet);\n            }\n        };\n\n        // Return the interface errors.\n        $scope.getInterfaceError = function(nic) {\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                return $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            return null;\n        };\n\n        // Return True if the interface IP address that the user typed is\n        // invalid.\n        $scope.isIPAddressInvalid = function(nic) {\n            if(angular.isString(nic.ip_address) && nic.mode === 'static') {\n                return (\n                    !ValidationService.validateIP(nic.ip_address) ||\n                    !ValidationService.validateIPInNetwork(\n                        nic.ip_address, nic.subnet.cidr));\n            } else {\n                return false;\n            }\n        };\n\n        // Return unique key for the interface.\n        $scope.getUniqueKey = function(nic) {\n            return nic.id + \"/\" + nic.link_id;\n        };\n\n        // Toggle selection of the interface.\n        $scope.toggleInterfaceSelect = function(nic) {\n            var key = $scope.getUniqueKey(nic);\n            var idx = $scope.selectedInterfaces.indexOf(key);\n            if(idx > -1) {\n                $scope.selectedInterfaces.splice(idx, 1);\n            } else {\n                $scope.selectedInterfaces.push(key);\n            }\n\n            if($scope.selectedInterfaces.length > 1) {\n                if($scope.selectedMode !== SELECTION_MODE.BOND) {\n                    $scope.selectedMode = SELECTION_MODE.MULTI;\n                }\n            } else if($scope.selectedInterfaces.length === 1) {\n                $scope.selectedMode = SELECTION_MODE.SINGLE;\n            } else {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            }\n        };\n\n        // Return true when the interface is selected.\n        $scope.isInterfaceSelected = function(nic) {\n            return $scope.selectedInterfaces.indexOf(\n                $scope.getUniqueKey(nic)) > -1;\n        };\n\n        // Returns true if the interface is not selected\n        $scope.cannotEditInterface = function(nic) {\n            if ($scope.selectedMode === SELECTION_MODE.NONE) {\n                return false;\n            } else if (\n                  $scope.selectedMode !== SELECTION_MODE.MULTI &&\n                  $scope.isInterfaceSelected(nic)) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return true if in editing mode for the interface.\n        $scope.isEditing = function(nic) {\n            if($scope.selectedMode !== SELECTION_MODE.EDIT) {\n                return false;\n            } else {\n                return $scope.editInterface.id === nic.id;\n            }\n        };\n\n        // Start editing this interface.\n        $scope.edit = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            $scope.selectedMode = SELECTION_MODE.EDIT;\n            if($scope.$parent.isDevice) {\n                $scope.editInterface = {\n                    id: nic.id,\n                    name: nic.name,\n                    mac_address: nic.mac_address,\n                    tags: nic.tags.map(function(tag) { return tag.text; }),\n                    subnet: nic.subnet,\n                    ip_address: nic.ip_address,\n                    ip_assignment: nic.ip_assignment,\n                    link_id: nic.link_id\n                };\n                if(nic.subnet !== undefined && nic.subnet !== null) {\n                    $scope.editInterface.defaultSubnet = nic.subnet;\n                } else {\n                    $scope.editInterface.defaultSubnet = $scope.subnets[0];\n                }\n            } else {\n                $scope.editInterface = {\n                    id: nic.id,\n                    name: nic.name,\n                    mac_address: nic.mac_address,\n                    tags: nic.tags.map(function(tag) { return tag.text; }),\n                    fabric: nic.fabric,\n                    vlan: nic.vlan,\n                    subnet: nic.subnet,\n                    mode: nic.mode,\n                    ip_address: nic.ip_address,\n                    link_id: nic.link_id\n                };\n            }\n        };\n\n        // Called when the fabric is changed.\n        $scope.fabricChanged = function(nic) {\n            // Update the VLAN on the node to be the default VLAN for that\n            // fabric. The first VLAN for the fabric is the default.\n            if(nic.fabric !== null) {\n                nic.vlan = getDefaultVLAN(nic.fabric);\n            } else {\n                nic.vlan = null;\n            }\n            $scope.vlanChanged(nic);\n        };\n\n        // Called when the fabric is changed in a maas-obj-form.\n        $scope.fabricChangedForm = function(key, value, form) {\n            var vlan;\n            if(value !== null) {\n                vlan = getDefaultVLAN(value);\n            } else {\n                vlan = null;\n            }\n            form.updateValue('vlan', vlan);\n            $scope.vlanChangedForm('vlan', vlan, form);\n        };\n\n        // Called when the VLAN is changed.\n        $scope.vlanChanged = function(nic) {\n            nic.subnet = null;\n            $scope.subnetChanged(nic);\n        };\n\n        // Called when the VLAN is changed on a maas-obj-form\n        $scope.vlanChangedForm = function(key, value, form) {\n            form.updateValue('subnet', null);\n            $scope.subnetChangedForm('subnet', null, form);\n        };\n\n        // Called when the subnet is changed.\n        $scope.subnetChanged = function(nic) {\n            if(!angular.isObject(nic.subnet)) {\n                // Set to 'Unconfigured' so the link mode should be set to\n                // 'link_up'.\n                nic.mode = LINK_MODE.LINK_UP;\n            }\n            if ($scope.$parent.isDevice) {\n                nic.ip_address = null;\n            }\n            $scope.modeChanged(nic);\n        };\n\n        // Called when the subnet is changed.\n        $scope.subnetChangedForm = function(key, value, form) {\n            if(!angular.isObject(value)) {\n                // Set to 'Unconfigured' so the link mode should be set to\n                // 'link_up'.\n                form.updateValue('mode', LINK_MODE.LINK_UP);\n            }\n            mode = form.getValue('mode');\n            form.updateValue('ip_address', null);\n            $scope.modeChangedForm('mode', mode, form);\n        };\n\n        // Called when the mode is changed.\n        $scope.modeChanged = function(nic) {\n            // Clear the IP address when the mode is changed.\n            nic.ip_address = \"\";\n            if(nic.mode === 'static') {\n                var originalLink = mapNICToOriginalLink(nic.id, nic.link_id);\n                if(angular.isObject(originalLink) &&\n                    nic.subnet.id === originalLink.subnet_id) {\n                    // Set the original IP address if same subnet.\n                    nic.ip_address = originalLink.ip_address;\n                }\n            }\n        };\n\n        // Called when the mode is changed on a maas-obj-form.\n        $scope.modeChangedForm = function(key, value, form) {\n            // Clear the IP address when the mode is changed.\n            form.updateValue('ip_address', \"\");\n            if(value === 'static') {\n                var originalLink = mapNICToOriginalLink(\n                  form.getValue('id'), form.getValue('link_id'));\n                if(angular.isObject(originalLink) &&\n                    form.getValue('subnet').id === originalLink.subnet_id) {\n                    // Set the original IP address if same subnet.\n                    form.updateValue('ip_address', originalLink.ip_address);\n                }\n            }\n        };\n\n        // Called to cancel edit mode.\n        $scope.editCancel = function(nic) {\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n            $scope.editInterface = null;\n        };\n\n        // Preprocess things for updateInterfaceForm.\n        $scope.preProcessInterface = function(nic) {\n            var params = angular.copy(nic);\n\n            delete params.id;\n            params.system_id = $scope.node.system_id;\n            params.interface_id = nic.id;\n\n            // we need IDs not objects.\n            if(nic.fabric !== undefined && nic.fabric !== null) {\n                params.fabric = nic.fabric.id;\n            } else {\n                params.fabric = null;\n            }\n            if(nic.vlan !== undefined && nic.vlan !== null) {\n                params.vlan = nic.vlan.id;\n            } else {\n                params.vlan = null;\n            }\n            if(nic.subnet !== undefined && nic.subnet !== null) {\n                params.subnet = params.subnet.id;\n            } else {\n                delete params.subnet;\n            }\n\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            } else {\n                delete params.link_id;\n            }\n            if((nic.mode === LINK_MODE.STATIC ||\n                nic.ip_assignment !== IP_ASSIGNMENT.DYNAMIC) &&\n               angular.isString(nic.ip_address) &&\n               nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            } else {\n                delete params.ip_address;\n            }\n            return params;\n        };\n\n        // Save the following interface on the node.\n        $scope.saveInterface = function(nic) {\n            var params;\n            if($scope.$parent.isDevice) {\n                params = {\n                    \"name\": nic.name,\n                    \"mac_address\": nic.mac_address,\n                    \"ip_assignment\": nic.ip_assignment,\n                    \"ip_address\": nic.ip_address\n                };\n            } else {\n                params = {\n                    \"name\": nic.name,\n                    \"mac_address\": nic.mac_address,\n                    \"mode\": nic.mode,\n                    \"tags\": nic.tags.map(\n                        function(tag) { return tag.text; })\n                };\n            }\n            if(nic.fabric !== undefined && nic.fabric !== null) {\n                params.fabric = nic.fabric.id;\n            } else {\n                params.fabric = null;\n            }\n            if(nic.vlan !== undefined && nic.vlan !== null) {\n                params.vlan = nic.vlan.id;\n            } else {\n                params.vlan = null;\n            }\n            if (nic.subnet !== undefined && nic.subnet !== null) {\n                params.subnet = nic.subnet.id;\n            } else {\n                params.subnet = null;\n            }\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            if(angular.isString(nic.ip_address) && nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            }\n            return $scope.$parent.nodesManager.updateInterface(\n                $scope.node, nic.id, params).then(null, function(error) {\n                    // XXX blake_r: Just log the error in the console, but\n                    // we need to expose this as a better message to the\n                    // user.\n                    console.log(error);\n\n                    // Update the interfaces so it is back to the way it\n                    // was before the user changed it.\n                    updateInterfaces();\n                });\n        };\n\n        // Save the following link on the node.\n        $scope.saveInterfaceLink = function(nic) {\n            var params = {\n                \"mode\": nic.mode\n            };\n            if($scope.$parent.isDevice) {\n                params.ip_assignment = nic.ip_assignment;\n            }\n            if(angular.isObject(nic.subnet)) {\n                params.subnet = nic.subnet.id;\n            }\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            if(nic.mode === LINK_MODE.STATIC &&\n                angular.isString(nic.ip_address) &&\n                nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            }\n            return $scope.$parent.nodesManager.linkSubnet(\n                $scope.node, nic.id, params).then(null, function(error) {\n                    console.log(error);\n                    if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                        $scope.interfaceErrorsByLinkId[nic.link_id] = error;\n                    }\n                    // Update the interfaces so it is back to the way it\n                    // was before the user changed it.\n                    updateInterfaces();\n                    throw error;\n                });\n        };\n\n        // Called to save the interface.\n        $scope.editSave = function(editInterface) {\n            $scope.editCancel();\n            return editInterface;\n        };\n\n        // Return true if the interface delete confirm is being shown.\n        $scope.isShowingDeleteConfirm = function() {\n            return $scope.selectedMode === SELECTION_MODE.DELETE;\n        };\n\n        // Return true if the interface add interface is being shown.\n        $scope.isShowingAdd = function() {\n            return $scope.selectedMode === SELECTION_MODE.ADD;\n        };\n\n        // Return true if either an alias or VLAN can be added.\n        $scope.canAddAliasOrVLAN = function(nic) {\n            if($scope.$parent.isController) {\n                return false;\n            } else if ($scope.isAllNetworkingDisabled()) {\n                return false;\n            } else {\n                return $scope.canAddAlias(nic) || $scope.canAddVLAN(nic);\n            }\n        };\n\n        // Return true if the alias can be added to interface.\n        $scope.canAddAlias = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            } else if(nic.type === INTERFACE_TYPE.ALIAS) {\n                return false;\n            } else if(nic.links.length === 0 ||\n                nic.links[0].mode === LINK_MODE.LINK_UP) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return true if the VLAN can be added to interface.\n        $scope.canAddVLAN = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            } else if(nic.type === INTERFACE_TYPE.ALIAS ||\n                nic.type === INTERFACE_TYPE.VLAN) {\n                return false;\n            }\n            var unusedVLANs = getUnusedVLANs(nic);\n            return unusedVLANs.length > 0;\n        };\n\n        // Return true if another VLAN can be added to this already being\n        // added interface.\n        $scope.canAddAnotherVLAN = function(nic) {\n            if(!$scope.canAddVLAN(nic)) {\n                return false;\n            }\n            var unusedVLANs = getUnusedVLANs(nic);\n            return unusedVLANs.length > 1;\n        };\n\n        // Return the text to use for the remove link and message.\n        $scope.getRemoveTypeText = function(nic) {\n            if(nic.type === INTERFACE_TYPE.PHYSICAL) {\n                return \"interface\";\n            } else if(nic.type === INTERFACE_TYPE.VLAN) {\n                return \"VLAN\";\n            } else {\n                return nic.type;\n            }\n        };\n\n        // Return true if the interface can be removed.\n        $scope.canBeRemoved = function() {\n            return (\n                !$scope.$parent.isController &&\n                !$scope.isAllNetworkingDisabled());\n        };\n\n        // Enter remove mode.\n        $scope.remove = function() {\n            $scope.selectedMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter remove by selecting the node first.\n        $scope.quickRemove = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            $scope.remove();\n        };\n\n        // Cancel the current mode go back to sinle selection mode.\n        $scope.cancel = function() {\n            $scope.newInterface = {};\n            $scope.newBondInterface = {};\n            $scope.newBridgeInterface = {};\n            if($scope.selectedMode === SELECTION_MODE.CREATE_BOND) {\n                $scope.selectedMode = SELECTION_MODE.MULTI;\n            } else if($scope.selectedMode === SELECTION_MODE.CREATE_PHYSICAL) {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            } else {\n                $scope.selectedMode = SELECTION_MODE.SINGLE;\n            }\n        };\n\n        // Confirm the removal of interface.\n        $scope.confirmRemove = function(nic) {\n            $scope.selectedMode = SELECTION_MODE.NONE;\n            $scope.selectedInterfaces = [];\n            if(nic.type !== INTERFACE_TYPE.ALIAS) {\n                $scope.$parent.nodesManager.deleteInterface(\n                    $scope.node, nic.id);\n            } else {\n                $scope.$parent.nodesManager.unlinkSubnet(\n                    $scope.node, nic.id, nic.link_id);\n            }\n\n            // Remove the interface from available interfaces\n            var idx = $scope.interfaces.indexOf(nic);\n            if(idx > -1) {\n                $scope.interfaces.splice(idx, 1);\n            }\n        };\n\n        // Enter add mode.\n        $scope.add = function(type, nic) {\n            // When this is called right after another VLAN was just added, we\n            // remove its used VLAN from the available list.\n            var ignoreVLANs = [];\n            if(angular.isObject($scope.newInterface.vlan)) {\n                ignoreVLANs.push($scope.newInterface.vlan);\n            }\n\n            // Get the default VLAN for the new interface.\n            var vlans = getUnusedVLANs(nic, ignoreVLANs);\n            var defaultVLAN = null;\n            if(vlans.length > 0) {\n                defaultVLAN = vlans[0];\n            }\n            var defaultSubnet = null;\n            var defaultMode = LINK_MODE.LINK_UP;\n\n            // Alias used defaults based from its parent.\n            if(type === INTERFACE_TYPE.ALIAS) {\n                defaultVLAN = nic.vlan;\n                defaultSubnet = $filter('filter')(\n                    $scope.subnets, {vlan:defaultVLAN.id}, true)[0];\n                defaultMode = LINK_MODE.AUTO;\n            }\n\n            // Setup the new interface and enter add mode.\n            $scope.newInterface = {\n                type: type,\n                vlan: defaultVLAN,\n                subnet: defaultSubnet,\n                mode: defaultMode,\n                parent: nic,\n                tags: []\n            };\n            $scope.selectedMode = SELECTION_MODE.ADD;\n        };\n\n        // Quickly enter add by selecting the node first.\n        $scope.quickAdd = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            var type = 'alias';\n            if(!$scope.canAddAlias(nic)) {\n                type = 'vlan';\n            }\n            $scope.add(type, nic);\n        };\n\n        // Return the name of the interface being added.\n        $scope.getAddName = function() {\n            if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                var aliasIdx = $scope.newInterface.parent.links.length;\n                return $scope.newInterface.parent.name + \":\" + aliasIdx;\n            } else if ($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                return (\n                    $scope.newInterface.parent.name + \".\" +\n                    $scope.newInterface.vlan.vid);\n            }\n        };\n\n        // Called when the type of interface is changed.\n        $scope.addTypeChanged = function() {\n            if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                $scope.newInterface.vlan = $scope.newInterface.parent.vlan;\n                $scope.newInterface.subnet = $filter('filter')(\n                    $scope.subnets,\n                    {vlan:$scope.newInterface.vlan.id}, true)[0];\n                $scope.newInterface.mode = LINK_MODE.AUTO;\n            } else if($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                var vlans = getUnusedVLANs($scope.newInterface.parent);\n                $scope.newInterface.vlan = null;\n                if(vlans.length > 0) {\n                    $scope.newInterface.vlan = vlans[0];\n                }\n                $scope.newInterface.subnet = null;\n                $scope.newInterface.mode = LINK_MODE.LINK_UP;\n            }\n        };\n\n        // Perform the add action over the websocket.\n        $scope.addInterface = function(type) {\n            var nic;\n            if($scope.$parent.isDevice) {\n                nic = {\n                    id: $scope.newInterface.parent.id,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    ip_assignment: $scope.newInterface.ip_assignment,\n                    subnet: $scope.newInterface.subnet,\n                    ip_address: $scope.newInterface.ip_address\n                };\n                $scope.saveInterfaceLink(nic);\n            } else if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                // Add a link to the current interface.\n                nic = {\n                    id: $scope.newInterface.parent.id,\n                    mode: $scope.newInterface.mode,\n                    subnet: $scope.newInterface.subnet,\n                    ip_address: $scope.newInterface.ip_address\n                };\n                $scope.saveInterfaceLink(nic);\n            } else if($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                var params = {\n                    parent: $scope.newInterface.parent.id,\n                    vlan: $scope.newInterface.vlan.id,\n                    mode: $scope.newInterface.mode,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; })\n                };\n                if(angular.isObject($scope.newInterface.subnet)) {\n                    params.subnet = $scope.newInterface.subnet.id;\n                    params.ip_address = $scope.newInterface.ip_address;\n                }\n                $scope.$parent.nodesManager.createVLANInterface(\n                    $scope.node, params).then(null, function(error) {\n                        // Should do something better but for now just log\n                        // the error.\n                        console.log(error);\n                    });\n            }\n\n            // Add again based on the clicked option.\n            if(angular.isString(type)) {\n                $scope.add(type, $scope.newInterface.parent);\n            } else {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n                $scope.selectedInterfaces = [];\n                $scope.newInterface = {};\n            }\n        };\n\n        // Return true if the networking information cannot be edited\n        // or if this interface should be disabled in the list. Only\n        // returns true when in create bond mode.\n        $scope.isDisabled = function() {\n            if ($scope.isAllNetworkingDisabled()) {\n                return true;\n            } else {\n                return (\n                    $scope.selectedMode !== SELECTION_MODE.NONE &&\n                    $scope.selectedMode !== SELECTION_MODE.SINGLE &&\n                    $scope.selectedMode !== SELECTION_MODE.MULTI);\n            }\n        };\n\n        // Return true when a bond can be created based on the current\n        // selection. Only can be done if no aliases are selected and all\n        // selected interfaces are on the same VLAN.\n        $scope.canCreateBond = function() {\n            if($scope.selectedMode !== SELECTION_MODE.MULTI) {\n                return false;\n            }\n            var interfaces = getSelectedInterfaces();\n            var i, vlan;\n            for(i = 0; i < interfaces.length; i++) {\n                var nic = interfaces[i];\n                if(nic.type === INTERFACE_TYPE.ALIAS ||\n                    nic.type === INTERFACE_TYPE.BOND) {\n                    return false;\n                } else if(!angular.isObject(vlan)) {\n                    vlan = nic.vlan;\n                } else if(vlan !== nic.vlan) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        // Return true when the create bond view is being shown.\n        $scope.isShowingCreateBond = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_BOND;\n        };\n\n        // Show the create bond view.\n        $scope.showCreateBond = function() {\n            if($scope.selectedMode === SELECTION_MODE.MULTI &&\n                $scope.canCreateBond()) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_BOND;\n\n                var parents = getSelectedInterfaces();\n                $scope.newBondInterface = {\n                    name: getNextName(\"bond\"),\n                    tags: [],\n                    parents: parents,\n                    primary: parents[0],\n                    mac_address: \"\",\n                    mode: \"active-backup\",\n                    lacpRate: \"slow\",\n                    xmitHashPolicy: \"layer2\"\n                };\n            }\n        };\n\n        // Return true if the interface has a parent that is a boot interface.\n        $scope.hasBootInterface = function(nic) {\n            if(!angular.isArray(nic.parents)) {\n                return false;\n            }\n            var i;\n            for(i = 0; i < nic.parents.length; i++) {\n                if(nic.parents[i].is_boot) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return the MAC address that should be shown as a placeholder. This\n        // this is the MAC address of the primary interface.\n        $scope.getInterfacePlaceholderMACAddress = function(nic) {\n            if(!angular.isObject(nic.primary)) {\n                return \"\";\n            } else {\n                return nic.primary.mac_address;\n            }\n        };\n\n        // Return true if the user has inputed a value in the MAC address field\n        // but it is invalid.\n        $scope.isMACAddressInvalid = function(mac_address, invalidEmpty) {\n            if(angular.isUndefined(invalidEmpty)) {\n                invalidEmpty = false;\n            }\n            if(!angular.isString(mac_address) || mac_address === \"\") {\n                return invalidEmpty;\n            }\n            return !ValidationService.validateMAC(mac_address);\n        };\n\n        // Return true when the LACR rate selection should be shown.\n        $scope.showLACPRate = function() {\n            return $scope.newBondInterface.mode === \"802.3ad\";\n        };\n\n        // Return true when the XMIT hash policy should be shown.\n        $scope.showXMITHashPolicy = function() {\n            return (\n                $scope.newBondInterface.mode === \"balance-xor\" ||\n                $scope.newBondInterface.mode === \"802.3ad\" ||\n                $scope.newBondInterface.mode === \"balance-tlb\");\n        };\n\n        // Return true if cannot add the bond.\n        $scope.cannotAddBond = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newBondInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newBondInterface.mac_address));\n        };\n\n        // Actually add the bond.\n        $scope.addBond = function() {\n            if($scope.cannotAddBond()) {\n               return;\n            }\n\n            var parents = $scope.newBondInterface.parents.map(\n                function(nic) { return nic.id; });\n            var mac_address = $scope.newBondInterface.mac_address;\n            if(mac_address === \"\") {\n                mac_address = $scope.newBondInterface.primary.mac_address;\n            }\n            var vlan_id, vlan = $scope.newBondInterface.primary.vlan;\n            if(angular.isObject(vlan)) {\n                vlan_id = vlan.id;\n            } else {\n                vlan_id = null;\n            }\n            var params = {\n                name: $scope.newBondInterface.name,\n                mac_address: mac_address,\n                tags: $scope.newBondInterface.tags.map(\n                    function(tag) { return tag.text; }),\n                parents: parents,\n                vlan: vlan_id,\n                bond_mode: $scope.newBondInterface.mode,\n                bond_lacp_rate: $scope.newBondInterface.lacpRate,\n                bond_xmit_hash_policy: $scope.newBondInterface.xmitHashPolicy\n            };\n            $scope.$parent.nodesManager.createBondInterface(\n                $scope.node, params).then(null, function(error) {\n                    // Should do something better but for now just log\n                    // the error.\n                    console.log(error);\n                });\n\n            // Remove the parent interfaces so that they don't show up\n            // in the listing unti the new bond appears.\n            angular.forEach($scope.newBondInterface.parents, function(parent) {\n                var idx = $scope.interfaces.indexOf(parent);\n                if(idx > -1) {\n                    $scope.interfaces.splice(idx, 1);\n                }\n            });\n\n            // Clear the bond interface and reset the mode.\n            $scope.newBondInterface = {};\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n        };\n\n        // Return true when a bridge can be created based on the current\n        // selection. Only can be done if no aliases are selected and only\n        // one interface is selected.\n        $scope.canCreateBridge = function() {\n            if($scope.selectedMode !== SELECTION_MODE.SINGLE) {\n                return false;\n            }\n            var nic = getSelectedInterfaces()[0];\n            if(nic.type === INTERFACE_TYPE.ALIAS ||\n                nic.type === INTERFACE_TYPE.BRIDGE) {\n                return false;\n            }\n            return true;\n        };\n\n        // Return true when the create bridge view is being shown.\n        $scope.isShowingCreateBridge = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_BRIDGE;\n        };\n\n        // Show the create bridge view.\n        $scope.showCreateBridge = function() {\n            if($scope.selectedMode === SELECTION_MODE.SINGLE &&\n                $scope.canCreateBridge()) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_BRIDGE;\n\n                var parents = getSelectedInterfaces();\n                $scope.newBridgeInterface = {\n                    name: getNextName(\"br\"),\n                    tags: [],\n                    parents: parents,\n                    primary: parents[0],\n                    mac_address: \"\",\n                    bridge_stp: false,\n                    bridge_fd: 15\n                };\n            }\n        };\n\n        // Return true if cannot add the bridge.\n        $scope.cannotAddBridge = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newBridgeInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newBridgeInterface.mac_address));\n        };\n\n        // Actually add the bridge.\n        $scope.addBridge = function() {\n            if($scope.cannotAddBridge()) {\n               return;\n            }\n\n            var parents = [$scope.newBridgeInterface.primary.id];\n            var mac_address = $scope.newBridgeInterface.mac_address;\n            if(mac_address === \"\") {\n                mac_address = $scope.newBridgeInterface.primary.mac_address;\n            }\n            var params = {\n                name: $scope.newBridgeInterface.name,\n                mac_address: mac_address,\n                tags: $scope.newBridgeInterface.tags.map(\n                    function(tag) { return tag.text; }),\n                parents: parents,\n                vlan: $scope.newBridgeInterface.primary.vlan.id,\n                bridge_stp: $scope.newBridgeInterface.bridge_stp,\n                bridge_fd: $scope.newBridgeInterface.bridge_fd\n            };\n            $scope.$parent.nodesManager.createBridgeInterface(\n                $scope.node, params).then(null, function(error) {\n                    // Should do something better but for now just log\n                    // the error.\n                    console.log(error);\n                });\n\n            // Remove the parent interface so that they don't show up\n            // in the listing unti the new bond appears.\n            var idx = $scope.interfaces.indexOf(\n                $scope.newBridgeInterface.primary);\n            if(idx > -1) {\n                $scope.interfaces.splice(idx, 1);\n            }\n\n            // Clear the bridge interface and reset the mode.\n            $scope.newBridgeInterface = {};\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n        };\n\n        // Return true when the create physical interface view is being shown.\n        $scope.isShowingCreatePhysical = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_PHYSICAL;\n        };\n\n        // Show the create interface view.\n        $scope.showCreatePhysical = function() {\n            if($scope.selectedMode === SELECTION_MODE.NONE) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_PHYSICAL;\n                if($scope.$parent.isDevice) {\n                    $scope.newInterface = {\n                        name: getNextName(\"eth\"),\n                        mac_address: \"\",\n                        macError: false,\n                        tags: [],\n                        errorMsg: null,\n                        subnet: null,\n                        ip_assignment: IP_ASSIGNMENT.DYNAMIC\n                    };\n                } else {\n                    $scope.newInterface = {\n                        name: getNextName(\"eth\"),\n                        mac_address: \"\",\n                        macError: false,\n                        tags: [],\n                        errorMsg: null,\n                        fabric: $scope.fabrics[0],\n                        vlan: getDefaultVLAN($scope.fabrics[0]),\n                        subnet: null,\n                        mode: LINK_MODE.LINK_UP\n                    };\n                }\n            }\n        };\n\n        // Return true if cannot add the interface.\n        $scope.cannotAddPhysicalInterface = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newInterface.mac_address, true));\n        };\n\n        // Actually add the new physical interface.\n        $scope.addPhysicalInterface = function() {\n            if($scope.cannotAddPhysicalInterface()) {\n               return;\n            }\n\n            var params;\n            if($scope.$parent.isDevice) {\n                params = {\n                    name: $scope.newInterface.name,\n                    mac_address: $scope.newInterface.mac_address,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    ip_assignment: $scope.newInterface.ip_assignment,\n                    ip_address: $scope.newInterface.ip_address\n                };\n            } else {\n                params = {\n                    name: $scope.newInterface.name,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    mac_address: $scope.newInterface.mac_address,\n                    vlan: $scope.newInterface.vlan.id,\n                    mode: $scope.newInterface.mode\n                };\n            }\n            if(angular.isObject($scope.newInterface.subnet)) {\n                params.subnet = $scope.newInterface.subnet.id;\n            }\n            $scope.newInterface.macError = false;\n            $scope.newInterface.errorMsg = null;\n            $scope.$parent.nodesManager.createPhysicalInterface(\n                $scope.node, params).then(function() {\n                    // Clear the interface and reset the mode.\n                    $scope.newInterface = {};\n                    $scope.selectedMode = SELECTION_MODE.NONE;\n                },\n                function(errorStr) {\n                    error = JSONService.tryParse(errorStr);\n                    if(!angular.isObject(error)) {\n                        // Was not a JSON error. This is wrong here as it\n                        // should be, so just log to the console.\n                        console.log(errorStr);\n                    } else {\n                        macError = error.mac_address;\n                        if(angular.isArray(macError)) {\n                            $scope.newInterface.macError = true;\n                            $scope.newInterface.errorMsg = macError[0];\n                        }\n                    }\n                });\n        };\n\n        // Load all the required managers. NodesManager and GeneralManager\n        // are loaded by the parent controller \"NodeDetailsController\".\n        ManagerHelperService.loadManagers($scope, [\n            FabricsManager,\n            VLANsManager,\n            SubnetsManager,\n            UsersManager,\n            ControllersManager\n        ]).then(function() {\n            $scope.managersHaveLoaded = true;\n            updateLoaded();\n        });\n\n        // Tell $parent that the networkingController has been loaded.\n        $scope.$parent.controllerLoaded('networkingController', $scope);\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Storage Controller\n */\n\n\n// Filter that is specific to the NodeStorageController. Remove the available\n// disks from the list if being used in the availableNew.\nangular.module('MAAS').filter('removeAvailableByNew', function() {\n    return function(disks, availableNew) {\n        if(!angular.isObject(availableNew) || (\n            !angular.isObject(availableNew.device) &&\n            !angular.isArray(availableNew.devices))) {\n            return disks;\n        }\n\n        var filtered = [];\n        var single = true;\n        if(angular.isArray(availableNew.devices)) {\n            single = false;\n        }\n        angular.forEach(disks, function(disk) {\n            if(single) {\n                if(disk !== availableNew.device) {\n                    filtered.push(disk);\n                }\n            } else {\n                var i, found = false;\n                for(i = 0; i < availableNew.devices.length; i++) {\n                    if(disk === availableNew.devices[i]) {\n                        found = true;\n                        break;\n                    }\n                }\n                if(!found) {\n                    filtered.push(disk);\n                }\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').controller('NodeStorageController', [\n    '$scope', 'MachinesManager', 'ConverterService', 'UsersManager',\n    function($scope, MachinesManager, ConverterService, UsersManager) {\n\n        // From models/partitiontable.py - must be kept in sync.\n        var INITIAL_PARTITION_OFFSET = 4 * 1024 * 1024;\n        var END_OF_PARTITION_TABLE_SPACE = 1024 * 1024;\n        var PARTITION_TABLE_EXTRA_SPACE = INITIAL_PARTITION_OFFSET +\n            END_OF_PARTITION_TABLE_SPACE;\n        var PREP_PARTITION_SIZE = 8 * 1024 * 1024;\n\n        // From models/partition.py - must be kept in sync.\n        var PARTITION_ALIGNMENT_SIZE = 4 * 1024 * 1024;\n        var MIN_PARTITION_SIZE = PARTITION_ALIGNMENT_SIZE;\n\n        // Different selection modes.\n        var SELECTION_MODE = {\n            NONE: null,\n            SINGLE: \"single\",\n            MUTLI: \"multi\",\n            UNMOUNT: \"unmount\",\n            UNFORMAT: \"unformat\",\n            EDIT: \"edit\",\n            DELETE: \"delete\",\n            FORMAT_AND_MOUNT: \"format-mount\",\n            PARTITION: \"partition\",\n            BCACHE: \"bcache\",\n            RAID: \"raid\",\n            VOLUME_GROUP: \"volume-group\",\n            LOGICAL_VOLUME: \"logical-volume\"\n        };\n\n        // Different available raid modes.\n        var RAID_MODES = [\n            {\n                level: \"raid-0\",\n                title: \"RAID 0\",\n                min_disks: 2,\n                allows_spares: false,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * numDisks;\n                }\n            },\n            {\n                level: \"raid-1\",\n                title: \"RAID 1\",\n                min_disks: 2,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize;\n                }\n            },\n            {\n                level: \"raid-5\",\n                title: \"RAID 5\",\n                min_disks: 3,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * (numDisks - 1);\n                }\n            },\n            {\n                level: \"raid-6\",\n                title: \"RAID 6\",\n                min_disks: 4,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * (numDisks - 2);\n                }\n            },\n            {\n                level: \"raid-10\",\n                title: \"RAID 10\",\n                min_disks: 3,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * numDisks / 2;\n                }\n            }\n        ];\n\n        $scope.tableInfo = {column: 'name'};\n        $scope.has_disks = false;\n        $scope.filesystems = [];\n        $scope.filesystemsMap = {};\n        $scope.filesystemMode = SELECTION_MODE.NONE;\n        $scope.filesystemAllSelected = false;\n        $scope.cachesets = [];\n        $scope.cachesetsMap = {};\n        $scope.cachesetsMode = SELECTION_MODE.NONE;\n        $scope.cachesetsAllSelected = false;\n        $scope.available = [];\n        $scope.availableMap = {};\n        $scope.availableMode = SELECTION_MODE.NONE;\n        $scope.availableAllSelected = false;\n        $scope.availableNew = {};\n        $scope.used = [];\n        $scope.showMembers = [];\n\n        // Return True if the filesystem is mounted.\n        function isMountedFilesystem(filesystem) {\n            return angular.isObject(filesystem) &&\n                angular.isString(filesystem.mount_point) &&\n                filesystem.mount_point !== \"\";\n        }\n\n        // Return True if the item has a filesystem and it's mounted.\n        function hasMountedFilesystem(item) {\n            return angular.isObject(item) &&\n                isMountedFilesystem(item.filesystem);\n        }\n\n        // Returns the fstype if the item has a filesystem and its unmounted.\n        function hasFormattedUnmountedFilesystem(item) {\n            if(angular.isObject(item.filesystem) &&\n                angular.isString(item.filesystem.fstype) &&\n                item.filesystem.fstype !== '' &&\n                (angular.isString(item.filesystem.mount_point) === false ||\n                    item.filesystem.mount_point === '')) {\n                return item.filesystem.fstype;\n            }else{\n                return null;\n            }\n        }\n\n        // Return True if the item is in use.\n        function isInUse(item) {\n            if(item.type === \"cache-set\") {\n                return true;\n            } else if(angular.isObject(item.filesystem)) {\n                if(item.filesystem.is_format_fstype &&\n                    angular.isString(item.filesystem.mount_point) &&\n                    item.filesystem.mount_point !== \"\") {\n                    return true;\n                } else if(!item.filesystem.is_format_fstype) {\n                    return true;\n                }\n                return false;\n            }\n            return item.available_size < MIN_PARTITION_SIZE;\n        }\n\n        // Return the tags formatted for ngTagInput.\n        function getTags(disk) {\n            var tags = [];\n            angular.forEach(disk.tags, function(tag) {\n                tags.push({ text: tag });\n            });\n            return tags;\n        }\n\n        // Return a unique key that will never change.\n        function getUniqueKey(disk) {\n            if(disk.type === \"cache-set\") {\n                return \"cache-set-\" + disk.cache_set_id;\n            } else {\n                var key = disk.type + \"-\" + disk.block_id;\n                if(angular.isNumber(disk.partition_id)) {\n                    key += \"-\" + disk.partition_id;\n                }\n                return key;\n            }\n        }\n\n        // Update the list of filesystems. Only filesystems with a mount point\n        // set go here. If no mount point is set, it goes in available.\n        function updateFilesystems() {\n            // Create the new list of filesystems.\n            var filesystems = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(hasMountedFilesystem(disk)) {\n                    var data = {\n                        \"type\": \"filesystem\",\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"fstype\": disk.filesystem.fstype,\n                        \"mount_point\": disk.filesystem.mount_point,\n                        \"mount_options\": disk.filesystem.mount_options,\n                        \"block_id\": disk.id,\n                        \"partition_id\": null,\n                        \"filesystem_id\": disk.filesystem.id,\n                        \"original_type\": disk.type,\n                        \"original\": disk\n                    };\n                    if(disk.type === \"virtual\") {\n                        disk.parent_type = disk.parent.type;\n                    }\n                    filesystems.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(hasMountedFilesystem(partition)) {\n                        filesystems.push({\n                            \"type\": \"filesystem\",\n                            \"name\": partition.name,\n                            \"size_human\": partition.size_human,\n                            \"fstype\": partition.filesystem.fstype,\n                            \"mount_point\": partition.filesystem.mount_point,\n                            \"mount_options\":\n                                partition.filesystem.mount_options,\n                            \"block_id\": disk.id,\n                            \"partition_id\": partition.id,\n                            \"filesystem_id\": partition.filesystem.id,\n                            \"original_type\": \"partition\",\n                            \"original\": partition\n                        });\n                    }\n                });\n            });\n\n            // Add special filesystems to the filesystem list. A special\n            // filesystem cannot exist unless mounted, so we don't need\n            // to check.\n            angular.forEach(\n                $scope.node.special_filesystems,\n                function(filesystem) {\n                    filesystems.push({\n                        \"type\": \"filesystem\",\n                        \"name\": \"—\",\n                        \"size_human\": \"—\",\n                        \"fstype\": filesystem.fstype,\n                        \"mount_point\": filesystem.mount_point,\n                        \"mount_options\": filesystem.mount_options,\n                        \"block_id\": null,\n                        \"partition_id\": null,\n                        \"original_type\": \"special\"\n                    });\n                });\n\n            // Update the selected filesystems with the currently selected\n            // filesystems.\n            angular.forEach(filesystems, function(filesystem) {\n                var key = getUniqueKey(filesystem);\n                var oldFilesystem = $scope.filesystemsMap[key];\n                if(angular.isObject(oldFilesystem)) {\n                    filesystem.$selected = oldFilesystem.$selected;\n                } else {\n                    filesystem.$selected = false;\n                }\n            });\n\n            // Update the filesystems and filesystemsMap on the scope.\n            $scope.filesystems = filesystems;\n            $scope.filesystemsMap = {};\n            angular.forEach(filesystems, function(filesystem) {\n                $scope.filesystemsMap[getUniqueKey(filesystem)] = filesystem;\n            });\n\n            // Update the selection mode.\n            $scope.updateFilesystemSelection(false);\n        }\n\n        // Update the list of cache sets.\n        function updateCacheSets() {\n            // Create the new list of cache sets.\n            var cachesets = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(disk.type === \"cache-set\") {\n                    cachesets.push({\n                        \"type\": \"cache-set\",\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"cache_set_id\": disk.id,\n                        \"used_by\": disk.used_for\n                    });\n                }\n            });\n\n            // Update the selected cache sets with the currently selected\n            // cache sets.\n            angular.forEach(cachesets, function(cacheset) {\n                var key = getUniqueKey(cacheset);\n                var oldCacheSet = $scope.cachesetsMap[key];\n                if(angular.isObject(oldCacheSet)) {\n                    cacheset.$selected = oldCacheSet.$selected;\n                } else {\n                    cacheset.$selected = false;\n                }\n            });\n\n            // Update the cachesets and cachesetsMap on the scope.\n            $scope.cachesets = cachesets;\n            $scope.cachesetsMap = {};\n            angular.forEach(cachesets, function(cacheset) {\n                $scope.cachesetsMap[getUniqueKey(cacheset)] = cacheset;\n            });\n\n            // Update the selection mode.\n            $scope.updateCacheSetsSelection(false);\n        }\n\n        // Update list of all available disks.\n        function updateAvailable() {\n            var available = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(!isInUse(disk)) {\n                    var has_partitions = false;\n                    if(angular.isArray(disk.partitions) &&\n                        disk.partitions.length > 0) {\n                        has_partitions = true;\n                    }\n                    var data = {\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"available_size_human\": disk.available_size_human,\n                        \"used_size_human\": disk.used_size_human,\n                        \"type\": disk.type,\n                        \"model\": disk.model,\n                        \"serial\": disk.serial,\n                        \"tags\": getTags(disk),\n                        \"fstype\": hasFormattedUnmountedFilesystem(disk),\n                        \"mount_point\": null,\n                        \"mount_options\": null,\n                        \"block_id\": disk.id,\n                        \"partition_id\": null,\n                        \"has_partitions\": has_partitions,\n                        \"is_boot\": disk.is_boot,\n                        \"original\": disk,\n                        \"test_status\": disk.test_status,\n                        \"firmware_version\": disk.firmware_version\n                    };\n                    if(disk.type === \"virtual\") {\n                        data.parent_type = disk.parent.type;\n                    }\n                    available.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(!isInUse(partition)) {\n                        available.push({\n                            \"name\": partition.name,\n                            \"size_human\": partition.size_human,\n                            \"available_size_human\": (\n                                partition.available_size_human),\n                            \"used_size_human\": partition.used_size_human,\n                            \"type\": \"partition\",\n                            \"model\": \"\",\n                            \"serial\": \"\",\n                            \"tags\": [],\n                            \"fstype\":\n                                hasFormattedUnmountedFilesystem(partition),\n                            \"mount_point\": null,\n                            \"mount_options\": null,\n                            \"block_id\": disk.id,\n                            \"partition_id\": partition.id,\n                            \"has_partitions\": false,\n                            \"is_boot\": false,\n                            \"original\": partition\n                        });\n                    }\n                });\n            });\n\n            // Update the selected available disks with the currently selected\n            // available disks. Also copy the $options so they are not lost\n            // for the current action.\n            angular.forEach(available, function(disk) {\n                var key = getUniqueKey(disk);\n                var oldDisk = $scope.availableMap[key];\n                if(angular.isObject(oldDisk)) {\n                    disk.$selected = oldDisk.$selected;\n                    disk.$options = oldDisk.$options;\n                } else {\n                    disk.$selected = false;\n                    disk.$options = {};\n                }\n            });\n\n            // Update available and availableMap on the scope.\n            $scope.available = available;\n            $scope.availableMap = {};\n            angular.forEach(available, function(disk) {\n                $scope.availableMap[getUniqueKey(disk)] = disk;\n            });\n\n            // Update device or devices on the availableNew object to be\n            // there new objects.\n            if(angular.isObject($scope.availableNew)) {\n                // Update device.\n                if(angular.isObject($scope.availableNew.device)) {\n                    var key = getUniqueKey($scope.availableNew.device);\n                    $scope.availableNew.device = $scope.availableMap[key];\n                // Update devices.\n                } else if(angular.isArray($scope.availableNew.devices)) {\n                    var newDevices = [];\n                    angular.forEach(\n                        $scope.availableNew.devices, function(device) {\n                            var key = getUniqueKey(device);\n                            var newDevice = $scope.availableMap[key];\n                            if(angular.isObject(newDevice)) {\n                                newDevices.push(newDevice);\n                            }\n                        });\n                    $scope.availableNew.devices = newDevices;\n                }\n            }\n\n            // Update the selection mode.\n            $scope.updateAvailableSelection(false);\n        }\n\n        // Update list of all used disks.\n        function updateUsed() {\n            var used = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(isInUse(disk) && disk.type !== \"cache-set\") {\n                    var has_partitions = false;\n                    if(angular.isArray(disk.partitions) &&\n                        disk.partitions.length > 0) {\n                        has_partitions = true;\n                    }\n                    var data = {\n                        \"name\": disk.name,\n                        \"type\": disk.type,\n                        \"model\": disk.model,\n                        \"serial\": disk.serial,\n                        \"tags\": getTags(disk),\n                        \"used_for\": disk.used_for,\n                        \"is_boot\": disk.is_boot,\n                        \"has_partitions\": has_partitions,\n                        \"test_status\": disk.test_status,\n                        \"firmware_version\": disk.firmware_version\n                    };\n                    if(disk.type === \"virtual\") {\n                        data.parent_type = disk.parent.type;\n                    }\n                    used.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(isInUse(partition) && partition.type !== \"cache-set\") {\n                        used.push({\n                            \"name\": partition.name,\n                            \"type\": \"partition\",\n                            \"model\": \"\",\n                            \"serial\": \"\",\n                            \"tags\": [],\n                            \"used_for\": partition.used_for,\n                            \"is_boot\": false\n                        });\n                    }\n                });\n            });\n            $scope.used = used;\n        }\n\n        // Updates the filesystem, available, and used list.\n        function updateDisks() {\n            if(angular.isArray($scope.node.disks)) {\n                $scope.has_disks = $scope.node.disks.length > 0;\n                updateFilesystems();\n                updateCacheSets();\n                updateAvailable();\n                updateUsed();\n            } else {\n                $scope.has_disks = false;\n                $scope.filesystems = [];\n                $scope.filesystemsMap = {};\n                $scope.filesystemMode = SELECTION_MODE.NONE;\n                $scope.filesystemAllSelected = false;\n                $scope.cachesets = [];\n                $scope.cachesetsMap = {};\n                $scope.cachesetsMode = SELECTION_MODE.NONE;\n                $scope.cachesetsAllSelected = false;\n                $scope.available = [];\n                $scope.availableMap = {};\n                $scope.availableMode = SELECTION_MODE.NONE;\n                $scope.availableAllSelected = false;\n                $scope.availableNew = {};\n                $scope.used = [];\n            }\n        }\n\n        // Deselect all items in the array.\n        function deselectAll(items) {\n            angular.forEach(items, function(item) {\n                item.$selected = false;\n            });\n        }\n\n        // Capitalize the first letter of the string.\n        function capitalizeFirstLetter(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n\n        // Return true if the string is a number.\n        function isNumber(string) {\n            var pattern = /^-?\\d+\\.?\\d*$/;\n            return pattern.test(string);\n        }\n\n        // Extract the index from the name based on prefix.\n        function getIndexFromName(prefix, name) {\n            var pattern = new RegExp(\"^\" + prefix + \"([0-9]+)$\");\n            var match = pattern.exec(name);\n            if(angular.isArray(match) && match.length === 2) {\n                return parseInt(match[1], 10);\n            }\n        }\n\n        // Get the next device name based on prefix.\n        function getNextName(prefix) {\n            var idx = -1;\n            angular.forEach($scope.node.disks, function(disk) {\n                var dIdx = getIndexFromName(prefix, disk.name);\n                if(angular.isNumber(dIdx)) {\n                    idx = Math.max(idx, dIdx);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    dIdx = getIndexFromName(prefix, partition.name);\n                    if(angular.isNumber(dIdx)) {\n                        idx = Math.max(idx, dIdx);\n                    }\n                });\n            });\n            return prefix + (idx + 1);\n        }\n\n        // Return true if another disk exists with name.\n        function isNameAlreadyInUse(name, exclude_disk) {\n            if(!angular.isArray($scope.node.disks)) {\n                return false;\n            }\n\n            var i, j;\n            for(i = 0; i < $scope.node.disks.length; i++) {\n                var disk = $scope.node.disks[i];\n                if(disk.name === name) {\n                    if(!angular.isObject(exclude_disk) ||\n                        exclude_disk.type === \"partition\" ||\n                        exclude_disk.block_id !== disk.id) {\n                        return true;\n                    }\n                }\n                if(angular.isArray(disk.partitions)) {\n                    for(j = 0; j < disk.partitions.length; j++) {\n                        var partition = disk.partitions[j];\n                        if(partition.name === name) {\n                            if(!angular.isObject(exclude_disk) ||\n                                exclude_disk.type !== \"partition\" ||\n                                exclude_disk.partition_id !== partition.id) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        // Return true if the disk is a logical volume.\n        function isLogicalVolume(disk) {\n            return disk.type === \"virtual\" && disk.parent_type === \"lvm-vg\";\n        }\n\n        // Called by $parent when the node has been loaded.\n        $scope.nodeLoaded = function() {\n            $scope.$watch(\"node.disks\", updateDisks);\n        };\n\n        // Return true if the item can be a boot disk.\n        $scope.isBootDiskDisabled = function(item, section) {\n            // Only superusers can change the boot disk.\n            if(!$scope.isSuperUser()) {\n                return true;\n            }\n\n            // Not ready or allocated so the boot disk cannot be changed.\n            if (angular.isObject($scope.node) &&\n                [\"Ready\", \"Allocated\"].indexOf(\n                    $scope.node.status) === -1) {\n                return true;\n            }\n\n            // Only physical disks can be the boot disk.\n            if(item.type !== \"physical\") {\n                return true;\n            }\n\n            // If the disk is in the used section and does not have any\n            // partitions then it cannot be a boot disk. Boot disk either\n            // require that it be unused or that some partitions exists\n            // on the disk. This is because the boot disk has to have a\n            // partition table header.\n            if(section === \"used\") {\n                return !item.has_partitions;\n            }\n            return false;\n        };\n\n        // Called to change the disk to a boot disk.\n        $scope.setAsBootDisk = function(item) {\n            // Do nothing if already the boot disk.\n            if(item.is_boot) {\n                return;\n            }\n            // Do nothing if disabled.\n            if($scope.isBootDiskDisabled(item)) {\n                return;\n            }\n\n            MachinesManager.setBootDisk($scope.node, item.block_id);\n        };\n\n        // Return array of selected filesystems.\n        $scope.getSelectedFilesystems = function() {\n            var filesystems = [];\n            angular.forEach($scope.filesystems, function(filesystem) {\n                if(filesystem.$selected) {\n                    filesystems.push(filesystem);\n                }\n            });\n            return filesystems;\n        };\n\n        // Update the currect mode for the filesystem section and the all\n        // selected value.\n        $scope.updateFilesystemSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var filesystems = $scope.getSelectedFilesystems();\n            if(filesystems.length === 0) {\n                $scope.filesystemMode = SELECTION_MODE.NONE;\n            } else if(filesystems.length === 1 && force) {\n                $scope.filesystemMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.filesystemMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.filesystems.length === 0) {\n                $scope.filesystemAllSelected = false;\n            } else if(filesystems.length === $scope.filesystems.length) {\n                $scope.filesystemAllSelected = true;\n            } else {\n                $scope.filesystemAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the filesystem.\n        $scope.toggleFilesystemSelect = function(filesystem) {\n            filesystem.$selected = !filesystem.$selected;\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Toggle the selection of all filesystems.\n        $scope.toggleFilesystemAllSelect = function() {\n            angular.forEach($scope.filesystems, function(filesystem) {\n                if($scope.filesystemAllSelected) {\n                    filesystem.$selected = false;\n                } else {\n                    filesystem.$selected = true;\n                }\n            });\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Return true if checkboxes in the filesystem section should be\n        // disabled.\n        $scope.isFilesystemsDisabled = function() {\n            return ((\n                $scope.filesystemMode !== SELECTION_MODE.NONE &&\n                $scope.filesystemMode !== SELECTION_MODE.SINGLE &&\n                $scope.filesystemMode !== SELECTION_MODE.MUTLI) ||\n                $scope.isAllStorageDisabled());\n        };\n\n        // Cancel the current filesystem operation.\n        $scope.filesystemCancel = function() {\n            deselectAll($scope.filesystems);\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Enter unmount mode.\n        $scope.filesystemUnmount = function() {\n            $scope.filesystemMode = SELECTION_MODE.UNMOUNT;\n        };\n\n        // Quickly enter unmount by selecting the filesystem first.\n        $scope.quickFilesystemUnmount = function(filesystem) {\n            deselectAll($scope.filesystems);\n            filesystem.$selected = true;\n            $scope.updateFilesystemSelection(true);\n            $scope.filesystemUnmount();\n        };\n\n        // Confirm the unmount action for filesystem.\n        $scope.filesystemConfirmUnmount = function(filesystem) {\n            MachinesManager.updateFilesystem(\n                $scope.node,\n                filesystem.block_id, filesystem.partition_id,\n                filesystem.fstype, null, null);\n\n            var idx = $scope.filesystems.indexOf(filesystem);\n            $scope.filesystems.splice(idx, 1);\n            $scope.updateFilesystemSelection();\n        };\n\n        // Enter delete mode.\n        $scope.filesystemDelete = function() {\n            $scope.filesystemMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete by selecting the filesystem first.\n        $scope.quickFilesystemDelete = function(filesystem) {\n            deselectAll($scope.filesystems);\n            filesystem.$selected = true;\n            $scope.updateFilesystemSelection(true);\n            $scope.filesystemDelete();\n        };\n\n        // Confirm the delete action for filesystem.\n        $scope.filesystemConfirmDelete = function(filesystem) {\n            if(filesystem.original_type === \"special\") {\n                // Delete the special filesystem.\n                MachinesManager.unmountSpecialFilesystem(\n                    $scope.node, filesystem.mount_point);\n            } else if(filesystem.original_type === \"partition\") {\n                // Delete the partition.\n                MachinesManager.deletePartition(\n                    $scope.node, filesystem.original.id);\n            } else {\n                // Delete the disk.\n                MachinesManager.deleteFilesystem(\n                    $scope.node, filesystem.block_id, filesystem.partition_id,\n                    filesystem.filesystem_id);\n            }\n\n            var idx = $scope.filesystems.indexOf(filesystem);\n            $scope.filesystems.splice(idx, 1);\n            $scope.updateFilesystemSelection();\n        };\n\n        // Return true if the disk has an unmouted filesystem.\n        $scope.hasUnmountedFilesystem = function(disk) {\n            if(angular.isString(disk.fstype) && disk.fstype !== \"\") {\n                if(!angular.isString(disk.mount_point) ||\n                    disk.mount_point === \"\") {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return true if the free space label should be shown.\n        $scope.showFreeSpace = function(disk) {\n            if(disk.type === \"lvm-vg\") {\n                return true;\n            } else if(disk.type === \"physical\" || disk.type === \"virtual\") {\n                return disk.has_partitions;\n            } else {\n                return false;\n            }\n        };\n\n        // Return the device type for the disk.\n        $scope.getDeviceType = function(disk) {\n            if(angular.isUndefined(disk)) {\n                return \"\";\n            }\n\n            if(disk.type === \"virtual\") {\n                if(disk.parent_type === \"lvm-vg\") {\n                    return \"Logical volume\";\n                } else if(disk.parent_type.indexOf(\"raid-\") === 0) {\n                    return \"RAID \" + disk.parent_type.split(\"-\")[1];\n                } else {\n                    return capitalizeFirstLetter(disk.parent_type);\n                }\n            } else if(disk.type === \"lvm-vg\") {\n                return \"Volume group\";\n            } else {\n                return capitalizeFirstLetter(disk.type);\n            }\n        };\n\n        // Return array of selected available disks.\n        $scope.getSelectedAvailable = function() {\n            var available = [];\n            angular.forEach($scope.available, function(disk) {\n                if(disk.$selected) {\n                    available.push(disk);\n                }\n            });\n            return available;\n        };\n\n        // Update the current mode for the available section and the all\n        // selected value.\n        $scope.updateAvailableSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var available = $scope.getSelectedAvailable();\n            if(available.length === 0) {\n                $scope.availableMode = SELECTION_MODE.NONE;\n            } else if(available.length === 1 && force) {\n                $scope.availableMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.availableMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.available.length === 0) {\n                $scope.availableAllSelected = false;\n            } else if(available.length === $scope.available.length) {\n                $scope.availableAllSelected = true;\n            } else {\n                $scope.availableAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the available disk.\n        $scope.toggleAvailableSelect = function(disk) {\n            disk.$selected = !disk.$selected;\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Toggle the selection of all available disks.\n        $scope.toggleAvailableAllSelect = function() {\n            angular.forEach($scope.available, function(disk) {\n                if(!$scope.availableAllSelected) {\n                    disk.$selected = true;\n                } else {\n                    disk.$selected = false;\n                }\n            });\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if checkboxes in the avaiable section should be\n        // disabled.\n        $scope.isAvailableDisabled = function() {\n            return ((\n                $scope.availableMode !== SELECTION_MODE.NONE &&\n                $scope.availableMode !== SELECTION_MODE.SINGLE &&\n                $scope.availableMode !== SELECTION_MODE.MUTLI) ||\n                $scope.isAllStorageDisabled());\n        };\n\n        // Return true if the disk can be formatted and mounted.\n        $scope.canFormatAndMount = function(disk) {\n            if($scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"lvm-vg\" || disk.has_partitions) {\n                return false;\n            } else if(disk.type === \"physical\" && disk.original.is_boot) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return the text for the partition button.\n        $scope.getPartitionButtonText = function(disk) {\n            if(disk.has_partitions) {\n                return \"Add partition\";\n            } else {\n                return \"Partition\";\n            }\n        };\n\n        $scope.availablePartitionSpace = function(disk) {\n            var space_to_reserve = 0;\n            if(!angular.isString(disk.original.partition_table_type)\n                || disk.original.partition_table_type === \"\") {\n                // Disk has no partition table, so reserve space for it.\n                space_to_reserve = PARTITION_TABLE_EXTRA_SPACE;\n                // ppc64el node requires that space be saved for the prep\n                // partition.\n                if($scope.node.architecture.indexOf(\"ppc64el\") === 0) {\n                    space_to_reserve += PREP_PARTITION_SIZE;\n                }\n            }\n            return ConverterService.roundByBlockSize(\n                disk.original.available_size - space_to_reserve,\n                PARTITION_ALIGNMENT_SIZE);\n        };\n\n        // Return true if a partition can be added to disk.\n        $scope.canAddPartition = function(disk) {\n            if(!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"partition\" || disk.type === \"lvm-vg\") {\n                return false;\n            } else if(disk.type === \"virtual\" &&\n                (disk.parent_type === \"lvm-vg\" ||\n                    disk.parent_type === \"bcache\")) {\n                return false;\n            } else if(angular.isString(disk.fstype) && disk.fstype !== \"\") {\n                return false;\n            }\n            // If we can fit a minimum partition, we're golden.\n            return ($scope.availablePartitionSpace(disk) -\n                MIN_PARTITION_SIZE) >= 0;\n        };\n\n        // Return true if the name is invalid.\n        $scope.isNameInvalid = function(disk) {\n            if(disk.name === \"\") {\n                return false;\n            } else if(isNameAlreadyInUse(disk.name, disk)) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Prevent logical volumes from changing the volume group prefix.\n        $scope.nameHasChanged = function(disk) {\n            if(isLogicalVolume(disk)) {\n                var parentName = disk.original.name.split(\"-\")[0] + \"-\";\n                var startsWith = disk.name.indexOf(parentName);\n                if(startsWith !== 0) {\n                    disk.name = parentName;\n                }\n            }\n        };\n\n        // Cancel the current available operation.\n        $scope.availableCancel = function(disk) {\n            $scope.updateAvailableSelection(true);\n            $scope.availableNew = {};\n        };\n\n        // Return true if the filesystem can be mounted at a directory.\n        $scope.usesMountPoint = function(fstype) {\n            return angular.isString(fstype) && fstype !== \"swap\";\n        };\n\n        // Return true if the filesystem uses storage (partition or\n        // block device).\n        $scope.usesStorage = function(fstype) {\n            return angular.isString(fstype) &&\n                fstype !== \"tmpfs\" && fstype !== \"ramfs\";\n        };\n\n        // Return true if the mount point is invalid.\n        $scope.isMountPointInvalid = function(mountPoint) {\n            if(angular.isUndefined(mountPoint) || mountPoint === \"\") {\n                return false;\n            } else if (mountPoint === \"none\") {\n                // XXX: Hack to allow \"swap\" filesystems to be mounted.\n                // This should be allowed only when fstype is 'swap' but\n                // doing that would require more refactoring (or more\n                // hacks) that I have time for right now.\n                return false;\n            } else if(mountPoint[0] !== \"/\") {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Return true if the disk can be deleted.\n        $scope.canDelete = function(disk) {\n            if (!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"lvm-vg\") {\n                return disk.original.used_size === 0;\n            } else {\n                return !disk.has_partitions;\n            }\n        };\n\n        // Enter delete mode.\n        $scope.availableDelete = function() {\n            $scope.availableMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete mode.\n        $scope.availableQuickDelete = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availableDelete();\n        };\n\n        // Return true if it can be edited.\n        $scope.canEdit = function(disk) {\n          if (!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n              return false;\n          } else {\n              return true;\n          }\n        };\n\n        // Enter Edit mode, disable certain fields based on disk type\n        $scope.availableEdit = function(disk) {\n            $scope.availableMode = SELECTION_MODE.EDIT;\n\n            if (disk.type === \"lvm-vg\") {\n                disk.$options = {\n                    editingTags: false,\n                    editingFilesystem: false\n                };\n            } else if (disk.type === \"partition\") {\n                disk.$options = {\n                    editingTags: false,\n                    editingFilesystem: true,\n                    fstype: disk.fstype\n                };\n            } else {\n                disk.$options = {\n                    editingFilesystem: true,\n                    editingTags: true,\n                    tags: angular.copy(disk.tags),\n                    fstype: disk.fstype\n                };\n                if (!$scope.canFormatAndMount(disk)) {\n                    disk.$options.editingFilesystem = false;\n                }\n            }\n        };\n\n        // Quickly enter Edit mode\n        $scope.availableQuickEdit = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availableEdit(disk);\n        };\n\n        // Save the disk which is in Edit mode\n        $scope.availableConfirmEdit = function(disk) {\n            var params = {\n                name: disk.name\n            };\n\n            // Do nothing if not valid.\n            if($scope.isNameInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Reset the name if its blank.\n            if(disk.name === \"\") {\n                disk.name = disk.original.name;\n            }\n\n            // Ensure logical volume has parent prefix in its name.\n            if(isLogicalVolume(disk)){\n                var parentName = disk.original.name.split(\"-\")[0] + \"-\";\n                params.name = disk.name.slice(parentName.length);\n            }\n\n            // Set filesystem options so formatting and mounting is performed.\n            if(angular.isDefined(disk.$options.fstype)) {\n                params.fstype = disk.$options.fstype;\n                params.mount_point = disk.$options.mountPoint || '';\n                params.mount_options = disk.$options.mountOptions || '';\n            }\n\n            // Update the tags for the disk.\n            if(angular.isArray(disk.$options.tags)) {\n                params.tags = disk.$options.tags.map(\n                    function(tag) { return tag.text; });\n            }\n\n            // Save the options.\n            if(disk.type === \"partition\") {\n                MachinesManager.updateFilesystem(\n                    $scope.node, disk.block_id, disk.partition_id,\n                    params.fstype, params.mount_point,\n                    params.mount_options, params.tags);\n            } else {\n                MachinesManager.updateDisk(\n                    $scope.node, disk.block_id, params);\n            }\n\n            // Set the options on the object so no flicker occurs while waiting\n            // for the new object to be received.\n            disk.fstype = disk.$options.fstype;\n            disk.mount_point = disk.$options.mountPoint;\n            disk.mount_options = disk.$options.mountOptions;\n            disk.tags = disk.$options.tags;\n            disk.$options = {};\n\n            // If the mount_point is set then we need to transition this to\n            // the filesystem section.\n            if(angular.isString(disk.mount_point) && disk.mount_point !== \"\") {\n                $scope.filesystems.push({\n                    \"name\": disk.name,\n                    \"size_human\": disk.size_human,\n                    \"fstype\": disk.fstype,\n                    \"mount_point\": disk.mount_point,\n                    \"mount_options\": disk.mount_options,\n                    \"block_id\": disk.block_id,\n                    \"partition_id\": disk.partition_id\n                });\n\n                // Remove the selected disk from available.\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n\n            // Deselect the disk after saving\n            disk.$selected = false;\n\n            // Update the current selections.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return the text for remove confirmation message.\n        $scope.getRemoveTypeText = function(disk) {\n            if(disk.type === \"filesystem\") {\n                if (angular.isObject(disk.original)) {\n                    disk = disk.original;\n                } else {\n                    return \"special filesystem\";\n                }\n            }\n\n            if(disk.type === \"physical\") {\n                return \"physical disk\";\n            } else if(disk.type === \"partition\") {\n                return \"partition\";\n            } else if(disk.type === \"lvm-vg\") {\n                return \"volume group\";\n            } else if(disk.type === \"virtual\") {\n                if(disk.parent_type === \"lvm-vg\") {\n                    return \"logical volume\";\n                } else if(disk.parent_type.indexOf(\"raid-\") === 0) {\n                    return \"RAID \" + disk.parent_type.split(\"-\")[1] + \" disk\";\n                } else {\n                    return disk.parent_type + \" disk\";\n                }\n            }\n        };\n\n        // Delete the disk, partition, or volume group.\n        $scope.availableConfirmDelete = function(disk) {\n            if(disk.type === \"lvm-vg\") {\n                // Delete the volume group.\n                MachinesManager.deleteVolumeGroup(\n                    $scope.node, disk.block_id);\n            } else if(disk.type === \"partition\") {\n                // Delete the partition.\n                MachinesManager.deletePartition(\n                    $scope.node, disk.partition_id);\n            } else {\n                // Delete the disk.\n                MachinesManager.deleteDisk(\n                    $scope.node, disk.block_id);\n            }\n\n            // Remove the selected disk from available.\n            var idx = $scope.available.indexOf(disk);\n            $scope.available.splice(idx, 1);\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Enter partition mode.\n        $scope.availablePartition = function(disk) {\n            $scope.availableMode = SELECTION_MODE.PARTITION;\n            // Set starting size to the maximum available space.\n            var size_and_units = disk.available_size_human.split(\" \");\n            disk.$options = {\n                size: size_and_units[0],\n                sizeUnits: size_and_units[1],\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\"\n            };\n        };\n\n        // Quickly enter partition mode.\n        $scope.availableQuickPartition = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availablePartition(disk);\n        };\n\n        // Get the new name of the partition.\n        $scope.getAddPartitionName = function(disk) {\n            var length, partitions = disk.original.partitions;\n            if(angular.isArray(partitions)) {\n                length = partitions.length;\n            } else {\n                length = 0;\n            }\n            if(disk.original.partition_table_type === \"mbr\" &&\n                length > 2) {\n                return disk.name + \"-part\" + (length + 2);\n            } else if($scope.node.architecture.indexOf(\"ppc64el\") === 0 &&\n                disk.original.is_boot) {\n                // Boot disk on ppc64el machines skip the first partition as\n                // its reserved for the prep partition.\n                return disk.name + \"-part\" + (length + 2);\n            } else {\n                return disk.name + \"-part\" + (length + 1);\n            }\n        };\n\n        // Return true if the size is invalid.\n        $scope.isAddPartitionSizeInvalid = function(disk) {\n            if(disk.$options.size === \"\" || !isNumber(disk.$options.size)) {\n                return true;\n            } else {\n                var bytes = ConverterService.unitsToBytes(\n                    disk.$options.size, disk.$options.sizeUnits);\n                if(bytes < MIN_PARTITION_SIZE) {\n                    return true;\n                } else if(bytes > disk.original.available_size) {\n                    // Round the size down to the lowest tolerance for that\n                    // to see if it now fits.\n                    var rounded = ConverterService.roundUnits(\n                        disk.$options.size, disk.$options.sizeUnits);\n                    if(rounded > disk.original.available_size) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        };\n\n        // Confirm the partition creation.\n        $scope.availableConfirmPartition = function(disk) {\n            // Do nothing if not valid.\n            if($scope.isAddPartitionSizeInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Get the bytes to create the partition.\n            var bytes = ConverterService.unitsToBytes(\n                disk.$options.size, disk.$options.sizeUnits);\n\n            // Accepting prefilled defaults means use whole disk (lp:1509535).\n            var size_and_units = disk.original.available_size_human.split(\" \");\n            if(disk.$options.size === size_and_units[0] &&\n               disk.$options.sizeUnits === size_and_units[1]) {\n                bytes = disk.original.available_size;\n            }\n\n            var removeDisk = false;\n            var available_space = $scope.availablePartitionSpace(disk);\n            if(bytes >= available_space) {\n                // Clamp to available space.\n                bytes = available_space;\n                // Remove the disk if partition uses all the remaining space.\n                removeDisk = true;\n            }\n\n            // Create the partition.\n            var params = {};\n            if(angular.isString(disk.$options.fstype) &&\n                disk.$options.fstype !== \"\") {\n                params.fstype = disk.$options.fstype;\n                if(disk.$options.mountPoint !== \"\") {\n                    params.mount_point = disk.$options.mountPoint;\n                    params.mount_options = disk.$options.mountOptions;\n                }\n            }\n            MachinesManager.createPartition(\n                $scope.node, disk.block_id, bytes, params);\n\n            // Remove the disk if needed.\n            if(removeDisk) {\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return array of selected cache sets.\n        $scope.getSelectedCacheSets = function() {\n            var cachesets = [];\n            angular.forEach($scope.cachesets, function(cacheset) {\n                if(cacheset.$selected) {\n                    cachesets.push(cacheset);\n                }\n            });\n            return cachesets;\n        };\n\n        // Update the currect mode for the cache sets section and the all\n        // selected value.\n        $scope.updateCacheSetsSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var cachesets = $scope.getSelectedCacheSets();\n            if(cachesets.length === 0) {\n                $scope.cachesetsMode = SELECTION_MODE.NONE;\n            } else if(cachesets.length === 1 && force) {\n                $scope.cachesetsMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.cachesetsMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.cachesets.length === 0) {\n                $scope.cachesetsAllSelected = false;\n            } else if(cachesets.length === $scope.cachesets.length) {\n                $scope.cachesetsAllSelected = true;\n            } else {\n                $scope.cachesetsAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the filesystem.\n        $scope.toggleCacheSetSelect = function(cacheset) {\n            cacheset.$selected = !cacheset.$selected;\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Toggle the selection of all filesystems.\n        $scope.toggleCacheSetAllSelect = function() {\n            angular.forEach($scope.cachesets, function(cacheset) {\n                if($scope.cachesetsAllSelected) {\n                    cacheset.$selected = false;\n                } else {\n                    cacheset.$selected = true;\n                }\n            });\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Return true if checkboxes in the cache sets section should be\n        // disabled.\n        $scope.isCacheSetsDisabled = function() {\n            return ((\n                $scope.isAllStorageDisabled() &&\n                !$scope.isSuperUser()) || (\n                $scope.cachesetsMode !== SELECTION_MODE.NONE &&\n                $scope.cachesetsMode !== SELECTION_MODE.SINGLE &&\n                $scope.cachesetsMode !== SELECTION_MODE.MUTLI));\n        };\n\n        // Cancel the current cache set operation.\n        $scope.cacheSetCancel = function() {\n            deselectAll($scope.cachesets);\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Can delete the cache set.\n        $scope.canDeleteCacheSet = function(cacheset) {\n            return (cacheset.used_by === \"\" &&\n                    !$scope.isAllStorageDisabled() &&\n                    $scope.isSuperUser());\n        };\n\n        // Enter delete mode.\n        $scope.cacheSetDelete = function() {\n            $scope.cachesetsMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete by selecting the cache set first.\n        $scope.quickCacheSetDelete = function(cacheset) {\n            deselectAll($scope.cachesets);\n            cacheset.$selected = true;\n            $scope.updateCacheSetsSelection(true);\n            $scope.cacheSetDelete();\n        };\n\n        // Confirm the delete action for cache set.\n        $scope.cacheSetConfirmDelete = function(cacheset) {\n            MachinesManager.deleteCacheSet(\n                $scope.node, cacheset.cache_set_id);\n\n            var idx = $scope.cachesets.indexOf(cacheset);\n            $scope.cachesets.splice(idx, 1);\n            $scope.updateCacheSetsSelection();\n        };\n\n        // Return true if a cache set can be created.\n        $scope.canCreateCacheSet = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length === 1) {\n                return (\n                    !selected[0].has_partitions &&\n                    !$scope.hasUnmountedFilesystem(selected[0]) &&\n                    selected[0].type !== \"lvm-vg\");\n            }\n            return false;\n        };\n\n        // Called to create a cache set.\n        $scope.createCacheSet = function() {\n            if(!$scope.canCreateCacheSet()) {\n                return;\n            }\n\n            // Create cache set.\n            var disk = $scope.getSelectedAvailable()[0];\n            MachinesManager.createCacheSet(\n                $scope.node, disk.block_id, disk.partition_id);\n\n            // Remove from available.\n            var idx = $scope.available.indexOf(disk);\n            $scope.available.splice(idx, 1);\n        };\n\n        // Return the reason a bcache device cannot be created.\n        $scope.getCannotCreateBcacheMsg = function() {\n            if($scope.cachesets.length === 0) {\n                return \"Create at least one cache set to create bcache\";\n            } else {\n                var selected = $scope.getSelectedAvailable();\n                if(selected.length === 1) {\n                    if($scope.hasUnmountedFilesystem(selected[0])) {\n                        return (\n                            \"Device is formatted; unformat the \" +\n                            \"device to create bcache\");\n                    } else if(selected[0].type === \"lvm-vg\") {\n                        return (\n                            \"Cannot use a logical volume as a backing \" +\n                            \"device for bcache.\");\n                    } else if(selected[0].has_partitions) {\n                        return (\n                            \"Device has already been partitioned; create a \" +\n                            \"new partition to use as the bcache backing \" +\n                            \"device\");\n                    } else {\n                        return null;\n                    }\n                } else {\n                    return \"Select only one available device to create bcache\";\n                }\n            }\n        };\n\n        // Return true if a bcache can be created.\n        $scope.canCreateBcache = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var msg = $scope.getCannotCreateBcacheMsg();\n            if(msg === null) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Enter bcache mode.\n        $scope.createBcache = function() {\n            if(!$scope.canCreateBcache()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.BCACHE;\n            $scope.availableNew = {\n                name: getNextName(\"bcache\"),\n                device: $scope.getSelectedAvailable()[0],\n                cacheset: $scope.cachesets[0],\n                cacheMode: \"writeback\",\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\",\n                tags: []\n            };\n        };\n\n        // Clear mount point when the fstype is changed.\n        $scope.fstypeChanged = function(options) {\n            if(options.fstype === null) {\n                options.mountPoint = \"\";\n                options.mountOptions = \"\";\n            }\n            else {\n                // Update the mount point to \"none\" if \"swap\" is\n                // selected, and vice-versa.\n                if ($scope.usesMountPoint(options.fstype)) {\n                    if (options.mountPoint === \"none\") {\n                        options.mountPoint = \"\";\n                    }\n                }\n                else {\n                    options.mountPoint = \"none\";\n                }\n            }\n        };\n\n        // Return true when the name of the new disk is invalid.\n        $scope.isNewDiskNameInvalid = function() {\n            if(!angular.isObject($scope.node) ||\n                !angular.isArray($scope.node.disks)) {\n                return true;\n            }\n\n            if($scope.availableNew.name === \"\") {\n                return true;\n            } else {\n                var i, j;\n                for(i = 0; i < $scope.node.disks.length; i++) {\n                    var disk = $scope.node.disks[i];\n                    if($scope.availableNew.name === disk.name) {\n                        return true;\n                    }\n                    if(angular.isArray(disk.partitions)) {\n                        for(j = 0; j < disk.partitions.length; j++) {\n                            var partition = disk.partitions[j];\n                            if($scope.availableNew.name === partition.name) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return true if bcache can be saved.\n        $scope.createBcacheCanSave = function() {\n            return (\n                !$scope.isNewDiskNameInvalid() &&\n                !$scope.isMountPointInvalid($scope.availableNew.mountPoint));\n        };\n\n        // Confirm and create the bcache device.\n        $scope.availableConfirmCreateBcache = function() {\n            if(!$scope.createBcacheCanSave()) {\n                return;\n            }\n\n            // Create the bcache.\n            var params = {\n                name: $scope.availableNew.name,\n                cache_set: $scope.availableNew.cacheset.cache_set_id,\n                cache_mode: $scope.availableNew.cacheMode\n            };\n            if($scope.availableNew.device.type === \"partition\") {\n                params.partition_id = $scope.availableNew.device.partition_id;\n            } else {\n                params.block_id = $scope.availableNew.device.block_id;\n            }\n            if(angular.isString($scope.availableNew.fstype) &&\n                $scope.availableNew.fstype !== \"\") {\n                params.fstype = $scope.availableNew.fstype;\n                // XXX: Inconsistent tests of mountPoint/mount_point; in\n                // places it's compared to \"\" (like here), in others\n                // it's tested with angular.isDefined(), others with\n                // angular.isString(), others angular.isString() ===\n                // false. This is *begging* for bugs.\n                if($scope.availableNew.mountPoint !== \"\") {\n                    params.mount_point = $scope.availableNew.mountPoint;\n                    params.mount_options = $scope.availableNew.mountOptions;\n                }\n            }\n            if(angular.isArray($scope.availableNew.tags)\n                && $scope.availableNew.tags.length > 0) {\n                params.tags = $scope.availableNew.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createBcache($scope.node, params);\n\n            // Remove device from available.\n            var idx = $scope.available.indexOf($scope.availableNew.device);\n            $scope.available.splice(idx, 1);\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a RAID can be created.\n        $scope.canCreateRAID = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length > 1) {\n                var i;\n                for(i = 0; i < selected.length; i++) {\n                    if($scope.hasUnmountedFilesystem(selected[i])) {\n                        return false;\n                    } else if(selected[i].type === \"lvm-vg\") {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n\n        // Called to create a RAID.\n        $scope.createRAID = function() {\n            if(!$scope.canCreateRAID()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.RAID;\n            $scope.availableNew = {\n                name: getNextName(\"md\"),\n                devices: $scope.getSelectedAvailable(),\n                mode: null,\n                spares: [],\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\",\n                tags: []\n            };\n            $scope.availableNew.mode = $scope.getAvailableRAIDModes()[0];\n        };\n\n        // Get the available RAID modes.\n        $scope.getAvailableRAIDModes = function() {\n            if(!angular.isObject($scope.availableNew) ||\n                !angular.isArray($scope.availableNew.devices)) {\n                return [];\n            }\n\n            var modes = [];\n            angular.forEach(RAID_MODES, function(mode) {\n                if($scope.availableNew.devices.length >= mode.min_disks) {\n                    modes.push(mode);\n                }\n            });\n            return modes;\n        };\n\n        // Return the total number of available spares for the current mode.\n        $scope.getTotalNumberOfAvailableSpares = function() {\n            var mode = $scope.availableNew.mode;\n            if(angular.isUndefined(mode) || !mode.allows_spares) {\n                return 0;\n            } else {\n                var diff = $scope.availableNew.devices.length - mode.min_disks;\n                if(diff < 0) {\n                    diff = 0;\n                }\n                return diff;\n            }\n        };\n\n        // Return the number of remaining spares that can be selected.\n        $scope.getNumberOfRemainingSpares = function() {\n            var allowed = $scope.getTotalNumberOfAvailableSpares();\n            if(allowed <= 0) {\n                return 0;\n            } else {\n                return allowed - $scope.availableNew.spares.length;\n            }\n        };\n\n        // Return true if the spares column should be shown.\n        $scope.showSparesColumn = function() {\n            return $scope.getTotalNumberOfAvailableSpares() > 0;\n        };\n\n        // Called when the RAID mode is changed to reset the selected spares.\n        $scope.RAIDModeChanged = function() {\n            $scope.availableNew.spares = [];\n        };\n\n        // Return true if the disk is an active RAID member.\n        $scope.isActiveRAIDMember = function(disk) {\n            if(!angular.isArray($scope.availableNew.spares)) {\n                return true;\n            } else {\n                var idx = $scope.availableNew.spares.indexOf(\n                    getUniqueKey(disk));\n                return idx === -1;\n            }\n        };\n\n        // Return true if the disk is a spare RAID member.\n        $scope.isSpareRAIDMember = function(disk) {\n            return !$scope.isActiveRAIDMember(disk);\n        };\n\n        // Set the disk as an active RAID member.\n        $scope.setAsActiveRAIDMember = function(disk) {\n            var idx = $scope.availableNew.spares.indexOf(getUniqueKey(disk));\n            if(idx > -1) {\n                $scope.availableNew.spares.splice(idx, 1);\n            }\n        };\n\n        // Set the disk as a spare RAID member.\n        $scope.setAsSpareRAIDMember = function(disk) {\n            var key = getUniqueKey(disk);\n            var idx = $scope.availableNew.spares.indexOf(key);\n            if(idx === -1) {\n                $scope.availableNew.spares.push(key);\n            }\n        };\n\n        // Return the size of the new RAID device.\n        $scope.getNewRAIDSize = function() {\n            if(angular.isUndefined($scope.availableNew.mode)) {\n                return \"\";\n            }\n            var calculateSize = $scope.availableNew.mode.calculateSize;\n            if(!angular.isFunction(calculateSize)) {\n                return \"\";\n            }\n\n            // Get the number of disks and the minimum disk size in the RAID.\n            var numDisks = (\n                $scope.availableNew.devices.length -\n                $scope.availableNew.spares.length);\n            var minSize = Number.MAX_VALUE;\n            angular.forEach($scope.availableNew.devices, function(device) {\n                // Get the size of the device. For a block device it will be\n                // at available_size and for a partition it will be at size.\n                var deviceSize = (\n                    device.original.available_size || device.original.size);\n                minSize = Math.min(minSize, deviceSize);\n            });\n\n            // Calculate the new size.\n            var size = calculateSize(minSize, numDisks);\n            return ConverterService.bytesToUnits(size).string;\n        };\n\n        // Return true if RAID can be saved.\n        $scope.createRAIDCanSave = function() {\n            return (\n                !$scope.isNewDiskNameInvalid() &&\n                !$scope.isMountPointInvalid($scope.availableNew.mountPoint));\n        };\n\n        // Confirm and create the RAID device.\n        $scope.availableConfirmCreateRAID = function() {\n            if(!$scope.createRAIDCanSave()) {\n                return;\n            }\n\n            // Create the RAID.\n            var params = {\n                name: $scope.availableNew.name,\n                level: $scope.availableNew.mode.level,\n                block_devices: [],\n                partitions: [],\n                spare_devices: [],\n                spare_partitions: []\n            };\n            angular.forEach($scope.availableNew.devices, function(device) {\n                if($scope.isActiveRAIDMember(device)) {\n                    if(device.type === \"partition\") {\n                        params.partitions.push(device.partition_id);\n                    } else {\n                        params.block_devices.push(device.block_id);\n                    }\n                } else {\n                    if(device.type === \"partition\") {\n                        params.spare_partitions.push(device.partition_id);\n                    } else {\n                        params.spare_devices.push(device.block_id);\n                    }\n                }\n            });\n            if(angular.isString($scope.availableNew.fstype) &&\n                $scope.availableNew.fstype !== \"\") {\n                params.fstype = $scope.availableNew.fstype;\n                if($scope.availableNew.mountPoint !== \"\") {\n                    params.mount_point = $scope.availableNew.mountPoint;\n                    params.mount_options = $scope.availableNew.mountOptions;\n                }\n            }\n            if(angular.isArray($scope.availableNew.tags)\n                && $scope.availableNew.tags.length > 0) {\n                params.tags = $scope.availableNew.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createRAID($scope.node, params);\n\n            // Remove devices from available.\n            angular.forEach($scope.availableNew.devices, function(device) {\n                var idx = $scope.available.indexOf($scope.availableNew.device);\n                $scope.available.splice(idx, 1);\n            });\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a volume group can be created.\n        $scope.canCreateVolumeGroup = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length > 0) {\n                var i;\n                for(i = 0; i < selected.length; i++) {\n                    if(selected[i].has_partitions) {\n                        return false;\n                    } else if($scope.hasUnmountedFilesystem(selected[i])) {\n                        return false;\n                    } else if(selected[i].type === \"lvm-vg\") {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n\n        // Called to create a volume group.\n        $scope.createVolumeGroup = function() {\n            if(!$scope.canCreateVolumeGroup()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.VOLUME_GROUP;\n            $scope.availableNew = {\n                name: getNextName(\"vg\"),\n                devices: $scope.getSelectedAvailable()\n            };\n        };\n\n        // Return the size of the new volume group.\n        $scope.getNewVolumeGroupSize = function() {\n            var total = 0;\n            angular.forEach($scope.availableNew.devices, function(device) {\n                // Add available_size or size if available_size is not set.\n                total += (\n                    device.original.available_size || device.original.size);\n            });\n            return ConverterService.bytesToUnits(total).string;\n        };\n\n        // Return true if volume group can be saved.\n        $scope.createVolumeGroupCanSave = function() {\n            return !$scope.isNewDiskNameInvalid();\n        };\n\n        // Confirm and create the volume group device.\n        $scope.availableConfirmCreateVolumeGroup = function() {\n            if(!$scope.createVolumeGroupCanSave()) {\n                return;\n            }\n\n            // Create the RAID.\n            var params = {\n                name: $scope.availableNew.name,\n                block_devices: [],\n                partitions: []\n            };\n            angular.forEach($scope.availableNew.devices, function(device) {\n                if(device.type === \"partition\") {\n                    params.partitions.push(device.partition_id);\n                } else {\n                    params.block_devices.push(device.block_id);\n                }\n            });\n            MachinesManager.createVolumeGroup($scope.node, params);\n\n            // Remove devices from available.\n            angular.forEach($scope.availableNew.devices, function(device) {\n                var idx = $scope.available.indexOf($scope.availableNew.device);\n                $scope.available.splice(idx, 1);\n            });\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a logical volume can be added to disk.\n        $scope.canAddLogicalVolume = function(disk) {\n            if(disk.type !== \"lvm-vg\") {\n                return false;\n            } else if(disk.original.available_size < MIN_PARTITION_SIZE) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Enter logical volume mode.\n        $scope.availableLogicalVolume = function(disk) {\n            $scope.availableMode = SELECTION_MODE.LOGICAL_VOLUME;\n            disk.$selected = true;\n            // Set starting size to the maximum available space.\n            var size_and_units = disk.available_size_human.split(\" \");\n            var namePrefix = disk.name + \"-lv\";\n            disk.$options = {\n                name: getNextName(namePrefix),\n                size: size_and_units[0],\n                sizeUnits: size_and_units[1],\n                fstype: null,\n                tags: []\n            };\n        };\n\n        // Return true if the name of the logical volume is invalid.\n        $scope.isLogicalVolumeNameInvalid = function(disk) {\n            if(!angular.isString(disk.$options.name)) {\n                return false;\n            }\n            var startsWith = disk.$options.name.indexOf(disk.name + \"-\");\n            return (\n                startsWith !== 0 ||\n                disk.$options.name.length <= disk.name.length + 1 ||\n                isNameAlreadyInUse(disk.$options.name));\n        };\n\n        // Don't allow the name of the logical volume to remove the volume\n        // group name.\n        $scope.newLogicalVolumeNameChanged = function(disk) {\n            if(!angular.isString(disk.$options.name)) {\n                return;\n            }\n            var startsWith = disk.$options.name.indexOf(disk.name + \"-\");\n            if(startsWith !== 0) {\n                disk.$options.name = disk.name + \"-\";\n            }\n        };\n\n        // Return true if the logical volume size is invalid.\n        $scope.isAddLogicalVolumeSizeInvalid = function(disk) {\n            // Uses the same logic as the partition size checked.\n            return $scope.isAddPartitionSizeInvalid(disk);\n        };\n\n        // Confirm the logical volume creation.\n        $scope.availableConfirmLogicalVolume = function(disk) {\n            // Do nothing if not valid.\n            if($scope.isLogicalVolumeNameInvalid(disk) ||\n                $scope.isAddLogicalVolumeSizeInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Get the bytes to create the partition.\n            var bytes = ConverterService.unitsToBytes(\n                disk.$options.size, disk.$options.sizeUnits);\n\n            // Accepting prefilled defaults means use whole disk (lp:1509535).\n            var size_and_units = disk.original.available_size_human.split(\" \");\n            if(disk.$options.size === size_and_units[0] &&\n               disk.$options.sizeUnits === size_and_units[1]) {\n                bytes = disk.original.available_size;\n            }\n\n            // Clamp to available space.\n            if(bytes > disk.original.available_size) {\n                bytes = disk.original.available_size;\n            }\n\n            // Remove the disk if it is going to use all the remaining space.\n            var removeDisk = false;\n            if(bytes === disk.original.available_size) {\n                removeDisk = true;\n            }\n\n            // Remove the volume group name from the name.\n            var name = disk.$options.name.slice(disk.name.length + 1);\n\n            // Create the logical volume.\n            var params = {};\n            if(angular.isString(disk.$options.fstype) &&\n                disk.$options.fstype !== \"\") {\n                params.fstype = disk.$options.fstype;\n                if(disk.$options.mountPoint !== \"\") {\n                    params.mount_point = disk.$options.mountPoint;\n                    params.mount_options = disk.$options.mountOptions;\n                }\n            }\n            if(angular.isArray(disk.$options.tags)\n                && disk.$options.tags.length > 0) {\n                params.tags = disk.$options.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createLogicalVolume(\n                $scope.node, disk.block_id, name, bytes, params);\n\n            // Remove the disk if needed.\n            if(removeDisk) {\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Returns true if storage cannot be edited.\n        // (it can't be changed when the node is in any state other\n        //  than Ready or Allocated)\n        $scope.isAllStorageDisabled = function() {\n            var authUser = UsersManager.getAuthUser();\n            if(!angular.isObject(authUser) || !angular.isObject($scope.node) ||\n                (!authUser.is_superuser &&\n                 authUser.username !== $scope.node.owner)) {\n                return true;\n            }else if (angular.isObject($scope.node) &&\n                [\"Ready\", \"Allocated\"].indexOf(\n                    $scope.node.status) === -1) {\n                // If the node is not ready or allocated, disable storage panel.\n                return true;\n            } else {\n                // The node must be either ready or broken. Enable it.\n                return false;\n            }\n        };\n\n        // Returns true if there are storage layout errors\n        $scope.hasStorageLayoutIssues = function() {\n            if(angular.isObject($scope.node) &&\n                angular.isArray($scope.node.storage_layout_issues)) {\n                return $scope.node.storage_layout_issues.length > 0;\n            }\n            return false;\n        };\n\n        // Tell $parent that the storageController has been loaded.\n        $scope.$parent.controllerLoaded('storageController', $scope);\n    }]);\n","/*\n * Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Manage a node's filesystems, including adding special filesystems.\n */\n\n(function() {\n\n    function SpecialFilesystem() {\n        this.fstype = \"tmpfs\";\n        this.mountPoint = \"\";\n        this.mountOptions = \"\";\n    }\n\n    SpecialFilesystem.prototype.isValid = function() {\n        return this.mountPoint.startsWith(\"/\");\n    };\n\n    SpecialFilesystem.prototype.describe = function() {\n        var parts = [this.fstype];\n        // Add the mount point if specified and valid.\n        if (this.mountPoint.startsWith(\"/\")) {\n            parts.push(\"at \" + this.mountPoint);\n        }\n        // Filesystem-specific bits.\n        switch (this.fstype) {\n        case \"tmpfs\":\n            // Extract size=n parameter from mount options. Other\n            // options could be added in the future.\n            var size = this.mountOptions.match(/\\bsize=(\\d+)(%?)/);\n            if (size !== null) {\n                if (size[2] === \"%\") {\n                    parts.push(\"limited to \" + size[1] + \"% of memory\");\n                } else {\n                    parts.push(\"limited to \" + size[1] + \" bytes\");\n                }\n            }\n            break;\n        case \"ramfs\":\n            // This filesystem does not recognise any options. Consider\n            // warning about lack of a size limit.\n            break;\n        }\n        return parts.join(\" \");\n    };\n\n    function NodeFilesystemsController($scope) {\n\n        // Which drop-down is currently selected, e.g. \"special\".\n        $scope.dropdown = null;\n\n        // Select the \"special\" drop-down.\n        $scope.addSpecialFilesystem = function() {\n            $scope.dropdown = \"special\";\n        };\n\n        // Deselect the \"special\" drop-down.\n        $scope.addSpecialFilesystemFinished = function() {\n            if ($scope.dropdown === \"special\") {\n                $scope.dropdown = null;\n            }\n        };\n    }\n\n    function NodeAddSpecialFilesystemController($scope, MachinesManager) {\n\n        $scope.filesystem = new SpecialFilesystem();\n        $scope.description = null;  // Updated by watch.\n\n        $scope.$watch(\"filesystem\", function(filesystem) {\n            $scope.description = filesystem.describe();\n        }, true);\n\n        $scope.canMount = function() {\n            return $scope.filesystem.isValid();\n        };\n\n        $scope.mount = function() {\n            MachinesManager.mountSpecialFilesystem(\n                $scope.node, $scope.filesystem.fstype,\n                $scope.filesystem.mountPoint,\n                $scope.filesystem.mountOptions);\n            $scope.addSpecialFilesystemFinished();\n        };\n\n        $scope.cancel = function() {\n            $scope.filesystem = new SpecialFilesystem();\n            $scope.addSpecialFilesystemFinished();\n        };\n    }\n\n    angular.module(\"MAAS\").controller(\n        \"NodeFilesystemsController\", [\n            \"$scope\", NodeFilesystemsController\n        ]);\n\n    angular.module(\"MAAS\").controller(\n        \"NodeAddSpecialFilesystemController\", [\n            \"$scope\", \"MachinesManager\",\n            NodeAddSpecialFilesystemController\n        ]);\n\n}());\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Events Controller\n */\n\nangular.module('MAAS').controller('NodeEventsController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'ControllersManager', 'EventsManagerFactory',\n    'ManagerHelperService', 'ErrorService', function($scope, $rootScope,\n        $routeParams, $location, MachinesManager, ControllersManager,\n        EventsManagerFactory, ManagerHelperService, ErrorService) {\n\n        // Events manager that is loaded once the node is loaded.\n        var eventsManager = null;\n\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.node = null;\n        $scope.events = [];\n        $scope.eventsLoaded = false;\n        $scope.days = 1;\n\n        // Called once the node is loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            // Get the events manager and load it.\n            eventsManager = EventsManagerFactory.getManager(node.id);\n            $scope.events = eventsManager.getItems();\n            $scope.days = eventsManager.getMaximumDays();\n            eventsManager.loadItems().then(function() {\n                $scope.eventsLoaded = true;\n            });\n\n            // Update the title when the fqdn of the node changes.\n            $scope.$watch(\"node.fqdn\", function() {\n                $rootScope.title = $scope.node.fqdn + \" - events\";\n            });\n        }\n\n        // Return the nice text for the given event.\n        $scope.getEventText = function(event) {\n            var text = event.type.description;\n            if(angular.isString(event.description) &&\n                event.description.length > 0) {\n                text += \" - \" + event.description;\n            }\n            return text;\n        };\n\n        // Called to load more events.\n        $scope.loadMore = function() {\n            $scope.days += 1;\n            eventsManager.loadMaximumDays($scope.days);\n        };\n\n        if($location.path().indexOf('/controller') !== -1) {\n            $scope.nodesManager = ControllersManager;\n            $scope.type_name = 'controller';\n            $rootScope.page = 'controllers';\n        }else{\n            $scope.nodesManager = MachinesManager;\n            $scope.type_name = 'machine';\n            $rootScope.page = 'machines';\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n            // If redirected from the NodeDetailsController then the node\n            // will already be active. No need to set it active again.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n\n        // Destroy the events manager when the scope is destroyed. This is so\n        // the client will not recieve any more notifications about events\n        // for this node.\n        $scope.$on(\"$destroy\", function() {\n            if(angular.isObject(eventsManager)) {\n                eventsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Script Result Controller\n */\n\nangular.module('MAAS').controller('NodeResultController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'ControllersManager', 'NodeResultsManagerFactory',\n    'ManagerHelperService', 'ErrorService',\n    function($scope, $rootScope, $routeParams, $location, MachinesManager,\n             ControllersManager, NodeResultsManagerFactory,\n             ManagerHelperService, ErrorService) {\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.resultLoaded = false;\n        $scope.node = null;\n        $scope.output = 'combined';\n        $scope.result = null;\n\n        $scope.get_result_data = function(output) {\n            $scope.output = output;\n            $scope.data = \"Loading...\";\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            nodeResultsManager.get_result_data(\n                $scope.result.id, $scope.output).then(\n                    function(data) {\n                        if(data === '') {\n                            $scope.data = \"Empty file.\";\n                        }else{\n                            $scope.data = data;\n                        }\n                    });\n        };\n\n        // Called once the node is loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            // Get the NodeResultsManager and load it.\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            var requestedResult = parseInt($routeParams.id, 10);\n            nodeResultsManager.getItem(requestedResult).then(function(result) {\n                $scope.result = result;\n                $scope.get_result_data($scope.output);\n                $scope.resultLoaded = true;\n                $rootScope.title = $scope.node.fqdn + \" - \" +\n                    $scope.result.name;\n            });\n        }\n\n        // Update the title when the fqdn of the node changes.\n        $scope.$watch(\"node.fqdn\", function() {\n            if(angular.isObject($scope.node) &&\n               angular.isObject($scope.result)) {\n                $rootScope.title = $scope.node.fqdn + \" - \" +\n                    $scope.result.name;\n            }\n        });\n\n        if($location.path().indexOf(\"/controller\") !== -1) {\n            $scope.nodesManager = ControllersManager;\n            $scope.type_name = 'controller';\n            $rootScope.page = 'controllers';\n        }else{\n            $scope.nodesManager = MachinesManager;\n            $scope.type_name = 'machine';\n            $rootScope.page = 'machines';\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n            // If redirected from the NodeDetailsController then the node\n            // will already be active. No need to set it active again.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n\n        // Destroy the NodeResultsManager when the scope is destroyed. This is\n        // so the client will not recieve any more notifications about results\n        // from this node.\n        $scope.$on(\"$destroy\", function() {\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            if(angular.isObject(nodeResultsManager)) {\n                nodeResultsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Results Controller\n */\n\nangular.module('MAAS').controller('NodeResultsController', [\n    '$scope', '$routeParams', '$location', 'MachinesManager',\n    'ControllersManager', 'NodeResultsManagerFactory', 'ManagerHelperService',\n    'ErrorService',\n    function($scope, $routeParams, $location, MachinesManager,\n             ControllersManager, NodeResultsManagerFactory,\n             ManagerHelperService, ErrorService) {\n\n        // NodeResultsManager that is loaded once the node is loaded.\n        $scope.nodeResultsManager = null;\n        // References to manager data used in scope.\n        $scope.commissioning_results = null;\n        $scope.testing_results = null;\n        $scope.installation_results = null;\n        $scope.results = null;\n\n        // List of logs available.\n        $scope.logs = {\n            option: null,\n            availableOptions: []\n        };\n        // Log content being displayed.\n        $scope.logOutput = 'Loading...';\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.resultsLoaded = false;\n        $scope.node = null;\n\n        function updateLogs() {\n            var i;\n            var option;\n            var had_installation = $scope.logs.availableOptions.length === 3;\n            $scope.logs.availableOptions.length = 0;\n            // XXX ltrager 2017-12-01 - Only show the current installation log\n            // if the machine is deploying, deployed, or failed deploying. The\n            // logs page needs to be redesigned to show previous installation\n            // results.\n            if($scope.installation_results &&\n                    $scope.installation_results.length > 0 && (\n                        $scope.node.status_code === 6 ||\n                        $scope.node.status_code === 9 ||\n                        $scope.node.status_code === 11)) {\n                // If installation fails Curtin uploads a tar file of logs, the\n                // UI needs to display the text log file, not the tar.\n                for(i = 0; i < $scope.installation_results.length; i++) {\n                    if($scope.installation_results[i].name ===\n                            \"/tmp/install.log\") {\n                        $scope.logs.availableOptions.push({\n                            'title': 'Installation output',\n                            'id': $scope.installation_results[i].id\n                        });\n                        break;\n                    }\n                }\n            }\n            $scope.logs.availableOptions.push({\n                'title': 'Machine output (YAML)',\n                'id': 'summary_yaml'\n            });\n            $scope.logs.availableOptions.push({\n                'title': 'Machine output (XML)',\n                'id': 'summary_xml'\n            });\n            if(!had_installation &&\n               $scope.logs.availableOptions.length === 3) {\n                // A new installation log has appeared, show it.\n                $scope.logs.option = $scope.logs.availableOptions[0];\n            }else if(!$scope.selectedLog || (\n                had_installation && $scope.logs.length === 2)) {\n                // No longer in a deployed state.\n                $scope.logs.option = $scope.logs.availableOptions[0];\n            }\n        }\n\n        // Called once the node has loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n            // Get the NodeResultsManager and load it.\n            $scope.nodeResultsManager = NodeResultsManagerFactory.getManager(\n                node, $scope.section.area);\n            $scope.nodeResultsManager.loadItems().then(function() {\n                $scope.commissioning_results =\n                    $scope.nodeResultsManager.commissioning_results;\n                $scope.testing_results =\n                    $scope.nodeResultsManager.testing_results;\n                $scope.installation_results =\n                    $scope.nodeResultsManager.installation_results;\n                $scope.results = $scope.nodeResultsManager.results;\n                // Only load and monitor logs when on the logs page.\n                if($scope.section.area === \"logs\") {\n                    updateLogs();\n                    $scope.$watch(\"installation_results\", updateLogs, true);\n                    $scope.$watch(\n                        \"installation_results\", $scope.updateLogOutput, true);\n                }\n                $scope.resultsLoaded = true;\n            });\n        }\n\n        if($location.path().indexOf('/controller') !== -1 ){\n            $scope.nodesManager = ControllersManager;\n        } else {\n            $scope.nodesManager = MachinesManager;\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n                // If redirected from the NodeDetailsController then the node\n                // will already be active. No need to set it active again.\n                var activeNode = $scope.nodesManager.getActiveItem();\n                if(angular.isObject(activeNode) &&\n                   activeNode.system_id === $routeParams.system_id) {\n                    nodeLoaded(activeNode);\n                } else {\n                    $scope.nodesManager.setActiveItem(\n                        $routeParams.system_id).then(function(node) {\n                            nodeLoaded(node);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                }\n            });\n\n        $scope.updateLogOutput = function() {\n            $scope.logOutput = \"Loading...\";\n            if(!$scope.node) {\n                return;\n            }else if($scope.logs.option.id === 'summary_xml') {\n                $scope.nodesManager.getSummaryXML($scope.node).then(\n                    function(output) {\n                        $scope.logOutput = output;\n                    });\n            }else if($scope.logs.option.id === 'summary_yaml') {\n                $scope.nodesManager.getSummaryYAML($scope.node).then(\n                    function(output) {\n                        $scope.logOutput = output;\n                    });\n            } else {\n                var result = null;\n                var i;\n                // Find the installation result to be displayed.\n                for(i = 0; i < $scope.installation_results.length; i++) {\n                    if($scope.installation_results[i].id ===\n                       $scope.logs.option.id) {\n                        result = $scope.installation_results[i];\n                        break;\n                    }\n                }\n                switch(result.status) {\n                    case 0:\n                        $scope.logOutput = \"System is booting...\";\n                        break;\n                    case 1:\n                        $scope.logOutput = \"Installation has begun!\";\n                        break;\n                    case 2:\n                        $scope.nodeResultsManager.get_result_data(\n                            result.id, 'combined').then(function(output) {\n                                if(output === '') {\n                                    $scope.logOutput =\n                                        \"Installation has succeeded but \" +\n                                        \"no output was given.\";\n                                } else {\n                                    $scope.logOutput = output;\n                                }\n                            });\n                        break;\n                    case 3:\n                        $scope.nodeResultsManager.get_result_data(\n                            result.id, 'combined').then(function(output) {\n                                if(output === '') {\n                                    $scope.logOutput =\n                                        \"Installation has failed and no \" +\n                                        \"output was given.\";\n                                } else {\n                                    $scope.logOutput = output;\n                                }\n                            });\n                        break;\n                    case 4:\n                        $scope.logOutput =\n                            \"Installation failed after 40 minutes.\";\n                        break;\n                    case 5:\n                        $scope.logOutput = \"Installation was aborted.\";\n                        break;\n                    default:\n                        $scope.logOutput = \"BUG: Unknown log status \" +\n                            result.status;\n                        break;\n                }\n            }\n        };\n\n        $scope.loadHistory = function(result) {\n            result.showing_results = false;\n            // History has already been loaded, no need to request it.\n            if(angular.isArray(result.history_list)) {\n                result.showing_history = true;\n                return;\n            }\n            result.loading_history = true;\n            $scope.nodeResultsManager.get_history(result.id).then(\n                function(history) {\n                    result.history_list = history;\n                    result.loading_history = false;\n                    result.showing_history = true;\n                });\n        };\n\n        // Destroy the NodeResultsManager when the scope is destroyed. This is\n        // so the client will not recieve any more notifications about results\n        // from this node.\n        $scope.$on(\"$destroy\", function() {\n            if(angular.isObject($scope.nodeResultsManager)) {\n                $scope.nodeResultsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes List Controller\n */\n\nangular.module('MAAS').controller('NodesListController', [\n    '$scope', '$interval', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'DevicesManager', 'ControllersManager',\n    'GeneralManager', 'ManagerHelperService', 'SearchService',\n    'ZonesManager', 'UsersManager', 'ServicesManager', 'ScriptsManager',\n    'SwitchesManager', 'ResourcePoolsManager',\n    function($scope, $interval, $rootScope, $routeParams, $location,\n        MachinesManager, DevicesManager, ControllersManager, GeneralManager,\n        ManagerHelperService, SearchService, ZonesManager, UsersManager,\n        ServicesManager, ScriptsManager, SwitchesManager,\n        ResourcePoolsManager) {\n\n        // Mapping of device.ip_assignment to viewable text.\n        var DEVICE_IP_ASSIGNMENT = {\n            external: \"External\",\n            dynamic: \"Dynamic\",\n            \"static\": \"Static\"\n        };\n\n        // Set title and page.\n        $rootScope.title = \"Machines\";\n        $rootScope.page = \"machines\";\n\n        // Set initial values.\n        $scope.MAAS_config = MAAS_config;\n        $scope.machines = MachinesManager.getItems();\n        $scope.zones = ZonesManager.getItems();\n        $scope.pools = ResourcePoolsManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.switches = SwitchesManager.getItems();\n        $scope.showswitches = $routeParams.switches === 'on';\n        $scope.currentpage = \"machines\";\n        $scope.osinfo = {};\n        $scope.scripts = ScriptsManager.getItems();\n        $scope.loading = true;\n\n        $scope.tabs = {};\n        $scope.pluralize = function(tab) {\n            var singulars = {\n                'machines': 'machine',\n                'switches': 'switch',\n                'devices': 'device',\n                'controllers': 'controller',\n            };\n            var verb = singulars[tab];\n            if ($scope.tabs[tab].selectedItems.length > 1) {\n                verb = tab;\n            };\n            return verb;\n        };\n        // Machines tab.\n        $scope.tabs.machines = {};\n        $scope.tabs.machines.pagetitle = \"Machines\";\n        $scope.tabs.machines.currentpage = \"machines\";\n        $scope.tabs.machines.manager = MachinesManager;\n        $scope.tabs.machines.previous_search = \"\";\n        $scope.tabs.machines.search = \"\";\n        $scope.tabs.machines.searchValid = true;\n        $scope.tabs.machines.selectedItems = MachinesManager.getSelectedItems();\n        $scope.tabs.machines.metadata = MachinesManager.getMetadata();\n        $scope.tabs.machines.filters = SearchService.getEmptyFilter();\n        $scope.tabs.machines.actionOption = null;\n        $scope.tabs.machines.takeActionOptions = [];\n        $scope.tabs.machines.actionErrorCount = 0;\n        $scope.tabs.machines.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.machines.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.tabs.machines.zoneSelection = null;\n        $scope.tabs.machines.poolSelection = null;\n        $scope.tabs.machines.poolAction = 'select-pool';\n        $scope.tabs.machines.newPool = {};\n        $scope.tabs.machines.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.tabs.machines.releaseOptions = {};\n        $scope.tabs.machines.commissioningSelection = [];\n        $scope.tabs.machines.testSelection = [];\n\n        // Pools tab.\n        $scope.tabs.pools = {};\n        $scope.tabs.pools.pagetitle = \"Pools\";\n        $scope.tabs.pools.currentpage = \"pools\";\n        $scope.tabs.pools.manager = ResourcePoolsManager;\n        $scope.tabs.pools.actionOption = false;\n        $scope.tabs.pools.newPool = {};\n        $scope.addPool = function() {\n            $scope.tabs.pools.actionOption = true;\n        };\n        $scope.cancelAddPool = function() {\n            $scope.tabs.pools.actionOption = false;\n            $scope.tabs.pools.newPool = {};\n        };\n        $scope.tabs.pools.activeTarget = null;\n        $scope.tabs.pools.activeTargetAction = null;\n        $scope.tabs.pools.actionErrorMessage = null;\n        $scope.tabs.pools.initiatePoolAction = function(pool, action) {\n            let tab = $scope.tabs.pools;\n            // reset state in case of switching between deletes\n            tab.cancelPoolAction();\n            tab.activeTargetAction = action;\n            tab.activeTarget = pool;\n        };\n        $scope.tabs.pools.cancelPoolAction = function() {\n            let tab = $scope.tabs.pools;\n            tab.activeTargetAction = null;\n            tab.activeTarget = null;\n            tab.actionErrorMessage = null;\n        };\n        $scope.tabs.pools.isPoolAction = function(pool, action) {\n            let tab = $scope.tabs.pools;\n            return (\n                action === undefined || tab.activeTargetAction === action) &&\n                tab.activeTarget !== null &&\n                tab.activeTarget.id === pool.id;\n        };\n        $scope.tabs.pools.actionConfirmDeletePool = function() {\n            let tab = $scope.tabs.pools;\n            tab.manager.deleteItem(tab.activeTarget).then(\n                tab.cancelPoolAction,\n                function(error) {\n                    $scope.tabs.pools.actionErrorMessage = error;\n                });\n        };\n\n        $scope.tabs.pools.isDefaultPool = function(pool) {\n            return pool.id === 0;\n        };\n\n        // Device tab.\n        $scope.tabs.devices = {};\n        $scope.tabs.devices.pagetitle = \"Devices\";\n        $scope.tabs.devices.currentpage = \"devices\";\n        $scope.tabs.devices.manager = DevicesManager;\n        $scope.tabs.devices.previous_search = \"\";\n        $scope.tabs.devices.search = \"\";\n        $scope.tabs.devices.searchValid = true;\n        $scope.tabs.devices.selectedItems = DevicesManager.getSelectedItems();\n        $scope.tabs.devices.filtered_items = [];\n        $scope.tabs.devices.predicate = 'fqdn';\n        $scope.tabs.devices.allViewableChecked = false;\n        $scope.tabs.devices.metadata = DevicesManager.getMetadata();\n        $scope.tabs.devices.filters = SearchService.getEmptyFilter();\n        $scope.tabs.devices.column = 'fqdn';\n        $scope.tabs.devices.actionOption = null;\n        $scope.tabs.devices.takeActionOptions = [];\n        $scope.tabs.devices.actionErrorCount = 0;\n        $scope.tabs.devices.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.devices.zoneSelection = null;\n        $scope.tabs.devices.poolSelection = null;\n        $scope.tabs.devices.poolAction = 'select-pool';\n        $scope.tabs.devices.newPool = {};\n\n        // Controller tab.\n        $scope.tabs.controllers = {};\n        $scope.tabs.controllers.pagetitle = \"Controllers\";\n        $scope.tabs.controllers.currentpage = \"controllers\";\n        $scope.tabs.controllers.manager = ControllersManager;\n        $scope.tabs.controllers.previous_search = \"\";\n        $scope.tabs.controllers.search = \"\";\n        $scope.tabs.controllers.searchValid = true;\n        $scope.tabs.controllers.selectedItems =\n            ControllersManager.getSelectedItems();\n        $scope.tabs.controllers.filtered_items = [];\n        $scope.tabs.controllers.predicate = 'fqdn';\n        $scope.tabs.controllers.allViewableChecked = false;\n        $scope.tabs.controllers.metadata = ControllersManager.getMetadata();\n        $scope.tabs.controllers.filters = SearchService.getEmptyFilter();\n        $scope.tabs.controllers.column = 'fqdn';\n        $scope.tabs.controllers.actionOption = null;\n        // Rack controllers contain all options\n        $scope.tabs.controllers.takeActionOptions = [];\n        $scope.tabs.controllers.actionErrorCount = 0;\n        $scope.tabs.controllers.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.controllers.zoneSelection = null;\n        $scope.tabs.controllers.poolSelection = null;\n        $scope.tabs.controllers.poolAction = 'select-pool';\n        $scope.tabs.controllers.newPool = {};\n        $scope.tabs.controllers.syncStatuses = {};\n        $scope.tabs.controllers.addController = false;\n        $scope.tabs.controllers.registerUrl = MAAS_config.register_url;\n        $scope.tabs.controllers.registerSecret = MAAS_config.register_secret;\n        $scope.tabs.controllers.poolSelection = null;\n        $scope.tabs.controllers.poolAction = 'select-pool';\n        $scope.tabs.controllers.newPool = {};\n\n        // Switch tab.\n        $scope.tabs.switches = {};\n        $scope.tabs.switches.pagetitle = \"Switches\";\n        $scope.tabs.switches.currentpage = \"switches\";\n        $scope.tabs.switches.manager = SwitchesManager;\n        $scope.tabs.switches.previous_search = \"\";\n        $scope.tabs.switches.search = \"\";\n        $scope.tabs.switches.searchValid = true;\n        $scope.tabs.switches.selectedItems = SwitchesManager.getSelectedItems();\n        $scope.tabs.switches.predicate = 'fqdn';\n        $scope.tabs.switches.allViewableChecked = false;\n        $scope.tabs.switches.metadata = SwitchesManager.getMetadata();\n        $scope.tabs.switches.filters = SearchService.getEmptyFilter();\n        $scope.tabs.switches.column = 'fqdn';\n        $scope.tabs.switches.actionOption = null;\n        $scope.tabs.switches.takeActionOptions = [];\n        $scope.tabs.switches.actionErrorCount = 0;\n        $scope.tabs.switches.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.switches.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.tabs.switches.zoneSelection = null;\n        $scope.tabs.switches.poolSelection = null;\n        $scope.tabs.switches.poolAction = 'select-pool';\n        $scope.tabs.switches.newPool = {};\n        $scope.tabs.switches.commissioningSelection = [];\n        $scope.tabs.switches.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.tabs.switches.releaseOptions = {};\n\n\n        // Options for add hardware dropdown.\n        $scope.addHardwareOption = null;\n        $scope.addHardwareOptions = [\n            {\n                name: \"machine\",\n                title: \"Machine\"\n            },\n            {\n                name: \"chassis\",\n                title: \"Chassis\"\n            }\n        ];\n\n        // This will hold the AddHardwareController once it is initialized.\n        // The controller will set this variable as it's always a child of\n        // this scope.\n        $scope.addHardwareScope = null;\n\n        // This will hold the AddDeviceController once it is initialized.\n        // The controller will set this variable as it's always a child of\n        // this scope.\n        $scope.addDeviceScope = null;\n\n        // When the addHardwareScope is hidden it will emit this event. We\n        // clear the call to action button, so it can be used again.\n        $scope.$on(\"addHardwareHidden\", function() {\n            $scope.addHardwareOption = null;\n        });\n\n        // Return true if the tab is in viewing selected mode.\n        function isViewingSelected(tab) {\n            var search = $scope.tabs[tab].search.toLowerCase();\n            return search === \"in:(selected)\" || search === \"in:selected\";\n        }\n\n        // Sets the search bar to only show selected.\n        function enterViewSelected(tab) {\n            $scope.tabs[tab].previous_search = $scope.tabs[tab].search;\n            $scope.tabs[tab].search = \"in:(Selected)\";\n        }\n\n        // Clear search bar from viewing selected.\n        function leaveViewSelected(tab) {\n            if(isViewingSelected(tab)) {\n                $scope.tabs[tab].search = $scope.tabs[tab].previous_search;\n                $scope.updateFilters(tab);\n            }\n        }\n\n        // Called to update `allViewableChecked`.\n        function updateAllViewableChecked(tab) {\n            // Not checked when the filtered nodes are empty.\n            if($scope.tabs[tab].filtered_items.length === 0) {\n                $scope.tabs[tab].allViewableChecked = false;\n                return;\n            }\n\n            // Loop through all filtered nodes and see if all are checked.\n            var i;\n            for(i = 0; i < $scope.tabs[tab].filtered_items.length; i++) {\n                if(!$scope.tabs[tab].filtered_items[i].$selected) {\n                    $scope.tabs[tab].allViewableChecked = false;\n                    return;\n                }\n            }\n            $scope.tabs[tab].allViewableChecked = true;\n        }\n\n        function clearAction(tab) {\n            resetActionProgress(tab);\n            leaveViewSelected(tab);\n            $scope.tabs[tab].actionOption = null;\n            $scope.tabs[tab].zoneSelection = null;\n            $scope.tabs[tab].poolSelection = null;\n            $scope.tabs[tab].poolAction = 'select-pool';\n            $scope.tabs[tab].newPool = {};\n            if(tab === \"machines\" || tab === \"switches\") {\n                // Possible for this to be called before the osSelect\n                // direction is initialized. In that case it has not\n                // created the $reset function on the model object.\n                if(angular.isFunction(\n                    $scope.tabs[tab].osSelection.$reset)) {\n                    $scope.tabs[tab].osSelection.$reset();\n                }\n                $scope.tabs[tab].commissionOptions.enableSSH = false;\n                $scope.tabs[tab].commissionOptions.skipNetworking = false;\n                $scope.tabs[tab].commissionOptions.skipStorage = false;\n                $scope.tabs[tab].commissionOptions.updateFirmware = false;\n                $scope.tabs[tab].commissionOptions.configureHBA = false;\n            }\n            $scope.tabs[tab].commissioningSelection = [];\n            $scope.tabs[tab].testSelection = [];\n        }\n\n        // Clear the action if required.\n        function shouldClearAction(tab) {\n            if($scope.tabs[tab].selectedItems.length === 0) {\n                clearAction(tab);\n            }\n            if($scope.tabs[tab].actionOption && !isViewingSelected(tab)) {\n                $scope.tabs[tab].actionOption = null;\n            }\n        }\n\n        // Called when the filtered_items are updated. Checks if the\n        // filtered_items are empty and if the search still matches the\n        // previous search. This will reset the search when no nodes match\n        // the current filter.\n        function removeEmptyFilter(tab) {\n            if($scope.tabs[tab].filtered_items.length === 0 &&\n                $scope.tabs[tab].search !== \"\" &&\n                $scope.tabs[tab].search === $scope.tabs[tab].previous_search) {\n                $scope.tabs[tab].search = \"\";\n                $scope.updateFilters(tab);\n            }\n        }\n\n        // Update the number of selected items which have an error based on the\n        // current selected action.\n        function updateActionErrorCount(tab) {\n            var i;\n            $scope.tabs[tab].actionErrorCount = 0;\n            for(i = 0; i < $scope.tabs[tab].selectedItems.length; i++) {\n                var supported = $scope.supportsAction(\n                    $scope.tabs[tab].selectedItems[i], tab);\n                if(!supported) {\n                    $scope.tabs[tab].actionErrorCount += 1;\n                }\n                $scope.tabs[tab].selectedItems[i].action_failed = false;\n            }\n        }\n\n        // Reset actionProgress on tab to zero.\n        function resetActionProgress(tab) {\n            var progress = $scope.tabs[tab].actionProgress;\n            progress.completed = progress.total = 0;\n            progress.errors = {};\n            progress.showing_confirmation = false;\n            progress.affected_nodes = 0;\n        }\n\n        // Add error to action progress and group error messages by nodes.\n        function addErrorToActionProgress(tab, error, node) {\n            var progress = $scope.tabs[tab].actionProgress;\n            progress.completed += 1;\n            var nodes = progress.errors[error];\n            if(angular.isUndefined(nodes)) {\n                progress.errors[error] = [node];\n            } else {\n                nodes.push(node);\n            }\n        }\n\n        // After an action has been performed check if we can leave all nodes\n        // selected or if an error occured and we should only show the failed\n        // nodes.\n        function updateSelectedItems(tab) {\n            if(!$scope.hasActionsFailed(tab)) {\n                if(!$scope.hasActionsInProgress(tab)) {\n                     clearAction(tab);\n                     enterViewSelected(tab);\n                }\n                return;\n            }\n            angular.forEach($scope.tabs[tab].manager.getItems(),\n                    function(node) {\n                if(node.action_failed === false) {\n                    $scope.tabs[tab].manager.unselectItem(node.system_id);\n                }\n            });\n        }\n\n        // Toggles between the current tab.\n        $scope.toggleTab = function(tab) {\n            $rootScope.title = $scope.tabs[tab].pagetitle;\n            $rootScope.page = tab;\n            $scope.currentpage = tab;\n\n            switch(tab) {\n            case 'machines':\n                $scope.osinfo = GeneralManager.getData('osinfo');\n                $scope.tabs.machines.takeActionOptions = GeneralManager.getData(\n                    'machine_actions');\n                break;\n            case 'devices':\n                $scope.tabs.devices.takeActionOptions = GeneralManager.getData(\n                    'device_actions');\n                break;\n            case 'controllers':\n                $scope.tabs.controllers.takeActionOptions =\n                    GeneralManager.getData('rack_controller_actions');\n                break;\n            case 'switches':\n                // XXX: Which actions should there be?\n                $scope.tabs.switches.takeActionOptions = GeneralManager.getData(\n                    \"machine_actions\");\n                break;\n            }\n        };\n\n        // Clear the search bar.\n        $scope.clearSearch = function(tab) {\n            $scope.tabs[tab].search = \"\";\n            $scope.updateFilters(tab);\n        };\n\n        // Mark a node as selected or unselected.\n        $scope.toggleChecked = function(node, tab) {\n            if(tab !== 'machines' && tab !== 'switches') {\n                if($scope.tabs[tab].manager.isSelected(node.system_id)) {\n                    $scope.tabs[tab].manager.unselectItem(node.system_id);\n                } else {\n                    $scope.tabs[tab].manager.selectItem(node.system_id);\n                }\n                updateAllViewableChecked(tab);\n            }\n            updateActionErrorCount(tab);\n            shouldClearAction(tab);\n        };\n\n        // Select all viewable nodes or deselect all viewable nodes.\n        $scope.toggleCheckAll = function(tab) {\n            if(tab !== 'machines' && tab !== 'switches') {\n                if($scope.tabs[tab].allViewableChecked) {\n                    angular.forEach(\n                        $scope.tabs[tab].filtered_items, function(node) {\n                            $scope.tabs[tab].manager.unselectItem(\n                                node.system_id);\n                    });\n                } else {\n                    angular.forEach(\n                        $scope.tabs[tab].filtered_items, function(node) {\n                            $scope.tabs[tab].manager.selectItem(\n                                node.system_id);\n                    });\n                }\n                updateAllViewableChecked(tab);\n            }\n            updateActionErrorCount(tab);\n            shouldClearAction(tab);\n        };\n\n        $scope.onNodeListingChanged = function(nodes, tab) {\n            if(nodes.length === 0 &&\n                $scope.tabs[tab].search !== \"\" &&\n                $scope.tabs[tab].search === $scope.tabs[tab].previous_search) {\n                $scope.tabs[tab].search = \"\";\n                $scope.updateFilters(tab);\n            }\n        };\n\n        // When the filtered nodes change update if all check buttons\n        // should be checked or not.\n        $scope.$watchCollection(\"tabs.devices.filtered_items\", function() {\n            updateAllViewableChecked(\"devices\");\n            removeEmptyFilter(\"devices\");\n        });\n        $scope.$watchCollection(\"tabs.controllers.filtered_items\", function() {\n            updateAllViewableChecked(\"controllers\");\n            removeEmptyFilter(\"controllers\");\n        });\n\n        // Shows the current selection.\n        $scope.showSelected = function(tab) {\n            enterViewSelected(tab);\n            $scope.updateFilters(tab);\n        };\n\n        // Adds or removes a filter to the search.\n        $scope.toggleFilter = function(type, value, tab) {\n            // Don't allow a filter to be changed when an action is\n            // in progress.\n            if(angular.isObject($scope.tabs[tab].actionOption)) {\n                return;\n            }\n            $scope.tabs[tab].filters = SearchService.toggleFilter(\n                $scope.tabs[tab].filters, type, value, true);\n            $scope.tabs[tab].search = SearchService.filtersToString(\n                $scope.tabs[tab].filters);\n        };\n\n        // Return True if the filter is active.\n        $scope.isFilterActive = function(type, value, tab) {\n            return SearchService.isFilterActive(\n                $scope.tabs[tab].filters, type, value, true);\n        };\n\n        // Update the filters object when the search bar is updated.\n        $scope.updateFilters = function(tab) {\n            var filters = SearchService.getCurrentFilters(\n                $scope.tabs[tab].search);\n            if(filters === null) {\n                $scope.tabs[tab].filters = SearchService.getEmptyFilter();\n                $scope.tabs[tab].searchValid = false;\n            } else {\n                $scope.tabs[tab].filters = filters;\n                $scope.tabs[tab].searchValid = true;\n            }\n            shouldClearAction(tab);\n        };\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate, tab) {\n            $scope.tabs[tab].predicate = predicate;\n            $scope.tabs[tab].reverse = !$scope.tabs[tab].reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        $scope.selectColumnOrSort = function(predicate, tab) {\n            if($scope.tabs[tab].column !== predicate) {\n                $scope.tabs[tab].column = predicate;\n            } else {\n                $scope.sortTable(predicate, tab);\n            }\n        };\n\n        // Return True if the node supports the action.\n        $scope.supportsAction = function(node, tab) {\n            if(!$scope.tabs[tab].actionOption) {\n                return true;\n            }\n            return node.actions.indexOf(\n                $scope.tabs[tab].actionOption.name) >= 0;\n        };\n\n        // Called when the action option gets changed.\n        $scope.actionOptionSelected = function(tab) {\n            updateActionErrorCount(tab);\n            enterViewSelected(tab);\n\n            // Hide the add hardware/device section.\n            if (tab === 'machines') {\n                if(angular.isObject($scope.addHardwareScope)) {\n                    $scope.addHardwareScope.hide();\n                }\n            } else if(tab === 'devices') {\n                if(angular.isObject($scope.addDeviceScope)) {\n                    $scope.addDeviceScope.hide();\n                }\n            }\n        };\n\n        // Return True if there is an action error.\n        $scope.isActionError = function(tab) {\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                $scope.tabs[tab].actionErrorCount === 0 &&\n                ($scope.osinfo.osystems.length === 0 ||\n                UsersManager.getSSHKeyCount() === 0)) {\n                return true;\n            }\n            return $scope.tabs[tab].actionErrorCount !== 0;\n        };\n\n        // Return True if unable to deploy because of missing images.\n        $scope.isDeployError = function(tab) {\n            if($scope.tabs[tab].actionErrorCount !== 0) {\n                return false;\n            }\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                $scope.osinfo.osystems.length === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Return True if unable to deploy because of missing ssh keys.\n        $scope.isSSHKeyError = function(tab) {\n            if($scope.tabs[tab].actionErrorCount !== 0) {\n                return false;\n            }\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                UsersManager.getSSHKeyCount() === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Called when the current action is cancelled.\n        $scope.actionCancel = function(tab) {\n            resetActionProgress(tab);\n            leaveViewSelected(tab);\n            $scope.tabs[tab].actionOption = null;\n        };\n\n        // Perform the action on all nodes.\n        $scope.actionGo = function(tabName) {\n            var tab = $scope.tabs[tabName];\n            var extra = {};\n            var i;\n            // Set deploy parameters if a deploy or set zone action.\n            if(tab.actionOption.name === \"deploy\" &&\n               angular.isString(tab.osSelection.osystem) &&\n               angular.isString(tab.osSelection.release)) {\n\n                // Set extra. UI side the release is structured os/release, but\n                // when it is sent over the websocket only the \"release\" is\n                // sent.\n                extra.osystem = tab.osSelection.osystem;\n                var release = tab.osSelection.release;\n                release = release.split(\"/\");\n                release = release[release.length-1];\n                extra.distro_series = release;\n                // hwe_kernel is optional so only include it if its specified\n                if(angular.isString(tab.osSelection.hwe_kernel) &&\n                   (tab.osSelection.hwe_kernel.indexOf('hwe-') >= 0 ||\n                    tab.osSelection.hwe_kernel.indexOf('ga-') >= 0)) {\n                    extra.hwe_kernel = tab.osSelection.hwe_kernel;\n                }\n            } else if(tab.actionOption.name === \"set-zone\" &&\n                angular.isNumber(tab.zoneSelection.id)) {\n                // Set the zone parameter.\n                extra.zone_id = tab.zoneSelection.id;\n            } else if(tab.actionOption.name === \"set-pool\") {\n                if ((tab.poolAction === 'create-pool') &&\n                    (tab.newPool.name !== undefined)) {\n                    extra.new_pool = tab.newPool;\n                } else if (angular.isNumber(tab.poolSelection.id)) {\n                    // Set the pool parameter.\n                    extra.pool_id = tab.poolSelection.id;\n                }\n            } else if(tab.actionOption.name === \"commission\") {\n                // Set the commission options.\n                extra.enable_ssh = tab.commissionOptions.enableSSH;\n                extra.skip_networking = tab.commissionOptions.skipNetworking;\n                extra.skip_storage = tab.commissionOptions.skipStorage;\n                extra.commissioning_scripts = [];\n                for(i=0;i<tab.commissioningSelection.length;i++) {\n                    extra.commissioning_scripts.push(\n                        tab.commissioningSelection[i].id);\n                }\n                if(tab.commissionOptions.updateFirmware) {\n                    extra.commissioning_scripts.push('update_firmware')\n                }\n                if(tab.commissionOptions.configureHBA) {\n                    extra.commissioning_scripts.push('configure_hba')\n                }\n                if(extra.commissioning_scripts.length === 0) {\n                    // Tell the region not to run any custom commissioning\n                    // scripts.\n                    extra.commissioning_scripts.push('none');\n                }\n                extra.testing_scripts = [];\n                for(i=0;i<tab.testSelection.length;i++) {\n                    extra.testing_scripts.push(\n                        tab.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if(tab.actionOption.name === \"test\") {\n                if(!tab.actionProgress.showing_confirmation) {\n                    var progress = tab.actionProgress;\n                    for(i=0;i<tab.selectedItems.length;i++) {\n                        if(tab.selectedItems[i].status_code === 6)\n                        {\n                            progress.showing_confirmation = true;\n                            progress.affected_nodes++;\n                        }\n                    }\n                    if(tab.actionProgress.affected_nodes != 0) {\n                        return;\n                    }\n                }\n                // Set the test options.\n                extra.enable_ssh = tab.commissionOptions.enableSSH;\n                extra.testing_scripts = [];\n                for(i=0;i<tab.testSelection.length;i++) {\n                    extra.testing_scripts.push(\n                        tab.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if(tab.actionOption.name === \"release\") {\n                // Set the release options.\n                extra.erase = tab.releaseOptions.erase;\n                extra.secure_erase = tab.releaseOptions.secureErase;\n                extra.quick_erase = tab.releaseOptions.quickErase;\n            }\n\n            // Setup actionProgress.\n            resetActionProgress(tabName);\n            tab.actionProgress.total = tab.selectedItems.length;\n\n            // Perform the action on all selected items.\n            angular.forEach(tab.selectedItems, function(node) {\n                tab.manager.performAction(\n                    node, tab.actionOption.name,\n                    extra).then(function() {\n                        tab.actionProgress.completed += 1;\n                        node.action_failed = false;\n                        updateSelectedItems(tabName);\n                    }, function(error) {\n                        addErrorToActionProgress(tabName, error, node);\n                        node.action_failed = true;\n                        updateSelectedItems(tabName);\n                    });\n            });\n        };\n\n        // Returns true when actions are being performed.\n        $scope.hasActionsInProgress = function(tab) {\n            var progress = $scope.tabs[tab].actionProgress;\n            return progress.total > 0 && progress.completed !== progress.total;\n        };\n\n        // Returns true if any of the actions have failed.\n        $scope.hasActionsFailed = function(tab) {\n            return Object.keys(\n                $scope.tabs[tab].actionProgress.errors).length > 0;\n        };\n\n        // Called to when the addHardwareOption has changed.\n        $scope.addHardwareOptionChanged = function() {\n            if($scope.addHardwareOption) {\n                $scope.addHardwareScope.show(\n                    $scope.addHardwareOption.name);\n            }\n        };\n\n        // Called when the add device button is pressed.\n        $scope.addDevice = function() {\n            $scope.addDeviceScope.show();\n        };\n\n        // Called when the cancel add device button is pressed.\n        $scope.cancelAddDevice = function() {\n            $scope.addDeviceScope.cancel();\n        };\n\n        // Get the display text for device ip assignment type.\n        $scope.getDeviceIPAssignment = function(ipAssignment) {\n            return DEVICE_IP_ASSIGNMENT[ipAssignment];\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        $scope.hasCustomCommissioningScripts = function() {\n            var i;\n            for(i=0;i<$scope.scripts.length;i++) {\n                if($scope.scripts[i].script_type === 0) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Reload osinfo when the page reloads\n        $scope.$on(\"$routeUpdate\", function () {\n            GeneralManager.loadItems([\"osinfo\"]);\n        });\n\n        // Switch to the specified tab, if specified.\n        angular.forEach(\n            [\"machines\", \"pools\", \"devices\", \"controllers\", \"switches\"],\n            function(node_type) {\n                if($location.path().indexOf(\"/\" + node_type) !== -1) {\n                    $scope.toggleTab(node_type);\n                }\n            });\n\n        // The ScriptsManager is only needed for selecting testing or\n        // commissioning scripts.\n        var page_managers = [$scope.tabs[$scope.currentpage].manager];\n        if($scope.currentpage === \"machines\" ||\n           $scope.currentpage === \"controllers\") {\n            page_managers.push(ScriptsManager);\n        }\n\n        // Load the required managers for this controller. The ServicesManager\n        // is required by the maasControllerStatus directive that is used\n        // in the partial for this controller.\n        ManagerHelperService.loadManagers($scope, [\n            GeneralManager, ZonesManager, UsersManager, ResourcePoolsManager,\n            ServicesManager].concat(page_managers)).then(function() {\n                $scope.loading = false;\n            });\n\n\n        // Stop polling and save the current filter when the scope is destroyed.\n        $scope.$on(\"$destroy\", function() {\n            $interval.cancel($scope.statusPoll);\n            SearchService.storeFilters(\n                \"machines\", $scope.tabs.machines.filters);\n            SearchService.storeFilters(\"devices\", $scope.tabs.devices.filters);\n            SearchService.storeFilters(\n                \"controllers\", $scope.tabs.controllers.filters);\n            SearchService.storeFilters(\n                \"switches\", $scope.tabs.switches.filters);\n        });\n\n        // Restore the filters if any saved.\n        var machinesFilter = SearchService.retrieveFilters(\"machines\");\n        if(angular.isObject(machinesFilter)) {\n            $scope.tabs.machines.search = SearchService.filtersToString(\n                machinesFilter);\n            $scope.updateFilters(\"machines\");\n        }\n        var devicesFilter = SearchService.retrieveFilters(\"devices\");\n        if(angular.isObject(devicesFilter)) {\n            $scope.tabs.devices.search = SearchService.filtersToString(\n                devicesFilter);\n            $scope.updateFilters(\"devices\");\n        }\n        var controllersFilter = SearchService.retrieveFilters(\"controllers\");\n        if(angular.isObject(controllersFilter)) {\n            $scope.tabs.controllers.search = SearchService.filtersToString(\n                controllersFilter);\n            $scope.updateFilters(\"controllers\");\n        }\n        var switchesFilter = SearchService.retrieveFilters(\"switches\");\n        if(angular.isObject(switchesFilter)) {\n            $scope.tabs.switches.search = SearchService.filtersToString(\n                switchesFilter);\n            $scope.updateFilters(\"switches\");\n        }\n\n        // Set the query if the present in $routeParams.\n        var query = $routeParams.query;\n        if(angular.isString(query)) {\n            $scope.tabs[$scope.currentpage].search = query;\n            $scope.updateFilters($scope.currentpage);\n        }\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pod Details Controller\n */\n\nangular.module('MAAS').controller('PodDetailsController', [\n    '$scope', '$rootScope', '$location', '$routeParams',\n    'PodsManager', 'GeneralManager', 'UsersManager', 'DomainsManager',\n    'ZonesManager', 'MachinesManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $location, $routeParams,\n        PodsManager, GeneralManager, UsersManager, DomainsManager,\n        ZonesManager, MachinesManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"pods\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.pod = null;\n        $scope.podManager = PodsManager;\n        $scope.action = {\n          option: null,\n          options: [\n            {\n              name: 'refresh',\n              title: 'Refresh',\n              sentence: 'refresh',\n              operation: angular.bind(PodsManager, PodsManager.refresh)\n            },\n            {\n              name: 'delete',\n              title: 'Delete',\n              sentence: 'delete',\n              operation: angular.bind(PodsManager, PodsManager.deleteItem)\n            }\n          ],\n          inProgress: false,\n          error: null\n        };\n        $scope.compose = {\n          action: {\n            name: 'compose',\n            title: 'Compose',\n            sentence: 'compose'\n          },\n          obj: {\n            storage: [{\n              type: 'local',\n              size: 8,\n              tags: [],\n              boot: true\n            }]\n          }\n        };\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.domains = DomainsManager.getItems();\n        $scope.zones = ZonesManager.getItems();\n        $scope.section = {\n          area: 'summary'\n        };\n        $scope.machinesSearch = 'pod-id:=invalid';\n        $scope.editing = false;\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If power_types exist then a rack controller is connected.\n            return $scope.power_types.length > 0;\n        };\n\n        // Return true when the edit buttons can be clicked.\n        $scope.canEdit = function() {\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser());\n        };\n\n        // Called to edit the pod configuration.\n        $scope.editPodConfiguration = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.editing = true;\n        };\n\n        // Called when the cancel or save button is pressed.\n        $scope.exitEditPodConfiguration = function() {\n            $scope.editing = false;\n        };\n\n        // Return true if there is an action error.\n        $scope.isActionError = function() {\n            return $scope.action.error !== null;\n        };\n\n        // Called when the action.option has changed.\n        $scope.actionOptionChanged = function() {\n            // Clear the action error.\n            $scope.action.error = null;\n        };\n\n        // Cancel the action.\n        $scope.actionCancel = function() {\n            $scope.action.option = null;\n            $scope.action.error = null;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            $scope.action.inProgress = true;\n            $scope.action.option.operation($scope.pod).then(function() {\n                  // If the action was delete, then go back to listing.\n                  if($scope.action.option.name === \"delete\") {\n                      $location.path(\"/pods\");\n                  }\n                  $scope.action.inProgress = false;\n                  $scope.action.option = null;\n                  $scope.action.error = null;\n              }, function(error) {\n                  $scope.action.inProgress = false;\n                  $scope.action.error = error;\n              });\n        };\n\n        // Return the title of the pod type.\n        $scope.getPodTypeTitle = function() {\n            var i;\n            for(i = 0; i < $scope.power_types.length; i++) {\n                var power_type = $scope.power_types[i];\n                if(power_type.name === $scope.pod.type) {\n                    return power_type.description;\n                }\n            }\n            return $scope.pod.type;\n        };\n\n        // Returns true if the pod is composable.\n        $scope.canCompose = function() {\n            if(angular.isObject($scope.pod)) {\n                return ($scope.isSuperUser() &&\n                    $scope.pod.capabilities.indexOf('composable') >= 0);\n            } else {\n                return false;\n            }\n        };\n\n        // Opens the compose action menu.\n        $scope.composeMachine = function() {\n            $scope.action.option = $scope.compose.action;\n        };\n\n        // Called before the compose params is sent over the websocket.\n        $scope.composePreProcess = function(params) {\n            params = angular.copy(params);\n            params.id = $scope.pod.id;\n            // Sort boot disk first.\n            var sorted = $scope.compose.obj.storage.sort(function(a, b) {\n              if(a.boot === b.boot) {\n                return 0;\n              } else if(a.boot && !b.boot) {\n                return -1;\n              } else {\n                return 1;\n              }\n            });\n            // Create the storage constraint.\n            var storage = [];\n            angular.forEach(sorted, function(disk, idx) {\n              var constraint = idx + ':' + disk.size;\n              var tags = disk.tags.map(function(tag) {\n                return tag.text;\n              });\n              tags.splice(0, 0, disk.type);\n              constraint += '(' + tags.join(',') + ')';\n              storage.push(constraint);\n            });\n            params.storage = storage.join(',');\n            return params;\n        };\n\n        // Called to cancel composition.\n        $scope.cancelCompose = function() {\n          $scope.compose.obj = {\n            storage: [{\n              type: 'local',\n              size: 8,\n              tags: [],\n              boot: true\n            }]\n          };\n          $scope.action.option = null;\n        };\n\n        // Add another storage device.\n        $scope.composeAddStorage = function() {\n          var storage = {\n            type: 'local',\n            size: 8,\n            tags: [],\n            boot: false\n          };\n          if($scope.pod.capabilities.indexOf('iscsi_storage') >= 0) {\n            storage.type = 'iscsi';\n          }\n          $scope.compose.obj.storage.push(storage);\n        };\n\n        // Change which disk is the boot disk.\n        $scope.composeSetBootDisk = function(storage) {\n          angular.forEach($scope.compose.obj.storage, function(disk) {\n            disk.boot = false;\n          });\n          storage.boot = true;\n        };\n\n        // Remove a disk from storage config.\n        $scope.composeRemoveDisk = function(storage) {\n          var idx = $scope.compose.obj.storage.indexOf(storage);\n          if(idx >= 0) {\n            $scope.compose.obj.storage.splice(idx, 1);\n          }\n        };\n\n        // Start watching key fields.\n        $scope.startWatching = function() {\n            $scope.$watch(\"pod.name\", function() {\n                $rootScope.title = 'Pod ' + $scope.pod.name;\n            });\n            $scope.$watch(\"pod.capabilities\", function() {\n                // Show the composable action if the pod supports composition.\n                var idx = $scope.action.options.indexOf(\n                    $scope.compose.action);\n                if(!$scope.canCompose()) {\n                    if(idx >= 0) {\n                        $scope.action.options.splice(idx, 1);\n                    }\n                } else {\n                    if(idx === -1) {\n                        $scope.action.options.splice(\n                            0, 0, $scope.compose.action);\n                    }\n                }\n            });\n            $scope.$watch(\"action.option\", function(now, then) {\n                // When the compose action is selected set the default\n                // parameters.\n                if(now && now.name === 'compose') {\n                    if(!then || then.name !== 'compose') {\n                        $scope.compose.obj.domain = (\n                            DomainsManager.getDefaultDomain().id);\n                        $scope.compose.obj.zone = (\n                            ZonesManager.getDefaultZone().id);\n                    }\n                }\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            PodsManager, GeneralManager, UsersManager,\n            DomainsManager, ZonesManager, MachinesManager]).then(function() {\n\n            // Possibly redirected from another controller that already had\n            // this pod set to active. Only call setActiveItem if not already\n            // the activeItem.\n            var activePod = PodsManager.getActiveItem();\n            if(angular.isObject(activePod) &&\n                activePod.id === parseInt($routeParams.id, 10)) {\n                $scope.pod = activePod;\n                $scope.loaded = true;\n                $scope.machinesSearch = 'pod-id:=' + $scope.pod.id;\n                $scope.startWatching();\n            } else {\n                PodsManager.setActiveItem(\n                    parseInt($routeParams.id, 10)).then(function(pod) {\n                        $scope.pod = pod;\n                        $scope.loaded = true;\n                        $scope.machinesSearch = 'pod-id:=' + $scope.pod.id;\n                        $scope.startWatching();\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pods List Controller\n */\n\nangular.module('MAAS').controller('PodsListController', [\n    '$scope', '$rootScope',\n    'PodsManager', 'UsersManager', 'GeneralManager', 'ZonesManager',\n    'ManagerHelperService', function(\n        $scope, $rootScope, PodsManager, UsersManager, GeneralManager,\n        ZonesManager, ManagerHelperService) {\n\n        // Set title and page.\n        $rootScope.title = \"Pods\";\n        $rootScope.page = \"pods\";\n\n        // Set initial values.\n        $scope.podManager = PodsManager;\n        $scope.pods = PodsManager.getItems();\n        $scope.loading = true;\n\n        $scope.filteredItems = [];\n        $scope.selectedItems = PodsManager.getSelectedItems();\n        $scope.predicate = 'name';\n        $scope.allViewableChecked = false;\n        $scope.action = {\n          option: null,\n          options: [\n            {\n              name: 'refresh',\n              title: 'Refresh',\n              sentence: 'refresh',\n              operation: angular.bind(PodsManager, PodsManager.refresh)\n            },\n            {\n              name: 'delete',\n              title: 'Delete',\n              sentence: 'delete',\n              operation: angular.bind(PodsManager, PodsManager.deleteItem)\n            }\n          ],\n          progress: {\n              total: 0,\n              completed: 0,\n              errors: 0\n          }\n        };\n        $scope.add = {\n          open: false,\n          obj: {\n              cpu_over_commit_ratio: 1,\n              memory_over_commit_ratio: 1\n          }\n        };\n        $scope.powerTypes = GeneralManager.getData(\"power_types\");\n        $scope.zones = ZonesManager.getItems();\n\n        // Called to update `allViewableChecked`.\n        function updateAllViewableChecked() {\n            // Not checked when no pods.\n            if($scope.pods.length === 0) {\n                $scope.allViewableChecked = false;\n                return;\n            }\n\n            // Loop through all filtered pods and see if all are checked.\n            var i;\n            for(i = 0; i < $scope.pods.length; i++) {\n                if(!$scope.pods[i].$selected) {\n                    $scope.allViewableChecked = false;\n                    return;\n                }\n            }\n            $scope.allViewableChecked = true;\n        }\n\n        function clearAction() {\n            resetActionProgress();\n            $scope.action.option = null;\n        }\n\n        // Clear the action if required.\n        function shouldClearAction() {\n            if($scope.selectedItems.length === 0) {\n                clearAction();\n                if($scope.action.option) {\n                    $scope.action.option = null;\n                }\n            }\n        }\n\n        // Reset actionProgress to zero.\n        function resetActionProgress() {\n            var progress = $scope.action.progress;\n            progress.completed = progress.total = progress.errors = 0;\n            angular.forEach($scope.pods, function(pod) {\n                delete pod.action_failed;\n            });\n        }\n\n        // After an action has been performed check if we can leave all pods\n        // selected or if an error occured and we should only show the failed\n        // pods.\n        function updateSelectedItems() {\n            if(!$scope.hasActionsFailed()) {\n                if(!$scope.hasActionsInProgress()) {\n                     clearAction();\n                }\n                return;\n            }\n            angular.forEach($scope.pods, function(pod) {\n                if(pod.action_failed === false) {\n                    PodsManager.unselectItem(pod.id);\n                }\n            });\n            shouldClearAction();\n        }\n\n        // Mark a pod as selected or unselected.\n        $scope.toggleChecked = function(pod) {\n            if(PodsManager.isSelected(pod.id)) {\n                PodsManager.unselectItem(pod.id);\n            } else {\n                PodsManager.selectItem(pod.id);\n            }\n            updateAllViewableChecked();\n            shouldClearAction();\n        };\n\n        // Select all viewable pods or deselect all viewable pods.\n        $scope.toggleCheckAll = function() {\n            if($scope.allViewableChecked) {\n                angular.forEach($scope.pods, function(pod) {\n                    PodsManager.unselectItem(pod.id);\n                });\n            } else {\n                angular.forEach($scope.pods, function(pod) {\n                    PodsManager.selectItem(pod.id);\n                });\n            }\n            updateAllViewableChecked();\n            shouldClearAction();\n        };\n\n        // When the pods change update if all check buttons should be\n        // checked or not.\n        $scope.$watchCollection(\"pods\", function() {\n            updateAllViewableChecked();\n        });\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Called when the current action is cancelled.\n        $scope.actionCancel = function() {\n            resetActionProgress();\n            $scope.action.option = null;\n        };\n\n        // Perform the action on all pods.\n        $scope.actionGo = function() {\n            var extra = {};\n\n            // Setup actionProgress.\n            resetActionProgress();\n            $scope.action.progress.total = $scope.selectedItems.length;\n\n            // Perform the action on all selected items.\n            var operation = $scope.action.option.operation;\n            angular.forEach($scope.selectedItems, function(pod) {\n                operation(pod).then(function() {\n                        $scope.action.progress.completed += 1;\n                        pod.action_failed = false;\n                        updateSelectedItems();\n                    }, function(error) {\n                        $scope.action.progress.errors += 1;\n                        pod.action_error = error;\n                        pod.action_failed = true;\n                        updateSelectedItems();\n                    });\n            });\n        };\n\n        // Returns true when actions are being performed.\n        $scope.hasActionsInProgress = function() {\n            var progress = $scope.action.progress;\n            return progress.total > 0 && (\n                progress.completed + progress.errors) !== progress.total;\n        };\n\n        // Returns true if any of the actions have failed.\n        $scope.hasActionsFailed = function() {\n            var progress = $scope.action.progress;\n            return progress.errors > 0;\n        };\n\n        // Called when the add pod button is pressed.\n        $scope.addPod = function() {\n            $scope.add.open = true;\n            $scope.add.obj.zone = ZonesManager.getDefaultZone().id;\n            $scope.add.obj.cpu_over_commit_ratio = 1;\n            $scope.add.obj.memory_over_commit_ratio = 1;\n        };\n\n        // Called when the cancel add pod button is pressed.\n        $scope.cancelAddPod = function() {\n            $scope.add.open = false;\n            $scope.add.obj = {};\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If powerTypes exist then a rack controller is connected.\n            return $scope.powerTypes.length > 0;\n        };\n\n        // Return true when the add pod buttons can be clicked.\n        $scope.canAddPod = function() {\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser());\n        };\n\n        // Return the title of the power type.\n        $scope.getPowerTypeTitle = function(power_type) {\n            var i;\n            for(i = 0; i < $scope.powerTypes.length; i++) {\n                var powerType = $scope.powerTypes[i];\n                if(powerType.name === power_type) {\n                    return powerType.description;\n                }\n            }\n            return power_type;\n        };\n\n        // Load the required managers for this controller.\n        ManagerHelperService.loadManagers($scope, [\n            PodsManager, UsersManager, GeneralManager, ZonesManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Preferences Controller\n */\n\nangular.module('MAAS').controller('PreferencesController', [\n    '$scope', 'UsersManager', 'ManagerHelperService',\n    function(\n        $scope, UsersManager, ManagerHelperService) {\n            $scope.loading = true;\n            ManagerHelperService.loadManager(\n                $scope, UsersManager).then(function() {\n                    $scope.loading = false;\n                });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Settings Controller\n */\n\nangular.module('MAAS').controller('SettingsController', [\n    '$scope', '$rootScope', '$routeParams', 'PackageRepositoriesManager',\n    'DHCPSnippetsManager', 'MachinesManager', 'ControllersManager',\n    'DevicesManager', 'SubnetsManager', 'GeneralManager',\n    'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, PackageRepositoriesManager,\n             DHCPSnippetsManager, MachinesManager, ControllersManager,\n             DevicesManager, SubnetsManager, GeneralManager,\n             ManagerHelperService) {\n\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"settings\";\n\n        // Initial values.\n        $scope.loading = true;\n        $scope.snippetsManager = DHCPSnippetsManager;\n        $scope.snippets = DHCPSnippetsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.machines = MachinesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.known_architectures =\n            GeneralManager.getData(\"known_architectures\");\n        $scope.pockets_to_disable =\n            GeneralManager.getData(\"pockets_to_disable\");\n        $scope.components_to_disable =\n            GeneralManager.getData(\"components_to_disable\");\n        $scope.packageRepositoriesManager = PackageRepositoriesManager;\n        $scope.repositories =\n            PackageRepositoriesManager.getItems();\n        $scope.newSnippet = null;\n        $scope.editSnippet = null;\n        $scope.deleteSnippet = null;\n        $scope.snippetTypes = [\"Global\", \"Subnet\", \"Node\"];\n        $scope.newRepository = null;\n        $scope.editRepository = null;\n        $scope.deleteRepository = null;\n\n        // Called when the enabled toggle is changed.\n        $scope.repositoryEnabledToggle = function(repository) {\n            PackageRepositoriesManager.updateItem(repository);\n        };\n\n        // Called to enter remove mode for a repository.\n        $scope.repositoryEnterRemove = function(repository) {\n            $scope.newRepository = null;\n            $scope.editRepository = null;\n            $scope.deleteRepository = repository;\n        };\n\n        // Called to exit remove mode for a repository.\n        $scope.repositoryExitRemove = function() {\n            $scope.deleteRepository = null;\n        };\n\n        // Called to confirm the removal of a repository.\n        $scope.repositoryConfirmRemove = function() {\n            PackageRepositoriesManager.deleteItem(\n                $scope.deleteRepository).then(function() {\n                    $scope.repositoryExitRemove();\n                });\n        };\n\n        // Return true if the repository is a PPA.\n        $scope.isPPA = function(data) {\n            if(!angular.isObject(data)) {\n                return false;\n            }\n            if(!angular.isString(data.url)) {\n                return false;\n            }\n            return data.url.indexOf(\"ppa:\") === 0 ||\n                data.url.indexOf(\"ppa.launchpad.net\") > -1;\n        };\n\n        // Return true if the repository is a mirror.\n        $scope.isMirror = function(data) {\n            if(!angular.isObject(data)) {\n                return false;\n            }\n            if(!angular.isString(data.name)) {\n                return false;\n            }\n            return data.name === \"main_archive\" ||\n                data.name === \"ports_archive\";\n        };\n\n        // Called to enter edit mode for a repository.\n        $scope.repositoryEnterEdit = function(repository) {\n            $scope.newRepository = null;\n            $scope.deleteRepository = null;\n            $scope.editRepository = repository;\n        };\n\n        // Called to exit edit mode for a repository.\n        $scope.repositoryExitEdit = function() {\n            $scope.editRepository = null;\n        };\n\n        // Called to start adding a new repository.\n        $scope.repositoryAdd = function(isPPA) {\n            var repo = {\n                name: \"\",\n                enabled: true,\n                url: \"\",\n                key: \"\",\n                arches: [\"i386\", \"amd64\"],\n                distributions: [],\n                components: []\n            };\n            if (isPPA) {\n                repo.url = \"ppa:\";\n            }\n            $scope.newRepository = repo;\n        };\n\n        // Called to cancel addind a new repository.\n        $scope.repositoryAddCancel = function() {\n            $scope.newRepository = null;\n        };\n\n        // Return the node from either the machines, devices, or controllers\n        // manager.\n        function getNode(system_id) {\n            var node = MachinesManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n            node = DevicesManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n            node = ControllersManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n        }\n\n        // Return the name of the subnet.\n        $scope.getSubnetName = function(subnet) {\n            return SubnetsManager.getName(subnet);\n        };\n\n        // Return the text for the type of snippet.\n        $scope.getSnippetTypeText = function(snippet) {\n            if(angular.isString(snippet.node)) {\n                return \"Node\";\n            } else if(angular.isNumber(snippet.subnet)) {\n                return \"Subnet\";\n            } else {\n                return \"Global\";\n            }\n        };\n\n        // Return the object the snippet applies to.\n        $scope.getSnippetAppliesToObject = function(snippet) {\n            if(angular.isString(snippet.node)) {\n                return getNode(snippet.node);\n            } else if(angular.isNumber(snippet.subnet)) {\n                return SubnetsManager.getItemFromList(snippet.subnet);\n            }\n        };\n\n        // Return the applies to text that is disabled in none edit mode.\n        $scope.getSnippetAppliesToText = function(snippet) {\n            var obj = $scope.getSnippetAppliesToObject(snippet);\n            if(angular.isString(snippet.node) && angular.isObject(obj)) {\n                return obj.fqdn;\n            } else if(angular.isNumber(snippet.subnet) &&\n                angular.isObject(obj)) {\n                return SubnetsManager.getName(obj);\n            } else {\n                return \"\";\n            }\n        };\n\n        // Called to enter remove mode for a DHCP snippet.\n        $scope.snippetEnterRemove = function(snippet) {\n            $scope.newSnippet = null;\n            $scope.editSnippet = null;\n            $scope.deleteSnippet = snippet;\n        };\n\n        // Called to exit remove mode for a DHCP snippet.\n        $scope.snippetExitRemove = function() {\n            $scope.deleteSnippet = null;\n        };\n\n        // Called to confirm the removal of a snippet.\n        $scope.snippetConfirmRemove = function() {\n            DHCPSnippetsManager.deleteItem($scope.deleteSnippet).then(\n                function() {\n                    $scope.snippetExitRemove();\n                });\n        };\n\n        // Called to enter edit mode for a DHCP snippet.\n        $scope.snippetEnterEdit = function(snippet) {\n            $scope.newSnippet = null;\n            $scope.deleteSnippet = null;\n            $scope.editSnippet = snippet;\n            $scope.editSnippet.type = $scope.getSnippetTypeText(snippet);\n        };\n\n        // Called to exit edit mode for a DHCP snippet.\n        $scope.snippetExitEdit = function() {\n            $scope.editSnippet = null;\n        };\n\n        // Called when the active toggle is changed.\n        $scope.snippetToggle = function(snippet) {\n            DHCPSnippetsManager.updateItem(snippet).then(null,\n                function(error) {\n                    // Revert state change and clear toggling.\n                    snippet.enabled = !snippet.enabled;\n                    console.log(error);\n                });\n        };\n\n        // Called to start adding a new snippet.\n        $scope.snippetAdd = function() {\n            $scope.editSnippet = null;\n            $scope.deleteSnippet = null;\n            $scope.newSnippet = {\n                name: \"\",\n                type: \"Global\",\n                enabled: true\n            };\n        };\n\n        // Called to cancel addind a new snippet.\n        $scope.snippetAddCancel = function() {\n            $scope.newSnippet = null;\n        };\n\n        // Setup page variables based on section.\n        if($routeParams.section === \"dhcp\") {\n            $rootScope.title = \"DHCP snippets\";\n            $scope.currentpage = 'dhcp';\n        }\n        else if($routeParams.section === \"repositories\") {\n            $rootScope.title = \"Package repositories\";\n            $scope.currentpage = 'repositories';\n        }\n\n        // Load the required managers.\n        ManagerHelperService.loadManagers($scope, [\n                PackageRepositoriesManager, DHCPSnippetsManager,\n                MachinesManager, DevicesManager, ControllersManager,\n                SubnetsManager, GeneralManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Details Controller\n */\n\nangular.module('MAAS').controller('SpaceDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'SpacesManager', 'VLANsManager', 'SubnetsManager', 'FabricsManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        SpacesManager, VLANsManager, SubnetsManager, FabricsManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.space = null;\n        $scope.spaceManager = SpacesManager;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.loaded = false;\n        $scope.editSummary = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.space.name;\n        }\n\n        // Called when the space has been loaded.\n        function spaceLoaded(space) {\n            $scope.space = space;\n            updateTitle();\n            $scope.predicate = \"[subnet_name, vlan_name]\";\n            $scope.$watch(\"subnets\", updateSubnets, true);\n            updateSubnets();\n            $scope.loaded = true;\n        }\n\n        // Generate a table that can easily be rendered in the view.\n        function updateSubnets() {\n            var rows = [];\n            angular.forEach($filter('filter')(\n                    $scope.subnets, {space:$scope.space.id}, true),\n                    function(subnet) {\n                var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                var row = {\n                    vlan: vlan,\n                    vlan_name: VLANsManager.getName(vlan),\n                    subnet: subnet,\n                    subnet_name: SubnetsManager.getName(subnet),\n                    fabric: fabric,\n                    fabric_name: fabric.name\n                };\n                rows.push(row);\n            });\n            $scope.rows = rows;\n        }\n\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Called when the \"edit\" button is cliked in the space summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the space summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Return true if this is the default Space\n        $scope.isDefaultSpace = function() {\n            if(!angular.isObject($scope.space)) {\n                return false;\n            }\n            return $scope.space.id === 0;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.space)) {\n                return $scope.space.subnet_ids.length === 0;\n            }\n            return false;\n        };\n\n        // Called when the delete space button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete space button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete space button is pressed.\n        $scope.deleteConfirmButton = function() {\n            SpacesManager.deleteSpace($scope.space).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/networks\");\n                $location.search('by', 'space');\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            SpacesManager, SubnetsManager, VLANsManager, FabricsManager,\n            UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this space set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeSpace = SpacesManager.getActiveItem();\n            var requestedSpace = parseInt($routeParams.space_id, 10);\n            if(isNaN(requestedSpace)) {\n                ErrorService.raiseError(\"Invalid space identifier.\");\n            } else if(angular.isObject(activeSpace) &&\n                activeSpace.id === requestedSpace) {\n                spaceLoaded(activeSpace);\n            } else {\n                SpacesManager.setActiveItem(\n                    requestedSpace).then(function(space) {\n                        spaceLoaded(space);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Subnet Details Controller\n */\n\nangular.module('MAAS').filter('filterSource', ['ValidationService',\n    function() {\n        return function(subnets, source) {\n            var filtered = [];\n            angular.forEach(subnets, function(subnet) {\n                if(subnet.id !== source.id &&\n                    subnet.version === source.version) {\n                    filtered.push(subnet);\n                }\n            });\n            return filtered;\n        };\n    }]);\n\nangular.module('MAAS').controller('SubnetDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'ConfigsManager', 'SubnetsManager', 'SpacesManager', 'VLANsManager',\n    'UsersManager', 'FabricsManager', 'StaticRoutesManager',\n    'ManagerHelperService', 'ErrorService', 'ConverterService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location, ConfigsManager,\n        SubnetsManager, SpacesManager, VLANsManager, UsersManager,\n        FabricsManager, StaticRoutesManager, ManagerHelperService, ErrorService,\n        ConverterService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.subnet = null;\n        $scope.editSummary = false;\n        $scope.active_discovery_data = null;\n        $scope.active_discovery_interval = null;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.subnetManager = SubnetsManager;\n        $scope.staticRoutes = StaticRoutesManager.getItems();\n        $scope.staticRoutesManager = StaticRoutesManager;\n        $scope.space = null;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.actionError = null;\n        $scope.actionOption = null;\n        $scope.actionOptions = [];\n        $scope.reverse = false;\n        $scope.newStaticRoute = null;\n        $scope.editStaticRoute = null;\n        $scope.deleteStaticRoute = null;\n\n        $scope.MAP_SUBNET_ACTION = {\n            name: \"map_subnet\",\n            title: \"Map subnet\"\n        };\n        $scope.DELETE_ACTION = {\n            name: \"delete\",\n            title: \"Delete\"\n        };\n\n        // Alloc type mapping.\n        var ALLOC_TYPES = {\n            0: 'Automatic',\n            1: 'Static',\n            4: 'User reserved',\n            5: 'DHCP',\n            6: 'Observed'\n        };\n\n        // Node type mapping.\n        var NODE_TYPES = {\n            0: 'Machine',\n            1: 'Device',\n            2: 'Rack controller',\n            3: 'Region controller',\n            4: 'Rack and region controller',\n            5: 'Chassis',\n            6: 'Storage'\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            subnet = $scope.subnet;\n            if(subnet && subnet.cidr) {\n                $rootScope.title = subnet.cidr;\n                if(subnet.name && subnet.cidr !== subnet.name) {\n                    $rootScope.title += \" (\" +subnet.name + \")\";\n                }\n            }\n        }\n\n        // Update the IP version of the CIDR.\n        function updateIPVersion() {\n            var ip = $scope.subnet.cidr.split('/')[0];\n            if(ip.indexOf(':') === -1) {\n                $scope.ipVersion = 4;\n            } else {\n                $scope.ipVersion = 6;\n            }\n        }\n\n        // Sort for IP address.\n        $scope.ipSort = function(ipAddress) {\n            if($scope.ipVersion === 4) {\n                return ConverterService.ipv4ToInteger(ipAddress.ip);\n            } else {\n                return ConverterService.ipv6Expand(ipAddress.ip);\n            }\n        };\n\n        // Set default predicate to the ipSort function.\n        $scope.predicate = $scope.ipSort;\n\n        // Return the name of the allocation type.\n        $scope.getAllocType = function(allocType) {\n            var str = ALLOC_TYPES[allocType];\n            if(angular.isString(str)) {\n                return str;\n            } else {\n                return \"Unknown\";\n            }\n        };\n\n        $scope.getSubnetCIDR = function(destId) {\n            return SubnetsManager.getItemFromList(destId).cidr;\n        };\n\n        // Sort based on the name of the allocation type.\n        $scope.allocTypeSort = function(ipAddress) {\n            return $scope.getAllocType(ipAddress.alloc_type);\n        };\n\n        // Return the name of the node type for the given IP.\n        $scope.getUsageForIP = function(ip) {\n            if(angular.isObject(ip.node_summary)) {\n                var isContainer = ip.node_summary.is_container;\n                var nodeType = ip.node_summary.node_type;\n                if(nodeType === 1 && isContainer === true) {\n                    return \"Container\";\n                }\n                var str = NODE_TYPES[nodeType];\n                if(angular.isString(str)) {\n                    return str;\n                } else {\n                    return \"Unknown\";\n                }\n            } else if(angular.isObject(ip.bmcs)) {\n                return \"BMC\";\n            } else if(angular.isObject(ip.dns_records)) {\n                return \"DNS\";\n            } else {\n                return \"Unknown\";\n            }\n        };\n\n        // Sort based on the node type string.\n        $scope.nodeTypeSort = function(ipAddress) {\n            return $scope.getUsageForIP(ipAddress);\n        };\n\n        // Sort based on the owner name.\n        $scope.ownerSort = function(ipAddress) {\n            var owner = ipAddress.user;\n            if(angular.isString(owner) && owner.length > 0) {\n                return owner;\n            } else {\n                return \"MAAS\";\n            }\n        };\n\n        // Called to change the sort order of the IP table.\n        $scope.sortIPTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Return the name of the VLAN.\n        $scope.getVLANName = function(vlan) {\n           return VLANsManager.getName(vlan);\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        $scope.actionRetry = function() {\n            // When we clear actionError, the HTML will be re-rendered to\n            // hide the error message (and the user will be taken back to\n            // the previous action they were performing, since we reset\n            // the actionOption in the error handler.\n            $scope.actionError = null;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            if($scope.actionOption.name === \"map_subnet\") {\n                SubnetsManager.scanSubnet($scope.subnet).then(function(result) {\n                    if(result && result.scan_started_on.length === 0) {\n                        $scope.actionError =\n                            ManagerHelperService.parseValidationError(\n                                result.result);\n                    } else {\n                        $scope.actionOption = null;\n                        $scope.actionError = null;\n                    }\n                }, function(error) {\n                    $scope.actionError =\n                        ManagerHelperService.parseValidationError(error);\n                });\n            } else if($scope.actionOption.name === \"delete\") {\n                SubnetsManager.deleteSubnet(\n                    $scope.subnet).then(function(result) {\n                        $scope.actionOption = null;\n                        $scope.actionError = null;\n                        $location.path(\"/networks\");\n                    }, function(error) {\n                        $scope.actionError =\n                            ManagerHelperService.parseValidationError(error);\n                });\n            }\n        };\n\n        // Called when a action is selected.\n        $scope.actionChanged = function() {\n            $scope.actionError = null;\n        };\n\n        // Called when the \"Cancel\" button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionOption = null;\n            $scope.actionError = null;\n        };\n\n        // Called when the managers load to populate the actions the user\n        // is allowed to perform.\n        $scope.updateActions = function() {\n            if(UsersManager.isSuperUser()) {\n                $scope.actionOptions = [\n                    $scope.MAP_SUBNET_ACTION,\n                    $scope.DELETE_ACTION\n                ];\n            } else {\n                $scope.actionOptions = [];\n            }\n        };\n\n        // Called when the \"edit\" button is cliked in the subnet summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the subnet summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Called by maas-obj-form before it saves the subnet. The passed\n        // subnet is the object right before its sent over the websocket.\n        $scope.subnetPreSave = function(subnet, changedFields) {\n            // Adjust the subnet object if the fabric changed.\n            if(changedFields.indexOf(\"fabric\") !== -1) {\n                // Fabric changed, the websocket expects VLAN to be updated, so\n                // we set the VLAN to the default VLAN for the new fabric.\n                subnet.vlan = FabricsManager.getItemFromList(\n                    subnet.fabric).default_vlan_id;\n            }\n            return subnet;\n        };\n\n        // Called to start adding a new static route.\n        $scope.addStaticRoute = function() {\n            $scope.editStaticRoute = null;\n            $scope.deleteStaticRoute = null;\n            $scope.newStaticRoute = {\n                source: $scope.subnet.id,\n                gateway_ip: \"\",\n                destination: null,\n                metric: 0\n            };\n        };\n\n        // Cancel adding the new static route.\n        $scope.cancelAddStaticRoute = function() {\n            $scope.newStaticRoute = null;\n        };\n\n        // Return true if the static route is in edit mode.\n        $scope.isStaticRouteInEditMode = function(route) {\n            return $scope.editStaticRoute === route;\n        };\n\n        // Toggle edit mode for the static route.\n        $scope.staticRouteToggleEditMode = function(route) {\n            $scope.newStaticRoute = null;\n            $scope.deleteStaticRoute = null;\n            if($scope.isStaticRouteInEditMode(route)) {\n                $scope.editStaticRoute  = null;\n            } else {\n                $scope.editStaticRoute = route;\n            }\n        };\n\n        // Return true if the static route is in delete mode.\n        $scope.isStaticRouteInDeleteMode = function(route) {\n            return $scope.deleteStaticRoute === route;\n        };\n\n        // Enter delete mode for the static route.\n        $scope.staticRouteEnterDeleteMode = function(route) {\n            $scope.newStaticRoute = null;\n            $scope.editStaticRoute = null;\n            $scope.deleteStaticRoute = route;\n        };\n\n        // Exit delete mode for the statc route.\n        $scope.staticRouteCancelDelete = function() {\n            $scope.deleteStaticRoute = null;\n        };\n\n        // Perform the delete operation on the static route.\n        $scope.staticRouteConfirmDelete = function() {\n            StaticRoutesManager.deleteItem($scope.deleteStaticRoute).then(\n                function() {\n                    $scope.deleteStaticRoute = null;\n                });\n        };\n\n        // Called when the subnet has been loaded.\n        function subnetLoaded(subnet) {\n            $scope.subnet = subnet;\n            $scope.loaded = true;\n\n            updateTitle();\n\n            // Watch the vlan and fabric field so if its changed on the subnet\n            // we make sure that the fabric is updated. It is possible that\n            // fabric is removed from the subnet since it is injected from this\n            // controller, so when it is removed we add it back.\n            var updateFabric = function() {\n                $scope.subnet.fabric = (\n                    VLANsManager.getItemFromList($scope.subnet.vlan).fabric);\n                $scope.subnet.fabric_name = (\n                  FabricsManager.getItemFromList(subnet.fabric).name);\n            };\n            var updateSpace = function() {\n                $scope.space = (\n                    SpacesManager.getItemFromList($scope.subnet.space));\n            };\n            var updateVlan = function() {\n                var vlan = VLANsManager.getItemFromList($scope.subnet.vlan);\n                $scope.subnet.vlan_name = (\n                    VLANsManager.getName(vlan)\n                );\n            };\n\n            $scope.$watch(\"subnet.fabric\", updateFabric);\n            $scope.$watch(\"subnet.fabric_name\", updateFabric);\n            $scope.$watch(\"subnet.vlan\", updateFabric);\n            $scope.$watch(\"subnet.vlan_name\", updateVlan);\n            $scope.$watch(\"subnet.space\", updateSpace);\n            $scope.$watch(\"subnet.cidr\", updateIPVersion);\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            ConfigsManager, SubnetsManager, SpacesManager, VLANsManager,\n            UsersManager, FabricsManager, StaticRoutesManager\n        ]).then(function() {\n\n            $scope.updateActions();\n            $scope.active_discovery_data = ConfigsManager.getItemFromList(\n                \"active_discovery_interval\");\n            // Find active discovery interval\n            angular.forEach(\n                $scope.active_discovery_data.choices, function(choice) {\n                    if(choice[0] === $scope.active_discovery_data.value) {\n                        $scope.active_discovery_interval = choice[1];\n                    }\n                });\n\n            // Possibly redirected from another controller that already had\n            // this subnet set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeSubnet = SubnetsManager.getActiveItem();\n            var requestedSubnet = parseInt($routeParams.subnet_id, 10);\n            if(isNaN(requestedSubnet)) {\n                ErrorService.raiseError(\"Invalid subnet identifier.\");\n            } else if(angular.isObject(activeSubnet) &&\n                activeSubnet.id === requestedSubnet) {\n                subnetLoaded(activeSubnet);\n            } else {\n                SubnetsManager.setActiveItem(\n                    requestedSubnet).then(function(subnet) {\n                        subnetLoaded(subnet);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS VLAN Details Controller\n */\n\nangular.module('MAAS').filter('ignoreSelf', function () {\n    return function(objects, self) {\n        var filtered = [];\n        angular.forEach(objects, function(obj) {\n            if(obj !== self) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').controller('VLANDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'VLANsManager', 'SubnetsManager', 'SpacesManager', 'FabricsManager',\n    'ControllersManager', 'UsersManager', 'ManagerHelperService',\n    'ErrorService', 'ValidationService', function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        VLANsManager, SubnetsManager, SpacesManager, FabricsManager,\n        ControllersManager, UsersManager, ManagerHelperService, ErrorService,\n        ValidationService) {\n        var vm = this;\n\n        var filterByVLAN = $filter('filterByVLAN');\n        var filterControllersByVLAN = $filter('filterControllersByVLAN');\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        vm.PROVIDE_DHCP_ACTION = {\n            // Note: 'title' is set dynamically depending on whether or not\n            // DHCP is already enabled on this VLAN.\n            name: \"enable_dhcp\"\n        };\n        vm.RELAY_DHCP_ACTION = {\n            // Note: 'title' is set ndynamically depending on whether or not\n            // DHCP relay is already enabled on this VLAN.\n            name: \"relay_dhcp\"\n        };\n        vm.DISABLE_DHCP_ACTION = {\n            name: \"disable_dhcp\",\n            title: \"Disable DHCP\"\n        };\n        vm.DELETE_ACTION = {\n            name: \"delete\",\n            title: \"Delete\"\n        };\n\n        // Initial values.\n        vm.loaded = false;\n        vm.vlan = null;\n        vm.title = null;\n        vm.actionOption = null;\n        vm.actionOptions = [];\n        vm.vlanManager = VLANsManager;\n        vm.vlans = VLANsManager.getItems();\n        vm.subnets = SubnetsManager.getItems();\n        vm.spaces = SpacesManager.getItems();\n        vm.fabrics = FabricsManager.getItems();\n        vm.controllers = ControllersManager.getItems();\n        vm.actionError = null;\n        vm.relatedSubnets = [];\n        vm.relatedControllers = [];\n        vm.provideDHCPAction = {};\n        vm.primaryRack = null;\n        vm.secondaryRack = null;\n        vm.editSummary = false;\n\n\n        // Return true if the authenticated user is super user.\n        vm.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Called when the \"edit\" button is cliked in the vlan summary\n        vm.enterEditSummary = function() {\n            vm.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the vlan summary\n        vm.exitEditSummary = function() {\n            vm.editSummary = false;\n        };\n\n        // Get the space name for the VLAN.\n        vm.getSpaceName = function() {\n            var space = SpacesManager.getItemFromList(vm.vlan.space);\n            if(space) {\n              return space.name;\n            } else {\n              return \"(undefined)\";\n            }\n        };\n\n        // Get the aciton structure for the action with the specified name.\n        vm.getActionByName = function(name) {\n            var i;\n            for(i = 0 ; i < vm.actionOptions.length ; i++) {\n                if(vm.actionOptions[i].name === name) {\n                    return vm.actionOptions[i];\n                }\n            }\n            return null;\n        };\n\n        // Initialize the provideDHCPAction structure with the current primary\n        // and secondary rack, plus an indication regarding whether or not\n        // adding a dynamic IP range is required.\n        vm.initProvideDHCP = function(forRelay) {\n            vm.provideDHCPAction = {};\n            var dhcp = vm.provideDHCPAction;\n            dhcp.subnet = null;\n            dhcp.relayVLAN = null;\n            if (angular.isNumber(vm.vlan.relay_vlan)) {\n                dhcp.relayVLAN = VLANsManager.getItemFromList(\n                    vm.vlan.relay_vlan);\n            }\n            if (angular.isObject(vm.primaryRack)) {\n                dhcp.primaryRack = vm.primaryRack.system_id;\n            } else if(vm.relatedControllers.length > 0) {\n                // Select the primary controller arbitrarily by default.\n                dhcp.primaryRack = vm.relatedControllers[0].system_id;\n            }\n            if (angular.isObject(vm.secondaryRack)) {\n                dhcp.secondaryRack = vm.secondaryRack.system_id;\n            } else if(vm.relatedControllers.length > 1) {\n                // Select the secondary controller arbitrarily by default.\n                dhcp.secondaryRack = vm.relatedControllers[1].system_id;\n            }\n            dhcp.maxIPs = 0;\n            dhcp.startIP = null;\n            dhcp.endIP = null;\n            dhcp.gatewayIP = \"\";\n            if (angular.isObject(vm.relatedSubnets)) {\n                // Select a subnet arbitrarily by default.\n                if (vm.relatedSubnets.length > 0 &&\n                        angular.isObject(vm.relatedSubnets[0].subnet)) {\n                    dhcp.subnet = vm.relatedSubnets[0].subnet.id;\n                }\n                dhcp.needsDynamicRange = true;\n                var i, subnet;\n                for (i = 0; i < vm.relatedSubnets.length; i++) {\n                    subnet = vm.relatedSubnets[i].subnet;\n                    // If any related subnet already has a dynamic range, we\n                    // cannot prompt the user to enter one here. If a\n                    // suggestion does not exist, a range does not exist\n                    // already.\n                    var iprange = subnet.statistics.suggested_dynamic_range;\n                    if (!angular.isObject(iprange)) {\n                        // If there is already a dynamic range on one of the\n                        // subnets, it's the \"subnet of least surprise\" if\n                        // the user is choosing to reconfigure their rack\n                        // controllers. (if they want DHCP on *another* subnet,\n                        // they should need to be explicit about it.)\n                        dhcp.subnet = subnet.id;\n                        dhcp.needsDynamicRange = false;\n                        break;\n                    }\n                }\n                // We must prompt the user for a subnet and a gateway IP\n                // address if any subnet does not yet contain a gateway IP\n                // address.\n                dhcp.needsGatewayIP = false;\n                dhcp.subnetMissingGatewayIP = true;\n                for (i = 0; i < vm.relatedSubnets.length; i++) {\n                    subnet = vm.relatedSubnets[i].subnet;\n                    if(subnet.gateway_ip === null ||\n                        subnet.gateway_ip === '') {\n                        dhcp.needsGatewayIP = true;\n                        break;\n                    }\n                }\n            }\n            // Since we are setting default values for these three options,\n            // ensure all the appropriate updates occur.\n            if(!forRelay) {\n                vm.updatePrimaryRack();\n                vm.updateSecondaryRack();\n            }\n            vm.updateSubnet(forRelay);\n        };\n\n        // Called when the actionOption has changed.\n        vm.actionOptionChanged = function() {\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                vm.initProvideDHCP(false);\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                vm.initProvideDHCP(true);\n            }\n            // Clear the action error.\n            vm.actionError = null;\n        };\n\n        // Cancel the action.\n        vm.actionCancel = function() {\n            // When the user wants to cancel an action, we need to clear out\n            // both the actionOption (so that the action screen will not be\n            // presented again) and the actionError (so that the error screen\n            // is hidden).\n            vm.actionOption = null;\n            vm.actionError = null;\n        };\n\n        // Called from the Provide DHCP form when the primary rack changes.\n        vm.updatePrimaryRack = function() {\n            var dhcp = vm.provideDHCPAction;\n            // If the user selects the secondary controller to be the primary,\n            // then the primary controller needs to be cleared out.\n            if(dhcp.primaryRack === dhcp.secondaryRack) {\n                dhcp.secondaryRack = null;\n            }\n            var i;\n            for(i = 0 ; i < vm.relatedControllers.length ; i++) {\n                if(vm.relatedControllers[i].system_id !== dhcp.primaryRack) {\n                    dhcp.secondaryRack = vm.relatedControllers[i].system_id;\n                    break;\n                }\n            }\n        };\n\n        // Called from the Provide DHCP form when the secondary rack changes.\n        vm.updateSecondaryRack = function() {\n            var dhcp = vm.provideDHCPAction;\n            // This should no longer be possible due to the filters on the\n            // drop-down boxes, but just in case.\n            if(dhcp.primaryRack === dhcp.secondaryRack) {\n                dhcp.primaryRack = null;\n                dhcp.secondaryRack = null;\n            }\n        };\n\n        // Called from the view to exclude the primary rack when selecting\n        // the secondary rack controller.\n        vm.filterPrimaryRack = function(rack) {\n            var dhcp = vm.provideDHCPAction;\n            return rack.system_id !== dhcp.primaryRack;\n        };\n\n        // Called from the Provide DHCP form when the subnet selection changes.\n        vm.updateSubnet = function(forRelay) {\n            var dhcp = vm.provideDHCPAction;\n            var subnet = SubnetsManager.getItemFromList(dhcp.subnet);\n            if(angular.isObject(subnet)) {\n                var suggested_gateway = null;\n                var iprange = null;\n                if(angular.isObject(subnet.statistics)) {\n                    suggested_gateway = subnet.statistics.suggested_gateway;\n                    iprange = subnet.statistics.suggested_dynamic_range;\n                }\n                if(angular.isObject(iprange) && iprange.num_addresses > 0) {\n                    dhcp.maxIPs = iprange.num_addresses;\n                    if(forRelay) {\n                        dhcp.startIP = \"\";\n                        dhcp.endIP = \"\";\n                        dhcp.startPlaceholder = iprange.start + \"(optional)\";\n                        dhcp.endPlaceholder = iprange.end + \" (optional)\";\n                    } else {\n                        dhcp.startIP = iprange.start;\n                        dhcp.endIP = iprange.end;\n                        dhcp.startPlaceholder = iprange.start;\n                        dhcp.endPlaceholder = iprange.end;\n                    }\n                } else {\n                    // Need to add a dynamic range, but according to our data,\n                    // there is no room on the subnet for a dynamic range.\n                    dhcp.maxIPs = 0;\n                    dhcp.startIP = \"\";\n                    dhcp.endIP = \"\";\n                    dhcp.startPlaceholder = \"(no available IPs)\";\n                    dhcp.endPlaceholder = \"(no available IPs)\";\n                }\n                if(angular.isString(suggested_gateway)) {\n                    if(forRelay) {\n                      dhcp.gatewayIP = \"\";\n                      dhcp.gatewayPlaceholder = (\n                          suggested_gateway + \" (optional)\");\n                    } else {\n                        dhcp.gatewayIP = suggested_gateway;\n                        dhcp.gatewayPlaceholder = suggested_gateway;\n                    }\n                } else {\n                    // This means the subnet already has a gateway, so don't\n                    // bother populating it.\n                    dhcp.gatewayIP = \"\";\n                    dhcp.gatewayPlaceholder = \"\";\n                }\n            } else {\n                // Don't need to add a dynamic range, so ensure these fields\n                // are cleared out.\n                dhcp.maxIPs = 0;\n                dhcp.startIP = null;\n                dhcp.endIP = null;\n                dhcp.gatewayIP = \"\";\n            }\n            if(angular.isObject(subnet)) {\n                dhcp.subnetMissingGatewayIP = !angular.isString(\n                    subnet.gateway_ip);\n            } else {\n                dhcp.subnetMissingGatewayIP = false;\n            }\n            if(dhcp.subnetMissingGatewayIP === false) {\n                dhcp.gatewayIP = null;\n            }\n       };\n\n        vm.actionRetry = function() {\n            // When we clear actionError, the HTML will be re-rendered to\n            // hide the error message (and the user will be taken back to\n            // the previous action they were performing, since we reset\n            // the actionOption in the error handler.\n            vm.actionError = null;\n        };\n\n        // Return True if the current action can be performed.\n        vm.canPerformAction = function() {\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                return vm.relatedSubnets.length > 0;\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                return angular.isObject(vm.provideDHCPAction.relayVLAN);\n            } else {\n                return true;\n            }\n        };\n\n        // Perform the action.\n        vm.actionGo = function() {\n            // Do nothing if action cannot be performed.\n            if(!vm.canPerformAction()) {\n               return;\n            }\n\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                var dhcp = vm.provideDHCPAction;\n                var controllers = [];\n                // These will be undefined if they don't exist, and the region\n                // will simply get an empty dictionary.\n                var extra = {};\n                extra.subnet = dhcp.subnet;\n                extra.start = dhcp.startIP;\n                extra.end = dhcp.endIP;\n                extra.gateway = dhcp.gatewayIP;\n                if(angular.isString(dhcp.primaryRack)) {\n                    controllers.push(dhcp.primaryRack);\n                }\n                if(angular.isString(dhcp.secondaryRack)) {\n                    controllers.push(dhcp.secondaryRack);\n                }\n                // Abort the action without calling down to the region if\n                // the user didn't select a controller.\n                if(controllers.length === 0) {\n                    vm.actionError =\n                        \"A primary rack controller must be specified.\";\n                    return;\n                }\n                VLANsManager.configureDHCP(\n                    vm.vlan, controllers, extra).then(function() {\n                        vm.actionOption = null;\n                        vm.actionError = null;\n                    }, function(result) {\n                        vm.actionError = result.error;\n                        vm.actionOption = vm.PROVIDE_DHCP_ACTION;\n                    });\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                // These will be undefined if they don't exist, and the region\n                // will simply get an empty dictionary.\n                var extraDHCP = {};\n                extraDHCP.subnet = vm.provideDHCPAction.subnet;\n                extraDHCP.start = vm.provideDHCPAction.startIP;\n                extraDHCP.end = vm.provideDHCPAction.endIP;\n                extraDHCP.gateway = vm.provideDHCPAction.gatewayIP;\n                var relay = vm.provideDHCPAction.relayVLAN.id;\n                VLANsManager.configureDHCP(\n                    vm.vlan, [], extraDHCP, relay).then(function() {\n                        vm.actionOption = null;\n                        vm.actionError = null;\n                    }, function(result) {\n                        vm.actionError = result.error;\n                        vm.actionOption = vm.RELAY_DHCP_ACTION;\n                    });\n            } else if(vm.actionOption.name === \"disable_dhcp\") {\n                VLANsManager.disableDHCP(vm.vlan).then(function() {\n                    vm.actionOption = null;\n                    vm.actionError = null;\n                }, function(result) {\n                    vm.actionError = result.error;\n                    vm.actionOption = vm.DISABLE_DHCP_ACTION;\n                });\n            } else if(vm.actionOption.name === \"delete\") {\n                VLANsManager.deleteVLAN(vm.vlan).then(function() {\n                    $location.path(\"/networks\");\n                    vm.actionOption = null;\n                    vm.actionError = null;\n                }, function(result) {\n                    vm.actionError = result.error;\n                    vm.actionOption = vm.DELETE_ACTION;\n                });\n            }\n        };\n\n        // Return true if there is an action error.\n        vm.isActionError = function() {\n            return vm.actionError !== null;\n        };\n\n        // Return the name of the VLAN.\n        vm.getFullVLANName = function(vlan_id) {\n            var vlan = VLANsManager.getItemFromList(vlan_id);\n            var fabric = FabricsManager.getItemFromList(vlan.fabric);\n            return (\n                FabricsManager.getName(fabric) + \".\" +\n                VLANsManager.getName(vlan));\n        };\n\n        // Return the current DHCP status.\n        vm.getDHCPStatus = function() {\n            if(vm.vlan) {\n              if(vm.vlan.dhcp_on) {\n                return \"Enabled\";\n              } else if(vm.vlan.relay_vlan) {\n                return \"Relayed via \" + vm.getFullVLANName(vm.vlan.relay_vlan);\n              } else {\n                return \"Disabled\";\n              }\n            } else {\n              return \"\";\n            }\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            var vlan = vm.vlan;\n            var fabric = vm.fabric;\n            if(angular.isObject(vlan) && angular.isObject(fabric)) {\n                if (!vlan.name) {\n                    if(vlan.vid === 0) {\n                        vm.title = \"Default VLAN\";\n                    } else {\n                        vm.title = \"VLAN \" + vlan.vid;\n                    }\n                } else {\n                    vm.title = vlan.name;\n                }\n                vm.title += \" in \" + fabric.name;\n                $rootScope.title = vm.title;\n            }\n        }\n\n        // Called from a $watch when the management racks are updated.\n        function updateManagementRacks() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            if(vlan.primary_rack) {\n                vm.primaryRack = ControllersManager.getItemFromList(\n                    vlan.primary_rack);\n            } else {\n                vm.primaryRack = null;\n            }\n            if(vlan.secondary_rack) {\n                vm.secondaryRack = ControllersManager.getItemFromList(\n                    vlan.secondary_rack);\n            } else {\n                vm.secondaryRack = null;\n            }\n        }\n\n        // Called from a $watch when the related controllers may have changed.\n        function updateRelatedControllers() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            var racks = [];\n            angular.forEach(vlan.rack_sids, function(rack_sid) {\n                var rack = ControllersManager.getItemFromList(rack_sid);\n                if(angular.isObject(rack)) {\n                    racks.push(rack);\n                }\n            });\n            vm.relatedControllers = racks;\n        }\n\n        // Called from a $watch when the related subnets or spaces may have\n        // changed.\n        function updateRelatedSubnets() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            var subnets = [];\n            angular.forEach(\n                    filterByVLAN(vm.subnets, vlan), function(subnet) {\n                var space = SpacesManager.getItemFromList(subnet.space);\n                if(!angular.isObject(space)) {\n                    space = {name: \"(undefined)\"};\n                }\n                var row = {\n                    subnet: subnet,\n                    space: space\n                };\n                subnets.push(row);\n            });\n            vm.relatedSubnets = subnets;\n        }\n\n        function updatePossibleActions() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            // Clear out the actionOptions array. (this needs to be the same\n            // object, since it's watched from $scope.)\n            vm.actionOptions.length = 0;\n            if(UsersManager.isSuperUser()) {\n                if(!vlan.relay_vlan) {\n                  if(vlan.dhcp_on === true) {\n                      vm.PROVIDE_DHCP_ACTION.title = \"Reconfigure DHCP\";\n                      vm.actionOptions.push(vm.PROVIDE_DHCP_ACTION);\n                      vm.actionOptions.push(vm.DISABLE_DHCP_ACTION);\n                  } else {\n                      vm.PROVIDE_DHCP_ACTION.title = \"Provide DHCP\";\n                      vm.RELAY_DHCP_ACTION.title = \"Relay DHCP\";\n                      vm.actionOptions.push(vm.PROVIDE_DHCP_ACTION);\n                      vm.actionOptions.push(vm.RELAY_DHCP_ACTION);\n                  }\n                } else {\n                  vm.actionOptions.push(vm.RELAY_DHCP_ACTION);\n                  vm.actionOptions.push(vm.DISABLE_DHCP_ACTION);\n                  vm.RELAY_DHCP_ACTION.title = \"Reconfigure DHCP relay\";\n                }\n                if(!vm.isFabricDefault) {\n                    vm.actionOptions.push(vm.DELETE_ACTION);\n                }\n            }\n        }\n\n        // Called when the vlan has been loaded.\n        function vlanLoaded(vlan) {\n            vm.vlan = vlan;\n            vm.fabric = FabricsManager.getItemFromList(vlan.fabric);\n            vm.isFabricDefault = vm.fabric.default_vlan_id === vm.vlan.id;\n            vm.loaded = true;\n\n            updateTitle();\n            updateManagementRacks();\n            updateRelatedControllers();\n            updateRelatedSubnets();\n            updatePossibleActions();\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            VLANsManager, SubnetsManager, SpacesManager, FabricsManager,\n            ControllersManager, UsersManager\n        ]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this vlan set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeVLAN = VLANsManager.getActiveItem();\n            var requestedVLAN = parseInt($routeParams.vlan_id, 10);\n            if(isNaN(requestedVLAN)) {\n                ErrorService.raiseError(\"Invalid VLAN identifier.\");\n            } else if(angular.isObject(activeVLAN) &&\n                activeVLAN.id === requestedVLAN) {\n                vlanLoaded(activeVLAN);\n            } else {\n                VLANsManager.setActiveItem(\n                    requestedVLAN).then(function(vlan) {\n                        vlanLoaded(vlan);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n\n            $scope.$watch(\"vlanDetails.vlan.name\", updateTitle);\n            $scope.$watch(\"vlanDetails.vlan.vid\", updateTitle);\n            $scope.$watch(\"vlanDetails.vlan.dhcp_on\", updatePossibleActions);\n            $scope.$watch(\n                \"vlanDetails.vlan.relay_vlan\", updatePossibleActions);\n            $scope.$watch(\"vlanDetails.fabric.name\", updateTitle);\n            $scope.$watch(\n                \"vlanDetails.vlan.primary_rack\", updateManagementRacks);\n            $scope.$watch(\n                \"vlanDetails.vlan.secondary_rack\", updateManagementRacks);\n\n            $scope.$watchCollection(\n                \"vlanDetails.subnets\", updateRelatedSubnets);\n            $scope.$watchCollection(\n                \"vlanDetails.spaces\", updateRelatedSubnets);\n            $scope.$watchCollection(\n                \"vlanDetails.controllers\", updateRelatedControllers);\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zone Details Controller\n */\n\nangular.module('MAAS').controller('ZoneDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location', 'MachinesManager',\n    'DevicesManager', 'ZonesManager', 'UsersManager',\n    'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $location, MachinesManager,\n        DevicesManager, ZonesManager, UsersManager, ManagerHelperService,\n        ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"zones\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.zone = null;\n        $scope.zoneManager = ZonesManager;\n        $scope.editSummary = false;\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.zone.name;\n        }\n\n        // Called when the zone has been loaded.\n        function zoneLoaded(zone) {\n            $scope.zone = zone;\n            $scope.loaded = true;\n            updateTitle();\n        }\n\n\n        // Called when the \"edit\" button is cliked in the zone summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the zone summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default zone.\n        $scope.isDefaultZone = function() {\n            if(angular.isObject($scope.zone)) {\n                return $scope.zone.id === 1;\n            }\n            return false;\n        };\n\n        // Called to check if the zone can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.zone)) {\n                return $scope.zone.id !== 0;\n            }\n            return false;\n        };\n\n        // Called when the delete zone button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete zone button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete space button is pressed.\n        $scope.deleteConfirmButton = function() {\n            ZonesManager.deleteItem($scope.zone).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/zones\");\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this zone set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeZone = ZonesManager.getActiveItem();\n            var requestedZone = parseInt($routeParams.zone_id, 10);\n            if(isNaN(requestedZone)) {\n                ErrorService.raiseError(\"Invalid zone identifier.\");\n            } else if(angular.isObject(activeZone) &&\n                activeZone.id === requestedZone) {\n                zoneLoaded(activeZone);\n            } else {\n                ZonesManager.setActiveItem(\n                    requestedZone).then(function(zone) {\n                        zoneLoaded(zone);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zones List Controller\n */\n\nangular.module('MAAS').controller('ZonesListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', 'MachinesManager',\n    'DevicesManager', 'ControllersManager', 'ZonesManager', 'ServicesManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function($scope, $rootScope, $routeParams, $filter, MachinesManager,\n        DevicesManager, ControllersManager, ZonesManager, ServicesManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Zones\";\n        $rootScope.page = \"zones\";\n\n        // Set initial values.\n        $scope.zoneManager = ZonesManager;\n        $scope.zones = ZonesManager.getItems();\n        $scope.currentpage = \"zones\";\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.loading = true;\n        $scope.action = {\n          open: false,\n          obj: {}\n        };\n\n        // Open add zone view.\n        $scope.addZone = function() {\n          $scope.action.open = true;\n        };\n\n        // Saving has completed.\n        $scope.closeZone = function() {\n          $scope.action.open = false;\n          $scope.action.obj = {};\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, UsersManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n        }\n    ]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Accordion directive.\n *\n * Provides an accordion effect to an element with maas-accordion class and\n * all child elements with maas-accordion-tab. Only one accordion tab is open\n * at a time, selecting another accordion will set \"active\" on that\n * accordion tab.\n */\n\n\nangular.module('MAAS').directive('maasAccordion', function() {\n    return {\n        restrict: \"C\",\n        link: function(scope, element, attrs) {\n\n            // Called when accordion tabs are clicked. Removes active on\n            // all other tabs except to the tab that was clicked.\n            var clickHandler = function(evt) {\n                var tab = evt.data.tab;\n                angular.element(tab).toggleClass(\"is-selected\");\n            };\n\n            // Listen for the click event on all tabs in the accordion.\n            var tabs = element.find(\".maas-accordion-tab\");\n            angular.forEach(tabs, function(tab) {\n                tab = angular.element(tab);\n                tab.on(\"click\", {\n                    tab: tab\n                }, clickHandler);\n            });\n\n            // Remove the handlers when the scope is destroyed.\n            scope.$on(\"$destroy\", function() {\n                angular.forEach(tabs, function(tab) {\n                    angular.element(tab).off(\"click\", clickHandler);\n                });\n            });\n        }\n    };\n});\n","/* Copyright 2016-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Boot images directive.\n*/\n\nangular.module('MAAS').directive('maasBootImagesStatus', [\n    'BootResourcesManager',\n    function(BootResourcesManager) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            template: [\n                '<p class=\"page-header__status\" ',\n                    'data-ng-if=\"data.region_import_running\">',\n                    '<span class=\"u-text--loading\">',\n                        '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                        'Step 1/2: Region controller importing',\n                    '</span>',\n                '</p>',\n                '<p class=\"page-header__status\" ',\n                    'data-ng-if=\"!data.region_import_running && ',\n                    'data.rack_import_running\">',\n                    '<span class=\"u-text--loading\">',\n                        '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                        'Step 2/2: Rack controller(s) importing',\n                    '</span>',\n                '</p>'\n            ].join(''),\n            controller: function($scope, $rootScope, $element, $document) {\n                // This controller doesn't start the polling. The\n                // `maasBootImages` controller should be used on the page to\n                // start the polling. This just presents a nice status spinner\n                // when the polling is enabled.\n                $scope.data = BootResourcesManager.getData();\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasBootImages', [\n    '$filter', 'BootResourcesManager', 'UsersManager', 'ManagerHelperService',\n    function($filter, BootResourcesManager,\n        UsersManager, ManagerHelperService) {\n        return {\n            restrict: \"E\",\n            scope: {\n                design: \"=?\"\n            },\n            templateUrl: (\n                'static/partials/boot-images.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.saving = false;\n                $scope.stopping = false;\n                $scope.design = $scope.design || 'page';\n                $scope.bootResources = BootResourcesManager.getData();\n                $scope.ubuntuImages = [];\n                $scope.source = {\n                    isNew: false,\n                    tooMany: false,\n                    showingAdvanced: false,\n                    connecting: false,\n                    errorMessage: \"\",\n                    source_type: 'maas.io',\n                    url: '',\n                    keyring_filename: '',\n                    keyring_data: '',\n                    releases: [],\n                    arches: [],\n                    selections: {\n                        changed: false,\n                        releases: [],\n                        arches: []\n                    }\n                };\n                $scope.ubuntuCoreImages = [];\n                $scope.ubuntu_core = {\n                    changed: false,\n                    images: []\n                };\n                $scope.otherImages = [];\n                $scope.other = {\n                    changed: false,\n                    images: []\n                };\n                $scope.generatedImages = [];\n                $scope.customImages = [];\n                $scope.ubuntuDeleteId = null;\n                $scope.removingImage = null;\n\n                // Return true if the authenticated user is super user.\n                $scope.isSuperUser = function() {\n                    return UsersManager.isSuperUser();\n                };\n\n                // Return the overall title icon.\n                $scope.getTitleIcon = function() {\n                    if($scope.bootResources.resources.length === 0) {\n                        return 'p-icon--success-muted';\n                    } else {\n                        return 'p-icon--success';\n                    }\n                };\n\n                // Return true if the mirror path section should be shown.\n                $scope.showMirrorPath = function() {\n                    if($scope.source.source_type === 'custom') {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                };\n\n                // Return true if the advanced options are shown.\n                $scope.isShowingAdvancedOptions = function() {\n                    return $scope.source.showingAdvanced;\n                };\n\n                // Toggle showing the advanced options.\n                $scope.toggleAdvancedOptions = function() {\n                    $scope.source.showingAdvanced = (\n                        !$scope.source.showingAdvanced);\n                };\n\n                // Return true if both keyring options are set.\n                $scope.bothKeyringOptionsSet = function() {\n                    return (\n                        $scope.source.keyring_filename.length > 0 &&\n                        $scope.source.keyring_data.length > 0);\n                };\n\n                // Return true when the connect button for the mirror path\n                // should be shown.\n                $scope.showConnectButton = function() {\n                    return $scope.source.isNew;\n                };\n\n                // Called when the source radio chanaged.\n                $scope.sourceChanged = function() {\n                    var currentSources = $scope.bootResources.ubuntu.sources;\n                    if(currentSources.length === 0) {\n                        $scope.source.isNew = true;\n                    } else {\n                        var prevNew = $scope.source.isNew;\n                        $scope.source.isNew = (\n                            $scope.source.source_type !==\n                            currentSources[0].source_type);\n                        if($scope.source.source_type === 'custom') {\n                            $scope.source.isNew = $scope.source.isNew || (\n                                $scope.source.url !==\n                                currentSources[0].url\n                            );\n                        }\n                        if(prevNew && !$scope.source.isNew) {\n                            // No longer a new source set url and keyring to\n                            // original.\n                            $scope.source.url = currentSources[0].url;\n                            $scope.source.keyring_filename = (\n                                currentSources[0].keyring_filename);\n                            $scope.source.keyring_data = (\n                                currentSources[0].keyring_data);\n                        }\n                        $scope.source.releases = [];\n                        $scope.source.arches = [];\n                        $scope.source.selections = {\n                            changed: false,\n                            releases: [],\n                            arches: []\n                        };\n                    }\n                    $scope.updateSource();\n                    $scope.regenerateUbuntuImages();\n\n                    // When the source is new and its maas.io automatically\n                    // fetch the source information.\n                    if($scope.source.isNew &&\n                        $scope.source.source_type === 'maas.io') {\n                        $scope.connect();\n                    }\n                };\n\n                // Return true when the connect button should be disabled.\n                $scope.isConnectButtonDisabled = function() {\n                    if($scope.source.source_type === 'maas.io') {\n                        return false;\n                    } else {\n                        return ($scope.bothKeyringOptionsSet() ||\n                            $scope.source.url.length === 0 ||\n                            $scope.source.connecting);\n                    }\n                };\n\n                // Return the source parameters.\n                $scope.getSourceParams = function() {\n                    if($scope.source.source_type === 'maas.io') {\n                        return {\n                            source_type: 'maas.io'\n                        };\n                    } else {\n                        return {\n                            source_type: $scope.source.source_type,\n                            url: $scope.source.url,\n                            keyring_filename: $scope.source.keyring_filename,\n                            keyring_data: $scope.source.keyring_data\n                        };\n                    }\n                };\n\n                // Select the default images that should be selected. Current\n                // defaults are '18.04 LTS' and 'amd64'.\n                $scope.selectDefaults = function() {\n                    angular.forEach($scope.source.releases, function(release) {\n                        if(release.name === \"bionic\") {\n                            $scope.source.selections.releases.push(release);\n                        }\n                    });\n                    angular.forEach($scope.source.arches, function(arch) {\n                        if(arch.name === \"amd64\") {\n                            $scope.source.selections.arches.push(arch);\n                        }\n                    });\n                };\n\n                // Connected to the simplestreams endpoint. This only gets the\n                // information from the endpoint it does not save it into the\n                // database.\n                $scope.connect = function() {\n                    if($scope.isConnectButtonDisabled()) {\n                        return;\n                    }\n\n                    var source = $scope.getSourceParams();\n                    $scope.source.connecting = true;\n                    $scope.source.releases = [];\n                    $scope.source.arches = [];\n                    $scope.source.selections.changed = true;\n                    $scope.source.selections.releases = [];\n                    $scope.source.selections.arches = [];\n                    $scope.regenerateUbuntuImages();\n                    BootResourcesManager.fetch(source).then(function(data) {\n                        $scope.source.connecting = false;\n                        data = angular.fromJson(data);\n                        $scope.source.releases = data.releases;\n                        $scope.source.arches = data.arches;\n                        $scope.selectDefaults();\n                        $scope.regenerateUbuntuImages();\n                    }, function(error) {\n                        $scope.source.connecting = false;\n                        $scope.source.errorMessage = error;\n                    });\n                };\n\n                // Return true if the connect block should be shown.\n                $scope.showConnectBlock = function() {\n                    return $scope.source.tooMany || (\n                        $scope.source.isNew && !$scope.showSelections());\n                };\n\n                // Return true if the release and architecture selection\n                // should be shown.\n                $scope.showSelections = function() {\n                    return (\n                        $scope.source.releases.length > 0 &&\n                        $scope.source.arches.length > 0);\n                };\n\n                // Return the Ubuntu LTS releases.\n                $scope.getUbuntuLTSReleases = function() {\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    if($scope.source.isNew) {\n                        releases = $scope.source.releases;\n                    }\n                    var filtered = [];\n                    angular.forEach(releases, function(release) {\n                        if(!release.deleted &&\n                            release.title.indexOf('LTS') !== -1) {\n                            filtered.push(release);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return the Ubuntu non-LTS releases.\n                $scope.getUbuntuNonLTSReleases = function() {\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    if($scope.source.isNew) {\n                        releases = $scope.source.releases;\n                    }\n                    var filtered = [];\n                    angular.forEach(releases, function(release) {\n                        if(!release.deleted &&\n                            release.title.indexOf('LTS') === -1) {\n                            filtered.push(release);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return the available architectures.\n                $scope.getArchitectures = function() {\n                    var arches = $scope.bootResources.ubuntu.arches;\n                    if($scope.source.isNew) {\n                        arches = $scope.source.arches;\n                    }\n                    var filtered = [];\n                    angular.forEach(arches, function(arch) {\n                        if(!arch.deleted) {\n                            filtered.push(arch);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return true if the source has this selected.\n                $scope.isSelected = function(type, obj) {\n                    return $scope.source.selections[type].indexOf(obj) >= 0;\n                };\n\n                // Toggle the selection of the release or the architecture.\n                $scope.toggleSelection = function(type, obj) {\n                    var idx = $scope.source.selections[type].indexOf(obj);\n                    if(idx === -1) {\n                        $scope.source.selections[type].push(obj);\n                    } else {\n                        $scope.source.selections[type].splice(idx, 1);\n                    }\n                    $scope.source.selections.changed = true;\n                    $scope.regenerateUbuntuImages();\n                };\n\n                // Return true if the images table should be shown.\n                $scope.showImagesTable = function() {\n                    if($scope.ubuntuImages.length > 0) {\n                        return true;\n                    } else {\n                        // Show the images table source has\n                        // releases and architectures.\n                        return (\n                            $scope.source.arches.length > 0 &&\n                            $scope.source.releases.length > 0);\n                    }\n                };\n\n                // Regenerates the Ubuntu images list for the directive.\n                $scope.regenerateUbuntuImages = function() {\n                    var getResource = function() { return null; };\n                    var resources = $scope.bootResources.resources.filter(\n                        function(resource) {\n                            var name_split = resource.name.split('/');\n                            var resource_os = name_split[0];\n                            return (\n                                resource.rtype === 0 &&\n                                resource_os === 'ubuntu');\n                        });\n                    if(!$scope.source.isNew) {\n                        getResource = function(release, arch) {\n                            var i;\n                            for(i = 0; i < resources.length; i++) {\n                                // Only care about Ubuntu images.\n                                var resource = (resources[i]);\n                                var name_split = resource.name.split('/');\n                                var resource_release = name_split[1];\n                                if(resource_release === release &&\n                                    resource.arch === arch) {\n                                    resources.splice(i, 1);\n                                    return resource;\n                                }\n                            }\n                            return null;\n                        };\n                    }\n\n                    // Create the images based on the selections.\n                    $scope.ubuntuImages.length = 0;\n                    angular.forEach($scope.source.selections.releases,\n                        function(release) {\n                            angular.forEach($scope.source.selections.arches,\n                                function(arch) {\n                                    var image = {\n                                        icon: 'p-icon--status-queued',\n                                        title: release.title,\n                                        arch: arch.title,\n                                        size: '-',\n                                        status: 'Selected for download',\n                                        beingDeleted: false,\n                                        name: release.name\n                                    };\n                                    var resource = getResource(\n                                        release.name, arch.name);\n                                    if(angular.isObject(resource)) {\n                                        image.resourceId = resource.id;\n                                        image.icon = (\n                                            'p-icon--status-' + resource.icon);\n                                        image.size = resource.size;\n                                        image.status = resource.status;\n                                        if(resource.downloading) {\n                                            image.icon += ' u-animation--pulse';\n                                        }\n                                    }\n                                    $scope.ubuntuImages.push(image);\n                                });\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    if(!$scope.source.isNew) {\n                        angular.forEach(resources, function(resource) {\n                            var name_split = resource.name.split('/');\n                            var image = {\n                                icon: 'p-icon--status-failed',\n                                title: resource.title,\n                                arch: resource.arch,\n                                size: resource.size,\n                                status: 'Will be deleted',\n                                beingDeleted: true,\n                                name: name_split[1]\n                            };\n                            $scope.ubuntuImages.push(image);\n                        });\n                    }\n                };\n\n                // Regenerates the Ubuntu Core images list for the directive.\n                $scope.regenerateUbuntuCoreImages = function() {\n                    var isUbuntuCore = function(resource) {\n                        var name_split = resource.name.split('/');\n                        var resource_os = name_split[0];\n                        return (\n                            resource.rtype === 0 &&\n                            resource_os === 'ubuntu-core');\n                    };\n                    var resources = (\n                        $scope.bootResources.resources.filter(isUbuntuCore));\n                    var getResource = function(release, arch) {\n                        var i;\n                        for(i = 0; i < resources.length; i++) {\n                            // Only care about other images. Removing custom,\n                            // bootloaders, and Ubuntu images.\n                            var resource = (resources[i]);\n                            var name_split = resource.name.split('/');\n                            var resource_release = name_split[1];\n                            if(resource_release === release &&\n                                resource.arch === arch) {\n                                resources.splice(i, 1);\n                                return resource;\n                            }\n                        }\n                        return null;\n                    };\n\n                    // Create the images based on the selections.\n                    $scope.ubuntuCoreImages.length = 0;\n                    angular.forEach($scope.ubuntu_core.images,\n                        function(ubuntuCoreImage) {\n                            if(ubuntuCoreImage.checked) {\n                                var name_split = ubuntuCoreImage.name.split(\n                                    '/');\n                                var image = {\n                                    icon: 'p-icon--status-queued',\n                                    title: ubuntuCoreImage.title,\n                                    arch: name_split[1],\n                                    size: '-',\n                                    status: 'Selected for download',\n                                    beingDeleted: false\n                                };\n                                var resource = getResource(\n                                    name_split[3], name_split[1]);\n                                if(angular.isObject(resource)) {\n                                    image.icon = (\n                                        'p-icon--status-' + resource.icon);\n                                    image.size = resource.size;\n                                    image.status = resource.status;\n                                    if(resource.downloading) {\n                                        image.icon += ' u-animation--pulse';\n                                    }\n                                }\n                                $scope.ubuntuCoreImages.push(image);\n                            }\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    angular.forEach(resources, function(resource) {\n                        var image = {\n                            icon: 'p-icon--status-failed',\n                            title: resource.title,\n                            arch: resource.arch,\n                            size: resource.size,\n                            status: 'Will be deleted',\n                            beingDeleted: true\n                        };\n                        $scope.ubuntuCoreImages.push(image);\n                    });\n                };\n\n                // Regenerates the other images list for the directive.\n                $scope.regenerateOtherImages = function() {\n                    var isOther = function(resource) {\n                        var name_split = resource.name.split('/');\n                        var resource_os = name_split[0];\n                        return (\n                            resource.rtype === 0 &&\n                            resource_os !== 'ubuntu' &&\n                            resource_os !== 'ubuntu-core' &&\n                            resource_os !== 'custom');\n                    };\n                    var resources = (\n                        $scope.bootResources.resources.filter(isOther));\n                    var getResource = function(release, arch) {\n                        var i;\n                        for(i = 0; i < resources.length; i++) {\n                            // Only care about other images. Removing custom,\n                            // bootloaders, and Ubuntu images.\n                            var resource = (resources[i]);\n                            var name_split = resource.name.split('/');\n                            var resource_release = name_split[1];\n                            if(resource_release === release &&\n                                resource.arch === arch) {\n                                resources.splice(i, 1);\n                                return resource;\n                            }\n                        }\n                        return null;\n                    };\n\n                    // Create the images based on the selections.\n                    $scope.otherImages.length = 0;\n                    angular.forEach($scope.other.images,\n                        function(otherImage) {\n                            if(otherImage.checked) {\n                                var name_split = otherImage.name.split('/');\n                                var image = {\n                                    icon: 'p-icon--status-queued',\n                                    title: otherImage.title,\n                                    arch: name_split[1],\n                                    size: '-',\n                                    status: 'Selected for download',\n                                    beingDeleted: false\n                                };\n                                var resource = getResource(\n                                    name_split[3], name_split[1]);\n                                if(angular.isObject(resource)) {\n                                    image.icon = (\n                                        'p-icon--status-' + resource.icon);\n                                    image.size = resource.size;\n                                    image.status = resource.status;\n                                    if(resource.downloading) {\n                                        image.icon += ' u-animation--pulse';\n                                    }\n                                }\n                                $scope.otherImages.push(image);\n                            }\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    angular.forEach(resources, function(resource) {\n                        var image = {\n                            icon: 'p-icon--status-failed',\n                            title: resource.title,\n                            arch: resource.arch,\n                            size: resource.size,\n                            status: 'Will be deleted',\n                            beingDeleted: true\n                        };\n                        $scope.otherImages.push(image);\n                    });\n                };\n\n                // Helper for basic image generation.\n                $scope._regenerateImages = function(rtype, images) {\n                    // Create the generated images list.\n                    images.length = 0;\n                    angular.forEach($scope.bootResources.resources,\n                        function(resource) {\n                            if(resource.rtype === rtype) {\n                                var image = {\n                                    icon: 'p-icon--status-' + resource.icon,\n                                    title: resource.title,\n                                    arch: resource.arch,\n                                    image_id: resource.id,\n                                    size: resource.size,\n                                    status: resource.status\n                                };\n                                if(resource.downloading) {\n                                    image.icon += ' u-animation--pulse';\n                                }\n                                images.push(image);\n                            }\n                        });\n                };\n\n                // Regenerates the generated images list for the directive.\n                $scope.regenerateGeneratedImages = function() {\n                    $scope._regenerateImages(1, $scope.generatedImages);\n                };\n\n                // Regenerates the custom images list for the directive.\n                $scope.regenerateCustomImages = function() {\n                    $scope._regenerateImages(2, $scope.customImages);\n                };\n\n                // Returns true if at least one LTS is selected.\n                $scope.ltsIsSelected = function() {\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        // Must have LTS in the title and not being deleted.\n                        if(!$scope.ubuntuImages[i].beingDeleted &&\n                            $scope.ubuntuImages[i].title.indexOf('LTS') >= 0) {\n                            // Must be greater than Ubuntu series 14.\n                            var series = parseInt(\n                                $scope.ubuntuImages[i].title.split('.')[0], 10);\n                            if(series >= 14) {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                };\n\n                // Returns true if the commission series is selected\n                $scope.commissioningSeriesSelected = function() {\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if(!$scope.ubuntuImages[i].beingDeleted &&\n                           $scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n\n                // Return if we are asking about deleting this image.\n                $scope.isShowingDeleteConfirm = function(image) {\n                    return image === $scope.removingImage;\n                };\n\n                // Mark the image for deletion.\n                $scope.quickRemove = function(image) {\n                    $scope.removingImage = image;\n                };\n\n                // Cancel image deletion.\n                $scope.cancelRemove = function() {\n                    $scope.removingImage = null;\n                };\n\n                // Mark the image for deletion.\n                $scope.confirmRemove = function(image) {\n                    if(image === $scope.removingImage) {\n                        BootResourcesManager.deleteImage(\n                            {id: image.image_id});\n                    }\n                    $scope.cancelRemove();\n                };\n\n                // Return true if the stop import button should be shown.\n                $scope.showStopImportButton = function() {\n                    return $scope.bootResources.region_import_running;\n                };\n\n                // Return true if should show save selection button, this\n                // doesn't mean it can actually be clicked.\n                $scope.showSaveSelection = function() {\n                    return $scope.showImagesTable();\n                };\n\n                // Return true if can save the current selection.\n                $scope.canSaveSelection = function() {\n                    var commissioning_series_being_deleted = false;\n                    var commissioning_series_arches = 0;\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if($scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series) {\n                            commissioning_series_arches++;\n                        }\n                    }\n                    // Only prevent the current commissioning series from\n                    // being deleted if it isn't the commissioning series isn't\n                    // available on another architecture.. If the current\n                    // commissioning series isn't currently selected another\n                    // LTS may be choosen, downloaded, and configured as the\n                    // commissioning series.\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if($scope.ubuntuImages[i].beingDeleted &&\n                           $scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series &&\n                           commissioning_series_arches === 1) {\n                            commissioning_series_being_deleted = true;\n                            break;\n                        }\n                    }\n                    return (\n                        !commissioning_series_being_deleted &&\n                        !$scope.saving &&\n                        !$scope.stopping &&\n                        $scope.ltsIsSelected());\n                };\n\n                // Return the text for the save selection button.\n                $scope.getSaveSelectionText = function() {\n                    if($scope.saving) {\n                        return \"Saving...\";\n                    } else {\n                        return \"Update selection\";\n                    }\n                };\n\n                // Return true if can stop current import.\n                $scope.canStopImport = function() {\n                    return !$scope.saving && !$scope.stopping;\n                };\n\n                // Return the text for the stop import button.\n                $scope.getStopImportText = function() {\n                    if($scope.stopping) {\n                        return \"Stopping...\";\n                    } else {\n                        return \"Stop import\";\n                    }\n                };\n\n                // Called to stop the import.\n                $scope.stopImport = function() {\n                    if(!$scope.canStopImport()) {\n                        return;\n                    }\n\n                    $scope.stopping = true;\n                    BootResourcesManager.stopImport().then(function() {\n                        $scope.stopping = false;\n                    });\n                };\n\n                // Save the selections into boot selections.\n                $scope.saveSelection = function() {\n                    if(!$scope.canSaveSelection()) {\n                        return;\n                    }\n\n                    var params = $scope.getSourceParams();\n                    params.releases = (\n                        $scope.source.selections.releases.map(function(obj) {\n                            return obj.name;\n                        }));\n                    params.arches = (\n                        $scope.source.selections.arches.map(function(obj) {\n                            return obj.name;\n                        }));\n                    $scope.saving = true;\n                    BootResourcesManager.saveUbuntu(params).then(function() {\n                        $scope.saving = false;\n                        $scope.source.isNew = false;\n                        $scope.source.selections.changed = false;\n                        $scope.updateSource();\n                    });\n                };\n\n                // Re-create an array with the new objects using the old\n                // selected array.\n                $scope.getNewSelections = function(newObjs, oldSelections) {\n                    var newSelections = [];\n                    angular.forEach(newObjs, function(obj) {\n                        angular.forEach(oldSelections, function(selection) {\n                            if(obj.name === selection.name) {\n                                newSelections.push(obj);\n                            }\n                        });\n                    });\n                    return newSelections;\n                };\n\n                // Update the source information.\n                $scope.updateSource = function() {\n                    // Do not update if the source is new.\n                    if($scope.source.isNew) {\n                        return;\n                    }\n\n                    var source_len = $scope.bootResources.ubuntu.sources.length;\n                    if(source_len === 0) {\n                        $scope.source.isNew = true;\n                        $scope.source.source_type = 'custom';\n                        $scope.source.errorMessage = (\n                            \"Currently no source exists.\");\n                    } else if(source_len === 1) {\n                        var source = $scope.bootResources.ubuntu.sources[0];\n                        $scope.source.source_type = source.source_type;\n                        if(source.source_type === \"maas.io\") {\n                            $scope.source.url = \"\";\n                            $scope.source.keyring_filename = \"\";\n                            $scope.source.keyring_data = \"\";\n                        } else {\n                            $scope.source.url = source.url;\n                            $scope.source.keyring_filename = (\n                                source.keyring_filename);\n                            $scope.source.keyring_data = source.keyring_data;\n                        }\n                        $scope.source.releases = (\n                            $scope.bootResources.ubuntu.releases);\n                        $scope.source.arches = (\n                            $scope.bootResources.ubuntu.arches);\n                        if(!$scope.source.selections.changed) {\n                            // User didn't make a change update to the\n                            // current selections server side.\n                            $scope.source.selections.releases = (\n                                $scope.source.releases.filter(function(obj) {\n                                    return obj.checked;\n                                }));\n                            $scope.source.selections.arches = (\n                                $scope.source.arches.filter(function(obj) {\n                                return obj.checked;\n                            }));\n                        } else {\n                            // Update the objects to be the new objects, with\n                            // the same selections.\n                            $scope.source.selections.releases = (\n                                $scope.getNewSelections(\n                                    $scope.source.releases,\n                                    $scope.source.selections.releases));\n                            $scope.source.selections.arches = (\n                                $scope.getNewSelections(\n                                    $scope.source.arches,\n                                    $scope.source.selections.arches));\n                        }\n                        $scope.regenerateUbuntuImages();\n                    } else {\n                        // Having more than one source prevents modification\n                        // of the sources.\n                        $scope.source.tooMany = true;\n                        $scope.source.releases = (\n                            $scope.bootResources.ubuntu.releases);\n                        $scope.source.arches = (\n                            $scope.bootResources.ubuntu.arches);\n                        $scope.source.selections.releases = (\n                            $scope.source.releases.filter(function(obj) {\n                                return obj.checked;\n                            }));\n                        $scope.source.selections.arches = (\n                            $scope.source.arches.filter(function(obj) {\n                            return obj.checked;\n                        }));\n                        $scope.source.errorMessage = (\n                            \"More than one image source exists. UI does not \" +\n                            \"support modification of sources when more than \" +\n                            \"one has been defined. Used the API to adjust \" +\n                            \"your sources.\");\n                        $scope.regenerateUbuntuImages();\n                    }\n                };\n\n                // Toggle the selection of Ubuntu Core images.\n                $scope.toggleUbuntuCoreSelection = function(image) {\n                    $scope.ubuntu_core.changed = true;\n                    image.checked = !image.checked;\n                    $scope.regenerateUbuntuCoreImages();\n                };\n\n                // Save the Ubuntu Core image selections into boot selections.\n                $scope.saveUbuntuCoreSelection = function() {\n                    var params = {\n                        images: $scope.ubuntu_core.images.filter(function(\n                                image) {\n                            return image.checked;\n                        }).map(function(image) {\n                            return image.name;\n                        })\n                    };\n                    $scope.saving = true;\n                    BootResourcesManager.saveUbuntuCore(params).then(\n                            function() {\n                        $scope.saving = false;\n                    });\n                };\n\n                // Toggle the selection of other images.\n                $scope.toggleOtherSelection = function(image) {\n                    $scope.other.changed = true;\n                    image.checked = !image.checked;\n                    $scope.regenerateOtherImages();\n                };\n\n                // Save the other image selections into boot selections.\n                $scope.saveOtherSelection = function() {\n                    var params = {\n                        images: $scope.other.images.filter(function(image) {\n                            return image.checked;\n                        }).map(function(image) {\n                            return image.name;\n                        })\n                    };\n                    $scope.saving = true;\n                    BootResourcesManager.saveOther(params).then(function() {\n                        $scope.saving = false;\n                    });\n                };\n\n                // Return True if the Ubuntu image can be removed.\n                $scope.canBeRemoved = function(image) {\n                    // Image must have a resourceId to be able to be removed.\n                    if(!angular.isNumber(image.resourceId)) {\n                        return false;\n                    }\n\n                    // If the release or architecture is set to deleted\n                    // then this image can be deleted.\n                    var i;\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    var arches = $scope.bootResources.ubuntu.arches;\n                    for(i = 0; i < releases.length; i++) {\n                        var release = releases[i];\n                        if(release.deleted && image.title === release.title) {\n                            return true;\n                        }\n                    }\n                    for(i = 0; i < arches.length; i++) {\n                        var arch = arches[i];\n                        if(arch.deleted && image.arch === arch.name) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n\n                // Deletes the give image.\n                $scope.deleteImage = function(image) {\n                    if(angular.isObject(image)) {\n                        $scope.ubuntuDeleteId = image.resourceId;\n                    } else {\n                        $scope.ubuntuDeleteId = null;\n                    }\n                };\n\n                // Deletes the give image.\n                $scope.confirmDeleteImage = function() {\n                    // Delete the image by its resourceId.\n                    BootResourcesManager.deleteImage(\n                        {id: $scope.ubuntuDeleteId});\n                    $scope.ubuntuDeleteId = null;\n                };\n\n                // Start polling now that the directive is viewable and ensure\n                // the UserManager is loaded.\n                var ready = 2;\n                BootResourcesManager.startPolling().then(function() {\n                    ready -= 1;\n                    if(ready === 0) {\n                        $scope.loading = false;\n                    }\n                });\n                ManagerHelperService.loadManager(\n                    $scope, UsersManager).then(function() {\n                    ready -= 1;\n                    if(ready === 0) {\n                        $scope.loading = false;\n                    }\n                });\n\n                // Update the source information with the ubuntu source\n                // information changes.\n                $scope.$watch(\"bootResources.ubuntu\", function() {\n                    if(!angular.isObject($scope.bootResources.ubuntu)) {\n                        return;\n                    }\n                    $scope.updateSource();\n                });\n\n                // Regenerate the images array when the resources change.\n                $scope.$watch(\"bootResources.resources\", function() {\n                    if(!angular.isArray($scope.bootResources.resources)) {\n                        return;\n                    }\n                    $scope.regenerateUbuntuImages();\n                    $scope.regenerateUbuntuCoreImages();\n                    $scope.regenerateOtherImages();\n                    $scope.regenerateGeneratedImages();\n                    $scope.regenerateCustomImages();\n                });\n\n                $scope.$watch(\"bootResources.ubuntu_core_images\", function() {\n                    var images = $scope.bootResources.ubuntu_core_images;\n                    if(!angular.isArray(images)) {\n                        return;\n                    }\n                    if(!$scope.ubuntu_core.changed) {\n                        $scope.ubuntu_core.images = images;\n                    }\n                    $scope.regenerateUbuntuCoreImages();\n                });\n\n                $scope.$watch(\"bootResources.other_images\", function() {\n                    if(!angular.isArray($scope.bootResources.other_images)) {\n                        return;\n                    }\n                    if(!$scope.other.changed) {\n                        $scope.other.images = $scope.bootResources.other_images;\n                    }\n                    $scope.regenerateOtherImages();\n                });\n\n                // Stop polling when the directive is destroyed.\n                $scope.$on('$destroy', function() {\n                    BootResourcesManager.stopPolling();\n                });\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Call to action directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the cta.html into the template cache.\n    $templateCache.put('directive/templates/cta.html', [\n      '<div class=\"p-contextual-menu\">',\n        '<button ',\n          'class=\"p-button p-contextual-menu__toggle\" ',\n          'aria-controls=\"#cta-menu\" ',\n          'aria-expanded=\"false\" ',\n          'aria-haspopup=\"true\" ',\n          'data-ng-click=\"shown=!shown\"',\n        '>',\n          '{$ getTitle() $}',\n          '<i class=\"p-icon--chevron on-right\"></i>',\n        '</button>',\n        '<div class=\"p-contextual-menu__dropdown\" ',\n          'id=\"cta-menu\" ',\n          'aria-hidden=\"false\" ',\n          'aria-label=\"submenu\"',\n          'data-ng-show=\"shown\"',\n        '>',\n          '<button ',\n            'class=\"',\n              'p-button u-no-margin--left p-contextual-menu__link',\n            '\" ',\n            'data-ng-repeat=\"select in maasCta\" ',\n            'data-ng-click=\"selectItem(select)\">',\n              '{$ getOptionTitle(select) $}',\n          '</button>',\n        '</div>',\n      '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasCta', function() {\n    return {\n        restrict: \"A\",\n        replace: true,\n        require: \"ngModel\",\n        scope: {\n            maasCta: '=',\n            ngModel: '='\n        },\n        templateUrl: 'directive/templates/cta.html',\n        link : function(scope, element, attrs, ngModelCtrl) {\n            // Use the link function to grab the ngModel controller.\n\n            // Title of the button when not active.\n            var defaultTitle = \"Take action\";\n            if(angular.isString(attrs.defaultTitle) &&\n                attrs.defaultTitle !== \"\") {\n                defaultTitle = attrs.defaultTitle;\n            }\n\n            // When an item is selected in the list set the title, hide the\n            // dropdown, and set the value to the given model.\n            scope.selectItem = function(select) {\n                scope.shown = false;\n                ngModelCtrl.$setViewValue(select);\n            };\n\n            // Return the title of the dropdown button.\n            scope.getTitle = function() {\n                if(angular.isObject(ngModelCtrl.$modelValue)) {\n                    option = ngModelCtrl.$modelValue;\n                    scope.secondary = true;\n                    // Some designs have the requirement that the title of\n                    // the menu option change if it is selected.\n                    if(angular.isString(option.selectedTitle)) {\n                        return option.selectedTitle;\n                    }\n                    return option.title;\n                } else {\n                    scope.secondary = false;\n                    return defaultTitle;\n                }\n            };\n\n            // Called to get the title for each option. (Sometimes the title\n            // of an option is different when it is selected.)\n            scope.getOptionTitle = function(option) {\n                if(!scope.secondary) {\n                    return option.title;\n                } else {\n                    if(angular.isString(option.selectedTitle)) {\n                        return option.selectedTitle;\n                    } else {\n                        return option.title;\n                    }\n                }\n            };\n\n            // When the model changes in the above selectItem function this\n            // function will be called causing the ngChange directive to be\n            // fired.\n            ngModelCtrl.$viewChangeListeners.push(function() {\n                scope.$eval(attrs.ngChange);\n            });\n        },\n        controller: function($scope, $rootScope, $element, $document) {\n            // Default dropdown is hidden.\n            $scope.shown = false;\n            $scope.secondary = false;\n\n            // Don't propagate the element click. This stops the click event\n            // from firing on the body element.\n            $element.bind('click', function (evt) {\n                evt.stopPropagation();\n            });\n\n            // If a click makes it to the body element then hide the dropdown.\n            $document.find('body').bind('click', function () {\n                // Use $apply because this function will be called outside\n                // of the digest cycle.\n                $rootScope.$apply($scope.shown = false);\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller status icon. Used in the controllers listing on the nodes page.\n */\n\nangular.module('MAAS').directive('maasCardLoader', ['$compile',\n  function($compile) {\n      return {\n          restrict: \"A\",\n          link: function(scope, element, attrs) {\n            var templateUrl = (\n                'static/partials/cards/' + attrs.maasCardLoader + (\n                  '.html?v=' + MAAS_config.files_version));\n            var include = (\n              '<ng-include src=\"\\'' + templateUrl + '\\'\"></ng-include>');\n            element.html(include);\n            $compile(element.contents())(scope);\n          }\n      };\n  }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Accordion directive.\n *\n * Provides an accordion effect to an element with maas-accordion class and\n * all child elements with maas-accordion-tab. Only one accordion tab is open\n * at a time, selecting another accordion will set \"active\" on that\n * accordion tab.\n */\n\n\n angular.module('MAAS').directive('maasCodeLines', function () {\n     return {\n         restrict: \"A\",\n         scope: {\n             maasCodeLines: '&'\n         },\n         link: function(scope, element, attributes) {\n\n             function insertContent() {\n\n                 // Empty the element contents and include again, this asures\n                 // its the most up-to-date content\n                 element.empty();\n                 element.text(scope.maasCodeLines);\n\n                 // Count the line contents\n                 var lines = element.html().split('\\n'),\n                     newLine = '',\n                     insert = \"<code>\";\n\n                 // Each line is to be wrapped by a span which is style & given\n                 // its appropriate line number\n                 $.each(lines, function() {\n                   insert += newLine + '<span class=\"code-line\">' +\n                   this + '</span>';\n                   newLine = '\\n';\n                 });\n                 insert += \"</code>\";\n\n                 // Re-insert the contents\n                 element.html(insert);\n             }\n\n             // Watch the contents of the element so when it changes to\n             // re-add the line numbers.\n             scope.$watch(scope.maasCodeLines, insertContent);\n         }\n     };\n });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Content editable directive.\n *\n * HTML provides a feature that allows any element to be editable with\n * contenteditable attribute. This directive uses that attribute to link\n * the contents of that element to a model. This directive is not prefixed\n * with maas so Angular can identify all elements with this attribute.\n */\n\n\nangular.module('MAAS').directive('contenteditable', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            ngDisabled: \"&\",\n            maasEditing: \"&\"\n        },\n        link: function(scope, element, attrs, ngModel) {\n\n            // If the element is disabled then make the element lose focus.\n            var focusHandler = function() {\n                if(scope.ngDisabled()) {\n                    element.blur();\n                } else {\n                    // Didn't lose focus, so its now editing.\n                    scope.$apply(scope.maasEditing());\n                }\n            };\n            element.bind(\"focus\", focusHandler);\n\n            // Update the value of the model when events occur that\n            // can change the value of the model.\n            var changeHandler = function() {\n                scope.$apply(ngModel.$setViewValue(element.text()));\n            };\n            element.bind(\"blur keyup change\", changeHandler);\n\n            // When the model changes set the html content for that element.\n            ngModel.$render = function() {\n                element.html(ngModel.$viewValue || \"\");\n            };\n\n            // When the model changes this function will be called causing the\n            // ngChange directive to be fired.\n            ngModel.$viewChangeListeners.push(function() {\n                scope.$eval(attrs.ngChange);\n            });\n\n            // Remove the event handler on the element when the scope is\n            // destroyed.\n            scope.$on(\"$destroy\", function() {\n                element.unbind(\"blur keyup change\", changeHandler);\n                element.unbind(\"focus\", focusHandler);\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller image status directive.\n *\n * Shows the image status for a controller.\n */\n\n angular.module('MAAS').service('ControllerImageStatusService',\n    ['$timeout', '$interval', 'ControllersManager', function(\n        $timeout, $interval, ControllersManager) {\n     var self = this;\n\n     // How often to check the sync status of a controller in seconds.\n     var CHECK_INTERVAL = 30;\n\n     // List of controllers that need to have the image status updated.\n     this.controllers = [];\n\n     // List of current controller statues.\n     this.statuses = {};\n\n     // Interval function that is called to update the statuses.\n     this.updateStatuses = function() {\n         var controllerIds = [];\n         angular.forEach(self.controllers, function(system_id) {\n             controllerIds.push({system_id: system_id});\n         });\n\n         // Check the image states.\n         ControllersManager.checkImageStates(controllerIds).then(\n                 function(results) {\n             angular.forEach(controllerIds, function(controller) {\n                 var status = results[controller.system_id];\n                 if(status) {\n                     self.statuses[controller.system_id] = status;\n                 } else {\n                     self.statuses[controller.system_id] = \"Unknown\";\n                 }\n             });\n         });\n     };\n\n     // Register this controller system_id.\n     this.register = function(system_id) {\n         var known = self.controllers.indexOf(system_id) >= 0;\n         if(!known) {\n             self.controllers.push(system_id);\n         }\n\n         // When the interval is already running and its a new controller then\n         // the interval needs to be reset. When it already exists it doesn't\n         // need to be reset.\n         if(angular.isDefined(self.runningInterval)) {\n             if(known) {\n                 return;\n             } else {\n                 $interval.cancel(self.runningInterval);\n                 self.runningInterval = undefined;\n             }\n         }\n\n         // If its not running and the timeout has been started we re-create\n         // the timeout. This delays the start of the interval until the\n         // all directives on the page have been fully loaded.\n         if(angular.isDefined(self.startTimeout)) {\n             $timeout.cancel(self.startTimeout);\n         }\n         self.startTimeout = $timeout(function() {\n             self.startTimeout = undefined;\n             self.runningInterval = $interval(function() {\n                 self.updateStatuses();\n             }, CHECK_INTERVAL * 1000);\n             self.updateStatuses();\n         }, 100);\n     };\n\n     // Unregister the controller.\n     this.unregister = function(system_id) {\n        var idx = self.controllers.indexOf(system_id);\n        if(idx > -1) {\n            self.controllers.splice(idx, 1);\n        }\n\n        // If no controllers are left stop all intervals and timeouts.\n        if(self.controllers.length === 0) {\n            if(angular.isDefined(self.startTimeout)) {\n                $timeout.cancel(self.startTimeout);\n                self.startTimeout = undefined;\n            }\n            if(angular.isDefined(self.runningInterval)) {\n                $interval.cancel(self.runningInterval);\n                self.runningInterval = undefined;\n            }\n        }\n     };\n\n     // Return true if the spinner should be shown.\n     this.showSpinner = function(system_id) {\n         var status = self.statuses[system_id];\n         if(angular.isString(status) && status !== \"Syncing\") {\n             return false;\n         } else {\n             return true;\n         }\n     };\n\n     // Get the image status.\n     this.getImageStatus = function(system_id) {\n         var status = self.statuses[system_id];\n         if(angular.isString(status)) {\n             return status;\n         } else {\n             return \"Asking for status...\";\n         }\n     };\n}]);\n\nangular.module('MAAS').directive('maasControllerImageStatus',\n    ['ControllerImageStatusService', function(\n        ControllerImageStatusService) {\n\n    return {\n        restrict: \"E\",\n        scope: {\n            systemId: \"=\"\n        },\n        template: [\n            '<i class=\"p-icon--loading u-animation--spin\"',\n                'data-ng-if=\"showSpinner()\"></i> ',\n            '{$ getImageStatus() $}'].join(''),\n        link: function(scope, element, attrs) {\n            // Don't register until the systemId is set.\n            var unwatch, registered = false;\n            unwatch = scope.$watch(\"systemId\", function() {\n                if(angular.isDefined(scope.systemId) && !registered) {\n                    ControllerImageStatusService.register(scope.systemId);\n                    registered = true;\n                    unwatch();\n                }\n            });\n\n            scope.showSpinner = function() {\n                return ControllerImageStatusService.showSpinner(\n                    scope.systemId);\n            };\n            scope.getImageStatus = function() {\n                return ControllerImageStatusService.getImageStatus(\n                    scope.systemId);\n            };\n\n            // Unregister when destroyed.\n            scope.$on(\"$destroy\", function() {\n                if(registered) {\n                    ControllerImageStatusService.unregister(scope.systemId);\n                }\n            });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller status icon. Used in the controllers listing on the nodes page.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the controller-status.html into the template cache.\n    $templateCache.put('directive/templates/controller-status.html', [\n        '<span>',\n          '<span class=\"p-icon--{$ serviceClass $}\" data-ng-if=\"!textOnly\">',\n          '</span>',\n          '<span data-ng-if=\"textOnly\" data-ng-bind=\"serviceText\"></span>',\n        '</span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasControllerStatus', [\n    \"ControllersManager\", \"ServicesManager\",\n    function(ControllersManager, ServicesManager) {\n        return {\n            restrict: \"A\",\n            scope: {\n                controller: '=maasControllerStatus',\n                textOnly: '=?maasTextOnly'\n            },\n            templateUrl: 'directive/templates/controller-status.html',\n            controller: function($scope) {\n\n                $scope.serviceClass = \"unknown\";\n                $scope.services = ServicesManager.getItems();\n                $scope.serviceText = \"\";\n                if($scope.textOnly) {\n                  $scope.textOnly = true;\n                } else {\n                  $scope.textOnly = false;\n                }\n\n                // Return the status class for the service.\n                function getClass(service) {\n                    if(service.status === \"running\") {\n                        return \"success\";\n                    } else if (service.status === \"degraded\") {\n                        return \"warning\";\n                    } else if (service.status === \"dead\") {\n                        return \"error\";\n                    } else {\n                        return \"unknown\";\n                    }\n                }\n\n                // Return the number of times class is displayed.\n                function countClass(classes, class_name) {\n                  var counter = 0;\n                  angular.forEach(classes, function(name) {\n                    if(name === class_name) {\n                      counter++;\n                    }\n                  });\n                  return counter;\n                }\n\n                // Update the class based on status of the services on the\n                // controller.\n                function updateStatusClass() {\n                    $scope.serviceClass = \"unknown\";\n                    if(angular.isObject($scope.controller)) {\n                        var services = ControllersManager.getServices(\n                            $scope.controller);\n                        if(services.length > 0) {\n                            var classes = services.map(getClass);\n                            if(classes.indexOf(\"error\") !== -1) {\n                                $scope.serviceClass = \"power-error\";\n                                $scope.serviceText = countClass(\n                                  classes, \"error\") + \" dead\";\n                            } else if(classes.indexOf(\"warning\") !== -1) {\n                                $scope.serviceClass = \"warning\";\n                                $scope.serviceText = countClass(\n                                  classes, \"warning\") + \" degraded\";\n                            } else {\n                                $scope.serviceClass = \"success\";\n                                $scope.serviceText = countClass(\n                                  classes, \"success\") + \" running\";\n                            }\n                        }\n                    }\n                }\n\n                // Watch the services array and the services on the controller,\n                // if any changes then update the status.\n                $scope.$watch(\"controller.service_ids\", updateStatusClass);\n                $scope.$watch(\"services\", updateStatusClass, true);\n\n                // Update on creation.\n                updateStatusClass();\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Double click overlay directive.\n *\n * Provides the ability for a disabled element to still accept the\n * double click event. By default if an element is disabled then it will\n * receive no click events. This overlays the element with another element\n * that will still receive click events.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the style for the maas-dbl-overlay class. We inject the style\n    // instead of placing it in maas-styles.css because it is required for\n    // this directive to work at all.\n    var styleElement = document.createElement('style');\n    styleElement.innerHTML = [\n        '.maas-dbl-overlay {',\n            'display: inline-block;',\n            'position: relative;',\n        '}',\n        '.maas-dbl-overlay--overlay {',\n            'position: absolute;',\n            'left: 0;',\n            'right: 0;',\n            'top: 0;',\n            'bottom: 0;',\n            '-webkit-touch-callout: none;',\n            '-webkit-user-select: none;',\n            '-khtml-user-select: none;',\n            '-moz-user-select: none;',\n            '-ms-user-select: none;',\n            'user-select: none;',\n        '}'\n    ].join('');\n    document.getElementsByTagName('head')[0].appendChild(styleElement);\n\n    // Inject the double_click_overlay.html into the template cache.\n    $templateCache.put('directive/templates/double_click_overlay.html', [\n        '<div class=\"maas-dbl-overlay\">',\n            '<span data-ng-transclude></span>',\n            '<div class=\"maas-dbl-overlay--overlay\"></div>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasDblClickOverlay', ['BrowserService',\n    function(BrowserService) {\n        return {\n            restrict: \"A\",\n            transclude: true,\n            replace: true,\n            scope: {\n                maasDblClickOverlay: '&'\n            },\n            templateUrl: 'directive/templates/double_click_overlay.html',\n            link: function(scope, element, attrs) {\n                // Create the click function that will be called when the\n                // overlay is clicked. This changes based on the element that\n                // is transcluded into this directive.\n                var overlay = element.find(\".maas-dbl-overlay--overlay\");\n                var transclude = element.find(\n                    \"span[data-ng-transclude]\").children()[0];\n                var clickElement;\n                if(transclude.tagName === \"SELECT\") {\n                    clickElement = function() {\n                        // Have to create a custom mousedown event for the\n                        // select click to be handled. Using 'click()' or\n                        //'focus()' will not work.\n                        var evt = document.createEvent('MouseEvents');\n                        evt.initMouseEvent(\n                            'mousedown', true, true, window, 0, 0, 0, 0, 0,\n                            false, false, false, false, 0, null);\n                        transclude.dispatchEvent(evt);\n                    };\n\n                    // Selects use a pointer for the cursor.\n                    overlay.css({ cursor: \"pointer\" });\n                } else if(transclude.tagName === \"INPUT\") {\n                    clickElement = function() {\n                        // An input will become in focus when clicked.\n                        angular.element(transclude).triggerHandler('focus');\n                    };\n\n                    // Inputs use a text for the cursor.\n                    overlay.css({ cursor: \"text\" });\n                } else {\n                    clickElement = function() {\n                        // Standard element just call click on that element.\n                        angular.element(transclude).triggerHandler('click');\n                    };\n\n                    // Don't set cursor on other element types.\n                }\n\n                // Add the click and double click handlers.\n                var overlayClick = function(evt) {\n                    clickElement();\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                };\n                var overlayDblClick = function(evt) {\n                    // Call the double click handler with in the scope.\n                    scope.$apply(scope.maasDblClickOverlay);\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                };\n\n                // Enable the handlers if not Firefox. It firefox, then hide\n                // the overlay as Firefox does not allow sending click events\n                // to select elements.\n                if(BrowserService.browser !== \"firefox\") {\n                    overlay.on(\"click\", overlayClick);\n                    overlay.on(\"dblclick\", overlayDblClick);\n                } else {\n                    overlay.addClass(\"ng-hide\");\n                }\n\n                // Remove the handlers when the scope is destroyed.\n                scope.$on(\"$destroy\", function() {\n                    overlay.off(\"click\", overlayClick);\n                    overlay.off(\"dblclick\", overlayDblClick);\n                });\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * OS/Release select directive.\n */\n\nangular.module('MAAS').directive('maasDefaultOsSelect', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            \"osInput\": \"@maasDefaultOsSelect\",\n            \"seriesInput\": \"@maasDefaultSeriesSelect\",\n        },\n        link: function($scope, $element, $attrs) {\n            var osElement = angular.element($element.find($scope.osInput));\n            var seriesElement = angular.element(\n                $element.find($scope.seriesInput));\n            if(!osElement || !seriesElement) {\n                throw new Error(\"Unable to find os or series elements\");\n            }\n\n            var selectVisableOption = function(options) {\n                var first_option = null;\n                angular.forEach(options, function(option) {\n                    option = angular.element(option);\n                    if(!option.hasClass('u-hide')) {\n                        if(first_option === null) {\n                            first_option = option;\n                        }\n                    }\n                });\n                if(first_option !== null) {\n                    seriesElement.val(first_option.val());\n                }\n            };\n\n            var modifyOption = function(option, newOSValue, initialSkip) {\n                var selected = false;\n                var value = option.val();\n                var split_value = value.split(\"/\");\n\n                // If \"Default OS\" is selected, then\n                // only show \"Default OS Release\".\n                if(newOSValue === '') {\n                    if(value === '') {\n                        option.removeClass('u-hide');\n                        option.attr('selected', 'selected');\n                    } else {\n                        option.addClass('u-hide');\n                    }\n                } else {\n                    if(split_value[0] === newOSValue) {\n                        option.removeClass('u-hide');\n                        if(split_value[1] === '' && !initialSkip) {\n                            selected = true;\n                            option.attr('selected', 'selected');\n                        }\n                    } else {\n                        option.addClass('u-hide');\n                    }\n                }\n                return selected;\n            };\n\n            var switchTo = function(newOSValue, initialSkip) {\n                var options = seriesElement.find('option');\n                var selected = false;\n                angular.forEach(options, function(option) {\n                    var sel = modifyOption(\n                        angular.element(option), newOSValue, initialSkip);\n                    if (selected === false) {\n                        selected = sel;\n                    }\n                });\n\n                // We skip selection on first load, as Django will already\n                // provide the users, current selection. Without this the\n                // current selection will be clobered.\n                if (initialSkip) {\n                    return;\n                }\n\n                // See if a selection was made, if not then we need\n                // to select the first visible as a default is not\n                // present.\n                if(!selected) {\n                    selectVisableOption(options);\n                }\n            };\n\n            // Call switchTo any time the os changes.\n            osElement.on('change', function(evt) {\n                switchTo(osElement.val(), false);\n            });\n\n            // Initialize the options.\n            switchTo(osElement.val(), true);\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n*/\n\nangular.module('MAAS').directive('maasEnter', function () {\n    return {\n        restrict: \"A\",\n        link: function (scope, element, attrs) {\n            element.bind(\"keydown keypress\", function (evt) {\n                if(evt.which === 13) {\n                    scope.$apply(function () {\n                        scope.$eval(attrs.maasEnter);\n                    });\n                    evt.preventDefault();\n                }\n            });\n        }\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Enter blur directive.\n *\n * When the enter key is pressed make the element lose focus (aka. blur event).\n */\n\n\nangular.module('MAAS').directive('maasEnterBlur', function() {\n    return {\n        restrict: \"A\",\n        link: function(scope, element, attrs) {\n            element.bind(\"keydown keypress\", function(evt) {\n                if(evt.which === 13) {\n                    element.blur();\n                    evt.preventDefault();\n                }\n            });\n        }\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Error overlay.\n *\n * Directive overrides the entire transcluded element if an error occurs or\n * connection to the region over the websocket fails or becomes disconnected.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the error_overlay.html into the template cache.\n    $templateCache.put('directive/templates/error_overlay.html', [\n        '<header id=\"error-header\" class=\"page-header\" data-ng-show=\"show()\">',\n            '<div class=\"row\">',\n                '<h1 class=\"page-header__title\">',\n                    '<span class=\"p-icon--loading u-animation--spin ',\n                        'u-margin--right-small\"',\n                        'data-ng-hide=\"clientError\"></span>',\n                    '{$ getTitle() $}',\n                '</h1>',\n                '<div class=\"page-header__controls\">',\n                    '<button class=\"button--secondary button--inline\"',\n                        'data-ng-click=\"reload()\"',\n                        'data-ng-show=\"clientError\">Reload</button>',\n                '</div>',\n                '<div class=\"page-header__dropdown is-open\" ',\n                    'data-ng-show=\"error\">',\n                    '<div class=\"page-header__section twelve-col',\n                        'u-margin--bottom-none\">',\n                        '<p class=\"page-header__message',\n                                  'page-header__message--error\">',\n                            '{$ error $}',\n                        '</p>',\n                    '</div>',\n                '</div>',\n            '</div>',\n        '</header>',\n        '<div class=\"ng-hide u-no-margin--top\" data-ng-hide=\"show()\">',\n            '<div data-ng-transclude></div>',\n        '</div>'\n    ].join(''));\n\n    // Preload the svg and png error icon. Its possible that it has never been\n    // loaded by the browser and if the region connection goes down and the\n    // directive gets shown with an error the icon will be missing.\n    //\n    // Note: This is skipped if unit testing because it will throw 404 errors\n    // continuously.\n    if(!angular.isDefined(window.jasmine)) {\n        var image = new Image();\n        image.src = \"static/assets/images/icons/error.svg\";\n        image = new Image();\n        image.src = \"static/assets/images/icons/error.png\";\n    }\n}]);\n\nangular.module('MAAS').directive('maasErrorOverlay', [\n    '$window', '$timeout', 'RegionConnection', 'ErrorService',\n    function($window, $timeout, RegionConnection, ErrorService) {\n        return {\n            restrict: \"A\",\n            transclude: true,\n            scope: true,\n            templateUrl: 'directive/templates/error_overlay.html',\n            link: function(scope, element, attrs) {\n\n                scope.connected = false;\n                scope.showDisconnected = false;\n                scope.clientError = false;\n                scope.wasConnected = false;\n\n                // Holds the promise that sets showDisconnected to true. Will\n                // be cleared when the scope is destroyed.\n                var markDisconnected;\n\n                // Returns true when the overlay should be shown.\n                scope.show = function() {\n                    // Always show if clientError.\n                    if(scope.clientError) {\n                        return true;\n                    }\n                    // Never show if connected.\n                    if(scope.connected) {\n                        return false;\n                    }\n                    // Never been connected then always show.\n                    if(!scope.wasConnected) {\n                        return true;\n                    }\n                    // Not connected.\n                    return scope.showDisconnected;\n                };\n\n                // Returns the title for the header.\n                scope.getTitle = function() {\n                    if(scope.clientError) {\n                        return \"Error occurred\";\n                    } else if(scope.wasConnected) {\n                        return \"Connection lost, reconnecting...\";\n                    } else {\n                        return \"Connecting...\";\n                    }\n                };\n\n                // Called to reload the page.\n                scope.reload = function() {\n                    $window.location.reload();\n                };\n\n                // Called to when the connection status of the region\n                // changes. Updates the scope connected and error values.\n                var watchConnection = function() {\n                    // Do nothing if already a client error.\n                    if(scope.clientError) {\n                        return;\n                    }\n\n                    // Set connected and the time it changed.\n                    var connected = RegionConnection.isConnected();\n                    if(connected !== scope.connected) {\n                        scope.connected = connected;\n                        if(!connected) {\n                            scope.showDisconnected = false;\n\n                            // Show disconnected after 1/2 second. This removes\n                            // the flicker that can occur, if it disconnecets\n                            // and reconnected quickly.\n                            markDisconnected = $timeout(function() {\n                                scope.showDisconnected = true;\n                                markDisconnected = undefined;\n                            }, 500);\n                        }\n                    }\n\n                    // Set error and whether of not the connection\n                    // has ever been made.\n                    scope.error = RegionConnection.error;\n                    if(!scope.wasConnected && connected) {\n                        scope.wasConnected = true;\n                    }\n                };\n\n                // Watch the isConnected and error value on the\n                // RegionConnection.\n                scope.$watch(function() {\n                    return RegionConnection.isConnected();\n                }, watchConnection);\n                scope.$watch(function() {\n                    return RegionConnection.error;\n                }, watchConnection);\n\n                // Called then the error value on the ErrorService changes.\n                var watchError = function() {\n                    var error = ErrorService._error;\n                    if(angular.isString(error)) {\n                        scope.clientError = true;\n                        scope.error = ErrorService._error;\n                    }\n                };\n\n                // Watch _error on the ErrorService.\n                scope.$watch(function() {\n                    return ErrorService._error;\n                }, watchError);\n\n                // Cancel the timeout on scope destroy.\n                scope.$on(\"$destroy\", function() {\n                    if(angular.isDefined(markDisconnected)) {\n                        $timeout.cancel(markDisconnected);\n                    }\n                });\n            }\n        };\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Error toggle.\n *\n * Hides the element if an error occurs or no connection to the region\n * is present.\n */\n\nangular.module('MAAS').directive('maasErrorToggle', [\n    '$timeout', 'RegionConnection', 'ErrorService',\n    function($timeout, RegionConnection, ErrorService) {\n        return {\n            restrict: \"A\",\n            link: function(scope, element, attrs) {\n\n                // Holds timeout promise for setting ng-hide when\n                // connection is lost.\n                var disconnectedPromise;\n\n                // Cancel the disconnected timeout.\n                var cancelTimeout = function() {\n                    if(angular.isDefined(disconnectedPromise)) {\n                        $timeout.cancel(disconnectedPromise);\n                        disconnectedPromise = undefined;\n                    }\n                };\n\n                // Called to when the connection status of the region\n                // changes or the error on the ErrorService is set.\n                // The element is shown when connected and no errors.\n                var watchConnectionAndError = function() {\n                    var connected = RegionConnection.isConnected();\n                    var error = ErrorService._error;\n                    if(connected && !angular.isString(error)) {\n                        cancelTimeout();\n                        element.removeClass(\"ng-hide\");\n                    } else if(angular.isString(error)) {\n                        cancelTimeout();\n                        element.addClass(\"ng-hide\");\n                    } else if(!connected) {\n                        // Hide the element after 1/2 second. This stops\n                        // flickering when the connection goes down and\n                        // reconnects quickly.\n                        cancelTimeout();\n                        disconnectedPromise = $timeout(function() {\n                            element.addClass(\"ng-hide\");\n                        }, 500);\n                    }\n                };\n\n                // Watch the RegionConnection.isConnected() and\n                // ErrorService._error value.\n                scope.$watch(function() {\n                    return RegionConnection.isConnected();\n                }, watchConnectionAndError);\n                scope.$watch(function() {\n                    return ErrorService._error;\n                }, watchConnectionAndError);\n\n                // Cancel disconnect timeout on destroy.\n                scope.$on(\"$destroy\", function() {\n                    cancelTimeout();\n                });\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * IP Ranges directive.\n*/\n\nangular.module('MAAS').directive('maasIpRanges', [\n    '$filter', 'IPRangesManager', 'UsersManager',\n    'ManagerHelperService', 'ConverterService', function(\n        $filter, IPRangesManager, UsersManager, ManagerHelperService,\n        ConverterService) {\n        return {\n            restrict: \"E\",\n            scope: {\n                subnet: \"=\",\n                vlan: \"=\"\n            },\n            templateUrl: (\n                'static/partials/ipranges.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.ipranges = IPRangesManager.getItems();\n                $scope.iprangeManager = IPRangesManager;\n                $scope.newRange = null;\n                $scope.editIPRange = null;\n                $scope.deleteIPRange = null;\n\n                // Return true if the authenticated user is super user.\n                $scope.isSuperUser = function() {\n                    return UsersManager.isSuperUser();\n                };\n\n                // Called to start adding a new IP range.\n                $scope.addRange = function(type) {\n                    $scope.newRange = {\n                        type: type,\n                        start_ip: \"\",\n                        end_ip: \"\",\n                        comment: \"\"\n                    };\n                    if(angular.isObject($scope.subnet)) {\n                        $scope.newRange.subnet = $scope.subnet.id;\n                    }\n                    if(angular.isObject($scope.vlan)) {\n                        $scope.newRange.vlan = $scope.vlan.id;\n                    }\n                    if(type === \"dynamic\") {\n                        $scope.newRange.comment = \"Dynamic\";\n                    }\n                };\n\n                // Cancel adding the new IP range.\n                $scope.cancelAddRange = function() {\n                    $scope.newRange = null;\n                };\n\n                // Return true if the IP range can be modified by the\n                // authenticated user.\n                $scope.ipRangeCanBeModified = function(range) {\n                    if($scope.isSuperUser()) {\n                        return true;\n                    } else {\n                        // Can only modify reserved and same user.\n                        return (\n                            range.type === \"reserved\" &&\n                            range.user === UsersManager.getAuthUser().id);\n                    }\n                };\n\n                // Return true if the IP range is in edit mode.\n                $scope.isIPRangeInEditMode = function(range) {\n                    return $scope.editIPRange === range;\n                };\n\n                // Toggle edit mode for the IP range.\n                $scope.ipRangeToggleEditMode = function(range) {\n                    $scope.deleteIPRange = null;\n                    if($scope.isIPRangeInEditMode(range)) {\n                        $scope.editIPRange = null;\n                    } else {\n                        $scope.editIPRange = range;\n                    }\n                };\n\n                // Clear edit mode for the IP range.\n                $scope.ipRangeClearEditMode = function() {\n                    $scope.editIPRange = null;\n                };\n\n                // Return true if the IP range is in delete mode.\n                $scope.isIPRangeInDeleteMode = function(range) {\n                    return $scope.deleteIPRange === range;\n                };\n\n                // Enter delete mode for the IP range.\n                $scope.ipRangeEnterDeleteMode = function(range) {\n                    $scope.editIPRange = null;\n                    $scope.deleteIPRange = range;\n                };\n\n                // Exit delete mode for the IP range.\n                $scope.ipRangeCancelDelete = function() {\n                    $scope.deleteIPRange = null;\n                };\n\n                // Perform the delete operation on the IP range.\n                $scope.ipRangeConfirmDelete = function() {\n                    IPRangesManager.deleteItem(\n                        $scope.deleteIPRange).then(function() {\n                            $scope.deleteIPRange = null;\n                    });\n                };\n\n                // Sort ranges by starting IP address.\n                $scope.ipRangeSort = function(range) {\n                    if(range.start_ip.indexOf(':') !== -1) {\n                        return ConverterService.ipv6Expand(range.start_ip);\n                    } else {\n                        return ConverterService.ipv4ToInteger(range.start_ip);\n                    }\n                };\n\n                // Load the reqiured managers.\n                ManagerHelperService.loadManagers($scope, [\n                    IPRangesManager, UsersManager]).then(\n                        function() {\n                            $scope.loading = false;\n                        });\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Login button for external authentication.\n */\n\nangular.module('MAAS').factory('getBakery', function() {\n    return function(visitPage) {\n        return new Bakery(\n            new WebHandler(),\n            new BakeryStorage(localStorage, {}), {visitPage: visitPage});\n    };\n}).directive('externalLogin', ['$window', 'getBakery',\n                               function($window, getBakery) {\n    return {\n        restrict: 'E',\n        scope: {},\n        template: [\n            '<a target=\"_blank\" class=\"p-button--positive\"',\n            '    href=\"{{ loginURL }}\"',\n            '    title=\"Login through {{ externalAuthURL }}\">',\n            '  Go to login page',\n            '</a>',\n            '<div id=\"login-error\" class=\"p-form-validation__message\"',\n            '    ng-if=\"errorMessage\">',\n            '  <strong>Error getting login link:</strong><br>',\n            '  {{ errorMessage }}',\n            '</div>',\n        ].join(''),\n        controller: function($scope, $rootScope, $element, $document) {\n            $scope.errorMessage = '';\n            $scope.loginURL = '#';\n            $scope.externalAuthURL = $element.attr('auth-url');\n\n            const visitPage = function(error) {\n                $scope.$apply(function() {\n                    $scope.loginURL =  error.Info.VisitURL;\n                    $scope.errorMessage = '';\n                });\n            }\n            const bakery = getBakery(visitPage);\n            const nextPath = $element.attr('next-path');\n            bakery.get(\n                '/MAAS/accounts/discharge-request/',\n                {'Accept': 'application/json',\n                 'Content-Type': 'application/json'},\n                function(error, response) {\n                    if (response.currentTarget.status != 200) {\n                        $scope.$apply(function() {\n                            $scope.errorMessage = (\n                                response.currentTarget.responseText);\n                        });\n                    } else {\n                        $window.location.replace(nextPath);\n                    }\n                });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS object directive.\n *\n * Directive that connects a field to an object from the websocket. The field\n * is an instant save on blur.\n */\n\nangular.module('MAAS').directive('maasObjForm', ['JSONService',\n    function(JSONService) {\n        function MAASFormController(scope) {\n            this.obj = scope.obj;\n            this.manager = scope.manager;\n            this.fields = {};\n            this.scope = scope;\n            this.scope.saving = false;\n            this.scope.savingKeys = [];\n            if(angular.isObject(this.scope.obj)) {\n                this.scope.obj.$maasForm = this;\n            }\n\n            // Set the managerMethod.\n            this.managerMethod = scope.managerMethod;\n            if(angular.isUndefined(this.managerMethod)) {\n                this.managerMethod = \"updateItem\";\n            }\n\n            var self = this;\n            scope.$watch(\"obj\", function() {\n                // Update the object when it changes.\n                self.obj = scope.obj;\n                if(angular.isObject(self.obj)) {\n                    self.obj.$maasForm = self;\n                }\n            });\n            scope.$on(\"$destroy\", function() {\n                // Remove the $maasForm from the object when directive is\n                // deleted.\n                if(angular.isObject(self.obj)) {\n                    delete self.obj.$maasForm;\n                }\n            });\n        }\n\n        // Get the current value for a field in the form.\n        MAASFormController.prototype.getValue = function (key) {\n            var field = this.fields[key];\n            if(angular.isObject(field) && angular.isObject(field.scope)) {\n                return field.scope.getValue();\n            }\n        };\n\n        // Update the current value for a field in the form.\n        MAASFormController.prototype.updateValue = function (key, value) {\n            var field = this.fields[key];\n            if(angular.isObject(field) && angular.isObject(field.scope)) {\n                return field.scope.updateValue(value);\n            }\n        };\n\n        // Clone the current object for this form without the $maasForm\n        // property set.\n        MAASFormController.prototype.cloneObject = function() {\n            if(!angular.isObject(this.obj)) {\n                return this.obj;\n            } else {\n                delete this.obj.$maasForm;\n                var clonedObj = angular.copy(this.obj);\n                this.obj.$maasForm = this;\n                return clonedObj;\n            }\n        };\n\n        // Return true if table form.\n        MAASFormController.prototype.isTableForm = function () {\n            if(angular.isUndefined(this.scope.tableForm)) {\n                // Default is not a table form.\n                return false;\n            } else {\n                return this.scope.tableForm;\n            }\n        };\n\n        // Return true if the form should be saved on blur.\n        MAASFormController.prototype.saveOnBlur = function() {\n            if(angular.isUndefined(this.scope.saveOnBlur)) {\n                // Default is save on blur.\n                return true;\n            } else {\n                return this.scope.saveOnBlur;\n            }\n        };\n\n        // Return true if the form is saving this field.\n        MAASFormController.prototype.isSaving = function(key) {\n            return (\n                this.scope.saving && this.scope.savingKeys.indexOf(key) >= 0);\n        };\n\n        // Return true if the input should show the saving spinner. This is\n        // only show on inputs in forms that are using save on blur.\n        MAASFormController.prototype.showInputSaving = function(key) {\n            return this.saveOnBlur() && this.isSaving(key);\n        };\n\n        // Return true if any field in the form as an error.\n        MAASFormController.prototype.hasErrors = function() {\n            var hasErrors = false;\n            angular.forEach(this.fields, function(field) {\n                if(field.scope.hasErrors()) {\n                    hasErrors = true;\n                }\n            });\n            if(angular.isDefined(this.errorScope)) {\n                if(this.errorScope.hasErrors()) {\n                    hasErrors = true;\n                }\n            }\n            return hasErrors;\n        };\n\n        // Called by maas-obj-field to register it as a editable field.\n        MAASFormController.prototype.registerField = function(key, scope) {\n            // Store the state of the field and its scope.\n            this.fields[key] = {\n                editing: false,\n                scope: scope\n            };\n\n            // Watch for changes on the value of the object.\n            var self = this;\n            this.scope.$watch(\"obj.\" + key, function() {\n                if(angular.isObject(self.obj) && !self.fields[key].editing) {\n                    self.fields[key].scope.updateValue(self.obj[key]);\n                }\n            });\n\n            // Return the current value for the field.\n            if(angular.isObject(this.obj)) {\n                return this.obj[key];\n            } else {\n                return null;\n            }\n        };\n\n        // Called by maas-obj-field to unregister it as a editable field.\n        MAASFormController.prototype.unregisterField = function(key) {\n            delete this.fields[key];\n        };\n\n        // Called by maas-obj-field to place field in edit mode.\n        MAASFormController.prototype.startEditingField = function(key) {\n            this.fields[key].editing = true;\n        };\n\n        // Called by maas-obj-field to end edit mode for the field.\n        MAASFormController.prototype.stopEditingField = function(key, value) {\n            var field = this.fields[key];\n\n            // Do nothing if not save on blur.\n            if(!this.saveOnBlur()) {\n                field.editing = false;\n                return;\n            }\n\n            // Clear errors before saving.\n            field.scope.clearErrors();\n\n            // Copy the object and update the editing field.\n            var updatedObj = this.cloneObject();\n            updatedObj[key] = value;\n            if(updatedObj[key] === this.obj[key]) {\n                // Nothing changed.\n                field.editing = false;\n                return;\n            }\n\n            // Update the item in the manager.\n            this.scope.saving = true;\n            this.scope.savingKeys = [key];\n            this.updateItem(updatedObj, [key]);\n        };\n\n        // Update the item using the manager.\n        MAASFormController.prototype.updateItem = function(updatedObj, keys) {\n            var key = keys[0];\n            var field = this.fields[key];\n            var self = this;\n\n            // Pre-process the updatedObj if one is defined.\n            if(angular.isFunction(this.scope.preProcess)) {\n                updatedObj = this.scope.preProcess(updatedObj, keys);\n            }\n\n            // Update the item with the manager.\n            return this.manager[this.managerMethod](\n                updatedObj).then(function(newObj) {\n                    // Update the value of the element.\n                    field.editing = false;\n                    field.scope.updateValue(newObj[key]);\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    if(angular.isFunction(self.scope.afterSave)) {\n                        self.scope.afterSave(newObj);\n                    }\n                    return newObj;\n                }, function(error) {\n                    var errorJson = JSONService.tryParse(error);\n                    if(angular.isObject(errorJson)) {\n                        // Add the error to each field it matches.\n                        angular.forEach(errorJson, function(value, key) {\n                            var errorField = self.fields[key];\n                            if(!angular.isArray(value)) {\n                                value = [value];\n                            }\n\n                            if(angular.isObject(errorField)) {\n                                // Error on a field we know about, place the\n                                // error on that field.\n                                errorField.scope.setErrors(value);\n                            } else {\n                                // Error on a field we don't know about, place\n                                // the error on the editing field. Prefixing\n                                // the error with the field.\n                                if(key !== \"__all__\") {\n                                    value = value.map(function(v) {\n                                        return key + \": \" + v;\n                                    });\n                                }\n                                field.scope.setErrors(value);\n                            }\n                        });\n                    } else {\n                        // Add the string error to just the field error.\n                        field.scope.setErrors([error]);\n                    }\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    return error;\n                });\n        };\n\n        // Called when saveOnBlur is false to save the whole form.\n        MAASFormController.prototype.saveForm = function () {\n            var keys = [];\n            var updatedObj = this.cloneObject();\n            angular.forEach(this.fields, function(value, key) {\n                value.scope.clearErrors();\n                var newValue = value.scope.getValue();\n                if(angular.isDefined(newValue) &&\n                    updatedObj[key] !== newValue) {\n                    updatedObj[key] = newValue;\n                    keys.push(key);\n                }\n            });\n\n\n            // Pre-process the updatedObj if one is defined.\n            if(angular.isFunction(this.scope.preProcess)) {\n                updatedObj = this.scope.preProcess(updatedObj, keys);\n            }\n\n            // Clear the errors on the errorScope before save.\n            if(angular.isDefined(this.errorScope)) {\n                this.errorScope.clearErrors();\n            }\n\n            var self = this;\n            this.scope.saving = true;\n            this.scope.savingKeys = keys;\n            return this.manager[this.managerMethod](\n                updatedObj).then(function(newObj) {\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    if(angular.isFunction(self.scope.afterSave)) {\n                        self.scope.afterSave(newObj);\n                    }\n                    return newObj;\n                }, function(error) {\n                    var errorJson = JSONService.tryParse(error);\n                    if(angular.isObject(errorJson)) {\n                        // Add the error to each field it matches.\n                        angular.forEach(errorJson, function(value, key) {\n                            var errorField = self.fields[key];\n                            if(!angular.isArray(value)) {\n                                value = [value];\n                            }\n\n                            if(angular.isObject(errorField)) {\n                                // Error on a field we know about, place the\n                                // error on that field.\n                                errorField.scope.setErrors(value);\n                            } else {\n                                if(key !== \"__all__\") {\n                                    value = value.map(function(v) {\n                                        return key + \": \" + v;\n                                    });\n                                }\n                                // Error on a field we don't know about, place\n                                // the error on errorScope if set.\n                                if(angular.isDefined(self.errorScope)) {\n                                    self.errorScope.setErrors(value);\n                                } else {\n                                    // No error scope, just log to console.\n                                    console.log(value);\n                                }\n                            }\n                        });\n                    } else {\n                        // Add the string error to just the field error.\n                        if(angular.isDefined(self.errorScope)) {\n                            self.errorScope.setErrors([error]);\n                        } else {\n                            // No error scope, just log to console.\n                            console.log(error);\n                        }\n                    }\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    return error;\n                });\n        };\n\n        return {\n            restrict: \"E\",\n            scope: {\n                obj: \"=\",\n                manager: \"=\",\n                managerMethod: \"@\",\n                preProcess: \"=\",\n                afterSave: \"=\",\n                tableForm: \"=\",\n                saveOnBlur: \"=\",\n                inline: \"=\",\n                ngDisabled: \"&\"\n            },\n            transclude: true,\n            template: (\n                '<form class=\"p-form\" data-ng-class=\"{saving: saving, ' +\n                '\\'p-form--inline\\': inline, ' +\n                '\\'p-form--stacked\\': tableForm}\" ' +\n                'ng-transclude></form>'),\n            controller: ['$scope', MAASFormController]\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjFieldGroup', ['JSONService',\n    function(JSONService) {\n        // Controller for this directive.\n        function MAASGroupController(scope, timeout) {\n            this.fields = {};\n            this.scope = scope;\n            this.scope.saving = false;\n            this.scope.savingKeys = [];\n            this.timeout = timeout;\n\n            var self = this;\n            this.scope.isEditing = function() {\n                var editing = false;\n                angular.forEach(self.fields, function(value) {\n                    if(!editing) {\n                        editing = value.editing;\n                    }\n                });\n                return editing;\n            };\n        }\n\n        // Return true if table form.\n        MAASGroupController.prototype.isTableForm = function () {\n            return this.formController.isTableForm();\n        };\n\n        // Return true if should save on blur.\n        MAASGroupController.prototype.saveOnBlur = function () {\n            return this.formController.saveOnBlur();\n        };\n\n        // Return true if group is saving.\n        MAASGroupController.prototype.isSaving = function(key) {\n            return (\n                this.scope.saving && this.scope.savingKeys.indexOf(key) >= 0);\n        };\n\n        // Return true if the input should show the saving spinner. This is\n        // only show on inputs in forms that are using save on blur.\n        MAASGroupController.prototype.showInputSaving = function(key) {\n            // In a group we say the entire group is saving, not just that\n            // one key in the field is being saved.\n            return this.saveOnBlur() && this.scope.saving;\n        };\n\n        // Called by maas-obj-field to register it as a editable field.\n        MAASGroupController.prototype.registerField = function(key, scope) {\n            // Store the state of the field and its scope.\n            this.fields[key] = {\n                editing: false,\n                scope: scope\n            };\n            return this.formController.registerField(key, scope);\n        };\n\n        // Called by maas-obj-field to unregister it as a editable field.\n        MAASGroupController.prototype.unregisterField = function(key) {\n            delete this.fields[key];\n            this.formController.unregisterField(key);\n        };\n\n        // Called by maas-obj-field to place field in edit mode.\n        MAASGroupController.prototype.startEditingField = function(key) {\n            this.fields[key].editing = true;\n\n            // Set all fields in the group as editing in the formController.\n            var self = this;\n            angular.forEach(this.fields, function(value, key) {\n                self.formController.startEditingField(key);\n            });\n        };\n\n        // Called by maas-obj-field to exit edit mode for the field.\n        MAASGroupController.prototype.stopEditingField = function(key, value) {\n            var field = this.fields[key];\n            field.editing = false;\n\n            // Exit early if not save on blur.\n            if(!this.saveOnBlur()) {\n                return;\n            }\n\n            // Delay the handling of stop to make sure start is not called on\n            // the next field in the group.\n            var self = this;\n            this.timeout(function() {\n                // If any other fields are in edit mode then nothing to do.\n                var editing = false;\n                angular.forEach(self.fields, function(value) {\n                    if(!editing) {\n                        editing = value.editing;\n                    }\n                });\n                if(editing) {\n                    return;\n                }\n\n                // Copy the object and update the editing fields.\n                var keys = [];\n                var changed = false;\n                var updatedObj = self.formController.cloneObject();\n                angular.forEach(self.fields, function(value, key) {\n                    value.scope.clearErrors();\n                    var newValue = value.scope.getValue();\n                    if(angular.isDefined(newValue) &&\n                        updatedObj[key] !== newValue) {\n                        keys.push(key);\n                        updatedObj[key] = newValue;\n                        changed = true;\n                    }\n                });\n                if(!changed) {\n                    return;\n                }\n\n                // Place the field that actually triggered the update first.\n                var keyIdx = keys.indexOf(key);\n                if(keyIdx !== -1) {\n                    keys.splice(keyIdx, 1);\n                    keys.splice(0, 0, key);\n                }\n\n                // Save the object.\n                self.scope.saving = true;\n                self.scope.savingKeys = keys;\n                self.formController.updateItem(updatedObj, keys).then(\n                    function(obj) {\n                      self.scope.saving = false;\n                      self.scope.savingKeys = [];\n                      return obj;\n                  }, function(error) {\n                      self.scope.saving = false;\n                      self.scope.savingKeys = [];\n                      return error;\n                  });\n            }, 10); // Really short has to be next click.\n        };\n\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\", \"maasObjFieldGroup\"],\n            scope: {},\n            transclude: true,\n            template: (\n                '<div class=\"form__siblings\" ' +\n                'data-ng-class=\"{\\'is-active\\': isEditing()}\" ' +\n                'data-ng-transclude></div>'),\n            controller: ['$scope', '$timeout', MAASGroupController],\n            link: {\n                pre: function(scope, element, attrs, controllers) {\n                    // Set formController on the MAASGroupController to\n                    // point to its parent MAASFormController. This is done in\n                    // pre-link so the controller has the formController before\n                    // registerField is called.\n                    controllers[1].formController = controllers[0];\n\n                    // Set ngDisabled on this scope from the form controller.\n                    scope.ngDisabled = controllers[0].scope.ngDisabled;\n\n                    // Set the object to always be the same on the scope.\n                    controllers[0].scope.$watch(\"obj\", function(obj) {\n                        scope.obj = obj;\n                    });\n                }\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjField', ['$compile',\n    function($compile) {\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\", \"?^^maasObjFieldGroup\"],\n            scope: {\n                onChange: \"=\",\n                subtleText: \"@\"\n            },\n            transclude: true,\n            template: (\n                '<div data-ng-transclude></div>'),\n            link: function(scope, element, attrs, controllers) {\n                // Select the controller based on which is available.\n                var controller = controllers[1];\n                if(!angular.isObject(controller)) {\n                    controller = controllers[0];\n                }\n\n                // Set ngDisabled from the parent controller.\n                scope.ngDisabled = controller.scope.ngDisabled;\n\n                element.addClass(\"p-form__group\");\n                if(attrs.subtle !== \"false\") {\n                    element.addClass(\"form__group--subtle\");\n                }\n\n                // type and key required.\n                var missingAttrs = [];\n                if(!angular.isString(attrs.type) || attrs.type.length === 0) {\n                    missingAttrs.push(\"type\");\n                }\n                if(!angular.isString(attrs.key) || attrs.key.length === 0) {\n                    missingAttrs.push(\"key\");\n                }\n                if(missingAttrs.length > 0) {\n                    throw new Error(\n                        missingAttrs.join(\", \") +\n                        \" are required on maas-obj-field.\");\n                }\n                if(angular.isString(attrs.disabled)) {\n                    scope.ngDisabled = function() { return true; };\n                }\n\n                // Remove transcluded element.\n                element.find(\"div\").remove();\n\n                // Render the label.\n                var label = attrs.label || attrs.key;\n\n                if(attrs.disableLabel !== \"true\" &&\n                        !(attrs.type === \"hidden\")) {\n                    var labelElement = angular.element('<label/>');\n                    labelElement.attr('for', attrs.key);\n                    labelElement.text(label);\n                    labelElement.addClass('p-form__label');\n                    if(attrs.labelWidth) {\n                        labelElement.addClass(\"col-\" + attrs.labelWidth);\n                    } else {\n                        labelElement.addClass(\"u-margin--right\");\n                    }\n                    if(attrs.labelLeft === \"true\") {\n                        labelElement.addClass('u-padding--left');\n                        labelElement.addClass('u-position--relative');\n                    }\n                    element.append(labelElement);\n\n                    // Add a label info icon with tooltip.\n                    if(angular.isString(attrs.labelInfo)\n                            && attrs.labelInfo.length > 0) {\n                        var infoWrapper = angular.element(\n                            '<span>&nbsp;</span>');\n                        infoWrapper.addClass('p-tooltip p-tooltip--btm-right');\n\n                        var infoIcon = angular.element('<i/>');\n                        infoIcon.addClass('p-icon--information');\n                        infoIcon.attr(\n                            'aria-describedby', attrs.key + '-tooptip');\n\n                        var infoTooltip = angular.element('<p></p>');\n                        infoTooltip.addClass('p-tooltip__message');\n                        infoTooltip.text(attrs.labelInfo);\n                        infoTooltip.attr('id', attrs.key + '-tooptip');\n\n                        infoWrapper.append(infoIcon);\n                        infoWrapper.append(infoTooltip);\n\n                        labelElement.append(infoWrapper);\n\n                        // prevents the icon from being clickable\n                        infoIcon.bind('click', function (evt) {\n                            evt.preventDefault();\n                        });\n                    }\n                }\n\n                // Add the wrapper for the input.\n                var inputWrapper = angular.element('<div></div>');\n                inputWrapper.addClass(\"p-form__control\");\n                inputWrapper.addClass(\"u-no-margin--top\");\n\n                if(attrs.inputWidth) {\n                    inputWrapper.addClass(\"col-\" + attrs.inputWidth);\n                }\n\n                // Render the input based on the type.\n                var placeholder = attrs.placeholder || label;\n                var inputElement = null;\n                if(attrs.type === \"text\" || attrs.type === \"textarea\" ||\n                   attrs.type === \"password\") {\n                    if(attrs.type === \"text\") {\n                        inputElement = $compile(\n                            '<input type=\"text\" id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">')(scope);\n                    } else if(attrs.type === \"textarea\") {\n                        inputElement = $compile(\n                            '<textarea id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">' +\n                                '</textarea>')(scope);\n                    } else if(attrs.type === \"password\") {\n                        inputElement = $compile(\n                            '<input type=\"password\" id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">')(scope);\n                    }\n\n                    // Allow enter on blur, by default.\n                    if(attrs.blurOnEnter) {\n                        inputElement.bind(\"keydown keypress\", function(evt) {\n                            if(evt.which === 13) {\n                                inputElement.blur();\n                                evt.preventDefault();\n                            }\n                        });\n                    }\n\n                    // Revert value on esc.\n                    var self = this;\n                    inputElement.bind(\"keydown keypress\", function(evt) {\n                        if(evt.which === 27) {\n                            inputElement.val(controller.scope.obj[attrs.key]);\n                            inputElement.blur();\n                            evt.preventDefault();\n                        }\n                    });\n\n                    // Register the field with the controller and set the\n                    // current value for the field.\n                    var currentValue = controller.registerField(\n                        attrs.key, scope);\n                    inputElement.val(currentValue);\n\n                    // When element is in focus then editing is on.\n                    inputElement.on(\"focus\", function() {\n                        scope.$apply(function() {\n                            controller.startEditingField(attrs.key);\n                        });\n                    });\n\n                    // When element is not in focus then editing is done.\n                    inputElement.on(\"blur\", function() {\n                        scope.$apply(function() {\n                            controller.stopEditingField(\n                                attrs.key, inputElement.val());\n                        });\n                    });\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        inputElement.val(newValue);\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return inputElement.val();\n                    };\n                } else if(attrs.type === \"options\") {\n                    // Requires the options attribute on the element. This\n                    // is copied directly into the ngOptions directive on\n                    // the select.\n                    var options = attrs.options;\n                    if(!angular.isString(options) || options.length === 0) {\n                        throw new Error(\n                            \"options attribute is required on type \" +\n                            \"'options' on maas-obj-field.\");\n                    }\n\n                    // Placeholder by default is disabled, allow it to be\n                    // enabled.\n                    var disabled = \"disabled\";\n                    if(attrs.placeholderEnabled === \"true\") {\n                        disabled = \"\";\n                    }\n\n                    // Create a child scope of the parent scope for this\n                    // directive. Since this directive is created with an\n                    // isolated scope we need the child to use the parent so\n                    // ngOptions can use properties defined in that scope.\n                    var childScope = scope.$parent.$new();\n                    childScope._ngDisabled = scope.ngDisabled;\n                    childScope._selectValue = controller.registerField(\n                        attrs.key, scope);\n                    childScope._selectNgChange = function() {\n                        scope._change();\n                        controller.stopEditingField(\n                            attrs.key, childScope._selectValue);\n                    };\n\n                    // Construct the select.\n                    inputElement = $compile(\n                        '<select id=\"' + attrs.key + '\" ' +\n                        'data-ng-model=\"_selectValue\" ' +\n                        'data-ng-options=\"' + options + '\"' +\n                        'data-ng-change=\"_selectNgChange()\"' +\n                        'data-ng-disabled=\"_ngDisabled()\">' +\n                        '<option value=\"\" ' + disabled + '>' + placeholder +\n                        '</option></select>')(childScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        childScope._selectValue = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return childScope._selectValue;\n                    };\n                } else if(attrs.type === \"checkboxes\") {\n                    // Requires the values attribute on the element.\n                    var values = attrs.values;\n                    if(!angular.isString(values) || values.length === 0) {\n                        throw new Error(\n                            \"values attribute is required on type \" +\n                            \"'checkboxes' on maas-obj-field.\");\n                    }\n\n                    // Create a child scope of the parent scope for this\n                    // directive. Since this directive is created with an\n                    // isolated scope we need the child to use the parent so\n                    // values can come from the parent scope.\n                    var checkScope = scope.$parent.$new();\n                    checkScope._selectedValues = controller.registerField(\n                        attrs.key, scope);\n                    checkScope._checked = function(val) {\n                        return checkScope._selectedValues.indexOf(val) > -1;\n                    };\n                    checkScope._toggleChecked = function(val) {\n                        var idx = checkScope._selectedValues.indexOf(val);\n                        if(idx > -1) {\n                            // Uncheck.\n                            checkScope._selectedValues.splice(idx, 1);\n                        } else {\n                            // Check.\n                            checkScope._selectedValues.push(val);\n                        }\n                    };\n\n                    // Construct the checkbox list.\n                    inputElement = angular.element([\n                        '<div class=\"width--full\" ',\n                            'data-ng-repeat=\"val in ' + values +'\">',\n                            '<input id=\"' + attrs.key + '_' + '{$ val $}',\n                                '\" type=\"checkbox\" value=\"{$ val $}\" ',\n                                'class=\"checkbox\" ',\n                                'data-ng-checked=\"_checked(val)\" ',\n                                'data-ng-click=\"_toggleChecked(val)\">',\n                            '<label for=\"' + attrs.key + '_',\n                                '{$ val $}' + '\" ',\n                                'class=\"checkbox-label\">{$ val $}</label>',\n                        '</div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(checkScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        checkScope._selectedValues = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return checkScope._selectedValues;\n                    };\n                } else if(attrs.type === \"tags\") {\n                    var tagsScope = scope.$new();\n                    var tags = controller.registerField(\n                        attrs.key, scope);\n                    tagsScope._tags = tags.map(function(val) {\n                        return {text: val};\n                    });\n\n                    // Construct the tags input.\n                    inputElement = angular.element([\n                        '<span data-ng-if=\"ngDisabled()\" ',\n                            'data-ng-repeat=\"tag in _tags\">',\n                            '{$ tag.text $} </span>',\n                        '<tags-input id=\"' + attrs.key + '\" ',\n                            'data-ng-model=\"_tags\" ',\n                            'data-ng-if=\"!ngDisabled()\" ',\n                            'placeholder=\"' + placeholder + '\" ',\n                            'data-ng-change=\"_change()\" ',\n                            'allow-tags-pattern=\"[\\\\w-]+\"></tags-input>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(tagsScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        tagsScope._tags = newValue.map(\n                            function(val) {\n                                return {text: val};\n                            });\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return tagsScope._tags.map(\n                            function(val) {\n                                return val.text;\n                            });\n                    };\n                } else if(attrs.type === \"hidden\") {\n                    var hiddenScope = scope.$new();\n                    hiddenScope._toggle = controller.registerField(\n                        attrs.key, scope);\n                    inputElement = angular.element([\n                        '<input type=\"hidden\" name=\"' + attrs.key + '\" ',\n                        'id=\"' + attrs.key + '\" ',\n                        'value=\"' + attrs.value + '\">',\n                        '</input>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(hiddenScope);\n                    scope.getValue = function() { return attrs.value; };\n                    scope.updateValue = function() { return null; };\n                } else if(attrs.type === \"onoffswitch\") {\n                    var switchScope = scope.$new();\n                    switchScope._toggle = controller.registerField(\n                        attrs.key, scope);\n                    switchScope._changed = function() {\n                        scope._change();\n                        controller.startEditingField(attrs.key);\n                        controller.stopEditingField(\n                            attrs.key, switchScope.getValue());\n                    };\n\n                    // Construct the on and off toggle.\n                    inputElement = angular.element([\n                      '<div class=\"maas-p-switch\">',\n                        '<input type=\"checkbox\" name=\"' + attrs.key + '\" ',\n                          'class=\"maas-p-switch--input\" ',\n                          'id=\"' + attrs.key + '\" ',\n                          'data-ng-model=\"_toggle\" ',\n                          'data-ng-change=\"_changed()\">',\n                        '<div class=\"maas-p-switch--mask\"></div>',\n                      '</div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(switchScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        // WARNING: This code is difficult to unit test, since\n                        // we could not figure out how to get the\n                        // isolateScope() from the transcluded element. Be sure\n                        // to manually test versions of this toggle with and\n                        // without the on-value and off-value attributes, such\n                        // as by verifying that both the on/off toggle on both\n                        // the discovery page and the subnet details page work.\n                        if(attrs.onValue && attrs.onValue === newValue) {\n                            switchScope._toggle = true;\n                        } else if(attrs.offValue &&\n                                attrs.offValue === newValue) {\n                            switchScope._toggle = false;\n                        } else {\n                            switchScope._toggle = newValue;\n                        }\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        // WARNING: This code is difficult to unit test, since\n                        // we could not figure out how to get the\n                        // isolateScope() from the transcluded element. Be sure\n                        // to manually test versions of this toggle with and\n                        // without the on-value and off-value attributes, such\n                        // as by verifying that both the on/off toggle on both\n                        // the discovery page and the subnet details page work.\n                        if(switchScope._toggle) {\n                            if(attrs.onValue) {\n                                return attrs.onValue;\n                            } else {\n                                return true;\n                            }\n                        } else {\n                            if(attrs.offValue) {\n                                return attrs.offValue;\n                            } else {\n                                return false;\n                            }\n                        }\n                    };\n                } else if(attrs.type == \"slider\") {\n                    var sliderScope = scope.$new();\n                    sliderScope._slider = controller.registerField(\n                        attrs.key, scope);\n                    sliderScope._ngDisabled = scope.ngDisabled;\n\n                    // Construct the tags input.\n                    inputElement = angular.element([\n                        '<div class=\"p-slider__wrapper\">',\n                        '<input class=\"p-slider\" type=\"range\"',\n                        'min=\"' + attrs.min + '\" max=\"' + attrs.max + '\" ',\n                        'value=\"1\" step=\"1\" id=\"' + attrs.key + '\" ',\n                        'data-ng-model=\"_slider\" data-ng-disabled=\"',\n                        '_ngDisabled()\">',\n                        '<input class=\"p-slider__input\" type=\"text\" ',\n                        'maxlength=\"3\" id=\"' + attrs.key + '-input\" ',\n                        'data-ng-model=\"_slider\" data-ng-disabled=\"',\n                        '_ngDisabled()\"></div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(sliderScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        sliderScope._slider = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return sliderScope._slider;\n                    };\n                } else {\n                    throw new Error(\n                        \"Unknown type on maas-obj-field: \" + attrs.type);\n                }\n\n                // Called on change.\n                scope._change = function() {\n                    if(angular.isFunction(scope.onChange)) {\n                        scope.onChange(\n                            attrs.key,\n                            controller.getValue(attrs.key),\n                            controller);\n                    }\n                };\n\n                // Copy input class to the input element.\n                if(attrs.inputClass) {\n                    inputElement.addClass(attrs.inputClass);\n                }\n                inputWrapper.append(inputElement);\n\n                // Errors element.\n                var errorsElement = angular.element(\n                    '<ul class=\"p-list u-no-margin--top\"></ul>');\n                if(!controller.isTableForm()) {\n                    errorsElement.addClass(\"form__error\");\n                }\n                inputWrapper.append(errorsElement);\n\n                // Help text elements\n                if (attrs.helpText) {\n                    var helpTextElement = angular.element(\n                        '<p>' + attrs.helpText + '</p>');\n                    helpTextElement.addClass(\"p-form-help-text\");\n                    inputWrapper.append(helpTextElement);\n                }\n\n                // Called by controller to clear all errors.\n                scope.clearErrors = function() {\n                    inputElement.removeClass(\"ng-dirty\");\n                    inputElement.removeClass(\"p-form-validation__input\");\n                    inputWrapper.removeClass(\"p-form-validation\");\n                    inputWrapper.removeClass(\"is-error\");\n                    inputWrapper.removeClass(\"u-no-margin--top\");\n                    errorsElement.empty();\n                };\n\n                // Called by controller to set errors.\n                scope.setErrors = function(errors) {\n                    if(errors.length > 0) {\n                        inputWrapper.addClass(\"p-form-validation\");\n                        inputWrapper.addClass(\"is-error\");\n                        inputWrapper.addClass(\"u-no-margin--top\");\n                        inputElement.addClass(\"ng-dirty\");\n                        inputElement.addClass(\"p-form-validation__input\");\n                        angular.forEach(errors, function(error) {\n                            errorsElement.append(\n                              '<li class=\"p-form-validation__message\">' +\n                              '<strong>Error:</strong> ' + error + '</li>'\n                            );\n                        });\n                        // Set the input in focus but outside of the current\n                        // digest cycle.\n                        setTimeout(function() {\n                            inputElement.focus();\n                        }, 1);\n                    }\n                };\n\n                // Called by controller to see if error is set on field.\n                scope.hasErrors = function() {\n                    return inputWrapper.hasClass(\"is-error\");\n                };\n\n                // Subtle text element.\n                if(attrs.subtleText) {\n                    var subtleTextElement = $compile(\n                        angular.element(\n                            '<span class=\"p-form-help-text\" ' +\n                            'data-ng-bind=\"subtleText\"></span>'))(scope);\n                    inputWrapper.append(subtleTextElement);\n                }\n                element.append(inputWrapper);\n\n                // Watch the showing of saving spinner. Update the elements\n                // correctly to show the saving.\n                scope.$watch(function() {\n                    return controller.showInputSaving(attrs.key);\n                }, function(value) {\n                    if(value) {\n                        inputWrapper.children(\n                            ':first').addClass('u-border--information');\n                        inputWrapper.append(\n                            '<i class=\"obj-saving icon ' +\n                            'p-icon--spinner u-animation--spin\"></i>');\n                        inputWrapper.addClass('p-tooltip');\n                        inputWrapper.addClass('p-tooltip--bottom');\n                        inputWrapper.addClass('u-no-margin--top');\n                        inputWrapper.attr('aria-label', 'Saving');\n                    } else {\n                      inputWrapper.children(\n                          ':first').removeClass('u-border--information');\n                        inputWrapper.find('i.obj-saving').remove();\n                        inputWrapper.removeClass('p-tooltip');\n                        inputWrapper.removeClass('p-tooltip--right');\n                        inputWrapper.addClass('u-no-margin--top');\n                        inputWrapper.removeAttr('aria-label');\n                    }\n                });\n\n                // Called when the scope is destroyed.\n                scope.$on(\"$destroy\", function() {\n                    controller.unregisterField(attrs.key);\n                });\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjSave', function() {\n        return {\n            restrict: \"A\",\n            require: [\"^^maasObjForm\"],\n            scope: {},\n            link: function(scope, element, attrs, controllers) {\n                // Only allow maas-obj-save when saveOnBlur is false.\n                var controller = controllers[0];\n                if(controller.saveOnBlur()) {\n                    throw new Error(\n                        \"maas-obj-save is only allowed when save-on-blur is \" +\n                        \"set to false.\");\n                }\n\n                element.on(\"click\", function() {\n                    scope.$apply(function() {\n                        controller.saveForm();\n                    });\n                });\n            }\n        };\n    });\n\nangular.module('MAAS').directive('maasObjErrors', function() {\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\"],\n            scope: {},\n            template: '<ul class=\"p-list u-no-margin--top\"></ul>',\n            link: function(scope, element, attrs, controllers) {\n                // Set on the controller the global error handler.\n                controllers[0].errorScope = scope;\n                var ul = element.find(\"ul\");\n\n                // Called by controller to clear all errors.\n                scope.clearErrors = function() {\n                    ul.empty();\n                };\n\n                // Called by controller to set errors.\n                scope.setErrors = function(errors) {\n                    if(errors.length > 0) {\n                        angular.forEach(errors, function(error) {\n                            ul.append(\n                              '<li class=\"p-list__item\">' +\n                              '<i class=\"p-icon--error\"></i> ' +\n                              error + '</li>'\n                            );\n                        });\n                    }\n                };\n\n                // Called by controller to see if error is set on field.\n                scope.hasErrors = function() {\n                    return ul.children().length > 0;\n                };\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjSaving', function() {\n        return {\n            restrict: \"E\",\n            require: \"^^maasObjForm\",\n            scope: {},\n            transclude: true,\n            template: [\n              '<span data-ng-if=\"saving\">',\n                '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                '<span data-ng-transclude></span>',\n              '</span>'].join(''),\n            link: function(scope, element, attrs, controller) {\n                scope.saving = false;\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    scope.saving = value;\n                });\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjShowSaving', function() {\n        return {\n            restrict: \"A\",\n            require: \"^^maasObjForm\",\n            link: function(scope, element, attrs, controller) {\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    if(value) {\n                        element.removeClass(\"ng-hide\");\n                    } else {\n                        element.addClass(\"ng-hide\");\n                    }\n                });\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjHideSaving', function() {\n        return {\n            restrict: \"A\",\n            require: \"^^maasObjForm\",\n            link: function(scope, element, attrs, controller) {\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    if(value) {\n                        element.addClass(\"ng-hide\");\n                    } else {\n                        element.removeClass(\"ng-hide\");\n                    }\n                });\n            }\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Creates the auto-formatting for MAC address inputs.\n */\n\nangular.module('MAAS').directive('macAddress', function () {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: function (scope, ele, attr, ngModelCtrl, ngModel) {\n            if (!ngModelCtrl) {\n              return;\n            }\n\n            var macAddressParse = function (value) {\n                return value.toUpperCase();\n            };\n\n            var macAddressFormat = function (value) {\n\n                if (!value) {\n                  return undefined;\n                }\n\n                var numbers = value.replace(/:/g, \"\");\n\n                if (value.length % 3 === 0) {\n\n                    return numbers.replace(/([0-9A-Za-z]{2})/g, \"$1:\");\n                }\n            };\n\n            ngModelCtrl.$parsers.push(macAddressParse);\n            ngModelCtrl.$formatters.push(macAddressFormat);\n\n            ele.on('input', function () {\n                var value = macAddressFormat(ele.val());\n\n                if (value !== undefined) {\n                    ngModelCtrl.$setViewValue(value);\n                    ngModelCtrl.$render();\n                }\n                scope.$apply();\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Machines listing directive.\n*\n* Renders the machines listing.\n*/\n// testing\n\n\n\nangular.module('MAAS').directive('maasMachinesTable', [\n  'MachinesManager', 'GeneralManager', 'ManagerHelperService',\n  function (MachinesManager, GeneralManager, ManagerHelperService) {\n    return {\n      restrict: \"E\",\n      scope: {\n        search: \"=\",\n        ngDisabled: \"&\",\n        machineHasError: \"&\",\n        hideCheckboxes: \"=?\",\n        onListingChange: \"&\",\n        onCheckAll: \"&\",\n        onCheck: \"&\"\n      },\n      templateUrl: (\n        'static/partials/machines-table.html?v=' + (\n          MAAS_config.files_version)),\n      link: function(scope, element, attrs) {\n        // Statuses that should show spinner.\n        var SPINNER_STATUSES = [\n          1,   // commissioning\n          9,   // deploying\n          12,  // releasing\n          14,  // disk erasing\n          17,  // entering rescue mode\n          19,  // exiting rescue mode\n          21   // testing\n        ];\n\n        // Scope variables.\n        scope.table = {\n            visibleColumns: {\n                'fqdn_mac': 'fqdn',\n                'owner_pool': 'owner',\n          },\n          predicate: 'fqdn',\n          reverse: false,\n          allViewableChecked: false,\n          machines: MachinesManager.getItems(),\n          filteredMachines: [],\n          osinfo: GeneralManager.getData(\"osinfo\")\n        };\n\n        // Ensures that the checkbox for select all is the correct value.\n        scope.updateAllChecked = function() {\n          // Not checked when the filtered machines are empty.\n          if(scope.table.filteredMachines.length === 0) {\n              scope.table.allViewableChecked = false;\n              return;\n          }\n\n          // Loop through all filtered machines and see if all are checked.\n          var i;\n          for(i = 0; i < scope.table.filteredMachines.length; i++) {\n              if(!scope.table.filteredMachines[i].$selected) {\n                  scope.table.allViewableChecked = false;\n                  return;\n              }\n          }\n          scope.table.allViewableChecked = true;\n        };\n\n        // Selects and deselects visible machines.\n        scope.toggleCheckAll = function() {\n          if(scope.table.allViewableChecked) {\n            angular.forEach(\n              scope.table.filteredMachines, function(machine) {\n                MachinesManager.unselectItem(machine.system_id);\n              });\n          } else {\n            angular.forEach(\n              scope.table.filteredMachines, function(machine) {\n                MachinesManager.selectItem(machine.system_id);\n              });\n          }\n          scope.updateAllChecked();\n          scope.onCheckAll();\n        };\n\n        // Selects and unselects machine.\n        scope.toggleChecked = function(machine) {\n          if(MachinesManager.isSelected(machine.system_id)) {\n            MachinesManager.unselectItem(machine.system_id);\n          } else {\n            MachinesManager.selectItem(machine.system_id);\n          }\n          scope.updateAllChecked();\n          scope.onCheck({$machine: machine});\n        };\n\n        // Sorts the table by predicate.\n        scope.sortTable = function(predicate) {\n            scope.table.predicate = predicate;\n            scope.table.reverse = !scope.table.reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        scope.selectColumnOrSort = function(predicate, item) {\n            if(scope.table.visibleColumns[item] !== predicate) {\n                scope.table.visibleColumns[item] = predicate;\n            } else {\n                scope.sortTable(predicate);\n            }\n        };\n\n        // Return true if spinner should be shown.\n        scope.showSpinner = function(machine) {\n            return SPINNER_STATUSES.indexOf(machine.status_code) > -1;\n        };\n\n        scope.showFailedTestWarning = function(machine) {\n            if(scope.showSpinner(machine)) {\n                return false;\n            }\n            switch(machine.status_code) {\n                // NEW\n                case 0:\n                // COMMISSIONING\n                case 1:\n                // FAILED_COMMISSIONING\n                case 2:\n                // TESTING\n                case 21:\n                // FAILED_TESTING\n                case 22:\n                    return false;\n            }\n            switch(machine.testing_status) {\n                // Tests havn't been run\n                case -1:\n                // Tests have passed\n                case 2:\n                    return false;\n            }\n            return true;\n        };\n\n        // Return true if the other node status should be shown.\n        scope.showNodeStatus = function(machine) {\n            // -1 means tests havn't been run, 2 means tests have passed.\n            if(!scope.showSpinner(machine) &&\n               !scope.showFailedTestWarning(machine) &&\n               machine.other_test_status !== -1 &&\n               machine.other_test_status !== 2) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Returns the release title from osinfo.\n        scope.getReleaseTitle = function(os_release) {\n          if(angular.isArray(scope.table.osinfo.releases)) {\n            for(i = 0; i < scope.table.osinfo.releases.length; i++) {\n              var release = scope.table.osinfo.releases[i];\n              if(release[0] === os_release) {\n                return release[1];\n              }\n            }\n          }\n          return os_release;\n        };\n\n        // Returns the status text to show.\n        scope.getStatusText = function(machine) {\n          var showRelease = ['Deploying', 'Deployed'];\n          if(showRelease.indexOf(machine.status) === -1) {\n            return machine.status;\n          } else {\n            var releaseTitle = scope.getReleaseTitle(\n              machine.osystem + '/' + machine.distro_series);\n            if(machine.osystem === \"ubuntu\") {\n              releaseTitle = releaseTitle.split('\"')[0].trim();\n            }\n            if(machine.status === \"Deployed\") {\n              return releaseTitle;\n            }\n            if(machine.status === \"Deploying\") {\n              return machine.status + ' ' + releaseTitle;\n            }\n          }\n        };\n\n        // When the list of filtered machines change update the all checkbox.\n        scope.$watchCollection(\"table.filteredMachines\", function() {\n          scope.updateAllChecked();\n          scope.onListingChange({$machines: scope.table.filteredMachines});\n        });\n      }\n    };\n}]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Navigation directive.\n *\n * Provides the navigation interactions on all screen sizes\n */\n\n\nangular.module('MAAS').directive(\n  'maasNavigationDropdown', ['$document', function($document) {\n  return {\n    restrict: \"A\",\n    link: function(scope, element, attrs) {\n\n      element.on('click', function(e) {\n        e.stopPropagation();\n        element.parent().find('.p-dropdown__menu').toggleClass('u-hide');\n      });\n\n      $document.on('click', function() {\n        element.parent().find('.p-dropdown__menu').addClass('u-hide');\n      });\n    }\n  };\n}]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Navigation directive.\n *\n * Provides the navigation interactions on all screen sizes\n */\n\n\nangular.module('MAAS').directive(\n  'maasNavigationMobile', ['$document', function($document) {\n  return {\n    restrict: \"A\",\n    link: function(scope, element, attrs) {\n\n      element.on('click', function(e) {\n        e.stopPropagation();\n        var mobileNavMenu = element.parent().parent().find('#mobile-nav-menu');\n        mobileNavMenu.toggleClass('u-show');\n      });\n    }\n  };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Notifications.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject notifications.html into the template cache.\n    $templateCache.put('directive/templates/notifications.html', [\n      '<div class=\"u-no-margin--top\" data-ng-repeat=\"category in categories\"',\n        ' data-ng-init=\"notifications = categoryNotifications[category]\">',\n        // 1 notification.\n        '<span class=\"row\" data-ng-if=\"notifications.length == 1\">',\n          '<ul class=\"p-list\" data-ng-class=\"{\\'is-open\\': shown}\">',\n            '<li data-ng-repeat=\"notification in notifications\"',\n            ' class=\"p-notification\"',\n            ' data-ng-class=\"categoryClasses[notification.category]\">',\n              '<p class=\"p-notification__response\">',\n                '<span data-ng-bind-html=\"notification.message\"></span> ',\n                '<a class=\"p-notification__action\"',\n                ' data-ng-click=\"dismiss(notification)\">Dismiss</a>',\n              '</p>',\n            '</li>',\n          '</ul>',\n        '</span>',\n        // 2 or more notifications.\n        '<div class=\"row p-notification--group\" ',\n             'data-ng-if=\"notifications.length >= 2\"',\n        ' data-ng-init=\"shown = false\">',\n            '<div data-ng-class=\"categoryClasses[notifications[0].category]\">',\n                '<a aria-label=\"{$ notifications.length $} ',\n                    '{$ categoryTitles[category] $}, click to open messages.\"',\n                    ' maas-enter=\"shown = !shown\"',\n                    ' class=\"p-notification__toggle\"',\n                    ' data-ng-click=\"shown = !shown\">',\n                    '<p class=\"p-notification__response\">',\n                        '<span class=\"p-notification__status\"',\n                        ' data-count=\"{$ notifications.length $}\"',\n                        ' data-ng-bind=\"notifications.length + \\' \\' + ',\n                                       'categoryTitles[category]\"></span>',\n                        '<small>',\n                        '<i data-ng-class=\"{ \\'p-icon--expand\\': !shown,',\n                        ' \\'p-icon--collapse\\': shown }\"></i></small>',\n                    '</p>',\n                '</a>',\n                '<ul class=\"p-list--divided\" ',\n                    'data-ng-class=\"{\\'u-hide\\': !shown}\">',\n                    '<li data-ng-repeat=\"notification in notifications\"',\n                    ' class=\"p-list__item\">',\n                    '<p class=\"p-notification__response\">',\n                        '<span data-ng-bind-html=\"notification.message\">',\n                        '</span> ',\n                        '<a class=\"p-notification__action\"',\n                        ' data-ng-click=\"dismiss(notification)\">Dismiss</a>',\n                    '</p>',\n                    '</li>',\n                '</ul>',\n            '</div>',\n        '</div>',\n      '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasNotifications', [\n    \"NotificationsManager\", \"ManagerHelperService\",\n    function(NotificationsManager, ManagerHelperService) {\n        return {\n            restrict: \"E\",\n            templateUrl: 'directive/templates/notifications.html',\n            link: function($scope, element, attrs) {\n                ManagerHelperService.loadManager($scope, NotificationsManager);\n                $scope.notifications = NotificationsManager.getItems();\n                $scope.dismiss = angular.bind(\n                    NotificationsManager, NotificationsManager.dismiss);\n\n                $scope.categories = [\n                    \"error\",\n                    \"warning\",\n                    \"success\",\n                    \"info\"\n                ];\n                $scope.categoryTitles = {\n                    error: \"Errors\",\n                    warning: \"Warnings\",\n                    success: \"Successes\",\n                    info: \"Other messages\"\n                };\n                $scope.categoryClasses = {\n                    error: \"p-notification--negative\",\n                    warning: \"p-notification--caution\",\n                    success: \"p-notification--positive\",\n                    info: \"p-notification\"  // No suffix.\n                };\n                $scope.categoryNotifications = {\n                    error: [],\n                    warning: [],\n                    success: [],\n                    info: []\n                };\n\n                $scope.$watchCollection(\n                    \"notifications\", function() {\n                        var cns = $scope.categoryNotifications;\n                        angular.forEach(\n                            $scope.categories, function(category) {\n                                cns[category].length = 0;\n                            }\n                        );\n                        angular.forEach(\n                            $scope.notifications, function(notification) {\n                                cns[notification.category].push(notification);\n                            }\n                        );\n                    }\n                );\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * OS/Release select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the os-select.html into the template cache.\n    $templateCache.put('directive/templates/os-select.html', [\n        '<ul class=\"p-inline-list--settings u-no-margin--top u-no-margin--left',\n            ' u-no-padding--left\">',\n            '<li class=\"p-inline-list__item\"> ',\n                '<label class=\"p-form__label\">Choose your image</label>',\n            '</li>',\n            '<li class=\"p-inline-list__item\"> ',\n                '<select name=\"os\" ',\n                    'data-ng-model=\"ngModel.osystem\" ',\n                    'data-ng-change=\"selectedOSChanged()\" ',\n                    'data-ng-options=\"',\n                    'os[0] as os[1] for os in maasOsSelect.osystems\">',\n                '</select>',\n            '</li>',\n            '<li class=\"p-inline-list__item\"> ',\n                '<select name=\"release\" ',\n                    'data-ng-model=\"ngModel.release\" ',\n                    'data-ng-change=\"selectedReleaseChanged()\" ',\n                    'data-ng-options=\"',\n                    'release[0] as release[1] for release in releases\">',\n                '</select>',\n            '</li>',\n            '<li class=\"p-inline-list__item\"> ',\n                '<select name=\"hwe_kernel\" data-ng-model=\"ngModel.hwe_kernel\" ',\n                    'data-ng-show=\"hwe_kernels.length\"',\n                    'data-ng-options=\"',\n                    'hwe_kernel[0] as hwe_kernel[1] for hwe_kernel ',\n                    'in hwe_kernels\">',\n                    '<option value=\"\">Default kernel</option>',\n                '</select>',\n            '</li>',\n        '</ul>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasOsSelect', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            maasOsSelect: '=',\n            ngModel: '='\n        },\n        templateUrl: 'directive/templates/os-select.html',\n        controller: function($scope) {\n\n            // Return only the selectable releases based on the selected os.\n            function getSelectableReleases() {\n                if(angular.isObject($scope.maasOsSelect) &&\n                    angular.isArray($scope.maasOsSelect.releases)) {\n                    var i, allChoices = $scope.maasOsSelect.releases;\n                    var choice, choices = [];\n                    for(i = 0; i < allChoices.length; i++) {\n                        choice = allChoices[i];\n                        if(choice[0].indexOf($scope.ngModel.osystem + '/') > -1)\n                        {\n                            choices.push(choice);\n                        }\n                    }\n                    return choices;\n                }\n                return [];\n            }\n\n            // Return only the selectable kernels based on the selected os.\n            function getSelectableKernels() {\n                if(angular.isObject($scope.maasOsSelect) &&\n                    angular.isObject($scope.maasOsSelect.kernels) &&\n                    angular.isString($scope.ngModel.osystem) &&\n                    angular.isString($scope.ngModel.release)) {\n                    var os = $scope.ngModel.osystem;\n                    var release = $scope.ngModel.release.split('/')[1];\n                    var osKernels = $scope.maasOsSelect.kernels[os];\n                    if(angular.isObject(osKernels)) {\n                        return osKernels[release];\n                    }\n                }\n                return [];\n            }\n\n            // Returns the defaultValue if its in the choices array. Otherwise\n            // it returns the weighted choice if present, followed by the\n            // first choice.\n            function getDefaultOrFirst(array, defaultValue, weightValue) {\n                var i, first, weightedPresent = false;\n                for(i = 0; i < array.length; i++) {\n                    if(angular.isUndefined(first)) {\n                        first = array[i][0];\n                    }\n                    if(array[i][0] === defaultValue) {\n                        return defaultValue;\n                    }\n                    if(angular.isString(weightValue) &&\n                        array[i][0] === weightValue) {\n                        weightedPresent = true;\n                    }\n                }\n                if(weightedPresent) {\n                    return weightValue;\n                }\n                if(angular.isUndefined(first)) {\n                    return null;\n                }\n                return first;\n            }\n\n            // Sets the default selected values for the ngModel. Only sets the\n            // values once the maasOsSelect is populated. Sets the selected\n            // osystem to default_osystem if present, followed by 'ubuntu' if\n            // present, followed by the first available. Sets the selected\n            // release to the default_release if present, followed by the first\n            // available.\n            function setDefault() {\n                // Do nothing if model is already set.\n                if(angular.isString($scope.ngModel.osystem) &&\n                    angular.isString($scope.ngModel.release)) {\n                    return;\n                }\n                // Do nothing if the default is not set.\n                if(angular.isUndefined($scope.maasOsSelect.default_osystem) ||\n                    angular.isUndefined($scope.maasOsSelect.default_release)) {\n                    return;\n                }\n\n                // Set the intial defaults.\n                $scope.ngModel.osystem = getDefaultOrFirst(\n                    $scope.maasOsSelect.osystems,\n                    $scope.maasOsSelect.default_osystem, \"ubuntu\");\n                $scope.releases = getSelectableReleases();\n                $scope.ngModel.release = getDefaultOrFirst(\n                    $scope.releases,\n                    $scope.ngModel.osystem + \"/\" +\n                    $scope.maasOsSelect.default_release);\n                $scope.ngModel.kernel = \"\";\n            }\n\n            // Defaults\n            if(!angular.isObject($scope.ngModel)) {\n                $scope.ngModel = {\n                    osystem: null,\n                    release: null,\n                    hwe_kernel: null\n                };\n            }\n            $scope.releases = getSelectableReleases();\n            $scope.hwe_kernels = getSelectableKernels();\n\n            // Add the reset function to ngModel, allowing users to call\n            // this function to reset the defauls.\n            $scope.ngModel.$reset = function() {\n                $scope.ngModel.osystem = null;\n                $scope.ngModel.release = null;\n                $scope.ngModel.hwe_kernel = null;\n                setDefault();\n            };\n\n            // If the available os change update the available releases and\n            // set the default.\n            $scope.$watch(\"maasOsSelect.releases\", function() {\n                $scope.releases = getSelectableReleases();\n                setDefault();\n            });\n\n            // If the available release change update the available kernels and\n            // set the default.\n            $scope.$watch(\"maasOsSelect.kernels\", function() {\n                $scope.hwe_kernels = getSelectableKernels();\n                setDefault();\n            });\n\n            // Updates the default and selectable releases.\n            $scope.selectedOSChanged = function() {\n                $scope.releases = getSelectableReleases();\n                $scope.hwe_kernels = getSelectableKernels();\n                $scope.ngModel.release = null;\n                $scope.ngModel.hwe_kernel = null;\n                if($scope.releases.length > 0) {\n                    $scope.ngModel.release = $scope.releases[0][0];\n                }\n            };\n\n            // Updates the default and selectable kernels.\n            $scope.selectedReleaseChanged = function() {\n                $scope.hwe_kernels = getSelectableKernels();\n                $scope.ngModel.hwe_kernel = null;\n            };\n        }\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Placeholder directive.\n *\n * Allows the placeholder attribute on an element to be dynamic.\n */\n\n\nangular.module('MAAS').directive('ngPlaceholder', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            ngPlaceholder: \"=\"\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('ngPlaceholder', function() {\n                element[0].placeholder = scope.ngPlaceholder;\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Pod parameters directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the power-parameters.html into the template cache.\n    $templateCache.put('directive/templates/pod-parameters.html', [\n        '<maas-obj-field type=\"options\" key=\"type\" label=\"Pod type\" ',\n          'label-width=\"2\" input-width=\"5\" ',\n          'placeholder=\"Select the pod type\" ',\n          'options=\"type.name as type.description for type in podTypes\" ',\n          'ng-if=\"!hideType\">',\n        '</maas-obj-field>',\n        '<div pod-fields></div>'\n    ].join(''));\n}]);\n\n\nangular.module('MAAS').directive(\n    'maasPodParameters', [\n        '$compile', 'GeneralManager', 'ManagerHelperService', function(\n        $compile, GeneralManager, ManagerHelperService) {\n    return {\n        restrict: \"E\",\n        require: \"^^maasObjForm\",\n        scope: {\n          hideType: '='\n        },\n        templateUrl: 'directive/templates/pod-parameters.html',\n        link: function(scope, element, attrs, controller) {\n            scope.powerTypes = GeneralManager.getData('power_types');\n            scope.podTypes = [];\n            scope.type = null;\n\n            var childScope, fieldsElement = angular.element(\n                element.find('div[pod-fields]'));\n\n            // Function to update the editable fields.\n            var updateFields = function(podType) {\n                var type = null;\n                var i;\n                for(i = 0; i < scope.podTypes.length; i++) {\n                    if(scope.podTypes[i].name === podType) {\n                      type = scope.podTypes[i];\n                    }\n                }\n\n                fieldsElement.empty();\n                if(childScope) {\n                  childScope.$destroy();\n                }\n                if(angular.isObject(type)) {\n                  var html = '<maas-obj-field-group>';\n                  angular.forEach(type.fields, function(field) {\n                      if(field.scope === 'bmc') {\n                          if(field.name === 'power_pass') {\n                              html += (\n                                  '<maas-obj-field type=\"password\" key=\"');\n                          } else {\n                              html += (\n                                  '<maas-obj-field type=\"text\" key=\"');\n                          }\n                          html += (field.name + '\" label=\"' + field.label +\n                            '\" ' + 'label-width=\"2\" input-width=\"5\">' +\n                            '</maas-obj-field>');\n                      }\n                  });\n\n                  if(type.name === 'virsh' && attrs.hideSlider !== \"true\") {\n                      html += (\n                          '<maas-obj-field type=\"slider\" key=\"' +\n                          'cpu_over_commit_ratio\" label=\"CPU over commit\" ' +\n                          'min=\"0\" max=\"10\" label-width=\"2\" input-width=\"5\">' +\n                          '</maas-obj-field>');\n                      html += (\n                          '<maas-obj-field type=\"slider\" key=\"' +\n                          'memory_over_commit_ratio\" label=\"' +\n                          'Memory over commit\" min=\"0\" max=\"10\" ' +\n                          'label-width=\"2\" input-width=\"5\"></maas-obj-field>');\n                  }\n                  html += '</maas-obj-field-group>';\n                  childScope = scope.$new();\n                  var ele = angular.element(html);\n                  fieldsElement.append(ele);\n                  $compile(ele)(\n                      childScope, undefined, {maasObjForm: controller});\n                }\n            };\n\n            // Return the selected type.\n            var getType = function() {\n                if(scope.hideType) {\n                    return controller.obj.type;\n                } else {\n                    return controller.getValue('type');\n                }\n            };\n\n            // Update the fields when the type changes.\n            scope.$watch(getType, updateFields);\n\n            // Update the pod types when the power types is updated.\n            scope.$watchCollection(\"powerTypes\", function() {\n                scope.podTypes.length = 0;\n                angular.forEach(scope.powerTypes, function(type) {\n                    if(type.driver_type === \"pod\") {\n                        scope.podTypes.push(type);\n                    }\n                });\n                updateFields(getType());\n            });\n\n            // Load the general manager.\n            ManagerHelperService.loadManager(scope, GeneralManager);\n        }\n    };\n}]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Power parameters directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the power-parameters.html into the template cache.\n    $templateCache.put('directive/templates/power-parameters.html', [\n        '<div class=\"p-form__group\">',\n            '<label for=\"power-type\" ',\n                    'class=\"form__group-label col-2\">Power type</label>',\n            '<div class=\"form__group-input col-3\">',\n                '<select name=\"power-type\" id=\"power-type\" ',\n                    'data-ng-disabled=\"ngDisabled || ngModel.in_pod\" ',\n                    'data-ng-class=\"{ invalid: !ngModel.type }\" ',\n                    'data-ng-model=\"ngModel.type\" ',\n                    'data-ng-options=\"',\n                    'type as type.description ',\n                    'for type in maasPowerParameters track by type.name\">',\n                    '<option value=\"\" disabled selected>',\n                        'Select your power type',\n                    '</option>',\n                '</select>',\n            '</div>',\n        '</div>',\n        '<div class=\"p-form__group\" ',\n            'data-ng-repeat=\"field in ngModel.type.fields\">',\n            '<label for=\"{$ field.name $}\" class=\"form__group-label col-2\" ',\n                 'data-ng-if=\"field.name !== ' + \"'default_storage_pool' && \",\n                 \"(field.scope !== 'bmc' || !ngModel.in_pod)\" + '\">',\n                '{$ field.label $}',\n            '</label>',\n            '<div class=\"form__group-input col-3\">',\n                '<maas-power-input field=\"field\" ',\n                    'data-ng-disabled=\"ngDisabled || (field.scope === ',\n                    \"'bmc' && ngModel.in_pod)\" + '\" ',\n                    'data-ng-if=\"field.name !== ' + \"'default_storage_pool' \",\n                    \"&& (field.scope !== 'bmc' || !ngModel.in_pod)\" + '\" ',\n                    'data-ng-model=\"ngModel.parameters[field.name]\">',\n            '</div>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasPowerInput', ['$compile',\n    function($compile) {\n        return {\n            restrict: \"E\",\n            require: \"ngModel\",\n            scope: {\n                field: '=',\n                ngModel: '='\n            },\n            link: function(scope, element, attrs) {\n                var type = scope.field.field_type;\n                var req = scope.field.required ? 'required=\"required\" ' : '';\n                var html = \"\";\n                if(type === \"string\" || type === \"mac_address\" ||\n                   type === \"password\") {\n                    // Build an input element with the correct attributes.\n                    var input_type = 'type=\"text\"';\n                    if(type === \"password\") {\n                        // If the input field is a password field, display it\n                        // as text or password depending on if we're editing\n                        // the fields.\n                        input_type = \"data-ng-type=\\\"ngModel.editing && \" +\n                            \"'text' || 'password'\\\"\";\n                    }\n                    html =\n                        '<input ' + input_type + ' ' +\n                        'name=\"' + scope.field.name + '\" ' +\n                        req + 'data-ng-model=\"' + attrs.ngModel + '\" ' +\n                        'data-ng-disabled=\"' + attrs.ngDisabled + '\" ';\n\n                    // Add mac address validation.\n                    if(type === \"mac_address\") {\n                        html +=\n                            'data-ng-pattern=\"' +\n                            '/^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$/\"';\n                    }\n                    html += '>';\n\n                    // Set the default value for the input on the model.\n                    if(angular.isUndefined(scope.ngModel)) {\n                        scope.ngModel = scope.field[\"default\"];\n                    }\n                } else if(type === \"choice\") {\n                    // Build a select element with the correct attributes.\n                    html =\n                        '<select name=\"' + scope.field.name + '\"' +\n                        req + 'data-ng-model=\"' + attrs.ngModel + '\" ' +\n                        'data-ng-disabled=\"' + attrs.ngDisabled + '\" ' +\n                        'data-ng-options=\"' +\n                        'choice[0] as choice[1] for choice in field.choices' +\n                        '\">';\n                    html += '</select>';\n\n                    // Set the default choice on the model.\n                    if(angular.isUndefined(scope.ngModel)) {\n                        if(scope.field[\"default\"]) {\n                            scope.ngModel = scope.field[\"default\"];\n                        }\n                    }\n                } else {\n                    throw new Error(\"Unknown power_type: \"+ type);\n                }\n\n                // Replace the element with the compiled html using the parents\n                // scope. The parent scope is used because we want to build the\n                // element as if it was in the parent scope, not the scope that\n                // is defined in this directive.\n                element.replaceWith($compile(html)(scope.$parent));\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasPowerParameters', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            maasPowerParameters: '=',\n            ngModel: '=',\n            ngDisabled: '='\n        },\n        templateUrl: 'directive/templates/power-parameters.html'\n    };\n});\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * User preferences MAAS key\n *\n * Provides the interactivity of the MAAS key section of the user profile.\n */\n\n\nangular.module('MAAS')\n.directive('maasPrefKeys',\n    ['$q', 'RegionConnection', 'UsersManager',\n    function($q, RegionConnection, UsersManager) {\n        return {\n            restrict: \"A\",\n            controller: function() {\n                var self = this;\n\n                self.addKey = function() {\n                    var defer = $q.defer();\n                    RegionConnection.defaultConnect().then(function() {\n                        UsersManager.createAuthorisationToken().then(\n                            function(token) {\n                                if(self.injector) {\n                                    self.injector(token);\n                                }\n                                defer.resolve(token);\n                            });\n                    });\n                    return defer.promise;\n                };\n\n                self.deleteKey = function(key) {\n                    RegionConnection.defaultConnect().then(function() {\n                        UsersManager.deleteAuthorisationToken(key);\n                    });\n                };\n            }\n        };\n    }])\n.directive('maasPrefKeysInject',\n    ['$compile', '$templateCache',\n    function($compile, $templateCache) {\n        return {\n            restrict: 'A',\n            require: '^maasPrefKeys',\n            scope: {\n                template: '@maasPrefKeysInject'\n            },\n            link: function($scope, $element, $attrs, controller) {\n                var template = $templateCache.get($scope.template);\n                if(!template) {\n                    throw new Error(\n                        \"Unable to load template: \" + $scope.template);\n                }\n\n                // Set the injector on the controller.\n                controller.injector = function(token) {\n                    var newScope = $scope.$new();\n                    newScope.token = token;\n\n                    var newElement = angular.element(template);\n                    $element.append(newElement);\n                    $compile(newElement)(newScope);\n                };\n            }\n        };\n    }])\n.directive('maasPrefKeysAdd', function() {\n    return {\n        restrict: 'A',\n        require: '^maasPrefKeys',\n        link: function($scope, $element, $attrs, controller) {\n            var spinner = (\n                '<i class=\"p-icon--spinner u-animation--spin\"></i>');\n\n            $element.on('click', function(evt) {\n                evt.preventDefault();\n\n                // Add the spinner.\n                var spinElement = angular.element(spinner);\n                $element.prepend(spinElement);\n\n                // Add the new key.\n                $scope.$apply(function() {\n                    controller.addKey().then(function() {\n                        // Remove the spinner.\n                        spinElement.remove();\n                    });\n                });\n            });\n        }\n    };\n})\n.directive('maasPrefKey', function() {\n    return {\n        restrict: 'A',\n        require: '^maasPrefKeys',\n        scope: {\n            'key': '@maasPrefKey'\n        },\n        controller: ['$scope', '$element', function($scope, $element) {\n            var self = this;\n\n            self.deleteKey = function() {\n                $scope.prefsController.deleteKey($scope.key);\n\n                // Delete self.\n                $scope.$destroy();\n                $element.remove();\n            };\n        }],\n        link: function($scope, $element, $attrs, controller) {\n            // Needed so the controller of this directive can get the parent\n            // controller.\n            $scope.prefsController = controller;\n        }\n    };\n})\n.directive('maasPrefKeyDelete', function() {\n    return {\n        restrict: 'A',\n        require: '^maasPrefKey',\n        link: function($scope, $element, $attrs, controller) {\n            $element.on('click', function(evt) {\n                evt.preventDefault();\n\n                $scope.$apply(function() {\n                    controller.deleteKey();\n                });\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Proxy settings directive.\n*/\n\nangular.module('MAAS').directive('maasProxySettings', [\n    '$sce', 'ConfigsManager', 'ManagerHelperService', 'JSONService',\n    function($sce, ConfigsManager, ManagerHelperService, JSONService) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            templateUrl: 'static/partials/proxy-settings.html',\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                ManagerHelperService.loadManager(\n                    $scope, ConfigsManager).then(function() {\n                    $scope.loading = false;\n                    $scope.httpProxy = ConfigsManager.getItemFromList(\n                        \"http_proxy\");\n                    $scope.enableHttpProxy = ConfigsManager.getItemFromList(\n                        \"enable_http_proxy\");\n                    $scope.usePeerProxy = ConfigsManager.getItemFromList(\n                        \"use_peer_proxy\");\n                    if ($scope.enableHttpProxy.value) {\n                        if ($scope.httpProxy.value) {\n                            if ($scope.usePeerProxy.value) {\n                                $scope.proxy_type = \"peer-proxy\";\n                            } else {\n                                $scope.proxy_type = \"external-proxy\";\n                            }\n                        } else {\n                            $scope.proxy_type = \"builtin-proxy\";\n                        }\n                    } else {\n                        $scope.proxy_type = \"no-proxy\";\n                    }\n                });\n            }\n        };\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Release name.\n *\n * Converts the provided release name into the release title.\n */\n\n\nangular.module('MAAS').directive('maasReleaseName', [\n    'GeneralManager', 'ManagerHelperService',\n    function(GeneralManager, ManagerHelperService) {\n    return {\n        restrict: \"A\",\n        scope: {\n          releaseName: \"=maasReleaseName\"\n        },\n        link: function(scope, element, attrs) {\n            scope.osinfo = GeneralManager.getData(\"osinfo\");\n\n            // Gets the release name.\n            var getName = function() {\n                if(angular.isArray(scope.osinfo.releases)) {\n                  for(i = 0; i < scope.osinfo.releases.length; i++) {\n                      var release = scope.osinfo.releases[i];\n                      if(release[0] === scope.releaseName) {\n                          return release[1];\n                      }\n                  }\n                }\n                return scope.releaseName;\n            };\n\n            // Sets the text inside the element.\n            var setText = function() {\n                element.text(getName());\n            };\n\n            // Update the text when the release name or osinfo changes.\n            scope.$watch('releaseName', function() {\n              setText();\n            });\n            scope.$watchCollection('osinfo.releases', function() {\n              setText();\n            });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Release options directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the release-options.html into the template cache.\n    $templateCache.put('directive/templates/release-options.html', [\n        '<ul class=\"p-inline-list--settings u-no-margin--top\">',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"diskErase\" ',\n                    'type=\"checkbox\" data-ng-model=\"maasReleaseOptions.erase\" ',\n                    'data-ng-disabled=\"globalOptions.erase\" ',\n                    'data-ng-change=\"onEraseChange()\">',\n                '<label for=\"diskErase\">',\n                    'Erase disks before releasing',\n                '</label>',\n            '</li>',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"secureErase\" ',\n                    'type=\"checkbox\" ',\n                    'data-ng-model=\"maasReleaseOptions.secureErase\" ',\n                    'data-ng-disabled=\"!maasReleaseOptions.erase\">',\n                '<label for=\"secureErase\">',\n                    'Use secure erase',\n                '</label>',\n            '</li>',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"quickErase\" type=\"checkbox\" ',\n                    'data-ng-model=\"maasReleaseOptions.quickErase\" ',\n                    'data-ng-disabled=\"!maasReleaseOptions.erase\">',\n                '<label for=\"quickErase\">',\n                    'Use quick erase (not secure)',\n                '</label>',\n            '</li>',\n        '</ul>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasReleaseOptions', [\n    'GeneralManager', function(GeneralManager) {\n        return {\n            restrict: \"A\",\n            scope: {\n                maasReleaseOptions: '='\n            },\n            templateUrl: 'directive/templates/release-options.html',\n            link: function(scope, element, attrs) {\n                // On click of enabling erasing set the others to the\n                // global default value.\n                scope.onEraseChange = function() {\n                    if(scope.maasReleaseOptions.erase) {\n                        scope.maasReleaseOptions.secureErase = (\n                            scope.globalOptions.secure_erase);\n                        scope.maasReleaseOptions.quickErase = (\n                            scope.globalOptions.quick_erase);\n                    } else {\n                        scope.maasReleaseOptions.secureErase = false;\n                        scope.maasReleaseOptions.quickErase = false;\n                    }\n                };\n\n                // Watch the global options. Once set update the defaults\n                // of maasReleaseOptions.\n                scope.globalOptions = GeneralManager.getData(\n                    \"release_options\");\n                scope.$watch('globalOptions', function() {\n                    if(angular.isDefined(scope.globalOptions.erase)) {\n                        // Set the initial defauls for the release options.\n                        scope.maasReleaseOptions.erase = (\n                            scope.globalOptions.erase);\n                        scope.onEraseChange();\n                    }\n                }, true);\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script expander\n *\n * Expands a scripts content.\n */\n\n\nangular.module('MAAS').directive('pScriptExpander', function() {\n    return {\n        restrict: \"C\",\n        link: function($scope, $element, $attrs) {\n            var link = $element.find('.p-script-expander__trigger');\n            var target = $element.find('.p-script-expander__content');\n            target.addClass('u-hide');\n\n            link.on('click', function(evt) {\n                evt.preventDefault();\n                target.toggleClass('u-hide');\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Script results listing directive.\n*\n*/\n\nangular.module('MAAS').directive('maasScriptResultsList', function() {\n    return {\n        templateUrl: (\n        'static/partials/script-results-list.html?v=' + (\n            MAAS_config.files_version))\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script runtime counter directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script_runtime.html into the template cache.\n    $templateCache.put('directive/templates/script_runtime.html', [\n        '<span data-ng-if=\"(scriptStatus === 1 || scriptStatus === 7) &&',\n        \" estimatedRunTime !== 'Unknown'\" + '\">{{counter}} of ',\n        '~{{estimatedRunTime}}</span>',\n        '<span data-ng-if=\"(scriptStatus === 1 || scriptStatus === 7) &&',\n        \" estimatedRunTime == 'Unknown'\" + '\">{{counter}}</span>',\n        '<span data-ng-if=\"scriptStatus === 0 && estimatedRunTime !== ',\n        \"'Unknown'\" + '\">~{{estimatedRunTime}}</span>',\n        '<span data-ng-if=\"scriptStatus !== 0 && scriptStatus !== 1 ',\n        '&& scriptStatus !== 7\">{{runTime}}</span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasScriptRunTime', function() {\n    return {\n        restrict: \"A\",\n        require: [\"startTime\", \"runTime\", \"estimatedRunTime\", \"scriptStatus\"],\n        scope: {\n            startTime: '=',\n            runTime: '@',\n            estimatedRunTime: '@',\n            scriptStatus: '='\n        },\n        templateUrl: 'directive/templates/script_runtime.html',\n        controller: function($scope, $interval) {\n            $scope.counter = \"0:00:00\";\n\n            function incrementCounter() {\n                if(($scope.scriptStatus === 1 || $scope.scriptStatus === 7) &&\n                    $scope.startTime) {\n                    var seconds = Math.floor(\n                        (Date.now() / 1000) - $scope.startTime);\n                    var minutes = Math.floor(seconds / 60);\n                    var hours = Math.floor(minutes / 60);\n                    var days = Math.floor(hours / 24);\n                    hours = hours - (days * 24);\n                    minutes = minutes - (days * 24 * 60) - (hours * 60);\n                    seconds = seconds - (days * 24 * 60 * 60) -\n                        (hours * 60 * 60) - (minutes * 60);\n                    var new_counter = \"\";\n                    // This outputs the same format used by Python. It is\n                    // import to use the same format as when scripts are not\n                    // running runtime is taken from the region using Python's\n                    // format.\n                    if(days === 1) {\n                        new_counter = days + \" day, \";\n                    }else if(days > 1) {\n                        new_counter = days + \" days, \";\n                    }\n                    new_counter += hours + \":\";\n                    if(minutes < 10) {\n                        new_counter += \"0\" + minutes + \":\";\n                    } else {\n                        new_counter += minutes + \":\";\n                    }\n                    if(seconds < 10) {\n                        new_counter += \"0\" + seconds;\n                    } else {\n                        new_counter += seconds;\n                    }\n                    $scope.counter = new_counter;\n                }\n            }\n\n            // Update the counter on init, start the interval and stop it when\n            // the directive is destroyed.\n            incrementCounter();\n            var promise = $interval(incrementCounter, 1000);\n            $scope.$on('$destroy', function() {\n              $interval.cancel(promise);\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script-select.html into the template cache.\n    $templateCache.put('directive/templates/script-select.html', [\n        '<tags-input data-ng-model=\"ngModel\" placeholder=\"Select scripts\" ',\n                'key-property=\"id\" display-property=\"name\" min-length=1',\n                'on-tag-adding=\"onTagAdding($tag)\" spellcheck=\"false\"',\n                'add-from-autocomplete-only=\"true\" on-tag-removed=\"refocus()\"',\n                'on-tag-adding=\"onTagAdding($tag)\" on-tag-added=\"refocus()\">',\n            '<auto-complete source=\"getScripts($query)\" min-length=\"0\" ',\n                    'load-on-down-arrow=\"true\" load-on-focus=\"true\" ',\n                    'load-on-empty=\"true\" template=\"script-template\" ',\n                    'max-results-to-show=\"1000\">',\n            '</auto-complete>',\n        '</tags-input>',\n        '<script type=\"text/ng-template\" id=\"script-template\">',\n            '<div>',\n                '<p>',\n                    '{{data.name}} {{data.tags_string}}',\n                '</p>',\n                '<span class=\"p-form-help-text\">',\n                    '{{data.description}}',\n                '</span>',\n            '</div>',\n        '</script>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive(\n        'maasScriptSelect',\n        ['$q', 'ScriptsManager', 'ManagerHelperService',\n        function($q, ScriptsManager, ManagerHelperService) {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            ngModel: '=',\n            scriptType: '='\n        },\n        templateUrl: 'directive/templates/script-select.html',\n        link: function($scope, element, attrs, ngModelCtrl) {\n\n            $scope.allScripts = ScriptsManager.getItems();\n            $scope.scripts = [];\n            $scope.getScripts = function(query) {\n                $scope.scripts.length = 0;\n                angular.forEach($scope.allScripts, function(script) {\n                    if(script.script_type === $scope.scriptType &&\n                            script.name.indexOf(query) >= 0) {\n                        script.tags_string = '';\n                        angular.forEach(script.tags, function (tag) {\n                            if(script.tags_string === '') {\n                                script.tags_string = '(' + tag;\n                            } else {\n                                script.tags_string += ', ' + tag;\n                            }\n                        });\n                        if(script.tags_string !== '') {\n                            script.tags_string += ')';\n                        }\n                        $scope.scripts.push(script);\n                    }\n                });\n                return {\n                    data: $scope.scripts\n                };\n            };\n            $scope.onTagAdding = function(tag) {\n                return tag.id !== undefined;\n            };\n\n            $scope.refocus = function() {\n                var tagsInput = element.find('tags-input');\n                var tagsInputScope = tagsInput.isolateScope();\n                tagsInputScope.eventHandlers.input.change('');\n                tagsInputScope.eventHandlers.input.focus();\n                tagsInput.find('input').focus();\n            };\n\n            if(!angular.isArray($scope.ngModel)) {\n                $scope.ngModel = [];\n            }\n            ManagerHelperService.loadManager($scope, ScriptsManager).then(\n                function() {\n                    $scope.ngModel.length = 0;\n                    angular.forEach($scope.allScripts, function(script) {\n                        if(script.script_type === $scope.scriptType &&\n                           script.for_hardware.length === 0) {\n                            if($scope.scriptType === 0) {\n                                // By default MAAS runs all custom\n                                // commissioning scripts in addition to all\n                                // builtin commissioning scripts.\n                                $scope.ngModel.push(script);\n                            } else if($scope.scriptType === 2 &&\n                                    script.tags.indexOf('commissioning') >= 0) {\n                                // By default MAAS runs testing scripts which\n                                // have been tagged 'commissioning'\n                                $scope.ngModel.push(script);\n                            }\n                        }\n                    });\n                }\n            );\n        }\n    };\n}]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script status icon select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script_status.html into the template cache.\n    $templateCache.put('directive/templates/script_status.html', [\n        '<span data-ng-class=\"icon\" data-ng-show=\"show\"></span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasScriptStatus', function() {\n    return {\n        restrict: \"A\",\n        require: \"scriptStatus\",\n        scope: {\n            scriptStatus: '='\n        },\n        templateUrl: 'directive/templates/script_status.html',\n        controller: function($scope) {\n            function getIcon() {\n                $scope.show = true;\n                switch($scope.scriptStatus) {\n                    // SCRIPT_STATUS.PENDING\n                    case 0:\n                        $scope.icon = 'p-icon--pending';\n                        break;\n                    // SCRIPT_STATUS.RUNNING\n                    case 1:\n                    // SCRIPT_STATUS.INSTALLING\n                    case 7:\n                        $scope.icon = 'p-icon--running';\n                        break;\n                    // SCRIPT_STATUS.PASSED\n                    case 2:\n                        $scope.icon = 'p-icon--pass';\n                        break;\n                    // SCRIPT_STATUS.FAILED\n                    case 3:\n                    // SCRIPT_STATUS.ABORTED\n                    case 5:\n                    // SCRIPT_STATUS.DEGRADED\n                    case 6:\n                    // SCRIPT_STATUS.FAILED_INSTALLING\n                    case 8:\n                        $scope.icon = 'p-icon--power-error';\n                        break;\n                    // SCRIPT_STATUS.TIMEDOUT\n                    case 4:\n                        $scope.icon = 'p-icon--timed-out';\n                        break;\n                    // SCRIPT_STATUS.SKIPPED\n                    case 9:\n                        $scope.icon = 'p-icon--warning';\n                        break;\n                    case -1:\n                        // No scripts have been run.\n                        $scope.show = false;\n                        break;\n                    default:\n                        $scope.icon = 'p-icon--help';\n                        break;\n                }\n            }\n\n            getIcon();\n\n            $scope.$watch(\"scriptStatus\", function() {\n                getIcon();\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * SSH keys directive.\n*/\n\nangular.module('MAAS').directive('maasSshKeys', [\n    '$sce', 'SSHKeysManager', 'ManagerHelperService', 'JSONService',\n    function($sce, SSHKeysManager, ManagerHelperService, JSONService) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            templateUrl: (\n                'static/partials/ssh-keys.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.keys = SSHKeysManager.getItems();\n                $scope.groupedKeys = [];\n                $scope.add = {\n                    source: 'lp',\n                    authId: '',\n                    key: '',\n                    error: null,\n                    saving: false\n                };\n                $scope.sourceTitles = {\n                    'lp': 'Launchpad',\n                    'gh': 'Github',\n                    'upload': 'Upload'\n                };\n                $scope.openRow = null;\n                $scope.rowMode = null;\n\n                // Expose trustAsHtml on the scope for the view to use.\n                $scope.trustAsHtml = $sce.trustAsHtml;\n\n                // Open a row.\n                $scope.open = function(obj, mode) {\n                    $scope.openRow = obj.id;\n                    $scope.rowMode = mode;\n                };\n\n                // Close the open row.\n                $scope.close = function() {\n                    $scope.openRow = null;\n                };\n\n                // Returns true if the key can be imported.\n                $scope.canImportKeys = function() {\n                    if($scope.add.saving) {\n                        return false;\n                    } else if ($scope.add.source === 'lp' ||\n                        $scope.add.source === 'gh') {\n                        return $scope.add.authId.length > 0;\n                    } else {\n                        return $scope.add.key.length > 0;\n                    }\n                };\n\n                // Called to import the key.\n                $scope.importKeys = function() {\n                    if(!$scope.canImportKeys()) {\n                        return;\n                    }\n                    $scope.add.error = null;\n                    $scope.add.saving = true;\n                    if($scope.add.source === 'lp' ||\n                        $scope.add.source === 'gh') {\n                        SSHKeysManager.importKeys({\n                            'protocol': $scope.add.source,\n                            'auth_id': $scope.add.authId\n                        }).then(function() {\n                            $scope.add.saving = false;\n                            $scope.add.source = 'lp';\n                            $scope.add.authId = '';\n                            $scope.add.key = '';\n                        }, function(error) {\n                            $scope.add.saving = false;\n                            var errorJson = JSONService.tryParse(error);\n                            if(angular.isObject(errorJson)) {\n                                if(angular.isArray(errorJson.__all__)) {\n                                    $scope.add.error = errorJson.__all__[0];\n                                } else {\n                                    $scope.add.error = error;\n                                }\n                            } else {\n                                $scope.add.error = error;\n                            }\n                        });\n                    } else {\n                        SSHKeysManager.createItem({\n                            'key': $scope.add.key\n                        }).then(function() {\n                            $scope.add.saving = false;\n                            $scope.add.source = 'lp';\n                            $scope.add.authId = '';\n                            $scope.add.key = '';\n                        }, function(error) {\n                            $scope.add.saving = false;\n                            var errorJson = JSONService.tryParse(error);\n                            if(angular.isObject(errorJson)) {\n                                if(angular.isArray(errorJson.key)) {\n                                    $scope.add.error = errorJson.key[0];\n                                } else if(angular.isArray(errorJson.__all__)) {\n                                    $scope.add.error = errorJson.__all__[0];\n                                } else {\n                                    $scope.add.error = error;\n                                }\n                            } else {\n                                $scope.add.error = error;\n                            }\n                        });\n                    }\n                };\n\n                // Called to delete the selected group of keys.\n                $scope.confirmDelete = function(obj) {\n                    angular.forEach(obj.keys, function(key) {\n                        SSHKeysManager.deleteItem(key);\n                    });\n                };\n\n                // Updates the groupedKeys that is used to render the table.\n                $scope.$watchCollection(\"keys\", function() {\n                    $scope.groupedKeys = [];\n                    var keyMap = {};\n                    angular.forEach($scope.keys, function(key) {\n                        var groupObj, keysource = key.keysource;\n                        if(angular.isObject(keysource)) {\n                            var keysourceKey = (\n                                keysource.protocol + '/' + keysource.auth_id);\n                            groupObj = keyMap[keysourceKey];\n                            if(angular.isObject(groupObj)) {\n                                groupObj.keys.push(key);\n                            } else {\n                                groupObj = {\n                                    id: keysourceKey,\n                                    source: keysource.protocol,\n                                    authId: keysource.auth_id,\n                                    keys: [key]\n                                };\n                                keyMap[keysourceKey] = groupObj;\n                                $scope.groupedKeys.push(groupObj);\n                            }\n                        } else {\n                            groupObj = {\n                                id: 'upload/' + key.id,\n                                source: 'upload',\n                                authId: '',\n                                keys: [key]\n                            };\n                            $scope.groupedKeys.push(groupObj);\n                        }\n                    });\n                });\n\n                ManagerHelperService.loadManager($scope, SSHKeysManager).then(\n                    function() {\n                        $scope.loading = false;\n                    });\n            }\n        };\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Switches listing directive.\n*\n* Renders the switches listing.\n*/\n\n\nangular.module('MAAS').directive('maasSwitchesTable', [\n  'SwitchesManager', 'GeneralManager', 'ManagerHelperService',\n  function (SwitchesManager, GeneralManager, ManagerHelperService) {\n    return {\n      restrict: \"E\",\n      scope: {\n        search: \"=\",\n        ngDisabled: \"&\",\n        switchHasError: \"&\",\n        hideCheckboxes: \"=?\",\n        onListingChange: \"&\",\n        onCheckAll: \"&\",\n        onCheck: \"&\"\n      },\n      templateUrl: (\n        'static/partials/switches-table.html?v=' + (\n          MAAS_config.files_version)),\n      link: function(scope, element, attrs) {\n        // Statuses that should show spinner.\n        var SPINNER_STATUSES = [\n          1,   // commissioning\n          9,   // deploying\n          12,  // releasing\n          14,  // disk erasing\n          17,  // entering rescue mode\n          19,  // exiting rescue mode\n          21   // testing\n        ];\n\n        // Scope variables.\n        scope.table = {\n          column: 'fqdn',\n          predicate: 'fqdn',\n          reverse: false,\n          allViewableChecked: false,\n          switches: SwitchesManager.getItems(),\n          filteredSwitches: [],\n          osinfo: GeneralManager.getData(\"osinfo\")\n        };\n\n        // Ensures that the checkbox for select all is the correct value.\n        scope.updateAllChecked = function() {\n          // Not checked when the filtered switches are empty.\n          if(scope.table.filteredSwitches.length === 0) {\n              scope.table.allViewableChecked = false;\n              return;\n          }\n\n          // Loop through all filtered switches and see if all are checked.\n          var i;\n          for(i = 0; i < scope.table.filteredSwitches.length; i++) {\n              if(!scope.table.filteredSwitches[i].$selected) {\n                  scope.table.allViewableChecked = false;\n                  return;\n              }\n          }\n          scope.table.allViewableChecked = true;\n        };\n\n        // Selects and deselects visible switches.\n        scope.toggleCheckAll = function() {\n          if(scope.table.allViewableChecked) {\n            angular.forEach(\n              scope.table.filteredSwitches, function(switch_) {\n                SwitchesManager.unselectItem(switch_.system_id);\n              });\n          } else {\n            angular.forEach(\n              scope.table.filteredSwitches, function(switch_) {\n                SwitchesManager.selectItem(switch_.system_id);\n              });\n          }\n          scope.updateAllChecked();\n          scope.onCheckAll();\n        };\n\n        // Selects and unselects switch.\n        scope.toggleChecked = function(switch_) {\n          if(SwitchesManager.isSelected(switch_.system_id)) {\n            SwitchesManager.unselectItem(switch_.system_id);\n          } else {\n            SwitchesManager.selectItem(switch_.system_id);\n          }\n          scope.updateAllChecked();\n          scope.onCheck({$switch_: switch_});\n        };\n\n        // Sorts the table by predicate.\n        scope.sortTable = function(predicate) {\n            scope.table.predicate = predicate;\n            scope.table.reverse = !scope.table.reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        scope.selectColumnOrSort = function(predicate) {\n            if(scope.table.column !== predicate) {\n                scope.table.column = predicate;\n            } else {\n                scope.sortTable(predicate);\n            }\n        };\n\n        // Return true if spinner should be shown.\n        scope.showSpinner = function(switch_) {\n          return SPINNER_STATUSES.indexOf(switch_.status_code) > -1;\n        };\n\n        // Returns the release title from osinfo.\n        scope.getReleaseTitle = function(os_release) {\n          if(angular.isArray(scope.table.osinfo.releases)) {\n            for(i = 0; i < scope.table.osinfo.releases.length; i++) {\n              var release = scope.table.osinfo.releases[i];\n              if(release[0] === os_release) {\n                return release[1];\n              }\n            }\n          }\n          return os_release;\n        };\n\n        // Returns the status text to show.\n        scope.getStatusText = function(switch_) {\n          var showRelease = ['Deploying', 'Deployed'];\n          if(showRelease.indexOf(switch_.status) === -1) {\n            return switch_.status;\n          } else {\n            var releaseTitle = scope.getReleaseTitle(\n              switch_.osystem + '/' + switch_.distro_series);\n            if(switch_.osystem === \"ubuntu\") {\n              releaseTitle = releaseTitle.split('\"')[0].trim();\n            }\n            if(switch_.status === \"Deployed\") {\n              return releaseTitle;\n            }\n            if(switch_.status === \"Deploying\") {\n              return switch_.status + ' ' + releaseTitle;\n            }\n          }\n        };\n\n        // When the list of filtered switches change update the all checkbox.\n        scope.$watchCollection(\"table.filteredSwitches\", function() {\n          scope.updateAllChecked();\n          scope.onListingChange({$switches: scope.table.filteredSwitches});\n        });\n      }\n    };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Toggle control.\n */\n\nangular.module('MAAS').directive('toggleCtrl',[\n    '$document',\n    function($document) {\n        return {\n            restrict: 'A',\n            link: function($scope, $element, $attr){\n\n                $scope.isToggled = false;\n                $scope.toggleMenu = function() {\n                  $scope.isToggled = !$scope.isToggled;\n                };\n\n                var clickHandler = function(event) {\n                    if ($element.find(event.target).length > 0) {\n                        return;\n                    }\n                    $scope.$apply(function() {\n                        $scope.isToggled = false;\n                    });\n                };\n\n                $document.on('click', clickHandler);\n                $scope.$on('$destroy', function() {\n                    $document.off('click', clickHandler);\n                });\n            }\n        };\n}]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Type directive.\n */\n\nangular.module('MAAS').directive('ngType', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            ngType: \"=\"\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('ngType', function() {\n                valid_types = [\n                    'button',\n                    'checkbox',\n                    'color',\n                    'date ',\n                    'datetime ',\n                    'datetime-local ',\n                    'email ',\n                    'file',\n                    'hidden',\n                    'image',\n                    'month ',\n                    'number ',\n                    'password',\n                    'radio',\n                    'range ',\n                    'reset',\n                    'search',\n                    'submit',\n                    'tel',\n                    'text',\n                    'time ',\n                    'url',\n                    'week'\n                ];\n                if(valid_types.indexOf(scope.ngType) !== -1) {\n                    element[0].type = scope.ngType;\n                }\n                else {\n                    throw new Error(\"Invalid input type: \" + scope.ngType);\n                }\n\n            });\n        }\n    };\n});","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Version reloader.\n *\n * Watches the version reported by the GeneralManager if it changes then\n * the entire page is reloaded by-passing the local browser cache.\n */\n\n\nangular.module('MAAS').directive('maasVersionReloader', [\n    '$window', 'GeneralManager', 'ManagerHelperService', 'LogService',\n    function($window, GeneralManager, ManagerHelperService, LogService) {\n        return {\n            restrict: \"A\",\n            controller: function($scope) {\n                $scope.version = GeneralManager.getData(\"version\");\n\n                // Reload the page by-passing the browser cache.\n                $scope.reloadPage = function() {\n                    // Force cache reload by passing true.\n                    $window.location.reload(true);\n                };\n\n                ManagerHelperService.loadManager($scope, GeneralManager).then(\n                    function() {\n                        GeneralManager.enableAutoReload(true);\n                        LogService.info(\n                            'Version reloader: Monitoring MAAS \"' +\n                            $scope.site + '\"; version', $scope.version.text,\n                            \"via\", $window.location.href);\n                        $scope.$watch(\"version.text\",\n                            function(newValue, oldValue) {\n                                if(newValue !== oldValue) {\n                                    LogService.info(\n                                        \"MAAS version changed from '\" +\n                                        oldValue + \"' to '\" + newValue +\n                                        \"'; forcing reload.\");\n                                    $scope.reloadPage();\n                                }\n                            });\n                    });\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Window Width.\n *\n * Watches the window width and calculates what the inner width of the window.\n * Applying the attribute window-wdith on the parent element and calling\n * data-ng-if=\"width > 768\" you can use this to hide / show elements for mobile\n * development.\n *\n */\n\n\nangular.module('MAAS').directive('windowWidth', [\n    '$window',\n    function ($window) {\n        return {\n            restrict: 'A',\n            link: function($scope, element, attrs){\n                $scope.windowWidth = $window.innerWidth;\n                function onResize(){\n                    // uncomment for only fire when $window.innerWidth change\n                    if ($scope.windowWidth !== $window.innerWidth) {\n                        $scope.windowWidth = $window.innerWidth;\n                        $scope.$apply(function () {\n                            $scope.message = \"Timeout called!\";\n                        });\n                    }\n                }\n\n                function cleanUp() {\n                    angular.element($window).off('resize', onResize);\n                }\n\n                angular.element($window).on('resize', onResize);\n                $scope.$on('$destroy', cleanUp);\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS BootResource Manager\n *\n * Manager for the boot resources. This manager is unique from all the other\n * managers because it uses polling instead of having the region push the\n * information.\n *\n * Why is it polling?\n * The boot resource information is split between the region controller and\n * all rack controllers. The region controller does not cache any information\n * about a rack controllers images it contacts the rack as its source of truth.\n * This means that the client needs to use polling so the region controller\n * can ask each rack controller what is the status of your images.\n */\n\nangular.module('MAAS').factory(\n    'BootResourcesManager',\n    ['$q', '$timeout', 'RegionConnection', 'ErrorService',\n    function($q, $timeout, RegionConnection, ErrorService) {\n\n        // Constructor\n        function BootResourcesManager() {\n            // Set true once been loaded the first time.\n            this._loaded = false;\n\n            // Holds the data recieved from polling.\n            this._data = {};\n\n            // Set to true when polling has been enabled.\n            this._polling = false;\n\n            // The next promise for the polling interval.\n            this._nextPromise = null;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 500;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n        }\n\n        // Return the data.\n        BootResourcesManager.prototype.getData = function() {\n            return this._data;\n        };\n\n        // Return true when data has been loaded.\n        BootResourcesManager.prototype.isLoaded = function() {\n            return this._loaded;\n        };\n\n        // Returns true when currently polling.\n        BootResourcesManager.prototype.isPolling = function() {\n            return this._polling;\n        };\n\n        // Starts the polling for data.\n        BootResourcesManager.prototype.startPolling = function() {\n            if(!this._polling) {\n                this._polling = true;\n                return this._poll();\n            } else {\n                return this._nextPromise;\n            }\n        };\n\n        // Stops the polling for data.\n        BootResourcesManager.prototype.stopPolling = function() {\n            this._polling = false;\n            if(angular.isObject(this._nextPromise)) {\n                $timeout.cancel(this._nextPromise);\n                this._nextPromise = null;\n            }\n        };\n\n        // Load the data from the region.\n        BootResourcesManager.prototype._loadData = function(raiseError) {\n            raiseError = raiseError || false;\n            var self = this;\n            return RegionConnection.callMethod(\"bootresource.poll\").then(\n                function(newData) {\n                    angular.copy(angular.fromJson(newData), self._data);\n                    self._loaded = true;\n                    return self._data;\n                }, function(error) {\n                    if(raiseError) {\n                        ErrorService.raiseError(error);\n                    }\n                });\n        };\n\n        // Registers the next polling attempt.\n        BootResourcesManager.prototype._pollAgain = function(timeout) {\n            var self = this;\n            this._nextPromise = $timeout(function() {\n                self._poll();\n            }, timeout);\n            return this._nextPromise;\n        };\n\n        // Polls for the data from the region.\n        BootResourcesManager.prototype._poll = function() {\n            var self = this;\n\n            // Can only poll if connected.\n            if(!RegionConnection.isConnected()) {\n                return this._pollAgain(this._pollErrorTimeout);\n            }\n\n            return this._loadData(false).then(function(newData) {\n                var pollTimeout = self._pollTimeout;\n                if(!angular.isObject(newData) ||\n                    newData.connection_error ||\n                    !angular.isArray(newData.resources) ||\n                    newData.resources.length === 0) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(pollTimeout);\n                return newData;\n            }, function(error) {\n                // Don't raise the error, just log it and try again.\n                console.log(error);\n                self._pollAgain(self._pollErrorTimeout);\n            });\n        };\n\n        // Loads the resources. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest.\n        BootResourcesManager.prototype.loadItems = function() {\n            var defer = $q.defer();\n            this._loadData(true).then(function() {\n                defer.resolve();\n            });\n            return defer.promise;\n        };\n\n        // Does nothing. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest.\n        BootResourcesManager.prototype.enableAutoReload = function() { };\n\n        // Stop the running image import process.\n        BootResourcesManager.prototype.stopImport = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.stop_import\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the ubuntu options and start the import process.\n        BootResourcesManager.prototype.saveUbuntu = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_ubuntu\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the Ubuntu Core images and start the import process.\n        BootResourcesManager.prototype.saveUbuntuCore = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_ubuntu_core\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the other images and start the import process.\n        BootResourcesManager.prototype.saveOther = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_other\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Fetch the releases and arches from the provided source.\n        BootResourcesManager.prototype.fetch = function(source) {\n            return RegionConnection.callMethod(\"bootresource.fetch\", source);\n        };\n\n        // Delete an image.\n        BootResourcesManager.prototype.deleteImage = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.delete_image\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        return new BootResourcesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Configs Manager\n *\n * Manages all of the config values in the browser. This manager is used for\n * the first-user journey and the settings page.\n */\n\n angular.module('MAAS').factory(\n     'ConfigsManager',\n     ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n             $q, $rootScope, RegionConnection, Manager) {\n\n         function ConfigsManager() {\n             Manager.call(this);\n\n             this._pk = \"name\";\n             this._handler = \"config\";\n\n             // Listen for notify events for the config object.\n             var self = this;\n             RegionConnection.registerNotifier(\"config\",\n                 function(action, data) {\n                     self.onNotify(action, data);\n                 });\n         }\n\n         ConfigsManager.prototype = new Manager();\n\n         return new ConfigsManager();\n     }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Controllers Manager\n *\n * Manages all of the controllers in the browser. This manager is used for the\n * controller listing and view pages. The manager is a subclass of\n * NodesManager.\n */\n\nangular.module('MAAS').factory(\n    'ControllersManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', 'ServicesManager',\n            function($q, $rootScope, RegionConnection, NodesManager,\n            ServicesManager) {\n\n        function ControllersManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"controller\";\n\n            // Listen for notify events for the controller object.\n            var self = this;\n            RegionConnection.registerNotifier(\"controller\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n        ControllersManager.prototype = new NodesManager();\n\n        ControllersManager.prototype.getServices = function(controller) {\n            var services = [];\n            angular.forEach(controller.service_ids, function(service_id) {\n                var service = ServicesManager.getItemFromList(service_id);\n                if(angular.isObject(service)) {\n                    services.push(service);\n                }\n            });\n            return services;\n        };\n\n        // Check the boot image import status.\n        ControllersManager.prototype.checkImageStates = function(controllers) {\n            return RegionConnection.callMethod(\n                this._handler + \".check_images\", controllers);\n        };\n\n        return new ControllersManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Devices Manager\n *\n * Manages all of the devices in the browser. This manager is used for the\n * device listing and the device view page. The manager uses the\n * RegionConnection to load the devices, update the devices, and listen for\n * notification events about devices.\n */\n\nangular.module('MAAS').factory(\n    'DevicesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function DevicesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"device\";\n            this._metadataAttributes = {\n                \"owner\": null,\n                \"subnets\": null,\n                \"tags\": null,\n                \"zone\": function(device) {\n                    return device.zone.name;\n                }\n            };\n\n            // Listen for notify events for the device object.\n            var self = this;\n            RegionConnection.registerNotifier(\"device\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        DevicesManager.prototype = new NodesManager();\n\n        // Create a device.\n        DevicesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the device to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"device.create\", node);\n        };\n\n        // Create an interface on device.\n        DevicesManager.prototype.createInterface = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"device.create_interface\", params).then(function(device) {\n                    self._replaceItem(device);\n                    return device;\n                });\n        };\n\n        // Perform the action on the device.\n        DevicesManager.prototype.performAction = function(\n            device, action, extra) {\n\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(\"device.action\", {\n                \"system_id\": device.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        return new DevicesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS DHCPSnippet Manager\n *\n * Manages all of the DHCPSnippets in the browser. The manager uses the\n * RegionConnection to load the DHCPSnippets, update the DHCPSnippets, and\n * listen for notification events about DHCPSnippets.\n */\n\nangular.module('MAAS').factory(\n    'DHCPSnippetsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function DHCPSnippetsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"dhcpsnippet\";\n\n            // Listen for notify events for the DHCPSnippet object.\n            var self = this;\n            RegionConnection.registerNotifier(\"dhcpsnippet\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        DHCPSnippetsManager.prototype = new Manager();\n\n        // Create the snippet.\n        DHCPSnippetsManager.prototype.create = function(snippet) {\n            return RegionConnection.callMethod(\n                this._handler + \".create\", snippet, true);\n        };\n\n        return new DHCPSnippetsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Discovery Manager\n *\n * A Discovery is a MAC, IP binding with an optional hostname that MAAS\n * believes it has discovered. It is associated with a particular fabric and\n * VLAN, and is aware of which rack or region interface most recently\n * discovered it.\n *\n * This class manages all of the discoveries in the browser. It uses the\n * RegionConnection to load the discoveries and listen for notification events\n * about discoveries.\n */\n\nangular.module('MAAS').factory(\n    'DiscoveriesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'PollingManager',\n    function($q, $rootScope, RegionConnection, PollingManager) {\n\n        function DiscoveriesManager() {\n            PollingManager.call(this);\n\n            this._pk = \"first_seen\";\n            this._batchKey = \"first_seen\";\n            this._handler = \"discovery\";\n\n            // Poll every 10 seconds when its empty as its okay for\n            // this to be empty.\n            this._pollEmptyTimeout = 5000;\n        }\n\n        DiscoveriesManager.prototype = new PollingManager();\n\n        return new DiscoveriesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domain Manager\n *\n * Manages all of the domains in the browser. The manager uses the\n * RegionConnection to load the domains, update the domains, and listen for\n * notification events about domains.\n */\n\nangular.module('MAAS').factory(\n    'DomainsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function DomainsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"domain\";\n\n            // Listen for notify events for the domain object.\n            var self = this;\n            RegionConnection.registerNotifier(\"domain\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        DomainsManager.prototype = new Manager();\n\n        // Create a domain.\n        DomainsManager.prototype.create = function(domain) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"domain.create\", domain);\n        };\n\n        // Delete the domain.\n        DomainsManager.prototype.deleteDomain = function(domain) {\n            return RegionConnection.callMethod(\"domain.delete\", domain);\n        };\n\n        // Create a DNS record.\n        DomainsManager.prototype.createDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.create_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.create_dnsdata\", record);\n            }\n        };\n\n        // Update a DNS record.\n        DomainsManager.prototype.updateDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.update_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.update_dnsdata\", record);\n            }\n        };\n\n        // Delete a DNS record.\n        DomainsManager.prototype.deleteDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.delete_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.delete_dnsdata\", record);\n            }\n        };\n\n        DomainsManager.prototype.getDefaultDomain = function() {\n            if(this._items.length === 0) {\n                return null;\n            } else {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].id === 0) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return this._items[0];\n        };\n\n        DomainsManager.prototype.getDomainByName = function(name) {\n            if(this._items.length > 0) {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].name === name) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return null;\n        };\n\n        return new DomainsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Event Manager Factory\n *\n * Manages all of the events for a node in the browser. The manager uses the\n * RegionConnection to load the events and listen for event notifications.\n */\n\nangular.module('MAAS').factory(\n    'EventsManagerFactory',\n    ['RegionConnection', 'Manager', 'ErrorService',\n    function(RegionConnection, Manager, ErrorService) {\n\n        function EventsManager(nodeId, factory) {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"event\";\n            this._nodeId = nodeId;\n            this._factory = factory;\n            this._maxDays = 1;\n        }\n\n        EventsManager.prototype = new Manager();\n\n        // Return the initial batch parameters with the id of the node\n        // and the maximum number of days to load.\n        EventsManager.prototype._initBatchLoadParameters = function() {\n            return {\n                \"node_id\": this._nodeId,\n                \"max_days\": this._maxDays\n            };\n        };\n\n        // Destroys its self. Removes self from the EventsManagerFactory.\n        EventsManager.prototype.destroy = function(){\n            this._factory.destroyManager(this);\n\n            // If this manager has ever loaded then the region is sending\n            // events about this node. Tell the RegionConnection not to\n            // stop sending notification for events from this node.\n            if(this.isLoaded()) {\n                RegionConnection.callMethod(\"event.clear\", {\n                    node_id: this._nodeId\n                });\n            }\n        };\n\n        // Get the maximum number of days the manager will load.\n        EventsManager.prototype.getMaximumDays = function() {\n            return this._maxDays;\n        };\n\n        // Changes the maximum number of days to load and loads the items.\n        EventsManager.prototype.loadMaximumDays = function(days) {\n            var self = this;\n            var setMaximumDays = function() {\n                self._maxDays = days;\n                self.loadItems();\n            };\n\n            if(this.isLoading()) {\n                // Call loadItems to get an extra defer to know when\n                // the loading is done.\n                this.loadItems().then(function() {\n                    setMaximumDays();\n                });\n            } else {\n                setMaximumDays();\n            }\n        };\n\n        // Factory that holds all created EventsManagers.\n        function EventsManagerFactory() {\n            // Holds a list of all EventsManager that have been created.\n            this._managers = [];\n\n            // Listen for notify events for the event object.\n            var self = this;\n            RegionConnection.registerNotifier(\"event\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        // Gets the EventManager for the nodes with node_id.\n        EventsManagerFactory.prototype._getManager = function(nodeId) {\n            var i;\n            for(i = 0; i < this._managers.length; i++) {\n                if(this._managers[i]._nodeId === nodeId) {\n                    return this._managers[i];\n                }\n            }\n            return null;\n        };\n\n        // Gets the EventManager for the nodes node_id. Creates a new manager\n        // if one does not exist.\n        EventsManagerFactory.prototype.getManager = function(nodeId) {\n            var manager = this._getManager(nodeId);\n            if(!angular.isObject(manager)) {\n                // Not created so create it.\n                manager = new EventsManager(nodeId, this);\n                this._managers.push(manager);\n                return manager;\n            }\n            return manager;\n        };\n\n        // Destroy the EventManager.\n        EventsManagerFactory.prototype.destroyManager = function(manager) {\n            var idx = this._managers.indexOf(manager);\n            if(idx >= 0) {\n                this._managers.splice(idx, 1);\n            }\n        };\n\n        // Called when the RegionConnection gets a notification for an event.\n        EventsManagerFactory.prototype.onNotify = function(action, data) {\n            if(action === \"delete\") {\n                // Send all delete actions to all managers. Only one will\n                // remove the event with the given id.\n                angular.forEach(this._managers, function(manager) {\n                    manager.onNotify(action, data);\n                });\n            } else if (action === \"create\" || action === \"update\") {\n                // Get the manager based on the node_id in data, and send\n                // it the notification.\n                var manager = this._getManager(data.node_id);\n                if(angular.isObject(manager)) {\n                    manager.onNotify(action, data);\n                }\n            }\n        };\n\n        return new EventsManagerFactory();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Fabric Manager\n *\n * Manages all of the fabrics in the browser. The manager uses the\n * RegionConnection to load the fabrics, update the fabrics, and listen for\n * notification events about fabrics.\n */\n\nangular.module('MAAS').factory(\n    'FabricsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'VLANsManager',\n    function(\n    $q, $rootScope, RegionConnection, Manager, VLANsManager) {\n\n        function FabricsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"fabric\";\n\n            // Listen for notify events for the fabric object.\n            var self = this;\n            RegionConnection.registerNotifier(\"fabric\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        FabricsManager.prototype = new Manager();\n\n        // Given a Fabric object, returns its display name.\n        FabricsManager.prototype.getName = function(fabric) {\n            if(!angular.isObject(fabric)) {\n                return;\n            }\n            if(angular.isString(fabric.name)) {\n                return fabric.name;\n            } else {\n                return this._handler + \"-\" + fabric[this._pk];\n            }\n        };\n\n        // Delete the Fabric.\n        FabricsManager.prototype.deleteFabric = function(fabric) {\n            return RegionConnection.callMethod(\n                \"fabric.delete\", { \"id\": fabric.id }, true);\n        };\n\n        // Create a Fabric.\n        FabricsManager.prototype.create = function(fabric) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"fabric.create\", fabric);\n        };\n\n\n        return new FabricsManager();\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS General Manager\n *\n * Manager for general information from the region. The general handler on the\n * region side does not push information to the client. This manager uses\n * polling to grab this data periodically from the region.\n *\n * This manage provides different pieces of data and is structure differently\n * than extending the Manager service. It still provides the Manager service\n * interface allowing the ManagerHelperService to load this manager.\n */\n\nangular.module('MAAS').factory(\n    'GeneralManager',\n    ['$q', '$timeout', 'RegionConnection', 'ErrorService',\n    function($q, $timeout, RegionConnection, ErrorService) {\n\n        // Constructor\n        function GeneralManager() {\n            // Holds the available endpoints and its data.\n            this._data = {\n                machine_actions: {\n                    method: \"general.machine_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                device_actions: {\n                    method: \"general.device_actions\",\n                    data: [],\n                    request: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                region_controller_actions: {\n                    method: \"general.region_controller_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                rack_controller_actions: {\n                    method: \"general.rack_controller_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                region_and_rack_controller_actions: {\n                    method: \"general.region_and_rack_controller_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                architectures: {\n                    method: \"general.architectures\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                known_architectures: {\n                    method: \"general.known_architectures\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                pockets_to_disable: {\n                    method: \"general.pockets_to_disable\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                components_to_disable: {\n                    method: \"general.components_to_disable\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                hwe_kernels: {\n                    method: \"general.hwe_kernels\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                min_hwe_kernels: {\n                    method: \"general.min_hwe_kernels\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                default_min_hwe_kernel: {\n                    method: \"general.default_min_hwe_kernel\",\n                    data: { text: '' },\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        oldData.text = newData;\n                    }\n                },\n                osinfo: {\n                    method: \"general.osinfo\",\n                    data: {},\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    isEmpty: function(data) {\n                        var osystems = data.osystems;\n                        return (angular.isUndefined(osystems) ||\n                            osystems.length === 0);\n                    },\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                },\n                bond_options: {\n                    method: \"general.bond_options\",\n                    data: {},\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                },\n                version: {\n                    method: \"general.version\",\n                    data: { text: null },\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        oldData.text = newData;\n                    }\n                },\n                power_types: {\n                    method: \"general.power_types\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        // Add new power types.\n                        var i, j, newPowerType, oldPowerType;\n                        for(i = 0; i < newData.length; i++) {\n                            newPowerType = newData[i];\n                            var newItem = true;\n                            for(j = 0; j < oldData.length; j++) {\n                                oldPowerType = oldData[j];\n                                if(newPowerType.name === oldPowerType.name) {\n                                    newItem = false;\n                                    break;\n                                }\n                            }\n\n                            // Item was previously not in the list so it is\n                            // inserted into the array.\n                            if(newItem) {\n                                oldData.push(newPowerType);\n                            }\n                        }\n\n                        // Remove any power types that are not included in\n                        // the newData.\n                        for(i = oldData.length - 1; i >= 0; i--) {\n                            oldPowerType = oldData[i];\n                            var found = false;\n                            for(j = 0; j < newData.length; j++) {\n                                newPowerType = newData[j];\n                                if(newPowerType.name === oldPowerType.name) {\n                                    found = true;\n                                    break;\n                                }\n                            }\n\n                            // Item was previously not in the list so it is\n                            // inserted into the array.\n                            if(!found) {\n                                oldData.splice(i, 1);\n                            }\n                        }\n                    }\n                },\n                release_options: {\n                    method: \"general.release_options\",\n                    data: {},\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                }\n            };\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 3000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n\n            // Set to true when the items list should reload upon re-connection\n            // to the region.\n            this._autoReload = false;\n\n            // Use the same notify type as a default manager.\n            this._type = 'notify';\n\n            // The scopes that have loaded this manager.\n            this._scopes = [];\n        }\n\n        GeneralManager.prototype._getInternalData = function(name) {\n            var data = this._data[name];\n            if(angular.isUndefined(data)) {\n                throw new Error(\"Unknown data: \" + name);\n            }\n            return data;\n        };\n\n        // Return loaded data.\n        GeneralManager.prototype.getData = function(name) {\n            var d = this._getInternalData(name);\n            d.requested = true;\n            return d.data;\n        };\n\n        // Return true when all data has been loaded.\n        GeneralManager.prototype.isLoaded = function() {\n            var loaded = true;\n            angular.forEach(this._data, function(data) {\n                if(!data.loaded) {\n                    loaded = false;\n                }\n            });\n            return loaded;\n        };\n\n        // Return true when data has been loaded.\n        GeneralManager.prototype.isDataLoaded = function(name) {\n            return this._getInternalData(name).loaded;\n        };\n\n        // Returns true when the manager is currently polling.\n        GeneralManager.prototype.isPolling = function() {\n            var polling = false;\n            angular.forEach(this._data, function(data) {\n                if(data.polling.length > 0) {\n                    polling = true;\n                }\n            });\n            return polling;\n        };\n\n        // Returns true when the manager is currently polling for that data.\n        GeneralManager.prototype.isDataPolling = function(name) {\n            return this._getInternalData(name).polling;\n        };\n\n        // Starts the manager polling for data.\n        GeneralManager.prototype.startPolling = function(scope, name) {\n            var data = this._getInternalData(name);\n            var idx = data.polling.indexOf(scope);\n            if(idx === -1) {\n                data.polling.push(scope);\n                if(data.polling.length === 1) {\n                    // Polling needs to be started. This is the first scope\n                    // that is requesting for polling to be performed.\n                    this._poll(data);\n                }\n            }\n        };\n\n        // Stops the manager polling for data.\n        GeneralManager.prototype.stopPolling = function(scope, name) {\n            var data = this._getInternalData(name);\n            var idx = data.polling.indexOf(scope);\n            if(idx >= 0) {\n                data.polling.splice(idx, 1);\n            }\n            if(data.polling.length === 0 &&\n                angular.isObject(data.nextPromise)) {\n                $timeout.cancel(data.nextPromise);\n                data.nextPromise = null;\n            }\n        };\n\n        // Load the data from the region.\n        GeneralManager.prototype._loadData = function(data, raiseError) {\n            var replaceData = data.replaceData;\n            raiseError = raiseError || false;\n\n            // Set default replaceData function if data doesn't provide its\n            // own function.\n            if(angular.isUndefined(replaceData)) {\n                replaceData = function(oldData, newData) {\n                    oldData.length = 0;\n                    oldData.push.apply(oldData, newData);\n                };\n            }\n\n            return RegionConnection.callMethod(data.method).then(\n                function(newData) {\n                    replaceData(data.data, newData);\n                    data.loaded = true;\n                    return data.data;\n                }, function(error) {\n                    if(raiseError) {\n                        ErrorService.raiseError(error);\n                    }\n                    return error;\n                });\n        };\n\n        GeneralManager.prototype._pollAgain = function(data, timeout) {\n            var self = this;\n            data.nextPromise = $timeout(function() {\n                self._poll(data);\n            }, timeout);\n        };\n\n        // Polls for the data from the region.\n        GeneralManager.prototype._poll = function(data) {\n            var self = this;\n            var isEmpty = data.isEmpty;\n\n            // Set default isEmpty function if data doesn't provide its\n            // own function.\n            if(angular.isUndefined(isEmpty)) {\n                isEmpty = function(data) {\n                    return data.length === 0;\n                };\n            }\n\n            // Can only poll if connected.\n            if(!RegionConnection.isConnected()) {\n                this._pollAgain(data, this._pollErrorTimeout);\n                return;\n            }\n\n            return this._loadData(data, false).then(function(newData) {\n                var pollTimeout = self._pollTimeout;\n                if(isEmpty(data.data)) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(data, pollTimeout);\n                return newData;\n            }, function(error) {\n                // Don't raise the error, just log it and try again.\n                console.log(error);\n                self._pollAgain(data, self._pollErrorTimeout);\n            });\n        };\n\n        // Loads all the items. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest. Optionally pass a\n        // list of specific items to load. Useful when reloading data.\n        GeneralManager.prototype.loadItems = function(items) {\n            var self = this;\n            var defer = $q.defer();\n            var waitingCount = 0;\n            if(angular.isArray(items)) {\n                waitingCount = items.length;\n            }else{\n                angular.forEach(this._data, function(data) {\n                    if(data.requested) {\n                        waitingCount++;\n                    }\n                });\n            }\n            var done = function() {\n                waitingCount -= 1;\n                if(waitingCount === 0) {\n                    defer.resolve();\n                }\n            };\n\n            angular.forEach(this._data, function(data, name) {\n                if((angular.isArray(items) && items.indexOf(name) !== -1) ||\n                        (!angular.isArray(items) && data.requested)) {\n                    self._loadData(data, true).then(function() {\n                        done();\n                    });\n                }\n            });\n\n            return defer.promise;\n        };\n\n        // Enables auto reloading of the item list on connection to region.\n        GeneralManager.prototype.enableAutoReload = function() {\n            if(!this._autoReload) {\n                this._autoReload = true;\n                var self = this;\n                this._reloadFunc = function() {\n                    self.loadItems();\n                };\n                RegionConnection.registerHandler(\"open\", this._reloadFunc);\n            }\n        };\n\n        // Disable auto reloading of the item list on connection to region.\n        GeneralManager.prototype.disableAutoReload = function() {\n            if(this._autoReload) {\n                RegionConnection.unregisterHandler(\"open\", this._reloadFunc);\n                this._reloadFunc = null;\n                this._autoReload = false;\n            }\n        };\n\n        return new GeneralManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS IPRange Manager\n *\n * Manages all of the IPRanges in the browser. The manager uses the\n * RegionConnection to load the IPRanges, update the IPRanges, and listen for\n * notification events about IPRanges.\n */\n\nangular.module('MAAS').factory(\n    'IPRangesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function IPRangesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"iprange\";\n\n            // Listen for notify events for the iprange object.\n            var self = this;\n            RegionConnection.registerNotifier(\"iprange\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        IPRangesManager.prototype = new Manager();\n\n        return new IPRangesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Machines Manager\n *\n * Manages all of the machines in the browser. This manager is used for the\n * machine listing and view pages. The manager is a subclass of NodesManager.\n */\n\nangular.module('MAAS').factory(\n    'MachinesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function MachinesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"machine\";\n\n            this._metadataAttributes = {\n                \"architecture\": null,\n                \"status\": null,\n                \"owner\": null,\n                \"tags\": null,\n                \"pod\": function(machine) {\n                    return (machine.pod === undefined) ? '' :machine.pod.name;\n                },\n                \"pool\": function(machine) {\n                    return machine.pool.name;\n                },\n                \"zone\": function(machine) {\n                    return machine.zone.name;\n                },\n                \"subnets\": null,\n                \"fabrics\": null,\n                \"spaces\": null,\n                \"storage_tags\": null,\n                \"release\": function(machine) {\n                    if(machine.status_code === 6 || machine.status_code === 9) {\n                        return machine.osystem + \"/\" + machine.distro_series;\n                    } else {\n                        return '';\n                    }\n                }\n            };\n\n            // Listen for notify events for the machine object.\n            var self = this;\n            RegionConnection.registerNotifier(\"machine\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n\n        }\n        MachinesManager.prototype = new NodesManager();\n\n        MachinesManager.prototype.mountSpecialFilesystem =\n            function(machine, fstype, mount_point, mount_options) {\n                var method = this._handler + \".mount_special\";\n                var params = {\n                    system_id: machine.system_id,\n                    fstype: fstype,\n                    mount_point: mount_point,\n                    mount_options: mount_options\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        MachinesManager.prototype.unmountSpecialFilesystem =\n            function(machine, mount_point) {\n                var method = this._handler + \".unmount_special\";\n                var params = {\n                    system_id: machine.system_id,\n                    mount_point: mount_point\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        return new MachinesManager();\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS NodeResultsManager Manager\n *\n * Manages all of the NodeResults in the browser. The manager uses the\n * RegionConnection to load the NodeResults, and listen for\n * notification events about NodeResults.\n */\n\nangular.module('MAAS').factory(\n    'NodeResultsManagerFactory', ['RegionConnection', 'Manager',\n    function(RegionConnection, Manager) {\n\n        function NodeResultsManager(node, factory) {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"noderesult\";\n            this._node = node;\n            this._factory = factory;\n\n            // Store as an array to preserve order.\n            this.commissioning_results = [\n                {\n                    title: null,\n                    hardware_type: 0,\n                    results: {}\n                },\n                {\n                    title: \"CPU\",\n                    hardware_type: 1,\n                    results: {}\n                },\n                {\n                    title: \"Memory\",\n                    hardware_type: 2,\n                    results: {}\n                },\n                {\n                    title: \"Storage\",\n                    hardware_type: 3,\n                    results: {}\n                }\n            ];\n            this.testing_results = [\n                {\n                    title: \"CPU\",\n                    hardware_type: 1,\n                    results: {}\n                },\n                {\n                    title: \"Memory\",\n                    hardware_type: 2,\n                    results: {}\n                },\n                {\n                    title: \"Storage\",\n                    hardware_type: 3,\n                    results: {}\n                },\n                {\n                    title: \"Other Results\",\n                    hardware_type: 0,\n                    results: {}\n                }\n            ];\n            this.installation_results = [];\n\n            // Listen for notify events for the ScriptResult object.\n            // This is noderesult instead of scriptresult because the\n            // class name is NodeResultHandler.\n            var self = this;\n            RegionConnection.registerNotifier(\"noderesult\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        NodeResultsManager.prototype = new Manager();\n\n        NodeResultsManager.prototype._getStorageSubtext = function(disk) {\n            var deviceinfo = '';\n            if(disk.model !== '') {\n                deviceinfo += \"Model: \" + disk.model;\n            }\n            if(disk.serial !== '') {\n                if(deviceinfo !== '') {\n                    deviceinfo += ', ';\n                }\n                deviceinfo += \"Serial: \" + disk.serial;\n            }\n            if(deviceinfo !== '') {\n                return '/dev/' + disk.name + ' (' + deviceinfo + ')';\n            }else{\n                return '/dev/' + disk.name;\n            }\n        };\n\n        NodeResultsManager.prototype._updateObject = function(\n            existing, updated) {\n            angular.forEach(updated, function(value, key) {\n                if(existing[key] !== value && key !== 'showing_results' &&\n                   key !== 'showing_history' && key !== 'showing_menu' &&\n                   key !== '$selected') {\n                    existing[key] = value;\n                }\n            });\n        };\n\n        NodeResultsManager.prototype._addOrReplace = function(results, result) {\n            var i;\n            for(i = 0; i < results.length; i++) {\n                if(results[i].name === result.name) {\n                    // Object already exists, update fields.\n                    result.$selected = results[i].$selected;\n                    result.showing_results = results[i].showing_results;\n                    result.showing_history = results[i].showing_history;\n                    result.showing_menu = results[i].showing_menu;\n                    angular.copy(result, results[i]);\n                    return;\n                }\n            }\n            // No result with the same name exists, add it to the sorted list.\n            for(i = 0; i < results.length; i++) {\n                if(results[i].name > result.name) {\n                    results.splice(i, 0, result);\n                    return;\n                }\n            }\n            results.push(result);\n        };\n\n        NodeResultsManager.prototype._processItem = function(result) {\n            var results;\n            result.showing_results = false;\n            result.showing_history = false;\n            result.showing_menu = false;\n            result.result_section = \"scripts\";\n\n            if(result.result_type === 0) {\n                results = this.commissioning_results;\n            } else if(result.result_type === 1) {\n                // Installation results are not split into hardware types or\n                // have subtext labels.\n                this._addOrReplace(this.installation_results, result);\n                return;\n            } else {\n                // Store all remaining result types as test results in case\n                // another result type is ever added.\n                results = this.testing_results;\n                result.result_section = \"tests\";\n            }\n            var i;\n            // Fallback to storing results in other results incase a new type\n            // is added\n            var hardware_type_results = results[3];\n            for(i = 0; i < results.length; i++) {\n                if(results[i].hardware_type === result.hardware_type) {\n                    hardware_type_results = results[i].results;\n                    break;\n                }\n            }\n\n            if(result.hardware_type === 3 &&\n               result.physical_blockdevice !== null) {\n                // Storage results are split into individual components.\n                var disk, subtext;\n                // If the storage result is associated with a specific\n                // component generate subtext for that component.\n                for(i = 0; i < this._node.disks.length; i++) {\n                    disk = this._node.disks[i];\n                    if(disk.id === result.physical_blockdevice) {\n                        subtext = this._getStorageSubtext(disk);\n                        if(!angular.isArray(\n                            hardware_type_results[subtext])) {\n                                hardware_type_results[subtext] = [];\n                        }\n                        this._addOrReplace(\n                            hardware_type_results[subtext], result);\n                        break;\n                    }\n                }\n            } else {\n                // Other hardware types are not split into individual\n                // components.\n                if(!angular.isArray(hardware_type_results[null])) {\n                    hardware_type_results[null] = [];\n                }\n                this._addOrReplace(hardware_type_results[null], result);\n            }\n        };\n\n        NodeResultsManager.prototype._removeItem = function(result) {\n            var idx = this._getIndexOfItem(this._items, result.id);\n            if(idx >= 0) {\n                this._updateMetadata(this._items[idx], \"delete\");\n            }\n            this._removeItemByIdFromArray(this._items, result.id);\n            this._removeItemByIdFromArray(this._selectedItems, result.id);\n\n            var self = this;\n            angular.forEach(this.commissioning_results, function(hw_type) {\n                angular.forEach(hw_type.results, function(results, subtext) {\n                    self._removeItemByIdFromArray(results, result.id);\n                    if(results.length === 0)\n                    {\n                        delete hw_type.results[subtext];\n                    }\n                });\n            });\n            angular.forEach(this.testing_results, function(hw_type) {\n                angular.forEach(hw_type.results, function(results, subtext) {\n                    self._removeItemByIdFromArray(results, result.id);\n                    if(results.length === 0)\n                    {\n                        delete hw_type.results[subtext];\n                    }\n                });\n            });\n            this._removeItemByIdFromArray(this.installation_results, result.id);\n        };\n\n        // Return the list of ScriptResults for the given node when retrieving\n        // the initial list.\n        NodeResultsManager.prototype._initBatchLoadParameters = function() {\n            var ret = {\n                \"system_id\": this._node.system_id\n            };\n            // Limit the results returned to what can be viewed.\n            if(this._area === \"summary\") {\n                ret.has_surfaced = true;\n                ret.result_type = 2;\n            }else if(this._area === \"testing\") {\n                ret.result_type = 2;\n            }else if(this._area === \"commissioning\") {\n                ret.result_type = 0;\n            }else if(this._area === \"logs\") {\n                ret.result_type = 1;\n            }\n            return ret;\n        };\n\n        // Destroys itself. Removes self from the NodeResultsManagerFactory.\n        NodeResultsManager.prototype.destroy = function() {\n            this._factory.destroyManager(this);\n\n            // If this manager has ever loaded then the region is sending\n            // results from this node. Tell the RegionConnection to stop.\n            if(this.isLoaded()) {\n                var method = this._handler + \".clear\";\n                RegionConnection.callMethod(method, {\n                    system_id: this._node.system_id\n                });\n            }\n        };\n\n        // Get result data.\n        NodeResultsManager.prototype.get_result_data = function(\n            script_id, data_type) {\n            var method = this._handler + \".get_result_data\";\n            var params = {\n                id: script_id,\n                data_type: data_type\n            };\n            return RegionConnection.callMethod(method, params);\n        };\n\n        // Get historic data.\n        NodeResultsManager.prototype.get_history = function(script_id) {\n            var method = this._handler + \".get_history\";\n            var params = {\n                id: script_id,\n            };\n            return RegionConnection.callMethod(method, params);\n        };\n\n        // Factory that holds all created NodeResultsManagers.\n        function NodeResultsManagerFactory() {\n            // Holds a list of all NodeResultsManagers that have been created.\n            this._managers = [];\n        }\n\n        // Gets the NodeResultsManager for the nodes with node_system_id.\n        NodeResultsManagerFactory.prototype._getManager = function(node) {\n            var i;\n            for(i = 0; i < this._managers.length; i++) {\n                if(this._managers[i]._node.system_id === node.system_id) {\n                    return this._managers[i];\n                }\n            }\n            return null;\n        };\n\n        // Gets the NodeResultsManager for the nodes system_id. Creates a new\n        // manager if one does not exist.\n        NodeResultsManagerFactory.prototype.getManager = function(\n            node, area) {\n            var manager = this._getManager(node);\n            if(!angular.isObject(manager)) {\n                // Not created so create it.\n                manager = new NodeResultsManager(node, this);\n                this._managers.push(manager);\n            }\n            manager._area = area;\n            if(area === \"commissioning\") {\n                manager.results = manager.commissioning_results;\n            }else if(area === \"logs\") {\n                manager.results = manager.installation_results;\n            }else{\n                manager.results = manager.testing_results;\n            }\n            return manager;\n        };\n\n        // Destroy the NodeResultsManager.\n        NodeResultsManagerFactory.prototype.destroyManager = function(manager) {\n            var idx = this._managers.indexOf(manager);\n            if(idx >= 0) {\n                this._managers.splice(idx, 1);\n            }\n        };\n\n        return new NodeResultsManagerFactory();\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Manager\n *\n * Manages all of the nodes in the browser. This manager is used for the\n * machine and controller listing and view pages (as machines and controllers\n * are both Nodes).  The manager uses the RegionConnection to load the nodes,\n * update the nodes, and listen for notification events about nodes.\n */\n\nangular.module('MAAS').service(\n    'NodesManager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, $timeout, RegionConnection, Manager) {\n\n        function NodesManager() {\n            Manager.call(this);\n        }\n\n        NodesManager.prototype = new Manager();\n\n        // Create a node.\n        NodesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the node to the list. Adding it here will cause angular\n            // to complain because the same object exist in the list.\n            return RegionConnection.callMethod(\n                this._handler + \".create\", node);\n        };\n\n        // Perform the action on the node.\n        NodesManager.prototype.performAction = function(\n            node, action, extra) {\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(this._handler + \".action\", {\n                \"system_id\": node.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        // Check the power state for the node.\n        NodesManager.prototype.checkPowerState = function(node) {\n            return RegionConnection.callMethod(this._handler + \".check_power\", {\n                \"system_id\": node.system_id\n                }).then(function(state) {\n                    node.power_state = state;\n                    return state;\n                }, function(error) {\n                    node.power_state = \"error\";\n\n                    // Already been logged server side, but log it client\n                    // side so if they really care they can see why.\n                    console.log(error);\n\n                    // Return the state as error to the remaining callbacks.\n                    return \"error\";\n                });\n        };\n\n        // Create the physical interface on the node.\n        NodesManager.prototype.createPhysicalInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_physical\", params);\n            };\n\n        // Create the VLAN interface on the node.\n        NodesManager.prototype.createVLANInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_vlan\", params);\n            };\n\n        // Create the bond interface on the node.\n        NodesManager.prototype.createBondInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bond\", params);\n            };\n\n        // Create the bridge interface on the node.\n        NodesManager.prototype.createBridgeInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bridge\", params);\n            };\n\n        // Update the interface for the node.\n        NodesManager.prototype.updateInterface = function(\n            node, interface_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.interface_id = interface_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".update_interface\", params);\n            };\n\n        // Update an interface from a maas-obj-form.\n        NodesManager.prototype.updateInterfaceForm = function(\n            params) {\n                return RegionConnection.callMethod(\n                    this._handler + \".update_interface\", params);\n            };\n\n        // Delete the interface for the node.\n        NodesManager.prototype.deleteInterface = function(\n            node, interface_id) {\n                var params = {\n                    system_id: node.system_id,\n                    interface_id: interface_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".delete_interface\", params);\n            };\n\n        // Create or update the link to the subnet for the interface.\n        NodesManager.prototype.linkSubnet = function(\n            node, interface_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.interface_id = interface_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".link_subnet\", params);\n            };\n\n        // Remove the link to the subnet for the interface.\n        NodesManager.prototype.unlinkSubnet = function(\n            node, interface_id, link_id) {\n                var params = {\n                    system_id: node.system_id,\n                    interface_id: interface_id,\n                    link_id: link_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".unlink_subnet\", params);\n            };\n\n        // Send the update information to the region.\n        NodesManager.prototype.updateFilesystem = function(\n            node, block_id, partition_id, fstype, mount_point, mount_options,\n            tags) {\n                var self = this;\n                var method = this._handler + \".update_filesystem\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id,\n                    partition_id: partition_id,\n                    fstype: fstype,\n                    mount_point: mount_point,\n                    mount_options: mount_options,\n                    tags: tags\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the disk.\n        NodesManager.prototype.deleteDisk = function(\n            node, block_id) {\n                var self = this;\n                var method = this._handler + \".delete_disk\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the partition.\n        NodesManager.prototype.deletePartition = function(\n            node, partition_id) {\n                var self = this;\n                var method = this._handler + \".delete_partition\";\n                var params = {\n                    system_id: node.system_id,\n                    partition_id: partition_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the disk or partition.\n        NodesManager.prototype.deleteVolumeGroup = function(\n            node, volume_group_id) {\n                var self = this;\n                var method = this._handler + \".delete_volume_group\";\n                var params = {\n                    system_id: node.system_id,\n                    volume_group_id: volume_group_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete a cache set.\n        NodesManager.prototype.deleteCacheSet = function(\n            node, cache_set_id) {\n                var self = this;\n                var method = this._handler + \".delete_cache_set\";\n                var params = {\n                    system_id: node.system_id,\n                    cache_set_id: cache_set_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete a filesystem.\n        NodesManager.prototype.deleteFilesystem = function(\n            node, blockdevice_id, partition_id, filesystem_id) {\n                var self = this;\n                var method = this._handler + \".delete_filesystem\";\n                var params = {\n                    system_id: node.system_id,\n                    blockdevice_id: blockdevice_id,\n                    partition_id: partition_id,\n                    filesystem_id: filesystem_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new partition.\n        NodesManager.prototype.createPartition = function(\n            node, block_id, size, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                var self = this;\n                var method = this._handler + \".create_partition\";\n                params.system_id = node.system_id;\n                params.block_id = block_id;\n                params.partition_size = size;\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new cache set.\n        NodesManager.prototype.createCacheSet = function(\n            node, block_id, partition_id) {\n                var self = this;\n                var method = this._handler + \".create_cache_set\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id,\n                    partition_id: partition_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new bcache device.\n        NodesManager.prototype.createBcache = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bcache\", params);\n            };\n\n        // Create a new RAID device.\n        NodesManager.prototype.createRAID = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_raid\", params);\n            };\n\n        // Create a new volume group.\n        NodesManager.prototype.createVolumeGroup = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_volume_group\", params);\n            };\n\n        // Create a new logical volume.\n        NodesManager.prototype.createLogicalVolume = function(\n            node, volume_group_id, name, size, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                var self = this;\n                var method = this._handler + \".create_logical_volume\";\n                params.system_id = node.system_id;\n                params.volume_group_id = volume_group_id;\n                params.name = name;\n                params.size = size;\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Update a disk.\n        NodesManager.prototype.updateDisk = function(\n            node, block_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.block_id = block_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".update_disk\", params);\n            };\n\n        // Set disk as the boot disk.\n        NodesManager.prototype.setBootDisk = function(\n            node, block_id) {\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".set_boot_disk\", params);\n            };\n\n        NodesManager.prototype.getSummaryXML = function(node) {\n            return RegionConnection.callMethod(\n                this._handler + \".get_summary_xml\",\n                {\"system_id\": node.system_id});\n        };\n\n        NodesManager.prototype.getSummaryYAML = function(node) {\n            return RegionConnection.callMethod(\n                this._handler + \".get_summary_yaml\",\n                {\"system_id\": node.system_id});\n        };\n\n        return NodesManager;\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Notifications Manager.\n *\n * Manages notifications in the browser. Uses RegionConnection to load\n * notifications, await new, updated, and deleted notifications, and to\n * dismiss them.\n */\n\nangular.module('MAAS').factory(\n    'NotificationsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n     function($q, $rootScope, RegionConnection, Manager) {\n\n        function NotificationsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"notification\";\n\n            // Listen for notify events for the notification object.\n            RegionConnection.registerNotifier(\n                \"notification\", angular.bind(this, this.onNotify));\n        }\n\n        NotificationsManager.prototype = new Manager();\n        NotificationsManager.prototype.dismiss = function(notification) {\n            return RegionConnection.callMethod(\n                \"notification.dismiss\", {id: notification.id});\n        };\n\n        return new NotificationsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS PackageRepositories Manager\n *\n * Manages all of the PackageRepositories in the browser. The manager uses the\n * RegionConnection to load the PackageRepositories, update them, and listen\n * for notification events about them.\n */\n\nangular.module('MAAS').factory(\n    'PackageRepositoriesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function PackageRepositoriesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"packagerepository\";\n\n            // Listen for notify events for the PackageRepository object.\n            var self = this;\n            RegionConnection.registerNotifier(\"packagerepository\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        PackageRepositoriesManager.prototype = new Manager();\n\n        // Create the repository.\n        PackageRepositoriesManager.prototype.create = function(repository) {\n            return RegionConnection.callMethod(\n                this._handler + \".create\", repository, true);\n        };\n\n        return new PackageRepositoriesManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pods Manager\n *\n * Manages all of the pods in the browser. The manager uses the\n * RegionConnection to load the pods, update the pods, and listen for\n * notification events about pods.\n */\n\nangular.module('MAAS').service(\n    'PodsManager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, $timeout, RegionConnection, Manager) {\n\n        function PodsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"pod\";\n\n            // Listen for notify events for the pod object.\n            var self = this;\n            RegionConnection.registerNotifier(\"pod\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        PodsManager.prototype = new Manager();\n\n        // Refresh the pod information\n        PodsManager.prototype.refresh = function(pod) {\n            var self = this;\n            return RegionConnection.callMethod(\"pod.refresh\", pod).then(\n                function(pod) {\n                    self._replaceItem(pod);\n                    return pod;\n                });\n        };\n\n        // Compose a machine in the pod.\n        PodsManager.prototype.compose = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\"pod.compose\", params).then(\n                function(pod) {\n                    self._replaceItem(pod);\n                    return pod;\n                });\n        };\n\n        return new PodsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Region Connection\n *\n * Provides the websocket connection between the client and the MAAS regiond\n * service.\n */\n\nangular.module('MAAS').factory(\n    'RegionConnection',\n    ['$q', '$rootScope', '$timeout', '$window', '$cookies', function(\n        $q, $rootScope, $timeout, $window, $cookies) {\n\n        // Message types\n        var MSG_TYPE = {\n            REQUEST: 0,\n            RESPONSE: 1,\n            NOTIFY: 2\n        };\n\n        // Response types\n        var RESPONSE_TYPE = {\n            SUCCESS: 0,\n            ERROR: 1\n        };\n\n        // Constructor\n        function RegionConnection() {\n            this.callbacks = {};\n            this.requests = {};\n            this.requestId = 0;\n            this.url = null;\n            this.websocket = null;\n            this.connected = false;\n            this.autoReconnect = true;\n            this.retryTimeout = 5000;\n            this.error = null;\n\n            // Defer used for defaultConnect. If defaultConnect is called\n            // quickly only the first one will start the connection. The\n            // remaining will recieve this defer.\n            this.defaultConnectDefer = null;\n\n            // List of functions to call when a WebSocket event occurs. Each\n            // function will get the WebSocket event passed to it.\n            this.handlers = {\n                open: [],\n                error: [],\n                close: []\n            };\n\n            // Object containing a fields with list of functions. When\n            // a NOTIFY message is received it will match the name to a field\n            // in this object. If the field exists in the object the list\n            // of functions will be called with the action and obj_id.\n            this.notifiers = {};\n        }\n\n        // Return a new request id.\n        RegionConnection.prototype.newRequestId = function() {\n            this.requestId += 1;\n            return this.requestId;\n        };\n\n        // Register event handler.\n        RegionConnection.prototype.registerHandler = function (name, func) {\n            if(!angular.isDefined(this.handlers[name])) {\n                throw new Error(\"Invalid handler: \" + name);\n            }\n            if(!angular.isFunction(func)) {\n                throw new Error(\"Requires a function to register a handler.\");\n            }\n            this.handlers[name].push(func);\n        };\n\n        // Unregister event handler.\n        RegionConnection.prototype.unregisterHandler = function (name, func) {\n            if(!angular.isDefined(this.handlers[name])) {\n                throw new Error(\"Invalid handler: \" + name);\n            }\n            var idx = this.handlers[name].indexOf(func);\n            if(idx >= 0) {\n                this.handlers[name].splice(idx, 1);\n            }\n        };\n\n        // Register notification handler.\n        RegionConnection.prototype.registerNotifier = function(name, func) {\n            if(!angular.isFunction(func)) {\n                throw new Error(\"Requires a function to register a notifier.\");\n            }\n            if(angular.isUndefined(this.notifiers[name])) {\n                this.notifiers[name] = [];\n            }\n            this.notifiers[name].push(func);\n        };\n\n        // Unregister notification handler.\n        RegionConnection.prototype.unregisterNotifier = function(name, func) {\n            if(angular.isUndefined(this.notifiers[name])) {\n                return;\n            }\n            var idx = this.notifiers[name].indexOf(func);\n            if(idx >= 0) {\n                this.notifiers[name].splice(idx, 1);\n            }\n        };\n\n        // Return True if currently connected to region.\n        RegionConnection.prototype.isConnected = function() {\n            return this.connected;\n        };\n\n        // Builds the websocket connection.\n        RegionConnection.prototype.buildSocket = function(url) {\n            return new WebSocket(url);\n        };\n\n        // Opens the websocket connection.\n        RegionConnection.prototype.connect = function() {\n            this.url = this._buildUrl();\n            this.autoReconnect = true;\n            this.websocket = this.buildSocket(this.url);\n\n            var self = this;\n            this.websocket.onopen = function(evt) {\n                self.connected = true;\n                angular.forEach(self.handlers.open, function(func) {\n                    func(evt);\n                });\n            };\n            this.websocket.onerror = function(evt) {\n                angular.forEach(self.handlers.error, function(func) {\n                    func(evt);\n                });\n            };\n            this.websocket.onclose = function(evt) {\n                self.connected = false;\n                self.error = \"Unable to connect to: \" + self.url.split(\"?\")[0];\n                angular.forEach(self.handlers.close, function(func) {\n                    func(evt);\n                });\n                if(self.autoReconnect) {\n                    $timeout(function() {\n                        self.connect();\n                    }, self.retryTimeout);\n                }\n            };\n            this.websocket.onmessage = function(evt) {\n                self.onMessage(angular.fromJson(evt.data));\n            };\n        };\n\n        // Closes the websocket connection.\n        RegionConnection.prototype.close = function() {\n            this.autoReconnect = false;\n            this.websocket.close();\n            this.websocket = null;\n        };\n\n        // Return the protocol used for the websocket connection.\n        RegionConnection.prototype._getProtocol = function() {\n            return $window.location.protocol;\n        };\n\n        // Return connection url to websocket from current location and\n        // html options.\n        RegionConnection.prototype._buildUrl = function() {\n            var host = $window.location.hostname;\n            var port = $window.location.port;\n            var path = $window.location.pathname;\n            var proto = 'ws';\n            if (this._getProtocol() === 'https:') {\n                proto = 'wss';\n            }\n\n            // Path and port can be overridden by href and data-websocket-port\n            // in the base element respectively.\n            var base = angular.element(\"base\");\n            if(angular.isDefined(base)) {\n                var newPath = base.attr(\"href\");\n                if(angular.isDefined(newPath)) {\n                    path = newPath;\n                }\n                var newPort = base.data(\"websocket-port\");\n                if(angular.isDefined(newPort)) {\n                    port = newPort;\n                }\n            }\n\n            // Append final '/' if missing from end of path.\n            if(path[path.length - 1] !== '/') {\n                path += '/';\n            }\n\n            // Build the URL. Include the :port only if it has a value.\n            url = proto + \"://\" + host;\n            if(angular.isString(port) && port.length > 0){\n                url += \":\" + port;\n            }\n            url += path + \"ws\";\n\n            // Include the csrftoken in the URL if it's defined.\n            var csrftoken;\n            if(angular.isFunction($cookies.get)) {\n                csrftoken = $cookies.get('csrftoken');\n            } else {\n                csrftoken = $cookies.csrftoken;\n            }\n            if(angular.isDefined(csrftoken)) {\n                url += '?csrftoken=' + encodeURIComponent(csrftoken);\n            }\n\n            return url;\n        };\n\n        // Opens the default websocket connection.\n        RegionConnection.prototype.defaultConnect = function() {\n            // Already been called but the connection has not been completed.\n            if(angular.isObject(this.defaultConnectDefer)) {\n                return this.defaultConnectDefer.promise;\n            }\n\n            // Already connected.\n            var defer;\n            if(this.isConnected()) {\n                // Create a new defer as the defaultConnectDefer would\n                // have already been resolved.\n                defer = $q.defer();\n\n                // Cannot resolve the defer inline as it hasn't been given\n                // back to the caller. It will be called in the next loop.\n                $timeout(defer.resolve);\n                return defer.promise;\n            }\n\n            // Start the connection.\n            var self = this, opened, errored;\n            defer = this.defaultConnectDefer = $q.defer();\n            opened = function(evt) {\n                this.defaultConnectDefer = null;\n                self.unregisterHandler(\"open\", opened);\n                self.unregisterHandler(\"error\", errored);\n                $rootScope.$apply(defer.resolve(evt));\n            };\n            errored = function(evt) {\n                this.defaultConnectDefer = null;\n                self.unregisterHandler(\"open\", opened);\n                self.unregisterHandler(\"error\", errored);\n                $rootScope.$apply(defer.reject(evt));\n            };\n            this.registerHandler(\"open\", opened);\n            this.registerHandler(\"error\", errored);\n            this.connect();\n            return defer.promise;\n        };\n\n        // Called when a message is received.\n        RegionConnection.prototype.onMessage = function(msg) {\n            // Response\n            if(msg.type === MSG_TYPE.RESPONSE) {\n                this.onResponse(msg);\n            // Notify\n            } else if(msg.type === MSG_TYPE.NOTIFY) {\n                this.onNotify(msg);\n            }\n        };\n\n        // Called when a response message is recieved.\n        RegionConnection.prototype.onResponse = function(msg) {\n            // Grab the registered defer from the callbacks list.\n            var defer = this.callbacks[msg.request_id];\n            var remembered_request = this.requests[msg.request_id];\n            if(angular.isDefined(defer)) {\n                if(msg.rtype === RESPONSE_TYPE.SUCCESS) {\n                    // Resolve the defer inside of the digest cycle, so any\n                    // update to an object or collection will trigger a\n                    // watcher.\n                    $rootScope.$apply(defer.resolve(msg.result));\n                } else if(msg.rtype === RESPONSE_TYPE.ERROR) {\n                    // Reject the defer since an error occurred.\n                    if(angular.isObject(remembered_request)) {\n                        $rootScope.$apply(defer.reject({\n                            \"error\": msg.error,\n                            \"request\": remembered_request\n                        }));\n                    } else {\n                        $rootScope.$apply(defer.reject(msg.error));\n                    }\n                }\n                // Remove the defer from the callback list.\n                delete this.callbacks[msg.request_id];\n                delete this.requests[msg.request_id];\n            }\n        };\n\n        // Called when a notify response is recieved.\n        RegionConnection.prototype.onNotify = function(msg) {\n            var handlers = this.notifiers[msg.name];\n            if(angular.isArray(handlers)) {\n                angular.forEach(handlers, function(handler) {\n                    handler(msg.action, msg.data);\n                });\n            }\n        };\n\n        // Call method on the region.\n        RegionConnection.prototype.callMethod = function(\n                method, params, remember) {\n            var defer = $q.defer();\n            var request_id = this.newRequestId();\n            var request = {\n                type: MSG_TYPE.REQUEST,\n                request_id: request_id,\n                method: method,\n                params: params\n            };\n            this.callbacks[request_id] = defer;\n            // If requested, remember what the details of the request were,\n            // so that the controller can refresh its memory.\n            if (remember) {\n                this.requests[request_id] = request;\n            }\n            this.websocket.send(angular.toJson(request));\n            return defer.promise;\n        };\n\n        return new RegionConnection();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Resource Pool Manager\n *\n * Manages all of the resource pools in the browser.\n */\n\nangular.module('MAAS').factory(\n    'ResourcePoolsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n        $q, $rootScope, RegionConnection, Manager) {\n\n        function ResourcePoolsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"resourcepool\";\n\n            // Listen for notify events for the resource pool object.\n            var self = this;\n            RegionConnection.registerNotifier(\n                \"resourcepool\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ResourcePoolsManager.prototype = new Manager();\n\n        return new ResourcePoolsManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS ScriptsManager Manager\n *\n * Manages all of the Scripts in the browser. The manager uses the\n * RegionConnection to load the Scripts, and listen for notification\n * events about Scripts.\n */\n\nangular.module('MAAS').factory(\n    'ScriptsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function ScriptsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"script\";\n\n            // Listen for notify events for the Script object.\n            var self = this;\n            RegionConnection.registerNotifier(\"script\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ScriptsManager.prototype = new Manager();\n\n        return new ScriptsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Service Manager\n *\n * Manages all of the services for a node in the browser. The manager uses the\n * RegionConnection to load the services and listen for service notifications.\n */\n\nangular.module('MAAS').factory(\n    'ServicesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function ServicesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"service\";\n\n            // Listen for notify events for the service object.\n            var self = this;\n            RegionConnection.registerNotifier(\"service\",\n                function(action, data) {\n                    self.onNotify(action, data);\n            });\n        }\n\n        ServicesManager.prototype = new Manager();\n\n        return new ServicesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Manager\n *\n * Manages all of the spaces in the browser. The manager uses the\n * RegionConnection to load the spaces, update the spaces, and listen for\n * notification events about spaces.\n */\n\nangular.module('MAAS').factory(\n    'SpacesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'SubnetsManager',\n    function($q, $rootScope, RegionConnection, Manager, SubnetsManager) {\n\n        function SpacesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"space\";\n\n            // Listen for notify events for the space object.\n            var self = this;\n            RegionConnection.registerNotifier(\"space\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SpacesManager.prototype = new Manager();\n\n        // Create a space.\n        SpacesManager.prototype.create = function(space) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"space.create\", space);\n        };\n\n\n        // Delete the space.\n        SpacesManager.prototype.deleteSpace = function(space) {\n            return RegionConnection.callMethod(\"space.delete\", space);\n        };\n\n        return new SpacesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS SSHKey Manager\n *\n * Manages all of the SSHKeys in the browser. The manager uses the\n * RegionConnection to load the SSHKeys, update the SSHKeys, and\n * listen for notification events about SSHKeys.\n */\n\nangular.module('MAAS').factory(\n    'SSHKeysManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function SSHKeysManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"sshkey\";\n\n            // Listen for notify events for the sshkey object.\n            var self = this;\n            RegionConnection.registerNotifier(\"sshkey\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SSHKeysManager.prototype = new Manager();\n\n        // Imports SSH keys from a launchpad and github.\n        SSHKeysManager.prototype.importKeys = function(params) {\n            // We don't add the results to the list because a NOTIFY event will\n            // add the ssh key to the list. Adding it here will cause angular\n            // to complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"sshkey.import_keys\", params);\n        };\n\n        return new SSHKeysManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS StaticRoute Manager\n *\n * Manages all of the StaticRoutes in the browser. The manager uses the\n * RegionConnection to load the StaticRoutes, update the StaticRoutes, and\n * listen for notification events about StaticRoutes.\n */\n\nangular.module('MAAS').factory(\n    'StaticRoutesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function StaticRoutesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"staticroute\";\n\n            // Listen for notify events for the staticroute object.\n            var self = this;\n            RegionConnection.registerNotifier(\"staticroute\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        StaticRoutesManager.prototype = new Manager();\n\n        return new StaticRoutesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Subnet Manager\n *\n * Manages all of the subnets in the browser. The manager uses the\n * RegionConnection to load the subnets, update the subnets, and listen for\n * notification events about subnets.\n */\n\nangular.module('MAAS').factory(\n    'SubnetsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function SubnetsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"subnet\";\n\n            // Listen for notify events for the subnet object.\n            var self = this;\n            RegionConnection.registerNotifier(\"subnet\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SubnetsManager.prototype = new Manager();\n\n        // Return the name of the subnet. Will include the name of the subnet\n        // in '(', ')' if it exists and not the same as the cidr.\n        SubnetsManager.prototype.getName = function(subnet) {\n            if(!angular.isObject(subnet)) {\n                return \"\";\n            }\n\n            var name = subnet.cidr;\n            if(angular.isString(subnet.name) &&\n                subnet.name !== \"\" &&\n                subnet.name !== subnet.cidr) {\n                name += \" (\" + subnet.name + \")\";\n            }\n            return name;\n        };\n\n        SubnetsManager.prototype.getLargestRange = function(subnet) {\n            var largest_range = {num_addresses: 0, start: \"\", end: \"\"};\n            angular.forEach(subnet.statistics.ranges, function(iprange) {\n                if(angular.equals(iprange.purpose, [\"unused\"]) &&\n                        iprange.num_addresses > largest_range.num_addresses) {\n                    largest_range = iprange;\n                }\n            });\n            return largest_range;\n        };\n\n        SubnetsManager.prototype.hasDynamicRange = function(subnet) {\n            var i;\n            for(i = 0; i < subnet.statistics.ranges.length ; i++) {\n                var iprange = subnet.statistics.ranges[i];\n                if(iprange.purpose.indexOf(\"dynamic\") !== -1) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Create a subnet.\n        SubnetsManager.prototype.create = function(subnet) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"subnet.create\", subnet);\n        };\n\n        // Delete the subnet.\n        SubnetsManager.prototype.deleteSubnet = function(subnet) {\n            return RegionConnection.callMethod(\"subnet.delete\", {\n                \"id\": subnet.id\n            });\n        };\n\n        // Perform a neighbour discovery scan on the subnet.\n        SubnetsManager.prototype.scanSubnet = function(subnet) {\n            return RegionConnection.callMethod(\"subnet.scan\", {\n                \"id\": subnet.id\n            });\n        };\n\n        return new SubnetsManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Switches Manager\n *\n * Manages all of the switches in the browser. This manager is used for the\n * switches listing and the switches view page. The manager uses the\n * RegionConnection to load the switches, update the switches, and listen for\n * notification events about switches.\n */\n\nangular.module('MAAS').factory(\n    'SwitchesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function SwitchesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"switch\";\n            this._metadataAttributes = {\n                \"owner\": null,\n                \"subnets\": null,\n                \"tags\": null,\n                \"zone\": function(device) {\n                    return device.zone.name;\n                }\n            };\n\n            // Listen for notify events for the switch object.\n            var self = this;\n            RegionConnection.registerNotifier(\"switch\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        SwitchesManager.prototype = new NodesManager();\n\n        // Create a switch.\n        SwitchesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the device to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"switch.create\", node);\n        };\n\n        // Perform the action on the switch.\n        SwitchesManager.prototype.performAction = function(\n            device, action, extra) {\n\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(\"switch.action\", {\n                \"system_id\": device.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        return new SwitchesManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Tag Manager\n *\n * Manages all of the tags in the browser. The manager uses the\n * RegionConnection to load the tags, update the tags, and listen for\n * notification events about tags.\n */\n\nangular.module('MAAS').factory(\n    'TagsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function TagsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"tag\";\n\n            // Listen for notify events for the tag object.\n            var self = this;\n            RegionConnection.registerNotifier(\"tag\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        TagsManager.prototype = new Manager();\n\n        // Helper for autocomplete that will return a string of tags that\n        // contain the query text.\n        TagsManager.prototype.autocomplete = function(query) {\n            var matching = [];\n            angular.forEach(this._items, function(item) {\n                if(item.name.indexOf(query) > -1) {\n                    matching.push(item.name);\n                }\n            });\n            return matching;\n        };\n\n        return new TagsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS User Manager\n *\n * Manages all of the users in the browser. The manager uses the\n * RegionConnection to load the users, update the users, and listen for\n * notification events about users.\n */\n\nangular.module('MAAS').factory(\n    'UsersManager',\n    ['RegionConnection', 'Manager', 'ErrorService',\n    function(RegionConnection, Manager, ErrorService) {\n\n        function UsersManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"user\";\n\n            // Holds the authenticated user for the connection.\n            this._authUser = null;\n\n            // Listen for notify events for the user object.\n            var self = this;\n            RegionConnection.registerNotifier(\"user\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        UsersManager.prototype = new Manager();\n\n        // Get the authenticated user for the connection.\n        UsersManager.prototype.getAuthUser = function() {\n            return this._authUser;\n        };\n\n        // Return true if the authenticated user is super user.\n        UsersManager.prototype.isSuperUser = function() {\n            var authUser = this.getAuthUser();\n            if(!angular.isObject(authUser)) {\n                return false;\n            }\n            return authUser.is_superuser;\n        };\n\n        // Return true if the authenticated user has uploaded at\n        // least one SSH key.\n        UsersManager.prototype.getSSHKeyCount = function() {\n            authuser = this._authUser;\n            if(!angular.isObject(authuser)) {\n                return 0;\n            }\n            return authuser.sshkeys_count;\n        };\n\n        // Load the authenticated user.\n        UsersManager.prototype._loadAuthUser = function() {\n            var self = this;\n            return RegionConnection.callMethod(\"user.auth_user\", {}).then(\n                function(user) {\n                    if(angular.isObject(self._authUser)) {\n                        // Copy the user into the authUser. This keeps the\n                        // reference the same, not requiring another call to\n                        // getAuthUser.\n                        angular.copy(user, self._authUser);\n                    } else {\n                        self._authUser = user;\n                    }\n                    return self._authUser;\n                }, function(error) {\n                    ErrorService.raiseError(error);\n                });\n        };\n\n        UsersManager.prototype._replaceItem = function(item) {\n            Manager.prototype._replaceItem.call(this, item);\n\n            // Update the authenticated user if updated item has the\n            // same primary key.\n            if(angular.isObject(this._authUser) &&\n                this._authUser[this._pk] === item[this._pk]) {\n                // Copy the item into the authUser. This keeps the reference\n                // the same, not requiring another call to getAuthUser.\n                angular.copy(item, this._authUser);\n            }\n        };\n\n        UsersManager.prototype.loadItems = function() {\n            // Load the auth user when all the items are loaded as well.\n            this._loadAuthUser();\n            return Manager.prototype.loadItems.call(this);\n        };\n\n        UsersManager.prototype.reloadItems = function() {\n            // Load the auth user when all the items are reloaded as well.\n            this._loadAuthUser();\n            return Manager.prototype.reloadItems.call(this);\n        };\n\n        // Mark the user as completed the intro.\n        UsersManager.prototype.markIntroComplete = function() {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"user.mark_intro_complete\", {}).then(\n                    function(user) {\n                        if(angular.isObject(self._authUser)) {\n                            // Copy the user into the authUser. This keeps the\n                            // reference the same, not requiring another call\n                            // to getAuthUser.\n                            angular.copy(user, self._authUser);\n                        } else {\n                            self._authUser = user;\n                        }\n                        return self._authUser;\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n        };\n\n        // Create a new authorisation token for the current user.\n        UsersManager.prototype.createAuthorisationToken = function() {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"user.create_authorisation_token\", {}).catch(function(error) {\n                    ErrorService.raiseError(error);\n                });\n        };\n\n        // Delete the authorisation token for the current user.\n        UsersManager.prototype.deleteAuthorisationToken = function(key) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"user.delete_authorisation_token\", {\n                    key: key\n                }).catch(function(error) {\n                    ErrorService.raiseError(error);\n                });\n        };\n\n        return new UsersManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS VLAN Manager\n *\n * Manages all of the VLANs in the browser. The manager uses the\n * RegionConnection to load the VLANs, update the VLANs, and listen for\n * notification events about VLANs.\n */\n\nangular.module('MAAS').factory(\n    'VLANsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'SubnetsManager',\n    function($q, $rootScope, RegionConnection, Manager, SubnetsManager) {\n\n        function VLANsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"vlan\";\n\n            // Listen for notify events for the vlan object.\n            var self = this;\n            RegionConnection.registerNotifier(\"vlan\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        VLANsManager.prototype = new Manager();\n\n        VLANsManager.prototype.getName = function(vlan) {\n            var name = vlan.vid;\n            if(vlan.vid === 0) {\n                name = \"untagged\";\n            } else if(angular.isString(vlan.name) && vlan.name !== \"\") {\n                name += \" (\" + vlan.name + \")\";\n            }\n            return name;\n        };\n\n        // Delete the VLAN.\n        VLANsManager.prototype.deleteVLAN = function(vlan) {\n            return RegionConnection.callMethod(\n                \"vlan.delete\", { \"id\": vlan.id }, true);\n        };\n\n        // This is needed for testing: in the normal course of things,\n        // rack_sids is generated entirely by the websocket handler.\n        VLANsManager.prototype.addRackController = function(vlan, rack) {\n            vlan.rack_sids.push(rack.system_id);\n        };\n\n        // Configure DHCP on the VLAN\n        VLANsManager.prototype.configureDHCP = function(\n           vlan, controllers, extra, relay_vlan) {\n           var params = {\n               \"id\": vlan.id,\n               \"controllers\": controllers,\n               \"extra\": extra\n           };\n           if(relay_vlan === null || angular.isNumber(relay_vlan)) {\n              params.relay_vlan = relay_vlan;\n           }\n           return RegionConnection.callMethod(\n                \"vlan.configure_dhcp\", params, true);\n        };\n\n        // Disable DHCP on the VLAN\n        VLANsManager.prototype.disableDHCP = function(vlan) {\n            return RegionConnection.callMethod(\n                \"vlan.configure_dhcp\", {\n                    \"id\": vlan.id,\n                    \"controllers\": [],\n                    \"relay_vlan\": null\n                }, true);\n        };\n\n        // Create a VLAN.\n        VLANsManager.prototype.create = function(vlan) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"vlan.create\", vlan);\n        };\n\n        return new VLANsManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zone Manager\n *\n * Manages all of the zones in the browser. The manager uses the\n * RegionConnection to load the zones, update the zones, and listen for\n * notification events about zones.\n */\n\nangular.module('MAAS').factory(\n    'ZonesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function ZonesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"zone\";\n\n            // Listen for notify events for the zone object.\n            var self = this;\n            RegionConnection.registerNotifier(\"zone\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ZonesManager.prototype = new Manager();\n\n        // Return the default zone.\n        ZonesManager.prototype.getDefaultZone = function() {\n            if(this._items.length === 0) {\n                return null;\n            } else {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].id === 0) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return this._items[0];\n        };\n\n        return new ZonesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter VLANs by Fabric.\n */\n\nangular.module('MAAS').filter('filterByFabric', function() {\n    return function(vlans, fabric) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(fabric)) {\n            id = fabric.id;\n        } else if(angular.isNumber(fabric)) {\n            id = fabric;\n        } else {\n            return filtered;\n        }\n        angular.forEach(vlans, function(vlan) {\n            if(vlan.fabric === id) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by Space.\n */\n\nangular.module('MAAS').filter('filterBySpace', function() {\n    return function(objects, space) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(space)) {\n            id = space.id;\n        } else if(angular.isNumber(space)) {\n            id = space;\n        } else {\n            return filtered;\n        }\n        angular.forEach(objects, function(object) {\n            if(object.space === id) {\n                filtered.push(object);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').filter('filterByNullSpace', function() {\n    return function(objects) {\n        var filtered = [];\n        angular.forEach(objects, function(object) {\n            if(object.space === null) {\n                filtered.push(object);\n            }\n        });\n        return filtered;\n    };\n});","/* Copyright 2016-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Filter objects with subnet foreign key references by a particular subnet.\n */\n\nangular.module('MAAS').filter('filterBySubnet', function() {\n    return function(foreign_objects, subnet, key) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(subnet)) {\n            id = subnet.id;\n        } else if(angular.isNumber(subnet)) {\n            id = subnet;\n        } else {\n            return filtered;\n        }\n        if(angular.isUndefined(key)) {\n            key = 'subnet';\n        }\n        angular.forEach(foreign_objects, function(obj) {\n            if(obj[key] === id) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n\n// Filters by subnet, unless the subnet is not defined. If the subnet is not\n// defined, filters by VLAN.\nangular.module('MAAS').filter('filterBySubnetOrVlan', function() {\n    return function(foreign_objects, subnet, vlan) {\n        var filtered = [];\n        var id;\n        var key = null;\n        if(angular.isDefined(subnet) && subnet !== null) {\n            key = 'subnet';\n            if(angular.isObject(subnet)) {\n                id = subnet.id;\n            } else if(angular.isNumber(subnet)) {\n                id = subnet;\n            }\n        } else if(angular.isDefined(vlan) && vlan !== null) {\n            key = 'vlan';\n            if(angular.isObject(vlan)) {\n                id = vlan.id;\n            } else if(angular.isNumber(vlan)) {\n                id = vlan;\n            }\n        } else {\n            return filtered;\n        }\n        angular.forEach(foreign_objects, function(obj) {\n            if(obj[key] === id) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by VLAN.\n */\n\nangular.module('MAAS').filter('filterByVLAN', function() {\n    return function(subnets, vlan) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(vlan)) {\n            id = vlan.id;\n        } else if(angular.isNumber(vlan)) {\n            id = vlan;\n        } else {\n            return filtered;\n        }\n        angular.forEach(subnets, function(subnet) {\n            if(subnet.vlan === id) {\n                filtered.push(subnet);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').filter('filterControllersByVLAN', function() {\n    return function(controllers, vlan) {\n        var filtered = [];\n        if(!angular.isObject(vlan)) {\n            return filtered;\n        }\n        angular.forEach(controllers, function(controller) {\n            // XXX mpontillo disable VLAN check until VLAN is populated\n            // on the rack controller's interfaces.\n            // if(controller.vlan_ids.indexOf(vlan.id) != -1) {\n\n            // XXX mpontillo 2016-02-22 this is a hack to prevent too many\n            // nodes from being sent through the filter; we have a bug which\n            // sends nodes in which are not controllers.\n            if(controller.node_type === 2 || controller.node_type === 4) {\n                filtered.push(controller);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Filter\n */\n\nangular.module('MAAS').filter('nodesFilter', ['$filter', 'SearchService',\n    function($filter, SearchService) {\n\n        // Default filter built-in angular. Used on all extra filters that do\n        // not specify a specific type.\n        var standardFilter = $filter('filter');\n\n        // Helpers that convert the pseudo field on node to an actual\n        // value from the node.\n        var mappings = {\n            cpu: function(node) {\n                return node.cpu_count;\n            },\n            cores: function(node) {\n                return node.cpu_count;\n            },\n            ram: function(node) {\n                return node.memory;\n            },\n            mac: function(node) {\n                macs = [];\n                macs.push(node.pxe_mac);\n                macs.push.apply(macs, node.extra_macs);\n                return macs;\n            },\n            zone: function(node) {\n                return node.zone.name;\n            },\n            pool: function(node) {\n                return node.pool.name;\n            },\n            pod: function(node) {\n                return (node.pod === undefined) ? undefined : node.pod.name;\n            },\n            'pod-id': function(node) {\n                return (node.pod === undefined) ? undefined : node.pod.id;\n            },\n            power: function(node) {\n                return node.power_state;\n            },\n            release: function(node) {\n                if(node.status_code === 6 || node.status_code === 9) {\n                    return node.osystem + \"/\" + node.distro_series;\n                } else {\n                    return '';\n                }\n            }\n        };\n\n        // Return true when value is an integer.\n        function isInteger(value) {\n            // +1 done to silence js-lint.\n            return value % +1 === 0;\n        }\n\n        // Return true when lowercase value contains the already\n        // lowercased lowerTerm.\n        function _matches(value, lowerTerm, exact) {\n            if(angular.isNumber(value)) {\n                if(exact) {\n                    if(isInteger(value)) {\n                        return value === parseInt(lowerTerm, 10);\n                    } else {\n                        return value === parseFloat(lowerTerm);\n                    }\n                } else {\n                    if(isInteger(value)) {\n                        return value >= parseInt(lowerTerm, 10);\n                    } else {\n                        return value >= parseFloat(lowerTerm);\n                    }\n                }\n            } else if(angular.isString(value)) {\n                if(exact) {\n                    return value.toLowerCase() === lowerTerm;\n                } else {\n                    return value.toLowerCase().indexOf(lowerTerm) >= 0;\n                }\n            } else {\n                return value === lowerTerm;\n            }\n        }\n\n        // Return true if value matches lowerTerm, unless negate is true then\n        // return false if matches.\n        function matches(value, lowerTerm, exact, negate) {\n            var match = _matches(value, lowerTerm, exact);\n            if(negate) {\n                return !match;\n            }\n            return match;\n        }\n\n        return function(nodes, search) {\n            if(angular.isUndefined(nodes) ||\n                angular.isUndefined(search) ||\n                nodes.length === 0) {\n                return nodes;\n            }\n\n            var filtered = nodes;\n            var filters = SearchService.getCurrentFilters(search);\n            angular.forEach(filters, function(terms, attr) {\n                if(attr === '_') {\n                    // Use the standard filter on terms that do not specify\n                    // an attribute.\n                    angular.forEach(terms, function(term) {\n                        filtered = standardFilter(filtered, term);\n                    });\n                } else if(attr === 'in') {\n                    // \"in:\" is used to filter the nodes by those that are\n                    // currently selected.\n                    angular.forEach(terms, function(term) {\n                        var matched = [];\n                        angular.forEach(filtered, function(node) {\n                            if(node.$selected &&\n                                term.toLowerCase() === \"selected\") {\n                                matched.push(node);\n                            } else if(!node.$selected &&\n                                term.toLowerCase() === \"!selected\") {\n                                matched.push(node);\n                            }\n                        });\n                        filtered = matched;\n                    });\n                } else {\n                    // Mapping function for the attribute.\n                    var mapFunc = mappings[attr];\n\n                    // Loop through each item and only select the matching.\n                    var matched = [];\n                    angular.forEach(filtered, function(node) {\n                        var value;\n                        if(angular.isFunction(mapFunc)) {\n                            value = mapFunc(node);\n                        } else if(node.hasOwnProperty(attr)) {\n                            value = node[attr];\n                        }\n\n                        // Unable to get value for this node. So skip it.\n                        if(angular.isUndefined(value)) {\n                            return;\n                        }\n\n                        var i, j;\n                        for(i = 0; i < terms.length; i++) {\n                            var term = terms[i].toLowerCase();\n                            var exact = false, negate = false;\n\n                            // '!' at the beginning means the term is negated.\n                            while(term.indexOf('!') === 0) {\n                                negate = !negate;\n                                term = term.substring(1);\n                            }\n\n                            // '=' at the beginning means to match exactly.\n                            if(term.indexOf('=') === 0) {\n                                exact = true;\n                                term = term.substring(1);\n                            }\n\n                            // Allow '!' after the '=' as well.\n                            while(term.indexOf('!') === 0) {\n                                negate = !negate;\n                                term = term.substring(1);\n                            }\n\n                            if(angular.isArray(value)) {\n                                // If value is an array check if the\n                                // term matches any value in the\n                                // array. If negated, check whether no\n                                // value in the array matches.\n                                if(negate) {\n                                    // Push to matched only if no value in\n                                    // the array matches term.\n                                    var no_match = true;\n                                    for(j = 0; j < value.length; j++) {\n                                        if(matches(\n                                            value[j], term, exact, false)) {\n                                            no_match = false;\n                                            break; // Skip remaining tests.\n                                        }\n                                    }\n                                    if(no_match) {\n                                        matched.push(node);\n                                        return;\n                                    }\n                                } else {\n                                    for(j = 0; j < value.length; j++) {\n                                        if(matches(\n                                            value[j], term, exact, false)) {\n                                            matched.push(node);\n                                            return;\n                                        }\n                                    }\n                                }\n                            } else {\n                                // Standard value check that it matches the\n                                // term.\n                                if(matches(value, term, exact, negate)) {\n                                    matched.push(node);\n                                    return;\n                                }\n                            }\n                        }\n                    });\n                    filtered = matched;\n                }\n            });\n            return filtered;\n        };\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by VLAN.\n */\n\nangular.module('MAAS').filter('orderByDate', function() {\n    return function(items, field, field2) {\n        var sorted = items.slice();\n        sorted.sort(function(a, b) {\n            aDate = new Date(a[field]);\n            bDate = new Date(b[field]);\n\n            // Sort by ID as well if equal.\n            if(angular.isString(field2) &&\n                aDate.getTime() === bDate.getTime()) {\n                return (\n                    a[field2] > b[field2] ? -1 : a[field2] < b[field2] ? 1 : 0);\n            } else {\n              return aDate > bDate ? -1 : aDate < bDate ? 1 : 0;\n            }\n        });\n        return sorted;\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter to remove the default VLAN as an option.\n */\n\nangular.module('MAAS').filter('removeDefaultVLAN', function() {\n    return function(vlans) {\n        var filtered = [];\n        angular.forEach(vlans, function(vlan) {\n            if(vlan.vid !== 0) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Module\n *\n * Initializes the MAAS module with its required dependencies and sets up\n * the interpolater to use '{$' and '$}' instead of '{{' and '}}' as this\n * conflicts with Django templates.\n */\n\nangular.module('MAAS',\n    ['ngRoute', 'ngCookies', 'ngSanitize', 'ngTagsInput', 'vs-repeat']).config(\n    function($interpolateProvider, $routeProvider, $httpProvider) {\n        $interpolateProvider.startSymbol('{$');\n        $interpolateProvider.endSymbol('$}');\n\n        // Set the $httpProvider to send the csrftoken in the header of any\n        // http request.\n        $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n        $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n        // Helper that wrappers the templateUrl to append the files version\n        // to the path. Used to override client cache.\n        function versionedPath(path) {\n            return path + \"?v=\" + MAAS_config.files_version;\n        }\n\n        // Setup routes only for the index page, all remaining pages should\n        // not use routes. Once all pages are converted to using Angular this\n        // will go away. Causing the page to never have to reload.\n        var href = angular.element(\"base\").attr('href');\n        var path = document.location.pathname;\n        if(path[path.length - 1] !== '/') {\n            path += '/';\n        }\n        if(path === href) {\n            var routes = $routeProvider.\n                when('/intro', {\n                    templateUrl: versionedPath(\n                        'static/partials/intro.html'),\n                    controller: 'IntroController'\n                }).\n                when('/intro/user', {\n                    templateUrl: versionedPath(\n                        'static/partials/intro-user.html'),\n                    controller: 'IntroUserController'\n                }).\n                when('/machines', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/machine/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/machine/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/machine/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/devices', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/device/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/device/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/device/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/controllers', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/controller/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/controller/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/controller/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/nodes', {\n                    redirectTo: '/machines'\n                }).\n                when('/node/machine/:system_id', {\n                    redirectTo: '/machine/:system_id'\n                }).\n                when('/node/machine/:system_id/:result_type/:id', {\n                    redirectTo: '/machine/:system_id/:result_type/:id'\n                }).\n                when('/node/machine/:system_id/events', {\n                    redirectTo: '/machine/:system_id/events'\n                }).\n                when('/node/device/:system_id', {\n                    redirectTo: '/device/:system_id'\n                }).\n                when('/node/device/:system_id/:result_type/:id', {\n                    redirectTo: '/device/:system_id/:result_type/:id'\n                }).\n                when('/node/device/:system_id/events', {\n                    redirectTo: '/device/:system_id/events'\n                }).\n                when('/node/controller/:system_id', {\n                    redirectTo: '/controller/:system_id'\n                }).\n                when('/node/controller/:system_id/:result_type/:id', {\n                    redirectTo: '/controller/:system_id/:result_type/:id'\n                }).\n                when('/node/controller/:system_id/events', {\n                    redirectTo: '/controller/:system_id/events'\n                }).\n                when('/pods', {\n                    templateUrl: versionedPath(\n                        'static/partials/pods-list.html'),\n                    controller: 'PodsListController'\n                }).\n                when('/pod/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/pod-details.html'),\n                    controller: 'PodDetailsController'\n                }).\n                when('/images', {\n                    templateUrl: versionedPath(\n                        'static/partials/images.html'),\n                    controller: 'ImagesController'\n                }).\n                when('/domains', {\n                    templateUrl: versionedPath(\n                        'static/partials/domains-list.html'),\n                    controller: 'DomainsListController'\n                }).\n                when('/domain/:domain_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/domain-details.html'),\n                    controller: 'DomainDetailsController'\n                }).\n                when('/space/:space_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/space-details.html'),\n                    controller: 'SpaceDetailsController'\n                }).\n                when('/fabric/:fabric_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/fabric-details.html'),\n                    controller: 'FabricDetailsController'\n                }).\n                when('/subnets', {\n                    redirectTo: '/networks?by=fabric'\n                }).\n                when('/networks', {\n                    templateUrl: versionedPath(\n                        'static/partials/networks-list.html'),\n                    controller: 'NetworksListController',\n                    reloadOnSearch: false\n                }).\n                when('/subnet/:subnet_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/subnet-details.html'),\n                    controller: 'SubnetDetailsController'\n                }).\n                when('/vlan/:vlan_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/vlan-details.html'),\n                    controller: 'VLANDetailsController',\n                    controllerAs: 'vlanDetails'\n                }).\n                when('/settings/:section', {\n                    templateUrl: versionedPath(\n                        'static/partials/settings.html'),\n                    controller: 'SettingsController'\n                }).\n                when('/zone/:zone_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/zone-details.html'),\n                    controller: 'ZoneDetailsController'\n                }).\n                when('/zones', {\n                    templateUrl: versionedPath(\n                        'static/partials/zones-list.html'),\n                    controller: 'ZonesListController',\n                    reloadOnSearch: false\n                }).\n                when('/pools', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                });\n            if(MAAS_config.superuser) {\n                // Only superuser's can access the dashboard at the moment.\n                routes = routes.when('/dashboard', {\n                    templateUrl: versionedPath(\n                        'static/partials/dashboard.html'),\n                    controller: 'DashboardController'\n                });\n            }\n            routes = routes.otherwise({\n                redirectTo: '/machines'\n            });\n        }\n    });\n\n// Force users to #/intro when it has not been completed.\nangular.module('MAAS').run(['$rootScope', '$location',\n    function ($rootScope, $location) {\n        $rootScope.$on('$routeChangeStart', function(event, next, current) {\n            if(!MAAS_config.completed_intro) {\n                if(next.controller !== 'IntroController') {\n                    $location.path('/intro');\n                }\n            } else if (!MAAS_config.user_completed_intro) {\n                if(next.controller !== 'IntroUserController') {\n                    $location.path('/intro/user');\n                }\n            }\n        });\n    }]);\n\n// Send pageview to Google Anayltics when the route has changed.\nangular.module('MAAS').run(['$rootScope',\n    function ($rootScope) {\n        window.ga = window.ga || function() {\n            (window.ga.q = window.ga.q || []).push(arguments);\n        };\n        window.ga.l = +new Date();\n        window.ga('create', 'UA-1018242-63', 'auto', {\n          userId: MAAS_config.analytics_user_id\n        });\n        window.ga('set', 'dimension1', MAAS_config.version);\n        window.ga('set', 'dimension2', MAAS_config.uuid);\n        $rootScope.$on('$routeChangeSuccess', function() {\n            var path = window.location.pathname + window.location.hash;\n            window.ga('send', 'pageview', path);\n        });\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Browser Service\n *\n * Detects the browser used by the client. This is very simple case, because\n * at the moment we really only care about if the browser is Firefox. This\n * could be improved for other browsers, but this should only be used as a\n * last resort to prevent something bad happening on a misbehaving browser.\n */\n\nangular.module('MAAS').service('BrowserService', ['$window',\n    function($window) {\n\n        // The first items in the array will be matched first. So if the user\n        // agent for the browser contains both you need to make the more\n        // specific one first. E.g. Chrome contains both \"Chrome\" and \"Safari\"\n        // in its user-agent string. Since \"Safari\" does not chrome comes first\n        // so it matches that browser more specifically.\n        var BROWSERS = [\n            {\n                name: \"chrome\",\n                regex: /chrome/i\n            },\n            {\n                name: \"safari\",\n                regex: /safari/i\n            },\n            {\n                name: \"firefox\",\n                regex: /firefox/i\n            },\n            {\n                name: \"ie\",\n                regex: /MSIE/\n            }\n        ];\n\n        this.browser = \"other\";\n\n        // Set the browser if a regex matches. The first to match wins.\n        var self = this;\n        angular.forEach(BROWSERS, function(matcher) {\n            if(matcher.regex.test($window.navigator.userAgent) &&\n                self.browser === \"other\") {\n                self.browser = matcher.name;\n            }\n        });\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Converter Service\n *\n * Used by controllers to convert user inputs.\n */\n\nangular.module('MAAS').service('ConverterService', function() {\n\n        // Case is important: 1kB is 1000 bytes, whereas 1KB is 1024 bytes.\n        // See https://en.wikipedia.org/wiki/Byte#Unit_symbol\n        var UNITS = ['bytes', 'kB', 'MB', 'GB', 'TB'];\n\n        var KILOBYTE = 1000.0;\n        var MEGABYTE = 1000.0 * 1000.0;\n        var GIGABYTE = 1000.0 * 1000.0 * 1000.0;\n        var TERABYTE = 1000.0 * 1000.0 * 1000.0 * 1000.0;\n\n        // Convert the bytes to a unit.\n        this.bytesToUnits = function(bytes) {\n            // Support string being passed.\n            if(angular.isString(bytes)) {\n                bytes = parseInt(bytes, 10);\n            }\n\n            var i, unit, converted = bytes;\n            for(i = 0; i < UNITS.length; i++) {\n                unit = UNITS[i];\n                if(Math.abs(converted) < 1000.0 || unit === 'TB') {\n                    var string = converted.toFixed(1) + \" \" + unit;\n                    if(unit === 'bytes') {\n                        string = converted + \" \" + unit;\n                    }\n                    return {\n                        original: bytes,\n                        converted: converted,\n                        units: unit,\n                        string: string\n                    };\n                }\n                converted /= 1000.0;\n            }\n        };\n\n        // Convert the data based on the unit to bytes.\n        this.unitsToBytes = function(data, unit) {\n            // Support string being passed.\n            if(angular.isString(data)) {\n                data = parseFloat(data);\n            }\n            if(unit === 'bytes') {\n                return Math.floor(data);\n            } else if(unit === 'kB') {\n                return Math.floor(data * KILOBYTE);\n            } else if(unit === 'MB') {\n                return Math.floor(data * MEGABYTE);\n            } else if(unit === 'GB') {\n                return Math.floor(data * GIGABYTE);\n            } else if(unit === 'TB') {\n                return Math.floor(data * TERABYTE);\n            }\n        };\n\n        // Convert the data based on unit down to the lowest tolerance to still\n        // be the same value in that unit.\n        this.roundUnits = function(data, unit) {\n            // Support string being passed.\n            if(angular.isString(data)) {\n                data = parseFloat(data);\n            }\n            if(unit === 'bytes') {\n                return Math.floor(data);\n            } else if(unit === 'kB') {\n                return Math.floor(data * KILOBYTE) - (0.05 * KILOBYTE);\n            } else if(unit === 'MB') {\n                return Math.floor(data * MEGABYTE) - (0.05 * MEGABYTE);\n            } else if(unit === 'GB') {\n                return Math.floor(data * GIGABYTE) - (0.05 * GIGABYTE);\n            } else if(unit === 'TB') {\n                return Math.floor(data * TERABYTE) - (0.05 * TERABYTE);\n            }\n        };\n\n        // Round the bytes down to size based on the block size.\n        this.roundByBlockSize = function(bytes, block_size) {\n            return block_size * Math.floor(bytes / block_size);\n        };\n\n        // Convert string ipv4 address into octets array.\n        this.ipv4ToOctets = function(ipAddress) {\n            var parts = ipAddress.split('.');\n            var octets = [];\n            angular.forEach(parts, function(part) {\n                octets.push(parseInt(part, 10));\n            });\n            return octets;\n        };\n\n        // Convert string ipv4 address into integer.\n        this.ipv4ToInteger = function(ipAddress) {\n            var octets = this.ipv4ToOctets(ipAddress);\n            return (\n                (octets[0] * Math.pow(256,3)) +\n                (octets[1] * Math.pow(256,2)) +\n                (octets[2] * 256) + octets[3]);\n        };\n\n        // Convert ipv6 address to a full ipv6 address, removing the\n        // '::' shortcut and padding each group with zeros.\n        this.ipv6Expand = function(ipAddress) {\n            var i, expandedAddress = ipAddress;\n            if(expandedAddress.indexOf(\"::\") !== -1) {\n                // '::' is present so replace it with the required\n                // number of '0000:' based on its location in the string.\n                var split = ipAddress.split(\"::\");\n                var groups = 0;\n                for(i = 0; i < split.length; i++) {\n                    groups += split[i].split(\":\").length;\n                }\n                expandedAddress = split[0] + \":\";\n                for(i = 0; i < 8 - groups; i++) {\n                    expandedAddress += \"0000:\";\n                }\n                expandedAddress += split[1];\n            }\n            // Pad the output of each part with zeros.\n            var output = [], parts = expandedAddress.split(\":\");\n            angular.forEach(parts, function(part) {\n                output.push(\"0000\".substr(part.length) + part);\n            });\n            return output.join(\":\");\n        };\n\n        // Convert string ipv6 into groups array.\n        this.ipv6ToGroups = function(ipAddress) {\n            var groups = [];\n            var parts = this.ipv6Expand(ipAddress).split(\":\");\n            angular.forEach(parts, function(part) {\n                groups.push(parseInt(part, 16));\n            });\n            return groups;\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Error Service\n */\n\nangular.module('MAAS').service('ErrorService', function() {\n\n        // Holds the client error.\n        this._error = null;\n\n        // Raise this error in the UI.\n        this.raiseError = function(error) {\n            // Possible that this method is called more than once.\n            // Only take the first error.\n            if(!angular.isString(this._error)) {\n                this._error = error;\n            }\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS JSON Service\n *\n * Used by controllers to parse JSON.\n */\n\nangular.module('MAAS').service('JSONService', function() {\n\n    // Return the JSON for the string or null if it cannot be parsed.\n    this.tryParse = function(jsonString) {\n        try {\n            var obj = JSON.parse(jsonString);\n            // JSON.parse(false) or JSON.parse(1234) will throw errors, but\n            // JSON.parse(null) returns 'null', and typeof null === \"object\".\n            if (obj && typeof obj === \"object\" && obj !== null) {\n                return obj;\n            }\n        }\n        catch (e) { }\n        return null;\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Log Service\n *\n * Allows logging to be enabled or disabled, and allows a particular log level\n * to be set, which will allow logs of a specified importance (or more) to be\n * seen.\n *\n * Also appends a time index (in seconds, accurate to milliseconds) to the\n * beginning of the log string.\n */\n\nangular.module('MAAS').service('LogService', [\n    '$window', function($window) {\n        var self = this;\n\n        // Global enable/disable for MAAS logging. If set to `false`, this\n        // value takes precedence over the logLevel.\n        self.logging = true;\n\n        // Specifies the log level.\n        // Level 1: error() logging\n        // Level 2: error() and warn() logging\n        // Level 3: all of the above, plus info()\n        // Level 4: all of the above, plus log()\n        // Level 5: all of the above, plus debug()\n        self.logLevel = 5;\n\n        // Returns a monotonic time (in milliseconds) since page load.\n        self.now = function() {\n            return $window.performance ? $window.performance.now() : 0;\n        };\n\n        // Standard logging functions.\n        self._debug = console.debug;\n        self._log = console.log;\n        self._info = console.info;\n        self._warn = console.warn;\n        self._error = console.error;\n\n        // Formats the specified time (in milliseconds) in seconds.\n        this.formatMilliseconds = function(milliseconds) {\n            return parseFloat(milliseconds / 1000.0).toFixed(3);\n        };\n\n        // Internal function to log using the specified destination, with the\n        // specified list of arguments.\n        this.__log = function(destination, args) {\n            if(self.logging === true) {\n                // Add time index to the beginning of the log.\n                Array.prototype.unshift.call(args,\n                    \"[\" + self.formatMilliseconds(self.now()) + \"]\");\n                destination.apply(self, args);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._debug().\n        this.debug = function() {\n            if(self.logLevel >= 5) {\n                self.__log(self._debug, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._log().\n        this.log = function() {\n            if(self.logLevel >= 4) {\n                self.__log(self._log, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._info().\n        this.info = function() {\n            if(self.logLevel >= 3) {\n                self.__log(self._info, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._warn().\n        this.warn = function() {\n            if(self.logLevel >= 2) {\n                self.__log(self._warn, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._err().\n        this.error = function() {\n            if(self.logLevel >= 1) {\n                self.__log(self._error, arguments);\n            }\n        };\n    }\n]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Base Manager\n *\n * Manages a collection of items from the websocket in the browser. The manager\n * uses the RegionConnection to load the items, update the items, and listen\n * for notification events about the items.\n */\n\nangular.module('MAAS').service(\n    'Manager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', function(\n            $q, $rootScope, $timeout, RegionConnection) {\n\n        // Actions that are used to update the statuses metadata.\n        var METADATA_ACTIONS = {\n            CREATE: \"create\",\n            UPDATE: \"update\",\n            DELETE: \"delete\"\n        };\n\n        // Constructor\n        function Manager() {\n            // Primary key on the items in the list. Used to match items.\n            this._pk = \"id\";\n\n            // Key used when loading batches. Typically the same as _pk\n            // but not always.\n            this._batchKey = \"id\";\n\n            // The field from which to get a human-readable name.\n            this._name_field = \"name\";\n\n            // Handler on the region to call to list, create, update, delete,\n            // and listen for notifications. Must be set by overriding manager.\n            this._handler = null;\n\n            // Holds all items in the system. This list must always be the same\n            // object.\n            this._items = [];\n\n            // The way this manager recieves its updated information. 'notify'\n            // means this manager recieved notify messages from the websocket.\n            // See PollingManager for the other possible type. This is only\n            // used by the `ManagerHelperService` to identify how updating\n            // the data should be handled.\n            this._type = 'notify';\n\n            // Holds list of scopes that currently have this manager loaded.\n            this._scopes = [];\n\n            // True when all of the items have been loaded. This is done on\n            // intial connection to the region.\n            this._loaded = false;\n\n            // True when the items list is currently being loaded or reloaded.\n            // Actions will not be processed while this is false.\n            this._isLoading = false;\n\n            // Holds list of defers that need to be called once the loading of\n            // items has finished. This is used when a caller calls loadItems\n            // when its already loading.\n            this._extraLoadDefers = [];\n\n            // Holds list of defers that need to be called once the reloading\n            // of items has finished. This is used when a caller calls\n            // reloadItems when its already reloading.\n            this._extraReloadDefers = [];\n\n            // Holds all of the notify actions that need to be processed. This\n            // is used to hold the actions while the items are being loaded.\n            // Once all of the items are loaded the queue will be processed.\n            this._actionQueue = [];\n\n            // Holds list of all of the currently selected items. This is held\n            // in a seperate list to remove the need to loop through the full\n            // listing to grab the selected items.\n            this._selectedItems = [];\n\n            // Set to true when the items list should reload upon re-connection\n            // to the region.\n            this._autoReload = false;\n\n            // Holds the item that is currenly being viewed. This object will\n            // be updated if any notify events are recieved for it. This allows\n            // the ability of not having to keep pulling the item out of the\n            // items list.\n            this._activeItem = null;\n\n            // Holds metadata information that is used to helper filtering.\n            this._metadata = {};\n\n            // List of attributes to track on the loaded items. Each attribute\n            // in this list will be placed in _metadata to track its currect\n            // values and the number of items with that value.\n            this._metadataAttributes = [];\n        }\n\n        // Return index of the item in the given array.\n        Manager.prototype._getIndexOfItem = function(array, pk_value) {\n            var i;\n            for(i = 0, len = array.length; i < len; i++) {\n                if(array[i][this._pk] === pk_value) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n\n        // Replace the item in the array at the same index.\n        Manager.prototype._replaceItemInArray = function(array, item) {\n            var idx = this._getIndexOfItem(array, item[this._pk]);\n            if(idx >= 0) {\n                // Keep the current selection on the item.\n                item.$selected = array[idx].$selected;\n                angular.copy(item, array[idx]);\n            }\n        };\n\n        // Remove the item from the array.\n        Manager.prototype._removeItemByIdFromArray = function(\n            array, pk_value) {\n            var idx = this._getIndexOfItem(array, pk_value);\n            if(idx >= 0) {\n                array.splice(idx, 1);\n            }\n        };\n\n        // Return the parameters that should be used for the batch load\n        // request. Should be used by subclass that want to add extra\n        // parameters to the batch request. By default it returns an empty\n        // object.\n        Manager.prototype._initBatchLoadParameters = function() {\n            return {};\n        };\n\n        // Batch load items from the region in groups of 50.\n        Manager.prototype._batchLoadItems = function(array, extra_func) {\n            var self = this;\n            var defer = $q.defer();\n            var method = this._handler + \".list\";\n            function callLoad() {\n                var params = self._initBatchLoadParameters();\n                params.limit = 50;\n\n                // Get the last batchKey in the list so the region knows to\n                // start at that offset.\n                if(array.length > 0) {\n                    params.start = array[array.length-1][self._batchKey];\n                }\n                RegionConnection.callMethod(\n                    method, params).then(function(items) {\n                        // Pass each item to extra_func function if given.\n                        if(angular.isFunction(extra_func)) {\n                            angular.forEach(items, function(item) {\n                                extra_func(item);\n                            });\n                        }\n\n                        array.push.apply(array, items);\n                        if(items.length === 50) {\n                            // Could be more items, request the next 50.\n                            callLoad(array);\n                        } else {\n                            defer.resolve(array);\n                        }\n                    }, defer.reject);\n            }\n            callLoad();\n            return defer.promise;\n        };\n\n        // Resolves array of defers with item.\n        Manager.prototype._resolveDefers = function(defersArray, item) {\n            angular.forEach(defersArray, function(defer) {\n                defer.resolve(item);\n            });\n        };\n\n        // Rejects array of defers with error.\n        Manager.prototype._rejectDefers = function(defersArray, error) {\n            angular.forEach(defersArray, function(defer) {\n                defer.reject(error);\n            });\n        };\n\n        // Return list of items.\n        Manager.prototype.getItems = function() {\n            return this._items;\n        };\n\n        // Clears the currect state of the manager.\n        Manager.prototype.clear = function() {\n            this._loaded = false;\n            this._items.length = 0;\n            this._actionQueue.length = 0;\n            this._selectedItems.length = 0;\n            this._activeItem = null;\n            this._metadata = {};\n            this._metadataAttributes.length = 0;\n        };\n\n        // Load all the items.\n        Manager.prototype.loadItems = function() {\n            // If the items have already been loaded then, we need to\n            // reload the items list not load the initial list.\n            if(this._loaded) {\n                return this.reloadItems();\n            }\n\n            // If its already loading then the caller just needs to be informed\n            // of when it has finished loading.\n            if(this._isLoading) {\n                var defer = $q.defer();\n                this._extraLoadDefers.push(defer);\n                return defer.promise;\n            }\n\n            var self = this;\n            this._isLoading = true;\n            return this._batchLoadItems(this._items, function(item) {\n                item.$selected = false;\n                self._updateMetadata(item, METADATA_ACTIONS.CREATE);\n                self._processItem(item);\n            }).then(function() {\n                self._loaded = true;\n                self._isLoading = false;\n                self.processActions();\n                self._resolveDefers(self._extraLoadDefers, self._items);\n                self._extraLoadDefers = [];\n                return self._items;\n            }, function(error) {\n                self._rejectDefers(self._extraLoadDefers, error);\n                self._extraLoadDefers = [];\n                return $q.reject(error);\n            });\n        };\n\n        // Reload the items list.\n        Manager.prototype.reloadItems = function() {\n            // If the items have not been loaded then, we need to\n            // load the initial list.\n            if(!this._loaded) {\n                return this.loadItems();\n            }\n\n            // If its already reloading then the caller just needs to be\n            // informed of when it has refinished loading.\n            if(this._isLoading) {\n                var defer = $q.defer();\n                this._extraReloadDefers.push(defer);\n                return defer.promise;\n            }\n\n            // Updates the items list with the reloaded items.\n            var self = this;\n            function updateItems(items) {\n                // Iterate in reverse so we can remove items inline, without\n                // having to adjust the index.\n                var i = self._items.length;\n                while(i--) {\n                    var item = self._items[i];\n                    var updatedIdx = self._getIndexOfItem(\n                        items, item[self._pk]);\n                    if(updatedIdx === -1) {\n                        self._updateMetadata(item, METADATA_ACTIONS.DELETE);\n                        self._items.splice(i, 1);\n                        self._removeItemByIdFromArray(\n                            self._selectedItems, item[self._pk]);\n                    } else {\n                        var updatedItem = items[updatedIdx];\n                        self._updateMetadata(\n                            updatedItem, METADATA_ACTIONS.UPDATE);\n                        updatedItem.$selected = item.$selected;\n                        angular.copy(items[updatedIdx], item);\n                        items.splice(updatedIdx, 1);\n                    }\n                }\n\n                // The remain items in items array are the new items.\n                angular.forEach(items, function(item) {\n                    self._items.push(item);\n                    self._processItem(item);\n                });\n            }\n\n            // The reload action loads all of the items into this list\n            // instead of the items list. This list will then be used to\n            // update the items list.\n            var currentItems = [];\n\n            // Start the reload process and once complete call updateItems.\n            self._isLoading = true;\n            return this._batchLoadItems(currentItems).then(function(items) {\n                updateItems(items);\n                self._isLoading = false;\n                self.processActions();\n\n                // Set the activeItem again so the region knows that its\n                // the active item.\n                if(angular.isObject(self._activeItem)) {\n                    self.setActiveItem(self._activeItem[self._pk]);\n                }\n\n                self._resolveDefers(self._extraReloadDefers, self._items);\n                self._extraReloadDefers = [];\n                return self._items;\n            }, function(error) {\n                self._rejectDefers(self._extraReloadDefers, error);\n                self._extraReloadDefers = [];\n                return $q.reject(error);\n            });\n        };\n\n        // Enables auto reloading of the item list on connection to region.\n        Manager.prototype.enableAutoReload = function() {\n            if(!this._autoReload) {\n                this._autoReload = true;\n                var self = this;\n                this._reloadFunc = function() {\n                    self.reloadItems();\n                };\n                RegionConnection.registerHandler(\"open\", this._reloadFunc);\n            }\n        };\n\n        // Disable auto reloading of the item list on connection to region.\n        Manager.prototype.disableAutoReload = function() {\n            if(this._autoReload) {\n                RegionConnection.unregisterHandler(\"open\", this._reloadFunc);\n                this._reloadFunc = null;\n                this._autoReload = false;\n            }\n        };\n\n        // True when the initial item list has finished loading.\n        Manager.prototype.isLoaded = function() {\n            return this._loaded;\n        };\n\n        // True when the item list is currently being loaded or reloaded.\n        Manager.prototype.isLoading = function() {\n            return this._isLoading;\n        };\n\n        // Allow for extra processing of items as they are added or updated.\n        Manager.prototype._processItem = function(item) {\n        };\n\n        // Replace item in the items and selectedItems list.\n        Manager.prototype._replaceItem = function(item) {\n            this._updateMetadata(item, METADATA_ACTIONS.UPDATE);\n            this._replaceItemInArray(this._items, item);\n        };\n\n        // Remove item in the items and selectedItems list.\n        Manager.prototype._removeItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx >= 0) {\n                this._updateMetadata(this._items[idx], METADATA_ACTIONS.DELETE);\n            }\n            this._removeItemByIdFromArray(this._items, pk_value);\n            this._removeItemByIdFromArray(this._selectedItems, pk_value);\n        };\n\n        // Get the item from the list. Does not make a get request to the\n        // region to load more data.\n        Manager.prototype.getItemFromList = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx >= 0) {\n                return this._items[idx];\n            } else {\n                return null;\n            }\n        };\n\n        // Get the item from the region.\n        Manager.prototype.getItem = function(pk_value) {\n            var self = this;\n            var method = this._handler + \".get\";\n            var params = {};\n            params[this._pk] = pk_value;\n            return RegionConnection.callMethod(\n                method, params).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the create information to the region.\n        Manager.prototype.createItem = function(item) {\n            var self = this;\n            var method = this._handler + \".create\";\n            item = angular.copy(item);\n            delete item.$selected;\n            return RegionConnection.callMethod(\n                method, item).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the update information to the region.\n        Manager.prototype.updateItem = function(item) {\n            var self = this;\n            var method = this._handler + \".update\";\n            item = angular.copy(item);\n            delete item.$selected;\n            return RegionConnection.callMethod(\n                method, item).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the delete call for item to the region.\n        Manager.prototype.deleteItem = function(item) {\n            var self = this;\n            var method = this._handler + \".delete\";\n            var params = {};\n            params[this._pk] = item[this._pk];\n            return RegionConnection.callMethod(\n                method, params).then(function() {\n                    self._removeItem(item[self._pk]);\n                });\n        };\n\n        // Return the active item.\n        Manager.prototype.getActiveItem = function() {\n            return this._activeItem;\n        };\n\n        // Set the active item.\n        Manager.prototype.setActiveItem = function(pk_value) {\n            if(!this._loaded) {\n                throw new Error(\n                    \"Cannot set active item unless the manager is loaded.\");\n            }\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                this._activeItem = null;\n                // Item with pk_value does not exists. Reject the returned\n                // deferred.\n                var defer = $q.defer();\n                $timeout(function() {\n                    defer.reject(\"No item with pk: \" + pk_value);\n                });\n                return defer.promise;\n            } else {\n                this._activeItem = this._items[idx];\n                // Data that is loaded from the list call is limited and\n                // doesn't contain all of the needed data for an activeItem.\n                // Call set_active on the handler for the region to know\n                // this item needs all information when updated.\n                var self = this;\n                var method = this._handler + \".set_active\";\n                var params = {};\n                params[this._pk] = pk_value;\n                return RegionConnection.callMethod(\n                    method, params).then(function(item) {\n                        self._replaceItem(item);\n                        return self._activeItem;\n                    });\n            }\n        };\n\n        // Clears the active item.\n        Manager.prototype.clearActiveItem = function() {\n            this._activeItem = null;\n        };\n\n        // True when the item list is stable and not being loaded or reloaded.\n        Manager.prototype.canProcessActions = function() {\n            return !this._isLoading;\n        };\n\n        // Handle notify from RegionConnection about an item.\n        Manager.prototype.onNotify = function(action, data) {\n            // Place the notification in the action queue.\n            this._actionQueue.push({\n                action: action,\n                data: data\n            });\n            // Processing incoming actions is enabled. Otherwise they\n            // will be queued until processActions is called.\n            if(this.canProcessActions()) {\n               $rootScope.$apply(this.processActions());\n            }\n        };\n\n        // Process all actions to keep the item information up-to-date.\n        Manager.prototype.processActions = function() {\n            while(this._actionQueue.length > 0) {\n                var action = this._actionQueue.shift();\n                if(action.action === \"create\") {\n                    // Check that the received data doesn't already exists\n                    // in the _items list. If it does then this is actually\n                    // an update action not a create action.\n                    var idx = this._getIndexOfItem(\n                        this._items, action.data[this._pk]);\n                    if(idx >= 0) {\n                        // Actually this is an update action not a create\n                        // action. So replace the item instead of adding it.\n                        this._replaceItem(action.data);\n                    } else {\n                        action.data.$selected = false;\n                        this._updateMetadata(\n                            action.data, METADATA_ACTIONS.CREATE);\n                        this._items.push(action.data);\n                    }\n                    this._processItem(action.data);\n                } else if(action.action === \"update\") {\n                    this._replaceItem(action.data);\n                    this._processItem(action.data);\n                } else if(action.action === \"delete\") {\n                    this._removeItem(action.data);\n                }\n            }\n        };\n\n        // Return list of selected items.\n        Manager.prototype.getSelectedItems = function() {\n            return this._selectedItems;\n        };\n\n        // Mark the given item as selected.\n        Manager.prototype.selectItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: selection of \" + this._handler + \"(\" + pk_value +\n                    \") failed because its missing in the items list.\");\n                return;\n            }\n\n            var item = this._items[idx];\n            item.$selected = true;\n\n            idx = this._selectedItems.indexOf(item);\n            if(idx === -1) {\n                this._selectedItems.push(item);\n            }\n        };\n\n        // Mark the given item as unselected.\n        Manager.prototype.unselectItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: de-selection of \" + this._handler + \"(\" +\n                    pk_value + \") failed because its missing in the \" +\n                    \"nodes list.\");\n                return;\n            }\n\n            var item = this._items[idx];\n            item.$selected = false;\n\n            idx = this._selectedItems.indexOf(item);\n            if(idx >= 0) {\n                this._selectedItems.splice(idx, 1);\n            }\n        };\n\n        // Determine if a item is selected.\n        Manager.prototype.isSelected = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: unable to determine if \" + this._handler + \"(\" +\n                    pk_value + \") is selected because its missing in the \" +\n                    \"nodes list.\");\n                return false;\n            }\n\n            return this._items[idx].$selected === true;\n        };\n\n        // Return the metadata object value from `metadatas` matching `name`.\n        Manager.prototype._getMetadataValue = function(metadatas, name) {\n            var i;\n            for(i = 0; i < metadatas.length; i++) {\n                if(metadatas[i].name === name) {\n                    return metadatas[i];\n                }\n            }\n            return null;\n        };\n\n        // Add new value to metadatas if it doesnt exists or increment the\n        // count if it already does.\n        Manager.prototype._addMetadataValue = function(metadatas, value) {\n            var metadata = this._getMetadataValue(metadatas, value);\n            if(metadata) {\n                metadata.count += 1;\n            } else {\n                metadata = {\n                    name: value,\n                    count: 1\n                };\n                metadatas.push(metadata);\n            }\n        };\n\n        // Remove value from metadatas.\n        Manager.prototype._removeMetadataValue = function(metadatas, value) {\n            var metadata = this._getMetadataValue(metadatas, value);\n            if(metadata) {\n                metadata.count -= 1;\n                if(metadata.count <= 0) {\n                    metadatas.splice(metadatas.indexOf(metadata), 1);\n                }\n            }\n        };\n\n        // Update the metadata entry in `metadatas` for the array value and\n        // based on the action.\n        Manager.prototype._updateMetadataArrayEntry = function(\n                metadatas, newValue, action, oldValue) {\n            var self = this;\n\n            if(action === METADATA_ACTIONS.CREATE) {\n                angular.forEach(newValue, function(value) {\n                    // On create ignore empty values.\n                    if(value === '') {\n                        return;\n                    }\n                    self._addMetadataValue(metadatas, value);\n                });\n            } else if(action === METADATA_ACTIONS.DELETE) {\n                angular.forEach(newValue, function(value) {\n                    self._removeMetadataValue(metadatas, value);\n                });\n            } else if(action === METADATA_ACTIONS.UPDATE &&\n                angular.isDefined(oldValue)) {\n                // Any values in added are new on the item, and any values left\n                // in oldArray have been removed.\n                var added = [];\n                var oldArray = angular.copy(oldValue);\n                angular.forEach(newValue, function(value) {\n                    var idx = oldArray.indexOf(value);\n                    if(idx === -1) {\n                        // Value not in oldArray so it has been added.\n                        added.push(value);\n                    } else {\n                        // Value already in oldArray so its already tracked.\n                        oldArray.splice(idx, 1);\n                    }\n                });\n\n                // Add the new values.\n                angular.forEach(added, function(value) {\n                    self._addMetadataValue(metadatas, value);\n                });\n\n                // Remove the old values.\n                angular.forEach(oldArray, function(value) {\n                    self._removeMetadataValue(metadatas, value);\n                });\n            }\n        };\n\n        // Update the metadata entry in `metadatas` for the newValue and based\n        // on the action. Method does not work with array values, use\n        // _updateMetadataArrayEntry for values that are arrays.\n        Manager.prototype._updateMetadataValueEntry = function(\n                metadatas, newValue, action, oldValue) {\n            if(action === METADATA_ACTIONS.CREATE) {\n                // On create ignore empty values.\n                if(newValue === '') {\n                    return;\n                }\n                this._addMetadataValue(metadatas, newValue);\n            } else if(action === METADATA_ACTIONS.DELETE) {\n                this._removeMetadataValue(metadatas, newValue);\n            } else if(action === METADATA_ACTIONS.UPDATE &&\n                angular.isDefined(oldValue)) {\n                if(oldValue !== newValue) {\n                    if(oldValue !== \"\") {\n                        // Decrement the old value\n                        this._removeMetadataValue(metadatas, oldValue);\n                    }\n\n                    // Increment the new value with the \"create\"\n                    // operation.\n                    this._updateMetadataEntry(\n                        metadatas, newValue, METADATA_ACTIONS.CREATE, oldValue);\n                }\n            }\n        };\n\n        // Update the metadata entry in `metadatas` with the newValue and based\n        // on the action. Update action will use the oldValue to remove it from\n        // the metadata.\n        Manager.prototype._updateMetadataEntry = function(\n                metadatas, newValue, action, oldValue) {\n            if(angular.isArray(newValue)) {\n                this._updateMetadataArrayEntry(\n                    metadatas, newValue, action, oldValue);\n            } else {\n                this._updateMetadataValueEntry(\n                    metadatas, newValue, action, oldValue);\n            }\n        };\n\n        // Return the metadata object.\n        Manager.prototype.getMetadata = function() {\n            return this._metadata;\n        };\n\n        // Update the metadata objects based on the given item and action.\n        Manager.prototype._updateMetadata = function(item, action) {\n            var self = this;\n            var oldItem, idx;\n            if(action === METADATA_ACTIONS.UPDATE) {\n                // Update actions require the oldItem if it exist in the\n                // current item listing.\n                idx = this._getIndexOfItem(this._items, item[this._pk]);\n                if(idx >= 0) {\n                    oldItem = this._items[idx];\n                }\n            }\n            angular.forEach(this._metadataAttributes, function(func, attr) {\n                if(angular.isUndefined(self._metadata[attr])) {\n                    self._metadata[attr] = [];\n                }\n                var newValue, oldValue;\n                if(angular.isFunction(func)) {\n                    newValue = func(item);\n                    if(angular.isObject(oldItem)) {\n                        oldValue = func(oldItem);\n                    }\n                } else {\n                    newValue = item[attr];\n                    if(angular.isObject(oldItem)) {\n                        oldValue = oldItem[attr];\n                    }\n                }\n                self._updateMetadataEntry(\n                    self._metadata[attr], newValue, action, oldValue);\n            });\n        };\n\n        // Default implementation of getName(): returns the default name for\n        // this object, if it exists.\n        Manager.prototype.getName = function(obj) {\n            if(!angular.isObject(obj)) {\n                return;\n            }\n            if(angular.isString(obj[this._name_field])) {\n                return obj[this._name_field];\n            }\n        };\n\n        return Manager;\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Manager Helper Service\n *\n * Used by controllers to load managers. It helps the initialization of\n * managers and makes sure that all items in the manager are loaded\n * before resolving the defer.\n */\n\nangular.module('MAAS').service('ManagerHelperService', [\n    '$q', '$timeout', 'ErrorService', 'RegionConnection',\n    function($q, $timeout, ErrorService, RegionConnection) {\n\n        // Loads the manager.\n        this.loadManager = function(scope, manager) {\n            var defer = $q.defer();\n            var self = this;\n\n            // If the manager already has this scope loaded then nothing needs\n            // to be done.\n            if(manager._scopes.indexOf(scope) > -1) {\n                $timeout(function() {\n                    defer.resolve(manager);\n                });\n                return defer.promise;\n            }\n\n            // Do this entire operation with in the context of the region\n            // connection is connected.\n            RegionConnection.defaultConnect().then(function() {\n                if(manager._type === 'notify') {\n                    if(manager.isLoaded()) {\n                        $timeout(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        });\n                    } else {\n                        manager.loadItems().then(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                    }\n                    // Always enable auto reload. This will make sure the items\n                    // are reloaded if the connection goes down.\n                    manager.enableAutoReload();\n\n                    // Remove the scope for the loaded scopes for the manager.\n                    scope.$on(\"$destroy\", function() {\n                        self.unloadManager(scope, manager);\n                    });\n                } else if(manager._type === 'poll') {\n                    if(manager.isPolling()) {\n                        $timeout(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        });\n                    } else {\n                        manager.startPolling().then(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                    }\n\n                    // Stop the polling when the scope is destroyed and its\n                    // not in use by any other scopes.\n                    scope.$on(\"$destroy\", function() {\n                        self.unloadManager(scope, manager);\n                    });\n                } else {\n                    throw new Error(\"Unknown manager type: \" + manager._type);\n                }\n            });\n            return defer.promise;\n        };\n\n        // Gets the list of managers.\n        this.loadManagers = function(scope, managers) {\n            var defer = $q.defer();\n            var loadedManagers = [];\n\n            // Resolves the defer if all managers are loaded.\n            var resolveAllLoaded = function() {\n                if(loadedManagers.length === managers.length) {\n                    defer.resolve(managers);\n                }\n            };\n\n            var self = this;\n            angular.forEach(managers, function(manager) {\n                self.loadManager(scope, manager).then(function(loadedManager) {\n                    loadedManagers.push(loadedManager);\n                    resolveAllLoaded();\n                });\n            });\n            return defer.promise;\n        };\n\n        this.unloadManager = function(scope, manager) {\n            var idx = manager._scopes.indexOf(scope);\n            if(idx > -1) {\n                manager._scopes.splice(idx, 1);\n            }\n            if(manager._type === 'poll' && manager._scopes.length === 0) {\n                manager.stopPolling();\n            }\n        }\n\n        this.unloadManagers = function(scope, managers) {\n            var self = this;\n            angular.forEach(managers, function(manager) {\n                self.unloadManager(scope, manager);\n            });\n        }\n\n        // Tries to parse the specified string as JSON. If parsing fails,\n        // returns the original string. (This is useful since some manager\n        // calls return an error that could be either plain text, or JSON.)\n        this.tryParsingJSON = function(string) {\n            var error;\n            try {\n                error = JSON.parse(string);\n            } catch(e) {\n                if (e instanceof SyntaxError) {\n                    return string;\n                } else {\n                    throw e;\n                }\n            }\n            return error;\n        };\n\n        // Returns a printable version of the specified dictionary (useful\n        // for displaying an error to the user).\n        this.getPrintableString = function(dict, showNames) {\n            var result = '';\n            angular.forEach(dict, function(value, key) {\n                var error = dict[key];\n                if(showNames === true) {\n                    result += key + \": \";\n                }\n                if(angular.isString(error) || angular.isNumber(error)) {\n                    result += error + \"  \";\n                } else if(angular.isObject(error)) {\n                    angular.forEach(error, function(error) {\n                        result += error + \"  \";\n                    });\n                }\n                result = result.trim() + \"\\n\";\n            });\n            return result.trim();\n        };\n\n        // Convert the Python dict error message to displayed message.\n        // We know it's probably a form ValidationError dictionary, so just use\n        // it as such, and recover if that doesn't parse as JSON.\n        this.parseValidationError = function(error, showNames) {\n            error = this.tryParsingJSON(error);\n            if(!angular.isObject(error)) {\n                return error;\n            } else {\n                return this.getPrintableString(error, showNames);\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Manager\n *\n * Manages all of the spaces in the browser. The manager uses the\n * RegionConnection to load the spaces, update the spaces, and listen for\n * notification events about spaces.\n */\n\nangular.module('MAAS').factory(\n    'PollingManager',\n    ['$q', '$timeout', 'RegionConnection', 'Manager',\n    function($q, $timeout, RegionConnection, Manager) {\n\n        function PollingManager() {\n            Manager.call(this);\n\n            // The way this manager recieves its updated information. 'poll'\n            // means this manager periodicly polls for new data from the\n            // websocket.\n            this._type = 'poll';\n\n            // Set to true when polling has been enabled.\n            this._polling = false;\n\n            // The next promise for the polling interval.\n            this._nextPromise = null;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 3000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n        }\n\n        PollingManager.prototype = new Manager();\n\n        // Returns true when currently polling.\n        PollingManager.prototype.isPolling = function() {\n            return this._polling;\n        };\n\n        // Starts the polling.\n        PollingManager.prototype.startPolling = function() {\n            if(!this._polling) {\n                this._polling = true;\n                return this._poll();\n            } else {\n                return this._nextPromise;\n            }\n        };\n\n        // Stops the polling.\n        PollingManager.prototype.stopPolling = function() {\n            this._polling = false;\n            if(angular.isObject(this._nextPromise)) {\n                $timeout.cancel(this._nextPromise);\n                this._nextPromise = null;\n            }\n        };\n\n        // Registers the next polling attempt.\n        PollingManager.prototype._pollAgain = function(timeout) {\n            var self = this;\n            this._nextPromise = $timeout(function() {\n                self._poll();\n            }, timeout);\n            return this._nextPromise;\n        };\n\n        // Polls for the data from the region.\n        PollingManager.prototype._poll = function() {\n            var self = this;\n            return this.reloadItems().then(function(items) {\n                var pollTimeout = self._pollTimeout;\n                if(items.length === 0) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(pollTimeout);\n                return items;\n            }, function(error) {\n                self._pollAgain(self._pollErrorTimeout);\n                return $q.reject(error);\n            });\n        };\n\n        return PollingManager;\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Search Services\n */\n\nangular.module('MAAS').service('SearchService', function() {\n\n    // Holds an empty filter object.\n    var emptyFilter = { _: [] };\n\n    // Return a new empty filter;\n    this.getEmptyFilter = function() {\n        return angular.copy(emptyFilter);\n    };\n\n    // Splits the search string into different terms based on white space.\n    // This handles the ability for whitespace to be inside of '(', ')'.\n    //\n    // XXX blake_r 28-01-15: This could be improved with a regex, but was\n    // unable to come up with one that would allow me to validate the end\n    // ')' in the string.\n    this.getSplitSearch = function(search) {\n        var terms = search.split(' ');\n        var fixedTerms = [];\n        var spanningParentheses = false;\n        angular.forEach(terms, function(term, idx) {\n            if(spanningParentheses) {\n                // Previous term had an opening '(' but not a ')'. This\n                // term should join that previous term.\n                fixedTerms[fixedTerms.length - 1] += ' ' + term;\n\n                // If the term contains the ending ')' then its the last\n                // in the group.\n                if(term.indexOf(')') !== -1) {\n                    spanningParentheses = false;\n                }\n            } else {\n                // Term is not part of a previous '(' span.\n                fixedTerms.push(term);\n\n                var startIdx = term.indexOf('(');\n                if(startIdx !== -1) {\n                    if(term.indexOf(')', startIdx) === -1) {\n                        // Contains a starting '(' but not a ending ')'.\n                        spanningParentheses = true;\n                    }\n                }\n            }\n        });\n\n        if(spanningParentheses) {\n            // Missing ending parentheses so error with terms.\n            return null;\n        }\n        return fixedTerms;\n    };\n\n    // Return all of the currently active filters for the given search.\n    this.getCurrentFilters = function(search) {\n        var filters = this.getEmptyFilter();\n        if(search.length === 0) {\n            return filters;\n        }\n        var searchTerms = this.getSplitSearch(search);\n        if(!searchTerms) {\n            return null;\n        }\n        angular.forEach(searchTerms, function(terms) {\n            terms = terms.split(':');\n            if(terms.length === 1) {\n                // Search term is not specifing a specific field. Gets\n                // add to the '_' section of the filters.\n                if(filters._.indexOf(terms[0]) === -1) {\n                    filters._.push(terms[0]);\n                }\n            } else {\n                var field = terms.shift();\n                var values = terms.join(\":\");\n\n                // Remove the starting '(' and ending ')'.\n                values = values.replace('(', '');\n                values = values.replace(')', '');\n\n                // If empty values then do nothing.\n                if(values.length === 0) {\n                    return;\n                }\n\n                // Split the values based on comma.\n                values = values.split(',');\n\n                // Add the values to filters.\n                if(angular.isUndefined(filters[field])) {\n                    filters[field] = [];\n                }\n                angular.forEach(values, function(value) {\n                    if(filters[field].indexOf(value) === -1) {\n                        filters[field].push(value);\n                    }\n                });\n            }\n        });\n        return filters;\n    };\n\n    // Convert \"filters\" into a search string.\n    this.filtersToString = function(filters) {\n        var search = \"\";\n        angular.forEach(filters, function(terms, type) {\n            // Skip empty and skip \"_\" as it gets appended at the\n            // beginning of the search.\n            if(terms.length === 0 || type === \"_\") {\n                return;\n            }\n            search += type + \":(\" + terms.join(\",\") + \") \";\n        });\n        if(filters._.length > 0) {\n            search = filters._.join(\" \") + \" \" + search;\n        }\n        return search.trim();\n    };\n\n    // Return the index of the value in the type for the filter.\n    this._getFilterValueIndex = function(filters, type, value) {\n        var values = filters[type];\n        if(angular.isUndefined(values)) {\n            return -1;\n        }\n        var lowerValues = values.map(function(value) {\n            return value.toLowerCase();\n        });\n        return lowerValues.indexOf(value.toLowerCase());\n    };\n\n    // Return true if the type and value are in the filters.\n    this.isFilterActive = function(filters, type, value, exact) {\n        var values = filters[type];\n        if(angular.isUndefined(values)) {\n            return false;\n        }\n        if(angular.isUndefined(exact)) {\n            exact = false;\n        }\n        if(exact) {\n            value = \"=\" + value;\n        }\n        return this._getFilterValueIndex(filters, type, value) !== -1;\n    };\n\n    // Toggles a filter on or off based on type and value.\n    this.toggleFilter = function(filters, type, value, exact) {\n        if(angular.isUndefined(filters[type])) {\n            filters[type] = [];\n        }\n        if(exact) {\n            value = \"=\" + value;\n        }\n        var idx = this._getFilterValueIndex(filters, type, value);\n        if(idx === -1) {\n            filters[type].push(value);\n        } else {\n            filters[type].splice(idx, 1);\n        }\n        return filters;\n    };\n\n    // Holds all stored filters.\n    var storedFilters = {};\n\n    // Store a filter for later.\n    this.storeFilters = function(name, filters) {\n        storedFilters[name] = filters;\n    };\n\n    // Retrieve a stored fitler.\n    this.retrieveFilters = function(name) {\n        return storedFilters[name];\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Validation Service\n *\n * Used by controllers to validate user inputs.\n */\n\nangular.module('MAAS').service('ValidationService', [\n    'ConverterService', function(ConverterService) {\n\n        // Pattern that matches a domainname.\n        // XXX 2016-02-24 lamont: This also matches \"example.com.\",\n        // which is wrong.\n        var domainnamePattern =\n            /^([a-z\\d]|[a-z\\d][a-z\\d-.]*[a-z\\d])*$/i;\n\n        // Pattern that matches a hostname.\n        var hostnamePattern =\n            /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])*$/;\n\n        // Pattern that matches a MAC.\n        var macPattern = /^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$/;\n\n        // Pattern used to match IPv4.\n        var ipv4Pattern = new RegExp([\n            '^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n            ].join(''));\n\n        // Returns true if the octets in one equal two with the cidr mask in\n        // bits applied to both.\n        function cidrMatcher(one, two, size, bits) {\n            var part = 0;\n            while(bits > 0) {\n                var shift = size - bits;\n                if(shift < 0) {\n                    shift = 0;\n                }\n\n                var oneShift = one[part] >> shift;\n                var twoShift = two[part] >> shift;\n                if(oneShift !== twoShift) {\n                    return false;\n                }\n                bits -= size;\n                part += 1;\n            }\n            return true;\n        }\n\n        // Return true if the domainname is valid, false otherwise.\n        this.validateDomainName = function(domainname) {\n            // Invalid if the domain is not a string, empty, or more than\n            // 253 characters.\n            if(!angular.isString(domainname) ||\n                domainname.length === 0 || domainname.length > 253) {\n                return false;\n            }\n            return domainnamePattern.test(domainname);\n        };\n\n        // Return true if the hostname is valid, false otherwise.\n        this.validateHostname = function(hostname) {\n            // Invalid if the hostname is not a string, empty, or more than\n            // 63 characters.\n            if(!angular.isString(hostname) ||\n                hostname.length === 0 || hostname.length > 63) {\n                return false;\n            }\n            return hostnamePattern.test(hostname);\n        };\n\n        // Return true if the MAC is valid, false otherwise.\n        this.validateMAC = function(macAddress) {\n            // Invalid if the macAddress is not a string.\n            if(!angular.isString(macAddress)) {\n                return false;\n            }\n            return macPattern.test(macAddress.trim());\n        };\n\n        // Return true if the IP is valid IPv4 address, false otherwise.\n        this.validateIPv4 = function(ipAddress) {\n            // Invalid if the ipAddress is not a string or empty.\n            if(!angular.isString(ipAddress) || ipAddress.length === 0) {\n                return false;\n            }\n            return ipv4Pattern.test(ipAddress);\n        };\n\n        // Return true if the IP is valid IPv6 address, false otherwise.\n        this.validateIPv6 = function(ipAddress) {\n            // Invalid if the ipAddress is not a string, empty, or missing\n            // at least one ':'.\n            if(!angular.isString(ipAddress) ||\n                ipAddress.length === 0 ||\n                ipAddress.indexOf(':') === -1) {\n                return false;\n            }\n            var expandedAddress = ConverterService.ipv6Expand(ipAddress);\n            var octets = ConverterService.ipv6ToGroups(expandedAddress);\n            if(octets.length !== 8) {\n                return false;\n            }\n\n            // Make sure all octets are in range.\n            var i;\n            for(i = 0; i < 8; i++) {\n                if(isNaN(octets[i]) || octets[i] < 0 || octets[i] > 0xffff) {\n                    // Out of range.\n                    return false;\n                }\n            }\n\n            // Don't allow unspecified, loopback, multicast, link-local\n            // unicast, or anything out of range.\n            if(octets[0] < 1 ||\n                octets[0] === 0xff00 ||\n                octets[0] === 0xfe80) {\n                return false;\n            }\n            return true;\n        };\n\n        // Return true if the IP is valid, false otherwise.\n        this.validateIP = function(ipAddress) {\n            return (\n                this.validateIPv4(ipAddress) || this.validateIPv6(ipAddress));\n        };\n\n        // Return true if the ipAddress is in the network.\n        this.validateIPInNetwork = function(ipAddress, network) {\n            var networkSplit = network.split('/');\n            var networkAddress = networkSplit[0];\n            var cidrBits = parseInt(networkSplit[1], 10);\n\n            if(this.validateIPv4(ipAddress) &&\n                this.validateIPv4(networkAddress)) {\n                return cidrMatcher(\n                    ConverterService.ipv4ToOctets(ipAddress),\n                    ConverterService.ipv4ToOctets(networkAddress),\n                    8, cidrBits);\n            } else if(this.validateIPv6(ipAddress) &&\n                this.validateIPv6(networkAddress)) {\n                return cidrMatcher(\n                    ConverterService.ipv6ToGroups(ipAddress),\n                    ConverterService.ipv6ToGroups(networkAddress),\n                    16, cidrBits);\n            }\n            return false;\n        };\n\n        // Return true if the ipAddress is in the network and between the\n        // lowAddress and highAddress inclusive.\n        this.validateIPInRange = function(\n            ipAddress, network, lowAddress, highAddress) {\n            // If the ip address is not even in the network then its\n            // not in the range.\n            if(!this.validateIPInNetwork(ipAddress, network)) {\n                return false;\n            }\n\n            var i, ipOctets, lowOctets, highOctets;\n            if(this.validateIPv4(ipAddress) &&\n                this.validateIPv4(lowAddress) &&\n                this.validateIPv4(highAddress)) {\n\n                // Check that each octet is of the ip address is more or equal\n                // to the low address and less or equal to the high address.\n                ipOctets = ConverterService.ipv4ToOctets(ipAddress);\n                lowOctets = ConverterService.ipv4ToOctets(lowAddress);\n                highOctets = ConverterService.ipv4ToOctets(highAddress);\n                for(i = 0; i < 4; i++) {\n                    if(ipOctets[i] > highOctets[i] ||\n                        ipOctets[i] < lowOctets[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            } else if(this.validateIPv6(ipAddress) &&\n                this.validateIPv6(lowAddress) &&\n                this.validateIPv6(highAddress)) {\n\n                // Check that each octet is of the ip address is more or equal\n                // to the low address and less or equal to the high address.\n                ipOctets = ConverterService.ipv6ToGroups(ipAddress);\n                lowOctets = ConverterService.ipv6ToGroups(lowAddress);\n                highOctets = ConverterService.ipv6ToGroups(highAddress);\n                for(i = 0; i < 8; i++) {\n                    if(ipOctets[i] > highOctets[i] ||\n                        ipOctets[i] < lowOctets[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n    }]);\n"],"sourceRoot":""}