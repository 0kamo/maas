{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/maasserver/static/js/angular/controllers/add_device.js","webpack:///./src/maasserver/static/js/angular/controllers/add_domain.js","webpack:///./src/maasserver/static/js/angular/controllers/add_hardware.js","webpack:///./src/maasserver/static/js/angular/controllers/dashboard.js","webpack:///./src/maasserver/static/js/angular/controllers/domain_details.js","webpack:///./src/maasserver/static/js/angular/controllers/domains_list.js","webpack:///./src/maasserver/static/js/angular/controllers/fabric_details.js","webpack:///./src/maasserver/static/js/angular/controllers/images.js","webpack:///./src/maasserver/static/js/angular/controllers/intro.js","webpack:///./src/maasserver/static/js/angular/controllers/intro_user.js","webpack:///./src/maasserver/static/js/angular/controllers/networks_list.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_networking.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_storage.js","webpack:///./src/maasserver/static/js/angular/controllers/node_details_storage_filesystems.js","webpack:///./src/maasserver/static/js/angular/controllers/node_events.js","webpack:///./src/maasserver/static/js/angular/controllers/node_result.js","webpack:///./src/maasserver/static/js/angular/controllers/node_results.js","webpack:///./src/maasserver/static/js/angular/controllers/nodes_list.js","webpack:///./src/maasserver/static/js/angular/controllers/pod_details.js","webpack:///./src/maasserver/static/js/angular/controllers/pods_list.js","webpack:///./src/maasserver/static/js/angular/controllers/prefs.js","webpack:///./src/maasserver/static/js/angular/controllers/settings.js","webpack:///./src/maasserver/static/js/angular/controllers/space_details.js","webpack:///./src/maasserver/static/js/angular/controllers/subnet_details.js","webpack:///./src/maasserver/static/js/angular/controllers/vlan_details.js","webpack:///./src/maasserver/static/js/angular/controllers/zone_details.js","webpack:///./src/maasserver/static/js/angular/controllers/zones_list.js","webpack:///./src/maasserver/static/js/angular/directives/accordion.js","webpack:///./src/maasserver/static/js/angular/directives/boot_images.js","webpack:///./src/maasserver/static/js/angular/directives/call_to_action.js","webpack:///./src/maasserver/static/js/angular/directives/card_loader.js","webpack:///./src/maasserver/static/js/angular/directives/code_lines.js","webpack:///./src/maasserver/static/js/angular/directives/contenteditable.js","webpack:///./src/maasserver/static/js/angular/directives/controller_image_status.js","webpack:///./src/maasserver/static/js/angular/directives/controller_status.js","webpack:///./src/maasserver/static/js/angular/directives/dbl_click_overlay.js","webpack:///./src/maasserver/static/js/angular/directives/default_os_select.js","webpack:///./src/maasserver/static/js/angular/directives/enter.js","webpack:///./src/maasserver/static/js/angular/directives/enter_blur.js","webpack:///./src/maasserver/static/js/angular/directives/error_overlay.js","webpack:///./src/maasserver/static/js/angular/directives/error_toggle.js","webpack:///./src/maasserver/static/js/angular/directives/ipranges.js","webpack:///./src/maasserver/static/js/angular/directives/login.js","webpack:///./src/maasserver/static/js/angular/directives/maas_obj_form.js","webpack:///./src/maasserver/static/js/angular/directives/mac_address.js","webpack:///./src/maasserver/static/js/angular/directives/machines_table.js","webpack:///./src/maasserver/static/js/angular/directives/navigation_dropdown.js","webpack:///./src/maasserver/static/js/angular/directives/navigation_mobile.js","webpack:///./src/maasserver/static/js/angular/directives/notifications.js","webpack:///./src/maasserver/static/js/angular/directives/os_select.js","webpack:///./src/maasserver/static/js/angular/directives/placeholder.js","webpack:///./src/maasserver/static/js/angular/directives/pod_parameters.js","webpack:///./src/maasserver/static/js/angular/directives/power_parameters.js","webpack:///./src/maasserver/static/js/angular/directives/pref_keys.js","webpack:///./src/maasserver/static/js/angular/directives/proxy_settings.js","webpack:///./src/maasserver/static/js/angular/directives/release_name.js","webpack:///./src/maasserver/static/js/angular/directives/release_options.js","webpack:///./src/maasserver/static/js/angular/directives/script_expander.js","webpack:///./src/maasserver/static/js/angular/directives/script_results_list.js","webpack:///./src/maasserver/static/js/angular/directives/script_runtime.js","webpack:///./src/maasserver/static/js/angular/directives/script_select.js","webpack:///./src/maasserver/static/js/angular/directives/script_status.js","webpack:///./src/maasserver/static/js/angular/directives/ssh_keys.js","webpack:///./src/maasserver/static/js/angular/directives/switches_table.js","webpack:///./src/maasserver/static/js/angular/directives/toggle_control.js","webpack:///./src/maasserver/static/js/angular/directives/type.js","webpack:///./src/maasserver/static/js/angular/directives/version_reloader.js","webpack:///./src/maasserver/static/js/angular/directives/window_width.js","webpack:///./src/maasserver/static/js/angular/factories/bootresources.js","webpack:///./src/maasserver/static/js/angular/factories/configs.js","webpack:///./src/maasserver/static/js/angular/factories/controllers.js","webpack:///./src/maasserver/static/js/angular/factories/devices.js","webpack:///./src/maasserver/static/js/angular/factories/dhcpsnippets.js","webpack:///./src/maasserver/static/js/angular/factories/discoveries.js","webpack:///./src/maasserver/static/js/angular/factories/domains.js","webpack:///./src/maasserver/static/js/angular/factories/events.js","webpack:///./src/maasserver/static/js/angular/factories/fabrics.js","webpack:///./src/maasserver/static/js/angular/factories/general.js","webpack:///./src/maasserver/static/js/angular/factories/ipranges.js","webpack:///./src/maasserver/static/js/angular/factories/machines.js","webpack:///./src/maasserver/static/js/angular/factories/node_results.js","webpack:///./src/maasserver/static/js/angular/factories/nodes.js","webpack:///./src/maasserver/static/js/angular/factories/notifications.js","webpack:///./src/maasserver/static/js/angular/factories/packagerepositories.js","webpack:///./src/maasserver/static/js/angular/factories/pods.js","webpack:///./src/maasserver/static/js/angular/factories/region.js","webpack:///./src/maasserver/static/js/angular/factories/scripts.js","webpack:///./src/maasserver/static/js/angular/factories/services.js","webpack:///./src/maasserver/static/js/angular/factories/spaces.js","webpack:///./src/maasserver/static/js/angular/factories/sshkeys.js","webpack:///./src/maasserver/static/js/angular/factories/staticroutes.js","webpack:///./src/maasserver/static/js/angular/factories/subnets.js","webpack:///./src/maasserver/static/js/angular/factories/switches.js","webpack:///./src/maasserver/static/js/angular/factories/tags.js","webpack:///./src/maasserver/static/js/angular/factories/users.js","webpack:///./src/maasserver/static/js/angular/factories/vlans.js","webpack:///./src/maasserver/static/js/angular/factories/zones.js","webpack:///./src/maasserver/static/js/angular/filters/by_fabric.js","webpack:///./src/maasserver/static/js/angular/filters/by_space.js","webpack:///./src/maasserver/static/js/angular/filters/by_subnet.js","webpack:///./src/maasserver/static/js/angular/filters/by_vlan.js","webpack:///./src/maasserver/static/js/angular/filters/nodes.js","webpack:///./src/maasserver/static/js/angular/filters/order_by_date.js","webpack:///./src/maasserver/static/js/angular/filters/remove_default_vlan.js","webpack:///./src/maasserver/static/js/angular/maas.js","webpack:///./src/maasserver/static/js/angular/services/browser.js","webpack:///./src/maasserver/static/js/angular/services/converter.js","webpack:///./src/maasserver/static/js/angular/services/error.js","webpack:///./src/maasserver/static/js/angular/services/json.js","webpack:///./src/maasserver/static/js/angular/services/log.js","webpack:///./src/maasserver/static/js/angular/services/manager.js","webpack:///./src/maasserver/static/js/angular/services/managerhelper.js","webpack:///./src/maasserver/static/js/angular/services/pollingmanager.js","webpack:///./src/maasserver/static/js/angular/services/search.js","webpack:///./src/maasserver/static/js/angular/services/validation.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","angular","controller","$scope","DevicesManager","SubnetsManager","DomainsManager","ManagerHelperService","ValidationService","newDevice","cloneDevice","isObject","domain","interfaces","mac","ipAssignment","subnetId","ipAddress","getDefaultDomain","$parent","addDeviceScope","subnets","getItems","domains","viewable","error","ipAssignments","title","device","show","loadManagers","then","hide","unloadManagers","$emit","nameHasError","length","validateHostname","macHasError","deviceInterface","validateMAC","ipHasError","validateIP","validateIPInNetwork","cidr","isNumber","subnet","getItemFromList","deviceHasError","externalIpError","staticIpError","addInterface","push","isPrimaryInterface","indexOf","deleteInterface","splice","cancel","save","addAnother","convertedDevice","hostname","primary_mac","extra_macs","forEach","nic","ip_assignment","ip_address","convertDeviceToProtocol","create","parseValidationError","addDomainScope","authoritative","validateDomainName","domainHasError","copy","convertDomainToProtocol","$q","$http","ZonesManager","MachinesManager","GeneralManager","RegionConnection","addHardwareScope","model","zones","architectures","getData","hwe_kernels","default_min_hwe_kernel","power_types","macAddressRegex","machine","chassis","virshFields","label","field_type","default","choices","required","defaultArchitecture","newMachine","cloneMachine","macs","zone","architecture","min_hwe_kernel","power","type","parameters","text","newChassis","cloneChassis","chassisPowerTypes","description","fields","mode","loadedItems","loadedManagers","defer","promise","loadItems","resolve","showMachine","showChassis","addMac","removeMac","idx","invalidName","validateMac","machineHasError","in_error","chassisHasErrors","power_type","field","isUndefined","powerParametersHasError","saveMachine","pxe_mac","shift","map","power_parameters","id","saveChassis","params","chassis_type","username","method","url","data","$","param","headers","Content-Type","$window","$rootScope","$routeParams","$location","DiscoveriesManager","VLANsManager","ConfigsManager","deviceIPOptions","page","loaded","discoveredDevices","machines","devices","configManager","networkDiscovery","column","selectedDevice","convertTo","predicate","last_seen","sortTable","reverse","proxyManager","updateItem","createItem","createInterface","Error","getDiscoveryName","discovery","getSubnetName","getName","getVLANName","vlanId","vlan","toggleSelected","deviceId","discovered","getDomainByName","slice","split","parent","goTo","saved","filter","option","preProcess","item","mac_address","ip","afterSave","obj","_removeItem","isString","path","UsersManager","ErrorService","domainLoaded","displayname","editSummary","action","editRow","deleteRow","domainsManager","newObject","supportedRecordTypes","enterEditSummary","exitEditSummary","isRecordAutogenerated","row","dnsresource_id","editRecord","previous_rrdata","rrdata","previous_rrtype","rrtype","previous_name","previous_ttl","ttl","removeRecord","confirmRemoveRecord","deleteDNSRecord","stopEditingRow","isSuperUser","isDefaultDomain","canBeDeleted","rrsets","deleteButton","actionInProgress","addRecordButton","cancelAction","deleteConfirmButton","deleteDomain","activeDomain","getActiveItem","requestedDomain","parseInt","domain_id","isNaN","raiseError","setActiveItem","$filter","currentpage","loading","addDomain","cancelAddDomain","FabricsManager","SpacesManager","ControllersManager","fabricLoaded","fabric","$watch","updateVLANs","rows","racks","vlans","space","space_name","vlan_name","subnet_name","rack_sids","rack_sid","rack","system_id","keys","key","fabricManager","controllers","isDefaultFabric","confirmingDelete","cancelDeleteButton","deleteFabric","search","reply","activeFabric","requestedFabric","fabric_id","BootResourcesManager","bootResources","autoImport","isArray","resources","PackageRepositoriesManager","repoManager","hasImages","maasName","upstreamDNS","mainArchive","portsArchive","httpProxy","skip","clickContinue","welcomeInError","form","$maasForm","hasErrors","networkInError","inError","objs","canContinue","force","location","reload","MAAS_config","completed_intro","managers","repo","user","sshkeys_count","markIntroComplete","user_completed_intro","loadManager","getAuthUser","filterByVLAN","filterByFabric","filterBySpace","filterByNullSpace","getURLParameters","by","groupBy","ADD_FABRIC_ACTION","selectedTitle","objectName","ADD_VLAN_ACTION","ADD_SPACE_ACTION","ADD_SUBNET_ACTION","subnetManager","fabrics","spaceManager","spaces","vlanManager","group","orphanVLANs","actionObjectInitializers","vlan_ids","updateGroupBy","previous_space","index","updateOrphanVLANs","previous_fabric","previous_vlan","fabric_name","updateFabricsGroupBy","updateActions","actionOptions","actionChanged","actionOption","getFabricNameById","fabricId","actionSubnetPreSave","$on","$interval","TagsManager","ServicesManager","ScriptsManager","page_managers","DEVICE_IP_ASSIGNMENT","external","dynamic","static","updateTitle","node","fqdn","updateHeader","header","editing","editing_domain","options","selected","updateAvailableActionOptions","actionTypeForNodeType","0","1","2","3","4","isDataLoaded","node_type","allOptions","availableOptions","actions","updatePower","bmc_node_count","power_bmc_node_count","canEdit","in_pod","isDefined","pod","updateSummary","summary","tags","hasUsableArchitectures","hasInvalidArchitecture","updateServices","isController","services","getServices","service","updateDevices","child","nicIdx","deviceWithMAC","links","link","lIdx","deviceWithLink","nodeLoaded","$watchCollection","storageController","networkingController","showing_confirmation","osinfo","section","area","osSelection","osystem","release","hwe_kernel","commissionOptions","enableSSH","skipNetworking","skipStorage","updateFirmware","configureHBA","commissioningSelection","testSelection","releaseOptions","checkingPower","scripts","getDeviceIPAssignment","events","limit","updateNode","queryPower","nodesManager","checkPowerState","console","log","tagsAutocomplete","query","autocomplete","getPowerStateClass","power_state","getPowerStateText","canCheckPowerState","isUbuntuOS","isUbuntuCoreOS","isCustomOS","isActionError","isDeployError","missing_osinfo","osystems","isSSHKeyError","getSSHKeyCount","optionChanged","actionCancel","actionGo","extra","distro_series","enable_ssh","skip_networking","skip_storage","commissioning_scripts","testing_scripts","status_code","erase","secure_erase","secureErase","quick_erase","quickErase","performAction","$reset","getArchitecturePlaceholder","isDevice","invalidArchitecture","isRackControllerConnected","isLocked","locked","editHeaderDomain","editHeader","editHeaderInvalid","cancelEditHeader","saveEditHeader","cancelEditSummary","saveEditSummary","tag","invalidPowerType","editPower","cancelEditPower","saveEditPower","allowShowMoreEvents","showMoreEvents","getEventText","event","getPowerEventError","level","hasPowerEventError","getPowerEventErrorText","hasActionPowerError","actionName","hasPowerError","missing_packages","getPowerErrors","result","packages","sort","getServiceClass","status","hasCustomCommissioningScripts","script_type","controllerLoaded","scope","showFailedTestWarning","testing_status","getCPUSubtext","cpu_count","cpu_speed","type_name","type_name_title","concat","activeNode","originalInterfaces","filtered","usedVLANs","inter","parents","vlan_id","childInterface","found","link_id","interfaceType","vid","modes","isFunction","getValue","this","nicType","allowLinkUp","JSONService","INTERFACE_TYPE","PHYSICAL","BOND","BRIDGE","VLAN","ALIAS","INTERFACE_TYPE_TEXTS","physical","bond","bridge","alias","LINK_MODE","AUTO","STATIC","DHCP","LINK_UP","LINK_MODE_TEXTS","auto","dhcp","link_up","SELECTION_MODE","NONE","SINGLE","MULTI","DELETE","ADD","CREATE_BOND","CREATE_BRIDGE","CREATE_PHYSICAL","EDIT","IP_ASSIGNMENT","updateLoaded","nodeHasLoaded","managersHaveLoaded","updateInterfaces","vlanTable","addedVlans","children","editInterface","selectedMode","formatted","members","vlanRecord","primary_rack","secondary_rack","sort_key","getVLANText","a","b","localeCompare","nic_copy","subnet_id","interfaceLinksMap","linkMaps","newInterface","parentId","linkId","newParent","iType","isAlias","isVLAN","canAddAlias","canAddVLAN","addTypeChanged","leaveSingleSelectionMode","updateNewInterface","mapNICToOriginalLink","nic_id","originalInteface","getDefaultVLAN","default_vlan_id","getUnusedVLANs","ignoreVLANs","getSelectedInterfaces","selectedInterfaces","splitKey","getNextName","prefix","tableInfo","interfaceErrorsByLinkId","newBondInterface","newBridgeInterface","bondOptions","isLimitedEditingAllowed","isAllNetworkingDisabled","isBootInterface","is_boot","getInterfaceTypeText","getLinkModeText","getSubnetText","getSubnet","isInterfaceNameInvalid","otherNic","isLinkModeDisabled","getInterfaceError","isIPAddressInvalid","getUniqueKey","toggleInterfaceSelect","isInterfaceSelected","cannotEditInterface","isEditing","edit","undefined","defaultSubnet","fabricChanged","vlanChanged","fabricChangedForm","updateValue","vlanChangedForm","subnetChanged","subnetChangedForm","modeChanged","modeChangedForm","originalLink","editCancel","preProcessInterface","interface_id","saveInterface","updateInterface","saveInterfaceLink","linkSubnet","editSave","isShowingDeleteConfirm","isShowingAdd","canAddAliasOrVLAN","canAddAnotherVLAN","getRemoveTypeText","canBeRemoved","remove","quickRemove","confirmRemove","unlinkSubnet","add","defaultVLAN","defaultMode","quickAdd","getAddName","aliasIdx","createVLANInterface","isDisabled","canCreateBond","isShowingCreateBond","showCreateBond","primary","lacpRate","xmitHashPolicy","hasBootInterface","getInterfacePlaceholderMACAddress","isMACAddressInvalid","invalidEmpty","showLACPRate","showXMITHashPolicy","cannotAddBond","addBond","bond_mode","bond_lacp_rate","bond_xmit_hash_policy","createBondInterface","canCreateBridge","isShowingCreateBridge","showCreateBridge","bridge_stp","bridge_fd","cannotAddBridge","addBridge","createBridgeInterface","isShowingCreatePhysical","showCreatePhysical","macError","errorMsg","cannotAddPhysicalInterface","addPhysicalInterface","createPhysicalInterface","errorStr","tryParse","disks","availableNew","single","disk","ConverterService","MIN_PARTITION_SIZE","MUTLI","UNMOUNT","UNFORMAT","FORMAT_AND_MOUNT","PARTITION","BCACHE","RAID","VOLUME_GROUP","LOGICAL_VOLUME","RAID_MODES","min_disks","allows_spares","calculateSize","minSize","numDisks","hasMountedFilesystem","filesystem","mount_point","hasFormattedUnmountedFilesystem","fstype","isInUse","is_format_fstype","available_size","getTags","cache_set_id","block_id","partition_id","updateDisks","used","cachesets","filesystems","has_disks","size_human","mount_options","filesystem_id","original_type","original","parent_type","partitions","partition","special_filesystems","oldFilesystem","filesystemsMap","$selected","updateFilesystemSelection","used_by","used_for","cacheset","oldCacheSet","cachesetsMap","updateCacheSetsSelection","available","has_partitions","available_size_human","used_size_human","serial","test_status","firmware_version","oldDisk","availableMap","$options","newDevices","updateAvailableSelection","updateAvailable","filesystemMode","filesystemAllSelected","cachesetsMode","cachesetsAllSelected","availableMode","availableAllSelected","deselectAll","items","capitalizeFirstLetter","string","charAt","toUpperCase","getIndexFromName","match","RegExp","exec","dIdx","Math","max","isNameAlreadyInUse","exclude_disk","j","isLogicalVolume","showMembers","isBootDiskDisabled","setAsBootDisk","setBootDisk","getSelectedFilesystems","toggleFilesystemSelect","toggleFilesystemAllSelect","isFilesystemsDisabled","isAllStorageDisabled","filesystemCancel","filesystemUnmount","quickFilesystemUnmount","filesystemConfirmUnmount","updateFilesystem","filesystemDelete","quickFilesystemDelete","filesystemConfirmDelete","unmountSpecialFilesystem","deletePartition","deleteFilesystem","hasUnmountedFilesystem","showFreeSpace","getDeviceType","getSelectedAvailable","toggleAvailableSelect","toggleAvailableAllSelect","isAvailableDisabled","canFormatAndMount","getPartitionButtonText","availablePartitionSpace","space_to_reserve","partition_table_type","INITIAL_PARTITION_OFFSET","roundByBlockSize","canAddPartition","isNameInvalid","nameHasChanged","parentName","availableCancel","usesMountPoint","usesStorage","isMountPointInvalid","mountPoint","canDelete","used_size","availableDelete","availableQuickDelete","availableEdit","editingTags","editingFilesystem","availableQuickEdit","availableConfirmEdit","mountOptions","updateDisk","availableConfirmDelete","deleteVolumeGroup","deleteDisk","availablePartition","size_and_units","size","sizeUnits","availableQuickPartition","getAddPartitionName","isAddPartitionSizeInvalid","test","bytes","unitsToBytes","roundUnits","availableConfirmPartition","removeDisk","available_space","createPartition","getSelectedCacheSets","toggleCacheSetSelect","toggleCacheSetAllSelect","isCacheSetsDisabled","cacheSetCancel","canDeleteCacheSet","cacheSetDelete","quickCacheSetDelete","cacheSetConfirmDelete","deleteCacheSet","canCreateCacheSet","createCacheSet","getCannotCreateBcacheMsg","canCreateBcache","createBcache","cacheMode","fstypeChanged","isNewDiskNameInvalid","createBcacheCanSave","availableConfirmCreateBcache","cache_set","cache_mode","canCreateRAID","createRAID","spares","getAvailableRAIDModes","getTotalNumberOfAvailableSpares","diff","getNumberOfRemainingSpares","allowed","showSparesColumn","RAIDModeChanged","isActiveRAIDMember","isSpareRAIDMember","setAsActiveRAIDMember","setAsSpareRAIDMember","getNewRAIDSize","Number","MAX_VALUE","deviceSize","min","bytesToUnits","createRAIDCanSave","availableConfirmCreateRAID","block_devices","spare_devices","spare_partitions","canCreateVolumeGroup","createVolumeGroup","getNewVolumeGroupSize","total","createVolumeGroupCanSave","availableConfirmCreateVolumeGroup","canAddLogicalVolume","availableLogicalVolume","namePrefix","isLogicalVolumeNameInvalid","newLogicalVolumeNameChanged","isAddLogicalVolumeSizeInvalid","availableConfirmLogicalVolume","createLogicalVolume","authUser","is_superuser","owner","hasStorageLayoutIssues","storage_layout_issues","SpecialFilesystem","isValid","startsWith","describe","parts","join","dropdown","addSpecialFilesystem","addSpecialFilesystemFinished","canMount","mount","mountSpecialFilesystem","EventsManagerFactory","eventsManager","getManager","days","getMaximumDays","eventsLoaded","loadMore","loadMaximumDays","destroy","NodeResultsManagerFactory","nodeResultsManager","requestedResult","getItem","get_result_data","output","resultLoaded","updateLogs","had_installation","logs","installation_results","selectedLog","commissioning_results","testing_results","results","updateLogOutput","resultsLoaded","logOutput","getSummaryXML","getSummaryYAML","loadHistory","showing_results","history_list","showing_history","loading_history","get_history","history","SearchService","SwitchesManager","isViewingSelected","tab","tabs","toLowerCase","enterViewSelected","previous_search","leaveViewSelected","updateFilters","updateAllViewableChecked","filtered_items","allViewableChecked","clearAction","resetActionProgress","zoneSelection","poolSelection","poolAction","newPool","shouldClearAction","selectedItems","removeEmptyFilter","updateActionErrorCount","actionErrorCount","supportsAction","action_failed","progress","actionProgress","completed","errors","affected_nodes","updateSelectedItems","hasActionsFailed","manager","unselectItem","hasActionsInProgress","switches","showswitches","pagetitle","searchValid","getSelectedItems","metadata","getMetadata","filters","getEmptyFilter","takeActionOptions","syncStatuses","addController","registerUrl","register_url","registerSecret","register_secret","addHardwareOption","addHardwareOptions","toggleTab","clearSearch","toggleChecked","isSelected","selectItem","toggleCheckAll","onNodeListingChanged","nodes","showSelected","toggleFilter","filtersToString","isFilterActive","getCurrentFilters","selectColumnOrSort","actionOptionSelected","tabName","zone_id","new_pool","pool_id","addErrorToActionProgress","addHardwareOptionChanged","addDevice","cancelAddDevice","statusPoll","storeFilters","machinesFilter","retrieveFilters","devicesFilter","controllersFilter","switchesFilter","PodsManager","podManager","sentence","operation","bind","refresh","deleteItem","inProgress","compose","storage","boot","machinesSearch","editPodConfiguration","exitEditPodConfiguration","actionOptionChanged","getPodTypeTitle","canCompose","capabilities","composeMachine","composePreProcess","sorted","constraint","cancelCompose","composeAddStorage","composeSetBootDisk","composeRemoveDisk","startWatching","now","getDefaultZone","activePod","pods","filteredItems","open","cpu_over_commit_ratio","memory_over_commit_ratio","powerTypes","action_error","addPod","cancelAddPod","getPowerTypeTitle","powerType","DHCPSnippetsManager","snippetsManager","snippets","known_architectures","pockets_to_disable","components_to_disable","packageRepositoriesManager","repositories","newSnippet","editSnippet","deleteSnippet","snippetTypes","newRepository","editRepository","deleteRepository","repositoryEnabledToggle","repository","repositoryEnterRemove","repositoryExitRemove","repositoryConfirmRemove","isPPA","isMirror","repositoryEnterEdit","repositoryExitEdit","repositoryAdd","enabled","arches","distributions","components","repositoryAddCancel","getSnippetTypeText","snippet","getSnippetAppliesToObject","getSnippetAppliesToText","snippetEnterRemove","snippetExitRemove","snippetConfirmRemove","snippetEnterEdit","snippetExitEdit","snippetToggle","snippetAdd","snippetAddCancel","spaceLoaded","updateSubnets","isDefaultSpace","subnet_ids","deleteSpace","activeSpace","requestedSpace","space_id","source","version","StaticRoutesManager","active_discovery_data","active_discovery_interval","staticRoutes","staticRoutesManager","actionError","newStaticRoute","editStaticRoute","deleteStaticRoute","MAP_SUBNET_ACTION","DELETE_ACTION","ALLOC_TYPES","5","6","NODE_TYPES","updateIPVersion","ipVersion","subnetLoaded","updateFabric","ipSort","ipv4ToInteger","ipv6Expand","getAllocType","allocType","str","getSubnetCIDR","destId","allocTypeSort","alloc_type","getUsageForIP","node_summary","nodeType","bmcs","dns_records","nodeTypeSort","ownerSort","sortIPTable","actionRetry","scanSubnet","scan_started_on","deleteSubnet","subnetPreSave","changedFields","addStaticRoute","gateway_ip","destination","metric","cancelAddStaticRoute","isStaticRouteInEditMode","route","staticRouteToggleEditMode","isStaticRouteInDeleteMode","staticRouteEnterDeleteMode","staticRouteCancelDelete","staticRouteConfirmDelete","choice","activeSubnet","requestedSubnet","objects","self","vm","updateManagementRacks","primaryRack","secondaryRack","updateRelatedControllers","relatedControllers","updateRelatedSubnets","relatedSubnets","updatePossibleActions","relay_vlan","RELAY_DHCP_ACTION","DISABLE_DHCP_ACTION","dhcp_on","PROVIDE_DHCP_ACTION","isFabricDefault","vlanLoaded","provideDHCPAction","getSpaceName","getActionByName","initProvideDHCP","forRelay","relayVLAN","maxIPs","startIP","endIP","gatewayIP","needsDynamicRange","iprange","statistics","suggested_dynamic_range","needsGatewayIP","subnetMissingGatewayIP","updatePrimaryRack","updateSecondaryRack","updateSubnet","filterPrimaryRack","suggested_gateway","num_addresses","startPlaceholder","start","endPlaceholder","end","gatewayPlaceholder","canPerformAction","gateway","configureDHCP","extraDHCP","relay","disableDHCP","deleteVLAN","getFullVLANName","getDHCPStatus","activeVLAN","requestedVLAN","zoneLoaded","zoneManager","isDefaultZone","activeZone","requestedZone","addZone","closeZone","directive","restrict","element","attrs","clickHandler","evt","toggleClass","find","on","off","template","$element","$document","design","templateUrl","files_version","saving","stopping","ubuntuImages","isNew","tooMany","showingAdvanced","connecting","errorMessage","source_type","keyring_filename","keyring_data","releases","selections","changed","ubuntuCoreImages","ubuntu_core","images","otherImages","other","generatedImages","customImages","ubuntuDeleteId","removingImage","getTitleIcon","showMirrorPath","isShowingAdvancedOptions","toggleAdvancedOptions","bothKeyringOptionsSet","showConnectButton","sourceChanged","currentSources","ubuntu","sources","prevNew","updateSource","regenerateUbuntuImages","connect","isConnectButtonDisabled","getSourceParams","selectDefaults","arch","fetch","fromJson","showConnectBlock","showSelections","getUbuntuLTSReleases","deleted","getUbuntuNonLTSReleases","getArchitectures","toggleSelection","showImagesTable","getResource","resource","resource_os","rtype","image","icon","beingDeleted","resourceId","downloading","name_split","regenerateUbuntuCoreImages","ubuntuCoreImage","checked","regenerateOtherImages","otherImage","_regenerateImages","image_id","regenerateGeneratedImages","regenerateCustomImages","ltsIsSelected","commissioningSeriesSelected","commissioning_series","cancelRemove","deleteImage","showStopImportButton","region_import_running","showSaveSelection","canSaveSelection","commissioning_series_being_deleted","commissioning_series_arches","getSaveSelectionText","canStopImport","getStopImportText","stopImport","saveSelection","saveUbuntu","getNewSelections","newObjs","oldSelections","newSelections","selection","source_len","toggleUbuntuCoreSelection","saveUbuntuCoreSelection","saveUbuntuCore","toggleOtherSelection","saveOtherSelection","saveOther","confirmDeleteImage","ready","startPolling","ubuntu_core_images","other_images","stopPolling","run","$templateCache","put","replace","require","maasCta","ngModel","ngModelCtrl","defaultTitle","select","shown","$setViewValue","getTitle","$modelValue","secondary","getOptionTitle","$viewChangeListeners","$eval","ngChange","stopPropagation","$apply","$compile","include","maasCardLoader","html","contents","maasCodeLines","attributes","empty","lines","newLine","insert","each","ngDisabled","maasEditing","focusHandler","blur","changeHandler","$render","$viewValue","unbind","$timeout","statuses","updateStatuses","controllerIds","checkImageStates","register","known","runningInterval","startTimeout","CHECK_INTERVAL","unregister","showSpinner","getImageStatus","ControllerImageStatusService","systemId","unwatch","registered","textOnly","getClass","countClass","classes","class_name","counter","updateStatusClass","serviceClass","serviceText","styleElement","document","createElement","innerHTML","getElementsByTagName","appendChild","BrowserService","transclude","maasDblClickOverlay","clickElement","overlay","tagName","createEvent","initMouseEvent","window","dispatchEvent","css","cursor","triggerHandler","overlayClick","preventDefault","overlayDblClick","browser","addClass","osInput","seriesInput","$attrs","osElement","seriesElement","switchTo","newOSValue","initialSkip","sel","val","split_value","removeClass","attr","modifyOption","first_option","hasClass","selectVisableOption","which","maasEnter","jasmine","Image","src","markDisconnected","connected","showDisconnected","clientError","wasConnected","watchConnection","isConnected","_error","disconnectedPromise","cancelTimeout","watchConnectionAndError","IPRangesManager","ipranges","iprangeManager","newRange","editIPRange","deleteIPRange","addRange","start_ip","end_ip","comment","cancelAddRange","ipRangeCanBeModified","range","isIPRangeInEditMode","ipRangeToggleEditMode","ipRangeClearEditMode","isIPRangeInDeleteMode","ipRangeEnterDeleteMode","ipRangeCancelDelete","ipRangeConfirmDelete","ipRangeSort","factory","visitPage","Bakery","WebHandler","BakeryStorage","localStorage","getBakery","loginURL","externalAuthURL","bakery","Info","VisitURL","nextPath","Accept","response","currentTarget","responseText","MAASFormController","savingKeys","managerMethod","cloneObject","clonedObj","isTableForm","tableForm","saveOnBlur","isSaving","showInputSaving","errorScope","registerField","unregisterField","startEditingField","stopEditingField","clearErrors","updatedObj","newObj","errorJson","errorField","setErrors","v","saveForm","newValue","inline","MAASGroupController","timeout","formController","keyIdx","pre","onChange","subtleText","subtle","missingAttrs","disabled","disableLabel","labelElement","labelWidth","labelLeft","append","labelInfo","infoWrapper","infoIcon","infoTooltip","inputWrapper","inputWidth","placeholder","inputElement","blurOnEnter","currentValue","placeholderEnabled","childScope","$new","_ngDisabled","_selectValue","_selectNgChange","_change","values","checkScope","_selectedValues","_checked","_toggleChecked","tagsScope","_tags","hiddenScope","_toggle","switchScope","_changed","onValue","offValue","sliderScope","_slider","inputClass","errorsElement","helpText","helpTextElement","setTimeout","focus","subtleTextElement","removeAttr","ul","ele","macAddressFormat","numbers","$parsers","$formatters","hideCheckboxes","onListingChange","onCheckAll","onCheck","SPINNER_STATUSES","table","filteredMachines","updateAllChecked","$machine","showNodeStatus","other_test_status","getReleaseTitle","os_release","getStatusText","releaseTitle","trim","$machines","e","NotificationsManager","notifications","dismiss","categories","categoryTitles","warning","success","info","categoryClasses","categoryNotifications","cns","category","notification","maasOsSelect","getSelectableReleases","allChoices","getSelectableKernels","kernels","os","osKernels","getDefaultOrFirst","array","defaultValue","weightValue","first","weightedPresent","setDefault","default_osystem","default_release","kernel","selectedOSChanged","selectedReleaseChanged","ngPlaceholder","hideType","podTypes","fieldsElement","updateFields","podType","$destroy","hideSlider","maasObjForm","getType","driver_type","req","input_type","replaceWith","maasPowerParameters","addKey","defaultConnect","createAuthorisationToken","token","injector","deleteKey","deleteAuthorisationToken","newScope","newElement","spinElement","prepend","prefsController","$sce","enableHttpProxy","usePeerProxy","proxy_type","releaseName","setText","maasReleaseOptions","onEraseChange","globalOptions","target","startTime","runTime","estimatedRunTime","scriptStatus","incrementCounter","seconds","floor","Date","minutes","hours","new_counter","scriptType","allScripts","getScripts","script","tags_string","onTagAdding","refocus","tagsInput","tagsInputScope","isolateScope","eventHandlers","input","change","for_hardware","getIcon","SSHKeysManager","groupedKeys","authId","sourceTitles","lp","gh","upload","openRow","rowMode","trustAsHtml","close","canImportKeys","importKeys","protocol","auth_id","__all__","confirmDelete","keyMap","groupObj","keysource","keysourceKey","switchHasError","filteredSwitches","switch_","$switch_","$switches","$attr","isToggled","toggleMenu","ngType","valid_types","LogService","reloadPage","enableAutoReload","site","href","oldValue","onResize","windowWidth","innerWidth","message","_loaded","_data","_polling","_nextPromise","_pollTimeout","_pollErrorTimeout","_pollEmptyTimeout","isLoaded","isPolling","_poll","_loadData","callMethod","newData","_pollAgain","pollTimeout","connection_error","Manager","_pk","_handler","registerNotifier","onNotify","NodesManager","service_ids","service_id","_metadataAttributes","_replaceItem","PollingManager","_batchKey","createDNSRecord","record","ip_addresses","updateDNSRecord","_items","EventsManager","nodeId","_nodeId","_factory","_maxDays","_managers","_initBatchLoadParameters","node_id","max_days","destroyManager","setMaximumDays","isLoading","_getManager","machine_actions","requested","polling","nextPromise","device_actions","request","region_controller_actions","rack_controller_actions","region_and_rack_controller_actions","min_hwe_kernels","replaceData","oldData","isEmpty","bond_options","newPowerType","oldPowerType","newItem","release_options","_autoReload","_type","_scopes","_getInternalData","isDataPolling","apply","waitingCount","_reloadFunc","registerHandler","disableAutoReload","unregisterHandler","storage_tags","NodeResultsManager","_node","hardware_type","_getStorageSubtext","deviceinfo","_updateObject","existing","updated","_addOrReplace","showing_menu","_processItem","result_section","result_type","subtext","hardware_type_results","physical_blockdevice","_getIndexOfItem","_updateMetadata","_removeItemByIdFromArray","_selectedItems","hw_type","ret","_area","has_surfaced","script_id","data_type","state","updateInterfaceForm","volume_group_id","blockdevice_id","partition_size","$cookies","MSG_TYPE","RESPONSE_TYPE","callbacks","requests","requestId","websocket","autoReconnect","retryTimeout","defaultConnectDefer","handlers","notifiers","newRequestId","func","unregisterNotifier","buildSocket","WebSocket","_buildUrl","onopen","onerror","onclose","onmessage","onMessage","_getProtocol","host","port","pathname","proto","csrftoken","base","newPath","newPort","encodeURIComponent","opened","errored","reject","msg","onResponse","request_id","remembered_request","handler","remember","send","toJson","getLargestRange","largest_range","ranges","equals","purpose","hasDynamicRange","matching","_authUser","authuser","_loadAuthUser","reloadItems","catch","addRackController","foreign_objects","standardFilter","mappings","cpu","cores","ram","memory","pod-id","isInteger","matches","lowerTerm","exact","negate","parseFloat","_matches","terms","term","matched","mapFunc","substring","no_match","field2","aDate","bDate","getTime","config","$interpolateProvider","$routeProvider","$httpProvider","versionedPath","startSymbol","endSymbol","defaults","xsrfCookieName","xsrfHeaderName","routes","when","redirectTo","reloadOnSearch","controllerAs","is_premium","superuser","otherwise","next","current","ga","q","arguments","userId","analytics_user_id","uuid","hash","regex","matcher","navigator","userAgent","UNITS","unit","converted","abs","toFixed","units","block_size","ipv4ToOctets","octets","part","pow","expandedAddress","groups","substr","ipv6ToGroups","jsonString","JSON","parse","_typeof","logging","logLevel","performance","_debug","debug","_log","_info","_warn","warn","formatMilliseconds","milliseconds","__log","args","Array","unshift","METADATA_ACTIONS","CREATE","UPDATE","_name_field","_isLoading","_extraLoadDefers","_extraReloadDefers","_actionQueue","_activeItem","_metadata","pk_value","len","_replaceItemInArray","_batchLoadItems","extra_func","callLoad","_resolveDefers","defersArray","_rejectDefers","clear","processActions","updatedIdx","updatedItem","updateItems","clearActiveItem","canProcessActions","_getMetadataValue","metadatas","_addMetadataValue","count","_removeMetadataValue","_updateMetadataArrayEntry","added","oldArray","_updateMetadataValueEntry","_updateMetadataEntry","oldItem","unloadManager","loadedManager","tryParsingJSON","SyntaxError","getPrintableString","dict","showNames","emptyFilter","_","getSplitSearch","fixedTerms","spanningParentheses","startIdx","searchTerms","_getFilterValueIndex","storedFilters","domainnamePattern","hostnamePattern","macPattern","ipv4Pattern","cidrMatcher","one","two","bits","domainname","macAddress","validateIPv4","validateIPv6","network","networkSplit","networkAddress","cidrBits","validateIPInRange","lowAddress","highAddress","ipOctets","lowOctets","highOctets"],"mappings":"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","file":"maas-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Device Controller\n */\n\nangular.module('MAAS').controller('AddDeviceController', [\n    '$scope', 'DevicesManager', 'SubnetsManager', 'DomainsManager',\n    'ManagerHelperService', 'ValidationService', function(\n        $scope, DevicesManager, SubnetsManager, DomainsManager,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addDeviceScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addDeviceScope = $scope;\n\n        // Set initial values.\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.viewable = false;\n        $scope.error = null;\n\n        // Device ip assignment options.\n        $scope.ipAssignments = [\n            {\n                name: \"external\",\n                title: \"External\"\n            },\n            {\n                name: \"dynamic\",\n                title: \"Dynamic\"\n            },\n            {\n                name: \"static\",\n                title: \"Static\"\n            }\n        ];\n\n        // Makes a new interface.\n        function makeInterface() {\n            return {\n                mac: \"\",\n                ipAssignment: null,\n                subnetId: null,\n                ipAddress: \"\"\n            };\n        }\n\n        // Makes a new device.\n        function newDevice(cloneDevice) {\n            if(angular.isObject(cloneDevice)) {\n                return {\n                    name: \"\",\n                    domain: cloneDevice.domain,\n                    interfaces: [makeInterface()]\n                };\n            } else {\n                return {\n                    name: \"\",\n                    domain: DomainsManager.getDefaultDomain(),\n                    interfaces: [makeInterface()]\n                };\n            }\n        }\n\n        // Input values.\n        $scope.device = null;\n\n        // Converts the device information from how it is held in the UI to\n        // how it is handled over the websocket.\n        function convertDeviceToProtocol(device) {\n            // Return the new object.\n            var convertedDevice = {\n                hostname: device.name,\n                domain: device.domain,\n                primary_mac: device.interfaces[0].mac,\n                extra_macs: [],\n                interfaces: []\n            };\n            var i;\n            for(i = 1; i < device.interfaces.length; i++) {\n                convertedDevice.extra_macs.push(device.interfaces[i].mac);\n            }\n            angular.forEach(device.interfaces, function(nic) {\n                convertedDevice.interfaces.push({\n                    mac: nic.mac,\n                    ip_assignment: nic.ipAssignment.name,\n                    ip_address: nic.ipAddress,\n                    \"subnet\": nic.subnetId\n                });\n            });\n            return convertedDevice;\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function() {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n            // Load subnets to get the available subnets.\n            ManagerHelperService.loadManagers(\n                    $scope, [SubnetsManager, DomainsManager]).then(function() {\n                $scope.device = newDevice($scope.device);\n                $scope.viewable = true;\n            });\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            ManagerHelperService.unloadManagers(\n                $scope, [SubnetsManager, DomainsManager]);\n            // Emit the hidden event.\n            $scope.$emit('addDeviceHidden');\n        };\n\n        // Returns true if the name is in error.\n        $scope.nameHasError = function() {\n            // If the name is empty don't show error.\n            if($scope.device === null || $scope.device.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateHostname($scope.device.name);\n        };\n\n        // Returns true if the MAC is in error.\n        $scope.macHasError = function(deviceInterface) {\n            // If the MAC is empty don't show error.\n            if(deviceInterface.mac.length === 0) {\n                return false;\n            }\n            // If the MAC is invalid show error.\n            if(!ValidationService.validateMAC(deviceInterface.mac)) {\n                return true;\n            }\n            // If the MAC is the same as another MAC show error.\n            var i;\n            for(i = 0; i < $scope.device.interfaces.length; i++) {\n                var isSelf = $scope.device.interfaces[i] === deviceInterface;\n                if(!isSelf &&\n                    $scope.device.interfaces[i].mac === deviceInterface.mac) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Returns true if the IP address is in error.\n        $scope.ipHasError = function(deviceInterface) {\n            // If the IP is empty don't show error.\n            if(deviceInterface.ipAddress.length === 0) {\n                return false;\n            }\n            // If ip address is invalid, then exit early.\n            if(!ValidationService.validateIP(deviceInterface.ipAddress)) {\n                return true;\n            }\n            var i, inNetwork;\n            if(angular.isObject(deviceInterface.ipAssignment)){\n                if(deviceInterface.ipAssignment.name === \"external\") {\n                    // External IP address cannot be within a known subnet.\n                    for(i = 0; i < $scope.subnets.length; i++) {\n                        inNetwork = ValidationService.validateIPInNetwork(\n                            deviceInterface.ipAddress,\n                            $scope.subnets[i].cidr);\n                        if(inNetwork) {\n                            return true;\n                        }\n                    }\n                } else if(deviceInterface.ipAssignment.name === \"static\" &&\n                    angular.isNumber(deviceInterface.subnetId)) {\n                    // Static IP address must be within a subnet.\n                    var subnet = SubnetsManager.getItemFromList(\n                        deviceInterface.subnetId);\n                    inNetwork = ValidationService.validateIPInNetwork(\n                        deviceInterface.ipAddress, subnet.cidr);\n                    if(!inNetwork) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return true when the device is missing information or invalid\n        // information.\n        $scope.deviceHasError = function() {\n            if($scope.device === null || $scope.device.name === '' ||\n                    $scope.nameHasError()) {\n                return true;\n            }\n\n            var i;\n            for(i = 0; i < $scope.device.interfaces.length; i++) {\n                var deviceInterface = $scope.device.interfaces[i];\n                if(deviceInterface.mac === '' ||\n                    $scope.macHasError(deviceInterface) ||\n                    !angular.isObject(deviceInterface.ipAssignment)) {\n                    return true;\n                }\n                var externalIpError = (\n                    deviceInterface.ipAssignment.name === \"external\" && (\n                        deviceInterface.ipAddress === '' ||\n                        $scope.ipHasError(deviceInterface)));\n                var staticIpError = (\n                    deviceInterface.ipAssignment.name === \"static\" && (\n                        !angular.isNumber(deviceInterface.subnetId) ||\n                        $scope.ipHasError(deviceInterface)));\n                if(externalIpError || staticIpError) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Adds new interface to device.\n        $scope.addInterface = function() {\n            $scope.device.interfaces.push(makeInterface());\n        };\n\n        // Returns true if the first interface in the device interfaces array.\n        $scope.isPrimaryInterface = function(deviceInterface) {\n            return $scope.device.interfaces.indexOf(deviceInterface) === 0;\n        };\n\n        // Removes the interface from the devices interfaces array.\n        $scope.deleteInterface = function(deviceInterface) {\n            // Don't remove the primary.\n            if($scope.isPrimaryInterface(deviceInterface)) {\n                return;\n            }\n            $scope.device.interfaces.splice(\n                $scope.device.interfaces.indexOf(deviceInterface), 1);\n        };\n\n        // Called when cancel clicked.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.device = newDevice();\n            $scope.hide();\n        };\n\n        // Called when save is clicked.\n        $scope.save = function(addAnother) {\n            // Do nothing if device in error.\n            if($scope.deviceHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Create the device.\n            var device = convertDeviceToProtocol($scope.device);\n            DevicesManager.create(device).then(function(device) {\n                if(addAnother) {\n                    $scope.device = newDevice($scope.device);\n                } else {\n                    $scope.device = newDevice();\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Domain Controller\n */\n\nangular.module('MAAS').controller('AddDomainController', [\n    '$scope', 'DomainsManager', 'ManagerHelperService',\n    'ValidationService', function($scope, DomainsManager,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addDomainScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addDomainScope = $scope;\n\n        // Set initial values.\n        $scope.viewable = false;\n        $scope.error = null;\n\n        // Makes a new domain.\n        function makeDomain() {\n            return {\n                name: \"\",\n                authoritative: true\n            };\n        }\n\n        // Initial domain.\n        $scope.domain = makeDomain();\n\n        // Converts the domain information from how it is held in the UI to\n        // how it is handled over the websocket.  Since they're identical, we\n        // just return a copy: some day, they might be different, so we retain\n        // the function against that day.\n        function convertDomainToProtocol(domain) {\n            return angular.copy(domain);\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function() {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n            $scope.domain = makeDomain();\n            $scope.viewable = true;\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            // Emit the hidden event.\n            $scope.$emit('addDomainHidden');\n        };\n\n        // Returns true if the name is in error.\n        $scope.nameHasError = function() {\n            // If the name is empty don't show error.\n            if($scope.domain.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateDomainName($scope.domain.name);\n        };\n\n        // Return true when the domain is missing information or invalid\n        // information.\n        $scope.domainHasError = function() {\n            if($scope.domain.name === '' || $scope.nameHasError()) {\n                return true;\n            }\n\n            return false;\n        };\n\n        // Called when cancel clicked.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.domain = makeDomain();\n            $scope.hide();\n        };\n\n        // Called when save is clicked.\n        $scope.save = function(addAnother) {\n            // Do nothing if domain in error.\n            if($scope.domainHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the domain.\n            $scope.error = null;\n\n            // Create the domain.\n            var domain = convertDomainToProtocol($scope.domain);\n            DomainsManager.create(domain).then(function() {\n                $scope.domain = makeDomain();\n                if(!addAnother) {\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Add Hardware Controller\n */\n\nangular.module('MAAS').controller('AddHardwareController', [\n    '$q', '$scope', '$http', 'ZonesManager', 'MachinesManager',\n    'GeneralManager', 'DomainsManager', 'RegionConnection',\n    'ManagerHelperService', 'ValidationService', function(\n        $q, $scope, $http, ZonesManager, MachinesManager,\n        GeneralManager, DomainsManager, RegionConnection,\n        ManagerHelperService, ValidationService) {\n\n        // Set the addHardwareScope in the parent, so it can call functions\n        // in this controller.\n        var parentScope = $scope.$parent;\n        parentScope.addHardwareScope = $scope;\n\n        // Set initial values.\n        $scope.viewable = false;\n        $scope.model = 'machine';\n        $scope.zones = ZonesManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.architectures = GeneralManager.getData(\"architectures\");\n        $scope.hwe_kernels = GeneralManager.getData(\"hwe_kernels\");\n        $scope.default_min_hwe_kernel = GeneralManager.getData(\n            \"default_min_hwe_kernel\");\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.error = null;\n        $scope.macAddressRegex = /^([0-9A-F]{2}[::]){5}([0-9A-F]{2})$/gmi;\n\n        // Input values.\n        $scope.machine = null;\n        $scope.chassis = null;\n\n        // Hard coded chassis types. This is because there is no method in\n        // MAAS to get a full list of supported chassis. This needs to be\n        // fixed ASAP.\n        var virshFields = [\n            {\n                name: 'hostname',\n                label: 'Address',\n                field_type: 'string',\n                \"default\": '',  // Using \"default\" to make lint happy.\n                choices: [],\n                required: true\n            },\n            {\n                name: 'password',\n                label: 'Password',\n                field_type: 'string',\n                \"default\": '',\n                choices: [],\n                required: false\n            },\n            {\n                name: 'prefix_filter',\n                label: 'Prefix filter',\n                field_type: 'string',\n                \"default\": '',\n                choices: [],\n                required: false\n            }\n        ];\n        $scope.chassisPowerTypes = [\n            {\n                name: 'mscm',\n                description: 'Moonshot Chassis Manager',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Host',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'powerkvm',\n                description: 'PowerKVM',\n                fields: virshFields\n            },\n            {\n                name: 'recs_box',\n                description: 'Christmann RECS|Box',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Hostname',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'port',\n                        label: 'Port',\n                        field_type: 'string',\n                        \"default\": '80',\n                        choices: [],\n                        required: false\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'seamicro15k',\n                description: 'SeaMicro 15000',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Hostname',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'power_control',\n                        label: 'Power Control',\n                        field_type: 'choice',\n                        \"default\": 'restapi2',\n                        choices: [\n                            ['restapi2', 'REST API V2.0'],\n                            ['restapi', 'REST API V0.9'],\n                            ['ipmi', 'IPMI']\n                        ],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'ucsm',\n                description: 'UCS Chassis Manager',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'URL',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'virsh',\n                description: 'Virsh (virtual systems)',\n                fields: virshFields\n            },\n            {\n                name: 'vmware',\n                description: 'VMware',\n                fields: [\n                    {\n                        name: 'hostname',\n                        label: 'Host',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'username',\n                        label: 'Username',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'password',\n                        label: 'Password',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: true\n                    },\n                    {\n                        name: 'prefix_filter',\n                        label: 'Prefix filter',\n                        field_type: 'string',\n                        \"default\": '',\n                        choices: [],\n                        required: false\n                    }\n                ]\n            }\n        ];\n\n        // Get the default zone from the loaded zones.\n        function defaultZone() {\n            if($scope.zones.length === 0) {\n                return null;\n            } else {\n                return $scope.zones[0];\n            }\n        }\n\n        // Get the default architecture from the loaded architectures.\n        function defaultArchitecture() {\n            if($scope.architectures.length === 0) {\n                return '';\n            } else {\n                // Return amd64/generic first if available.\n                var i;\n                for(i = 0; i < $scope.architectures.length; i++) {\n                    if($scope.architectures[i] === \"amd64/generic\") {\n                        return $scope.architectures[i];\n                    }\n                }\n                return $scope.architectures[0];\n            }\n        }\n\n        // Return a new MAC address object.\n        function newMAC() {\n            return {\n                mac: '',\n                error: false\n            };\n        }\n\n        // Return a new machine object.\n        function newMachine(cloneMachine) {\n            // Clone the machine instead of just creating a new one.\n            // This helps the user by already having the previous selected\n            // items selected for the new machine.\n            if(angular.isObject(cloneMachine)) {\n                return {\n                    name: '',\n                    domain: cloneMachine.domain,\n                    macs: [newMAC()],\n                    zone: cloneMachine.zone,\n                    architecture: cloneMachine.architecture,\n                    min_hwe_kernel: cloneMachine.min_hwe_kernel,\n                    power: {\n                        type: cloneMachine.power.type,\n                        parameters: {}\n                    }\n                };\n            }\n\n            // No clone machine. So create a new blank machine.\n            return {\n                name: '',\n                domain: DomainsManager.getDefaultDomain(),\n                macs: [newMAC()],\n                zone: defaultZone(),\n                architecture: defaultArchitecture(),\n                min_hwe_kernel: $scope.default_min_hwe_kernel.text,\n                power: {\n                    type: null,\n                    parameters: {}\n                }\n            };\n        }\n\n        // Return a new chassis object.\n        function newChassis(cloneChassis) {\n            // Clone the chassis instead of just creating a new one.\n            // This helps the user by already having the previous selected\n            // items selected for the new machine.\n            if(angular.isObject(cloneChassis)) {\n                return {\n                    domain: cloneChassis.domain,\n                    power: {\n                        type: null,\n                        parameters: {}\n                    }\n                };\n            } else {\n                return {\n                    domain: DomainsManager.getDefaultDomain(),\n                    power: {\n                        type: null,\n                        parameters: {}\n                    }\n                };\n            }\n        }\n\n        // Converts the machine information from how it is held in the UI to\n        // how it is handled over the websocket.\n        function convertMachineToProtocol(machine) {\n            // Convert the mac addresses.\n            var macs = angular.copy(machine.macs);\n            var pxe_mac = macs.shift().mac;\n            var extra_macs = macs.map(function(mac) { return mac.mac; });\n\n            // Return the new object.\n            return {\n                hostname: machine.name,\n                domain: machine.domain,\n                architecture: machine.architecture,\n                min_hwe_kernel: machine.min_hwe_kernel,\n                pxe_mac: pxe_mac,\n                extra_macs: extra_macs,\n                power_type: machine.power.type.name,\n                power_parameters: angular.copy(machine.power.parameters),\n                zone: {\n                    id: machine.zone.id,\n                    name: machine.zone.name\n                }\n            };\n        }\n\n        // Validate that all the parameters are there for the given power type.\n        function powerParametersHasError(power_type, parameters) {\n            var i;\n            for(i = 0; i < power_type.fields.length; i++) {\n                var field = power_type.fields[i];\n                var value = parameters[field.name];\n                if(field.required) {\n                    if(angular.isUndefined(value) || value === '') {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        // Called by the parent scope when this controller is viewable.\n        $scope.show = function(mode) {\n            // Exit early if already viewable.\n            if($scope.viewable) {\n                return;\n            }\n\n            $scope.mode = mode;\n\n            var loadedItems = false, loadedManagers = false;\n            var defer = $q.defer();\n            defer.promise.then(function() {\n                   // Add the first machine and chassis.\n                $scope.machine = newMachine($scope.machine);\n                $scope.chassis = newChassis($scope.chassis);\n                $scope.error = null;\n\n                // If the machine doesn't have an architecture\n                // set then it was created before all of the\n                // architectures were loaded. Set the default\n                // architecture for that machine.\n                if(angular.isObject($scope.machine) &&\n                    $scope.machine.architecture === '') {\n                    $scope.machine.architecture = defaultArchitecture();\n                }\n                $scope.viewable = true;\n            });\n\n            // The parent scope has already loaded the GeneralManager. If the\n            // general manager is reloaded all items from the parents scope\n            // will be reloaded as well. Call loadItems so only the items\n            // the add hardware form cares about are loaded.\n            GeneralManager.loadItems([\n                \"architectures\", \"hwe_kernels\", \"default_min_hwe_kernel\"\n            ]).then(function() {\n                loadedItems = true;\n                if(loadedManagers) {\n                    defer.resolve();\n                }\n            });\n            ManagerHelperService.loadManagers(\n                $scope, [ZonesManager, DomainsManager]).then(function() {\n                    loadedManagers = true;\n                    if(loadedItems) {\n                        defer.resolve();\n                    }\n                });\n        };\n\n        // Called by the parent scope when this controller is hidden.\n        $scope.hide = function() {\n            $scope.viewable = false;\n\n            ManagerHelperService.unloadManagers(\n                $scope, [ZonesManager, DomainsManager]);\n\n            // Emit the hidden event.\n            $scope.$emit('addHardwareHidden');\n        };\n\n        // Return True when architectures loaded and in machine mode.\n        $scope.showMachine = function() {\n            if($scope.architectures.length === 0) {\n                return false;\n            }\n            return $scope.mode === \"machine\";\n        };\n\n        // Return True when architectures loaded and in chassis mode.\n        $scope.showChassis = function() {\n            if($scope.architectures.length === 0) {\n                return false;\n            }\n            return $scope.mode === \"chassis\";\n        };\n\n        // Add a new MAC address to the machine.\n        $scope.addMac = function() {\n            $scope.machine.macs.push(newMAC());\n        };\n\n        // Remove a MAC address to the machine.\n        $scope.removeMac = function(mac) {\n            var idx = $scope.machine.macs.indexOf(mac);\n            if(idx > -1) {\n                $scope.machine.macs.splice(idx, 1);\n            }\n        };\n\n        // Return true if the machine name is invalid.\n        $scope.invalidName = function() {\n            // Not invalid if empty.\n            if($scope.machine.name.length === 0) {\n                return false;\n            }\n            return !ValidationService.validateHostname($scope.machine.name);\n        };\n\n        // Validate that the mac address is valid.\n        $scope.validateMac = function(mac) {\n            if(mac.mac === '') {\n                mac.error = false;\n            } else {\n                mac.error = !ValidationService.validateMAC(mac.mac);\n            }\n        };\n\n        // Return true when the machine is missing information or invalid\n        // information.\n        $scope.machineHasError = function() {\n            // Early-out for errors.\n            in_error = (\n                $scope.machine === null ||\n                $scope.machine.zone === null ||\n                $scope.machine.architecture === '' ||\n                $scope.machine.power.type === null ||\n                $scope.invalidName($scope.machine));\n            if(in_error) {\n                return in_error;\n            }\n\n            // Make sure none of the mac addresses are in error. The first one\n            // cannot be blank the remaining are allowed to be empty.\n            if($scope.machine.macs[0].mac === '' ||\n                $scope.machine.macs[0].error) {\n                return true;\n            }\n            var i;\n            for(i = 1; i < $scope.machine.macs.length; i++) {\n                var mac = $scope.machine.macs[i];\n                if(mac.mac !== '' && mac.error) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return true if the chassis has errors.\n        $scope.chassisHasErrors = function() {\n            // Early-out for errors.\n            in_error = (\n                $scope.chassis === null ||\n                $scope.chassis.power.type === null);\n            if(in_error) {\n                return in_error;\n            }\n            return powerParametersHasError(\n                $scope.chassis.power.type, $scope.chassis.power.parameters);\n        };\n\n        // Called when the cancel button is pressed.\n        $scope.cancel = function() {\n            $scope.error = null;\n            $scope.machine = newMachine();\n            $scope.chassis = newChassis();\n\n            // Hide the controller.\n            $scope.hide();\n        };\n\n        // Called to perform the saving of the machine.\n        $scope.saveMachine = function(addAnother) {\n            // Does nothing if machine has errors.\n            if($scope.machineHasError()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Add the machine.\n            MachinesManager.create(\n                convertMachineToProtocol($scope.machine)).then(\n                    function() {\n                        if(addAnother) {\n                            $scope.machine = newMachine($scope.machine);\n                        } else {\n                            $scope.machine = newMachine();\n\n                            // Hide the scope if not adding another.\n                            $scope.hide();\n                        }\n                    }, function(error) {\n                        $scope.error =\n                            ManagerHelperService.parseValidationError(error);\n                    });\n        };\n\n        // Called to perform the saving of the chassis.\n        $scope.saveChassis = function(addAnother) {\n            // Does nothing if error exists.\n            if($scope.chassisHasErrors()) {\n                return;\n            }\n\n            // Clear the error so it can be set again, if it fails to save\n            // the device.\n            $scope.error = null;\n\n            // Create the parameters.\n            var params = angular.copy($scope.chassis.power.parameters);\n            params.chassis_type = $scope.chassis.power.type.name;\n            params.domain = $scope.chassis.domain.name;\n\n            // XXX ltrager 24-02-2016: Something is adding the username field\n            // even though its not defined in virshFields. The API rejects\n            // requests with improper fields so remove it before we send the\n            // request.\n            if(\n                    params.chassis_type === \"powerkvm\" ||\n                    params.chassis_type === \"virsh\") {\n                delete params.username;\n            }\n            // Add the chassis. For now we use the API as the websocket doesn't\n            // support probe and enlist.\n            $http({\n                method: 'POST',\n                url: 'api/2.0/machines/?op=add_chassis',\n                data: $.param(params),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function() {\n                if(addAnother) {\n                    $scope.chassis = newChassis($scope.chassis);\n                } else {\n                    $scope.chassis = newChassis();\n                    // Hide the scope if not adding another.\n                    $scope.hide();\n                }\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error.data);\n            });\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Dashboard Controller\n */\n\nangular.module('MAAS').controller('DashboardController', [\n    '$scope', '$window', '$rootScope', '$routeParams', '$location',\n    'DiscoveriesManager', 'DomainsManager', 'MachinesManager',\n    'DevicesManager', 'SubnetsManager', 'VLANsManager', 'ConfigsManager',\n    'ManagerHelperService',\n    function($scope, $window, $rootScope, $routeParams, $location,\n             DiscoveriesManager, DomainsManager, MachinesManager,\n             DevicesManager, SubnetsManager, VLANsManager, ConfigsManager,\n             ManagerHelperService) {\n\n        // Default device IP options.\n        var deviceIPOptions = [\n            ['static', 'Static'],\n            ['dynamic', 'Dynamic'],\n            ['external', 'External']\n        ];\n\n        // Set title and page.\n        $rootScope.title = \"Dashboard\";\n        $rootScope.page = \"dashboard\";\n\n        // Set initial values.\n        $scope.loaded = false;\n        $scope.discoveredDevices = DiscoveriesManager.getItems();\n        $scope.domains = DomainsManager.getItems();\n        $scope.machines = MachinesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.configManager = ConfigsManager;\n        $scope.networkDiscovery = null;\n        $scope.column = 'mac';\n        $scope.selectedDevice = null;\n        $scope.convertTo = null;\n\n        // Set default predicate to last_seen.\n        $scope.predicate = $scope.last_seen;\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Proxy manager that the maas-obj-form directive uses to call the\n        // correct method based on current type.\n        $scope.proxyManager = {\n            updateItem: function(params) {\n                if($scope.convertTo.type === 'device') {\n                    return DevicesManager.createItem(params);\n                } else if($scope.convertTo.type === 'interface') {\n                    return DevicesManager.createInterface(params);\n                } else {\n                    throw new Error(\"Unknown type: \" + $scope.convertTo.type);\n                }\n            }\n        };\n\n        // Return the name name for the Discovery.\n        $scope.getDiscoveryName = function(discovery) {\n            if(discovery.hostname === null) {\n                return 'unknown';\n            }\n            else {\n                return discovery.hostname;\n            }\n        };\n\n        // Get the name of the subnet from its ID.\n        $scope.getSubnetName = function(subnetId) {\n            var subnet = SubnetsManager.getItemFromList(subnetId);\n            return SubnetsManager.getName(subnet);\n        };\n\n        // Get the name of the VLAN from its ID.\n        $scope.getVLANName = function(vlanId) {\n            var vlan = VLANsManager.getItemFromList(vlanId);\n            return VLANsManager.getName(vlan);\n        };\n\n        // Sets selected device\n        $scope.toggleSelected = function(deviceId) {\n            if($scope.selectedDevice === deviceId) {\n                $scope.selectedDevice = null;\n            } else {\n                var discovered = DiscoveriesManager.getItemFromList(deviceId);\n                var hostname = $scope.getDiscoveryName(discovered);\n                var domain;\n                if(hostname === 'unknown') {\n                    hostname = '';\n                }\n                if(hostname.indexOf('.') > 0) {\n                    domain = DomainsManager.getDomainByName(\n                        hostname.slice(hostname.indexOf('.') + 1));\n                    hostname = hostname.split(\".\", 1)[0];\n                    if(domain === null) {\n                        domain = DomainsManager.getDefaultDomain();\n                    }\n                } else {\n                    domain = DomainsManager.getDefaultDomain();\n                }\n                $scope.convertTo = {\n                    type: 'device',\n                    hostname: hostname,\n                    domain: domain,\n                    parent: null,\n                    ip_assignment: 'dynamic',\n                    goTo: false,\n                    saved: false,\n                    deviceIPOptions: deviceIPOptions.filter(\n                        function(option) {\n                            // Filter the options to not include static if\n                            // a subnet is not defined for this discovered\n                            // item.\n                            if(option[0] === 'static' &&\n                                !angular.isNumber(discovered.subnet)) {\n                                return false;\n                            } else {\n                                return true;\n                            }\n                        })\n                };\n                $scope.selectedDevice = deviceId;\n            }\n        };\n\n        // Called before the createItem is called to adjust the values\n        // passed over the call.\n        $scope.preProcess = function(item) {\n            var discovered = DiscoveriesManager.getItemFromList(\n                $scope.selectedDevice);\n            item = angular.copy(item);\n            if($scope.convertTo.type === 'device') {\n                item.primary_mac = discovered.mac_address;\n                item.extra_macs = [];\n                item.interfaces = [{\n                    mac: discovered.mac_address,\n                    ip_assignment: item.ip_assignment,\n                    ip_address: discovered.ip,\n                    subnet: discovered.subnet\n                }];\n            } else if($scope.convertTo.type === 'interface') {\n                item.mac_address = discovered.mac_address;\n                item.ip_address = discovered.ip;\n                item.subnet = discovered.subnet;\n            }\n            return item;\n        };\n\n        // Called after the createItem has been successful.\n        $scope.afterSave = function(obj) {\n            DiscoveriesManager._removeItem($scope.selectedDevice);\n            $scope.selectedDevice = null;\n            $scope.convertTo.hostname = obj.hostname;\n            $scope.convertTo.parent = obj.parent;\n            $scope.convertTo.saved = true;\n            if($scope.convertTo.goTo) {\n                if(angular.isString(obj.parent)) {\n                    $location.path('/device/' + obj.parent);\n                } else {\n                    $location.path('/devices/');\n                }\n            }\n        };\n\n        // Load all the managers and get the network discovery config item.\n        ManagerHelperService.loadManagers($scope, [\n            DiscoveriesManager, DomainsManager, MachinesManager,\n            DevicesManager, SubnetsManager, VLANsManager, ConfigsManager]).then(\n            function() {\n                $scope.loaded = true;\n                $scope.networkDiscovery = ConfigsManager.getItemFromList(\n                    'network_discovery');\n            });\n    }\n]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domain Details Controller\n */\n\nangular.module('MAAS').controller('DomainDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'DomainsManager', 'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $location,\n        DomainsManager, UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"domains\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.domain = null;\n        $scope.editSummary = false;\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.action = null;\n        $scope.editRow = null;\n        $scope.deleteRow = null;\n\n        $scope.domainsManager = DomainsManager;\n        $scope.newObject = {};\n\n        $scope.supportedRecordTypes = [\n            'A', 'AAAA', 'CNAME', 'MX', 'NS', 'SRV', 'SSHFP', 'TXT'\n        ];\n\n        // Set default predicate to name.\n        $scope.predicate = 'name';\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is clicked in the domain summary.\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        $scope.isRecordAutogenerated = function(row) {\n            // We can't edit records that don't have a dnsresource_id.\n            // (If the row doesn't have one, it has probably been automatically\n            // generated by means of a deployed node, or some other reason.)\n            return !row.dnsresource_id;\n        };\n\n        $scope.editRecord = function(row) {\n            $scope.editRow = row;\n            // We'll need the original values to determine if an update is\n            // required.\n            row.previous_rrdata = row.rrdata;\n            row.previous_rrtype = row.rrtype;\n            row.previous_name = row.name;\n            row.previous_ttl = row.ttl;\n            $scope.deleteRow = null;\n        };\n\n        $scope.removeRecord = function(row) {\n            $scope.deleteRow = row;\n            $scope.editRow = null;\n        };\n\n        $scope.confirmRemoveRecord = function(row) {\n            // The websocket handler needs the domain ID, so add it in.\n            row.domain = $scope.domain.id;\n            $scope.domainsManager.deleteDNSRecord(row);\n            $scope.stopEditingRow();\n        };\n\n        $scope.stopEditingRow = function() {\n            $scope.editRow = null;\n            $scope.deleteRow = null;\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.domain.displayname;\n        }\n\n        // Called when the domain has been loaded.\n        function domainLoaded(domain) {\n            $scope.domain = domain;\n            $scope.loaded = true;\n\n            updateTitle();\n        }\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default domain.\n        $scope.isDefaultDomain = function() {\n            if(angular.isObject($scope.domain)) {\n                return $scope.domain.id === 0;\n            }\n            return false;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.domain)) {\n                return $scope.domain.rrsets.length === 0;\n            }\n            return false;\n        };\n\n        // Called when the delete domain button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.actionInProgress = true;\n            $scope.action = 'delete';\n        };\n\n        // Called when the add record button is pressed.\n        $scope.addRecordButton = function() {\n            $scope.error = null;\n            $scope.actionInProgress = true;\n            $scope.action = 'add_record';\n        };\n\n        // Called when the cancel delete domain button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionInProgress = false;\n        };\n\n        // Called when the confirm delete domain button is pressed.\n        $scope.deleteConfirmButton = function() {\n            DomainsManager.deleteDomain($scope.domain).then(function() {\n                $scope.actionInProgress = false;\n                $location.path(\"/domains\");\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers(\n            $scope, [DomainsManager, UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this domain set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeDomain = DomainsManager.getActiveItem();\n            var requestedDomain = parseInt($routeParams.domain_id, 10);\n            if(isNaN(requestedDomain)) {\n                ErrorService.raiseError(\"Invalid domain identifier.\");\n            } else if(angular.isObject(activeDomain) &&\n                activeDomain.id === requestedDomain) {\n                domainLoaded(activeDomain);\n            } else {\n                DomainsManager.setActiveItem(\n                    requestedDomain).then(function(domain) {\n                        domainLoaded(domain);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domains List Controller\n */\n\nangular.module('MAAS').controller('DomainsListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', 'DomainsManager',\n    'UsersManager', 'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, $filter, DomainsManager,\n        UsersManager, ManagerHelperService) {\n\n        // Load the filters that are used inside the controller.\n\n        // Set title and page.\n        $rootScope.title = \"DNS\";\n        $rootScope.page = \"domains\";\n\n        // Set initial values.\n        $scope.domains = DomainsManager.getItems();\n        $scope.currentpage = \"domains\";\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.loading = true;\n\n        // This will hold the AddDomainController once it's initialized.  The\n        // controller will set this variable as it's always a child of this\n        // scope.\n        $scope.addDomainScope = null;\n\n        // Called when the add domain button is pressed.\n        $scope.addDomain = function() {\n            $scope.addDomainScope.show();\n        };\n\n        // Called when the cancel add domain button is pressed.\n        $scope.cancelAddDomain = function() {\n            $scope.addDomainScope.cancel();\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        ManagerHelperService.loadManagers(\n            $scope, [DomainsManager, UsersManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n        }\n    ]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Fabric Details Controller\n */\n\nangular.module('MAAS').controller('FabricDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'FabricsManager', 'VLANsManager', 'SubnetsManager', 'SpacesManager',\n    'ControllersManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        FabricsManager, VLANsManager, SubnetsManager, SpacesManager,\n        ControllersManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.fabric = null;\n        $scope.fabricManager = FabricsManager;\n        $scope.editSummary = false;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.loaded = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.fabric.name;\n        }\n\n        // Called when the \"edit\" button is cliked in the fabric summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the fabric summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Called when the fabric has been loaded.\n        function fabricLoaded(fabric) {\n            if(angular.isObject(fabric)) {\n                $scope.fabric = fabric;\n                updateTitle();\n                $scope.$watch(\"vlans\", updateVLANs, true);\n                $scope.$watch(\"subnets\", updateVLANs, true);\n                $scope.$watch(\"controllers\", updateVLANs, true);\n                $scope.loaded = true;\n                // Initial table sort order.\n                $scope.predicate = \"['vlan_name', 'vlan.id', 'subnet_name']\";\n            }\n        }\n\n        // Generate a table that can easily be rendered in the view.\n        function updateVLANs() {\n            var rows = [];\n            var racks = {};\n            angular.forEach($filter('filter')(\n                    $scope.vlans, {fabric:$scope.fabric.id}, true),\n                    function(vlan) {\n                var subnets =\n                    $filter('filter')($scope.subnets, {vlan:vlan.id}, true);\n                if(subnets.length > 0) {\n                    angular.forEach(subnets, function(subnet) {\n                        var space = SpacesManager.getItemFromList(subnet.space);\n                        var space_name = (space === null) ?\n                            \"(undefined)\" : space.name;\n                        var row = {\n                            vlan: vlan,\n                            vlan_name: VLANsManager.getName(vlan),\n                            subnet: subnet,\n                            subnet_name: SubnetsManager.getName(subnet),\n                            space: space,\n                            space_name: space_name\n                        };\n                        rows.push(row);\n                    });\n                } else {\n                    // If there are no subnets, populate a row based on the\n                    // information we have (just the VLAN).\n                    var row = {\n                        vlan: vlan,\n                        vlan_name: VLANsManager.getName(vlan),\n                        subnet: null,\n                        subnet_name: null,\n                        space: null,\n                        space_name: null\n                    };\n                    rows.push(row);\n                }\n                // Enumerate racks for vlan.\n                angular.forEach(vlan.rack_sids, function(rack_sid) {\n                    var rack = ControllersManager.getItemFromList(rack_sid);\n                    if(angular.isObject(rack)) {\n                        racks[rack.system_id] = rack;\n                    }\n                });\n            });\n            $scope.rows = rows;\n            $scope.racks = Object.keys(racks).map(function(key) {\n                return racks[key];\n            });\n        }\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default Fabric\n        $scope.isDefaultFabric = function() {\n            if(!angular.isObject($scope.fabric)) {\n                return false;\n            }\n            return $scope.fabric.id === 0;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.fabric)) {\n                return $scope.fabric.id !== 0;\n            }\n            return false;\n        };\n\n        // Called when the delete fabric button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete fabric button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete fabric button is pressed.\n        $scope.deleteConfirmButton = function() {\n            FabricsManager.deleteFabric($scope.fabric).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/networks\");\n                $location.search('by', 'fabric');\n            }, function(reply) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(reply.error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            FabricsManager, VLANsManager, SubnetsManager, SpacesManager,\n            ControllersManager, UsersManager]).then(\n            function() {\n                // Possibly redirected from another controller that already had\n                // this fabric set to active. Only call setActiveItem if not\n                // already the activeItem.\n                var activeFabric = FabricsManager.getActiveItem();\n                var requestedFabric = parseInt($routeParams.fabric_id, 10);\n\n                if(isNaN(requestedFabric)) {\n                    ErrorService.raiseError(\"Invalid fabric identifier.\");\n                } else if(angular.isObject(activeFabric) &&\n                    activeFabric.id === requestedFabric) {\n                    fabricLoaded(activeFabric);\n                } else {\n                    FabricsManager.setActiveItem(\n                        requestedFabric).then(function(fabric) {\n                            fabricLoaded(fabric);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                }\n            });\n    }\n]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Images Controller\n */\n\nangular.module('MAAS').controller('ImagesController', [\n    '$rootScope', '$scope', 'BootResourcesManager',\n    'ConfigsManager', 'UsersManager', 'ManagerHelperService', function(\n        $rootScope, $scope, BootResourcesManager,\n        ConfigsManager, UsersManager, ManagerHelperService) {\n\n            $rootScope.page = \"images\";\n            $rootScope.title = \"Loading...\";\n\n            $scope.loading = true;\n            $scope.bootResources = BootResourcesManager.getData();\n            $scope.configManager = ConfigsManager;\n            $scope.autoImport = null;\n\n            // Return true if the user is a super user.\n            $scope.isSuperUser = function() {\n                return UsersManager.isSuperUser();\n            };\n\n            // Load the required managers.\n            ManagerHelperService.loadManagers(\n                $scope, [ConfigsManager, UsersManager]).then(function() {\n                $scope.autoImport = ConfigsManager.getItemFromList(\n                    \"boot_images_auto_import\");\n            });\n\n            // The boot-images directive will load the bootResources manager,\n            // we just watch until resources is set. That means the page is\n            // loaded.\n            $scope.$watch(\"bootResources.resources\", function() {\n                if(angular.isArray($scope.bootResources.resources)) {\n                    $scope.loading = false;\n                    $rootScope.title = \"Images\";\n                }\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Intro Controller\n */\n\nangular.module('MAAS').controller('IntroController', [\n    '$rootScope', '$scope', '$window', '$location',\n    'ConfigsManager', 'PackageRepositoriesManager', 'BootResourcesManager',\n    'ManagerHelperService',\n    function(\n        $rootScope, $scope, $window, $location,\n        ConfigsManager, PackageRepositoriesManager, BootResourcesManager,\n        ManagerHelperService) {\n\n            $rootScope.page = \"intro\";\n            $rootScope.title = \"Welcome\";\n\n            $scope.loading = true;\n            $scope.configManager = ConfigsManager;\n            $scope.repoManager = PackageRepositoriesManager;\n            $scope.bootResources = BootResourcesManager.getData();\n            $scope.hasImages = false;\n            $scope.maasName = null;\n            $scope.upstreamDNS = null;\n            $scope.mainArchive = null;\n            $scope.portsArchive = null;\n            $scope.httpProxy = null;\n\n            // Set the skip function on the rootScope to allow skipping the\n            // intro view.\n            $rootScope.skip = function() {\n                $scope.clickContinue(true);\n            };\n\n            // Return true if the welcome section is not in error.\n            $scope.welcomeInError = function() {\n                var form = $scope.maasName.$maasForm;\n                if(angular.isObject(form)) {\n                    return form.hasErrors();\n                } else {\n                    return false;\n                }\n            };\n\n            // Return true if the network section is in error.\n            $scope.networkInError = function() {\n                var inError = false;\n                var objs = [\n                    $scope.upstreamDNS,\n                    $scope.mainArchive,\n                    $scope.portsArchive,\n                    $scope.httpProxy];\n                angular.forEach(objs, function(obj) {\n                    var form = obj.$maasForm;\n                    if(angular.isObject(form) && form.hasErrors()) {\n                        inError = true;\n                    }\n                });\n                return inError;\n            };\n\n            // Return true if continue can be clicked.\n            $scope.canContinue = function() {\n                return (\n                    !$scope.welcomeInError() &&\n                    !$scope.networkInError() &&\n                    $scope.hasImages);\n            };\n\n            // Called when continue button is clicked.\n            $scope.clickContinue = function(force) {\n                if(angular.isUndefined(force)) {\n                    force = false;\n                }\n                if(force || $scope.canContinue()) {\n                    ConfigsManager.updateItem({\n                        'name': 'completed_intro',\n                        'value': true\n                    }).then(function() {\n                        // Reload the whole page so that the MAAS_config will be\n                        // set to the new value.\n                        $window.location.reload();\n                    });\n                }\n            };\n\n            // If intro has been completed redirect to '/'.\n            if(MAAS_config.completed_intro) {\n                $location.path('/');\n            } else {\n                // Load the required managers.\n                var managers = [ConfigsManager, PackageRepositoriesManager];\n                ManagerHelperService.loadManagers(\n                    $scope, managers).then(function() {\n                    $scope.loading = false;\n                    $scope.maasName = ConfigsManager.getItemFromList(\n                        \"maas_name\");\n                    $scope.upstreamDNS = ConfigsManager.getItemFromList(\n                        \"upstream_dns\");\n                    $scope.httpProxy = ConfigsManager.getItemFromList(\n                        \"http_proxy\");\n                    $scope.mainArchive = (\n                        PackageRepositoriesManager.getItems().filter(\n                            function(repo) {\n                                return (repo['default'] &&\n                                    repo.name === \"main_archive\");\n                            })[0]);\n                    $scope.portsArchive = (\n                        PackageRepositoriesManager.getItems().filter(\n                            function(repo) {\n                                return (repo['default'] &&\n                                    repo.name === \"ports_archive\");\n                            })[0]);\n                });\n\n                // Don't load the boot resources as the boot-images directive\n                // performs that action. Just watch and make sure that\n                // at least one resource exists before continuing.\n                $scope.$watch(\"bootResources.resources\", function() {\n                    if(angular.isArray($scope.bootResources.resources) &&\n                        $scope.bootResources.resources.length > 0) {\n                        $scope.hasImages = true;\n                    } else {\n                        $scope.hasImages = false;\n                    }\n                });\n            }\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Intro Controller\n */\n\nangular.module('MAAS').controller('IntroUserController', [\n    '$rootScope', '$scope', '$window', '$location',\n    'UsersManager', 'ManagerHelperService',\n    function(\n        $rootScope, $scope, $window, $location,\n        UsersManager, ManagerHelperService) {\n\n            $rootScope.page = \"intro\";\n            $rootScope.title = \"Welcome\";\n\n            $scope.loading = true;\n            $scope.user = null;\n\n            // Set the skip function on the rootScope to allow skipping the\n            // intro view.\n            $rootScope.skip = function() {\n                $scope.clickContinue(true);\n            };\n\n            // Return true if super user.\n            $scope.isSuperUser = function() {\n                return UsersManager.isSuperUser();\n            };\n\n            // Return true if continue can be clicked.\n            $scope.canContinue = function() {\n                return $scope.user.sshkeys_count > 0;\n            };\n\n            // Called when continue button is clicked.\n            $scope.clickContinue = function(force) {\n                if(angular.isUndefined(force)) {\n                    force = false;\n                }\n                if(force || $scope.canContinue()) {\n                    UsersManager.markIntroComplete().then(function() {\n                        // Reload the whole page so that the MAAS_config will\n                        // be set to the new value.\n                        $window.location.reload();\n                    });\n                }\n            };\n\n            // If intro has been completed redirect to '/'.\n            if(MAAS_config.user_completed_intro) {\n                $location.path('/');\n            } else {\n                // Load the required managers.\n                ManagerHelperService.loadManager(\n                    $scope, UsersManager).then(function() {\n                        $scope.loading = false;\n                        $scope.user = UsersManager.getAuthUser();\n                    });\n            }\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Networks List Controller\n */\n\nangular.module('MAAS').controller('NetworksListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'SubnetsManager', 'FabricsManager', 'SpacesManager', 'VLANsManager',\n    'UsersManager', 'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, $filter, $location,\n             SubnetsManager, FabricsManager, SpacesManager, VLANsManager,\n             UsersManager, ManagerHelperService) {\n\n        // Load the filters that are used inside the controller.\n        var filterByVLAN = $filter('filterByVLAN');\n        var filterByFabric = $filter('filterByFabric');\n        var filterBySpace = $filter('filterBySpace');\n        var filterByNullSpace = $filter('filterByNullSpace');\n\n        // Set title and page.\n        $rootScope.title = \"Subnets\";\n        $rootScope.page = \"networks\";\n\n        // Set the initial value of $scope.groupBy based on the URL\n        // parameters, but default to the 'fabric' groupBy if it's not found.\n        $scope.getURLParameters = function() {\n            if(angular.isString($location.search().by)) {\n                $scope.groupBy = $location.search().by;\n            } else {\n                $scope.groupBy = 'fabric';\n            }\n        };\n\n        $scope.ADD_FABRIC_ACTION = {\n            name: \"add_fabric\",\n            title: \"Fabric\",\n            selectedTitle: \"Add fabric\",\n            objectName: 'fabric'\n        };\n        $scope.ADD_VLAN_ACTION = {\n            name: \"add_vlan\",\n            title: \"VLAN\",\n            selectedTitle: \"Add VLAN\",\n            objectName: 'vlan'\n        };\n        $scope.ADD_SPACE_ACTION = {\n            name: \"add_space\",\n            title: \"Space\",\n            selectedTitle: \"Add space\",\n            objectName: 'space'\n        };\n        $scope.ADD_SUBNET_ACTION = {\n            name: \"add_subnet\",\n            title: \"Subnet\",\n            selectedTitle: \"Add subnet\",\n            objectName: 'subnet'\n        };\n\n        $scope.getURLParameters();\n\n        // Set initial values.\n        $scope.subnetManager = SubnetsManager;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.fabricManager = FabricsManager;\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.spaceManager = SpacesManager;\n        $scope.spaces = SpacesManager.getItems();\n        $scope.vlanManager = VLANsManager;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.loading = true;\n\n        $scope.group = {};\n        // Used when grouping by fabrics.\n        $scope.group.fabrics = {};\n        // User when grouping by spaces.\n        $scope.group.spaces = {};\n        $scope.group.spaces.orphanVLANs = [];\n\n        // Initializers for action objects.\n        var actionObjectInitializers = {\n            fabric: function() {\n                return {};\n            },\n            vlan: function() {\n                // Set initial fabric.\n                return {\n                    fabric: $scope.fabrics[0].id\n                };\n            },\n            space: function() {\n                return {};\n            },\n            subnet: function() {\n                // Set initial VLAN and space.\n                return {\n                    vlan: $scope.fabrics[0].vlan_ids[0]\n                };\n            }\n        };\n\n        // Return the name of the subnet.\n        function getSubnetName(subnet) {\n            return SubnetsManager.getName(subnet);\n        }\n\n        // Generate a table that can be easily rendered in the view.\n        // Traverses the fabrics and VLANs in-order so that if previous\n        // fabrics and VLANs' names are identical, they can be hidden from\n        // the table cell.\n        function updateFabricsGroupBy() {\n            var rows = [];\n            var previous_fabric = {id:-1};\n            var previous_vlan = {id:-1};\n            var fabrics = $filter('orderBy')($scope.fabrics, ['name']);\n            angular.forEach(fabrics, function(fabric) {\n                var vlans = filterByFabric($scope.vlans, fabric);\n                vlans = $filter('orderBy')(vlans, ['vid']);\n                angular.forEach(vlans, function(vlan) {\n                    var subnets = filterByVLAN($scope.subnets, vlan);\n                    if(subnets.length > 0) {\n                        angular.forEach(subnets, function(subnet) {\n                            var space = SpacesManager.getItemFromList(\n                                subnet.space);\n                            var row = {\n                                fabric: fabric,\n                                fabric_name: \"\",\n                                vlan: vlan,\n                                vlan_name: \"\",\n                                space: space,\n                                subnet: subnet,\n                                subnet_name: getSubnetName(subnet)\n                            };\n                            if(fabric.id !== previous_fabric.id) {\n                                previous_fabric.id = fabric.id;\n                                row.fabric_name = fabric.name;\n                            }\n                            if(vlan.id !== previous_vlan.id) {\n                                previous_vlan.id = vlan.id;\n                                row.vlan_name = $scope.getVLANName(vlan);\n                            }\n                            rows.push(row);\n                        });\n                    } else {\n                        var row = {\n                            fabric: fabric,\n                            fabric_name: \"\",\n                            vlan: vlan,\n                            vlan_name: $scope.getVLANName(vlan)\n                        };\n                        if(fabric.id !== previous_fabric.id) {\n                            previous_fabric.id = fabric.id;\n                            row.fabric_name = fabric.name;\n                        }\n                        rows.push(row);\n                    }\n                });\n            });\n            $scope.group.fabrics.rows = rows;\n        }\n\n        // Generate a table that can be easily rendered in the view.\n        // Traverses the spaces in-order so that if the previous space's name\n        // is identical, it can be hidden from the table cell.\n        // Note that this view only shows items that can be related to a space.\n        // That is, VLANs and fabrics with no corresponding subnets (and\n        // therefore spaces) cannot be shown in this table.\n        function updateSpacesGroupBy() {\n            var rows = [];\n            var spaces = $filter('orderBy')($scope.spaces, ['name']);\n            var previous_space = {id: -1};\n            angular.forEach(spaces, function(space) {\n                var subnets = filterBySpace($scope.subnets, space);\n                subnets = $filter('orderBy')(subnets, ['cidr']);\n                var index = 0;\n                angular.forEach(subnets, function(subnet) {\n                    index++;\n                    var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                    var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                    var row = {\n                        fabric: fabric,\n                        vlan: vlan,\n                        vlan_name: $scope.getVLANName(vlan),\n                        subnet: subnet,\n                        subnet_name: getSubnetName(subnet),\n                        space: space,\n                        space_name: \"\"\n                    };\n                    if(space.id !== previous_space.id) {\n                        previous_space.id = space.id;\n                        row.space_name = space.name;\n                    }\n                    rows.push(row);\n                });\n                if(index === 0) {\n                    rows.push({\n                        space: space,\n                        space_name: space.name\n                    });\n                }\n            });\n            $scope.group.spaces.rows = rows;\n        }\n\n        function updateOrphanVLANs() {\n            var rows = [];\n            var subnets = filterByNullSpace($scope.subnets);\n            subnets = $filter('orderBy')(subnets, ['cidr']);\n            angular.forEach(subnets, function(subnet) {\n                var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                var row = {\n                    fabric: fabric,\n                    vlan: vlan,\n                    vlan_name: $scope.getVLANName(vlan),\n                    subnet: subnet,\n                    subnet_name: getSubnetName(subnet),\n                    space: null\n                };\n                rows.push(row);\n            });\n            $scope.group.spaces.orphanVLANs = rows;\n        }\n\n        // Update the \"Group by\" selection. This is called from a few places:\n        // * When the $watch notices data has changed\n        // * When the URL bar is updated, after the URL is parsed and\n        //   $scope.groupBy is updated\n        // * When the drop-down \"Group by\" selection box changes\n        $scope.updateGroupBy = function() {\n            var groupBy = $scope.groupBy;\n            if(groupBy === 'space') {\n                $location.search('by', 'space');\n                updateSpacesGroupBy();\n                updateOrphanVLANs();\n            } else {\n                // The only other option is 'fabric', but in case the user\n                // made a typo on the URL bar we just assume it was 'fabric'\n                // as a fallback.\n                $location.search('by', 'fabric');\n                updateFabricsGroupBy();\n            }\n        };\n\n        // Called when the managers load to populate the actions the user\n        // is allowed to perform.\n        $scope.updateActions = function() {\n            if(UsersManager.isSuperUser()) {\n                $scope.actionOptions = [\n                    $scope.ADD_FABRIC_ACTION,\n                    $scope.ADD_VLAN_ACTION,\n                    $scope.ADD_SPACE_ACTION,\n                    $scope.ADD_SUBNET_ACTION\n                ];\n            } else {\n                $scope.actionOptions = [];\n            }\n        };\n\n        // Called when a action is selected.\n        $scope.actionChanged = function() {\n            $scope.newObject = (\n                actionObjectInitializers[$scope.actionOption.objectName]());\n        };\n\n        // Called when the \"Cancel\" button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionOption = null;\n            $scope.newObject = null;\n        };\n\n        // Return the name name for the VLAN.\n        $scope.getVLANName = function(vlan) {\n            return VLANsManager.getName(vlan);\n        };\n\n        // Return the name of the fabric from its given ID.\n        $scope.getFabricNameById = function(fabricId) {\n            return FabricsManager.getName(\n                FabricsManager.getItemFromList(fabricId));\n        };\n\n        // Called before the subnet object is saved. Sets the fabric\n        // field to be the fabric for the selected VLAN.\n        $scope.actionSubnetPreSave = function(obj) {\n            obj.fabric = VLANsManager.getItemFromList(obj.vlan).fabric;\n            return obj;\n        };\n\n        ManagerHelperService.loadManagers($scope, [\n            SubnetsManager, FabricsManager, SpacesManager, VLANsManager,\n            UsersManager]).then(\n            function() {\n                $scope.loading = false;\n\n                $scope.updateActions();\n\n                $scope.$watch(\n                    \"[subnets, fabrics, spaces, vlans]\",\n                    $scope.updateGroupBy, true);\n\n                // If the route has been updated, a new search string must\n                // potentially be rendered.\n                $scope.$on(\"$routeUpdate\", function() {\n                    $scope.getURLParameters();\n                    $scope.updateGroupBy();\n                });\n                $scope.updateGroupBy();\n            });\n    }\n]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Details Controller\n */\n\nangular.module('MAAS').controller('NodeDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location', '$interval',\n    'DevicesManager', 'MachinesManager', 'ControllersManager', 'ZonesManager',\n    'GeneralManager', 'UsersManager', 'TagsManager', 'DomainsManager',\n    'ManagerHelperService', 'ServicesManager', 'ErrorService',\n    'ValidationService', 'ScriptsManager', function(\n        $scope, $rootScope, $routeParams, $location, $interval, DevicesManager,\n        MachinesManager, ControllersManager, ZonesManager, GeneralManager,\n        UsersManager, TagsManager, DomainsManager, ManagerHelperService,\n        ServicesManager, ErrorService, ValidationService, ScriptsManager) {\n\n        // Mapping of device.ip_assignment to viewable text.\n        var DEVICE_IP_ASSIGNMENT = {\n            external: \"External\",\n            dynamic: \"Dynamic\",\n            \"static\": \"Static\"\n        };\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.MAAS_config = MAAS_config;\n        $scope.loaded = false;\n        $scope.node = null;\n        $scope.action = {\n          option: null,\n          allOptions: null,\n          availableOptions: [],\n          error: null,\n          showing_confirmation: false\n        };\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.osinfo = GeneralManager.getData(\"osinfo\");\n        $scope.section = {\n            area: angular.isString(\n                $routeParams.area) ? $routeParams.area : \"summary\"\n        };\n        $scope.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.commissioningSelection = [];\n        $scope.testSelection = [];\n        $scope.releaseOptions = {};\n        $scope.checkingPower = false;\n        $scope.devices = [];\n        $scope.scripts = ScriptsManager.getItems();\n\n        // Node header section.\n        $scope.header = {\n            editing: false,\n            editing_domain: false,\n            hostname: {\n                value: \"\"\n            },\n            domain: {\n                selected: null,\n                options: DomainsManager.getItems()\n            }\n        };\n\n        // Summary section.\n        $scope.summary = {\n            editing: false,\n            architecture: {\n                selected: null,\n                options: GeneralManager.getData(\"architectures\")\n            },\n            min_hwe_kernel: {\n                selected: null,\n                options: GeneralManager.getData(\"min_hwe_kernels\")\n            },\n            zone: {\n                selected: null,\n                options: ZonesManager.getItems()\n            },\n            tags: []\n        };\n\n        // Service monitor section (for controllers).\n        $scope.services = {};\n\n        // Power section.\n        $scope.power = {\n            editing: false,\n            type: null,\n            bmc_node_count: 0,\n            parameters: {},\n            in_pod: false\n        };\n\n        // Get the display text for device ip assignment type.\n        $scope.getDeviceIPAssignment = function(ipAssignment) {\n            return DEVICE_IP_ASSIGNMENT[ipAssignment];\n        };\n\n        // Events section.\n        $scope.events = {\n            limit: 10\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            if($scope.node && $scope.node.fqdn) {\n                $rootScope.title = $scope.node.fqdn;\n            }\n        }\n\n        function updateHeader() {\n            // Don't update the value if in editing mode. As this would\n            // overwrite the users changes.\n            if($scope.header.editing || $scope.header.editing_domain) {\n                return;\n            }\n            $scope.header.hostname.value = $scope.node.fqdn;\n            // DomainsManager gives us all Domain information while the node\n            // only contains the name and id. Because of this we need to loop\n            // through the DomainsManager options and find the option with the\n            // id matching the node id. Otherwise we end up setting our\n            // selected field to an option not from DomainsManager which\n            // doesn't work.\n            var i;\n            for(i=0;i<$scope.header.domain.options.length;i++) {\n                var option = $scope.header.domain.options[i];\n                if(option.id === $scope.node.domain.id) {\n                    $scope.header.domain.selected = option;\n                    break;\n                }\n            }\n        }\n\n        // Update the available action options for the node.\n        function updateAvailableActionOptions() {\n            if(!angular.isObject($scope.node)) {\n                return;\n            }\n            var actionTypeForNodeType = {\n                0: \"machine_actions\",\n                1: \"device_actions\",\n                2: \"rack_controller_actions\",\n                3: \"region_controller_actions\",\n                4: \"region_and_rack_controller_actions\"\n            };\n            if(GeneralManager.isDataLoaded(\n                    actionTypeForNodeType[$scope.node.node_type])) {\n                // Build the available action options control from the\n                // allowed actions, except set-zone which does not make\n                // sense in this view because the form has this\n                // functionality\n                $scope.action.allOptions = GeneralManager.getData(\n                    actionTypeForNodeType[$scope.node.node_type]);\n                $scope.action.availableOptions.length = 0;\n                angular.forEach($scope.action.allOptions, function(option) {\n                    if($scope.node.actions.indexOf(option.name) >= 0\n                       && option.name !== \"set-zone\"\n                       && option.name !== \"set-pool\") {\n                        $scope.action.availableOptions.push(option);\n                    }\n                });\n            } else {\n                // The GeneralManager only loads data requested on load. This\n                // isn't called until after load as its triggered on the loaded\n                // node's actions. If the node's action list isn't loaded load\n                // it then update the available options.\n                var self = updateAvailableActionOptions;\n                GeneralManager.loadItems(\n                    [actionTypeForNodeType[$scope.node.node_type]]).then(\n                    updateAvailableActionOptions);\n            }\n        }\n\n        // Updates the currently selected items in the power section.\n        function updatePower() {\n            // Do not update the selected items, when editing this would\n            // cause the users selection to change.\n            if($scope.power.editing) {\n                return;\n            }\n\n            var i;\n            $scope.power.type = null;\n            for(i = 0; i < $scope.power_types.length; i++) {\n                if($scope.node.power_type === $scope.power_types[i].name) {\n                    $scope.power.type = $scope.power_types[i];\n                    break;\n                }\n            }\n\n            $scope.power.bmc_node_count = $scope.node.power_bmc_node_count;\n\n            $scope.power.parameters = angular.copy(\n                $scope.node.power_parameters);\n            if(!angular.isObject($scope.power.parameters)) {\n                $scope.power.parameters = {};\n            }\n\n            // Force editing mode on, if the power_type is missing for a\n            // machine. This is placed at the bottom because we wanted the\n            // selected items to be filled in at least once.\n            if($scope.canEdit() && $scope.node.power_type === \"\" &&\n               $scope.node.node_type === 0) {\n                $scope.power.editing = true;\n            }\n\n            $scope.power.in_pod = angular.isDefined($scope.node.pod);\n        }\n\n        // Updates the currently selected items in the summary section.\n        function updateSummary() {\n            // Do not update the selected items, when editing this would\n            // cause the users selection to change.\n            if($scope.summary.editing) {\n                return;\n            }\n\n            if(angular.isObject($scope.node.zone)) {\n                $scope.summary.zone.selected = ZonesManager.getItemFromList(\n                    $scope.node.zone.id);\n            }\n            $scope.summary.architecture.selected = $scope.node.architecture;\n            $scope.summary.min_hwe_kernel.selected = $scope.node.min_hwe_kernel;\n            $scope.summary.tags = angular.copy($scope.node.tags);\n\n            // Force editing mode on, if the architecture is invalid. This is\n            // placed at the bottom because we wanted the selected items to\n            // be filled in at least once.\n            if($scope.canEdit() &&\n                $scope.hasUsableArchitectures() &&\n                $scope.hasInvalidArchitecture()) {\n                $scope.summary.editing = true;\n            }\n        }\n\n        // Updates the service monitor section.\n        function updateServices() {\n            if($scope.isController) {\n                $scope.services = {};\n                angular.forEach(ControllersManager.getServices(\n                        $scope.node), function(service) {\n                    $scope.services[service.name] = service;\n                });\n            }\n        }\n\n        // Update the devices array on the scope based on the device children\n        // on the node.\n        function updateDevices() {\n            $scope.devices = [];\n            angular.forEach($scope.node.devices, function(child) {\n                var device = {\n                    name: child.fqdn\n                };\n\n                // Add the interfaces to the device object if any exists.\n                if(angular.isArray(child.interfaces) &&\n                    child.interfaces.length > 0) {\n                    angular.forEach(child.interfaces, function(nic, nicIdx) {\n                        var deviceWithMAC = angular.copy(device);\n                        deviceWithMAC.mac_address = nic.mac_address;\n\n                        // Remove device name so it is not duplicated in the\n                        // table since this is another MAC address on this\n                        // device.\n                        if(nicIdx > 0) {\n                            deviceWithMAC.name = \"\";\n                        }\n\n                        // Add this links to the device object if any exists.\n                        if(angular.isArray(nic.links) &&\n                            nic.links.length > 0) {\n                            angular.forEach(nic.links, function(link, lIdx) {\n                                var deviceWithLink = angular.copy(\n                                    deviceWithMAC);\n                                deviceWithLink.ip_address = link.ip_address;\n\n                                // Remove the MAC address so it is not\n                                // duplicated in the table since this is\n                                // another link on this interface.\n                                if(lIdx > 0) {\n                                    deviceWithLink.mac_address = \"\";\n                                }\n\n                                $scope.devices.push(deviceWithLink);\n                            });\n                        } else {\n                            $scope.devices.push(deviceWithMAC);\n                        }\n                    });\n                } else {\n                    $scope.devices.push(device);\n                }\n            });\n        }\n\n        // Starts the watchers on the scope.\n        function startWatching() {\n            // Update the title and name when the node fqdn changes.\n            $scope.$watch(\"node.fqdn\", function() {\n                updateTitle();\n                updateHeader();\n            });\n\n            // Update the devices on the node.\n            $scope.$watch(\"node.devices\", updateDevices);\n\n            // Update the availableActionOptions when the node actions change.\n            $scope.$watch(\"node.actions\", updateAvailableActionOptions);\n\n            // Update the summary when the node or architectures list is\n            // updated.\n            $scope.$watch(\"node.architecture\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.architecture.options, updateSummary);\n\n            // Uppdate the summary when min_hwe_kernel is updated.\n            $scope.$watch(\"node.min_hwe_kernel\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.min_hwe_kernel.options, updateSummary);\n\n            // Update the summary when the node or zone list is\n            // updated.\n            $scope.$watch(\"node.zone.id\", updateSummary);\n            $scope.$watchCollection(\n                $scope.summary.zone.options, updateSummary);\n\n            // Update the power when the node power_type or power_parameters\n            // are updated.\n            $scope.$watch(\"node.power_type\", updatePower);\n            $scope.$watch(\"node.power_parameters\", updatePower);\n            $scope.$watchCollection(\"power_types\", updatePower);\n\n            // Update the services when the services list is updated.\n            $scope.$watch(\"node.service_ids\", updateServices);\n        }\n\n        // Called when the node has been loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            updateTitle();\n            updateSummary();\n            updateServices();\n            startWatching();\n\n            // Tell the storageController and networkingController that the\n            // node has been loaded.\n            if(angular.isObject($scope.storageController)) {\n                $scope.storageController.nodeLoaded();\n            }\n            if(angular.isObject($scope.networkingController)) {\n                $scope.networkingController.nodeLoaded();\n            }\n        }\n\n        // Update the node with new data on the region.\n        $scope.updateNode = function(node, queryPower) {\n            if(angular.isUndefined(queryPower)) {\n                queryPower = false;\n            }\n            return $scope.nodesManager.updateItem(node).then(function(node) {\n                updateHeader();\n                updateSummary();\n                if(queryPower) {\n                    $scope.checkPowerState();\n                }\n            }, function(error) {\n                console.log(error);\n                updateHeader();\n                updateSummary();\n            });\n        };\n\n        // Called for autocomplete when the user is typing a tag name.\n        $scope.tagsAutocomplete = function(query) {\n            return TagsManager.autocomplete(query);\n        };\n\n        $scope.getPowerStateClass = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return \"\";\n            }\n\n            if($scope.checkingPower) {\n                return \"checking\";\n            } else {\n                return $scope.node.power_state;\n            }\n        };\n\n        // Get the power state text to show.\n        $scope.getPowerStateText = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return \"\";\n            }\n\n            if($scope.checkingPower) {\n                return \"Checking power\";\n            } else if($scope.node.power_state === \"unknown\") {\n                return \"\";\n            } else {\n                return \"Power \" + $scope.node.power_state;\n            }\n        };\n\n        // Returns true when the \"check now\" button for updating the power\n        // state should be shown.\n        $scope.canCheckPowerState = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return false. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n            return (\n                $scope.node.power_state !== \"unknown\" &&\n                !$scope.checkingPower);\n        };\n\n        // Check the power state of the node.\n        $scope.checkPowerState = function() {\n            $scope.checkingPower = true;\n            $scope.nodesManager.checkPowerState($scope.node).then(function() {\n                $scope.checkingPower = false;\n            });\n        };\n\n        $scope.isUbuntuOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"ubuntu\") {\n                return true;\n            }\n            return false;\n        };\n\n        $scope.isUbuntuCoreOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"ubuntu-core\") {\n                return true;\n            }\n            return false;\n        };\n\n        $scope.isCustomOS = function() {\n            // This will get called very early and node can be empty.\n            // In that case just return an empty string. It will be\n            // called again to show the correct information.\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n\n            if($scope.node.osystem === \"custom\") {\n                return true;\n            }\n            return false;\n        };\n\n        // Return true if there is an action error.\n        $scope.isActionError = function() {\n            return $scope.action.error !== null;\n        };\n\n        // Return True if in deploy action and the osinfo is missing.\n        $scope.isDeployError = function() {\n            // Never a deploy error when there is an action error.\n            if($scope.isActionError()) {\n                return false;\n            }\n\n            var missing_osinfo = (\n                angular.isUndefined($scope.osinfo.osystems) ||\n                $scope.osinfo.osystems.length === 0);\n            if(angular.isObject($scope.action.option) &&\n                $scope.action.option.name === \"deploy\" &&\n                missing_osinfo) {\n                return true;\n            }\n            return false;\n        };\n\n        // Return True if unable to deploy because of missing ssh keys.\n        $scope.isSSHKeyError = function() {\n            // Never a deploy error when there is an action error.\n            if($scope.isActionError()) {\n                return false;\n            }\n            if(angular.isObject($scope.action.option) &&\n                $scope.action.option.name === \"deploy\" &&\n                UsersManager.getSSHKeyCount() === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Called when the actionOption has changed.\n        $scope.action.optionChanged = function() {\n            // Clear the action error.\n            $scope.action.error = null;\n            $scope.action.showing_confirmation = false;\n        };\n\n        // Cancel the action.\n        $scope.actionCancel = function() {\n            $scope.action.option = null;\n            $scope.action.error = null;\n            $scope.action.showing_confirmation = false;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            var extra = {};\n            var i;\n            // Set deploy parameters if a deploy.\n            if($scope.action.option.name === \"deploy\" &&\n                angular.isString($scope.osSelection.osystem) &&\n                angular.isString($scope.osSelection.release)) {\n\n                // Set extra. UI side the release is structured os/release, but\n                // when it is sent over the websocket only the \"release\" is\n                // sent.\n                extra.osystem = $scope.osSelection.osystem;\n                var release = $scope.osSelection.release;\n                release = release.split(\"/\");\n                release = release[release.length-1];\n                extra.distro_series = release;\n                // hwe_kernel is optional so only include it if its specified\n                if(angular.isString($scope.osSelection.hwe_kernel) &&\n                   ($scope.osSelection.hwe_kernel.indexOf('hwe-') >= 0 ||\n                    $scope.osSelection.hwe_kernel.indexOf('ga-') >= 0)) {\n                    extra.hwe_kernel = $scope.osSelection.hwe_kernel;\n                }\n            } else if($scope.action.option.name === \"commission\") {\n                extra.enable_ssh = $scope.commissionOptions.enableSSH;\n                extra.skip_networking = (\n                    $scope.commissionOptions.skipNetworking);\n                extra.skip_storage = $scope.commissionOptions.skipStorage;\n                extra.commissioning_scripts = [];\n                for(i=0;i<$scope.commissioningSelection.length;i++) {\n                    extra.commissioning_scripts.push(\n                        $scope.commissioningSelection[i].id);\n                }\n                if($scope.commissionOptions.updateFirmware) {\n                    extra.commissioning_scripts.push('update_firmware')\n                }\n                if($scope.commissionOptions.configureHBA) {\n                    extra.commissioning_scripts.push('configure_hba')\n                }\n                if(extra.commissioning_scripts.length === 0) {\n                    // Tell the region not to run any custom commissioning\n                    // scripts.\n                    extra.commissioning_scripts.push('none');\n                }\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.testSelection.length;i++) {\n                    extra.testing_scripts.push($scope.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.action.option.name === \"test\") {\n                if($scope.node.status_code === 6 &&\n                        !$scope.action.showing_confirmation) {\n                    $scope.action.showing_confirmation = true;\n                    return;\n                }\n                // Set the test options.\n                extra.enable_ssh = $scope.commissionOptions.enableSSH;\n                extra.testing_scripts = [];\n                for(i=0;i<$scope.testSelection.length;i++) {\n                    extra.testing_scripts.push($scope.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if($scope.action.option.name === \"release\") {\n                // Set the release options.\n                extra.erase = $scope.releaseOptions.erase;\n                extra.secure_erase = $scope.releaseOptions.secureErase;\n                extra.quick_erase = $scope.releaseOptions.quickErase;\n            }\n\n            $scope.nodesManager.performAction(\n                $scope.node, $scope.action.option.name, extra).then(function() {\n                    // If the action was delete, then go back to listing.\n                    if($scope.action.option.name === \"delete\") {\n                        $location.path(\"/machines\");\n                    }\n                    $scope.action.option = null;\n                    $scope.action.error = null;\n                    $scope.action.showing_confirmation = false;\n                    $scope.osSelection.$reset();\n                    $scope.commissionOptions.enableSSH = false;\n                    $scope.commissionOptions.skipNetworking = false;\n                    $scope.commissionOptions.skipStorage = false;\n                    $scope.commissionOptions.updateFirmware = false;\n                    $scope.commissionOptions.configureHBA = false;\n                    $scope.commissioningSelection = [];\n                    $scope.testSelection = [];\n                }, function(error) {\n                    $scope.action.error = error;\n                });\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if their are usable architectures.\n        $scope.hasUsableArchitectures = function() {\n            return $scope.summary.architecture.options.length > 0;\n        };\n\n        // Return the placeholder text for the architecture dropdown.\n        $scope.getArchitecturePlaceholder = function() {\n            if($scope.hasUsableArchitectures()) {\n                return \"Choose an architecture\";\n            } else {\n                return \"-- No usable architectures --\";\n            }\n        };\n\n        // Return true if the saved architecture is invalid.\n        $scope.hasInvalidArchitecture = function() {\n            if(angular.isObject($scope.node)) {\n                return (\n                    !$scope.isDevice && (\n                        $scope.node.architecture === \"\" ||\n                        $scope.summary.architecture.options.indexOf(\n                            $scope.node.architecture) === -1));\n            } else {\n                return false;\n            }\n        };\n\n        // Return true if the current architecture selection is invalid.\n        $scope.invalidArchitecture = function() {\n            return (\n                !$scope.isDevice && !$scope.isController && (\n                    $scope.summary.architecture.selected === \"\" ||\n                    $scope.summary.architecture.options.indexOf(\n                        $scope.summary.architecture.selected) === -1));\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If power_types exist then a rack controller is connected.\n            return $scope.power_types.length > 0;\n        };\n\n        // Return true if the node is locked\n        $scope.isLocked = function() {\n            if ($scope.node === null) {\n                return false;\n            }\n\n            return $scope.node.locked;\n        };\n\n        // Return true when the edit buttons can be clicked.\n        $scope.canEdit = function() {\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser() &&\n                    ! $scope.isLocked());\n        };\n\n        // Called to edit the domain name.\n        $scope.editHeaderDomain = function() {\n            if($scope.canEdit()) {\n                return;\n            }\n\n            // Do nothing if already editing because we don't want to reset\n            // the current value.\n            if($scope.header.editing_domain) {\n                return;\n            }\n            $scope.header.editing = false;\n            $scope.header.editing_domain = true;\n\n            // Set the value to the hostname, as hostname and domain are edited\n            // using different fields.\n            $scope.header.hostname.value = $scope.node.hostname;\n        };\n\n        // Called to edit the node name.\n        $scope.editHeader = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n\n            // Do nothing if already editing because we don't want to reset\n            // the current value.\n            if($scope.header.editing) {\n                return;\n            }\n            $scope.header.editing = true;\n            $scope.header.editing_domain = false;\n\n            // Set the value to the hostname, as hostname and domain are edited\n            // using different fields.\n            $scope.header.hostname.value = $scope.node.hostname;\n        };\n\n        // Return true when the hostname or domain in the header is invalid.\n        $scope.editHeaderInvalid = function() {\n            // Not invalid unless editing.\n            if(!$scope.header.editing && !$scope.header.editing_domain) {\n                return false;\n            }\n\n            // The value cannot be blank.\n            var value = $scope.header.hostname.value;\n            if(value.length === 0) {\n                return true;\n            }\n            return !ValidationService.validateHostname(value);\n        };\n\n        // Called to cancel editing of the node hostname and domain.\n        $scope.cancelEditHeader = function() {\n            $scope.header.editing = false;\n            $scope.header.editing_domain = false;\n            updateHeader();\n        };\n\n        // Called to save editing of node hostname or domain.\n        $scope.saveEditHeader = function() {\n            // Does nothing if invalid.\n            if($scope.editHeaderInvalid()) {\n                return;\n            }\n            $scope.header.editing = false;\n            $scope.header.editing_domain = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.hostname = $scope.header.hostname.value;\n            node.domain = $scope.header.domain.selected;\n\n            // Update the node.\n            $scope.updateNode(node);\n        };\n\n        // Called to enter edit mode in the summary section.\n        $scope.editSummary = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.summary.editing = true;\n        };\n\n        // Called to cancel editing in the summary section.\n        $scope.cancelEditSummary = function() {\n            // Leave edit mode only if node has valid architecture.\n            if($scope.isDevice || $scope.isController) {\n                $scope.summary.editing = false;\n            } else if(!$scope.hasInvalidArchitecture()) {\n                $scope.summary.editing = false;\n            }\n\n            updateSummary();\n        };\n\n        // Called to save the changes made in the summary section.\n        $scope.saveEditSummary = function() {\n            // Do nothing if invalidArchitecture.\n            if($scope.invalidArchitecture()) {\n                return;\n            }\n\n            $scope.summary.editing = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.zone = angular.copy($scope.summary.zone.selected);\n            node.architecture = $scope.summary.architecture.selected;\n            if($scope.summary.min_hwe_kernel.selected === null) {\n                node.min_hwe_kernel = \"\";\n            } else {\n                node.min_hwe_kernel = $scope.summary.min_hwe_kernel.selected;\n            }\n            node.tags = [];\n            angular.forEach($scope.summary.tags, function(tag) {\n                node.tags.push(tag.text);\n            });\n\n            // Update the node.\n            $scope.updateNode(node);\n        };\n\n        // Return true if the current power type selection is invalid.\n        $scope.invalidPowerType = function() {\n            return !angular.isObject($scope.power.type);\n        };\n\n        // Called to enter edit mode in the power section.\n        $scope.editPower = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.power.editing = true;\n        };\n\n        // Called to cancel editing in the power section.\n        $scope.cancelEditPower = function() {\n            // If the node is not a machine, only leave edit mode if node has\n            // valid power type.\n            if ($scope.node.node_type !== 0 || $scope.node.power_type !== \"\") {\n                $scope.power.editing = false;\n            }\n            updatePower();\n        };\n\n        // Called to save the changes made in the power section.\n        $scope.saveEditPower = function() {\n            // Does nothing if invalid power type.\n            if($scope.invalidPowerType()) {\n                return;\n            }\n            $scope.power.editing = false;\n\n            // Copy the node and make the changes.\n            var node = angular.copy($scope.node);\n            node.power_type = $scope.power.type.name;\n            node.power_parameters = angular.copy($scope.power.parameters);\n\n            // Update the node.\n            $scope.updateNode(node, true);\n        };\n\n        // Return true if the \"load more\" events button should be available.\n        $scope.allowShowMoreEvents = function() {\n            if(!angular.isObject($scope.node)) {\n                return false;\n            }\n            if(!angular.isArray($scope.node.events)) {\n                return false;\n            }\n            return (\n                $scope.node.events.length > 0 &&\n                $scope.node.events.length > $scope.events.limit &&\n                $scope.events.limit < 50);\n        };\n\n        // Show another 10 events.\n        $scope.showMoreEvents = function() {\n            $scope.events.limit += 10;\n        };\n\n        // Return the nice text for the given event.\n        $scope.getEventText = function(event) {\n            var text = event.type.description;\n            if(angular.isString(event.description) &&\n                event.description.length > 0) {\n                text += \" - \" + event.description;\n            }\n            return text;\n        };\n\n        $scope.getPowerEventError = function() {\n            if(!angular.isObject($scope.node) ||\n                !angular.isArray($scope.node.events)) {\n                return;\n            }\n\n            var i;\n            for(i = 0; i < $scope.node.events.length; i++) {\n                var event = $scope.node.events[i];\n                if(event.type.level === \"warning\" &&\n                   event.type.description === \"Failed to query node's BMC\") {\n                    // Latest power event is an error\n                    return event;\n                } else if(event.type.level === \"info\" &&\n                          event.type.description === \"Queried node's BMC\") {\n                    // Latest power event is not an error\n                    return;\n                }\n            }\n            // No power event found, thus no error\n            return;\n        };\n\n        $scope.hasPowerEventError = function() {\n            var event = $scope.getPowerEventError();\n            return angular.isObject(event);\n        };\n\n        $scope.getPowerEventErrorText = function() {\n            var event = $scope.getPowerEventError();\n            if(angular.isObject(event)) {\n                // Return text\n                return event.description;\n            } else {\n                return \"\";\n            }\n        };\n\n        // true if power error prevents the provided action\n        $scope.hasActionPowerError = function(actionName) {\n            if(!$scope.hasPowerError()) {\n                return false; // no error, no need to check state\n            }\n            // these states attempt to manipulate power\n            var powerChangingStates = [\n                'commission',\n                'deploy',\n                'on',\n                'off',\n                'release'\n            ];\n            if(actionName && powerChangingStates.indexOf(actionName) > -1) {\n                return true;\n            }\n            return false;\n        };\n\n        // Check to see if the power type has any missing system packages.\n        $scope.hasPowerError = function() {\n            if(angular.isObject($scope.power.type)) {\n                return $scope.power.type.missing_packages.length > 0;\n            } else {\n                return false;\n            }\n        };\n\n        // Returns a formatted string of missing system packages.\n        $scope.getPowerErrors = function() {\n            var i;\n            var result = \"\";\n            if(angular.isObject($scope.power.type)) {\n                var packages = $scope.power.type.missing_packages;\n                packages.sort();\n                for(i = 0; i < packages.length; i++) {\n                    result += packages[i];\n                    if(i+2 < packages.length) {\n                        result += \", \";\n                    }\n                    else if(i+1 < packages.length) {\n                        result += \" and \";\n                    }\n                }\n                result += packages.length > 1 ? \" packages\" : \" package\";\n            }\n            return result;\n        };\n\n        // Return the class to apply to the service.\n        $scope.getServiceClass = function(service) {\n            if(!angular.isObject(service)) {\n                return \"none\";\n            } else {\n                if(service.status === \"running\") {\n                    return \"success\";\n                } else if(service.status === \"dead\") {\n                    return \"error\";\n                } else if(service.status === \"degraded\") {\n                    return \"warning\";\n                } else {\n                    return \"none\";\n                }\n            }\n        };\n\n        $scope.hasCustomCommissioningScripts = function() {\n            var i;\n            for(i=0;i<$scope.scripts.length;i++) {\n                if($scope.scripts[i].script_type === 0) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Called by the children controllers to let the parent know.\n        $scope.controllerLoaded = function(name, scope) {\n            $scope[name] = scope;\n            if(angular.isObject(scope.node)) {\n              scope.nodeLoaded();\n            }\n        };\n\n        // Only show a warning that tests have failed if there are failed tests\n        // and the node isn't currently commissioning or testing.\n        $scope.showFailedTestWarning = function() {\n            // Devices can't have failed tests and don't have status_code\n            // defined.\n            if($scope.node.node_type === 1 || !$scope.node.status_code) {\n                return false;\n            }\n            switch($scope.node.status_code) {\n                // NEW\n                case 0:\n                // COMMISSIONING\n                case 1:\n                // FAILED_COMMISSIONING\n                case 2:\n                // TESTING\n                case 21:\n                // FAILED_TESTING\n                case 22:\n                    return false;\n            }\n            switch($scope.node.testing_status) {\n                // Tests havn't been run\n                case -1:\n                // Tests have passed\n                case 2:\n                    return false;\n            }\n            return true;\n        };\n\n        // Get the subtext for the CPU card. Only nodes commissioned after\n        // MAAS 2.4 will have the CPU speed.\n        $scope.getCPUSubtext = function() {\n            var label = $scope.node.cpu_count + \" cores\";\n            if(!$scope.node.cpu_speed || $scope.node.cpu_speed === 0) {\n                return label;\n            } else if($scope.node.cpu_speed < 1000) {\n                return label + \" @ \" + $scope.node.cpu_speed + \" Mhz\";\n            } else {\n                return label + \" @ \" + ($scope.node.cpu_speed / 1000) + \" Ghz\";\n            }\n        }\n\n        // Reload osinfo when the page reloads\n        $scope.$on(\"$routeUpdate\", function () {\n            GeneralManager.loadItems(\n                [\"osinfo\", \"architectures\", \"min_hwe_kernels\"]);\n        });\n\n        var page_managers;\n        if($location.path().indexOf('/controller') !== -1) {\n            $scope.nodesManager = ControllersManager;\n            page_managers = [ControllersManager, ScriptsManager];\n            $scope.isController = true;\n            $scope.isDevice = false;\n            $scope.type_name = 'controller';\n            $scope.type_name_title = 'Controller';\n            $rootScope.page = 'controllers';\n        } else if($location.path().indexOf('/device') !== -1) {\n            $scope.nodesManager = DevicesManager;\n            page_managers = [DevicesManager];\n            $scope.isController = false;\n            $scope.isDevice = true;\n            $scope.type_name = 'device';\n            $scope.type_name_title = 'Device';\n            $rootScope.page = 'devices';\n        } else {\n            $scope.nodesManager = MachinesManager;\n            page_managers = [MachinesManager, ScriptsManager];\n            $scope.isController = false;\n            $scope.isDevice = false;\n            $scope.type_name = 'machine';\n            $scope.type_name_title = 'Machine';\n            $rootScope.page = 'machines';\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            ZonesManager,\n            GeneralManager,\n            UsersManager,\n            TagsManager,\n            DomainsManager,\n            ServicesManager,\n        ].concat(page_managers)).then(function() {\n            // Possibly redirected from another controller that already had\n            // this node set to active. Only call setActiveItem if not already\n            // the activeItem.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n                activeNode = $scope.nodesManager.getActiveItem();\n            }\n            if($scope.isDevice) {\n                $scope.ip_assignment = activeNode.ip_assignment;\n            }\n        });\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Networking Controller\n */\n\n// Filter that is specific to the NodeNetworkingController. Filters the\n// list of VLANs to be only those that are unused by the interface.\nangular.module('MAAS').filter('filterByUnusedForInterface', function() {\n    return function(vlans, nic, originalInterfaces) {\n        var filtered = [];\n        if(!angular.isObject(nic) ||\n            !angular.isObject(originalInterfaces)) {\n            return filtered;\n        }\n        var usedVLANs = [];\n        angular.forEach(originalInterfaces, function(inter) {\n            if(inter.type === \"vlan\") {\n                var parent = inter.parents[0];\n                if(parent === nic.id) {\n                    usedVLANs.push(inter.vlan_id);\n                }\n            }\n        });\n        angular.forEach(vlans, function(vlan) {\n            var idx = usedVLANs.indexOf(vlan.id);\n            if(idx === -1) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Filters the\n// list of interfaces to not include the current parent interfaces being\n// bonded together.\nangular.module('MAAS').filter('removeInterfaceParents', function() {\n    return function(interfaces, childInterface, skip) {\n        if(skip || !angular.isObject(childInterface) ||\n            !angular.isArray(childInterface.parents)) {\n            return interfaces;\n        }\n        var filtered = [];\n        angular.forEach(interfaces, function(nic) {\n            var i, parent, found = false;\n            for(i = 0; i < childInterface.parents.length; i++) {\n                parent = childInterface.parents[i];\n                if(parent.id === nic.id && parent.link_id === nic.link_id) {\n                    found = true;\n                    break;\n                }\n            }\n            if(!found) {\n                filtered.push(nic);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Remove the default\n// VLAN if the interface is a VLAN interface.\nangular.module('MAAS').filter('removeDefaultVLANIfVLAN', function() {\n    return function(vlans, interfaceType) {\n        if(!angular.isString(interfaceType)) {\n            return vlans;\n        }\n        var filtered = [];\n        angular.forEach(vlans, function(vlan) {\n            if(interfaceType !== \"vlan\") {\n                filtered.push(vlan);\n            } else if(vlan.vid !== 0) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n\n\n// Filter that is specific to the NodeNetworkingController. Only provide the\n// available modes for that interface type.\nangular.module('MAAS').filter('filterLinkModes', function() {\n    return function(modes, nic) {\n        if(!angular.isObject(nic)) {\n            return modes;\n        }\n        var filtered = [];\n\n        // If this is not a $maasForm, make it work like one.\n        // We need to use getValue() to access attributes, because each\n        // type of maas-obj-form gets to define how values come out.\n        if(!angular.isFunction(nic.getValue)) {\n            nic.getValue = function(name) {\n                return this[name];\n            };\n        }\n\n        if(!angular.isObject(nic.getValue('subnet'))) {\n            // No subnet is configure so the only allowed mode\n            // is 'link_up'.\n            angular.forEach(modes, function(mode) {\n                if(mode.mode === \"link_up\") {\n                    filtered.push(mode);\n                }\n            });\n        } else {\n            // Don't add LINK_UP if more than one link exists or\n            // if the interface is an alias.\n            var links = nic.getValue('links');\n            var nicType = nic.getValue('type');\n            var allowLinkUp = (\n                (angular.isObject(links) && links.length > 1) ||\n                (nicType === \"alias\"));\n            angular.forEach(modes, function(mode) {\n                if(allowLinkUp && mode.mode === \"link_up\") {\n                    return;\n                }\n                // Can't run DHCP twice on one NIC.\n                if(nicType === \"alias\" && mode.mode === \"dhcp\") {\n                    return;\n                }\n                filtered.push(mode);\n            });\n        }\n        return filtered;\n    };\n});\n\n\nangular.module('MAAS').controller('NodeNetworkingController', [\n    '$scope', '$filter', 'FabricsManager', 'VLANsManager', 'SubnetsManager',\n    'MachinesManager', 'ControllersManager', 'DevicesManager',\n    'GeneralManager', 'UsersManager',\n    'ManagerHelperService', 'ValidationService', 'JSONService',\n    function(\n        $scope, $filter, FabricsManager, VLANsManager, SubnetsManager,\n        MachinesManager, ControllersManager, DevicesManager,\n        GeneralManager, UsersManager,\n        ManagerHelperService, ValidationService, JSONService) {\n\n        // Different interface types.\n        var INTERFACE_TYPE = {\n            PHYSICAL: \"physical\",\n            BOND: \"bond\",\n            BRIDGE: \"bridge\",\n            VLAN: \"vlan\",\n            ALIAS: \"alias\"\n        };\n        var INTERFACE_TYPE_TEXTS = {\n            \"physical\": \"Physical\",\n            \"bond\": \"Bond\",\n            \"bridge\": \"Bridge\",\n            \"vlan\": \"VLAN\",\n            \"alias\": \"Alias\"\n        };\n\n        // Different link modes for an interface.\n        var LINK_MODE = {\n            AUTO: \"auto\",\n            STATIC: \"static\",\n            DHCP: \"dhcp\",\n            LINK_UP: \"link_up\"\n        };\n        var LINK_MODE_TEXTS = {\n            \"auto\": \"Auto assign\",\n            \"static\": \"Static assign\",\n            \"dhcp\": \"DHCP\",\n            \"link_up\": \"Unconfigured\"\n        };\n\n        // Different selection modes.\n        var SELECTION_MODE = {\n            NONE: null,\n            SINGLE: \"single\",\n            MULTI: \"multi\",\n            DELETE: \"delete\",\n            ADD: \"add\",\n            CREATE_BOND: \"create-bond\",\n            CREATE_BRIDGE: \"create-bridge\",\n            CREATE_PHYSICAL: \"create-physical\",\n            EDIT: \"edit\"\n        };\n\n        var IP_ASSIGNMENT = {\n            DYNAMIC: \"dynamic\",\n            EXTERNAL: \"external\",\n            STATIC: \"static\"\n        };\n\n        // Device ip assignment options.\n        $scope.ipAssignments = [\n            {\n                name: IP_ASSIGNMENT.EXTERNAL,\n                text: \"External\"\n            },\n            {\n                name: IP_ASSIGNMENT.DYNAMIC,\n                text: \"Dynamic\"\n            },\n            {\n                name: IP_ASSIGNMENT.STATIC,\n                text: \"Static\"\n            }\n        ];\n\n        // Set the initial values for this scope.\n        $scope.loaded = false;\n        $scope.nodeHasLoaded = false;\n        $scope.managersHaveLoaded = false;\n        $scope.tableInfo = {column: 'name'};\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.vlans = VLANsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.interfaces = [];\n        $scope.interfaceLinksMap = {};\n        $scope.interfaceErrorsByLinkId = {};\n        $scope.originalInterfaces = {};\n        $scope.selectedInterfaces = [];\n        $scope.selectedMode = null;\n        $scope.newInterface = {};\n        $scope.newBondInterface = {};\n        $scope.newBridgeInterface = {};\n        $scope.editInterface = null;\n        $scope.bondOptions = GeneralManager.getData(\"bond_options\");\n        $scope.modes = [\n            {\n                mode: LINK_MODE.AUTO,\n                text: LINK_MODE_TEXTS[LINK_MODE.AUTO]\n            },\n            {\n                mode: LINK_MODE.STATIC,\n                text: LINK_MODE_TEXTS[LINK_MODE.STATIC]\n            },\n            {\n                mode: LINK_MODE.DHCP,\n                text: LINK_MODE_TEXTS[LINK_MODE.DHCP]\n            },\n            {\n                mode: LINK_MODE.LINK_UP,\n                text: LINK_MODE_TEXTS[LINK_MODE.LINK_UP]\n            }\n        ];\n\n        // Sets loaded to true if both the node has been loaded at the\n        // other required managers for this scope have been loaded.\n        function updateLoaded() {\n            $scope.loaded = $scope.nodeHasLoaded && $scope.managersHaveLoaded;\n            if($scope.loaded) {\n                updateInterfaces();\n            }\n        }\n\n        // Update the list of interfaces for the node. For each link on the\n        // interface, the interface is duplicated in the list to make render\n        // in a data-ng-repeat easier.\n        function updateInterfaces() {\n            $scope.originalInterfaces = {};\n            angular.forEach($scope.node.interfaces, function(nic) {\n                $scope.originalInterfaces[nic.id] = nic;\n            });\n\n            var interfaces = [];\n            // vlanTable contains data packaged for the 'Served VLANs' section,\n            // which is essentially Interface LEFT JOIN VLAN LEFT JOIN Subnet.\n            var vlanTable = [];\n            // Keep track of VLAN IDs we've processed.\n            var addedVlans = {};\n\n            angular.forEach($scope.node.interfaces, function(nic) {\n                // When a interface has a child that is a bond or bridge.\n                // Then that interface is not included in the interface list.\n                // Parent interface with a bond or bridge child can only have\n                // one child.\n                if(nic.children.length === 1) {\n                    var child = $scope.originalInterfaces[nic.children[0]];\n                    if(child.type === INTERFACE_TYPE.BOND ||\n                       child.type === INTERFACE_TYPE.BRIDGE) {\n                        // This parent now has a bond or bridge for a child.\n                        // If this was the editInterface, then it needs to be\n                        // unset. We only need to check the \"id\" (not\n                        // the \"link_id\"), because if this interface did have\n                        // aliases they have now been removed.\n                        if(angular.isObject($scope.editInterface) &&\n                            $scope.editInterface.id === nic.id) {\n                            $scope.editInterface = null;\n                            $scope.selectedMode = SELECTION_MODE.NONE;\n                        }\n                        return;\n                    }\n                }\n\n                // When the interface is a bond or a bridge, place the children\n                // as members for that interface.\n                if(nic.type === INTERFACE_TYPE.BOND ||\n                   nic.type === INTERFACE_TYPE.BRIDGE) {\n                    nic.members = [];\n                    angular.forEach(nic.parents, function(parent) {\n                        nic.members.push(\n                            angular.copy($scope.originalInterfaces[parent]));\n                    });\n                }\n\n                // Format the tags when they have not already been formatted.\n                if(angular.isArray(nic.tags) &&\n                    nic.tags.length > 0 &&\n                    !angular.isString(nic.tags[0].text)) {\n                    nic.tags = formatTags(nic.tags);\n                }\n\n                nic.vlan = VLANsManager.getItemFromList(nic.vlan_id);\n                if(angular.isObject(nic.vlan)) {\n                    nic.fabric = FabricsManager.getItemFromList(\n                            nic.vlan.fabric);\n\n                    // Build the vlanTable for controller detail page.\n                    if ($scope.$parent.isController) {\n                        // Skip duplicate VLANs (by id, they can share names).\n                        if(!(Object.prototype.hasOwnProperty.call(\n                                addedVlans, nic.vlan.id))) {\n                            addedVlans[nic.vlan.id] = true;\n                            var vlanRecord = {\n                                \"fabric\": nic.fabric,\n                                \"vlan\": nic.vlan,\n                                \"subnets\": $filter('filter')(\n                                    $scope.subnets, {vlan:nic.vlan.id}, true),\n                                \"primary_rack\": null,\n                                \"secondary_rack\": null,\n                                \"sort_key\": nic.fabric.name + \"|\" +\n                                    $scope.getVLANText(nic.vlan)\n                            };\n                            if(nic.vlan.primary_rack) {\n                                vlanRecord.primary_rack =\n                                    ControllersManager.getItemFromList(\n                                        nic.vlan.primary_rack);\n                            }\n                            if(nic.vlan.secondary_rack) {\n                                vlanRecord.secondary_rack =\n                                    ControllersManager.getItemFromList(\n                                        nic.vlan.secondary_rack);\n                            }\n                            vlanTable.push(vlanRecord);\n                        }\n                        // Sort the table by (VLANText, fabric.name).\n                        vlanTable.sort(function(a, b) {\n                            return a.sort_key.localeCompare(b.sort_key);\n                        });\n                    }\n                }\n\n                // Update the interface based on its links or duplicate the\n                // interface if it has multiple links.\n                if(nic.links.length === 0) {\n                    // No links on this interface. The interface is either\n                    // disabled or has no links (which means the interface\n                    // is in LINK_UP mode).\n                    nic.link_id = -1;\n                    nic.subnet = null;\n                    nic.mode = LINK_MODE.LINK_UP;\n                    nic.ip_address = \"\";\n                    interfaces.push(nic);\n                } else {\n                    var idx = 0;\n                    angular.forEach(nic.links, function(link) {\n                        var nic_copy = angular.copy(nic);\n                        nic_copy.link_id = link.id;\n                        nic_copy.subnet = SubnetsManager.getItemFromList(\n                            link.subnet_id);\n                        nic_copy.mode = link.mode;\n                        nic_copy.ip_address = link.ip_address;\n                        if(angular.isUndefined(nic_copy.ip_address)) {\n                            nic_copy.ip_address = \"\";\n                        }\n                        // We don't want to deep copy the VLAN and fabric\n                        // object so we set those back to the original.\n                        nic_copy.vlan = nic.vlan;\n                        nic_copy.fabric = nic.fabric;\n                        if(idx > 0) {\n                            // Each extra link is an alais on the original\n                            // interface.\n                            nic_copy.type = INTERFACE_TYPE.ALIAS;\n                            nic_copy.name += \":\" + idx;\n                        }\n                        idx++;\n                        interfaces.push(nic_copy);\n                    });\n                }\n            });\n\n            // Update the scopes interfaces.\n            $scope.interfaces = interfaces;\n            $scope.vlanTable = vlanTable;\n\n            // Update the scope interface links mapping.\n            $scope.interfaceLinksMap = {};\n            angular.forEach($scope.interfaces, function(nic) {\n                var linkMaps = $scope.interfaceLinksMap[nic.id];\n                if(angular.isUndefined(linkMaps)) {\n                    linkMaps = {};\n                    $scope.interfaceLinksMap[nic.id] = linkMaps;\n                }\n                linkMaps[nic.link_id] = nic;\n            });\n\n            // Clear the editInterface if it no longer exists in the\n            // interfaceLinksMap.\n            if(angular.isObject($scope.editInterface)) {\n                var links = $scope.interfaceLinksMap[$scope.editInterface.id];\n                if(angular.isUndefined(links)) {\n                    $scope.editInterface = null;\n                    $scope.selectedMode = SELECTION_MODE.NONE;\n                } else {\n                    var link = links[$scope.editInterface.link_id];\n                    if(angular.isUndefined(link)) {\n                        $scope.editInterface = null;\n                        $scope.selectedMode = SELECTION_MODE.NONE;\n                    }\n                }\n            }\n\n            // Update newInterface.parent if it has changed.\n            updateNewInterface();\n        }\n\n        // Return the original link object for the given interface.\n        function mapNICToOriginalLink(nic_id, link_id) {\n            var originalInteface = $scope.originalInterfaces[nic_id];\n            if(angular.isObject(originalInteface)) {\n                var i, link = null;\n                for(i = 0; i < originalInteface.links.length; i++) {\n                    link = originalInteface.links[i];\n                    if(link.id === link_id) {\n                        break;\n                    }\n                }\n                return link;\n            } else {\n                return null;\n            }\n        }\n\n        // Leave single selection mode.\n        function leaveSingleSelectionMode() {\n            if($scope.selectedMode === SELECTION_MODE.SINGLE ||\n                $scope.selectedMode === SELECTION_MODE.ADD ||\n                $scope.selectedMode === SELECTION_MODE.DELETE) {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            }\n        }\n\n        // Update the new interface since the interfaces list has\n        // been reloaded.\n        function updateNewInterface() {\n            if(angular.isObject($scope.newInterface.parent)) {\n                var parentId = $scope.newInterface.parent.id;\n                var linkId = $scope.newInterface.parent.link_id;\n                var links = $scope.interfaceLinksMap[parentId];\n                if(angular.isObject(links)) {\n                    var newParent = links[linkId];\n                    if(angular.isObject(newParent)) {\n                        $scope.newInterface.parent = newParent;\n\n                        var iType = $scope.newInterface.type;\n                        var isAlias = iType === INTERFACE_TYPE.ALIAS;\n                        var isVLAN = iType === INTERFACE_TYPE.VLAN;\n                        var canAddAlias = $scope.canAddAlias(newParent);\n                        var canAddVLAN = $scope.canAddVLAN(newParent);\n                        if(!canAddAlias && !canAddVLAN) {\n                            // Cannot do any adding now.\n                            $scope.newInterface = {};\n                            leaveSingleSelectionMode();\n                        } else {\n                            if(isAlias && !canAddAlias && canAddVLAN) {\n                                $scope.newInterface.type = \"vlan\";\n                                $scope.addTypeChanged();\n                            } else if(isVLAN && !canAddVLAN && canAddAlias) {\n                                $scope.newInterface.type = \"alias\";\n                                $scope.addTypeChanged();\n                            }\n                        }\n                        return;\n                    }\n                }\n\n                // Parent no longer exists. Exit the single selection modes.\n                $scope.newInterface = {};\n                leaveSingleSelectionMode();\n            }\n        }\n\n        // Return the default VLAN for a fabric.\n        function getDefaultVLAN(fabric) {\n            return VLANsManager.getItemFromList(fabric.default_vlan_id);\n        }\n\n        // Return list of unused VLANs for an interface. Also remove the\n        // ignoreVLANs from the returned list.\n        function getUnusedVLANs(nic, ignoreVLANs) {\n            var vlans = $filter('removeDefaultVLAN')($scope.vlans);\n            vlans = $filter('filterByFabric')(vlans, nic.fabric);\n            vlans = $filter('filterByUnusedForInterface')(\n                vlans, nic, $scope.originalInterfaces);\n\n            // Remove the VLAN's that should be ignored when getting the unused\n            // VLANs. This is done to help the selection of the next default.\n            if(angular.isUndefined(ignoreVLANs)) {\n                ignoreVLANs = [];\n            }\n            angular.forEach(ignoreVLANs, function(vlan) {\n                var i;\n                for(i = 0; i < vlans.length; i++) {\n                    if(vlans[i].id === vlan.id) {\n                        vlans.splice(i, 1);\n                        break;\n                    }\n                }\n            });\n            return vlans;\n        }\n\n        // Return the currently selected interface objects.\n        function getSelectedInterfaces() {\n            var interfaces = [];\n            angular.forEach($scope.selectedInterfaces, function(key) {\n                var splitKey = key.split('/');\n                var links = $scope.interfaceLinksMap[splitKey[0]];\n                if(angular.isObject(links)) {\n                    var nic = links[splitKey[1]];\n                    if(angular.isObject(nic)) {\n                        interfaces.push(nic);\n                    }\n                }\n            });\n            return interfaces;\n        }\n\n        // Get the next available name.\n        function getNextName(prefix) {\n            var idx = 0;\n            angular.forEach($scope.originalInterfaces, function(nic) {\n                if(nic.name === prefix + idx) {\n                    idx++;\n                }\n            });\n            return prefix + idx;\n        }\n\n        // Return the tags formatted for ngTagInput.\n        function formatTags(tags) {\n            var formatted = [];\n            angular.forEach(tags, function(tag) {\n                formatted.push({ text: tag });\n            });\n            return formatted;\n        }\n\n        // Called by $parent when the node has been loaded.\n        $scope.nodeLoaded = function() {\n            $scope.$watch(\"node.interfaces\", updateInterfaces);\n            // Watch subnets for the served VLANs section.\n            if ($scope.$parent.isController) {\n                $scope.$watch(\"subnets\", updateInterfaces, true);\n            }\n            $scope.nodeHasLoaded = true;\n            updateLoaded();\n        };\n\n        // Return true if only the name or mac address of an interface can\n        // be edited.\n        $scope.isLimitedEditingAllowed = function(nic) {\n            if (!$scope.isSuperUser()) {\n                // If the user is not the superuser, pretend it's not Ready.\n                return false;\n            }\n            if ($scope.$parent.isController || $scope.$parent.isDevice) {\n                // Controllers and Devices are never in limited mode.\n                return false;\n            }\n            return (\n                angular.isObject($scope.node) &&\n                $scope.node.status === \"Deployed\" &&\n                nic.type !== \"vlan\");\n        };\n\n        // Return true if the networking information cannot be edited.\n        // (it can't be changed when the node is in any state other\n        // than Ready or Broken and the user is not a superuser)\n        $scope.isAllNetworkingDisabled = function() {\n            if (!$scope.isSuperUser()) {\n                // If the user is not a superuser, disable the networking panel.\n                return true;\n            }\n            if ($scope.$parent.isController || $scope.$parent.isDevice) {\n                // Never disable the full networking panel when its a\n                // Controller or Device.\n                return false;\n            }\n            if (angular.isObject($scope.node) &&\n                    [\"Ready\", \"Allocated\", \"Broken\"].indexOf(\n                        $scope.node.status) === -1) {\n                // If a non-controller node is not ready allocated, or broken,\n                // disable networking panel.\n                return true;\n            }\n            // User must be a superuser and the node must be\n            // either ready or broken. Enable it.\n            return false;\n        };\n\n        // Return true if the interface is the boot interface or has a parent\n        // that is the boot interface.\n        $scope.isBootInterface = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            }\n\n            if(nic.is_boot && nic.type !== INTERFACE_TYPE.ALIAS) {\n                return true;\n            } else if(nic.type === INTERFACE_TYPE.BOND ||\n                      nic.type === INTERFACE_TYPE.BRIDGE) {\n                var i;\n                for(i = 0; i < nic.members.length; i++) {\n                    if(nic.members[i].is_boot) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Get the text for the type of the interface.\n        $scope.getInterfaceTypeText = function(nic) {\n            var text = INTERFACE_TYPE_TEXTS[nic.type];\n            if(angular.isDefined(text)) {\n                return text;\n            } else {\n                return nic.type;\n            }\n        };\n\n        // Get the text for the link mode of the interface.\n        $scope.getLinkModeText = function(nic) {\n            var text = LINK_MODE_TEXTS[nic.mode];\n            if(angular.isDefined(text)) {\n                return text;\n            } else {\n                return nic.mode;\n            }\n        };\n\n        // Get the text to display in the VLAN dropdown.\n        $scope.getVLANText = function(vlan) {\n            if(!angular.isObject(vlan)) {\n                return \"\";\n            }\n\n            if(vlan.vid === 0) {\n                return \"untagged\";\n            } else if(angular.isString(vlan.name) && vlan.name.length > 0) {\n                return vlan.vid + \" (\" + vlan.name + \")\";\n            } else {\n                return vlan.vid;\n            }\n        };\n\n        // Get the text to display in the subnet dropdown.\n        $scope.getSubnetText = function(subnet) {\n            if(!angular.isObject(subnet)) {\n                return \"Unconfigured\";\n            } else if(angular.isString(subnet.name) &&\n                subnet.name.length > 0 &&\n                subnet.cidr !== subnet.name) {\n                return subnet.cidr + \" (\" + subnet.name + \")\";\n            } else {\n                return subnet.cidr;\n            }\n        };\n\n        // Get the subnet from its ID.\n        $scope.getSubnet = function(subnetId) {\n            return SubnetsManager.getItemFromList(subnetId);\n        };\n\n        // Return True if the interface name that the user typed is invalid.\n        $scope.isInterfaceNameInvalid = function(nic) {\n            if(!angular.isObject(nic) || !nic.hasOwnProperty('name') ||\n                    nic.name.length === 0) {\n                return true;\n            } else if(angular.isArray($scope.node.interfaces)) {\n                var i;\n                for(i = 0; i < $scope.node.interfaces.length; i++) {\n                    var otherNic = $scope.node.interfaces[i];\n                    if(otherNic.name === nic.name && otherNic.id !== nic.id) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return True if the link mode select should be disabled.\n        $scope.isLinkModeDisabled = function(nic) {\n            // This is only disabled when a subnet has not been selected.\n            if(angular.isFunction(nic.getValue)) {\n                return !angular.isObject(nic.getValue('subnet'));\n            } else {\n                return !angular.isObject(nic.subnet);\n            }\n        };\n\n        // Return the interface errors.\n        $scope.getInterfaceError = function(nic) {\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                return $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            return null;\n        };\n\n        // Return True if the interface IP address that the user typed is\n        // invalid.\n        $scope.isIPAddressInvalid = function(nic) {\n            if(angular.isString(nic.ip_address) && nic.mode === 'static') {\n                return (\n                    !ValidationService.validateIP(nic.ip_address) ||\n                    !ValidationService.validateIPInNetwork(\n                        nic.ip_address, nic.subnet.cidr));\n            } else {\n                return false;\n            }\n        };\n\n        // Return unique key for the interface.\n        $scope.getUniqueKey = function(nic) {\n            return nic.id + \"/\" + nic.link_id;\n        };\n\n        // Toggle selection of the interface.\n        $scope.toggleInterfaceSelect = function(nic) {\n            var key = $scope.getUniqueKey(nic);\n            var idx = $scope.selectedInterfaces.indexOf(key);\n            if(idx > -1) {\n                $scope.selectedInterfaces.splice(idx, 1);\n            } else {\n                $scope.selectedInterfaces.push(key);\n            }\n\n            if($scope.selectedInterfaces.length > 1) {\n                if($scope.selectedMode !== SELECTION_MODE.BOND) {\n                    $scope.selectedMode = SELECTION_MODE.MULTI;\n                }\n            } else if($scope.selectedInterfaces.length === 1) {\n                $scope.selectedMode = SELECTION_MODE.SINGLE;\n            } else {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            }\n        };\n\n        // Return true when the interface is selected.\n        $scope.isInterfaceSelected = function(nic) {\n            return $scope.selectedInterfaces.indexOf(\n                $scope.getUniqueKey(nic)) > -1;\n        };\n\n        // Returns true if the interface is not selected\n        $scope.cannotEditInterface = function(nic) {\n            if ($scope.selectedMode === SELECTION_MODE.NONE) {\n                return false;\n            } else if (\n                  $scope.selectedMode !== SELECTION_MODE.MULTI &&\n                  $scope.isInterfaceSelected(nic)) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return true if in editing mode for the interface.\n        $scope.isEditing = function(nic) {\n            if($scope.selectedMode !== SELECTION_MODE.EDIT) {\n                return false;\n            } else {\n                return $scope.editInterface.id === nic.id;\n            }\n        };\n\n        // Start editing this interface.\n        $scope.edit = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            $scope.selectedMode = SELECTION_MODE.EDIT;\n            if($scope.$parent.isDevice) {\n                $scope.editInterface = {\n                    id: nic.id,\n                    name: nic.name,\n                    mac_address: nic.mac_address,\n                    tags: nic.tags.map(function(tag) { return tag.text; }),\n                    subnet: nic.subnet,\n                    ip_address: nic.ip_address,\n                    ip_assignment: nic.ip_assignment,\n                    link_id: nic.link_id\n                };\n                if(nic.subnet !== undefined && nic.subnet !== null) {\n                    $scope.editInterface.defaultSubnet = nic.subnet;\n                } else {\n                    $scope.editInterface.defaultSubnet = $scope.subnets[0];\n                }\n            } else {\n                $scope.editInterface = {\n                    id: nic.id,\n                    name: nic.name,\n                    mac_address: nic.mac_address,\n                    tags: nic.tags.map(function(tag) { return tag.text; }),\n                    fabric: nic.fabric,\n                    vlan: nic.vlan,\n                    subnet: nic.subnet,\n                    mode: nic.mode,\n                    ip_address: nic.ip_address,\n                    link_id: nic.link_id\n                };\n            }\n        };\n\n        // Called when the fabric is changed.\n        $scope.fabricChanged = function(nic) {\n            // Update the VLAN on the node to be the default VLAN for that\n            // fabric. The first VLAN for the fabric is the default.\n            if(nic.fabric !== null) {\n                nic.vlan = getDefaultVLAN(nic.fabric);\n            } else {\n                nic.vlan = null;\n            }\n            $scope.vlanChanged(nic);\n        };\n\n        // Called when the fabric is changed in a maas-obj-form.\n        $scope.fabricChangedForm = function(key, value, form) {\n            var vlan;\n            if(value !== null) {\n                vlan = getDefaultVLAN(value);\n            } else {\n                vlan = null;\n            }\n            form.updateValue('vlan', vlan);\n            $scope.vlanChangedForm('vlan', vlan, form);\n        };\n\n        // Called when the VLAN is changed.\n        $scope.vlanChanged = function(nic) {\n            nic.subnet = null;\n            $scope.subnetChanged(nic);\n        };\n\n        // Called when the VLAN is changed on a maas-obj-form\n        $scope.vlanChangedForm = function(key, value, form) {\n            form.updateValue('subnet', null);\n            $scope.subnetChangedForm('subnet', null, form);\n        };\n\n        // Called when the subnet is changed.\n        $scope.subnetChanged = function(nic) {\n            if(!angular.isObject(nic.subnet)) {\n                // Set to 'Unconfigured' so the link mode should be set to\n                // 'link_up'.\n                nic.mode = LINK_MODE.LINK_UP;\n            }\n            if ($scope.$parent.isDevice) {\n                nic.ip_address = null;\n            }\n            $scope.modeChanged(nic);\n        };\n\n        // Called when the subnet is changed.\n        $scope.subnetChangedForm = function(key, value, form) {\n            if(!angular.isObject(value)) {\n                // Set to 'Unconfigured' so the link mode should be set to\n                // 'link_up'.\n                form.updateValue('mode', LINK_MODE.LINK_UP);\n            }\n            mode = form.getValue('mode');\n            form.updateValue('ip_address', null);\n            $scope.modeChangedForm('mode', mode, form);\n        };\n\n        // Called when the mode is changed.\n        $scope.modeChanged = function(nic) {\n            // Clear the IP address when the mode is changed.\n            nic.ip_address = \"\";\n            if(nic.mode === 'static') {\n                var originalLink = mapNICToOriginalLink(nic.id, nic.link_id);\n                if(angular.isObject(originalLink) &&\n                    nic.subnet.id === originalLink.subnet_id) {\n                    // Set the original IP address if same subnet.\n                    nic.ip_address = originalLink.ip_address;\n                }\n            }\n        };\n\n        // Called when the mode is changed on a maas-obj-form.\n        $scope.modeChangedForm = function(key, value, form) {\n            // Clear the IP address when the mode is changed.\n            form.updateValue('ip_address', \"\");\n            if(value === 'static') {\n                var originalLink = mapNICToOriginalLink(\n                  form.getValue('id'), form.getValue('link_id'));\n                if(angular.isObject(originalLink) &&\n                    form.getValue('subnet').id === originalLink.subnet_id) {\n                    // Set the original IP address if same subnet.\n                    form.updateValue('ip_address', originalLink.ip_address);\n                }\n            }\n        };\n\n        // Called to cancel edit mode.\n        $scope.editCancel = function(nic) {\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n            $scope.editInterface = null;\n        };\n\n        // Preprocess things for updateInterfaceForm.\n        $scope.preProcessInterface = function(nic) {\n            var params = angular.copy(nic);\n\n            delete params.id;\n            params.system_id = $scope.node.system_id;\n            params.interface_id = nic.id;\n\n            // we need IDs not objects.\n            if(nic.fabric !== undefined && nic.fabric !== null) {\n                params.fabric = nic.fabric.id;\n            } else {\n                params.fabric = null;\n            }\n            if(nic.vlan !== undefined && nic.vlan !== null) {\n                params.vlan = nic.vlan.id;\n            } else {\n                params.vlan = null;\n            }\n            if(nic.subnet !== undefined && nic.subnet !== null) {\n                params.subnet = params.subnet.id;\n            } else {\n                delete params.subnet;\n            }\n\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            } else {\n                delete params.link_id;\n            }\n            if((nic.mode === LINK_MODE.STATIC ||\n                nic.ip_assignment !== IP_ASSIGNMENT.DYNAMIC) &&\n               angular.isString(nic.ip_address) &&\n               nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            } else {\n                delete params.ip_address;\n            }\n            return params;\n        };\n\n        // Save the following interface on the node.\n        $scope.saveInterface = function(nic) {\n            var params;\n            if($scope.$parent.isDevice) {\n                params = {\n                    \"name\": nic.name,\n                    \"mac_address\": nic.mac_address,\n                    \"ip_assignment\": nic.ip_assignment,\n                    \"ip_address\": nic.ip_address\n                };\n            } else {\n                params = {\n                    \"name\": nic.name,\n                    \"mac_address\": nic.mac_address,\n                    \"mode\": nic.mode,\n                    \"tags\": nic.tags.map(\n                        function(tag) { return tag.text; })\n                };\n            }\n            if(nic.fabric !== undefined && nic.fabric !== null) {\n                params.fabric = nic.fabric.id;\n            } else {\n                params.fabric = null;\n            }\n            if(nic.vlan !== undefined && nic.vlan !== null) {\n                params.vlan = nic.vlan.id;\n            } else {\n                params.vlan = null;\n            }\n            if (nic.subnet !== undefined && nic.subnet !== null) {\n                params.subnet = nic.subnet.id;\n            } else {\n                params.subnet = null;\n            }\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            if(angular.isString(nic.ip_address) && nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            }\n            return $scope.$parent.nodesManager.updateInterface(\n                $scope.node, nic.id, params).then(null, function(error) {\n                    // XXX blake_r: Just log the error in the console, but\n                    // we need to expose this as a better message to the\n                    // user.\n                    console.log(error);\n\n                    // Update the interfaces so it is back to the way it\n                    // was before the user changed it.\n                    updateInterfaces();\n                });\n        };\n\n        // Save the following link on the node.\n        $scope.saveInterfaceLink = function(nic) {\n            var params = {\n                \"mode\": nic.mode\n            };\n            if($scope.$parent.isDevice) {\n                params.ip_assignment = nic.ip_assignment;\n            }\n            if(angular.isObject(nic.subnet)) {\n                params.subnet = nic.subnet.id;\n            }\n            if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                params.link_id = nic.link_id;\n                delete $scope.interfaceErrorsByLinkId[nic.link_id];\n            }\n            if(nic.mode === LINK_MODE.STATIC &&\n                angular.isString(nic.ip_address) &&\n                nic.ip_address.length > 0) {\n                params.ip_address = nic.ip_address;\n            }\n            return $scope.$parent.nodesManager.linkSubnet(\n                $scope.node, nic.id, params).then(null, function(error) {\n                    console.log(error);\n                    if(angular.isDefined(nic.link_id) && nic.link_id >= 0) {\n                        $scope.interfaceErrorsByLinkId[nic.link_id] = error;\n                    }\n                    // Update the interfaces so it is back to the way it\n                    // was before the user changed it.\n                    updateInterfaces();\n                    throw error;\n                });\n        };\n\n        // Called to save the interface.\n        $scope.editSave = function(editInterface) {\n            $scope.editCancel();\n            return editInterface;\n        };\n\n        // Return true if the interface delete confirm is being shown.\n        $scope.isShowingDeleteConfirm = function() {\n            return $scope.selectedMode === SELECTION_MODE.DELETE;\n        };\n\n        // Return true if the interface add interface is being shown.\n        $scope.isShowingAdd = function() {\n            return $scope.selectedMode === SELECTION_MODE.ADD;\n        };\n\n        // Return true if either an alias or VLAN can be added.\n        $scope.canAddAliasOrVLAN = function(nic) {\n            if($scope.$parent.isController) {\n                return false;\n            } else if ($scope.isAllNetworkingDisabled()) {\n                return false;\n            } else {\n                return $scope.canAddAlias(nic) || $scope.canAddVLAN(nic);\n            }\n        };\n\n        // Return true if the alias can be added to interface.\n        $scope.canAddAlias = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            } else if(nic.type === INTERFACE_TYPE.ALIAS) {\n                return false;\n            } else if(nic.links.length === 0 ||\n                nic.links[0].mode === LINK_MODE.LINK_UP) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return true if the VLAN can be added to interface.\n        $scope.canAddVLAN = function(nic) {\n            if(!angular.isObject(nic)) {\n                return false;\n            } else if(nic.type === INTERFACE_TYPE.ALIAS ||\n                nic.type === INTERFACE_TYPE.VLAN) {\n                return false;\n            }\n            var unusedVLANs = getUnusedVLANs(nic);\n            return unusedVLANs.length > 0;\n        };\n\n        // Return true if another VLAN can be added to this already being\n        // added interface.\n        $scope.canAddAnotherVLAN = function(nic) {\n            if(!$scope.canAddVLAN(nic)) {\n                return false;\n            }\n            var unusedVLANs = getUnusedVLANs(nic);\n            return unusedVLANs.length > 1;\n        };\n\n        // Return the text to use for the remove link and message.\n        $scope.getRemoveTypeText = function(nic) {\n            if(nic.type === INTERFACE_TYPE.PHYSICAL) {\n                return \"interface\";\n            } else if(nic.type === INTERFACE_TYPE.VLAN) {\n                return \"VLAN\";\n            } else {\n                return nic.type;\n            }\n        };\n\n        // Return true if the interface can be removed.\n        $scope.canBeRemoved = function() {\n            return (\n                !$scope.$parent.isController &&\n                !$scope.isAllNetworkingDisabled());\n        };\n\n        // Enter remove mode.\n        $scope.remove = function() {\n            $scope.selectedMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter remove by selecting the node first.\n        $scope.quickRemove = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            $scope.remove();\n        };\n\n        // Cancel the current mode go back to sinle selection mode.\n        $scope.cancel = function() {\n            $scope.newInterface = {};\n            $scope.newBondInterface = {};\n            $scope.newBridgeInterface = {};\n            if($scope.selectedMode === SELECTION_MODE.CREATE_BOND) {\n                $scope.selectedMode = SELECTION_MODE.MULTI;\n            } else if($scope.selectedMode === SELECTION_MODE.CREATE_PHYSICAL) {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n            } else {\n                $scope.selectedMode = SELECTION_MODE.SINGLE;\n            }\n        };\n\n        // Confirm the removal of interface.\n        $scope.confirmRemove = function(nic) {\n            $scope.selectedMode = SELECTION_MODE.NONE;\n            $scope.selectedInterfaces = [];\n            if(nic.type !== INTERFACE_TYPE.ALIAS) {\n                $scope.$parent.nodesManager.deleteInterface(\n                    $scope.node, nic.id);\n            } else {\n                $scope.$parent.nodesManager.unlinkSubnet(\n                    $scope.node, nic.id, nic.link_id);\n            }\n\n            // Remove the interface from available interfaces\n            var idx = $scope.interfaces.indexOf(nic);\n            if(idx > -1) {\n                $scope.interfaces.splice(idx, 1);\n            }\n        };\n\n        // Enter add mode.\n        $scope.add = function(type, nic) {\n            // When this is called right after another VLAN was just added, we\n            // remove its used VLAN from the available list.\n            var ignoreVLANs = [];\n            if(angular.isObject($scope.newInterface.vlan)) {\n                ignoreVLANs.push($scope.newInterface.vlan);\n            }\n\n            // Get the default VLAN for the new interface.\n            var vlans = getUnusedVLANs(nic, ignoreVLANs);\n            var defaultVLAN = null;\n            if(vlans.length > 0) {\n                defaultVLAN = vlans[0];\n            }\n            var defaultSubnet = null;\n            var defaultMode = LINK_MODE.LINK_UP;\n\n            // Alias used defaults based from its parent.\n            if(type === INTERFACE_TYPE.ALIAS) {\n                defaultVLAN = nic.vlan;\n                defaultSubnet = $filter('filter')(\n                    $scope.subnets, {vlan:defaultVLAN.id}, true)[0];\n                defaultMode = LINK_MODE.AUTO;\n            }\n\n            // Setup the new interface and enter add mode.\n            $scope.newInterface = {\n                type: type,\n                vlan: defaultVLAN,\n                subnet: defaultSubnet,\n                mode: defaultMode,\n                parent: nic,\n                tags: []\n            };\n            $scope.selectedMode = SELECTION_MODE.ADD;\n        };\n\n        // Quickly enter add by selecting the node first.\n        $scope.quickAdd = function(nic) {\n            $scope.selectedInterfaces = [$scope.getUniqueKey(nic)];\n            var type = 'alias';\n            if(!$scope.canAddAlias(nic)) {\n                type = 'vlan';\n            }\n            $scope.add(type, nic);\n        };\n\n        // Return the name of the interface being added.\n        $scope.getAddName = function() {\n            if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                var aliasIdx = $scope.newInterface.parent.links.length;\n                return $scope.newInterface.parent.name + \":\" + aliasIdx;\n            } else if ($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                return (\n                    $scope.newInterface.parent.name + \".\" +\n                    $scope.newInterface.vlan.vid);\n            }\n        };\n\n        // Called when the type of interface is changed.\n        $scope.addTypeChanged = function() {\n            if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                $scope.newInterface.vlan = $scope.newInterface.parent.vlan;\n                $scope.newInterface.subnet = $filter('filter')(\n                    $scope.subnets,\n                    {vlan:$scope.newInterface.vlan.id}, true)[0];\n                $scope.newInterface.mode = LINK_MODE.AUTO;\n            } else if($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                var vlans = getUnusedVLANs($scope.newInterface.parent);\n                $scope.newInterface.vlan = null;\n                if(vlans.length > 0) {\n                    $scope.newInterface.vlan = vlans[0];\n                }\n                $scope.newInterface.subnet = null;\n                $scope.newInterface.mode = LINK_MODE.LINK_UP;\n            }\n        };\n\n        // Perform the add action over the websocket.\n        $scope.addInterface = function(type) {\n            var nic;\n            if($scope.$parent.isDevice) {\n                nic = {\n                    id: $scope.newInterface.parent.id,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    ip_assignment: $scope.newInterface.ip_assignment,\n                    subnet: $scope.newInterface.subnet,\n                    ip_address: $scope.newInterface.ip_address\n                };\n                $scope.saveInterfaceLink(nic);\n            } else if($scope.newInterface.type === INTERFACE_TYPE.ALIAS) {\n                // Add a link to the current interface.\n                nic = {\n                    id: $scope.newInterface.parent.id,\n                    mode: $scope.newInterface.mode,\n                    subnet: $scope.newInterface.subnet,\n                    ip_address: $scope.newInterface.ip_address\n                };\n                $scope.saveInterfaceLink(nic);\n            } else if($scope.newInterface.type === INTERFACE_TYPE.VLAN) {\n                var params = {\n                    parent: $scope.newInterface.parent.id,\n                    vlan: $scope.newInterface.vlan.id,\n                    mode: $scope.newInterface.mode,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; })\n                };\n                if(angular.isObject($scope.newInterface.subnet)) {\n                    params.subnet = $scope.newInterface.subnet.id;\n                    params.ip_address = $scope.newInterface.ip_address;\n                }\n                $scope.$parent.nodesManager.createVLANInterface(\n                    $scope.node, params).then(null, function(error) {\n                        // Should do something better but for now just log\n                        // the error.\n                        console.log(error);\n                    });\n            }\n\n            // Add again based on the clicked option.\n            if(angular.isString(type)) {\n                $scope.add(type, $scope.newInterface.parent);\n            } else {\n                $scope.selectedMode = SELECTION_MODE.NONE;\n                $scope.selectedInterfaces = [];\n                $scope.newInterface = {};\n            }\n        };\n\n        // Return true if the networking information cannot be edited\n        // or if this interface should be disabled in the list. Only\n        // returns true when in create bond mode.\n        $scope.isDisabled = function() {\n            if ($scope.isAllNetworkingDisabled()) {\n                return true;\n            } else {\n                return (\n                    $scope.selectedMode !== SELECTION_MODE.NONE &&\n                    $scope.selectedMode !== SELECTION_MODE.SINGLE &&\n                    $scope.selectedMode !== SELECTION_MODE.MULTI);\n            }\n        };\n\n        // Return true when a bond can be created based on the current\n        // selection. Only can be done if no aliases are selected and all\n        // selected interfaces are on the same VLAN.\n        $scope.canCreateBond = function() {\n            if($scope.selectedMode !== SELECTION_MODE.MULTI) {\n                return false;\n            }\n            var interfaces = getSelectedInterfaces();\n            var i, vlan;\n            for(i = 0; i < interfaces.length; i++) {\n                var nic = interfaces[i];\n                if(nic.type === INTERFACE_TYPE.ALIAS ||\n                    nic.type === INTERFACE_TYPE.BOND) {\n                    return false;\n                } else if(!angular.isObject(vlan)) {\n                    vlan = nic.vlan;\n                } else if(vlan !== nic.vlan) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        // Return true when the create bond view is being shown.\n        $scope.isShowingCreateBond = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_BOND;\n        };\n\n        // Show the create bond view.\n        $scope.showCreateBond = function() {\n            if($scope.selectedMode === SELECTION_MODE.MULTI &&\n                $scope.canCreateBond()) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_BOND;\n\n                var parents = getSelectedInterfaces();\n                $scope.newBondInterface = {\n                    name: getNextName(\"bond\"),\n                    tags: [],\n                    parents: parents,\n                    primary: parents[0],\n                    mac_address: \"\",\n                    mode: \"active-backup\",\n                    lacpRate: \"slow\",\n                    xmitHashPolicy: \"layer2\"\n                };\n            }\n        };\n\n        // Return true if the interface has a parent that is a boot interface.\n        $scope.hasBootInterface = function(nic) {\n            if(!angular.isArray(nic.parents)) {\n                return false;\n            }\n            var i;\n            for(i = 0; i < nic.parents.length; i++) {\n                if(nic.parents[i].is_boot) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return the MAC address that should be shown as a placeholder. This\n        // this is the MAC address of the primary interface.\n        $scope.getInterfacePlaceholderMACAddress = function(nic) {\n            if(!angular.isObject(nic.primary)) {\n                return \"\";\n            } else {\n                return nic.primary.mac_address;\n            }\n        };\n\n        // Return true if the user has inputed a value in the MAC address field\n        // but it is invalid.\n        $scope.isMACAddressInvalid = function(mac_address, invalidEmpty) {\n            if(angular.isUndefined(invalidEmpty)) {\n                invalidEmpty = false;\n            }\n            if(!angular.isString(mac_address) || mac_address === \"\") {\n                return invalidEmpty;\n            }\n            return !ValidationService.validateMAC(mac_address);\n        };\n\n        // Return true when the LACR rate selection should be shown.\n        $scope.showLACPRate = function() {\n            return $scope.newBondInterface.mode === \"802.3ad\";\n        };\n\n        // Return true when the XMIT hash policy should be shown.\n        $scope.showXMITHashPolicy = function() {\n            return (\n                $scope.newBondInterface.mode === \"balance-xor\" ||\n                $scope.newBondInterface.mode === \"802.3ad\" ||\n                $scope.newBondInterface.mode === \"balance-tlb\");\n        };\n\n        // Return true if cannot add the bond.\n        $scope.cannotAddBond = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newBondInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newBondInterface.mac_address));\n        };\n\n        // Actually add the bond.\n        $scope.addBond = function() {\n            if($scope.cannotAddBond()) {\n               return;\n            }\n\n            var parents = $scope.newBondInterface.parents.map(\n                function(nic) { return nic.id; });\n            var mac_address = $scope.newBondInterface.mac_address;\n            if(mac_address === \"\") {\n                mac_address = $scope.newBondInterface.primary.mac_address;\n            }\n            var vlan_id, vlan = $scope.newBondInterface.primary.vlan;\n            if(angular.isObject(vlan)) {\n                vlan_id = vlan.id;\n            } else {\n                vlan_id = null;\n            }\n            var params = {\n                name: $scope.newBondInterface.name,\n                mac_address: mac_address,\n                tags: $scope.newBondInterface.tags.map(\n                    function(tag) { return tag.text; }),\n                parents: parents,\n                vlan: vlan_id,\n                bond_mode: $scope.newBondInterface.mode,\n                bond_lacp_rate: $scope.newBondInterface.lacpRate,\n                bond_xmit_hash_policy: $scope.newBondInterface.xmitHashPolicy\n            };\n            $scope.$parent.nodesManager.createBondInterface(\n                $scope.node, params).then(null, function(error) {\n                    // Should do something better but for now just log\n                    // the error.\n                    console.log(error);\n                });\n\n            // Remove the parent interfaces so that they don't show up\n            // in the listing unti the new bond appears.\n            angular.forEach($scope.newBondInterface.parents, function(parent) {\n                var idx = $scope.interfaces.indexOf(parent);\n                if(idx > -1) {\n                    $scope.interfaces.splice(idx, 1);\n                }\n            });\n\n            // Clear the bond interface and reset the mode.\n            $scope.newBondInterface = {};\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n        };\n\n        // Return true when a bridge can be created based on the current\n        // selection. Only can be done if no aliases are selected and only\n        // one interface is selected.\n        $scope.canCreateBridge = function() {\n            if($scope.selectedMode !== SELECTION_MODE.SINGLE) {\n                return false;\n            }\n            var nic = getSelectedInterfaces()[0];\n            if(nic.type === INTERFACE_TYPE.ALIAS ||\n                nic.type === INTERFACE_TYPE.BRIDGE) {\n                return false;\n            }\n            return true;\n        };\n\n        // Return true when the create bridge view is being shown.\n        $scope.isShowingCreateBridge = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_BRIDGE;\n        };\n\n        // Show the create bridge view.\n        $scope.showCreateBridge = function() {\n            if($scope.selectedMode === SELECTION_MODE.SINGLE &&\n                $scope.canCreateBridge()) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_BRIDGE;\n\n                var parents = getSelectedInterfaces();\n                $scope.newBridgeInterface = {\n                    name: getNextName(\"br\"),\n                    tags: [],\n                    parents: parents,\n                    primary: parents[0],\n                    mac_address: \"\",\n                    bridge_stp: false,\n                    bridge_fd: 15\n                };\n            }\n        };\n\n        // Return true if cannot add the bridge.\n        $scope.cannotAddBridge = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newBridgeInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newBridgeInterface.mac_address));\n        };\n\n        // Actually add the bridge.\n        $scope.addBridge = function() {\n            if($scope.cannotAddBridge()) {\n               return;\n            }\n\n            var parents = [$scope.newBridgeInterface.primary.id];\n            var mac_address = $scope.newBridgeInterface.mac_address;\n            if(mac_address === \"\") {\n                mac_address = $scope.newBridgeInterface.primary.mac_address;\n            }\n            var params = {\n                name: $scope.newBridgeInterface.name,\n                mac_address: mac_address,\n                tags: $scope.newBridgeInterface.tags.map(\n                    function(tag) { return tag.text; }),\n                parents: parents,\n                vlan: $scope.newBridgeInterface.primary.vlan.id,\n                bridge_stp: $scope.newBridgeInterface.bridge_stp,\n                bridge_fd: $scope.newBridgeInterface.bridge_fd\n            };\n            $scope.$parent.nodesManager.createBridgeInterface(\n                $scope.node, params).then(null, function(error) {\n                    // Should do something better but for now just log\n                    // the error.\n                    console.log(error);\n                });\n\n            // Remove the parent interface so that they don't show up\n            // in the listing unti the new bond appears.\n            var idx = $scope.interfaces.indexOf(\n                $scope.newBridgeInterface.primary);\n            if(idx > -1) {\n                $scope.interfaces.splice(idx, 1);\n            }\n\n            // Clear the bridge interface and reset the mode.\n            $scope.newBridgeInterface = {};\n            $scope.selectedInterfaces = [];\n            $scope.selectedMode = SELECTION_MODE.NONE;\n        };\n\n        // Return true when the create physical interface view is being shown.\n        $scope.isShowingCreatePhysical = function() {\n            return $scope.selectedMode === SELECTION_MODE.CREATE_PHYSICAL;\n        };\n\n        // Show the create interface view.\n        $scope.showCreatePhysical = function() {\n            if($scope.selectedMode === SELECTION_MODE.NONE) {\n                $scope.selectedMode = SELECTION_MODE.CREATE_PHYSICAL;\n                if($scope.$parent.isDevice) {\n                    $scope.newInterface = {\n                        name: getNextName(\"eth\"),\n                        mac_address: \"\",\n                        macError: false,\n                        tags: [],\n                        errorMsg: null,\n                        subnet: null,\n                        ip_assignment: IP_ASSIGNMENT.DYNAMIC\n                    };\n                } else {\n                    $scope.newInterface = {\n                        name: getNextName(\"eth\"),\n                        mac_address: \"\",\n                        macError: false,\n                        tags: [],\n                        errorMsg: null,\n                        fabric: $scope.fabrics[0],\n                        vlan: getDefaultVLAN($scope.fabrics[0]),\n                        subnet: null,\n                        mode: LINK_MODE.LINK_UP\n                    };\n                }\n            }\n        };\n\n        // Return true if cannot add the interface.\n        $scope.cannotAddPhysicalInterface = function() {\n            return (\n                $scope.isInterfaceNameInvalid($scope.newInterface) ||\n                $scope.isMACAddressInvalid(\n                    $scope.newInterface.mac_address, true));\n        };\n\n        // Actually add the new physical interface.\n        $scope.addPhysicalInterface = function() {\n            if($scope.cannotAddPhysicalInterface()) {\n               return;\n            }\n\n            var params;\n            if($scope.$parent.isDevice) {\n                params = {\n                    name: $scope.newInterface.name,\n                    mac_address: $scope.newInterface.mac_address,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    ip_assignment: $scope.newInterface.ip_assignment,\n                    ip_address: $scope.newInterface.ip_address\n                };\n            } else {\n                params = {\n                    name: $scope.newInterface.name,\n                    tags: $scope.newInterface.tags.map(\n                        function(tag) { return tag.text; }),\n                    mac_address: $scope.newInterface.mac_address,\n                    vlan: $scope.newInterface.vlan.id,\n                    mode: $scope.newInterface.mode\n                };\n            }\n            if(angular.isObject($scope.newInterface.subnet)) {\n                params.subnet = $scope.newInterface.subnet.id;\n            }\n            $scope.newInterface.macError = false;\n            $scope.newInterface.errorMsg = null;\n            $scope.$parent.nodesManager.createPhysicalInterface(\n                $scope.node, params).then(function() {\n                    // Clear the interface and reset the mode.\n                    $scope.newInterface = {};\n                    $scope.selectedMode = SELECTION_MODE.NONE;\n                },\n                function(errorStr) {\n                    error = JSONService.tryParse(errorStr);\n                    if(!angular.isObject(error)) {\n                        // Was not a JSON error. This is wrong here as it\n                        // should be, so just log to the console.\n                        console.log(errorStr);\n                    } else {\n                        macError = error.mac_address;\n                        if(angular.isArray(macError)) {\n                            $scope.newInterface.macError = true;\n                            $scope.newInterface.errorMsg = macError[0];\n                        }\n                    }\n                });\n        };\n\n        // Load all the required managers. NodesManager and GeneralManager\n        // are loaded by the parent controller \"NodeDetailsController\".\n        ManagerHelperService.loadManagers($scope, [\n            FabricsManager,\n            VLANsManager,\n            SubnetsManager,\n            UsersManager,\n            ControllersManager\n        ]).then(function() {\n            $scope.managersHaveLoaded = true;\n            updateLoaded();\n        });\n\n        // Tell $parent that the networkingController has been loaded.\n        $scope.$parent.controllerLoaded('networkingController', $scope);\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Storage Controller\n */\n\n\n// Filter that is specific to the NodeStorageController. Remove the available\n// disks from the list if being used in the availableNew.\nangular.module('MAAS').filter('removeAvailableByNew', function() {\n    return function(disks, availableNew) {\n        if(!angular.isObject(availableNew) || (\n            !angular.isObject(availableNew.device) &&\n            !angular.isArray(availableNew.devices))) {\n            return disks;\n        }\n\n        var filtered = [];\n        var single = true;\n        if(angular.isArray(availableNew.devices)) {\n            single = false;\n        }\n        angular.forEach(disks, function(disk) {\n            if(single) {\n                if(disk !== availableNew.device) {\n                    filtered.push(disk);\n                }\n            } else {\n                var i, found = false;\n                for(i = 0; i < availableNew.devices.length; i++) {\n                    if(disk === availableNew.devices[i]) {\n                        found = true;\n                        break;\n                    }\n                }\n                if(!found) {\n                    filtered.push(disk);\n                }\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').controller('NodeStorageController', [\n    '$scope', 'MachinesManager', 'ConverterService', 'UsersManager',\n    function($scope, MachinesManager, ConverterService, UsersManager) {\n\n        // From models/partitiontable.py - must be kept in sync.\n        var INITIAL_PARTITION_OFFSET = 4 * 1024 * 1024;\n        var END_OF_PARTITION_TABLE_SPACE = 1024 * 1024;\n        var PARTITION_TABLE_EXTRA_SPACE = INITIAL_PARTITION_OFFSET +\n            END_OF_PARTITION_TABLE_SPACE;\n        var PREP_PARTITION_SIZE = 8 * 1024 * 1024;\n\n        // From models/partition.py - must be kept in sync.\n        var PARTITION_ALIGNMENT_SIZE = 4 * 1024 * 1024;\n        var MIN_PARTITION_SIZE = PARTITION_ALIGNMENT_SIZE;\n\n        // Different selection modes.\n        var SELECTION_MODE = {\n            NONE: null,\n            SINGLE: \"single\",\n            MUTLI: \"multi\",\n            UNMOUNT: \"unmount\",\n            UNFORMAT: \"unformat\",\n            EDIT: \"edit\",\n            DELETE: \"delete\",\n            FORMAT_AND_MOUNT: \"format-mount\",\n            PARTITION: \"partition\",\n            BCACHE: \"bcache\",\n            RAID: \"raid\",\n            VOLUME_GROUP: \"volume-group\",\n            LOGICAL_VOLUME: \"logical-volume\"\n        };\n\n        // Different available raid modes.\n        var RAID_MODES = [\n            {\n                level: \"raid-0\",\n                title: \"RAID 0\",\n                min_disks: 2,\n                allows_spares: false,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * numDisks;\n                }\n            },\n            {\n                level: \"raid-1\",\n                title: \"RAID 1\",\n                min_disks: 2,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize;\n                }\n            },\n            {\n                level: \"raid-5\",\n                title: \"RAID 5\",\n                min_disks: 3,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * (numDisks - 1);\n                }\n            },\n            {\n                level: \"raid-6\",\n                title: \"RAID 6\",\n                min_disks: 4,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * (numDisks - 2);\n                }\n            },\n            {\n                level: \"raid-10\",\n                title: \"RAID 10\",\n                min_disks: 3,\n                allows_spares: true,\n                calculateSize: function(minSize, numDisks) {\n                    return minSize * numDisks / 2;\n                }\n            }\n        ];\n\n        $scope.tableInfo = {column: 'name'};\n        $scope.has_disks = false;\n        $scope.filesystems = [];\n        $scope.filesystemsMap = {};\n        $scope.filesystemMode = SELECTION_MODE.NONE;\n        $scope.filesystemAllSelected = false;\n        $scope.cachesets = [];\n        $scope.cachesetsMap = {};\n        $scope.cachesetsMode = SELECTION_MODE.NONE;\n        $scope.cachesetsAllSelected = false;\n        $scope.available = [];\n        $scope.availableMap = {};\n        $scope.availableMode = SELECTION_MODE.NONE;\n        $scope.availableAllSelected = false;\n        $scope.availableNew = {};\n        $scope.used = [];\n        $scope.showMembers = [];\n\n        // Return True if the filesystem is mounted.\n        function isMountedFilesystem(filesystem) {\n            return angular.isObject(filesystem) &&\n                angular.isString(filesystem.mount_point) &&\n                filesystem.mount_point !== \"\";\n        }\n\n        // Return True if the item has a filesystem and it's mounted.\n        function hasMountedFilesystem(item) {\n            return angular.isObject(item) &&\n                isMountedFilesystem(item.filesystem);\n        }\n\n        // Returns the fstype if the item has a filesystem and its unmounted.\n        function hasFormattedUnmountedFilesystem(item) {\n            if(angular.isObject(item.filesystem) &&\n                angular.isString(item.filesystem.fstype) &&\n                item.filesystem.fstype !== '' &&\n                (angular.isString(item.filesystem.mount_point) === false ||\n                    item.filesystem.mount_point === '')) {\n                return item.filesystem.fstype;\n            }else{\n                return null;\n            }\n        }\n\n        // Return True if the item is in use.\n        function isInUse(item) {\n            if(item.type === \"cache-set\") {\n                return true;\n            } else if(angular.isObject(item.filesystem)) {\n                if(item.filesystem.is_format_fstype &&\n                    angular.isString(item.filesystem.mount_point) &&\n                    item.filesystem.mount_point !== \"\") {\n                    return true;\n                } else if(!item.filesystem.is_format_fstype) {\n                    return true;\n                }\n                return false;\n            }\n            return item.available_size < MIN_PARTITION_SIZE;\n        }\n\n        // Return the tags formatted for ngTagInput.\n        function getTags(disk) {\n            var tags = [];\n            angular.forEach(disk.tags, function(tag) {\n                tags.push({ text: tag });\n            });\n            return tags;\n        }\n\n        // Return a unique key that will never change.\n        function getUniqueKey(disk) {\n            if(disk.type === \"cache-set\") {\n                return \"cache-set-\" + disk.cache_set_id;\n            } else {\n                var key = disk.type + \"-\" + disk.block_id;\n                if(angular.isNumber(disk.partition_id)) {\n                    key += \"-\" + disk.partition_id;\n                }\n                return key;\n            }\n        }\n\n        // Update the list of filesystems. Only filesystems with a mount point\n        // set go here. If no mount point is set, it goes in available.\n        function updateFilesystems() {\n            // Create the new list of filesystems.\n            var filesystems = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(hasMountedFilesystem(disk)) {\n                    var data = {\n                        \"type\": \"filesystem\",\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"fstype\": disk.filesystem.fstype,\n                        \"mount_point\": disk.filesystem.mount_point,\n                        \"mount_options\": disk.filesystem.mount_options,\n                        \"block_id\": disk.id,\n                        \"partition_id\": null,\n                        \"filesystem_id\": disk.filesystem.id,\n                        \"original_type\": disk.type,\n                        \"original\": disk\n                    };\n                    if(disk.type === \"virtual\") {\n                        disk.parent_type = disk.parent.type;\n                    }\n                    filesystems.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(hasMountedFilesystem(partition)) {\n                        filesystems.push({\n                            \"type\": \"filesystem\",\n                            \"name\": partition.name,\n                            \"size_human\": partition.size_human,\n                            \"fstype\": partition.filesystem.fstype,\n                            \"mount_point\": partition.filesystem.mount_point,\n                            \"mount_options\":\n                                partition.filesystem.mount_options,\n                            \"block_id\": disk.id,\n                            \"partition_id\": partition.id,\n                            \"filesystem_id\": partition.filesystem.id,\n                            \"original_type\": \"partition\",\n                            \"original\": partition\n                        });\n                    }\n                });\n            });\n\n            // Add special filesystems to the filesystem list. A special\n            // filesystem cannot exist unless mounted, so we don't need\n            // to check.\n            angular.forEach(\n                $scope.node.special_filesystems,\n                function(filesystem) {\n                    filesystems.push({\n                        \"type\": \"filesystem\",\n                        \"name\": \"—\",\n                        \"size_human\": \"—\",\n                        \"fstype\": filesystem.fstype,\n                        \"mount_point\": filesystem.mount_point,\n                        \"mount_options\": filesystem.mount_options,\n                        \"block_id\": null,\n                        \"partition_id\": null,\n                        \"original_type\": \"special\"\n                    });\n                });\n\n            // Update the selected filesystems with the currently selected\n            // filesystems.\n            angular.forEach(filesystems, function(filesystem) {\n                var key = getUniqueKey(filesystem);\n                var oldFilesystem = $scope.filesystemsMap[key];\n                if(angular.isObject(oldFilesystem)) {\n                    filesystem.$selected = oldFilesystem.$selected;\n                } else {\n                    filesystem.$selected = false;\n                }\n            });\n\n            // Update the filesystems and filesystemsMap on the scope.\n            $scope.filesystems = filesystems;\n            $scope.filesystemsMap = {};\n            angular.forEach(filesystems, function(filesystem) {\n                $scope.filesystemsMap[getUniqueKey(filesystem)] = filesystem;\n            });\n\n            // Update the selection mode.\n            $scope.updateFilesystemSelection(false);\n        }\n\n        // Update the list of cache sets.\n        function updateCacheSets() {\n            // Create the new list of cache sets.\n            var cachesets = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(disk.type === \"cache-set\") {\n                    cachesets.push({\n                        \"type\": \"cache-set\",\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"cache_set_id\": disk.id,\n                        \"used_by\": disk.used_for\n                    });\n                }\n            });\n\n            // Update the selected cache sets with the currently selected\n            // cache sets.\n            angular.forEach(cachesets, function(cacheset) {\n                var key = getUniqueKey(cacheset);\n                var oldCacheSet = $scope.cachesetsMap[key];\n                if(angular.isObject(oldCacheSet)) {\n                    cacheset.$selected = oldCacheSet.$selected;\n                } else {\n                    cacheset.$selected = false;\n                }\n            });\n\n            // Update the cachesets and cachesetsMap on the scope.\n            $scope.cachesets = cachesets;\n            $scope.cachesetsMap = {};\n            angular.forEach(cachesets, function(cacheset) {\n                $scope.cachesetsMap[getUniqueKey(cacheset)] = cacheset;\n            });\n\n            // Update the selection mode.\n            $scope.updateCacheSetsSelection(false);\n        }\n\n        // Update list of all available disks.\n        function updateAvailable() {\n            var available = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(!isInUse(disk)) {\n                    var has_partitions = false;\n                    if(angular.isArray(disk.partitions) &&\n                        disk.partitions.length > 0) {\n                        has_partitions = true;\n                    }\n                    var data = {\n                        \"name\": disk.name,\n                        \"size_human\": disk.size_human,\n                        \"available_size_human\": disk.available_size_human,\n                        \"used_size_human\": disk.used_size_human,\n                        \"type\": disk.type,\n                        \"model\": disk.model,\n                        \"serial\": disk.serial,\n                        \"tags\": getTags(disk),\n                        \"fstype\": hasFormattedUnmountedFilesystem(disk),\n                        \"mount_point\": null,\n                        \"mount_options\": null,\n                        \"block_id\": disk.id,\n                        \"partition_id\": null,\n                        \"has_partitions\": has_partitions,\n                        \"is_boot\": disk.is_boot,\n                        \"original\": disk,\n                        \"test_status\": disk.test_status,\n                        \"firmware_version\": disk.firmware_version\n                    };\n                    if(disk.type === \"virtual\") {\n                        data.parent_type = disk.parent.type;\n                    }\n                    available.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(!isInUse(partition)) {\n                        available.push({\n                            \"name\": partition.name,\n                            \"size_human\": partition.size_human,\n                            \"available_size_human\": (\n                                partition.available_size_human),\n                            \"used_size_human\": partition.used_size_human,\n                            \"type\": \"partition\",\n                            \"model\": \"\",\n                            \"serial\": \"\",\n                            \"tags\": [],\n                            \"fstype\":\n                                hasFormattedUnmountedFilesystem(partition),\n                            \"mount_point\": null,\n                            \"mount_options\": null,\n                            \"block_id\": disk.id,\n                            \"partition_id\": partition.id,\n                            \"has_partitions\": false,\n                            \"is_boot\": false,\n                            \"original\": partition\n                        });\n                    }\n                });\n            });\n\n            // Update the selected available disks with the currently selected\n            // available disks. Also copy the $options so they are not lost\n            // for the current action.\n            angular.forEach(available, function(disk) {\n                var key = getUniqueKey(disk);\n                var oldDisk = $scope.availableMap[key];\n                if(angular.isObject(oldDisk)) {\n                    disk.$selected = oldDisk.$selected;\n                    disk.$options = oldDisk.$options;\n                } else {\n                    disk.$selected = false;\n                    disk.$options = {};\n                }\n            });\n\n            // Update available and availableMap on the scope.\n            $scope.available = available;\n            $scope.availableMap = {};\n            angular.forEach(available, function(disk) {\n                $scope.availableMap[getUniqueKey(disk)] = disk;\n            });\n\n            // Update device or devices on the availableNew object to be\n            // there new objects.\n            if(angular.isObject($scope.availableNew)) {\n                // Update device.\n                if(angular.isObject($scope.availableNew.device)) {\n                    var key = getUniqueKey($scope.availableNew.device);\n                    $scope.availableNew.device = $scope.availableMap[key];\n                // Update devices.\n                } else if(angular.isArray($scope.availableNew.devices)) {\n                    var newDevices = [];\n                    angular.forEach(\n                        $scope.availableNew.devices, function(device) {\n                            var key = getUniqueKey(device);\n                            var newDevice = $scope.availableMap[key];\n                            if(angular.isObject(newDevice)) {\n                                newDevices.push(newDevice);\n                            }\n                        });\n                    $scope.availableNew.devices = newDevices;\n                }\n            }\n\n            // Update the selection mode.\n            $scope.updateAvailableSelection(false);\n        }\n\n        // Update list of all used disks.\n        function updateUsed() {\n            var used = [];\n            angular.forEach($scope.node.disks, function(disk) {\n                if(isInUse(disk) && disk.type !== \"cache-set\") {\n                    var has_partitions = false;\n                    if(angular.isArray(disk.partitions) &&\n                        disk.partitions.length > 0) {\n                        has_partitions = true;\n                    }\n                    var data = {\n                        \"name\": disk.name,\n                        \"type\": disk.type,\n                        \"model\": disk.model,\n                        \"serial\": disk.serial,\n                        \"tags\": getTags(disk),\n                        \"used_for\": disk.used_for,\n                        \"is_boot\": disk.is_boot,\n                        \"has_partitions\": has_partitions,\n                        \"test_status\": disk.test_status,\n                        \"firmware_version\": disk.firmware_version\n                    };\n                    if(disk.type === \"virtual\") {\n                        data.parent_type = disk.parent.type;\n                    }\n                    used.push(data);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    if(isInUse(partition) && partition.type !== \"cache-set\") {\n                        used.push({\n                            \"name\": partition.name,\n                            \"type\": \"partition\",\n                            \"model\": \"\",\n                            \"serial\": \"\",\n                            \"tags\": [],\n                            \"used_for\": partition.used_for,\n                            \"is_boot\": false\n                        });\n                    }\n                });\n            });\n            $scope.used = used;\n        }\n\n        // Updates the filesystem, available, and used list.\n        function updateDisks() {\n            if(angular.isArray($scope.node.disks)) {\n                $scope.has_disks = $scope.node.disks.length > 0;\n                updateFilesystems();\n                updateCacheSets();\n                updateAvailable();\n                updateUsed();\n            } else {\n                $scope.has_disks = false;\n                $scope.filesystems = [];\n                $scope.filesystemsMap = {};\n                $scope.filesystemMode = SELECTION_MODE.NONE;\n                $scope.filesystemAllSelected = false;\n                $scope.cachesets = [];\n                $scope.cachesetsMap = {};\n                $scope.cachesetsMode = SELECTION_MODE.NONE;\n                $scope.cachesetsAllSelected = false;\n                $scope.available = [];\n                $scope.availableMap = {};\n                $scope.availableMode = SELECTION_MODE.NONE;\n                $scope.availableAllSelected = false;\n                $scope.availableNew = {};\n                $scope.used = [];\n            }\n        }\n\n        // Deselect all items in the array.\n        function deselectAll(items) {\n            angular.forEach(items, function(item) {\n                item.$selected = false;\n            });\n        }\n\n        // Capitalize the first letter of the string.\n        function capitalizeFirstLetter(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n\n        // Return true if the string is a number.\n        function isNumber(string) {\n            var pattern = /^-?\\d+\\.?\\d*$/;\n            return pattern.test(string);\n        }\n\n        // Extract the index from the name based on prefix.\n        function getIndexFromName(prefix, name) {\n            var pattern = new RegExp(\"^\" + prefix + \"([0-9]+)$\");\n            var match = pattern.exec(name);\n            if(angular.isArray(match) && match.length === 2) {\n                return parseInt(match[1], 10);\n            }\n        }\n\n        // Get the next device name based on prefix.\n        function getNextName(prefix) {\n            var idx = -1;\n            angular.forEach($scope.node.disks, function(disk) {\n                var dIdx = getIndexFromName(prefix, disk.name);\n                if(angular.isNumber(dIdx)) {\n                    idx = Math.max(idx, dIdx);\n                }\n                angular.forEach(disk.partitions, function(partition) {\n                    dIdx = getIndexFromName(prefix, partition.name);\n                    if(angular.isNumber(dIdx)) {\n                        idx = Math.max(idx, dIdx);\n                    }\n                });\n            });\n            return prefix + (idx + 1);\n        }\n\n        // Return true if another disk exists with name.\n        function isNameAlreadyInUse(name, exclude_disk) {\n            if(!angular.isArray($scope.node.disks)) {\n                return false;\n            }\n\n            var i, j;\n            for(i = 0; i < $scope.node.disks.length; i++) {\n                var disk = $scope.node.disks[i];\n                if(disk.name === name) {\n                    if(!angular.isObject(exclude_disk) ||\n                        exclude_disk.type === \"partition\" ||\n                        exclude_disk.block_id !== disk.id) {\n                        return true;\n                    }\n                }\n                if(angular.isArray(disk.partitions)) {\n                    for(j = 0; j < disk.partitions.length; j++) {\n                        var partition = disk.partitions[j];\n                        if(partition.name === name) {\n                            if(!angular.isObject(exclude_disk) ||\n                                exclude_disk.type !== \"partition\" ||\n                                exclude_disk.partition_id !== partition.id) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        // Return true if the disk is a logical volume.\n        function isLogicalVolume(disk) {\n            return disk.type === \"virtual\" && disk.parent_type === \"lvm-vg\";\n        }\n\n        // Called by $parent when the node has been loaded.\n        $scope.nodeLoaded = function() {\n            $scope.$watch(\"node.disks\", updateDisks);\n        };\n\n        // Return true if the item can be a boot disk.\n        $scope.isBootDiskDisabled = function(item, section) {\n            // Only superusers can change the boot disk.\n            if(!$scope.isSuperUser()) {\n                return true;\n            }\n\n            // Not ready or allocated so the boot disk cannot be changed.\n            if (angular.isObject($scope.node) &&\n                [\"Ready\", \"Allocated\"].indexOf(\n                    $scope.node.status) === -1) {\n                return true;\n            }\n\n            // Only physical disks can be the boot disk.\n            if(item.type !== \"physical\") {\n                return true;\n            }\n\n            // If the disk is in the used section and does not have any\n            // partitions then it cannot be a boot disk. Boot disk either\n            // require that it be unused or that some partitions exists\n            // on the disk. This is because the boot disk has to have a\n            // partition table header.\n            if(section === \"used\") {\n                return !item.has_partitions;\n            }\n            return false;\n        };\n\n        // Called to change the disk to a boot disk.\n        $scope.setAsBootDisk = function(item) {\n            // Do nothing if already the boot disk.\n            if(item.is_boot) {\n                return;\n            }\n            // Do nothing if disabled.\n            if($scope.isBootDiskDisabled(item)) {\n                return;\n            }\n\n            MachinesManager.setBootDisk($scope.node, item.block_id);\n        };\n\n        // Return array of selected filesystems.\n        $scope.getSelectedFilesystems = function() {\n            var filesystems = [];\n            angular.forEach($scope.filesystems, function(filesystem) {\n                if(filesystem.$selected) {\n                    filesystems.push(filesystem);\n                }\n            });\n            return filesystems;\n        };\n\n        // Update the currect mode for the filesystem section and the all\n        // selected value.\n        $scope.updateFilesystemSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var filesystems = $scope.getSelectedFilesystems();\n            if(filesystems.length === 0) {\n                $scope.filesystemMode = SELECTION_MODE.NONE;\n            } else if(filesystems.length === 1 && force) {\n                $scope.filesystemMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.filesystemMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.filesystems.length === 0) {\n                $scope.filesystemAllSelected = false;\n            } else if(filesystems.length === $scope.filesystems.length) {\n                $scope.filesystemAllSelected = true;\n            } else {\n                $scope.filesystemAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the filesystem.\n        $scope.toggleFilesystemSelect = function(filesystem) {\n            filesystem.$selected = !filesystem.$selected;\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Toggle the selection of all filesystems.\n        $scope.toggleFilesystemAllSelect = function() {\n            angular.forEach($scope.filesystems, function(filesystem) {\n                if($scope.filesystemAllSelected) {\n                    filesystem.$selected = false;\n                } else {\n                    filesystem.$selected = true;\n                }\n            });\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Return true if checkboxes in the filesystem section should be\n        // disabled.\n        $scope.isFilesystemsDisabled = function() {\n            return ((\n                $scope.filesystemMode !== SELECTION_MODE.NONE &&\n                $scope.filesystemMode !== SELECTION_MODE.SINGLE &&\n                $scope.filesystemMode !== SELECTION_MODE.MUTLI) ||\n                $scope.isAllStorageDisabled());\n        };\n\n        // Cancel the current filesystem operation.\n        $scope.filesystemCancel = function() {\n            deselectAll($scope.filesystems);\n            $scope.updateFilesystemSelection(true);\n        };\n\n        // Enter unmount mode.\n        $scope.filesystemUnmount = function() {\n            $scope.filesystemMode = SELECTION_MODE.UNMOUNT;\n        };\n\n        // Quickly enter unmount by selecting the filesystem first.\n        $scope.quickFilesystemUnmount = function(filesystem) {\n            deselectAll($scope.filesystems);\n            filesystem.$selected = true;\n            $scope.updateFilesystemSelection(true);\n            $scope.filesystemUnmount();\n        };\n\n        // Confirm the unmount action for filesystem.\n        $scope.filesystemConfirmUnmount = function(filesystem) {\n            MachinesManager.updateFilesystem(\n                $scope.node,\n                filesystem.block_id, filesystem.partition_id,\n                filesystem.fstype, null, null);\n\n            var idx = $scope.filesystems.indexOf(filesystem);\n            $scope.filesystems.splice(idx, 1);\n            $scope.updateFilesystemSelection();\n        };\n\n        // Enter delete mode.\n        $scope.filesystemDelete = function() {\n            $scope.filesystemMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete by selecting the filesystem first.\n        $scope.quickFilesystemDelete = function(filesystem) {\n            deselectAll($scope.filesystems);\n            filesystem.$selected = true;\n            $scope.updateFilesystemSelection(true);\n            $scope.filesystemDelete();\n        };\n\n        // Confirm the delete action for filesystem.\n        $scope.filesystemConfirmDelete = function(filesystem) {\n            if(filesystem.original_type === \"special\") {\n                // Delete the special filesystem.\n                MachinesManager.unmountSpecialFilesystem(\n                    $scope.node, filesystem.mount_point);\n            } else if(filesystem.original_type === \"partition\") {\n                // Delete the partition.\n                MachinesManager.deletePartition(\n                    $scope.node, filesystem.original.id);\n            } else {\n                // Delete the disk.\n                MachinesManager.deleteFilesystem(\n                    $scope.node, filesystem.block_id, filesystem.partition_id,\n                    filesystem.filesystem_id);\n            }\n\n            var idx = $scope.filesystems.indexOf(filesystem);\n            $scope.filesystems.splice(idx, 1);\n            $scope.updateFilesystemSelection();\n        };\n\n        // Return true if the disk has an unmouted filesystem.\n        $scope.hasUnmountedFilesystem = function(disk) {\n            if(angular.isString(disk.fstype) && disk.fstype !== \"\") {\n                if(!angular.isString(disk.mount_point) ||\n                    disk.mount_point === \"\") {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Return true if the free space label should be shown.\n        $scope.showFreeSpace = function(disk) {\n            if(disk.type === \"lvm-vg\") {\n                return true;\n            } else if(disk.type === \"physical\" || disk.type === \"virtual\") {\n                return disk.has_partitions;\n            } else {\n                return false;\n            }\n        };\n\n        // Return the device type for the disk.\n        $scope.getDeviceType = function(disk) {\n            if(angular.isUndefined(disk)) {\n                return \"\";\n            }\n\n            if(disk.type === \"virtual\") {\n                if(disk.parent_type === \"lvm-vg\") {\n                    return \"Logical volume\";\n                } else if(disk.parent_type.indexOf(\"raid-\") === 0) {\n                    return \"RAID \" + disk.parent_type.split(\"-\")[1];\n                } else {\n                    return capitalizeFirstLetter(disk.parent_type);\n                }\n            } else if(disk.type === \"lvm-vg\") {\n                return \"Volume group\";\n            } else {\n                return capitalizeFirstLetter(disk.type);\n            }\n        };\n\n        // Return array of selected available disks.\n        $scope.getSelectedAvailable = function() {\n            var available = [];\n            angular.forEach($scope.available, function(disk) {\n                if(disk.$selected) {\n                    available.push(disk);\n                }\n            });\n            return available;\n        };\n\n        // Update the currect mode for the available section and the all\n        // selected value.\n        $scope.updateAvailableSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var available = $scope.getSelectedAvailable();\n            if(available.length === 0) {\n                $scope.availableMode = SELECTION_MODE.NONE;\n            } else if(available.length === 1 && force) {\n                $scope.availableMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.availableMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.available.length === 0) {\n                $scope.availableAllSelected = false;\n            } else if(available.length === $scope.available.length) {\n                $scope.availableAllSelected = true;\n            } else {\n                $scope.availableAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the available disk.\n        $scope.toggleAvailableSelect = function(disk) {\n            disk.$selected = !disk.$selected;\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Toggle the selection of all available disks.\n        $scope.toggleAvailableAllSelect = function() {\n            angular.forEach($scope.available, function(disk) {\n                if(!$scope.availableAllSelected) {\n                    disk.$selected = true;\n                } else {\n                    disk.$selected = false;\n                }\n            });\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if checkboxes in the avaiable section should be\n        // disabled.\n        $scope.isAvailableDisabled = function() {\n            return ((\n                $scope.availableMode !== SELECTION_MODE.NONE &&\n                $scope.availableMode !== SELECTION_MODE.SINGLE &&\n                $scope.availableMode !== SELECTION_MODE.MUTLI) ||\n                $scope.isAllStorageDisabled());\n        };\n\n        // Return true if the disk can be formatted and mounted.\n        $scope.canFormatAndMount = function(disk) {\n            if($scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"lvm-vg\" || disk.has_partitions) {\n                return false;\n            } else if(disk.type === \"physical\" && disk.original.is_boot) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Return the text for the partition button.\n        $scope.getPartitionButtonText = function(disk) {\n            if(disk.has_partitions) {\n                return \"Add partition\";\n            } else {\n                return \"Partition\";\n            }\n        };\n\n        $scope.availablePartitionSpace = function(disk) {\n            var space_to_reserve = 0;\n            if(!angular.isString(disk.original.partition_table_type)\n                || disk.original.partition_table_type === \"\") {\n                // Disk has no partition table, so reserve space for it.\n                space_to_reserve = PARTITION_TABLE_EXTRA_SPACE;\n                // ppc64el node requires that space be saved for the prep\n                // partition.\n                if($scope.node.architecture.indexOf(\"ppc64el\") === 0) {\n                    space_to_reserve += PREP_PARTITION_SIZE;\n                }\n            }\n            return ConverterService.roundByBlockSize(\n                disk.original.available_size - space_to_reserve,\n                PARTITION_ALIGNMENT_SIZE);\n        };\n\n        // Return true if a partition can be added to disk.\n        $scope.canAddPartition = function(disk) {\n            if(!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"partition\" || disk.type === \"lvm-vg\") {\n                return false;\n            } else if(disk.type === \"virtual\" &&\n                (disk.parent_type === \"lvm-vg\" ||\n                    disk.parent_type === \"bcache\")) {\n                return false;\n            } else if(angular.isString(disk.fstype) && disk.fstype !== \"\") {\n                return false;\n            }\n            // If we can fit a minimum partition, we're golden.\n            return ($scope.availablePartitionSpace(disk) -\n                MIN_PARTITION_SIZE) >= 0;\n        };\n\n        // Return true if the name is invalid.\n        $scope.isNameInvalid = function(disk) {\n            if(disk.name === \"\") {\n                return false;\n            } else if(isNameAlreadyInUse(disk.name, disk)) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Prevent logical volumes from changing the volume group prefix.\n        $scope.nameHasChanged = function(disk) {\n            if(isLogicalVolume(disk)) {\n                var parentName = disk.original.name.split(\"-\")[0] + \"-\";\n                var startsWith = disk.name.indexOf(parentName);\n                if(startsWith !== 0) {\n                    disk.name = parentName;\n                }\n            }\n        };\n\n        // Cancel the current available operation.\n        $scope.availableCancel = function(disk) {\n            $scope.updateAvailableSelection(true);\n            $scope.availableNew = {};\n        };\n\n        // Return true if the filesystem can be mounted at a directory.\n        $scope.usesMountPoint = function(fstype) {\n            return angular.isString(fstype) && fstype !== \"swap\";\n        };\n\n        // Return true if the filesystem uses storage (partition or\n        // block device).\n        $scope.usesStorage = function(fstype) {\n            return angular.isString(fstype) &&\n                fstype !== \"tmpfs\" && fstype !== \"ramfs\";\n        };\n\n        // Return true if the mount point is invalid.\n        $scope.isMountPointInvalid = function(mountPoint) {\n            if(angular.isUndefined(mountPoint) || mountPoint === \"\") {\n                return false;\n            } else if (mountPoint === \"none\") {\n                // XXX: Hack to allow \"swap\" filesystems to be mounted.\n                // This should be allowed only when fstype is 'swap' but\n                // doing that would require more refactoring (or more\n                // hacks) that I have time for right now.\n                return false;\n            } else if(mountPoint[0] !== \"/\") {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Return true if the disk can be deleted.\n        $scope.canDelete = function(disk) {\n            if (!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n                return false;\n            } else if(disk.type === \"lvm-vg\") {\n                return disk.original.used_size === 0;\n            } else {\n                return !disk.has_partitions;\n            }\n        };\n\n        // Enter delete mode.\n        $scope.availableDelete = function() {\n            $scope.availableMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete mode.\n        $scope.availableQuickDelete = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availableDelete();\n        };\n\n        // Return true if it can be edited.\n        $scope.canEdit = function(disk) {\n          if (!$scope.isSuperUser() || $scope.isAllStorageDisabled()) {\n              return false;\n          } else {\n              return true;\n          }\n        };\n\n        // Enter Edit mode, disable certain fields based on disk type\n        $scope.availableEdit = function(disk) {\n            $scope.availableMode = SELECTION_MODE.EDIT;\n\n            if (disk.type === \"lvm-vg\") {\n                disk.$options = {\n                    editingTags: false,\n                    editingFilesystem: false\n                };\n            } else if (disk.type === \"partition\") {\n                disk.$options = {\n                    editingTags: false,\n                    editingFilesystem: true,\n                    fstype: disk.fstype\n                };\n            } else {\n                disk.$options = {\n                    editingFilesystem: true,\n                    editingTags: true,\n                    tags: angular.copy(disk.tags),\n                    fstype: disk.fstype\n                };\n                if (!$scope.canFormatAndMount(disk)) {\n                    disk.$options.editingFilesystem = false;\n                }\n            }\n        };\n\n        // Quickly enter Edit mode\n        $scope.availableQuickEdit = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availableEdit(disk);\n        };\n\n        // Save the disk which is in Edit mode\n        $scope.availableConfirmEdit = function(disk) {\n            var params = {\n                name: disk.name\n            };\n            // Only take the disk's name if it is a parition as\n            // these params are passed to update_disk.\n            if(disk.type === \"partition\") {\n                params.name = params.name.split('-')[0];\n            }\n\n            // Do nothing if not valid.\n            if($scope.isNameInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Reset the name if its blank.\n            if(disk.name === \"\") {\n                disk.name = disk.original.name;\n            }\n\n            // Ensure logical volume has parent prefix in its name.\n            if(isLogicalVolume(disk)){\n                var parentName = disk.original.name.split(\"-\")[0] + \"-\";\n                params.name = disk.name.slice(parentName.length);\n            }\n\n            // Set filesystem options so formatting and mounting is performed.\n            if(angular.isDefined(disk.$options.fstype)) {\n                params.fstype = disk.$options.fstype;\n                params.mount_point = disk.$options.mountPoint || '';\n                params.mount_options = disk.$options.mountOptions || '';\n            }\n\n            // Update the tags for the disk.\n            if(angular.isArray(disk.$options.tags)) {\n                params.tags = disk.$options.tags.map(\n                    function(tag) { return tag.text; });\n            }\n\n            // Save the options.\n            MachinesManager.updateDisk(\n                $scope.node, disk.block_id, params);\n\n            // Set the options on the object so no flicker occurs while waiting\n            // for the new object to be received.\n            disk.fstype = disk.$options.fstype;\n            disk.mount_point = disk.$options.mountPoint;\n            disk.mount_options = disk.$options.mountOptions;\n            disk.tags = disk.$options.tags;\n            disk.$options = {};\n\n            // If the mount_point is set the we need to transition this to\n            // the filesystem section.\n            if(angular.isString(disk.mount_point) && disk.mount_point !== \"\") {\n                $scope.filesystems.push({\n                    \"name\": disk.name,\n                    \"size_human\": disk.size_human,\n                    \"fstype\": disk.fstype,\n                    \"mount_point\": disk.mount_point,\n                    \"mount_options\": disk.mount_options,\n                    \"block_id\": disk.block_id,\n                    \"partition_id\": disk.partition_id\n                });\n\n                // Remove the selected disk from available.\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n\n            // Deselect the disk after saving\n            disk.$selected = false;\n\n            // Update the current selections.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return the text for remove confirmation message.\n        $scope.getRemoveTypeText = function(disk) {\n            if(disk.type === \"filesystem\") {\n                if (angular.isObject(disk.original)) {\n                    disk = disk.original;\n                } else {\n                    return \"special filesystem\";\n                }\n            }\n\n            if(disk.type === \"physical\") {\n                return \"physical disk\";\n            } else if(disk.type === \"partition\") {\n                return \"partition\";\n            } else if(disk.type === \"lvm-vg\") {\n                return \"volume group\";\n            } else if(disk.type === \"virtual\") {\n                if(disk.parent_type === \"lvm-vg\") {\n                    return \"logical volume\";\n                } else if(disk.parent_type.indexOf(\"raid-\") === 0) {\n                    return \"RAID \" + disk.parent_type.split(\"-\")[1] + \" disk\";\n                } else {\n                    return disk.parent_type + \" disk\";\n                }\n            }\n        };\n\n        // Delete the disk, partition, or volume group.\n        $scope.availableConfirmDelete = function(disk) {\n            if(disk.type === \"lvm-vg\") {\n                // Delete the volume group.\n                MachinesManager.deleteVolumeGroup(\n                    $scope.node, disk.block_id);\n            } else if(disk.type === \"partition\") {\n                // Delete the partition.\n                MachinesManager.deletePartition(\n                    $scope.node, disk.partition_id);\n            } else {\n                // Delete the disk.\n                MachinesManager.deleteDisk(\n                    $scope.node, disk.block_id);\n            }\n\n            // Remove the selected disk from available.\n            var idx = $scope.available.indexOf(disk);\n            $scope.available.splice(idx, 1);\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Enter partition mode.\n        $scope.availablePartition = function(disk) {\n            $scope.availableMode = SELECTION_MODE.PARTITION;\n            // Set starting size to the maximum available space.\n            var size_and_units = disk.available_size_human.split(\" \");\n            disk.$options = {\n                size: size_and_units[0],\n                sizeUnits: size_and_units[1],\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\"\n            };\n        };\n\n        // Quickly enter partition mode.\n        $scope.availableQuickPartition = function(disk) {\n            deselectAll($scope.available);\n            disk.$selected = true;\n            $scope.updateAvailableSelection(true);\n            $scope.availablePartition(disk);\n        };\n\n        // Get the new name of the partition.\n        $scope.getAddPartitionName = function(disk) {\n            var length, partitions = disk.original.partitions;\n            if(angular.isArray(partitions)) {\n                length = partitions.length;\n            } else {\n                length = 0;\n            }\n            if(disk.original.partition_table_type === \"mbr\" &&\n                length > 2) {\n                return disk.name + \"-part\" + (length + 2);\n            } else if($scope.node.architecture.indexOf(\"ppc64el\") === 0 &&\n                disk.original.is_boot) {\n                // Boot disk on ppc64el machines skip the first partition as\n                // its reserved for the prep partition.\n                return disk.name + \"-part\" + (length + 2);\n            } else {\n                return disk.name + \"-part\" + (length + 1);\n            }\n        };\n\n        // Return true if the size is invalid.\n        $scope.isAddPartitionSizeInvalid = function(disk) {\n            if(disk.$options.size === \"\" || !isNumber(disk.$options.size)) {\n                return true;\n            } else {\n                var bytes = ConverterService.unitsToBytes(\n                    disk.$options.size, disk.$options.sizeUnits);\n                if(bytes < MIN_PARTITION_SIZE) {\n                    return true;\n                } else if(bytes > disk.original.available_size) {\n                    // Round the size down to the lowest tolerance for that\n                    // to see if it now fits.\n                    var rounded = ConverterService.roundUnits(\n                        disk.$options.size, disk.$options.sizeUnits);\n                    if(rounded > disk.original.available_size) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n        };\n\n        // Confirm the partition creation.\n        $scope.availableConfirmPartition = function(disk) {\n            // Do nothing if not valid.\n            if($scope.isAddPartitionSizeInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Get the bytes to create the partition.\n            var bytes = ConverterService.unitsToBytes(\n                disk.$options.size, disk.$options.sizeUnits);\n\n            // Accepting prefilled defaults means use whole disk (lp:1509535).\n            var size_and_units = disk.original.available_size_human.split(\" \");\n            if(disk.$options.size === size_and_units[0] &&\n               disk.$options.sizeUnits === size_and_units[1]) {\n                bytes = disk.original.available_size;\n            }\n\n            var removeDisk = false;\n            var available_space = $scope.availablePartitionSpace(disk);\n            if(bytes >= available_space) {\n                // Clamp to available space.\n                bytes = available_space;\n                // Remove the disk if partition uses all the remaining space.\n                removeDisk = true;\n            }\n\n            // Create the partition.\n            var params = {};\n            if(angular.isString(disk.$options.fstype) &&\n                disk.$options.fstype !== \"\") {\n                params.fstype = disk.$options.fstype;\n                if(disk.$options.mountPoint !== \"\") {\n                    params.mount_point = disk.$options.mountPoint;\n                    params.mount_options = disk.$options.mountOptions;\n                }\n            }\n            MachinesManager.createPartition(\n                $scope.node, disk.block_id, bytes, params);\n\n            // Remove the disk if needed.\n            if(removeDisk) {\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return array of selected cache sets.\n        $scope.getSelectedCacheSets = function() {\n            var cachesets = [];\n            angular.forEach($scope.cachesets, function(cacheset) {\n                if(cacheset.$selected) {\n                    cachesets.push(cacheset);\n                }\n            });\n            return cachesets;\n        };\n\n        // Update the currect mode for the cache sets section and the all\n        // selected value.\n        $scope.updateCacheSetsSelection = function(force) {\n            if(angular.isUndefined(force)) {\n                force = false;\n            }\n            var cachesets = $scope.getSelectedCacheSets();\n            if(cachesets.length === 0) {\n                $scope.cachesetsMode = SELECTION_MODE.NONE;\n            } else if(cachesets.length === 1 && force) {\n                $scope.cachesetsMode = SELECTION_MODE.SINGLE;\n            } else if(force) {\n                $scope.cachesetsMode = SELECTION_MODE.MUTLI;\n            }\n\n            if($scope.cachesets.length === 0) {\n                $scope.cachesetsAllSelected = false;\n            } else if(cachesets.length === $scope.cachesets.length) {\n                $scope.cachesetsAllSelected = true;\n            } else {\n                $scope.cachesetsAllSelected = false;\n            }\n        };\n\n        // Toggle the selection of the filesystem.\n        $scope.toggleCacheSetSelect = function(cacheset) {\n            cacheset.$selected = !cacheset.$selected;\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Toggle the selection of all filesystems.\n        $scope.toggleCacheSetAllSelect = function() {\n            angular.forEach($scope.cachesets, function(cacheset) {\n                if($scope.cachesetsAllSelected) {\n                    cacheset.$selected = false;\n                } else {\n                    cacheset.$selected = true;\n                }\n            });\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Return true if checkboxes in the cache sets section should be\n        // disabled.\n        $scope.isCacheSetsDisabled = function() {\n            return ((\n                $scope.isAllStorageDisabled() &&\n                !$scope.isSuperUser()) || (\n                $scope.cachesetsMode !== SELECTION_MODE.NONE &&\n                $scope.cachesetsMode !== SELECTION_MODE.SINGLE &&\n                $scope.cachesetsMode !== SELECTION_MODE.MUTLI));\n        };\n\n        // Cancel the current cache set operation.\n        $scope.cacheSetCancel = function() {\n            deselectAll($scope.cachesets);\n            $scope.updateCacheSetsSelection(true);\n        };\n\n        // Can delete the cache set.\n        $scope.canDeleteCacheSet = function(cacheset) {\n            return (cacheset.used_by === \"\" &&\n                    !$scope.isAllStorageDisabled() &&\n                    $scope.isSuperUser());\n        };\n\n        // Enter delete mode.\n        $scope.cacheSetDelete = function() {\n            $scope.cachesetsMode = SELECTION_MODE.DELETE;\n        };\n\n        // Quickly enter delete by selecting the cache set first.\n        $scope.quickCacheSetDelete = function(cacheset) {\n            deselectAll($scope.cachesets);\n            cacheset.$selected = true;\n            $scope.updateCacheSetsSelection(true);\n            $scope.cacheSetDelete();\n        };\n\n        // Confirm the delete action for cache set.\n        $scope.cacheSetConfirmDelete = function(cacheset) {\n            MachinesManager.deleteCacheSet(\n                $scope.node, cacheset.cache_set_id);\n\n            var idx = $scope.cachesets.indexOf(cacheset);\n            $scope.cachesets.splice(idx, 1);\n            $scope.updateCacheSetsSelection();\n        };\n\n        // Return true if a cache set can be created.\n        $scope.canCreateCacheSet = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length === 1) {\n                return (\n                    !selected[0].has_partitions &&\n                    !$scope.hasUnmountedFilesystem(selected[0]) &&\n                    selected[0].type !== \"lvm-vg\");\n            }\n            return false;\n        };\n\n        // Called to create a cache set.\n        $scope.createCacheSet = function() {\n            if(!$scope.canCreateCacheSet()) {\n                return;\n            }\n\n            // Create cache set.\n            var disk = $scope.getSelectedAvailable()[0];\n            MachinesManager.createCacheSet(\n                $scope.node, disk.block_id, disk.partition_id);\n\n            // Remove from available.\n            var idx = $scope.available.indexOf(disk);\n            $scope.available.splice(idx, 1);\n        };\n\n        // Return the reason a bcache device cannot be created.\n        $scope.getCannotCreateBcacheMsg = function() {\n            if($scope.cachesets.length === 0) {\n                return \"Create at least one cache set to create bcache\";\n            } else {\n                var selected = $scope.getSelectedAvailable();\n                if(selected.length === 1) {\n                    if($scope.hasUnmountedFilesystem(selected[0])) {\n                        return (\n                            \"Device is formatted; unformat the \" +\n                            \"device to create bcache\");\n                    } else if(selected[0].type === \"lvm-vg\") {\n                        return (\n                            \"Cannot use a logical volume as a backing \" +\n                            \"device for bcache.\");\n                    } else if(selected[0].has_partitions) {\n                        return (\n                            \"Device has already been partitioned; create a \" +\n                            \"new partition to use as the bcache backing \" +\n                            \"device\");\n                    } else {\n                        return null;\n                    }\n                } else {\n                    return \"Select only one available device to create bcache\";\n                }\n            }\n        };\n\n        // Return true if a bcache can be created.\n        $scope.canCreateBcache = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var msg = $scope.getCannotCreateBcacheMsg();\n            if(msg === null) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Enter bcache mode.\n        $scope.createBcache = function() {\n            if(!$scope.canCreateBcache()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.BCACHE;\n            $scope.availableNew = {\n                name: getNextName(\"bcache\"),\n                device: $scope.getSelectedAvailable()[0],\n                cacheset: $scope.cachesets[0],\n                cacheMode: \"writeback\",\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\",\n                tags: []\n            };\n        };\n\n        // Clear mount point when the fstype is changed.\n        $scope.fstypeChanged = function(options) {\n            if(options.fstype === null) {\n                options.mountPoint = \"\";\n                options.mountOptions = \"\";\n            }\n            else {\n                // Update the mount point to \"none\" if \"swap\" is\n                // selected, and vice-versa.\n                if ($scope.usesMountPoint(options.fstype)) {\n                    if (options.mountPoint === \"none\") {\n                        options.mountPoint = \"\";\n                    }\n                }\n                else {\n                    options.mountPoint = \"none\";\n                }\n            }\n        };\n\n        // Return true when the name of the new disk is invalid.\n        $scope.isNewDiskNameInvalid = function() {\n            if(!angular.isObject($scope.node) ||\n                !angular.isArray($scope.node.disks)) {\n                return true;\n            }\n\n            if($scope.availableNew.name === \"\") {\n                return true;\n            } else {\n                var i, j;\n                for(i = 0; i < $scope.node.disks.length; i++) {\n                    var disk = $scope.node.disks[i];\n                    if($scope.availableNew.name === disk.name) {\n                        return true;\n                    }\n                    if(angular.isArray(disk.partitions)) {\n                        for(j = 0; j < disk.partitions.length; j++) {\n                            var partition = disk.partitions[j];\n                            if($scope.availableNew.name === partition.name) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n\n        // Return true if bcache can be saved.\n        $scope.createBcacheCanSave = function() {\n            return (\n                !$scope.isNewDiskNameInvalid() &&\n                !$scope.isMountPointInvalid($scope.availableNew.mountPoint));\n        };\n\n        // Confirm and create the bcache device.\n        $scope.availableConfirmCreateBcache = function() {\n            if(!$scope.createBcacheCanSave()) {\n                return;\n            }\n\n            // Create the bcache.\n            var params = {\n                name: $scope.availableNew.name,\n                cache_set: $scope.availableNew.cacheset.cache_set_id,\n                cache_mode: $scope.availableNew.cacheMode\n            };\n            if($scope.availableNew.device.type === \"partition\") {\n                params.partition_id = $scope.availableNew.device.partition_id;\n            } else {\n                params.block_id = $scope.availableNew.device.block_id;\n            }\n            if(angular.isString($scope.availableNew.fstype) &&\n                $scope.availableNew.fstype !== \"\") {\n                params.fstype = $scope.availableNew.fstype;\n                // XXX: Inconsistent tests of mountPoint/mount_point; in\n                // places it's compared to \"\" (like here), in others\n                // it's tested with angular.isDefined(), others with\n                // angular.isString(), others angular.isString() ===\n                // false. This is *begging* for bugs.\n                if($scope.availableNew.mountPoint !== \"\") {\n                    params.mount_point = $scope.availableNew.mountPoint;\n                    params.mount_options = $scope.availableNew.mountOptions;\n                }\n            }\n            if(angular.isArray($scope.availableNew.tags)\n                && $scope.availableNew.tags.length > 0) {\n                params.tags = $scope.availableNew.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createBcache($scope.node, params);\n\n            // Remove device from available.\n            var idx = $scope.available.indexOf($scope.availableNew.device);\n            $scope.available.splice(idx, 1);\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a RAID can be created.\n        $scope.canCreateRAID = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length > 1) {\n                var i;\n                for(i = 0; i < selected.length; i++) {\n                    if($scope.hasUnmountedFilesystem(selected[i])) {\n                        return false;\n                    } else if(selected[i].type === \"lvm-vg\") {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n\n        // Called to create a RAID.\n        $scope.createRAID = function() {\n            if(!$scope.canCreateRAID()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.RAID;\n            $scope.availableNew = {\n                name: getNextName(\"md\"),\n                devices: $scope.getSelectedAvailable(),\n                mode: null,\n                spares: [],\n                fstype: null,\n                mountPoint: \"\",\n                mountOptions: \"\",\n                tags: []\n            };\n            $scope.availableNew.mode = $scope.getAvailableRAIDModes()[0];\n        };\n\n        // Get the available RAID modes.\n        $scope.getAvailableRAIDModes = function() {\n            if(!angular.isObject($scope.availableNew) ||\n                !angular.isArray($scope.availableNew.devices)) {\n                return [];\n            }\n\n            var modes = [];\n            angular.forEach(RAID_MODES, function(mode) {\n                if($scope.availableNew.devices.length >= mode.min_disks) {\n                    modes.push(mode);\n                }\n            });\n            return modes;\n        };\n\n        // Return the total number of available spares for the current mode.\n        $scope.getTotalNumberOfAvailableSpares = function() {\n            var mode = $scope.availableNew.mode;\n            if(angular.isUndefined(mode) || !mode.allows_spares) {\n                return 0;\n            } else {\n                var diff = $scope.availableNew.devices.length - mode.min_disks;\n                if(diff < 0) {\n                    diff = 0;\n                }\n                return diff;\n            }\n        };\n\n        // Return the number of remaining spares that can be selected.\n        $scope.getNumberOfRemainingSpares = function() {\n            var allowed = $scope.getTotalNumberOfAvailableSpares();\n            if(allowed <= 0) {\n                return 0;\n            } else {\n                return allowed - $scope.availableNew.spares.length;\n            }\n        };\n\n        // Return true if the spares column should be shown.\n        $scope.showSparesColumn = function() {\n            return $scope.getTotalNumberOfAvailableSpares() > 0;\n        };\n\n        // Called when the RAID mode is changed to reset the selected spares.\n        $scope.RAIDModeChanged = function() {\n            $scope.availableNew.spares = [];\n        };\n\n        // Return true if the disk is an active RAID member.\n        $scope.isActiveRAIDMember = function(disk) {\n            if(!angular.isArray($scope.availableNew.spares)) {\n                return true;\n            } else {\n                var idx = $scope.availableNew.spares.indexOf(\n                    getUniqueKey(disk));\n                return idx === -1;\n            }\n        };\n\n        // Return true if the disk is a spare RAID member.\n        $scope.isSpareRAIDMember = function(disk) {\n            return !$scope.isActiveRAIDMember(disk);\n        };\n\n        // Set the disk as an active RAID member.\n        $scope.setAsActiveRAIDMember = function(disk) {\n            var idx = $scope.availableNew.spares.indexOf(getUniqueKey(disk));\n            if(idx > -1) {\n                $scope.availableNew.spares.splice(idx, 1);\n            }\n        };\n\n        // Set the disk as a spare RAID member.\n        $scope.setAsSpareRAIDMember = function(disk) {\n            var key = getUniqueKey(disk);\n            var idx = $scope.availableNew.spares.indexOf(key);\n            if(idx === -1) {\n                $scope.availableNew.spares.push(key);\n            }\n        };\n\n        // Return the size of the new RAID device.\n        $scope.getNewRAIDSize = function() {\n            if(angular.isUndefined($scope.availableNew.mode)) {\n                return \"\";\n            }\n            var calculateSize = $scope.availableNew.mode.calculateSize;\n            if(!angular.isFunction(calculateSize)) {\n                return \"\";\n            }\n\n            // Get the number of disks and the minimum disk size in the RAID.\n            var numDisks = (\n                $scope.availableNew.devices.length -\n                $scope.availableNew.spares.length);\n            var minSize = Number.MAX_VALUE;\n            angular.forEach($scope.availableNew.devices, function(device) {\n                // Get the size of the device. For a block device it will be\n                // at available_size and for a partition it will be at size.\n                var deviceSize = (\n                    device.original.available_size || device.original.size);\n                minSize = Math.min(minSize, deviceSize);\n            });\n\n            // Calculate the new size.\n            var size = calculateSize(minSize, numDisks);\n            return ConverterService.bytesToUnits(size).string;\n        };\n\n        // Return true if RAID can be saved.\n        $scope.createRAIDCanSave = function() {\n            return (\n                !$scope.isNewDiskNameInvalid() &&\n                !$scope.isMountPointInvalid($scope.availableNew.mountPoint));\n        };\n\n        // Confirm and create the RAID device.\n        $scope.availableConfirmCreateRAID = function() {\n            if(!$scope.createRAIDCanSave()) {\n                return;\n            }\n\n            // Create the RAID.\n            var params = {\n                name: $scope.availableNew.name,\n                level: $scope.availableNew.mode.level,\n                block_devices: [],\n                partitions: [],\n                spare_devices: [],\n                spare_partitions: []\n            };\n            angular.forEach($scope.availableNew.devices, function(device) {\n                if($scope.isActiveRAIDMember(device)) {\n                    if(device.type === \"partition\") {\n                        params.partitions.push(device.partition_id);\n                    } else {\n                        params.block_devices.push(device.block_id);\n                    }\n                } else {\n                    if(device.type === \"partition\") {\n                        params.spare_partitions.push(device.partition_id);\n                    } else {\n                        params.spare_devices.push(device.block_id);\n                    }\n                }\n            });\n            if(angular.isString($scope.availableNew.fstype) &&\n                $scope.availableNew.fstype !== \"\") {\n                params.fstype = $scope.availableNew.fstype;\n                if($scope.availableNew.mountPoint !== \"\") {\n                    params.mount_point = $scope.availableNew.mountPoint;\n                    params.mount_options = $scope.availableNew.mountOptions;\n                }\n            }\n            if(angular.isArray($scope.availableNew.tags)\n                && $scope.availableNew.tags.length > 0) {\n                params.tags = $scope.availableNew.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createRAID($scope.node, params);\n\n            // Remove devices from available.\n            angular.forEach($scope.availableNew.devices, function(device) {\n                var idx = $scope.available.indexOf($scope.availableNew.device);\n                $scope.available.splice(idx, 1);\n            });\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a volume group can be created.\n        $scope.canCreateVolumeGroup = function() {\n            if($scope.isAvailableDisabled() || !$scope.isSuperUser()) {\n                return false;\n            }\n\n            var selected = $scope.getSelectedAvailable();\n            if(selected.length > 0) {\n                var i;\n                for(i = 0; i < selected.length; i++) {\n                    if(selected[i].has_partitions) {\n                        return false;\n                    } else if($scope.hasUnmountedFilesystem(selected[i])) {\n                        return false;\n                    } else if(selected[i].type === \"lvm-vg\") {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n\n        // Called to create a volume group.\n        $scope.createVolumeGroup = function() {\n            if(!$scope.canCreateVolumeGroup()) {\n                return;\n            }\n            $scope.availableMode = SELECTION_MODE.VOLUME_GROUP;\n            $scope.availableNew = {\n                name: getNextName(\"vg\"),\n                devices: $scope.getSelectedAvailable()\n            };\n        };\n\n        // Return the size of the new volume group.\n        $scope.getNewVolumeGroupSize = function() {\n            var total = 0;\n            angular.forEach($scope.availableNew.devices, function(device) {\n                // Add available_size or size if available_size is not set.\n                total += (\n                    device.original.available_size || device.original.size);\n            });\n            return ConverterService.bytesToUnits(total).string;\n        };\n\n        // Return true if volume group can be saved.\n        $scope.createVolumeGroupCanSave = function() {\n            return !$scope.isNewDiskNameInvalid();\n        };\n\n        // Confirm and create the volume group device.\n        $scope.availableConfirmCreateVolumeGroup = function() {\n            if(!$scope.createVolumeGroupCanSave()) {\n                return;\n            }\n\n            // Create the RAID.\n            var params = {\n                name: $scope.availableNew.name,\n                block_devices: [],\n                partitions: []\n            };\n            angular.forEach($scope.availableNew.devices, function(device) {\n                if(device.type === \"partition\") {\n                    params.partitions.push(device.partition_id);\n                } else {\n                    params.block_devices.push(device.block_id);\n                }\n            });\n            MachinesManager.createVolumeGroup($scope.node, params);\n\n            // Remove devices from available.\n            angular.forEach($scope.availableNew.devices, function(device) {\n                var idx = $scope.available.indexOf($scope.availableNew.device);\n                $scope.available.splice(idx, 1);\n            });\n            $scope.availableNew = {};\n\n            // Update the selection.\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Return true if a logical volume can be added to disk.\n        $scope.canAddLogicalVolume = function(disk) {\n            if(disk.type !== \"lvm-vg\") {\n                return false;\n            } else if(disk.original.available_size < MIN_PARTITION_SIZE) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n\n        // Enter logical volume mode.\n        $scope.availableLogicalVolume = function(disk) {\n            $scope.availableMode = SELECTION_MODE.LOGICAL_VOLUME;\n            disk.$selected = true;\n            // Set starting size to the maximum available space.\n            var size_and_units = disk.available_size_human.split(\" \");\n            var namePrefix = disk.name + \"-lv\";\n            disk.$options = {\n                name: getNextName(namePrefix),\n                size: size_and_units[0],\n                sizeUnits: size_and_units[1],\n                fstype: null,\n                tags: []\n            };\n        };\n\n        // Return true if the name of the logical volume is invalid.\n        $scope.isLogicalVolumeNameInvalid = function(disk) {\n            if(!angular.isString(disk.$options.name)) {\n                return false;\n            }\n            var startsWith = disk.$options.name.indexOf(disk.name + \"-\");\n            return (\n                startsWith !== 0 ||\n                disk.$options.name.length <= disk.name.length + 1 ||\n                isNameAlreadyInUse(disk.$options.name));\n        };\n\n        // Don't allow the name of the logical volume to remove the volume\n        // group name.\n        $scope.newLogicalVolumeNameChanged = function(disk) {\n            if(!angular.isString(disk.$options.name)) {\n                return;\n            }\n            var startsWith = disk.$options.name.indexOf(disk.name + \"-\");\n            if(startsWith !== 0) {\n                disk.$options.name = disk.name + \"-\";\n            }\n        };\n\n        // Return true if the logical volume size is invalid.\n        $scope.isAddLogicalVolumeSizeInvalid = function(disk) {\n            // Uses the same logic as the partition size checked.\n            return $scope.isAddPartitionSizeInvalid(disk);\n        };\n\n        // Confirm the logical volume creation.\n        $scope.availableConfirmLogicalVolume = function(disk) {\n            // Do nothing if not valid.\n            if($scope.isLogicalVolumeNameInvalid(disk) ||\n                $scope.isAddLogicalVolumeSizeInvalid(disk) ||\n                $scope.isMountPointInvalid(disk.$options.mountPoint)) {\n                return;\n            }\n\n            // Get the bytes to create the partition.\n            var bytes = ConverterService.unitsToBytes(\n                disk.$options.size, disk.$options.sizeUnits);\n\n            // Accepting prefilled defaults means use whole disk (lp:1509535).\n            var size_and_units = disk.original.available_size_human.split(\" \");\n            if(disk.$options.size === size_and_units[0] &&\n               disk.$options.sizeUnits === size_and_units[1]) {\n                bytes = disk.original.available_size;\n            }\n\n            // Clamp to available space.\n            if(bytes > disk.original.available_size) {\n                bytes = disk.original.available_size;\n            }\n\n            // Remove the disk if it is going to use all the remaining space.\n            var removeDisk = false;\n            if(bytes === disk.original.available_size) {\n                removeDisk = true;\n            }\n\n            // Remove the volume group name from the name.\n            var name = disk.$options.name.slice(disk.name.length + 1);\n\n            // Create the logical volume.\n            var params = {};\n            if(angular.isString(disk.$options.fstype) &&\n                disk.$options.fstype !== \"\") {\n                params.fstype = disk.$options.fstype;\n                if(disk.$options.mountPoint !== \"\") {\n                    params.mount_point = disk.$options.mountPoint;\n                    params.mount_options = disk.$options.mountOptions;\n                }\n            }\n            if(angular.isArray(disk.$options.tags)\n                && disk.$options.tags.length > 0) {\n                params.tags = disk.$options.tags.map(\n                    function(tag) { return tag.text; });\n            }\n            MachinesManager.createLogicalVolume(\n                $scope.node, disk.block_id, name, bytes, params);\n\n            // Remove the disk if needed.\n            if(removeDisk) {\n                var idx = $scope.available.indexOf(disk);\n                $scope.available.splice(idx, 1);\n            }\n            $scope.updateAvailableSelection(true);\n        };\n\n        // Returns true if storage cannot be edited.\n        // (it can't be changed when the node is in any state other\n        //  than Ready or Allocated)\n        $scope.isAllStorageDisabled = function() {\n            var authUser = UsersManager.getAuthUser();\n            if(!angular.isObject(authUser) || !angular.isObject($scope.node) ||\n                (!authUser.is_superuser &&\n                 authUser.username !== $scope.node.owner)) {\n                return true;\n            }else if (angular.isObject($scope.node) &&\n                [\"Ready\", \"Allocated\"].indexOf(\n                    $scope.node.status) === -1) {\n                // If the node is not ready or allocated, disable storage panel.\n                return true;\n            } else {\n                // The node must be either ready or broken. Enable it.\n                return false;\n            }\n        };\n\n        // Returns true if there are storage layout errors\n        $scope.hasStorageLayoutIssues = function() {\n            if(angular.isObject($scope.node) &&\n                angular.isArray($scope.node.storage_layout_issues)) {\n                return $scope.node.storage_layout_issues.length > 0;\n            }\n            return false;\n        };\n\n        // Tell $parent that the storageController has been loaded.\n        $scope.$parent.controllerLoaded('storageController', $scope);\n    }]);\n","/*\n * Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Manage a node's filesystems, including adding special filesystems.\n */\n\n(function() {\n\n    function SpecialFilesystem() {\n        this.fstype = \"tmpfs\";\n        this.mountPoint = \"\";\n        this.mountOptions = \"\";\n    }\n\n    SpecialFilesystem.prototype.isValid = function() {\n        return this.mountPoint.startsWith(\"/\");\n    };\n\n    SpecialFilesystem.prototype.describe = function() {\n        var parts = [this.fstype];\n        // Add the mount point if specified and valid.\n        if (this.mountPoint.startsWith(\"/\")) {\n            parts.push(\"at \" + this.mountPoint);\n        }\n        // Filesystem-specific bits.\n        switch (this.fstype) {\n        case \"tmpfs\":\n            // Extract size=n parameter from mount options. Other\n            // options could be added in the future.\n            var size = this.mountOptions.match(/\\bsize=(\\d+)(%?)/);\n            if (size !== null) {\n                if (size[2] === \"%\") {\n                    parts.push(\"limited to \" + size[1] + \"% of memory\");\n                } else {\n                    parts.push(\"limited to \" + size[1] + \" bytes\");\n                }\n            }\n            break;\n        case \"ramfs\":\n            // This filesystem does not recognise any options. Consider\n            // warning about lack of a size limit.\n            break;\n        }\n        return parts.join(\" \");\n    };\n\n    function NodeFilesystemsController($scope) {\n\n        // Which drop-down is currently selected, e.g. \"special\".\n        $scope.dropdown = null;\n\n        // Select the \"special\" drop-down.\n        $scope.addSpecialFilesystem = function() {\n            $scope.dropdown = \"special\";\n        };\n\n        // Deselect the \"special\" drop-down.\n        $scope.addSpecialFilesystemFinished = function() {\n            if ($scope.dropdown === \"special\") {\n                $scope.dropdown = null;\n            }\n        };\n    }\n\n    function NodeAddSpecialFilesystemController($scope, MachinesManager) {\n\n        $scope.filesystem = new SpecialFilesystem();\n        $scope.description = null;  // Updated by watch.\n\n        $scope.$watch(\"filesystem\", function(filesystem) {\n            $scope.description = filesystem.describe();\n        }, true);\n\n        $scope.canMount = function() {\n            return $scope.filesystem.isValid();\n        };\n\n        $scope.mount = function() {\n            MachinesManager.mountSpecialFilesystem(\n                $scope.node, $scope.filesystem.fstype,\n                $scope.filesystem.mountPoint,\n                $scope.filesystem.mountOptions);\n            $scope.addSpecialFilesystemFinished();\n        };\n\n        $scope.cancel = function() {\n            $scope.filesystem = new SpecialFilesystem();\n            $scope.addSpecialFilesystemFinished();\n        };\n    }\n\n    angular.module(\"MAAS\").controller(\n        \"NodeFilesystemsController\", [\n            \"$scope\", NodeFilesystemsController\n        ]);\n\n    angular.module(\"MAAS\").controller(\n        \"NodeAddSpecialFilesystemController\", [\n            \"$scope\", \"MachinesManager\",\n            NodeAddSpecialFilesystemController\n        ]);\n\n}());\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Events Controller\n */\n\nangular.module('MAAS').controller('NodeEventsController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'ControllersManager', 'EventsManagerFactory',\n    'ManagerHelperService', 'ErrorService', function($scope, $rootScope,\n        $routeParams, $location, MachinesManager, ControllersManager,\n        EventsManagerFactory, ManagerHelperService, ErrorService) {\n\n        // Events manager that is loaded once the node is loaded.\n        var eventsManager = null;\n\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.node = null;\n        $scope.events = [];\n        $scope.eventsLoaded = false;\n        $scope.days = 1;\n\n        // Called once the node is loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            // Get the events manager and load it.\n            eventsManager = EventsManagerFactory.getManager(node.id);\n            $scope.events = eventsManager.getItems();\n            $scope.days = eventsManager.getMaximumDays();\n            eventsManager.loadItems().then(function() {\n                $scope.eventsLoaded = true;\n            });\n\n            // Update the title when the fqdn of the node changes.\n            $scope.$watch(\"node.fqdn\", function() {\n                $rootScope.title = $scope.node.fqdn + \" - events\";\n            });\n        }\n\n        // Return the nice text for the given event.\n        $scope.getEventText = function(event) {\n            var text = event.type.description;\n            if(angular.isString(event.description) &&\n                event.description.length > 0) {\n                text += \" - \" + event.description;\n            }\n            return text;\n        };\n\n        // Called to load more events.\n        $scope.loadMore = function() {\n            $scope.days += 1;\n            eventsManager.loadMaximumDays($scope.days);\n        };\n\n        if($location.path().indexOf('/controller') !== -1) {\n            $scope.nodesManager = ControllersManager;\n            $scope.type_name = 'controller';\n            $rootScope.page = 'controllers';\n        }else{\n            $scope.nodesManager = MachinesManager;\n            $scope.type_name = 'machine';\n            $rootScope.page = 'machines';\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n            // If redirected from the NodeDetailsController then the node\n            // will already be active. No need to set it active again.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n\n        // Destroy the events manager when the scope is destroyed. This is so\n        // the client will not recieve any more notifications about events\n        // for this node.\n        $scope.$on(\"$destroy\", function() {\n            if(angular.isObject(eventsManager)) {\n                eventsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Script Result Controller\n */\n\nangular.module('MAAS').controller('NodeResultController', [\n    '$scope', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'ControllersManager', 'NodeResultsManagerFactory',\n    'ManagerHelperService', 'ErrorService',\n    function($scope, $rootScope, $routeParams, $location, MachinesManager,\n             ControllersManager, NodeResultsManagerFactory,\n             ManagerHelperService, ErrorService) {\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.resultLoaded = false;\n        $scope.node = null;\n        $scope.output = 'combined';\n        $scope.result = null;\n\n        $scope.get_result_data = function(output) {\n            $scope.output = output;\n            $scope.data = \"Loading...\";\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            nodeResultsManager.get_result_data(\n                $scope.result.id, $scope.output).then(\n                    function(data) {\n                        if(data === '') {\n                            $scope.data = \"Empty file.\";\n                        }else{\n                            $scope.data = data;\n                        }\n                    });\n        };\n\n        // Called once the node is loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n\n            // Get the NodeResultsManager and load it.\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            var requestedResult = parseInt($routeParams.id, 10);\n            nodeResultsManager.getItem(requestedResult).then(function(result) {\n                $scope.result = result;\n                $scope.get_result_data($scope.output);\n                $scope.resultLoaded = true;\n                $rootScope.title = $scope.node.fqdn + \" - \" +\n                    $scope.result.name;\n            });\n        }\n\n        // Update the title when the fqdn of the node changes.\n        $scope.$watch(\"node.fqdn\", function() {\n            if(angular.isObject($scope.node) &&\n               angular.isObject($scope.result)) {\n                $rootScope.title = $scope.node.fqdn + \" - \" +\n                    $scope.result.name;\n            }\n        });\n\n        if($location.path().indexOf(\"/controller\") !== -1) {\n            $scope.nodesManager = ControllersManager;\n            $scope.type_name = 'controller';\n            $rootScope.page = 'controllers';\n        }else{\n            $scope.nodesManager = MachinesManager;\n            $scope.type_name = 'machine';\n            $rootScope.page = 'machines';\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n            // If redirected from the NodeDetailsController then the node\n            // will already be active. No need to set it active again.\n            var activeNode = $scope.nodesManager.getActiveItem();\n            if(angular.isObject(activeNode) &&\n                activeNode.system_id === $routeParams.system_id) {\n                nodeLoaded(activeNode);\n            } else {\n                $scope.nodesManager.setActiveItem(\n                    $routeParams.system_id).then(function(node) {\n                        nodeLoaded(node);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n\n        // Destroy the NodeResultsManager when the scope is destroyed. This is\n        // so the client will not recieve any more notifications about results\n        // from this node.\n        $scope.$on(\"$destroy\", function() {\n            var nodeResultsManager = NodeResultsManagerFactory.getManager(\n                $scope.node);\n            if(angular.isObject(nodeResultsManager)) {\n                nodeResultsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Node Results Controller\n */\n\nangular.module('MAAS').controller('NodeResultsController', [\n    '$scope', '$routeParams', '$location', 'MachinesManager',\n    'ControllersManager', 'NodeResultsManagerFactory', 'ManagerHelperService',\n    'ErrorService',\n    function($scope, $routeParams, $location, MachinesManager,\n             ControllersManager, NodeResultsManagerFactory,\n             ManagerHelperService, ErrorService) {\n\n        // NodeResultsManager that is loaded once the node is loaded.\n        $scope.nodeResultsManager = null;\n        // References to manager data used in scope.\n        $scope.commissioning_results = null;\n        $scope.testing_results = null;\n        $scope.installation_results = null;\n        $scope.results = null;\n\n        // List of logs available.\n        $scope.logs = {\n            option: null,\n            availableOptions: []\n        };\n        // Log content being displayed.\n        $scope.logOutput = 'Loading...';\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.resultsLoaded = false;\n        $scope.node = null;\n\n        function updateLogs() {\n            var i;\n            var option;\n            var had_installation = $scope.logs.availableOptions.length === 3;\n            $scope.logs.availableOptions.length = 0;\n            // XXX ltrager 2017-12-01 - Only show the current installation log\n            // if the machine is deploying, deployed, or failed deploying. The\n            // logs page needs to be redesigned to show previous installation\n            // results.\n            if($scope.installation_results &&\n                    $scope.installation_results.length > 0 && (\n                        $scope.node.status_code === 6 ||\n                        $scope.node.status_code === 9 ||\n                        $scope.node.status_code === 11)) {\n                $scope.logs.availableOptions.push({\n                    'title': 'Installation output',\n                    'id': $scope.installation_results[0].id\n                });\n            }\n            $scope.logs.availableOptions.push({\n                'title': 'Machine output (YAML)',\n                'id': 'summary_yaml'\n            });\n            $scope.logs.availableOptions.push({\n                'title': 'Machine output (XML)',\n                'id': 'summary_xml'\n            });\n            if(!had_installation &&\n               $scope.logs.availableOptions.length === 3) {\n                // A new installation log has appeared, show it.\n                $scope.logs.option = $scope.logs.availableOptions[0];\n            }else if(!$scope.selectedLog || (\n                had_installation && $scope.logs.length === 2)) {\n                // No longer in a deployed state.\n                $scope.logs.option = $scope.logs.availableOptions[0];\n            }\n        }\n\n        // Called once the node has loaded.\n        function nodeLoaded(node) {\n            $scope.node = node;\n            $scope.loaded = true;\n            // Get the NodeResultsManager and load it.\n            $scope.nodeResultsManager = NodeResultsManagerFactory.getManager(\n                node, $scope.section.area);\n            $scope.nodeResultsManager.loadItems().then(function() {\n                $scope.commissioning_results =\n                    $scope.nodeResultsManager.commissioning_results;\n                $scope.testing_results =\n                    $scope.nodeResultsManager.testing_results;\n                $scope.installation_results =\n                    $scope.nodeResultsManager.installation_results;\n                $scope.results = $scope.nodeResultsManager.results;\n                // Only load and monitor logs when on the logs page.\n                if($scope.section.area === \"logs\") {\n                    updateLogs();\n                    $scope.$watch(\"installation_results\", updateLogs, true);\n                    $scope.$watch(\n                        \"installation_results\", $scope.updateLogOutput, true);\n                }\n                $scope.resultsLoaded = true;\n            });\n        }\n\n        if($location.path().indexOf('/controller') !== -1 ){\n            $scope.nodesManager = ControllersManager;\n        } else {\n            $scope.nodesManager = MachinesManager;\n        }\n        // Load nodes manager.\n        ManagerHelperService.loadManager(\n            $scope, $scope.nodesManager).then(function() {\n                // If redirected from the NodeDetailsController then the node\n                // will already be active. No need to set it active again.\n                var activeNode = $scope.nodesManager.getActiveItem();\n                if(angular.isObject(activeNode) &&\n                   activeNode.system_id === $routeParams.system_id) {\n                    nodeLoaded(activeNode);\n                } else {\n                    $scope.nodesManager.setActiveItem(\n                        $routeParams.system_id).then(function(node) {\n                            nodeLoaded(node);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                }\n            });\n\n        $scope.updateLogOutput = function() {\n            $scope.logOutput = \"Loading...\";\n            if(!$scope.node) {\n                return;\n            }else if($scope.logs.option.id === 'summary_xml') {\n                $scope.nodesManager.getSummaryXML($scope.node).then(\n                    function(output) {\n                        $scope.logOutput = output;\n                    });\n            }else if($scope.logs.option.id === 'summary_yaml') {\n                $scope.nodesManager.getSummaryYAML($scope.node).then(\n                    function(output) {\n                        $scope.logOutput = output;\n                    });\n            } else {\n                var result = null;\n                var i;\n                // Find the installation result to be displayed.\n                for(i = 0; i < $scope.installation_results.length; i++) {\n                    if($scope.installation_results[i].id ===\n                       $scope.logs.option.id) {\n                        result = $scope.installation_results[i];\n                        break;\n                    }\n                }\n                switch(result.status) {\n                    case 0:\n                        $scope.logOutput = \"System is booting...\";\n                        break;\n                    case 1:\n                        $scope.logOutput = \"Installation has begun!\";\n                        break;\n                    case 2:\n                        $scope.nodeResultsManager.get_result_data(\n                            result.id, 'combined').then(function(output) {\n                                if(output === '') {\n                                    $scope.logOutput =\n                                        \"Installation has succeeded but \" +\n                                        \"no output was given.\";\n                                } else {\n                                    $scope.logOutput = output;\n                                }\n                            });\n                        break;\n                    case 3:\n                        $scope.nodeResultsManager.get_result_data(\n                            result.id, 'combined').then(function(output) {\n                                if(output === '') {\n                                    $scope.logOutput =\n                                        \"Installation has failed and no \" +\n                                        \"output was given.\";\n                                } else {\n                                    $scope.logOutput = output;\n                                }\n                            });\n                        break;\n                    case 4:\n                        $scope.logOutput =\n                            \"Installation failed after 40 minutes.\";\n                        break;\n                    case 5:\n                        $scope.logOutput = \"Installation was aborted.\";\n                        break;\n                    default:\n                        $scope.logOutput = \"BUG: Unknown log status \" +\n                            result.status;\n                        break;\n                }\n            }\n        };\n\n        $scope.loadHistory = function(result) {\n            result.showing_results = false;\n            // History has already been loaded, no need to request it.\n            if(angular.isArray(result.history_list)) {\n                result.showing_history = true;\n                return;\n            }\n            result.loading_history = true;\n            $scope.nodeResultsManager.get_history(result.id).then(\n                function(history) {\n                    result.history_list = history;\n                    result.loading_history = false;\n                    result.showing_history = true;\n                });\n        };\n\n        // Destroy the NodeResultsManager when the scope is destroyed. This is\n        // so the client will not recieve any more notifications about results\n        // from this node.\n        $scope.$on(\"$destroy\", function() {\n            if(angular.isObject($scope.nodeResultsManager)) {\n                $scope.nodeResultsManager.destroy();\n            }\n        });\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes List Controller\n */\n\nangular.module('MAAS').controller('NodesListController', [\n    '$scope', '$interval', '$rootScope', '$routeParams', '$location',\n    'MachinesManager', 'DevicesManager', 'ControllersManager',\n    'GeneralManager', 'ManagerHelperService', 'SearchService',\n    'ZonesManager', 'UsersManager', 'ServicesManager', 'ScriptsManager',\n    'SwitchesManager',\n    function($scope, $interval, $rootScope, $routeParams, $location,\n        MachinesManager, DevicesManager, ControllersManager, GeneralManager,\n        ManagerHelperService, SearchService, ZonesManager, UsersManager,\n        ServicesManager, ScriptsManager, SwitchesManager) {\n\n        // Mapping of device.ip_assignment to viewable text.\n        var DEVICE_IP_ASSIGNMENT = {\n            external: \"External\",\n            dynamic: \"Dynamic\",\n            \"static\": \"Static\"\n        };\n\n        // Set title and page.\n        $rootScope.title = \"Machines\";\n        $rootScope.page = \"machines\";\n\n        // Set initial values.\n        $scope.MAAS_config = MAAS_config;\n        $scope.machines = MachinesManager.getItems();\n        $scope.zones = ZonesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.switches = SwitchesManager.getItems();\n        $scope.showswitches = $routeParams.switches === 'on';\n        $scope.currentpage = \"machines\";\n        $scope.osinfo = {};\n        $scope.scripts = ScriptsManager.getItems();\n        $scope.loading = true;\n\n        $scope.tabs = {};\n        // Machines tab.\n        $scope.tabs.machines = {};\n        $scope.tabs.machines.pagetitle = \"Machines\";\n        $scope.tabs.machines.currentpage = \"machines\";\n        $scope.tabs.machines.manager = MachinesManager;\n        $scope.tabs.machines.previous_search = \"\";\n        $scope.tabs.machines.search = \"\";\n        $scope.tabs.machines.searchValid = true;\n        $scope.tabs.machines.selectedItems = MachinesManager.getSelectedItems();\n        $scope.tabs.machines.metadata = MachinesManager.getMetadata();\n        $scope.tabs.machines.filters = SearchService.getEmptyFilter();\n        $scope.tabs.machines.actionOption = null;\n        $scope.tabs.machines.takeActionOptions = [];\n        $scope.tabs.machines.actionErrorCount = 0;\n        $scope.tabs.machines.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.machines.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.tabs.machines.zoneSelection = null;\n        $scope.tabs.machines.poolSelection = null;\n        $scope.tabs.machines.poolAction = 'select-pool';\n        $scope.tabs.machines.newPool = {};\n        $scope.tabs.machines.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.tabs.machines.releaseOptions = {};\n        $scope.tabs.machines.commissioningSelection = [];\n        $scope.tabs.machines.testSelection = [];\n\n        // Device tab.\n        $scope.tabs.devices = {};\n        $scope.tabs.devices.pagetitle = \"Devices\";\n        $scope.tabs.devices.currentpage = \"devices\";\n        $scope.tabs.devices.manager = DevicesManager;\n        $scope.tabs.devices.previous_search = \"\";\n        $scope.tabs.devices.search = \"\";\n        $scope.tabs.devices.searchValid = true;\n        $scope.tabs.devices.selectedItems = DevicesManager.getSelectedItems();\n        $scope.tabs.devices.filtered_items = [];\n        $scope.tabs.devices.predicate = 'fqdn';\n        $scope.tabs.devices.allViewableChecked = false;\n        $scope.tabs.devices.metadata = DevicesManager.getMetadata();\n        $scope.tabs.devices.filters = SearchService.getEmptyFilter();\n        $scope.tabs.devices.column = 'fqdn';\n        $scope.tabs.devices.actionOption = null;\n        $scope.tabs.devices.takeActionOptions = [];\n        $scope.tabs.devices.actionErrorCount = 0;\n        $scope.tabs.devices.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.devices.zoneSelection = null;\n        $scope.tabs.devices.poolSelection = null;\n        $scope.tabs.devices.poolAction = 'select-pool';\n        $scope.tabs.devices.newPool = {};\n\n        // Controller tab.\n        $scope.tabs.controllers = {};\n        $scope.tabs.controllers.pagetitle = \"Controllers\";\n        $scope.tabs.controllers.currentpage = \"controllers\";\n        $scope.tabs.controllers.manager = ControllersManager;\n        $scope.tabs.controllers.previous_search = \"\";\n        $scope.tabs.controllers.search = \"\";\n        $scope.tabs.controllers.searchValid = true;\n        $scope.tabs.controllers.selectedItems =\n            ControllersManager.getSelectedItems();\n        $scope.tabs.controllers.filtered_items = [];\n        $scope.tabs.controllers.predicate = 'fqdn';\n        $scope.tabs.controllers.allViewableChecked = false;\n        $scope.tabs.controllers.metadata = ControllersManager.getMetadata();\n        $scope.tabs.controllers.filters = SearchService.getEmptyFilter();\n        $scope.tabs.controllers.column = 'fqdn';\n        $scope.tabs.controllers.actionOption = null;\n        // Rack controllers contain all options\n        $scope.tabs.controllers.takeActionOptions = [];\n        $scope.tabs.controllers.actionErrorCount = 0;\n        $scope.tabs.controllers.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.controllers.zoneSelection = null;\n        $scope.tabs.controllers.syncStatuses = {};\n        $scope.tabs.controllers.addController = false;\n        $scope.tabs.controllers.registerUrl = MAAS_config.register_url;\n        $scope.tabs.controllers.registerSecret = MAAS_config.register_secret;\n        $scope.tabs.controllers.poolSelection = null;\n        $scope.tabs.controllers.poolAction = 'select-pool';\n        $scope.tabs.controllers.newPool = {};\n\n        // Switch tab.\n        $scope.tabs.switches = {};\n        $scope.tabs.switches.pagetitle = \"Switches\";\n        $scope.tabs.switches.currentpage = \"switches\";\n        $scope.tabs.switches.manager = SwitchesManager;\n        $scope.tabs.switches.previous_search = \"\";\n        $scope.tabs.switches.search = \"\";\n        $scope.tabs.switches.searchValid = true;\n        $scope.tabs.switches.selectedItems = SwitchesManager.getSelectedItems();\n        $scope.tabs.switches.predicate = 'fqdn';\n        $scope.tabs.switches.allViewableChecked = false;\n        $scope.tabs.switches.metadata = SwitchesManager.getMetadata();\n        $scope.tabs.switches.filters = SearchService.getEmptyFilter();\n        $scope.tabs.switches.column = 'fqdn';\n        $scope.tabs.switches.actionOption = null;\n        $scope.tabs.switches.takeActionOptions = [];\n        $scope.tabs.switches.actionErrorCount = 0;\n        $scope.tabs.switches.actionProgress = {\n            total: 0,\n            completed: 0,\n            errors: {},\n            showing_confirmation: false,\n            affected_nodes: 0\n        };\n        $scope.tabs.switches.osSelection = {\n            osystem: null,\n            release: null,\n            hwe_kernel: null\n        };\n        $scope.tabs.switches.zoneSelection = null;\n        $scope.tabs.switches.poolSelection = null;\n        $scope.tabs.switches.poolAction = 'select-pool';\n        $scope.tabs.switches.newPool = {};\n        $scope.tabs.switches.commissioningSelection = [];\n        $scope.tabs.switches.commissionOptions = {\n            enableSSH: false,\n            skipNetworking: false,\n            skipStorage: false,\n            updateFirmware: false,\n            configureHBA: false\n        };\n        $scope.tabs.switches.releaseOptions = {};\n\n\n        // Options for add hardware dropdown.\n        $scope.addHardwareOption = null;\n        $scope.addHardwareOptions = [\n            {\n                name: \"machine\",\n                title: \"Machine\"\n            },\n            {\n                name: \"chassis\",\n                title: \"Chassis\"\n            }\n        ];\n\n        // This will hold the AddHardwareController once it is initialized.\n        // The controller will set this variable as it's always a child of\n        // this scope.\n        $scope.addHardwareScope = null;\n\n        // This will hold the AddDeviceController once it is initialized.\n        // The controller will set this variable as it's always a child of\n        // this scope.\n        $scope.addDeviceScope = null;\n\n        // When the addHardwareScope is hidden it will emit this event. We\n        // clear the call to action button, so it can be used again.\n        $scope.$on(\"addHardwareHidden\", function() {\n            $scope.addHardwareOption = null;\n        });\n\n        // Return true if the tab is in viewing selected mode.\n        function isViewingSelected(tab) {\n            var search = $scope.tabs[tab].search.toLowerCase();\n            return search === \"in:(selected)\" || search === \"in:selected\";\n        }\n\n        // Sets the search bar to only show selected.\n        function enterViewSelected(tab) {\n            $scope.tabs[tab].previous_search = $scope.tabs[tab].search;\n            $scope.tabs[tab].search = \"in:(Selected)\";\n        }\n\n        // Clear search bar from viewing selected.\n        function leaveViewSelected(tab) {\n            if(isViewingSelected(tab)) {\n                $scope.tabs[tab].search = $scope.tabs[tab].previous_search;\n                $scope.updateFilters(tab);\n            }\n        }\n\n        // Called to update `allViewableChecked`.\n        function updateAllViewableChecked(tab) {\n            // Not checked when the filtered nodes are empty.\n            if($scope.tabs[tab].filtered_items.length === 0) {\n                $scope.tabs[tab].allViewableChecked = false;\n                return;\n            }\n\n            // Loop through all filtered nodes and see if all are checked.\n            var i;\n            for(i = 0; i < $scope.tabs[tab].filtered_items.length; i++) {\n                if(!$scope.tabs[tab].filtered_items[i].$selected) {\n                    $scope.tabs[tab].allViewableChecked = false;\n                    return;\n                }\n            }\n            $scope.tabs[tab].allViewableChecked = true;\n        }\n\n        function clearAction(tab) {\n            resetActionProgress(tab);\n            leaveViewSelected(tab);\n            $scope.tabs[tab].actionOption = null;\n            $scope.tabs[tab].zoneSelection = null;\n            $scope.tabs[tab].poolSelection = null;\n            $scope.tabs[tab].poolAction = 'select-pool';\n            $scope.tabs[tab].newPool = {};\n            if(tab === \"machines\" || tab === \"switches\") {\n                // Possible for this to be called before the osSelect\n                // direction is initialized. In that case it has not\n                // created the $reset function on the model object.\n                if(angular.isFunction(\n                    $scope.tabs[tab].osSelection.$reset)) {\n                    $scope.tabs[tab].osSelection.$reset();\n                }\n                $scope.tabs[tab].commissionOptions.enableSSH = false;\n                $scope.tabs[tab].commissionOptions.skipNetworking = false;\n                $scope.tabs[tab].commissionOptions.skipStorage = false;\n                $scope.tabs[tab].commissionOptions.updateFirmware = false;\n                $scope.tabs[tab].commissionOptions.configureHBA = false;\n            }\n            $scope.tabs[tab].commissioningSelection = [];\n            $scope.tabs[tab].testSelection = [];\n        }\n\n        // Clear the action if required.\n        function shouldClearAction(tab) {\n            if($scope.tabs[tab].selectedItems.length === 0) {\n                clearAction(tab);\n            }\n            if($scope.tabs[tab].actionOption && !isViewingSelected(tab)) {\n                $scope.tabs[tab].actionOption = null;\n            }\n        }\n\n        // Called when the filtered_items are updated. Checks if the\n        // filtered_items are empty and if the search still matches the\n        // previous search. This will reset the search when no nodes match\n        // the current filter.\n        function removeEmptyFilter(tab) {\n            if($scope.tabs[tab].filtered_items.length === 0 &&\n                $scope.tabs[tab].search !== \"\" &&\n                $scope.tabs[tab].search === $scope.tabs[tab].previous_search) {\n                $scope.tabs[tab].search = \"\";\n                $scope.updateFilters(tab);\n            }\n        }\n\n        // Update the number of selected items which have an error based on the\n        // current selected action.\n        function updateActionErrorCount(tab) {\n            var i;\n            $scope.tabs[tab].actionErrorCount = 0;\n            for(i = 0; i < $scope.tabs[tab].selectedItems.length; i++) {\n                var supported = $scope.supportsAction(\n                    $scope.tabs[tab].selectedItems[i], tab);\n                if(!supported) {\n                    $scope.tabs[tab].actionErrorCount += 1;\n                }\n                $scope.tabs[tab].selectedItems[i].action_failed = false;\n            }\n        }\n\n        // Reset actionProgress on tab to zero.\n        function resetActionProgress(tab) {\n            var progress = $scope.tabs[tab].actionProgress;\n            progress.completed = progress.total = 0;\n            progress.errors = {};\n            progress.showing_confirmation = false;\n            progress.affected_nodes = 0;\n        }\n\n        // Add error to action progress and group error messages by nodes.\n        function addErrorToActionProgress(tab, error, node) {\n            var progress = $scope.tabs[tab].actionProgress;\n            progress.completed += 1;\n            var nodes = progress.errors[error];\n            if(angular.isUndefined(nodes)) {\n                progress.errors[error] = [node];\n            } else {\n                nodes.push(node);\n            }\n        }\n\n        // After an action has been performed check if we can leave all nodes\n        // selected or if an error occured and we should only show the failed\n        // nodes.\n        function updateSelectedItems(tab) {\n            if(!$scope.hasActionsFailed(tab)) {\n                if(!$scope.hasActionsInProgress(tab)) {\n                     clearAction(tab);\n                     enterViewSelected(tab);\n                }\n                return;\n            }\n            angular.forEach($scope.tabs[tab].manager.getItems(),\n                    function(node) {\n                if(node.action_failed === false) {\n                    $scope.tabs[tab].manager.unselectItem(node.system_id);\n                }\n            });\n        }\n\n        // Toggles between the current tab.\n        $scope.toggleTab = function(tab) {\n            $rootScope.title = $scope.tabs[tab].pagetitle;\n            $rootScope.page = tab;\n            $scope.currentpage = tab;\n\n            switch(tab) {\n            case 'machines':\n                $scope.osinfo = GeneralManager.getData('osinfo');\n                $scope.tabs.machines.takeActionOptions = GeneralManager.getData(\n                    'machine_actions');\n                break;\n            case 'devices':\n                $scope.tabs.devices.takeActionOptions = GeneralManager.getData(\n                    'device_actions');\n                break;\n            case 'controllers':\n                $scope.tabs.controllers.takeActionOptions =\n                    GeneralManager.getData('rack_controller_actions');\n                break;\n            case 'switches':\n                // XXX: Which actions should there be?\n                $scope.tabs.switches.takeActionOptions = GeneralManager.getData(\n                    \"machine_actions\");\n                break;\n            }\n        };\n\n        // Clear the search bar.\n        $scope.clearSearch = function(tab) {\n            $scope.tabs[tab].search = \"\";\n            $scope.updateFilters(tab);\n        };\n\n        // Mark a node as selected or unselected.\n        $scope.toggleChecked = function(node, tab) {\n            if(tab !== 'machines' && tab !== 'switches') {\n                if($scope.tabs[tab].manager.isSelected(node.system_id)) {\n                    $scope.tabs[tab].manager.unselectItem(node.system_id);\n                } else {\n                    $scope.tabs[tab].manager.selectItem(node.system_id);\n                }\n                updateAllViewableChecked(tab);\n            }\n            updateActionErrorCount(tab);\n            shouldClearAction(tab);\n        };\n\n        // Select all viewable nodes or deselect all viewable nodes.\n        $scope.toggleCheckAll = function(tab) {\n            if(tab !== 'machines' && tab !== 'switches') {\n                if($scope.tabs[tab].allViewableChecked) {\n                    angular.forEach(\n                        $scope.tabs[tab].filtered_items, function(node) {\n                            $scope.tabs[tab].manager.unselectItem(\n                                node.system_id);\n                    });\n                } else {\n                    angular.forEach(\n                        $scope.tabs[tab].filtered_items, function(node) {\n                            $scope.tabs[tab].manager.selectItem(\n                                node.system_id);\n                    });\n                }\n                updateAllViewableChecked(tab);\n            }\n            updateActionErrorCount(tab);\n            shouldClearAction(tab);\n        };\n\n        $scope.onNodeListingChanged = function(nodes, tab) {\n            if(nodes.length === 0 &&\n                $scope.tabs[tab].search !== \"\" &&\n                $scope.tabs[tab].search === $scope.tabs[tab].previous_search) {\n                $scope.tabs[tab].search = \"\";\n                $scope.updateFilters(tab);\n            }\n        };\n\n        // When the filtered nodes change update if all check buttons\n        // should be checked or not.\n        $scope.$watchCollection(\"tabs.devices.filtered_items\", function() {\n            updateAllViewableChecked(\"devices\");\n            removeEmptyFilter(\"devices\");\n        });\n        $scope.$watchCollection(\"tabs.controllers.filtered_items\", function() {\n            updateAllViewableChecked(\"controllers\");\n            removeEmptyFilter(\"controllers\");\n        });\n\n        // Shows the current selection.\n        $scope.showSelected = function(tab) {\n            enterViewSelected(tab);\n            $scope.updateFilters(tab);\n        };\n\n        // Adds or removes a filter to the search.\n        $scope.toggleFilter = function(type, value, tab) {\n            // Don't allow a filter to be changed when an action is\n            // in progress.\n            if(angular.isObject($scope.tabs[tab].actionOption)) {\n                return;\n            }\n            $scope.tabs[tab].filters = SearchService.toggleFilter(\n                $scope.tabs[tab].filters, type, value, true);\n            $scope.tabs[tab].search = SearchService.filtersToString(\n                $scope.tabs[tab].filters);\n        };\n\n        // Return True if the filter is active.\n        $scope.isFilterActive = function(type, value, tab) {\n            return SearchService.isFilterActive(\n                $scope.tabs[tab].filters, type, value, true);\n        };\n\n        // Update the filters object when the search bar is updated.\n        $scope.updateFilters = function(tab) {\n            var filters = SearchService.getCurrentFilters(\n                $scope.tabs[tab].search);\n            if(filters === null) {\n                $scope.tabs[tab].filters = SearchService.getEmptyFilter();\n                $scope.tabs[tab].searchValid = false;\n            } else {\n                $scope.tabs[tab].filters = filters;\n                $scope.tabs[tab].searchValid = true;\n            }\n            shouldClearAction(tab);\n        };\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate, tab) {\n            $scope.tabs[tab].predicate = predicate;\n            $scope.tabs[tab].reverse = !$scope.tabs[tab].reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        $scope.selectColumnOrSort = function(predicate, tab) {\n            if($scope.tabs[tab].column !== predicate) {\n                $scope.tabs[tab].column = predicate;\n            } else {\n                $scope.sortTable(predicate, tab);\n            }\n        };\n\n        // Return True if the node supports the action.\n        $scope.supportsAction = function(node, tab) {\n            if(!$scope.tabs[tab].actionOption) {\n                return true;\n            }\n            return node.actions.indexOf(\n                $scope.tabs[tab].actionOption.name) >= 0;\n        };\n\n        // Called when the action option gets changed.\n        $scope.actionOptionSelected = function(tab) {\n            updateActionErrorCount(tab);\n            enterViewSelected(tab);\n\n            // Hide the add hardware/device section.\n            if (tab === 'machines') {\n                if(angular.isObject($scope.addHardwareScope)) {\n                    $scope.addHardwareScope.hide();\n                }\n            } else if(tab === 'devices') {\n                if(angular.isObject($scope.addDeviceScope)) {\n                    $scope.addDeviceScope.hide();\n                }\n            }\n        };\n\n        // Return True if there is an action error.\n        $scope.isActionError = function(tab) {\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                $scope.tabs[tab].actionErrorCount === 0 &&\n                ($scope.osinfo.osystems.length === 0 ||\n                UsersManager.getSSHKeyCount() === 0)) {\n                return true;\n            }\n            return $scope.tabs[tab].actionErrorCount !== 0;\n        };\n\n        // Return True if unable to deploy because of missing images.\n        $scope.isDeployError = function(tab) {\n            if($scope.tabs[tab].actionErrorCount !== 0) {\n                return false;\n            }\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                $scope.osinfo.osystems.length === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Return True if unable to deploy because of missing ssh keys.\n        $scope.isSSHKeyError = function(tab) {\n            if($scope.tabs[tab].actionErrorCount !== 0) {\n                return false;\n            }\n            if(angular.isObject($scope.tabs[tab].actionOption) &&\n                $scope.tabs[tab].actionOption.name === \"deploy\" &&\n                UsersManager.getSSHKeyCount() === 0) {\n                return true;\n            }\n            return false;\n        };\n\n        // Called when the current action is cancelled.\n        $scope.actionCancel = function(tab) {\n            resetActionProgress(tab);\n            leaveViewSelected(tab);\n            $scope.tabs[tab].actionOption = null;\n        };\n\n        // Perform the action on all nodes.\n        $scope.actionGo = function(tabName) {\n            var tab = $scope.tabs[tabName];\n            var extra = {};\n            var i;\n            // Set deploy parameters if a deploy or set zone action.\n            if(tab.actionOption.name === \"deploy\" &&\n               angular.isString(tab.osSelection.osystem) &&\n               angular.isString(tab.osSelection.release)) {\n\n                // Set extra. UI side the release is structured os/release, but\n                // when it is sent over the websocket only the \"release\" is\n                // sent.\n                extra.osystem = tab.osSelection.osystem;\n                var release = tab.osSelection.release;\n                release = release.split(\"/\");\n                release = release[release.length-1];\n                extra.distro_series = release;\n                // hwe_kernel is optional so only include it if its specified\n                if(angular.isString(tab.osSelection.hwe_kernel) &&\n                   (tab.osSelection.hwe_kernel.indexOf('hwe-') >= 0 ||\n                    tab.osSelection.hwe_kernel.indexOf('ga-') >= 0)) {\n                    extra.hwe_kernel = tab.osSelection.hwe_kernel;\n                }\n            } else if(tab.actionOption.name === \"set-zone\" &&\n                angular.isNumber(tab.zoneSelection.id)) {\n                // Set the zone parameter.\n                extra.zone_id = tab.zoneSelection.id;\n            } else if(tab.actionOption.name === \"set-pool\") {\n                if ((tab.poolAction === 'create-pool') &&\n                    (tab.newPool.name !== undefined)) {\n                    extra.new_pool = tab.newPool;\n                } else if (angular.isNumber(tab.poolSelection.id)) {\n                    // Set the pool parameter.\n                    extra.pool_id = tab.poolSelection.id;\n                }\n            } else if(tab.actionOption.name === \"commission\") {\n                // Set the commission options.\n                extra.enable_ssh = tab.commissionOptions.enableSSH;\n                extra.skip_networking = tab.commissionOptions.skipNetworking;\n                extra.skip_storage = tab.commissionOptions.skipStorage;\n                extra.commissioning_scripts = [];\n                for(i=0;i<tab.commissioningSelection.length;i++) {\n                    extra.commissioning_scripts.push(\n                        tab.commissioningSelection[i].id);\n                }\n                if(tab.commissionOptions.updateFirmware) {\n                    extra.commissioning_scripts.push('update_firmware')\n                }\n                if(tab.commissionOptions.configureHBA) {\n                    extra.commissioning_scripts.push('configure_hba')\n                }\n                if(extra.commissioning_scripts.length === 0) {\n                    // Tell the region not to run any custom commissioning\n                    // scripts.\n                    extra.commissioning_scripts.push('none');\n                }\n                extra.testing_scripts = [];\n                for(i=0;i<tab.testSelection.length;i++) {\n                    extra.testing_scripts.push(\n                        tab.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if(tab.actionOption.name === \"test\") {\n                if(!tab.actionProgress.showing_confirmation) {\n                    var progress = tab.actionProgress;\n                    for(i=0;i<tab.selectedItems.length;i++) {\n                        if(tab.selectedItems[i].status_code === 6)\n                        {\n                            progress.showing_confirmation = true;\n                            progress.affected_nodes++;\n                        }\n                    }\n                    if(tab.actionProgress.affected_nodes != 0) {\n                        return;\n                    }\n                }\n                // Set the test options.\n                extra.enable_ssh = tab.commissionOptions.enableSSH;\n                extra.testing_scripts = [];\n                for(i=0;i<tab.testSelection.length;i++) {\n                    extra.testing_scripts.push(\n                        tab.testSelection[i].id);\n                }\n                if(extra.testing_scripts.length === 0) {\n                    // Tell the region not to run any tests.\n                    extra.testing_scripts.push('none');\n                }\n            } else if(tab.actionOption.name === \"release\") {\n                // Set the release options.\n                extra.erase = tab.releaseOptions.erase;\n                extra.secure_erase = tab.releaseOptions.secureErase;\n                extra.quick_erase = tab.releaseOptions.quickErase;\n            }\n\n            // Setup actionProgress.\n            resetActionProgress(tabName);\n            tab.actionProgress.total = tab.selectedItems.length;\n\n            // Perform the action on all selected items.\n            angular.forEach(tab.selectedItems, function(node) {\n                tab.manager.performAction(\n                    node, tab.actionOption.name,\n                    extra).then(function() {\n                        tab.actionProgress.completed += 1;\n                        node.action_failed = false;\n                        updateSelectedItems(tabName);\n                    }, function(error) {\n                        addErrorToActionProgress(tabName, error, node);\n                        node.action_failed = true;\n                        updateSelectedItems(tabName);\n                    });\n            });\n        };\n\n        // Returns true when actions are being performed.\n        $scope.hasActionsInProgress = function(tab) {\n            var progress = $scope.tabs[tab].actionProgress;\n            return progress.total > 0 && progress.completed !== progress.total;\n        };\n\n        // Returns true if any of the actions have failed.\n        $scope.hasActionsFailed = function(tab) {\n            return Object.keys(\n                $scope.tabs[tab].actionProgress.errors).length > 0;\n        };\n\n        // Called to when the addHardwareOption has changed.\n        $scope.addHardwareOptionChanged = function() {\n            if($scope.addHardwareOption) {\n                $scope.addHardwareScope.show(\n                    $scope.addHardwareOption.name);\n            }\n        };\n\n        // Called when the add device button is pressed.\n        $scope.addDevice = function() {\n            $scope.addDeviceScope.show();\n        };\n\n        // Called when the cancel add device button is pressed.\n        $scope.cancelAddDevice = function() {\n            $scope.addDeviceScope.cancel();\n        };\n\n        // Get the display text for device ip assignment type.\n        $scope.getDeviceIPAssignment = function(ipAssignment) {\n            return DEVICE_IP_ASSIGNMENT[ipAssignment];\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        $scope.hasCustomCommissioningScripts = function() {\n            var i;\n            for(i=0;i<$scope.scripts.length;i++) {\n                if($scope.scripts[i].script_type === 0) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Reload osinfo when the page reloads\n        $scope.$on(\"$routeUpdate\", function () {\n            GeneralManager.loadItems([\"osinfo\"]);\n        });\n\n        // Switch to the specified tab, if specified.\n        angular.forEach(\n            [\"machines\", \"pools\", \"devices\", \"controllers\", \"switches\"],\n            function(node_type) {\n                if($location.path().indexOf(\"/\" + node_type) !== -1) {\n                    $scope.toggleTab(node_type);\n                }\n            });\n\n        // The ScriptsManager is only needed for selecting testing or\n        // commissioning scripts.\n        var page_managers = [$scope.tabs[$scope.currentpage].manager];\n        if($scope.currentpage === \"machines\" ||\n                $scope.currentpage === \"controllers\") {\n            page_managers.push(ScriptsManager);\n        }\n\n        // Load the required managers for this controller. The ServicesManager\n        // is required by the maasControllerStatus directive that is used\n        // in the partial for this controller.\n        ManagerHelperService.loadManagers($scope, [\n            GeneralManager, ZonesManager, UsersManager,\n            ServicesManager].concat(page_managers)).then(function() {\n                $scope.loading = false;\n            });\n\n\n        // Stop polling and save the current filter when the scope is destroyed.\n        $scope.$on(\"$destroy\", function() {\n            $interval.cancel($scope.statusPoll);\n            SearchService.storeFilters(\n                \"machines\", $scope.tabs.machines.filters);\n            SearchService.storeFilters(\"devices\", $scope.tabs.devices.filters);\n            SearchService.storeFilters(\n                \"controllers\", $scope.tabs.controllers.filters);\n            SearchService.storeFilters(\n                \"switches\", $scope.tabs.switches.filters);\n        });\n\n        // Restore the filters if any saved.\n        var machinesFilter = SearchService.retrieveFilters(\"machines\");\n        if(angular.isObject(machinesFilter)) {\n            $scope.tabs.machines.search = SearchService.filtersToString(\n                machinesFilter);\n            $scope.updateFilters(\"machines\");\n        }\n        var devicesFilter = SearchService.retrieveFilters(\"devices\");\n        if(angular.isObject(devicesFilter)) {\n            $scope.tabs.devices.search = SearchService.filtersToString(\n                devicesFilter);\n            $scope.updateFilters(\"devices\");\n        }\n        var controllersFilter = SearchService.retrieveFilters(\"controllers\");\n        if(angular.isObject(controllersFilter)) {\n            $scope.tabs.controllers.search = SearchService.filtersToString(\n                controllersFilter);\n            $scope.updateFilters(\"controllers\");\n        }\n        var switchesFilter = SearchService.retrieveFilters(\"switches\");\n        if(angular.isObject(switchesFilter)) {\n            $scope.tabs.switches.search = SearchService.filtersToString(\n                switchesFilter);\n            $scope.updateFilters(\"switches\");\n        }\n\n        // Set the query if the present in $routeParams.\n        var query = $routeParams.query;\n        if(angular.isString(query)) {\n            $scope.tabs[$scope.currentpage].search = query;\n            $scope.updateFilters($scope.currentpage);\n        }\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pod Details Controller\n */\n\nangular.module('MAAS').controller('PodDetailsController', [\n    '$scope', '$rootScope', '$location', '$routeParams',\n    'PodsManager', 'GeneralManager', 'UsersManager', 'DomainsManager',\n    'ZonesManager', 'MachinesManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $location, $routeParams,\n        PodsManager, GeneralManager, UsersManager, DomainsManager,\n        ZonesManager, MachinesManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"pods\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.pod = null;\n        $scope.podManager = PodsManager;\n        $scope.action = {\n          option: null,\n          options: [\n            {\n              name: 'refresh',\n              title: 'Refresh',\n              sentence: 'refresh',\n              operation: angular.bind(PodsManager, PodsManager.refresh)\n            },\n            {\n              name: 'delete',\n              title: 'Delete',\n              sentence: 'delete',\n              operation: angular.bind(PodsManager, PodsManager.deleteItem)\n            }\n          ],\n          inProgress: false,\n          error: null\n        };\n        $scope.compose = {\n          action: {\n            name: 'compose',\n            title: 'Compose',\n            sentence: 'compose'\n          },\n          obj: {\n            storage: [{\n              type: 'local',\n              size: 8,\n              tags: [],\n              boot: true\n            }]\n          }\n        };\n        $scope.power_types = GeneralManager.getData(\"power_types\");\n        $scope.domains = DomainsManager.getItems();\n        $scope.zones = ZonesManager.getItems();\n        $scope.section = {\n          area: 'summary'\n        };\n        $scope.machinesSearch = 'pod-id:=invalid';\n        $scope.editing = false;\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if at least a rack controller is connected to the\n        // region controller.\n        $scope.isRackControllerConnected = function() {\n            // If power_types exist then a rack controller is connected.\n            return $scope.power_types.length > 0;\n        };\n\n        // Return true when the edit buttons can be clicked.\n        $scope.canEdit = function() {\n            return (\n                $scope.isRackControllerConnected() &&\n                    $scope.isSuperUser());\n        };\n\n        // Called to edit the pod configuration.\n        $scope.editPodConfiguration = function() {\n            if(!$scope.canEdit()) {\n                return;\n            }\n            $scope.editing = true;\n        };\n\n        // Called when the cancel or save button is pressed.\n        $scope.exitEditPodConfiguration = function() {\n            $scope.editing = false;\n        };\n\n        // Return true if there is an action error.\n        $scope.isActionError = function() {\n            return $scope.action.error !== null;\n        };\n\n        // Called when the action.option has changed.\n        $scope.actionOptionChanged = function() {\n            // Clear the action error.\n            $scope.action.error = null;\n        };\n\n        // Cancel the action.\n        $scope.actionCancel = function() {\n            $scope.action.option = null;\n            $scope.action.error = null;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            $scope.action.inProgress = true;\n            $scope.action.option.operation($scope.pod).then(function() {\n                  // If the action was delete, then go back to listing.\n                  if($scope.action.option.name === \"delete\") {\n                      $location.path(\"/pods\");\n                  }\n                  $scope.action.inProgress = false;\n                  $scope.action.option = null;\n                  $scope.action.error = null;\n              }, function(error) {\n                  $scope.action.inProgress = false;\n                  $scope.action.error = error;\n              });\n        };\n\n        // Return the title of the pod type.\n        $scope.getPodTypeTitle = function() {\n            var i;\n            for(i = 0; i < $scope.power_types.length; i++) {\n                var power_type = $scope.power_types[i];\n                if(power_type.name === $scope.pod.type) {\n                    return power_type.description;\n                }\n            }\n            return $scope.pod.type;\n        };\n\n        // Returns true if the pod is composable.\n        $scope.canCompose = function() {\n            if(angular.isObject($scope.pod)) {\n                return ($scope.isSuperUser() &&\n                    $scope.pod.capabilities.indexOf('composable') >= 0);\n            } else {\n                return false;\n            }\n        };\n\n        // Opens the compose action menu.\n        $scope.composeMachine = function() {\n            $scope.action.option = $scope.compose.action;\n        };\n\n        // Called before the compose params is sent over the websocket.\n        $scope.composePreProcess = function(params) {\n            params = angular.copy(params);\n            params.id = $scope.pod.id;\n            // Sort boot disk first.\n            var sorted = $scope.compose.obj.storage.sort(function(a, b) {\n              if(a.boot === b.boot) {\n                return 0;\n              } else if(a.boot && !b.boot) {\n                return -1;\n              } else {\n                return 1;\n              }\n            });\n            // Create the storage constraint.\n            var storage = [];\n            angular.forEach(sorted, function(disk, idx) {\n              var constraint = idx + ':' + disk.size;\n              var tags = disk.tags.map(function(tag) {\n                return tag.text;\n              });\n              tags.splice(0, 0, disk.type);\n              constraint += '(' + tags.join(',') + ')';\n              storage.push(constraint);\n            });\n            params.storage = storage.join(',');\n            return params;\n        };\n\n        // Called to cancel composition.\n        $scope.cancelCompose = function() {\n          $scope.compose.obj = {\n            storage: [{\n              type: 'local',\n              size: 8,\n              tags: [],\n              boot: true\n            }]\n          };\n          $scope.action.option = null;\n        };\n\n        // Add another storage device.\n        $scope.composeAddStorage = function() {\n          var storage = {\n            type: 'local',\n            size: 8,\n            tags: [],\n            boot: false\n          };\n          if($scope.pod.capabilities.indexOf('iscsi_storage') >= 0) {\n            storage.type = 'iscsi';\n          }\n          $scope.compose.obj.storage.push(storage);\n        };\n\n        // Change which disk is the boot disk.\n        $scope.composeSetBootDisk = function(storage) {\n          angular.forEach($scope.compose.obj.storage, function(disk) {\n            disk.boot = false;\n          });\n          storage.boot = true;\n        };\n\n        // Remove a disk from storage config.\n        $scope.composeRemoveDisk = function(storage) {\n          var idx = $scope.compose.obj.storage.indexOf(storage);\n          if(idx >= 0) {\n            $scope.compose.obj.storage.splice(idx, 1);\n          }\n        };\n\n        // Start watching key fields.\n        $scope.startWatching = function() {\n            $scope.$watch(\"pod.name\", function() {\n                $rootScope.title = 'Pod ' + $scope.pod.name;\n            });\n            $scope.$watch(\"pod.capabilities\", function() {\n                // Show the composable action if the pod supports composition.\n                var idx = $scope.action.options.indexOf(\n                    $scope.compose.action);\n                if(!$scope.canCompose()) {\n                    if(idx >= 0) {\n                        $scope.action.options.splice(idx, 1);\n                    }\n                } else {\n                    if(idx === -1) {\n                        $scope.action.options.splice(\n                            0, 0, $scope.compose.action);\n                    }\n                }\n            });\n            $scope.$watch(\"action.option\", function(now, then) {\n                // When the compose action is selected set the default\n                // parameters.\n                if(now && now.name === 'compose') {\n                    if(!then || then.name !== 'compose') {\n                        $scope.compose.obj.domain = (\n                            DomainsManager.getDefaultDomain().id);\n                        $scope.compose.obj.zone = (\n                            ZonesManager.getDefaultZone().id);\n                    }\n                }\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            PodsManager, GeneralManager, UsersManager,\n            DomainsManager, ZonesManager, MachinesManager]).then(function() {\n\n            // Possibly redirected from another controller that already had\n            // this pod set to active. Only call setActiveItem if not already\n            // the activeItem.\n            var activePod = PodsManager.getActiveItem();\n            if(angular.isObject(activePod) &&\n                activePod.id === parseInt($routeParams.id, 10)) {\n                $scope.pod = activePod;\n                $scope.loaded = true;\n                $scope.machinesSearch = 'pod-id:=' + $scope.pod.id;\n                $scope.startWatching();\n            } else {\n                PodsManager.setActiveItem(\n                    parseInt($routeParams.id, 10)).then(function(pod) {\n                        $scope.pod = pod;\n                        $scope.loaded = true;\n                        $scope.machinesSearch = 'pod-id:=' + $scope.pod.id;\n                        $scope.startWatching();\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pods List Controller\n */\n\nangular.module('MAAS').controller('PodsListController', [\n    '$scope', '$rootScope',\n    'PodsManager', 'UsersManager', 'GeneralManager', 'ZonesManager',\n    'ManagerHelperService', function(\n        $scope, $rootScope, PodsManager, UsersManager, GeneralManager,\n        ZonesManager, ManagerHelperService) {\n\n        // Set title and page.\n        $rootScope.title = \"Pods\";\n        $rootScope.page = \"pods\";\n\n        // Set initial values.\n        $scope.podManager = PodsManager;\n        $scope.pods = PodsManager.getItems();\n        $scope.loading = true;\n\n        $scope.filteredItems = [];\n        $scope.selectedItems = PodsManager.getSelectedItems();\n        $scope.predicate = 'name';\n        $scope.allViewableChecked = false;\n        $scope.action = {\n          option: null,\n          options: [\n            {\n              name: 'refresh',\n              title: 'Refresh',\n              sentence: 'refresh',\n              operation: angular.bind(PodsManager, PodsManager.refresh)\n            },\n            {\n              name: 'delete',\n              title: 'Delete',\n              sentence: 'delete',\n              operation: angular.bind(PodsManager, PodsManager.deleteItem)\n            }\n          ],\n          progress: {\n              total: 0,\n              completed: 0,\n              errors: 0\n          }\n        };\n        $scope.add = {\n          open: false,\n          obj: {\n              cpu_over_commit_ratio: 1,\n              memory_over_commit_ratio: 1\n          }\n        };\n        $scope.powerTypes = GeneralManager.getData(\"power_types\");\n        $scope.zones = ZonesManager.getItems();\n\n        // Called to update `allViewableChecked`.\n        function updateAllViewableChecked() {\n            // Not checked when no pods.\n            if($scope.pods.length === 0) {\n                $scope.allViewableChecked = false;\n                return;\n            }\n\n            // Loop through all filtered pods and see if all are checked.\n            var i;\n            for(i = 0; i < $scope.pods.length; i++) {\n                if(!$scope.pods[i].$selected) {\n                    $scope.allViewableChecked = false;\n                    return;\n                }\n            }\n            $scope.allViewableChecked = true;\n        }\n\n        function clearAction() {\n            resetActionProgress();\n            $scope.action.option = null;\n        }\n\n        // Clear the action if required.\n        function shouldClearAction() {\n            if($scope.selectedItems.length === 0) {\n                clearAction();\n                if($scope.action.option) {\n                    $scope.action.option = null;\n                }\n            }\n        }\n\n        // Reset actionProgress to zero.\n        function resetActionProgress() {\n            var progress = $scope.action.progress;\n            progress.completed = progress.total = progress.errors = 0;\n            angular.forEach($scope.pods, function(pod) {\n                delete pod.action_failed;\n            });\n        }\n\n        // After an action has been performed check if we can leave all pods\n        // selected or if an error occured and we should only show the failed\n        // pods.\n        function updateSelectedItems() {\n            if(!$scope.hasActionsFailed()) {\n                if(!$scope.hasActionsInProgress()) {\n                     clearAction();\n                }\n                return;\n            }\n            angular.forEach($scope.pods, function(pod) {\n                if(pod.action_failed === false) {\n                    PodsManager.unselectItem(pod.id);\n                }\n            });\n            shouldClearAction();\n        }\n\n        // Mark a pod as selected or unselected.\n        $scope.toggleChecked = function(pod) {\n            if(PodsManager.isSelected(pod.id)) {\n                PodsManager.unselectItem(pod.id);\n            } else {\n                PodsManager.selectItem(pod.id);\n            }\n            updateAllViewableChecked();\n            shouldClearAction();\n        };\n\n        // Select all viewable pods or deselect all viewable pods.\n        $scope.toggleCheckAll = function() {\n            if($scope.allViewableChecked) {\n                angular.forEach($scope.pods, function(pod) {\n                    PodsManager.unselectItem(pod.id);\n                });\n            } else {\n                angular.forEach($scope.pods, function(pod) {\n                    PodsManager.selectItem(pod.id);\n                });\n            }\n            updateAllViewableChecked();\n            shouldClearAction();\n        };\n\n        // When the pods change update if all check buttons should be\n        // checked or not.\n        $scope.$watchCollection(\"pods\", function() {\n            updateAllViewableChecked();\n        });\n\n        // Sorts the table by predicate.\n        $scope.sortTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Called when the current action is cancelled.\n        $scope.actionCancel = function() {\n            resetActionProgress();\n            $scope.action.option = null;\n        };\n\n        // Perform the action on all pods.\n        $scope.actionGo = function() {\n            var extra = {};\n\n            // Setup actionProgress.\n            resetActionProgress();\n            $scope.action.progress.total = $scope.selectedItems.length;\n\n            // Perform the action on all selected items.\n            var operation = $scope.action.option.operation;\n            angular.forEach($scope.selectedItems, function(pod) {\n                operation(pod).then(function() {\n                        $scope.action.progress.completed += 1;\n                        pod.action_failed = false;\n                        updateSelectedItems();\n                    }, function(error) {\n                        $scope.action.progress.errors += 1;\n                        pod.action_error = error;\n                        pod.action_failed = true;\n                        updateSelectedItems();\n                    });\n            });\n        };\n\n        // Returns true when actions are being performed.\n        $scope.hasActionsInProgress = function() {\n            var progress = $scope.action.progress;\n            return progress.total > 0 && (\n                progress.completed + progress.errors) !== progress.total;\n        };\n\n        // Returns true if any of the actions have failed.\n        $scope.hasActionsFailed = function() {\n            var progress = $scope.action.progress;\n            return progress.errors > 0;\n        };\n\n        // Called when the add pod button is pressed.\n        $scope.addPod = function() {\n            $scope.add.open = true;\n            $scope.add.obj.zone = ZonesManager.getDefaultZone().id;\n            $scope.add.obj.cpu_over_commit_ratio = 1;\n            $scope.add.obj.memory_over_commit_ratio = 1;\n        };\n\n        // Called when the cancel add pod button is pressed.\n        $scope.cancelAddPod = function() {\n            $scope.add.open = false;\n            $scope.add.obj = {};\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return the title of the power type.\n        $scope.getPowerTypeTitle = function(power_type) {\n            var i;\n            for(i = 0; i < $scope.powerTypes.length; i++) {\n                var powerType = $scope.powerTypes[i];\n                if(powerType.name === power_type) {\n                    return powerType.description;\n                }\n            }\n            return power_type;\n        };\n\n        // Load the required managers for this controller.\n        ManagerHelperService.loadManagers($scope, [\n            PodsManager, UsersManager, GeneralManager, ZonesManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Preferences Controller\n */\n\nangular.module('MAAS').controller('PreferencesController', [\n    '$scope', 'UsersManager', 'ManagerHelperService',\n    function(\n        $scope, UsersManager, ManagerHelperService) {\n            $scope.loading = true;\n            ManagerHelperService.loadManager(\n                $scope, UsersManager).then(function() {\n                    $scope.loading = false;\n                });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Settings Controller\n */\n\nangular.module('MAAS').controller('SettingsController', [\n    '$scope', '$rootScope', '$routeParams', 'PackageRepositoriesManager',\n    'DHCPSnippetsManager', 'MachinesManager', 'ControllersManager',\n    'DevicesManager', 'SubnetsManager', 'GeneralManager',\n    'ManagerHelperService',\n    function($scope, $rootScope, $routeParams, PackageRepositoriesManager,\n             DHCPSnippetsManager, MachinesManager, ControllersManager,\n             DevicesManager, SubnetsManager, GeneralManager,\n             ManagerHelperService) {\n\n        // Set the title and page.\n        $rootScope.title = \"Loading...\";\n        $rootScope.page = \"settings\";\n\n        // Initial values.\n        $scope.loading = true;\n        $scope.snippetsManager = DHCPSnippetsManager;\n        $scope.snippets = DHCPSnippetsManager.getItems();\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.machines = MachinesManager.getItems();\n        $scope.devices = DevicesManager.getItems();\n        $scope.controllers = ControllersManager.getItems();\n        $scope.known_architectures =\n            GeneralManager.getData(\"known_architectures\");\n        $scope.pockets_to_disable =\n            GeneralManager.getData(\"pockets_to_disable\");\n        $scope.components_to_disable =\n            GeneralManager.getData(\"components_to_disable\");\n        $scope.packageRepositoriesManager = PackageRepositoriesManager;\n        $scope.repositories =\n            PackageRepositoriesManager.getItems();\n        $scope.newSnippet = null;\n        $scope.editSnippet = null;\n        $scope.deleteSnippet = null;\n        $scope.snippetTypes = [\"Global\", \"Subnet\", \"Node\"];\n        $scope.newRepository = null;\n        $scope.editRepository = null;\n        $scope.deleteRepository = null;\n\n        // Called when the enabled toggle is changed.\n        $scope.repositoryEnabledToggle = function(repository) {\n            PackageRepositoriesManager.updateItem(repository);\n        };\n\n        // Called to enter remove mode for a repository.\n        $scope.repositoryEnterRemove = function(repository) {\n            $scope.newRepository = null;\n            $scope.editRepository = null;\n            $scope.deleteRepository = repository;\n        };\n\n        // Called to exit remove mode for a repository.\n        $scope.repositoryExitRemove = function() {\n            $scope.deleteRepository = null;\n        };\n\n        // Called to confirm the removal of a repository.\n        $scope.repositoryConfirmRemove = function() {\n            PackageRepositoriesManager.deleteItem(\n                $scope.deleteRepository).then(function() {\n                    $scope.repositoryExitRemove();\n                });\n        };\n\n        // Return true if the repository is a PPA.\n        $scope.isPPA = function(data) {\n            if(!angular.isObject(data)) {\n                return false;\n            }\n            if(!angular.isString(data.url)) {\n                return false;\n            }\n            return data.url.indexOf(\"ppa:\") === 0 ||\n                data.url.indexOf(\"ppa.launchpad.net\") > -1;\n        };\n\n        // Return true if the repository is a mirror.\n        $scope.isMirror = function(data) {\n            if(!angular.isObject(data)) {\n                return false;\n            }\n            if(!angular.isString(data.name)) {\n                return false;\n            }\n            return data.name === \"main_archive\" ||\n                data.name === \"ports_archive\";\n        };\n\n        // Called to enter edit mode for a repository.\n        $scope.repositoryEnterEdit = function(repository) {\n            $scope.newRepository = null;\n            $scope.deleteRepository = null;\n            $scope.editRepository = repository;\n        };\n\n        // Called to exit edit mode for a repository.\n        $scope.repositoryExitEdit = function() {\n            $scope.editRepository = null;\n        };\n\n        // Called to start adding a new repository.\n        $scope.repositoryAdd = function(isPPA) {\n            var repo = {\n                name: \"\",\n                enabled: true,\n                url: \"\",\n                key: \"\",\n                arches: [\"i386\", \"amd64\"],\n                distributions: [],\n                components: []\n            };\n            if (isPPA) {\n                repo.url = \"ppa:\";\n            }\n            $scope.newRepository = repo;\n        };\n\n        // Called to cancel addind a new repository.\n        $scope.repositoryAddCancel = function() {\n            $scope.newRepository = null;\n        };\n\n        // Return the node from either the machines, devices, or controllers\n        // manager.\n        function getNode(system_id) {\n            var node = MachinesManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n            node = DevicesManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n            node = ControllersManager.getItemFromList(system_id);\n            if(angular.isObject(node)) {\n                return node;\n            }\n        }\n\n        // Return the name of the subnet.\n        $scope.getSubnetName = function(subnet) {\n            return SubnetsManager.getName(subnet);\n        };\n\n        // Return the text for the type of snippet.\n        $scope.getSnippetTypeText = function(snippet) {\n            if(angular.isString(snippet.node)) {\n                return \"Node\";\n            } else if(angular.isNumber(snippet.subnet)) {\n                return \"Subnet\";\n            } else {\n                return \"Global\";\n            }\n        };\n\n        // Return the object the snippet applies to.\n        $scope.getSnippetAppliesToObject = function(snippet) {\n            if(angular.isString(snippet.node)) {\n                return getNode(snippet.node);\n            } else if(angular.isNumber(snippet.subnet)) {\n                return SubnetsManager.getItemFromList(snippet.subnet);\n            }\n        };\n\n        // Return the applies to text that is disabled in none edit mode.\n        $scope.getSnippetAppliesToText = function(snippet) {\n            var obj = $scope.getSnippetAppliesToObject(snippet);\n            if(angular.isString(snippet.node) && angular.isObject(obj)) {\n                return obj.fqdn;\n            } else if(angular.isNumber(snippet.subnet) &&\n                angular.isObject(obj)) {\n                return SubnetsManager.getName(obj);\n            } else {\n                return \"\";\n            }\n        };\n\n        // Called to enter remove mode for a DHCP snippet.\n        $scope.snippetEnterRemove = function(snippet) {\n            $scope.newSnippet = null;\n            $scope.editSnippet = null;\n            $scope.deleteSnippet = snippet;\n        };\n\n        // Called to exit remove mode for a DHCP snippet.\n        $scope.snippetExitRemove = function() {\n            $scope.deleteSnippet = null;\n        };\n\n        // Called to confirm the removal of a snippet.\n        $scope.snippetConfirmRemove = function() {\n            DHCPSnippetsManager.deleteItem($scope.deleteSnippet).then(\n                function() {\n                    $scope.snippetExitRemove();\n                });\n        };\n\n        // Called to enter edit mode for a DHCP snippet.\n        $scope.snippetEnterEdit = function(snippet) {\n            $scope.newSnippet = null;\n            $scope.deleteSnippet = null;\n            $scope.editSnippet = snippet;\n            $scope.editSnippet.type = $scope.getSnippetTypeText(snippet);\n        };\n\n        // Called to exit edit mode for a DHCP snippet.\n        $scope.snippetExitEdit = function() {\n            $scope.editSnippet = null;\n        };\n\n        // Called when the active toggle is changed.\n        $scope.snippetToggle = function(snippet) {\n            DHCPSnippetsManager.updateItem(snippet).then(null,\n                function(error) {\n                    // Revert state change and clear toggling.\n                    snippet.enabled = !snippet.enabled;\n                    console.log(error);\n                });\n        };\n\n        // Called to start adding a new snippet.\n        $scope.snippetAdd = function() {\n            $scope.editSnippet = null;\n            $scope.deleteSnippet = null;\n            $scope.newSnippet = {\n                name: \"\",\n                type: \"Global\",\n                enabled: true\n            };\n        };\n\n        // Called to cancel addind a new snippet.\n        $scope.snippetAddCancel = function() {\n            $scope.newSnippet = null;\n        };\n\n        // Setup page variables based on section.\n        if($routeParams.section === \"dhcp\") {\n            $rootScope.title = \"DHCP snippets\";\n            $scope.currentpage = 'dhcp';\n        }\n        else if($routeParams.section === \"repositories\") {\n            $rootScope.title = \"Package repositories\";\n            $scope.currentpage = 'repositories';\n        }\n\n        // Load the required managers.\n        ManagerHelperService.loadManagers($scope, [\n                PackageRepositoriesManager, DHCPSnippetsManager,\n                MachinesManager, DevicesManager, ControllersManager,\n                SubnetsManager, GeneralManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Details Controller\n */\n\nangular.module('MAAS').controller('SpaceDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'SpacesManager', 'VLANsManager', 'SubnetsManager', 'FabricsManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        SpacesManager, VLANsManager, SubnetsManager, FabricsManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.space = null;\n        $scope.spaceManager = SpacesManager;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.loaded = false;\n        $scope.editSummary = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.space.name;\n        }\n\n        // Called when the space has been loaded.\n        function spaceLoaded(space) {\n            $scope.space = space;\n            updateTitle();\n            $scope.predicate = \"[subnet_name, vlan_name]\";\n            $scope.$watch(\"subnets\", updateSubnets, true);\n            updateSubnets();\n            $scope.loaded = true;\n        }\n\n        // Generate a table that can easily be rendered in the view.\n        function updateSubnets() {\n            var rows = [];\n            angular.forEach($filter('filter')(\n                    $scope.subnets, {space:$scope.space.id}, true),\n                    function(subnet) {\n                var vlan = VLANsManager.getItemFromList(subnet.vlan);\n                var fabric = FabricsManager.getItemFromList(vlan.fabric);\n                var row = {\n                    vlan: vlan,\n                    vlan_name: VLANsManager.getName(vlan),\n                    subnet: subnet,\n                    subnet_name: SubnetsManager.getName(subnet),\n                    fabric: fabric,\n                    fabric_name: fabric.name\n                };\n                rows.push(row);\n            });\n            $scope.rows = rows;\n        }\n\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Called when the \"edit\" button is cliked in the space summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the space summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Return true if this is the default Space\n        $scope.isDefaultSpace = function() {\n            if(!angular.isObject($scope.space)) {\n                return false;\n            }\n            return $scope.space.id === 0;\n        };\n\n        // Called to check if the space can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.space)) {\n                return $scope.space.subnet_ids.length === 0;\n            }\n            return false;\n        };\n\n        // Called when the delete space button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete space button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete space button is pressed.\n        $scope.deleteConfirmButton = function() {\n            SpacesManager.deleteSpace($scope.space).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/networks\");\n                $location.search('by', 'space');\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            SpacesManager, SubnetsManager, VLANsManager, FabricsManager,\n            UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this space set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeSpace = SpacesManager.getActiveItem();\n            var requestedSpace = parseInt($routeParams.space_id, 10);\n            if(isNaN(requestedSpace)) {\n                ErrorService.raiseError(\"Invalid space identifier.\");\n            } else if(angular.isObject(activeSpace) &&\n                activeSpace.id === requestedSpace) {\n                spaceLoaded(activeSpace);\n            } else {\n                SpacesManager.setActiveItem(\n                    requestedSpace).then(function(space) {\n                        spaceLoaded(space);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Subnet Details Controller\n */\n\nangular.module('MAAS').filter('filterSource', ['ValidationService',\n    function() {\n        return function(subnets, source) {\n            var filtered = [];\n            angular.forEach(subnets, function(subnet) {\n                if(subnet.id !== source.id &&\n                    subnet.version === source.version) {\n                    filtered.push(subnet);\n                }\n            });\n            return filtered;\n        };\n    }]);\n\nangular.module('MAAS').controller('SubnetDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'ConfigsManager', 'SubnetsManager', 'SpacesManager', 'VLANsManager',\n    'UsersManager', 'FabricsManager', 'StaticRoutesManager',\n    'ManagerHelperService', 'ErrorService', 'ConverterService',\n    function(\n        $scope, $rootScope, $routeParams, $filter, $location, ConfigsManager,\n        SubnetsManager, SpacesManager, VLANsManager, UsersManager,\n        FabricsManager, StaticRoutesManager, ManagerHelperService, ErrorService,\n        ConverterService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.subnet = null;\n        $scope.editSummary = false;\n        $scope.active_discovery_data = null;\n        $scope.active_discovery_interval = null;\n        $scope.subnets = SubnetsManager.getItems();\n        $scope.subnetManager = SubnetsManager;\n        $scope.staticRoutes = StaticRoutesManager.getItems();\n        $scope.staticRoutesManager = StaticRoutesManager;\n        $scope.space = null;\n        $scope.vlans = VLANsManager.getItems();\n        $scope.fabrics = FabricsManager.getItems();\n        $scope.actionError = null;\n        $scope.actionOption = null;\n        $scope.actionOptions = [];\n        $scope.reverse = false;\n        $scope.newStaticRoute = null;\n        $scope.editStaticRoute = null;\n        $scope.deleteStaticRoute = null;\n\n        $scope.MAP_SUBNET_ACTION = {\n            name: \"map_subnet\",\n            title: \"Map subnet\"\n        };\n        $scope.DELETE_ACTION = {\n            name: \"delete\",\n            title: \"Delete\"\n        };\n\n        // Alloc type mapping.\n        var ALLOC_TYPES = {\n            0: 'Automatic',\n            1: 'Static',\n            4: 'User reserved',\n            5: 'DHCP',\n            6: 'Observed'\n        };\n\n        // Node type mapping.\n        var NODE_TYPES = {\n            0: 'Machine',\n            1: 'Device',\n            2: 'Rack controller',\n            3: 'Region controller',\n            4: 'Rack and region controller',\n            5: 'Chassis',\n            6: 'Storage'\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            subnet = $scope.subnet;\n            if(subnet && subnet.cidr) {\n                $rootScope.title = subnet.cidr;\n                if(subnet.name && subnet.cidr !== subnet.name) {\n                    $rootScope.title += \" (\" +subnet.name + \")\";\n                }\n            }\n        }\n\n        // Update the IP version of the CIDR.\n        function updateIPVersion() {\n            var ip = $scope.subnet.cidr.split('/')[0];\n            if(ip.indexOf(':') === -1) {\n                $scope.ipVersion = 4;\n            } else {\n                $scope.ipVersion = 6;\n            }\n        }\n\n        // Sort for IP address.\n        $scope.ipSort = function(ipAddress) {\n            if($scope.ipVersion === 4) {\n                return ConverterService.ipv4ToInteger(ipAddress.ip);\n            } else {\n                return ConverterService.ipv6Expand(ipAddress.ip);\n            }\n        };\n\n        // Set default predicate to the ipSort function.\n        $scope.predicate = $scope.ipSort;\n\n        // Return the name of the allocation type.\n        $scope.getAllocType = function(allocType) {\n            var str = ALLOC_TYPES[allocType];\n            if(angular.isString(str)) {\n                return str;\n            } else {\n                return \"Unknown\";\n            }\n        };\n\n        $scope.getSubnetCIDR = function(destId) {\n            return SubnetsManager.getItemFromList(destId).cidr;\n        };\n\n        // Sort based on the name of the allocation type.\n        $scope.allocTypeSort = function(ipAddress) {\n            return $scope.getAllocType(ipAddress.alloc_type);\n        };\n\n        // Return the name of the node type for the given IP.\n        $scope.getUsageForIP = function(ip) {\n            if(angular.isObject(ip.node_summary)) {\n                var nodeType = ip.node_summary.node_type;\n                var str = NODE_TYPES[nodeType];\n                if(angular.isString(str)) {\n                    return str;\n                } else {\n                    return \"Unknown\";\n                }\n            } else if(angular.isObject(ip.bmcs)) {\n                return \"BMC\";\n            } else if(angular.isObject(ip.dns_records)) {\n                return \"DNS\";\n            } else {\n                return \"Unknown\";\n            }\n        };\n\n        // Sort based on the node type string.\n        $scope.nodeTypeSort = function(ipAddress) {\n            return $scope.getUsageForIP(ipAddress);\n        };\n\n        // Sort based on the owner name.\n        $scope.ownerSort = function(ipAddress) {\n            var owner = ipAddress.user;\n            if(angular.isString(owner) && owner.length > 0) {\n                return owner;\n            } else {\n                return \"MAAS\";\n            }\n        };\n\n        // Called to change the sort order of the IP table.\n        $scope.sortIPTable = function(predicate) {\n            $scope.predicate = predicate;\n            $scope.reverse = !$scope.reverse;\n        };\n\n        // Return the name of the VLAN.\n        $scope.getVLANName = function(vlan) {\n           return VLANsManager.getName(vlan);\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        $scope.actionRetry = function() {\n            // When we clear actionError, the HTML will be re-rendered to\n            // hide the error message (and the user will be taken back to\n            // the previous action they were performing, since we reset\n            // the actionOption in the error handler.\n            $scope.actionError = null;\n        };\n\n        // Perform the action.\n        $scope.actionGo = function() {\n            if($scope.actionOption.name === \"map_subnet\") {\n                SubnetsManager.scanSubnet($scope.subnet).then(function(result) {\n                    if(result && result.scan_started_on.length === 0) {\n                        $scope.actionError =\n                            ManagerHelperService.parseValidationError(\n                                result.result);\n                    } else {\n                        $scope.actionOption = null;\n                        $scope.actionError = null;\n                    }\n                }, function(error) {\n                    $scope.actionError =\n                        ManagerHelperService.parseValidationError(error);\n                });\n            } else if($scope.actionOption.name === \"delete\") {\n                SubnetsManager.deleteSubnet(\n                    $scope.subnet).then(function(result) {\n                        $scope.actionOption = null;\n                        $scope.actionError = null;\n                        $location.path(\"/networks\");\n                    }, function(error) {\n                        $scope.actionError =\n                            ManagerHelperService.parseValidationError(error);\n                });\n            }\n        };\n\n        // Called when a action is selected.\n        $scope.actionChanged = function() {\n            $scope.actionError = null;\n        };\n\n        // Called when the \"Cancel\" button is pressed.\n        $scope.cancelAction = function() {\n            $scope.actionOption = null;\n            $scope.actionError = null;\n        };\n\n        // Called when the managers load to populate the actions the user\n        // is allowed to perform.\n        $scope.updateActions = function() {\n            if(UsersManager.isSuperUser()) {\n                $scope.actionOptions = [\n                    $scope.MAP_SUBNET_ACTION,\n                    $scope.DELETE_ACTION\n                ];\n            } else {\n                $scope.actionOptions = [];\n            }\n        };\n\n        // Called when the \"edit\" button is cliked in the subnet summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the subnet summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Called by maas-obj-form before it saves the subnet. The passed\n        // subnet is the object right before its sent over the websocket.\n        $scope.subnetPreSave = function(subnet, changedFields) {\n            // Adjust the subnet object if the fabric changed.\n            if(changedFields.indexOf(\"fabric\") !== -1) {\n                // Fabric changed, the websocket expects VLAN to be updated, so\n                // we set the VLAN to the default VLAN for the new fabric.\n                subnet.vlan = FabricsManager.getItemFromList(\n                    subnet.fabric).default_vlan_id;\n            }\n            return subnet;\n        };\n\n        // Called to start adding a new static route.\n        $scope.addStaticRoute = function() {\n            $scope.editStaticRoute = null;\n            $scope.deleteStaticRoute = null;\n            $scope.newStaticRoute = {\n                source: $scope.subnet.id,\n                gateway_ip: \"\",\n                destination: null,\n                metric: 0\n            };\n        };\n\n        // Cancel adding the new static route.\n        $scope.cancelAddStaticRoute = function() {\n            $scope.newStaticRoute = null;\n        };\n\n        // Return true if the static route is in edit mode.\n        $scope.isStaticRouteInEditMode = function(route) {\n            return $scope.editStaticRoute === route;\n        };\n\n        // Toggle edit mode for the static route.\n        $scope.staticRouteToggleEditMode = function(route) {\n            $scope.newStaticRoute = null;\n            $scope.deleteStaticRoute = null;\n            if($scope.isStaticRouteInEditMode(route)) {\n                $scope.editStaticRoute  = null;\n            } else {\n                $scope.editStaticRoute = route;\n            }\n        };\n\n        // Return true if the static route is in delete mode.\n        $scope.isStaticRouteInDeleteMode = function(route) {\n            return $scope.deleteStaticRoute === route;\n        };\n\n        // Enter delete mode for the static route.\n        $scope.staticRouteEnterDeleteMode = function(route) {\n            $scope.newStaticRoute = null;\n            $scope.editStaticRoute = null;\n            $scope.deleteStaticRoute = route;\n        };\n\n        // Exit delete mode for the statc route.\n        $scope.staticRouteCancelDelete = function() {\n            $scope.deleteStaticRoute = null;\n        };\n\n        // Perform the delete operation on the static route.\n        $scope.staticRouteConfirmDelete = function() {\n            StaticRoutesManager.deleteItem($scope.deleteStaticRoute).then(\n                function() {\n                    $scope.deleteStaticRoute = null;\n                });\n        };\n\n        // Called when the subnet has been loaded.\n        function subnetLoaded(subnet) {\n            $scope.subnet = subnet;\n            $scope.loaded = true;\n\n            updateTitle();\n\n            // Watch the vlan and fabric field so if its changed on the subnet\n            // we make sure that the fabric is updated. It is possible that\n            // fabric is removed from the subnet since it is injected from this\n            // controller, so when it is removed we add it back.\n            var updateFabric = function() {\n                $scope.subnet.fabric = (\n                    VLANsManager.getItemFromList($scope.subnet.vlan).fabric);\n                $scope.subnet.fabric_name = (\n                  FabricsManager.getItemFromList(subnet.fabric).name);\n            };\n            var updateSpace = function() {\n                $scope.space = (\n                    SpacesManager.getItemFromList($scope.subnet.space));\n            };\n            var updateVlan = function() {\n                var vlan = VLANsManager.getItemFromList($scope.subnet.vlan);\n                $scope.subnet.vlan_name = (\n                    VLANsManager.getName(vlan)\n                );\n            };\n\n            $scope.$watch(\"subnet.fabric\", updateFabric);\n            $scope.$watch(\"subnet.fabric_name\", updateFabric);\n            $scope.$watch(\"subnet.vlan\", updateFabric);\n            $scope.$watch(\"subnet.vlan_name\", updateVlan);\n            $scope.$watch(\"subnet.space\", updateSpace);\n            $scope.$watch(\"subnet.cidr\", updateIPVersion);\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            ConfigsManager, SubnetsManager, SpacesManager, VLANsManager,\n            UsersManager, FabricsManager, StaticRoutesManager\n        ]).then(function() {\n\n            $scope.updateActions();\n            $scope.active_discovery_data = ConfigsManager.getItemFromList(\n                \"active_discovery_interval\");\n            // Find active discovery interval\n            angular.forEach(\n                $scope.active_discovery_data.choices, function(choice) {\n                    if(choice[0] === $scope.active_discovery_data.value) {\n                        $scope.active_discovery_interval = choice[1];\n                    }\n                });\n\n            // Possibly redirected from another controller that already had\n            // this subnet set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeSubnet = SubnetsManager.getActiveItem();\n            var requestedSubnet = parseInt($routeParams.subnet_id, 10);\n            if(isNaN(requestedSubnet)) {\n                ErrorService.raiseError(\"Invalid subnet identifier.\");\n            } else if(angular.isObject(activeSubnet) &&\n                activeSubnet.id === requestedSubnet) {\n                subnetLoaded(activeSubnet);\n            } else {\n                SubnetsManager.setActiveItem(\n                    requestedSubnet).then(function(subnet) {\n                        subnetLoaded(subnet);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS VLAN Details Controller\n */\n\nangular.module('MAAS').filter('ignoreSelf', function () {\n    return function(objects, self) {\n        var filtered = [];\n        angular.forEach(objects, function(obj) {\n            if(obj !== self) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').controller('VLANDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', '$location',\n    'VLANsManager', 'SubnetsManager', 'SpacesManager', 'FabricsManager',\n    'ControllersManager', 'UsersManager', 'ManagerHelperService',\n    'ErrorService', 'ValidationService', function(\n        $scope, $rootScope, $routeParams, $filter, $location,\n        VLANsManager, SubnetsManager, SpacesManager, FabricsManager,\n        ControllersManager, UsersManager, ManagerHelperService, ErrorService,\n        ValidationService) {\n        var vm = this;\n\n        var filterByVLAN = $filter('filterByVLAN');\n        var filterControllersByVLAN = $filter('filterControllersByVLAN');\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"networks\";\n\n        vm.PROVIDE_DHCP_ACTION = {\n            // Note: 'title' is set dynamically depending on whether or not\n            // DHCP is already enabled on this VLAN.\n            name: \"enable_dhcp\"\n        };\n        vm.RELAY_DHCP_ACTION = {\n            // Note: 'title' is set ndynamically depending on whether or not\n            // DHCP relay is already enabled on this VLAN.\n            name: \"relay_dhcp\"\n        };\n        vm.DISABLE_DHCP_ACTION = {\n            name: \"disable_dhcp\",\n            title: \"Disable DHCP\"\n        };\n        vm.DELETE_ACTION = {\n            name: \"delete\",\n            title: \"Delete\"\n        };\n\n        // Initial values.\n        vm.loaded = false;\n        vm.vlan = null;\n        vm.title = null;\n        vm.actionOption = null;\n        vm.actionOptions = [];\n        vm.vlanManager = VLANsManager;\n        vm.vlans = VLANsManager.getItems();\n        vm.subnets = SubnetsManager.getItems();\n        vm.spaces = SpacesManager.getItems();\n        vm.fabrics = FabricsManager.getItems();\n        vm.controllers = ControllersManager.getItems();\n        vm.actionError = null;\n        vm.relatedSubnets = [];\n        vm.relatedControllers = [];\n        vm.provideDHCPAction = {};\n        vm.primaryRack = null;\n        vm.secondaryRack = null;\n        vm.editSummary = false;\n\n\n        // Return true if the authenticated user is super user.\n        vm.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Called when the \"edit\" button is cliked in the vlan summary\n        vm.enterEditSummary = function() {\n            vm.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the vlan summary\n        vm.exitEditSummary = function() {\n            vm.editSummary = false;\n        };\n\n        // Get the space name for the VLAN.\n        vm.getSpaceName = function() {\n            var space = SpacesManager.getItemFromList(vm.vlan.space);\n            if(space) {\n              return space.name;\n            } else {\n              return \"(undefined)\";\n            }\n        };\n\n        // Get the aciton structure for the action with the specified name.\n        vm.getActionByName = function(name) {\n            var i;\n            for(i = 0 ; i < vm.actionOptions.length ; i++) {\n                if(vm.actionOptions[i].name === name) {\n                    return vm.actionOptions[i];\n                }\n            }\n            return null;\n        };\n\n        // Initialize the provideDHCPAction structure with the current primary\n        // and secondary rack, plus an indication regarding whether or not\n        // adding a dynamic IP range is required.\n        vm.initProvideDHCP = function(forRelay) {\n            vm.provideDHCPAction = {};\n            var dhcp = vm.provideDHCPAction;\n            dhcp.subnet = null;\n            dhcp.relayVLAN = null;\n            if (angular.isNumber(vm.vlan.relay_vlan)) {\n                dhcp.relayVLAN = VLANsManager.getItemFromList(\n                    vm.vlan.relay_vlan);\n            }\n            if (angular.isObject(vm.primaryRack)) {\n                dhcp.primaryRack = vm.primaryRack.system_id;\n            } else if(vm.relatedControllers.length > 0) {\n                // Select the primary controller arbitrarily by default.\n                dhcp.primaryRack = vm.relatedControllers[0].system_id;\n            }\n            if (angular.isObject(vm.secondaryRack)) {\n                dhcp.secondaryRack = vm.secondaryRack.system_id;\n            } else if(vm.relatedControllers.length > 1) {\n                // Select the secondary controller arbitrarily by default.\n                dhcp.secondaryRack = vm.relatedControllers[1].system_id;\n            }\n            dhcp.maxIPs = 0;\n            dhcp.startIP = null;\n            dhcp.endIP = null;\n            dhcp.gatewayIP = \"\";\n            if (angular.isObject(vm.relatedSubnets)) {\n                // Select a subnet arbitrarily by default.\n                if (vm.relatedSubnets.length > 0 &&\n                        angular.isObject(vm.relatedSubnets[0].subnet)) {\n                    dhcp.subnet = vm.relatedSubnets[0].subnet.id;\n                }\n                dhcp.needsDynamicRange = true;\n                var i, subnet;\n                for (i = 0; i < vm.relatedSubnets.length; i++) {\n                    subnet = vm.relatedSubnets[i].subnet;\n                    // If any related subnet already has a dynamic range, we\n                    // cannot prompt the user to enter one here. If a\n                    // suggestion does not exist, a range does not exist\n                    // already.\n                    var iprange = subnet.statistics.suggested_dynamic_range;\n                    if (!angular.isObject(iprange)) {\n                        // If there is already a dynamic range on one of the\n                        // subnets, it's the \"subnet of least surprise\" if\n                        // the user is choosing to reconfigure their rack\n                        // controllers. (if they want DHCP on *another* subnet,\n                        // they should need to be explicit about it.)\n                        dhcp.subnet = subnet.id;\n                        dhcp.needsDynamicRange = false;\n                        break;\n                    }\n                }\n                // We must prompt the user for a subnet and a gateway IP\n                // address if any subnet does not yet contain a gateway IP\n                // address.\n                dhcp.needsGatewayIP = false;\n                dhcp.subnetMissingGatewayIP = true;\n                for (i = 0; i < vm.relatedSubnets.length; i++) {\n                    subnet = vm.relatedSubnets[i].subnet;\n                    if(subnet.gateway_ip === null ||\n                        subnet.gateway_ip === '') {\n                        dhcp.needsGatewayIP = true;\n                        break;\n                    }\n                }\n            }\n            // Since we are setting default values for these three options,\n            // ensure all the appropriate updates occur.\n            if(!forRelay) {\n                vm.updatePrimaryRack();\n                vm.updateSecondaryRack();\n            }\n            vm.updateSubnet(forRelay);\n        };\n\n        // Called when the actionOption has changed.\n        vm.actionOptionChanged = function() {\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                vm.initProvideDHCP(false);\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                vm.initProvideDHCP(true);\n            }\n            // Clear the action error.\n            vm.actionError = null;\n        };\n\n        // Cancel the action.\n        vm.actionCancel = function() {\n            // When the user wants to cancel an action, we need to clear out\n            // both the actionOption (so that the action screen will not be\n            // presented again) and the actionError (so that the error screen\n            // is hidden).\n            vm.actionOption = null;\n            vm.actionError = null;\n        };\n\n        // Called from the Provide DHCP form when the primary rack changes.\n        vm.updatePrimaryRack = function() {\n            var dhcp = vm.provideDHCPAction;\n            // If the user selects the secondary controller to be the primary,\n            // then the primary controller needs to be cleared out.\n            if(dhcp.primaryRack === dhcp.secondaryRack) {\n                dhcp.secondaryRack = null;\n            }\n            var i;\n            for(i = 0 ; i < vm.relatedControllers.length ; i++) {\n                if(vm.relatedControllers[i].system_id !== dhcp.primaryRack) {\n                    dhcp.secondaryRack = vm.relatedControllers[i].system_id;\n                    break;\n                }\n            }\n        };\n\n        // Called from the Provide DHCP form when the secondary rack changes.\n        vm.updateSecondaryRack = function() {\n            var dhcp = vm.provideDHCPAction;\n            // This should no longer be possible due to the filters on the\n            // drop-down boxes, but just in case.\n            if(dhcp.primaryRack === dhcp.secondaryRack) {\n                dhcp.primaryRack = null;\n                dhcp.secondaryRack = null;\n            }\n        };\n\n        // Called from the view to exclude the primary rack when selecting\n        // the secondary rack controller.\n        vm.filterPrimaryRack = function(rack) {\n            var dhcp = vm.provideDHCPAction;\n            return rack.system_id !== dhcp.primaryRack;\n        };\n\n        // Called from the Provide DHCP form when the subnet selection changes.\n        vm.updateSubnet = function(forRelay) {\n            var dhcp = vm.provideDHCPAction;\n            var subnet = SubnetsManager.getItemFromList(dhcp.subnet);\n            if(angular.isObject(subnet)) {\n                var suggested_gateway = null;\n                var iprange = null;\n                if(angular.isObject(subnet.statistics)) {\n                    suggested_gateway = subnet.statistics.suggested_gateway;\n                    iprange = subnet.statistics.suggested_dynamic_range;\n                }\n                if(angular.isObject(iprange) && iprange.num_addresses > 0) {\n                    dhcp.maxIPs = iprange.num_addresses;\n                    if(forRelay) {\n                        dhcp.startIP = \"\";\n                        dhcp.endIP = \"\";\n                        dhcp.startPlaceholder = iprange.start + \"(optional)\";\n                        dhcp.endPlaceholder = iprange.end + \" (optional)\";\n                    } else {\n                        dhcp.startIP = iprange.start;\n                        dhcp.endIP = iprange.end;\n                        dhcp.startPlaceholder = iprange.start;\n                        dhcp.endPlaceholder = iprange.end;\n                    }\n                } else {\n                    // Need to add a dynamic range, but according to our data,\n                    // there is no room on the subnet for a dynamic range.\n                    dhcp.maxIPs = 0;\n                    dhcp.startIP = \"\";\n                    dhcp.endIP = \"\";\n                    dhcp.startPlaceholder = \"(no available IPs)\";\n                    dhcp.endPlaceholder = \"(no available IPs)\";\n                }\n                if(angular.isString(suggested_gateway)) {\n                    if(forRelay) {\n                      dhcp.gatewayIP = \"\";\n                      dhcp.gatewayPlaceholder = (\n                          suggested_gateway + \" (optional)\");\n                    } else {\n                        dhcp.gatewayIP = suggested_gateway;\n                        dhcp.gatewayPlaceholder = suggested_gateway;\n                    }\n                } else {\n                    // This means the subnet already has a gateway, so don't\n                    // bother populating it.\n                    dhcp.gatewayIP = \"\";\n                    dhcp.gatewayPlaceholder = \"\";\n                }\n            } else {\n                // Don't need to add a dynamic range, so ensure these fields\n                // are cleared out.\n                dhcp.maxIPs = 0;\n                dhcp.startIP = null;\n                dhcp.endIP = null;\n                dhcp.gatewayIP = \"\";\n            }\n            if(angular.isObject(subnet)) {\n                dhcp.subnetMissingGatewayIP = !angular.isString(\n                    subnet.gateway_ip);\n            } else {\n                dhcp.subnetMissingGatewayIP = false;\n            }\n            if(dhcp.subnetMissingGatewayIP === false) {\n                dhcp.gatewayIP = null;\n            }\n       };\n\n        vm.actionRetry = function() {\n            // When we clear actionError, the HTML will be re-rendered to\n            // hide the error message (and the user will be taken back to\n            // the previous action they were performing, since we reset\n            // the actionOption in the error handler.\n            vm.actionError = null;\n        };\n\n        // Return True if the current action can be performed.\n        vm.canPerformAction = function() {\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                return vm.relatedSubnets.length > 0;\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                return angular.isObject(vm.provideDHCPAction.relayVLAN);\n            } else {\n                return true;\n            }\n        };\n\n        // Perform the action.\n        vm.actionGo = function() {\n            // Do nothing if action cannot be performed.\n            if(!vm.canPerformAction()) {\n               return;\n            }\n\n            if(vm.actionOption.name === \"enable_dhcp\") {\n                var dhcp = vm.provideDHCPAction;\n                var controllers = [];\n                // These will be undefined if they don't exist, and the region\n                // will simply get an empty dictionary.\n                var extra = {};\n                extra.subnet = dhcp.subnet;\n                extra.start = dhcp.startIP;\n                extra.end = dhcp.endIP;\n                extra.gateway = dhcp.gatewayIP;\n                if(angular.isString(dhcp.primaryRack)) {\n                    controllers.push(dhcp.primaryRack);\n                }\n                if(angular.isString(dhcp.secondaryRack)) {\n                    controllers.push(dhcp.secondaryRack);\n                }\n                // Abort the action without calling down to the region if\n                // the user didn't select a controller.\n                if(controllers.length === 0) {\n                    vm.actionError =\n                        \"A primary rack controller must be specified.\";\n                    return;\n                }\n                VLANsManager.configureDHCP(\n                    vm.vlan, controllers, extra).then(function() {\n                        vm.actionOption = null;\n                        vm.actionError = null;\n                    }, function(result) {\n                        vm.actionError = result.error;\n                        vm.actionOption = vm.PROVIDE_DHCP_ACTION;\n                    });\n            } else if(vm.actionOption.name === \"relay_dhcp\") {\n                // These will be undefined if they don't exist, and the region\n                // will simply get an empty dictionary.\n                var extraDHCP = {};\n                extraDHCP.subnet = vm.provideDHCPAction.subnet;\n                extraDHCP.start = vm.provideDHCPAction.startIP;\n                extraDHCP.end = vm.provideDHCPAction.endIP;\n                extraDHCP.gateway = vm.provideDHCPAction.gatewayIP;\n                var relay = vm.provideDHCPAction.relayVLAN.id;\n                VLANsManager.configureDHCP(\n                    vm.vlan, [], extraDHCP, relay).then(function() {\n                        vm.actionOption = null;\n                        vm.actionError = null;\n                    }, function(result) {\n                        vm.actionError = result.error;\n                        vm.actionOption = vm.RELAY_DHCP_ACTION;\n                    });\n            } else if(vm.actionOption.name === \"disable_dhcp\") {\n                VLANsManager.disableDHCP(vm.vlan).then(function() {\n                    vm.actionOption = null;\n                    vm.actionError = null;\n                }, function(result) {\n                    vm.actionError = result.error;\n                    vm.actionOption = vm.DISABLE_DHCP_ACTION;\n                });\n            } else if(vm.actionOption.name === \"delete\") {\n                VLANsManager.deleteVLAN(vm.vlan).then(function() {\n                    $location.path(\"/networks\");\n                    vm.actionOption = null;\n                    vm.actionError = null;\n                }, function(result) {\n                    vm.actionError = result.error;\n                    vm.actionOption = vm.DELETE_ACTION;\n                });\n            }\n        };\n\n        // Return true if there is an action error.\n        vm.isActionError = function() {\n            return vm.actionError !== null;\n        };\n\n        // Return the name of the VLAN.\n        vm.getFullVLANName = function(vlan_id) {\n            var vlan = VLANsManager.getItemFromList(vlan_id);\n            var fabric = FabricsManager.getItemFromList(vlan.fabric);\n            return (\n                FabricsManager.getName(fabric) + \".\" +\n                VLANsManager.getName(vlan));\n        };\n\n        // Return the current DHCP status.\n        vm.getDHCPStatus = function() {\n            if(vm.vlan) {\n              if(vm.vlan.dhcp_on) {\n                return \"Enabled\";\n              } else if(vm.vlan.relay_vlan) {\n                return \"Relayed via \" + vm.getFullVLANName(vm.vlan.relay_vlan);\n              } else {\n                return \"Disabled\";\n              }\n            } else {\n              return \"\";\n            }\n        };\n\n        // Updates the page title.\n        function updateTitle() {\n            var vlan = vm.vlan;\n            var fabric = vm.fabric;\n            if(angular.isObject(vlan) && angular.isObject(fabric)) {\n                if (!vlan.name) {\n                    if(vlan.vid === 0) {\n                        vm.title = \"Default VLAN\";\n                    } else {\n                        vm.title = \"VLAN \" + vlan.vid;\n                    }\n                } else {\n                    vm.title = vlan.name;\n                }\n                vm.title += \" in \" + fabric.name;\n                $rootScope.title = vm.title;\n            }\n        }\n\n        // Called from a $watch when the management racks are updated.\n        function updateManagementRacks() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            if(vlan.primary_rack) {\n                vm.primaryRack = ControllersManager.getItemFromList(\n                    vlan.primary_rack);\n            } else {\n                vm.primaryRack = null;\n            }\n            if(vlan.secondary_rack) {\n                vm.secondaryRack = ControllersManager.getItemFromList(\n                    vlan.secondary_rack);\n            } else {\n                vm.secondaryRack = null;\n            }\n        }\n\n        // Called from a $watch when the related controllers may have changed.\n        function updateRelatedControllers() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            var racks = [];\n            angular.forEach(vlan.rack_sids, function(rack_sid) {\n                var rack = ControllersManager.getItemFromList(rack_sid);\n                if(angular.isObject(rack)) {\n                    racks.push(rack);\n                }\n            });\n            vm.relatedControllers = racks;\n        }\n\n        // Called from a $watch when the related subnets or spaces may have\n        // changed.\n        function updateRelatedSubnets() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            var subnets = [];\n            angular.forEach(\n                    filterByVLAN(vm.subnets, vlan), function(subnet) {\n                var space = SpacesManager.getItemFromList(subnet.space);\n                if(!angular.isObject(space)) {\n                    space = {name: \"(undefined)\"};\n                }\n                var row = {\n                    subnet: subnet,\n                    space: space\n                };\n                subnets.push(row);\n            });\n            vm.relatedSubnets = subnets;\n        }\n\n        function updatePossibleActions() {\n            var vlan = vm.vlan;\n            if(!angular.isObject(vlan)) {\n                return;\n            }\n            // Clear out the actionOptions array. (this needs to be the same\n            // object, since it's watched from $scope.)\n            vm.actionOptions.length = 0;\n            if(UsersManager.isSuperUser()) {\n                if(!vlan.relay_vlan) {\n                  if(vlan.dhcp_on === true) {\n                      vm.PROVIDE_DHCP_ACTION.title = \"Reconfigure DHCP\";\n                      vm.actionOptions.push(vm.PROVIDE_DHCP_ACTION);\n                      vm.actionOptions.push(vm.DISABLE_DHCP_ACTION);\n                  } else {\n                      vm.PROVIDE_DHCP_ACTION.title = \"Provide DHCP\";\n                      vm.RELAY_DHCP_ACTION.title = \"Relay DHCP\";\n                      vm.actionOptions.push(vm.PROVIDE_DHCP_ACTION);\n                      vm.actionOptions.push(vm.RELAY_DHCP_ACTION);\n                  }\n                } else {\n                  vm.actionOptions.push(vm.RELAY_DHCP_ACTION);\n                  vm.actionOptions.push(vm.DISABLE_DHCP_ACTION);\n                  vm.RELAY_DHCP_ACTION.title = \"Reconfigure DHCP relay\";\n                }\n                if(!vm.isFabricDefault) {\n                    vm.actionOptions.push(vm.DELETE_ACTION);\n                }\n            }\n        }\n\n        // Called when the vlan has been loaded.\n        function vlanLoaded(vlan) {\n            vm.vlan = vlan;\n            vm.fabric = FabricsManager.getItemFromList(vlan.fabric);\n            vm.isFabricDefault = vm.fabric.default_vlan_id === vm.vlan.id;\n            vm.loaded = true;\n\n            updateTitle();\n            updateManagementRacks();\n            updateRelatedControllers();\n            updateRelatedSubnets();\n            updatePossibleActions();\n        }\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers($scope, [\n            VLANsManager, SubnetsManager, SpacesManager, FabricsManager,\n            ControllersManager, UsersManager\n        ]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this vlan set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeVLAN = VLANsManager.getActiveItem();\n            var requestedVLAN = parseInt($routeParams.vlan_id, 10);\n            if(isNaN(requestedVLAN)) {\n                ErrorService.raiseError(\"Invalid VLAN identifier.\");\n            } else if(angular.isObject(activeVLAN) &&\n                activeVLAN.id === requestedVLAN) {\n                vlanLoaded(activeVLAN);\n            } else {\n                VLANsManager.setActiveItem(\n                    requestedVLAN).then(function(vlan) {\n                        vlanLoaded(vlan);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n\n            $scope.$watch(\"vlanDetails.vlan.name\", updateTitle);\n            $scope.$watch(\"vlanDetails.vlan.vid\", updateTitle);\n            $scope.$watch(\"vlanDetails.vlan.dhcp_on\", updatePossibleActions);\n            $scope.$watch(\n                \"vlanDetails.vlan.relay_vlan\", updatePossibleActions);\n            $scope.$watch(\"vlanDetails.fabric.name\", updateTitle);\n            $scope.$watch(\n                \"vlanDetails.vlan.primary_rack\", updateManagementRacks);\n            $scope.$watch(\n                \"vlanDetails.vlan.secondary_rack\", updateManagementRacks);\n\n            $scope.$watchCollection(\n                \"vlanDetails.subnets\", updateRelatedSubnets);\n            $scope.$watchCollection(\n                \"vlanDetails.spaces\", updateRelatedSubnets);\n            $scope.$watchCollection(\n                \"vlanDetails.controllers\", updateRelatedControllers);\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zone Details Controller\n */\n\nangular.module('MAAS').controller('ZoneDetailsController', [\n    '$scope', '$rootScope', '$routeParams', '$location', 'MachinesManager',\n    'DevicesManager', 'ZonesManager', 'UsersManager',\n    'ManagerHelperService', 'ErrorService',\n    function(\n        $scope, $rootScope, $routeParams, $location, MachinesManager,\n        DevicesManager, ZonesManager, UsersManager, ManagerHelperService,\n        ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Loading...\";\n\n        // Note: this value must match the top-level tab, in order for\n        // highlighting to occur properly.\n        $rootScope.page = \"zones\";\n\n        // Initial values.\n        $scope.loaded = false;\n        $scope.zone = null;\n        $scope.zoneManager = ZonesManager;\n        $scope.editSummary = false;\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n\n        // Updates the page title.\n        function updateTitle() {\n            $rootScope.title = $scope.zone.name;\n        }\n\n        // Called when the zone has been loaded.\n        function zoneLoaded(zone) {\n            $scope.zone = zone;\n            $scope.loaded = true;\n            updateTitle();\n        }\n\n\n        // Called when the \"edit\" button is cliked in the zone summary\n        $scope.enterEditSummary = function() {\n            $scope.editSummary = true;\n        };\n\n        // Called when the \"cancel\" button is cliked in the zone summary\n        $scope.exitEditSummary = function() {\n            $scope.editSummary = false;\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        // Return true if this is the default zone.\n        $scope.isDefaultZone = function() {\n            if(angular.isObject($scope.zone)) {\n                return $scope.zone.id === 1;\n            }\n            return false;\n        };\n\n        // Called to check if the zone can be deleted.\n        $scope.canBeDeleted = function() {\n            if(angular.isObject($scope.zone)) {\n                return $scope.zone.id !== 0;\n            }\n            return false;\n        };\n\n        // Called when the delete zone button is pressed.\n        $scope.deleteButton = function() {\n            $scope.error = null;\n            $scope.confirmingDelete = true;\n        };\n\n        // Called when the cancel delete zone button is pressed.\n        $scope.cancelDeleteButton = function() {\n            $scope.confirmingDelete = false;\n        };\n\n        // Called when the confirm delete space button is pressed.\n        $scope.deleteConfirmButton = function() {\n            ZonesManager.deleteItem($scope.zone).then(function() {\n                $scope.confirmingDelete = false;\n                $location.path(\"/zones\");\n            }, function(error) {\n                $scope.error =\n                    ManagerHelperService.parseValidationError(error);\n            });\n        };\n\n        // Load all the required managers.\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, UsersManager]).then(function() {\n            // Possibly redirected from another controller that already had\n            // this zone set to active. Only call setActiveItem if not\n            // already the activeItem.\n            var activeZone = ZonesManager.getActiveItem();\n            var requestedZone = parseInt($routeParams.zone_id, 10);\n            if(isNaN(requestedZone)) {\n                ErrorService.raiseError(\"Invalid zone identifier.\");\n            } else if(angular.isObject(activeZone) &&\n                activeZone.id === requestedZone) {\n                zoneLoaded(activeZone);\n            } else {\n                ZonesManager.setActiveItem(\n                    requestedZone).then(function(zone) {\n                        zoneLoaded(zone);\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n            }\n        });\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zones List Controller\n */\n\nangular.module('MAAS').controller('ZonesListController', [\n    '$scope', '$rootScope', '$routeParams', '$filter', 'MachinesManager',\n    'DevicesManager', 'ControllersManager', 'ZonesManager', 'ServicesManager',\n    'UsersManager', 'ManagerHelperService', 'ErrorService',\n    function($scope, $rootScope, $routeParams, $filter, MachinesManager,\n        DevicesManager, ControllersManager, ZonesManager, ServicesManager,\n        UsersManager, ManagerHelperService, ErrorService) {\n\n        // Set title and page.\n        $rootScope.title = \"Zones\";\n        $rootScope.page = \"zones\";\n\n        // Set initial values.\n        $scope.zoneManager = ZonesManager;\n        $scope.zones = ZonesManager.getItems();\n        $scope.currentpage = \"zones\";\n        $scope.predicate = \"name\";\n        $scope.reverse = false;\n        $scope.loading = true;\n        $scope.action = {\n          open: false,\n          obj: {}\n        };\n\n        // Open add zone view.\n        $scope.addZone = function() {\n          $scope.action.open = true;\n        };\n\n        // Saving has completed.\n        $scope.closeZone = function() {\n          $scope.action.open = false;\n          $scope.action.obj = {};\n        };\n\n        // Return true if the authenticated user is super user.\n        $scope.isSuperUser = function() {\n            return UsersManager.isSuperUser();\n        };\n\n        ManagerHelperService.loadManagers(\n            $scope, [ZonesManager, UsersManager]).then(\n            function() {\n                $scope.loading = false;\n            });\n        }\n    ]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Accordion directive.\n *\n * Provides an accordion effect to an element with maas-accordion class and\n * all child elements with maas-accordion-tab. Only one accordion tab is open\n * at a time, selecting another accordion will set \"active\" on that\n * accordion tab.\n */\n\n\nangular.module('MAAS').directive('maasAccordion', function() {\n    return {\n        restrict: \"C\",\n        link: function(scope, element, attrs) {\n\n            // Called when accordion tabs are clicked. Removes active on\n            // all other tabs except to the tab that was clicked.\n            var clickHandler = function(evt) {\n                var tab = evt.data.tab;\n                angular.element(tab).toggleClass(\"is-selected\");\n            };\n\n            // Listen for the click event on all tabs in the accordion.\n            var tabs = element.find(\".maas-accordion-tab\");\n            angular.forEach(tabs, function(tab) {\n                tab = angular.element(tab);\n                tab.on(\"click\", {\n                    tab: tab\n                }, clickHandler);\n            });\n\n            // Remove the handlers when the scope is destroyed.\n            scope.$on(\"$destroy\", function() {\n                angular.forEach(tabs, function(tab) {\n                    angular.element(tab).off(\"click\", clickHandler);\n                });\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Boot images directive.\n*/\n\nangular.module('MAAS').directive('maasBootImagesStatus', [\n    'BootResourcesManager',\n    function(BootResourcesManager) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            template: [\n                '<p class=\"page-header__status\" ',\n                    'data-ng-if=\"data.region_import_running\">',\n                    '<span class=\"u-text--loading\">',\n                        '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                        'Step 1/2: Region controller importing',\n                    '</span>',\n                '</p>',\n                '<p class=\"page-header__status\" ',\n                    'data-ng-if=\"!data.region_import_running && ',\n                    'data.rack_import_running\">',\n                    '<span class=\"u-text--loading\">',\n                        '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                        'Step 2/2: Rack controller(s) importing',\n                    '</span>',\n                '</p>'\n            ].join(''),\n            controller: function($scope, $rootScope, $element, $document) {\n                // This controller doesn't start the polling. The\n                // `maasBootImages` controller should be used on the page to\n                // start the polling. This just presents a nice status spinner\n                // when the polling is enabled.\n                $scope.data = BootResourcesManager.getData();\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasBootImages', [\n    '$filter', 'BootResourcesManager', 'UsersManager', 'ManagerHelperService',\n    function($filter, BootResourcesManager,\n        UsersManager, ManagerHelperService) {\n        return {\n            restrict: \"E\",\n            scope: {\n                design: \"=?\"\n            },\n            templateUrl: (\n                'static/partials/boot-images.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.saving = false;\n                $scope.stopping = false;\n                $scope.design = $scope.design || 'page';\n                $scope.bootResources = BootResourcesManager.getData();\n                $scope.ubuntuImages = [];\n                $scope.source = {\n                    isNew: false,\n                    tooMany: false,\n                    showingAdvanced: false,\n                    connecting: false,\n                    errorMessage: \"\",\n                    source_type: 'maas.io',\n                    url: '',\n                    keyring_filename: '',\n                    keyring_data: '',\n                    releases: [],\n                    arches: [],\n                    selections: {\n                        changed: false,\n                        releases: [],\n                        arches: []\n                    }\n                };\n                $scope.ubuntuCoreImages = [];\n                $scope.ubuntu_core = {\n                    changed: false,\n                    images: []\n                };\n                $scope.otherImages = [];\n                $scope.other = {\n                    changed: false,\n                    images: []\n                };\n                $scope.generatedImages = [];\n                $scope.customImages = [];\n                $scope.ubuntuDeleteId = null;\n                $scope.removingImage = null;\n\n                // Return true if the authenticated user is super user.\n                $scope.isSuperUser = function() {\n                    return UsersManager.isSuperUser();\n                };\n\n                // Return the overall title icon.\n                $scope.getTitleIcon = function() {\n                    if($scope.bootResources.resources.length === 0) {\n                        return 'p-icon--success-muted';\n                    } else {\n                        return 'p-icon--success';\n                    }\n                };\n\n                // Return true if the mirror path section should be shown.\n                $scope.showMirrorPath = function() {\n                    if($scope.source.source_type === 'custom') {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                };\n\n                // Return true if the advanced options are shown.\n                $scope.isShowingAdvancedOptions = function() {\n                    return $scope.source.showingAdvanced;\n                };\n\n                // Toggle showing the advanced options.\n                $scope.toggleAdvancedOptions = function() {\n                    $scope.source.showingAdvanced = (\n                        !$scope.source.showingAdvanced);\n                };\n\n                // Return true if both keyring options are set.\n                $scope.bothKeyringOptionsSet = function() {\n                    return (\n                        $scope.source.keyring_filename.length > 0 &&\n                        $scope.source.keyring_data.length > 0);\n                };\n\n                // Return true when the connect button for the mirror path\n                // should be shown.\n                $scope.showConnectButton = function() {\n                    return $scope.source.isNew;\n                };\n\n                // Called when the source radio chanaged.\n                $scope.sourceChanged = function() {\n                    var currentSources = $scope.bootResources.ubuntu.sources;\n                    if(currentSources.length === 0) {\n                        $scope.source.isNew = true;\n                    } else {\n                        var prevNew = $scope.source.isNew;\n                        $scope.source.isNew = (\n                            $scope.source.source_type !==\n                            currentSources[0].source_type);\n                        if($scope.source.source_type === 'custom') {\n                            $scope.source.isNew = $scope.source.isNew || (\n                                $scope.source.url !==\n                                currentSources[0].url\n                            );\n                        }\n                        if(prevNew && !$scope.source.isNew) {\n                            // No longer a new source set url and keyring to\n                            // original.\n                            $scope.source.url = currentSources[0].url;\n                            $scope.source.keyring_filename = (\n                                currentSources[0].keyring_filename);\n                            $scope.source.keyring_data = (\n                                currentSources[0].keyring_data);\n                        }\n                        $scope.source.releases = [];\n                        $scope.source.arches = [];\n                        $scope.source.selections = {\n                            changed: false,\n                            releases: [],\n                            arches: []\n                        };\n                    }\n                    $scope.updateSource();\n                    $scope.regenerateUbuntuImages();\n\n                    // When the source is new and its maas.io automatically\n                    // fetch the source information.\n                    if($scope.source.isNew &&\n                        $scope.source.source_type === 'maas.io') {\n                        $scope.connect();\n                    }\n                };\n\n                // Return true when the connect button should be disabled.\n                $scope.isConnectButtonDisabled = function() {\n                    if($scope.source.source_type === 'maas.io') {\n                        return false;\n                    } else {\n                        return ($scope.bothKeyringOptionsSet() ||\n                            $scope.source.url.length === 0 ||\n                            $scope.source.connecting);\n                    }\n                };\n\n                // Return the source parameters.\n                $scope.getSourceParams = function() {\n                    if($scope.source.source_type === 'maas.io') {\n                        return {\n                            source_type: 'maas.io'\n                        };\n                    } else {\n                        return {\n                            source_type: $scope.source.source_type,\n                            url: $scope.source.url,\n                            keyring_filename: $scope.source.keyring_filename,\n                            keyring_data: $scope.source.keyring_data\n                        };\n                    }\n                };\n\n                // Select the default images that should be selected. Current\n                // defaults are '16.04 LTS' and 'amd64'.\n                $scope.selectDefaults = function() {\n                    angular.forEach($scope.source.releases, function(release) {\n                        if(release.name === \"xenial\") {\n                            $scope.source.selections.releases.push(release);\n                        }\n                    });\n                    angular.forEach($scope.source.arches, function(arch) {\n                        if(arch.name === \"amd64\") {\n                            $scope.source.selections.arches.push(arch);\n                        }\n                    });\n                };\n\n                // Connected to the simplestreams endpoint. This only gets the\n                // information from the endpoint it does not save it into the\n                // database.\n                $scope.connect = function() {\n                    if($scope.isConnectButtonDisabled()) {\n                        return;\n                    }\n\n                    var source = $scope.getSourceParams();\n                    $scope.source.connecting = true;\n                    $scope.source.releases = [];\n                    $scope.source.arches = [];\n                    $scope.source.selections.changed = true;\n                    $scope.source.selections.releases = [];\n                    $scope.source.selections.arches = [];\n                    $scope.regenerateUbuntuImages();\n                    BootResourcesManager.fetch(source).then(function(data) {\n                        $scope.source.connecting = false;\n                        data = angular.fromJson(data);\n                        $scope.source.releases = data.releases;\n                        $scope.source.arches = data.arches;\n                        $scope.selectDefaults();\n                        $scope.regenerateUbuntuImages();\n                    }, function(error) {\n                        $scope.source.connecting = false;\n                        $scope.source.errorMessage = error;\n                    });\n                };\n\n                // Return true if the connect block should be shown.\n                $scope.showConnectBlock = function() {\n                    return $scope.source.tooMany || (\n                        $scope.source.isNew && !$scope.showSelections());\n                };\n\n                // Return true if the release and architecture selection\n                // should be shown.\n                $scope.showSelections = function() {\n                    return (\n                        $scope.source.releases.length > 0 &&\n                        $scope.source.arches.length > 0);\n                };\n\n                // Return the Ubuntu LTS releases.\n                $scope.getUbuntuLTSReleases = function() {\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    if($scope.source.isNew) {\n                        releases = $scope.source.releases;\n                    }\n                    var filtered = [];\n                    angular.forEach(releases, function(release) {\n                        if(!release.deleted &&\n                            release.title.indexOf('LTS') !== -1) {\n                            filtered.push(release);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return the Ubuntu non-LTS releases.\n                $scope.getUbuntuNonLTSReleases = function() {\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    if($scope.source.isNew) {\n                        releases = $scope.source.releases;\n                    }\n                    var filtered = [];\n                    angular.forEach(releases, function(release) {\n                        if(!release.deleted &&\n                            release.title.indexOf('LTS') === -1) {\n                            filtered.push(release);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return the available architectures.\n                $scope.getArchitectures = function() {\n                    var arches = $scope.bootResources.ubuntu.arches;\n                    if($scope.source.isNew) {\n                        arches = $scope.source.arches;\n                    }\n                    var filtered = [];\n                    angular.forEach(arches, function(arch) {\n                        if(!arch.deleted) {\n                            filtered.push(arch);\n                        }\n                    });\n                    return filtered;\n                };\n\n                // Return true if the source has this selected.\n                $scope.isSelected = function(type, obj) {\n                    return $scope.source.selections[type].indexOf(obj) >= 0;\n                };\n\n                // Toggle the selection of the release or the architecture.\n                $scope.toggleSelection = function(type, obj) {\n                    var idx = $scope.source.selections[type].indexOf(obj);\n                    if(idx === -1) {\n                        $scope.source.selections[type].push(obj);\n                    } else {\n                        $scope.source.selections[type].splice(idx, 1);\n                    }\n                    $scope.source.selections.changed = true;\n                    $scope.regenerateUbuntuImages();\n                };\n\n                // Return true if the images table should be shown.\n                $scope.showImagesTable = function() {\n                    if($scope.ubuntuImages.length > 0) {\n                        return true;\n                    } else {\n                        // Show the images table source has\n                        // releases and architectures.\n                        return (\n                            $scope.source.arches.length > 0 &&\n                            $scope.source.releases.length > 0);\n                    }\n                };\n\n                // Regenerates the Ubuntu images list for the directive.\n                $scope.regenerateUbuntuImages = function() {\n                    var getResource = function() { return null; };\n                    var resources = $scope.bootResources.resources.filter(\n                        function(resource) {\n                            var name_split = resource.name.split('/');\n                            var resource_os = name_split[0];\n                            return (\n                                resource.rtype === 0 &&\n                                resource_os === 'ubuntu');\n                        });\n                    if(!$scope.source.isNew) {\n                        getResource = function(release, arch) {\n                            var i;\n                            for(i = 0; i < resources.length; i++) {\n                                // Only care about Ubuntu images.\n                                var resource = (resources[i]);\n                                var name_split = resource.name.split('/');\n                                var resource_release = name_split[1];\n                                if(resource_release === release &&\n                                    resource.arch === arch) {\n                                    resources.splice(i, 1);\n                                    return resource;\n                                }\n                            }\n                            return null;\n                        };\n                    }\n\n                    // Create the images based on the selections.\n                    $scope.ubuntuImages.length = 0;\n                    angular.forEach($scope.source.selections.releases,\n                        function(release) {\n                            angular.forEach($scope.source.selections.arches,\n                                function(arch) {\n                                    var image = {\n                                        icon: 'p-icon--status-queued',\n                                        title: release.title,\n                                        arch: arch.title,\n                                        size: '-',\n                                        status: 'Selected for download',\n                                        beingDeleted: false,\n                                        name: release.name\n                                    };\n                                    var resource = getResource(\n                                        release.name, arch.name);\n                                    if(angular.isObject(resource)) {\n                                        image.resourceId = resource.id;\n                                        image.icon = (\n                                            'p-icon--status-' + resource.icon);\n                                        image.size = resource.size;\n                                        image.status = resource.status;\n                                        if(resource.downloading) {\n                                            image.icon += ' u-animation--pulse';\n                                        }\n                                    }\n                                    $scope.ubuntuImages.push(image);\n                                });\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    if(!$scope.source.isNew) {\n                        angular.forEach(resources, function(resource) {\n                            var name_split = resource.name.split('/');\n                            var image = {\n                                icon: 'p-icon--status-failed',\n                                title: resource.title,\n                                arch: resource.arch,\n                                size: resource.size,\n                                status: 'Will be deleted',\n                                beingDeleted: true,\n                                name: name_split[1]\n                            };\n                            $scope.ubuntuImages.push(image);\n                        });\n                    }\n                };\n\n                // Regenerates the Ubuntu Core images list for the directive.\n                $scope.regenerateUbuntuCoreImages = function() {\n                    var isUbuntuCore = function(resource) {\n                        var name_split = resource.name.split('/');\n                        var resource_os = name_split[0];\n                        return (\n                            resource.rtype === 0 &&\n                            resource_os === 'ubuntu-core');\n                    };\n                    var resources = (\n                        $scope.bootResources.resources.filter(isUbuntuCore));\n                    var getResource = function(release, arch) {\n                        var i;\n                        for(i = 0; i < resources.length; i++) {\n                            // Only care about other images. Removing custom,\n                            // bootloaders, and Ubuntu images.\n                            var resource = (resources[i]);\n                            var name_split = resource.name.split('/');\n                            var resource_release = name_split[1];\n                            if(resource_release === release &&\n                                resource.arch === arch) {\n                                resources.splice(i, 1);\n                                return resource;\n                            }\n                        }\n                        return null;\n                    };\n\n                    // Create the images based on the selections.\n                    $scope.ubuntuCoreImages.length = 0;\n                    angular.forEach($scope.ubuntu_core.images,\n                        function(ubuntuCoreImage) {\n                            if(ubuntuCoreImage.checked) {\n                                var name_split = ubuntuCoreImage.name.split(\n                                    '/');\n                                var image = {\n                                    icon: 'p-icon--status-queued',\n                                    title: ubuntuCoreImage.title,\n                                    arch: name_split[1],\n                                    size: '-',\n                                    status: 'Selected for download',\n                                    beingDeleted: false\n                                };\n                                var resource = getResource(\n                                    name_split[3], name_split[1]);\n                                if(angular.isObject(resource)) {\n                                    image.icon = (\n                                        'p-icon--status-' + resource.icon);\n                                    image.size = resource.size;\n                                    image.status = resource.status;\n                                    if(resource.downloading) {\n                                        image.icon += ' u-animation--pulse';\n                                    }\n                                }\n                                $scope.ubuntuCoreImages.push(image);\n                            }\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    angular.forEach(resources, function(resource) {\n                        var image = {\n                            icon: 'p-icon--status-failed',\n                            title: resource.title,\n                            arch: resource.arch,\n                            size: resource.size,\n                            status: 'Will be deleted',\n                            beingDeleted: true\n                        };\n                        $scope.ubuntuCoreImages.push(image);\n                    });\n                };\n\n                // Regenerates the other images list for the directive.\n                $scope.regenerateOtherImages = function() {\n                    var isOther = function(resource) {\n                        var name_split = resource.name.split('/');\n                        var resource_os = name_split[0];\n                        return (\n                            resource.rtype === 0 &&\n                            resource_os !== 'ubuntu' &&\n                            resource_os !== 'ubuntu-core' &&\n                            resource_os !== 'custom');\n                    };\n                    var resources = (\n                        $scope.bootResources.resources.filter(isOther));\n                    var getResource = function(release, arch) {\n                        var i;\n                        for(i = 0; i < resources.length; i++) {\n                            // Only care about other images. Removing custom,\n                            // bootloaders, and Ubuntu images.\n                            var resource = (resources[i]);\n                            var name_split = resource.name.split('/');\n                            var resource_release = name_split[1];\n                            if(resource_release === release &&\n                                resource.arch === arch) {\n                                resources.splice(i, 1);\n                                return resource;\n                            }\n                        }\n                        return null;\n                    };\n\n                    // Create the images based on the selections.\n                    $scope.otherImages.length = 0;\n                    angular.forEach($scope.other.images,\n                        function(otherImage) {\n                            if(otherImage.checked) {\n                                var name_split = otherImage.name.split('/');\n                                var image = {\n                                    icon: 'p-icon--status-queued',\n                                    title: otherImage.title,\n                                    arch: name_split[1],\n                                    size: '-',\n                                    status: 'Selected for download',\n                                    beingDeleted: false\n                                };\n                                var resource = getResource(\n                                    name_split[3], name_split[1]);\n                                if(angular.isObject(resource)) {\n                                    image.icon = (\n                                        'p-icon--status-' + resource.icon);\n                                    image.size = resource.size;\n                                    image.status = resource.status;\n                                    if(resource.downloading) {\n                                        image.icon += ' u-animation--pulse';\n                                    }\n                                }\n                                $scope.otherImages.push(image);\n                            }\n                        });\n\n                    // If not a new source and images remain in resources, then\n                    // those are set to be deleted.\n                    angular.forEach(resources, function(resource) {\n                        var image = {\n                            icon: 'p-icon--status-failed',\n                            title: resource.title,\n                            arch: resource.arch,\n                            size: resource.size,\n                            status: 'Will be deleted',\n                            beingDeleted: true\n                        };\n                        $scope.otherImages.push(image);\n                    });\n                };\n\n                // Helper for basic image generation.\n                $scope._regenerateImages = function(rtype, images) {\n                    // Create the generated images list.\n                    images.length = 0;\n                    angular.forEach($scope.bootResources.resources,\n                        function(resource) {\n                            if(resource.rtype === rtype) {\n                                var image = {\n                                    icon: 'p-icon--status-' + resource.icon,\n                                    title: resource.title,\n                                    arch: resource.arch,\n                                    image_id: resource.id,\n                                    size: resource.size,\n                                    status: resource.status\n                                };\n                                if(resource.downloading) {\n                                    image.icon += ' u-animation--pulse';\n                                }\n                                images.push(image);\n                            }\n                        });\n                };\n\n                // Regenerates the generated images list for the directive.\n                $scope.regenerateGeneratedImages = function() {\n                    $scope._regenerateImages(1, $scope.generatedImages);\n                };\n\n                // Regenerates the custom images list for the directive.\n                $scope.regenerateCustomImages = function() {\n                    $scope._regenerateImages(2, $scope.customImages);\n                };\n\n                // Returns true if at least one LTS is selected.\n                $scope.ltsIsSelected = function() {\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        // Must have LTS in the title and not being deleted.\n                        if(!$scope.ubuntuImages[i].beingDeleted &&\n                            $scope.ubuntuImages[i].title.indexOf('LTS') >= 0) {\n                            // Must be greater than Ubuntu series 14.\n                            var series = parseInt(\n                                $scope.ubuntuImages[i].title.split('.')[0], 10);\n                            if(series >= 14) {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                };\n\n                // Returns true if the commission series is selected\n                $scope.commissioningSeriesSelected = function() {\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if(!$scope.ubuntuImages[i].beingDeleted &&\n                           $scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n\n                // Return if we are asking about deleting this image.\n                $scope.isShowingDeleteConfirm = function(image) {\n                    return image === $scope.removingImage;\n                };\n\n                // Mark the image for deletion.\n                $scope.quickRemove = function(image) {\n                    $scope.removingImage = image;\n                };\n\n                // Cancel image deletion.\n                $scope.cancelRemove = function() {\n                    $scope.removingImage = null;\n                };\n\n                // Mark the image for deletion.\n                $scope.confirmRemove = function(image) {\n                    if(image === $scope.removingImage) {\n                        BootResourcesManager.deleteImage(\n                            {id: image.image_id});\n                    }\n                    $scope.cancelRemove();\n                };\n\n                // Return true if the stop import button should be shown.\n                $scope.showStopImportButton = function() {\n                    return $scope.bootResources.region_import_running;\n                };\n\n                // Return true if should show save selection button, this\n                // doesn't mean it can actually be clicked.\n                $scope.showSaveSelection = function() {\n                    return $scope.showImagesTable();\n                };\n\n                // Return true if can save the current selection.\n                $scope.canSaveSelection = function() {\n                    var commissioning_series_being_deleted = false;\n                    var commissioning_series_arches = 0;\n                    var i;\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if($scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series) {\n                            commissioning_series_arches++;\n                        }\n                    }\n                    // Only prevent the current commissioning series from\n                    // being deleted if it isn't the commissioning series isn't\n                    // available on another architecture.. If the current\n                    // commissioning series isn't currently selected another\n                    // LTS may be choosen, downloaded, and configured as the\n                    // commissioning series.\n                    for(i = 0; i < $scope.ubuntuImages.length; i++) {\n                        if($scope.ubuntuImages[i].beingDeleted &&\n                           $scope.ubuntuImages[i].name ===\n                           $scope.bootResources.ubuntu.commissioning_series &&\n                           commissioning_series_arches === 1) {\n                            commissioning_series_being_deleted = true;\n                            break;\n                        }\n                    }\n                    return (\n                        !commissioning_series_being_deleted &&\n                        !$scope.saving &&\n                        !$scope.stopping &&\n                        $scope.ltsIsSelected());\n                };\n\n                // Return the text for the save selection button.\n                $scope.getSaveSelectionText = function() {\n                    if($scope.saving) {\n                        return \"Saving...\";\n                    } else {\n                        return \"Update selection\";\n                    }\n                };\n\n                // Return true if can stop current import.\n                $scope.canStopImport = function() {\n                    return !$scope.saving && !$scope.stopping;\n                };\n\n                // Return the text for the stop import button.\n                $scope.getStopImportText = function() {\n                    if($scope.stopping) {\n                        return \"Stopping...\";\n                    } else {\n                        return \"Stop import\";\n                    }\n                };\n\n                // Called to stop the import.\n                $scope.stopImport = function() {\n                    if(!$scope.canStopImport()) {\n                        return;\n                    }\n\n                    $scope.stopping = true;\n                    BootResourcesManager.stopImport().then(function() {\n                        $scope.stopping = false;\n                    });\n                };\n\n                // Save the selections into boot selections.\n                $scope.saveSelection = function() {\n                    if(!$scope.canSaveSelection()) {\n                        return;\n                    }\n\n                    var params = $scope.getSourceParams();\n                    params.releases = (\n                        $scope.source.selections.releases.map(function(obj) {\n                            return obj.name;\n                        }));\n                    params.arches = (\n                        $scope.source.selections.arches.map(function(obj) {\n                            return obj.name;\n                        }));\n                    $scope.saving = true;\n                    BootResourcesManager.saveUbuntu(params).then(function() {\n                        $scope.saving = false;\n                        $scope.source.isNew = false;\n                        $scope.source.selections.changed = false;\n                        $scope.updateSource();\n                    });\n                };\n\n                // Re-create an array with the new objects using the old\n                // selected array.\n                $scope.getNewSelections = function(newObjs, oldSelections) {\n                    var newSelections = [];\n                    angular.forEach(newObjs, function(obj) {\n                        angular.forEach(oldSelections, function(selection) {\n                            if(obj.name === selection.name) {\n                                newSelections.push(obj);\n                            }\n                        });\n                    });\n                    return newSelections;\n                };\n\n                // Update the source information.\n                $scope.updateSource = function() {\n                    // Do not update if the source is new.\n                    if($scope.source.isNew) {\n                        return;\n                    }\n\n                    var source_len = $scope.bootResources.ubuntu.sources.length;\n                    if(source_len === 0) {\n                        $scope.source.isNew = true;\n                        $scope.source.source_type = 'custom';\n                        $scope.source.errorMessage = (\n                            \"Currently no source exists.\");\n                    } else if(source_len === 1) {\n                        var source = $scope.bootResources.ubuntu.sources[0];\n                        $scope.source.source_type = source.source_type;\n                        if(source.source_type === \"maas.io\") {\n                            $scope.source.url = \"\";\n                            $scope.source.keyring_filename = \"\";\n                            $scope.source.keyring_data = \"\";\n                        } else {\n                            $scope.source.url = source.url;\n                            $scope.source.keyring_filename = (\n                                source.keyring_filename);\n                            $scope.source.keyring_data = source.keyring_data;\n                        }\n                        $scope.source.releases = (\n                            $scope.bootResources.ubuntu.releases);\n                        $scope.source.arches = (\n                            $scope.bootResources.ubuntu.arches);\n                        if(!$scope.source.selections.changed) {\n                            // User didn't make a change update to the\n                            // current selections server side.\n                            $scope.source.selections.releases = (\n                                $scope.source.releases.filter(function(obj) {\n                                    return obj.checked;\n                                }));\n                            $scope.source.selections.arches = (\n                                $scope.source.arches.filter(function(obj) {\n                                return obj.checked;\n                            }));\n                        } else {\n                            // Update the objects to be the new objects, with\n                            // the same selections.\n                            $scope.source.selections.releases = (\n                                $scope.getNewSelections(\n                                    $scope.source.releases,\n                                    $scope.source.selections.releases));\n                            $scope.source.selections.arches = (\n                                $scope.getNewSelections(\n                                    $scope.source.arches,\n                                    $scope.source.selections.arches));\n                        }\n                        $scope.regenerateUbuntuImages();\n                    } else {\n                        // Having more than one source prevents modification\n                        // of the sources.\n                        $scope.source.tooMany = true;\n                        $scope.source.releases = (\n                            $scope.bootResources.ubuntu.releases);\n                        $scope.source.arches = (\n                            $scope.bootResources.ubuntu.arches);\n                        $scope.source.selections.releases = (\n                            $scope.source.releases.filter(function(obj) {\n                                return obj.checked;\n                            }));\n                        $scope.source.selections.arches = (\n                            $scope.source.arches.filter(function(obj) {\n                            return obj.checked;\n                        }));\n                        $scope.source.errorMessage = (\n                            \"More than one image source exists. UI does not \" +\n                            \"support modification of sources when more than \" +\n                            \"one has been defined. Used the API to adjust \" +\n                            \"your sources.\");\n                        $scope.regenerateUbuntuImages();\n                    }\n                };\n\n                // Toggle the selection of Ubuntu Core images.\n                $scope.toggleUbuntuCoreSelection = function(image) {\n                    $scope.ubuntu_core.changed = true;\n                    image.checked = !image.checked;\n                    $scope.regenerateUbuntuCoreImages();\n                };\n\n                // Save the Ubuntu Core image selections into boot selections.\n                $scope.saveUbuntuCoreSelection = function() {\n                    var params = {\n                        images: $scope.ubuntu_core.images.filter(function(\n                                image) {\n                            return image.checked;\n                        }).map(function(image) {\n                            return image.name;\n                        })\n                    };\n                    $scope.saving = true;\n                    BootResourcesManager.saveUbuntuCore(params).then(\n                            function() {\n                        $scope.saving = false;\n                    });\n                };\n\n                // Toggle the selection of other images.\n                $scope.toggleOtherSelection = function(image) {\n                    $scope.other.changed = true;\n                    image.checked = !image.checked;\n                    $scope.regenerateOtherImages();\n                };\n\n                // Save the other image selections into boot selections.\n                $scope.saveOtherSelection = function() {\n                    var params = {\n                        images: $scope.other.images.filter(function(image) {\n                            return image.checked;\n                        }).map(function(image) {\n                            return image.name;\n                        })\n                    };\n                    $scope.saving = true;\n                    BootResourcesManager.saveOther(params).then(function() {\n                        $scope.saving = false;\n                    });\n                };\n\n                // Return True if the Ubuntu image can be removed.\n                $scope.canBeRemoved = function(image) {\n                    // Image must have a resourceId to be able to be removed.\n                    if(!angular.isNumber(image.resourceId)) {\n                        return false;\n                    }\n\n                    // If the release or architecture is set to deleted\n                    // then this image can be deleted.\n                    var i;\n                    var releases = $scope.bootResources.ubuntu.releases;\n                    var arches = $scope.bootResources.ubuntu.arches;\n                    for(i = 0; i < releases.length; i++) {\n                        var release = releases[i];\n                        if(release.deleted && image.title === release.title) {\n                            return true;\n                        }\n                    }\n                    for(i = 0; i < arches.length; i++) {\n                        var arch = arches[i];\n                        if(arch.deleted && image.arch === arch.name) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n\n                // Deletes the give image.\n                $scope.deleteImage = function(image) {\n                    if(angular.isObject(image)) {\n                        $scope.ubuntuDeleteId = image.resourceId;\n                    } else {\n                        $scope.ubuntuDeleteId = null;\n                    }\n                };\n\n                // Deletes the give image.\n                $scope.confirmDeleteImage = function() {\n                    // Delete the image by its resourceId.\n                    BootResourcesManager.deleteImage(\n                        {id: $scope.ubuntuDeleteId});\n                    $scope.ubuntuDeleteId = null;\n                };\n\n                // Start polling now that the directive is viewable and ensure\n                // the UserManager is loaded.\n                var ready = 2;\n                BootResourcesManager.startPolling().then(function() {\n                    ready -= 1;\n                    if(ready === 0) {\n                        $scope.loading = false;\n                    }\n                });\n                ManagerHelperService.loadManager(\n                    $scope, UsersManager).then(function() {\n                    ready -= 1;\n                    if(ready === 0) {\n                        $scope.loading = false;\n                    }\n                });\n\n                // Update the source information with the ubuntu source\n                // information changes.\n                $scope.$watch(\"bootResources.ubuntu\", function() {\n                    if(!angular.isObject($scope.bootResources.ubuntu)) {\n                        return;\n                    }\n                    $scope.updateSource();\n                });\n\n                // Regenerate the images array when the resources change.\n                $scope.$watch(\"bootResources.resources\", function() {\n                    if(!angular.isArray($scope.bootResources.resources)) {\n                        return;\n                    }\n                    $scope.regenerateUbuntuImages();\n                    $scope.regenerateUbuntuCoreImages();\n                    $scope.regenerateOtherImages();\n                    $scope.regenerateGeneratedImages();\n                    $scope.regenerateCustomImages();\n                });\n\n                $scope.$watch(\"bootResources.ubuntu_core_images\", function() {\n                    var images = $scope.bootResources.ubuntu_core_images;\n                    if(!angular.isArray(images)) {\n                        return;\n                    }\n                    if(!$scope.ubuntu_core.changed) {\n                        $scope.ubuntu_core.images = images;\n                    }\n                    $scope.regenerateUbuntuCoreImages();\n                });\n\n                $scope.$watch(\"bootResources.other_images\", function() {\n                    if(!angular.isArray($scope.bootResources.other_images)) {\n                        return;\n                    }\n                    if(!$scope.other.changed) {\n                        $scope.other.images = $scope.bootResources.other_images;\n                    }\n                    $scope.regenerateOtherImages();\n                });\n\n                // Stop polling when the directive is destroyed.\n                $scope.$on('$destroy', function() {\n                    BootResourcesManager.stopPolling();\n                });\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Call to action directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the cta.html into the template cache.\n    $templateCache.put('directive/templates/cta.html', [\n      '<div class=\"p-contextual-menu\">',\n        '<button ',\n          'class=\"p-button p-contextual-menu__toggle\" ',\n          'aria-controls=\"#cta-menu\" ',\n          'aria-expanded=\"false\" ',\n          'aria-haspopup=\"true\" ',\n          'data-ng-click=\"shown=!shown\"',\n        '>',\n          '{$ getTitle() $}',\n          '<i class=\"p-icon--chevron on-right\"></i>',\n        '</button>',\n        '<div class=\"p-contextual-menu__dropdown\" ',\n          'id=\"cta-menu\" ',\n          'aria-hidden=\"false\" ',\n          'aria-label=\"submenu\"',\n          'data-ng-show=\"shown\"',\n        '>',\n          '<button ',\n            'class=\"',\n              'p-button u-no-margin--left p-contextual-menu__link',\n            '\" ',\n            'data-ng-repeat=\"select in maasCta\" ',\n            'data-ng-click=\"selectItem(select)\">',\n              '{$ getOptionTitle(select) $}',\n          '</button>',\n        '</div>',\n      '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasCta', function() {\n    return {\n        restrict: \"A\",\n        replace: true,\n        require: \"ngModel\",\n        scope: {\n            maasCta: '=',\n            ngModel: '='\n        },\n        templateUrl: 'directive/templates/cta.html',\n        link : function(scope, element, attrs, ngModelCtrl) {\n            // Use the link function to grab the ngModel controller.\n\n            // Title of the button when not active.\n            var defaultTitle = \"Take action\";\n            if(angular.isString(attrs.defaultTitle) &&\n                attrs.defaultTitle !== \"\") {\n                defaultTitle = attrs.defaultTitle;\n            }\n\n            // When an item is selected in the list set the title, hide the\n            // dropdown, and set the value to the given model.\n            scope.selectItem = function(select) {\n                scope.shown = false;\n                ngModelCtrl.$setViewValue(select);\n            };\n\n            // Return the title of the dropdown button.\n            scope.getTitle = function() {\n                if(angular.isObject(ngModelCtrl.$modelValue)) {\n                    option = ngModelCtrl.$modelValue;\n                    scope.secondary = true;\n                    // Some designs have the requirement that the title of\n                    // the menu option change if it is selected.\n                    if(angular.isString(option.selectedTitle)) {\n                        return option.selectedTitle;\n                    }\n                    return option.title;\n                } else {\n                    scope.secondary = false;\n                    return defaultTitle;\n                }\n            };\n\n            // Called to get the title for each option. (Sometimes the title\n            // of an option is different when it is selected.)\n            scope.getOptionTitle = function(option) {\n                if(!scope.secondary) {\n                    return option.title;\n                } else {\n                    if(angular.isString(option.selectedTitle)) {\n                        return option.selectedTitle;\n                    } else {\n                        return option.title;\n                    }\n                }\n            };\n\n            // When the model changes in the above selectItem function this\n            // function will be called causing the ngChange directive to be\n            // fired.\n            ngModelCtrl.$viewChangeListeners.push(function() {\n                scope.$eval(attrs.ngChange);\n            });\n        },\n        controller: function($scope, $rootScope, $element, $document) {\n            // Default dropdown is hidden.\n            $scope.shown = false;\n            $scope.secondary = false;\n\n            // Don't propagate the element click. This stops the click event\n            // from firing on the body element.\n            $element.bind('click', function (evt) {\n                evt.stopPropagation();\n            });\n\n            // If a click makes it to the body element then hide the dropdown.\n            $document.find('body').bind('click', function () {\n                // Use $apply because this function will be called outside\n                // of the digest cycle.\n                $rootScope.$apply($scope.shown = false);\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller status icon. Used in the controllers listing on the nodes page.\n */\n\nangular.module('MAAS').directive('maasCardLoader', ['$compile',\n  function($compile) {\n      return {\n          restrict: \"A\",\n          link: function(scope, element, attrs) {\n            var templateUrl = (\n                'static/partials/cards/' + attrs.maasCardLoader + (\n                  '.html?v=' + MAAS_config.files_version));\n            var include = (\n              '<ng-include src=\"\\'' + templateUrl + '\\'\"></ng-include>');\n            element.html(include);\n            $compile(element.contents())(scope);\n          }\n      };\n  }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Accordion directive.\n *\n * Provides an accordion effect to an element with maas-accordion class and\n * all child elements with maas-accordion-tab. Only one accordion tab is open\n * at a time, selecting another accordion will set \"active\" on that\n * accordion tab.\n */\n\n\n angular.module('MAAS').directive('maasCodeLines', function () {\n     return {\n         restrict: \"A\",\n         scope: {\n             maasCodeLines: '&'\n         },\n         link: function(scope, element, attributes) {\n\n             function insertContent() {\n\n                 // Empty the element contents and include again, this asures\n                 // its the most up-to-date content\n                 element.empty();\n                 element.text(scope.maasCodeLines);\n\n                 // Count the line contents\n                 var lines = element.html().split('\\n'),\n                     newLine = '',\n                     insert = \"<code>\";\n\n                 // Each line is to be wrapped by a span which is style & given\n                 // its appropriate line number\n                 $.each(lines, function() {\n                   insert += newLine + '<span class=\"code-line\">' +\n                   this + '</span>';\n                   newLine = '\\n';\n                 });\n                 insert += \"</code>\";\n\n                 // Re-insert the contents\n                 element.html(insert);\n             }\n\n             // Watch the contents of the element so when it changes to\n             // re-add the line numbers.\n             scope.$watch(scope.maasCodeLines, insertContent);\n         }\n     };\n });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Content editable directive.\n *\n * HTML provides a feature that allows any element to be editable with\n * contenteditable attribute. This directive uses that attribute to link\n * the contents of that element to a model. This directive is not prefixed\n * with maas so Angular can identify all elements with this attribute.\n */\n\n\nangular.module('MAAS').directive('contenteditable', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            ngDisabled: \"&\",\n            maasEditing: \"&\"\n        },\n        link: function(scope, element, attrs, ngModel) {\n\n            // If the element is disabled then make the element lose focus.\n            var focusHandler = function() {\n                if(scope.ngDisabled()) {\n                    element.blur();\n                } else {\n                    // Didn't lose focus, so its now editing.\n                    scope.$apply(scope.maasEditing());\n                }\n            };\n            element.bind(\"focus\", focusHandler);\n\n            // Update the value of the model when events occur that\n            // can change the value of the model.\n            var changeHandler = function() {\n                scope.$apply(ngModel.$setViewValue(element.text()));\n            };\n            element.bind(\"blur keyup change\", changeHandler);\n\n            // When the model changes set the html content for that element.\n            ngModel.$render = function() {\n                element.html(ngModel.$viewValue || \"\");\n            };\n\n            // When the model changes this function will be called causing the\n            // ngChange directive to be fired.\n            ngModel.$viewChangeListeners.push(function() {\n                scope.$eval(attrs.ngChange);\n            });\n\n            // Remove the event handler on the element when the scope is\n            // destroyed.\n            scope.$on(\"$destroy\", function() {\n                element.unbind(\"blur keyup change\", changeHandler);\n                element.unbind(\"focus\", focusHandler);\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller image status directive.\n *\n * Shows the image status for a controller.\n */\n\n angular.module('MAAS').service('ControllerImageStatusService',\n    ['$timeout', '$interval', 'ControllersManager', function(\n        $timeout, $interval, ControllersManager) {\n     var self = this;\n\n     // How often to check the sync status of a controller in seconds.\n     var CHECK_INTERVAL = 30;\n\n     // List of controllers that need to have the image status updated.\n     this.controllers = [];\n\n     // List of current controller statues.\n     this.statuses = {};\n\n     // Interval function that is called to update the statuses.\n     this.updateStatuses = function() {\n         var controllerIds = [];\n         angular.forEach(self.controllers, function(system_id) {\n             controllerIds.push({system_id: system_id});\n         });\n\n         // Check the image states.\n         ControllersManager.checkImageStates(controllerIds).then(\n                 function(results) {\n             angular.forEach(controllerIds, function(controller) {\n                 var status = results[controller.system_id];\n                 if(status) {\n                     self.statuses[controller.system_id] = status;\n                 } else {\n                     self.statuses[controller.system_id] = \"Unknown\";\n                 }\n             });\n         });\n     };\n\n     // Register this controller system_id.\n     this.register = function(system_id) {\n         var known = self.controllers.indexOf(system_id) >= 0;\n         if(!known) {\n             self.controllers.push(system_id);\n         }\n\n         // When the interval is already running and its a new controller then\n         // the interval needs to be reset. When it already exists it doesn't\n         // need to be reset.\n         if(angular.isDefined(self.runningInterval)) {\n             if(known) {\n                 return;\n             } else {\n                 $interval.cancel(self.runningInterval);\n                 self.runningInterval = undefined;\n             }\n         }\n\n         // If its not running and the timeout has been started we re-create\n         // the timeout. This delays the start of the interval until the\n         // all directives on the page have been fully loaded.\n         if(angular.isDefined(self.startTimeout)) {\n             $timeout.cancel(self.startTimeout);\n         }\n         self.startTimeout = $timeout(function() {\n             self.startTimeout = undefined;\n             self.runningInterval = $interval(function() {\n                 self.updateStatuses();\n             }, CHECK_INTERVAL * 1000);\n             self.updateStatuses();\n         }, 100);\n     };\n\n     // Unregister the controller.\n     this.unregister = function(system_id) {\n        var idx = self.controllers.indexOf(system_id);\n        if(idx > -1) {\n            self.controllers.splice(idx, 1);\n        }\n\n        // If no controllers are left stop all intervals and timeouts.\n        if(self.controllers.length === 0) {\n            if(angular.isDefined(self.startTimeout)) {\n                $timeout.cancel(self.startTimeout);\n                self.startTimeout = undefined;\n            }\n            if(angular.isDefined(self.runningInterval)) {\n                $interval.cancel(self.runningInterval);\n                self.runningInterval = undefined;\n            }\n        }\n     };\n\n     // Return true if the spinner should be shown.\n     this.showSpinner = function(system_id) {\n         var status = self.statuses[system_id];\n         if(angular.isString(status) && status !== \"Syncing\") {\n             return false;\n         } else {\n             return true;\n         }\n     };\n\n     // Get the image status.\n     this.getImageStatus = function(system_id) {\n         var status = self.statuses[system_id];\n         if(angular.isString(status)) {\n             return status;\n         } else {\n             return \"Asking for status...\";\n         }\n     };\n}]);\n\nangular.module('MAAS').directive('maasControllerImageStatus',\n    ['ControllerImageStatusService', function(\n        ControllerImageStatusService) {\n\n    return {\n        restrict: \"E\",\n        scope: {\n            systemId: \"=\"\n        },\n        template: [\n            '<i class=\"p-icon--loading u-animation--spin\"',\n                'data-ng-if=\"showSpinner()\"></i> ',\n            '{$ getImageStatus() $}'].join(''),\n        link: function(scope, element, attrs) {\n            // Don't register until the systemId is set.\n            var unwatch, registered = false;\n            unwatch = scope.$watch(\"systemId\", function() {\n                if(angular.isDefined(scope.systemId) && !registered) {\n                    ControllerImageStatusService.register(scope.systemId);\n                    registered = true;\n                    unwatch();\n                }\n            });\n\n            scope.showSpinner = function() {\n                return ControllerImageStatusService.showSpinner(\n                    scope.systemId);\n            };\n            scope.getImageStatus = function() {\n                return ControllerImageStatusService.getImageStatus(\n                    scope.systemId);\n            };\n\n            // Unregister when destroyed.\n            scope.$on(\"$destroy\", function() {\n                if(registered) {\n                    ControllerImageStatusService.unregister(scope.systemId);\n                }\n            });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Controller status icon. Used in the controllers listing on the nodes page.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the controller-status.html into the template cache.\n    $templateCache.put('directive/templates/controller-status.html', [\n        '<span>',\n          '<span class=\"p-icon--{$ serviceClass $}\" data-ng-if=\"!textOnly\">',\n          '</span>',\n          '<span data-ng-if=\"textOnly\" data-ng-bind=\"serviceText\"></span>',\n        '</span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasControllerStatus', [\n    \"ControllersManager\", \"ServicesManager\",\n    function(ControllersManager, ServicesManager) {\n        return {\n            restrict: \"A\",\n            scope: {\n                controller: '=maasControllerStatus',\n                textOnly: '=?maasTextOnly'\n            },\n            templateUrl: 'directive/templates/controller-status.html',\n            controller: function($scope) {\n\n                $scope.serviceClass = \"unknown\";\n                $scope.services = ServicesManager.getItems();\n                $scope.serviceText = \"\";\n                if($scope.textOnly) {\n                  $scope.textOnly = true;\n                } else {\n                  $scope.textOnly = false;\n                }\n\n                // Return the status class for the service.\n                function getClass(service) {\n                    if(service.status === \"running\") {\n                        return \"success\";\n                    } else if (service.status === \"degraded\") {\n                        return \"warning\";\n                    } else if (service.status === \"dead\") {\n                        return \"error\";\n                    } else {\n                        return \"unknown\";\n                    }\n                }\n\n                // Return the number of times class is displayed.\n                function countClass(classes, class_name) {\n                  var counter = 0;\n                  angular.forEach(classes, function(name) {\n                    if(name === class_name) {\n                      counter++;\n                    }\n                  });\n                  return counter;\n                }\n\n                // Update the class based on status of the services on the\n                // controller.\n                function updateStatusClass() {\n                    $scope.serviceClass = \"unknown\";\n                    if(angular.isObject($scope.controller)) {\n                        var services = ControllersManager.getServices(\n                            $scope.controller);\n                        if(services.length > 0) {\n                            var classes = services.map(getClass);\n                            if(classes.indexOf(\"error\") !== -1) {\n                                $scope.serviceClass = \"power-error\";\n                                $scope.serviceText = countClass(\n                                  classes, \"error\") + \" dead\";\n                            } else if(classes.indexOf(\"warning\") !== -1) {\n                                $scope.serviceClass = \"warning\";\n                                $scope.serviceText = countClass(\n                                  classes, \"warning\") + \" degraded\";\n                            } else {\n                                $scope.serviceClass = \"success\";\n                                $scope.serviceText = countClass(\n                                  classes, \"success\") + \" running\";\n                            }\n                        }\n                    }\n                }\n\n                // Watch the services array and the services on the controller,\n                // if any changes then update the status.\n                $scope.$watch(\"controller.service_ids\", updateStatusClass);\n                $scope.$watch(\"services\", updateStatusClass, true);\n\n                // Update on creation.\n                updateStatusClass();\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Double click overlay directive.\n *\n * Provides the ability for a disabled element to still accept the\n * double click event. By default if an element is disabled then it will\n * receive no click events. This overlays the element with another element\n * that will still receive click events.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the style for the maas-dbl-overlay class. We inject the style\n    // instead of placing it in maas-styles.css because it is required for\n    // this directive to work at all.\n    var styleElement = document.createElement('style');\n    styleElement.innerHTML = [\n        '.maas-dbl-overlay {',\n            'display: inline-block;',\n            'position: relative;',\n        '}',\n        '.maas-dbl-overlay--overlay {',\n            'position: absolute;',\n            'left: 0;',\n            'right: 0;',\n            'top: 0;',\n            'bottom: 0;',\n            '-webkit-touch-callout: none;',\n            '-webkit-user-select: none;',\n            '-khtml-user-select: none;',\n            '-moz-user-select: none;',\n            '-ms-user-select: none;',\n            'user-select: none;',\n        '}'\n    ].join('');\n    document.getElementsByTagName('head')[0].appendChild(styleElement);\n\n    // Inject the double_click_overlay.html into the template cache.\n    $templateCache.put('directive/templates/double_click_overlay.html', [\n        '<div class=\"maas-dbl-overlay\">',\n            '<span data-ng-transclude></span>',\n            '<div class=\"maas-dbl-overlay--overlay\"></div>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasDblClickOverlay', ['BrowserService',\n    function(BrowserService) {\n        return {\n            restrict: \"A\",\n            transclude: true,\n            replace: true,\n            scope: {\n                maasDblClickOverlay: '&'\n            },\n            templateUrl: 'directive/templates/double_click_overlay.html',\n            link: function(scope, element, attrs) {\n                // Create the click function that will be called when the\n                // overlay is clicked. This changes based on the element that\n                // is transcluded into this directive.\n                var overlay = element.find(\".maas-dbl-overlay--overlay\");\n                var transclude = element.find(\n                    \"span[data-ng-transclude]\").children()[0];\n                var clickElement;\n                if(transclude.tagName === \"SELECT\") {\n                    clickElement = function() {\n                        // Have to create a custom mousedown event for the\n                        // select click to be handled. Using 'click()' or\n                        //'focus()' will not work.\n                        var evt = document.createEvent('MouseEvents');\n                        evt.initMouseEvent(\n                            'mousedown', true, true, window, 0, 0, 0, 0, 0,\n                            false, false, false, false, 0, null);\n                        transclude.dispatchEvent(evt);\n                    };\n\n                    // Selects use a pointer for the cursor.\n                    overlay.css({ cursor: \"pointer\" });\n                } else if(transclude.tagName === \"INPUT\") {\n                    clickElement = function() {\n                        // An input will become in focus when clicked.\n                        angular.element(transclude).triggerHandler('focus');\n                    };\n\n                    // Inputs use a text for the cursor.\n                    overlay.css({ cursor: \"text\" });\n                } else {\n                    clickElement = function() {\n                        // Standard element just call click on that element.\n                        angular.element(transclude).triggerHandler('click');\n                    };\n\n                    // Don't set cursor on other element types.\n                }\n\n                // Add the click and double click handlers.\n                var overlayClick = function(evt) {\n                    clickElement();\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                };\n                var overlayDblClick = function(evt) {\n                    // Call the double click handler with in the scope.\n                    scope.$apply(scope.maasDblClickOverlay);\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                };\n\n                // Enable the handlers if not Firefox. It firefox, then hide\n                // the overlay as Firefox does not allow sending click events\n                // to select elements.\n                if(BrowserService.browser !== \"firefox\") {\n                    overlay.on(\"click\", overlayClick);\n                    overlay.on(\"dblclick\", overlayDblClick);\n                } else {\n                    overlay.addClass(\"ng-hide\");\n                }\n\n                // Remove the handlers when the scope is destroyed.\n                scope.$on(\"$destroy\", function() {\n                    overlay.off(\"click\", overlayClick);\n                    overlay.off(\"dblclick\", overlayDblClick);\n                });\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * OS/Release select directive.\n */\n\nangular.module('MAAS').directive('maasDefaultOsSelect', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            \"osInput\": \"@maasDefaultOsSelect\",\n            \"seriesInput\": \"@maasDefaultSeriesSelect\",\n        },\n        link: function($scope, $element, $attrs) {\n            var osElement = angular.element($element.find($scope.osInput));\n            var seriesElement = angular.element(\n                $element.find($scope.seriesInput));\n            if(!osElement || !seriesElement) {\n                throw new Error(\"Unable to find os or series elements\");\n            }\n\n            var selectVisableOption = function(options) {\n                var first_option = null;\n                angular.forEach(options, function(option) {\n                    option = angular.element(option);\n                    if(!option.hasClass('u-hide')) {\n                        if(first_option === null) {\n                            first_option = option;\n                        }\n                    }\n                });\n                if(first_option !== null) {\n                    seriesElement.val(first_option.val());\n                }\n            };\n\n            var modifyOption = function(option, newOSValue, initialSkip) {\n                var selected = false;\n                var value = option.val();\n                var split_value = value.split(\"/\");\n\n                // If \"Default OS\" is selected, then\n                // only show \"Default OS Release\".\n                if(newOSValue === '') {\n                    if(value === '') {\n                        option.removeClass('u-hide');\n                        option.attr('selected', 'selected');\n                    } else {\n                        option.addClass('u-hide');\n                    }\n                } else {\n                    if(split_value[0] === newOSValue) {\n                        option.removeClass('u-hide');\n                        if(split_value[1] === '' && !initialSkip) {\n                            selected = true;\n                            option.attr('selected', 'selected');\n                        }\n                    } else {\n                        option.addClass('u-hide');\n                    }\n                }\n                return selected;\n            };\n\n            var switchTo = function(newOSValue, initialSkip) {\n                var options = seriesElement.find('option');\n                var selected = false;\n                angular.forEach(options, function(option) {\n                    var sel = modifyOption(\n                        angular.element(option), newOSValue, initialSkip);\n                    if (selected === false) {\n                        selected = sel;\n                    }\n                });\n\n                // We skip selection on first load, as Django will already\n                // provide the users, current selection. Without this the\n                // current selection will be clobered.\n                if (initialSkip) {\n                    return;\n                }\n\n                // See if a selection was made, if not then we need\n                // to select the first visible as a default is not\n                // present.\n                if(!selected) {\n                    selectVisableOption(options);\n                }\n            };\n\n            // Call switchTo any time the os changes.\n            osElement.on('change', function(evt) {\n                switchTo(osElement.val(), false);\n            });\n\n            // Initialize the options.\n            switchTo(osElement.val(), true);\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n*/\n\nangular.module('MAAS').directive('maasEnter', function () {\n    return {\n        restrict: \"A\",\n        link: function (scope, element, attrs) {\n            element.bind(\"keydown keypress\", function (evt) {\n                if(evt.which === 13) {\n                    scope.$apply(function () {\n                        scope.$eval(attrs.maasEnter);\n                    });\n                    evt.preventDefault();\n                }\n            });\n        }\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Enter blur directive.\n *\n * When the enter key is pressed make the element lose focus (aka. blur event).\n */\n\n\nangular.module('MAAS').directive('maasEnterBlur', function() {\n    return {\n        restrict: \"A\",\n        link: function(scope, element, attrs) {\n            element.bind(\"keydown keypress\", function(evt) {\n                if(evt.which === 13) {\n                    element.blur();\n                    evt.preventDefault();\n                }\n            });\n        }\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Error overlay.\n *\n * Directive overrides the entire transcluded element if an error occurs or\n * connection to the region over the websocket fails or becomes disconnected.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the error_overlay.html into the template cache.\n    $templateCache.put('directive/templates/error_overlay.html', [\n        '<header id=\"error-header\" class=\"page-header\" data-ng-show=\"show()\">',\n            '<div class=\"row\">',\n                '<h1 class=\"page-header__title\">',\n                    '<span class=\"p-icon--loading u-animation--spin ',\n                        'u-margin--right-small\"',\n                        'data-ng-hide=\"clientError\"></span>',\n                    '{$ getTitle() $}',\n                '</h1>',\n                '<div class=\"page-header__controls\">',\n                    '<button class=\"button--secondary button--inline\"',\n                        'data-ng-click=\"reload()\"',\n                        'data-ng-show=\"clientError\">Reload</button>',\n                '</div>',\n                '<div class=\"page-header__dropdown is-open\" ',\n                    'data-ng-show=\"error\">',\n                    '<div class=\"page-header__section twelve-col',\n                        'u-margin--bottom-none\">',\n                        '<p class=\"page-header__message',\n                                  'page-header__message--error\">',\n                            '{$ error $}',\n                        '</p>',\n                    '</div>',\n                '</div>',\n            '</div>',\n        '</header>',\n        '<div class=\"ng-hide u-no-margin--top\" data-ng-hide=\"show()\">',\n            '<div data-ng-transclude></div>',\n        '</div>'\n    ].join(''));\n\n    // Preload the svg and png error icon. Its possible that it has never been\n    // loaded by the browser and if the region connection goes down and the\n    // directive gets shown with an error the icon will be missing.\n    //\n    // Note: This is skipped if unit testing because it will throw 404 errors\n    // continuously.\n    if(!angular.isDefined(window.jasmine)) {\n        var image = new Image();\n        image.src = \"static/assets/images/icons/error.svg\";\n        image = new Image();\n        image.src = \"static/assets/images/icons/error.png\";\n    }\n}]);\n\nangular.module('MAAS').directive('maasErrorOverlay', [\n    '$window', '$timeout', 'RegionConnection', 'ErrorService',\n    function($window, $timeout, RegionConnection, ErrorService) {\n        return {\n            restrict: \"A\",\n            transclude: true,\n            scope: true,\n            templateUrl: 'directive/templates/error_overlay.html',\n            link: function(scope, element, attrs) {\n\n                scope.connected = false;\n                scope.showDisconnected = false;\n                scope.clientError = false;\n                scope.wasConnected = false;\n\n                // Holds the promise that sets showDisconnected to true. Will\n                // be cleared when the scope is destroyed.\n                var markDisconnected;\n\n                // Returns true when the overlay should be shown.\n                scope.show = function() {\n                    // Always show if clientError.\n                    if(scope.clientError) {\n                        return true;\n                    }\n                    // Never show if connected.\n                    if(scope.connected) {\n                        return false;\n                    }\n                    // Never been connected then always show.\n                    if(!scope.wasConnected) {\n                        return true;\n                    }\n                    // Not connected.\n                    return scope.showDisconnected;\n                };\n\n                // Returns the title for the header.\n                scope.getTitle = function() {\n                    if(scope.clientError) {\n                        return \"Error occurred\";\n                    } else if(scope.wasConnected) {\n                        return \"Connection lost, reconnecting...\";\n                    } else {\n                        return \"Connecting...\";\n                    }\n                };\n\n                // Called to reload the page.\n                scope.reload = function() {\n                    $window.location.reload();\n                };\n\n                // Called to when the connection status of the region\n                // changes. Updates the scope connected and error values.\n                var watchConnection = function() {\n                    // Do nothing if already a client error.\n                    if(scope.clientError) {\n                        return;\n                    }\n\n                    // Set connected and the time it changed.\n                    var connected = RegionConnection.isConnected();\n                    if(connected !== scope.connected) {\n                        scope.connected = connected;\n                        if(!connected) {\n                            scope.showDisconnected = false;\n\n                            // Show disconnected after 1/2 second. This removes\n                            // the flicker that can occur, if it disconnecets\n                            // and reconnected quickly.\n                            markDisconnected = $timeout(function() {\n                                scope.showDisconnected = true;\n                                markDisconnected = undefined;\n                            }, 500);\n                        }\n                    }\n\n                    // Set error and whether of not the connection\n                    // has ever been made.\n                    scope.error = RegionConnection.error;\n                    if(!scope.wasConnected && connected) {\n                        scope.wasConnected = true;\n                    }\n                };\n\n                // Watch the isConnected and error value on the\n                // RegionConnection.\n                scope.$watch(function() {\n                    return RegionConnection.isConnected();\n                }, watchConnection);\n                scope.$watch(function() {\n                    return RegionConnection.error;\n                }, watchConnection);\n\n                // Called then the error value on the ErrorService changes.\n                var watchError = function() {\n                    var error = ErrorService._error;\n                    if(angular.isString(error)) {\n                        scope.clientError = true;\n                        scope.error = ErrorService._error;\n                    }\n                };\n\n                // Watch _error on the ErrorService.\n                scope.$watch(function() {\n                    return ErrorService._error;\n                }, watchError);\n\n                // Cancel the timeout on scope destroy.\n                scope.$on(\"$destroy\", function() {\n                    if(angular.isDefined(markDisconnected)) {\n                        $timeout.cancel(markDisconnected);\n                    }\n                });\n            }\n        };\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Error toggle.\n *\n * Hides the element if an error occurs or no connection to the region\n * is present.\n */\n\nangular.module('MAAS').directive('maasErrorToggle', [\n    '$timeout', 'RegionConnection', 'ErrorService',\n    function($timeout, RegionConnection, ErrorService) {\n        return {\n            restrict: \"A\",\n            link: function(scope, element, attrs) {\n\n                // Holds timeout promise for setting ng-hide when\n                // connection is lost.\n                var disconnectedPromise;\n\n                // Cancel the disconnected timeout.\n                var cancelTimeout = function() {\n                    if(angular.isDefined(disconnectedPromise)) {\n                        $timeout.cancel(disconnectedPromise);\n                        disconnectedPromise = undefined;\n                    }\n                };\n\n                // Called to when the connection status of the region\n                // changes or the error on the ErrorService is set.\n                // The element is shown when connected and no errors.\n                var watchConnectionAndError = function() {\n                    var connected = RegionConnection.isConnected();\n                    var error = ErrorService._error;\n                    if(connected && !angular.isString(error)) {\n                        cancelTimeout();\n                        element.removeClass(\"ng-hide\");\n                    } else if(angular.isString(error)) {\n                        cancelTimeout();\n                        element.addClass(\"ng-hide\");\n                    } else if(!connected) {\n                        // Hide the element after 1/2 second. This stops\n                        // flickering when the connection goes down and\n                        // reconnects quickly.\n                        cancelTimeout();\n                        disconnectedPromise = $timeout(function() {\n                            element.addClass(\"ng-hide\");\n                        }, 500);\n                    }\n                };\n\n                // Watch the RegionConnection.isConnected() and\n                // ErrorService._error value.\n                scope.$watch(function() {\n                    return RegionConnection.isConnected();\n                }, watchConnectionAndError);\n                scope.$watch(function() {\n                    return ErrorService._error;\n                }, watchConnectionAndError);\n\n                // Cancel disconnect timeout on destroy.\n                scope.$on(\"$destroy\", function() {\n                    cancelTimeout();\n                });\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * IP Ranges directive.\n*/\n\nangular.module('MAAS').directive('maasIpRanges', [\n    '$filter', 'IPRangesManager', 'UsersManager',\n    'ManagerHelperService', 'ConverterService', function(\n        $filter, IPRangesManager, UsersManager, ManagerHelperService,\n        ConverterService) {\n        return {\n            restrict: \"E\",\n            scope: {\n                subnet: \"=\",\n                vlan: \"=\"\n            },\n            templateUrl: (\n                'static/partials/ipranges.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.ipranges = IPRangesManager.getItems();\n                $scope.iprangeManager = IPRangesManager;\n                $scope.newRange = null;\n                $scope.editIPRange = null;\n                $scope.deleteIPRange = null;\n\n                // Return true if the authenticated user is super user.\n                $scope.isSuperUser = function() {\n                    return UsersManager.isSuperUser();\n                };\n\n                // Called to start adding a new IP range.\n                $scope.addRange = function(type) {\n                    $scope.newRange = {\n                        type: type,\n                        start_ip: \"\",\n                        end_ip: \"\",\n                        comment: \"\"\n                    };\n                    if(angular.isObject($scope.subnet)) {\n                        $scope.newRange.subnet = $scope.subnet.id;\n                    }\n                    if(angular.isObject($scope.vlan)) {\n                        $scope.newRange.vlan = $scope.vlan.id;\n                    }\n                    if(type === \"dynamic\") {\n                        $scope.newRange.comment = \"Dynamic\";\n                    }\n                };\n\n                // Cancel adding the new IP range.\n                $scope.cancelAddRange = function() {\n                    $scope.newRange = null;\n                };\n\n                // Return true if the IP range can be modified by the\n                // authenticated user.\n                $scope.ipRangeCanBeModified = function(range) {\n                    if($scope.isSuperUser()) {\n                        return true;\n                    } else {\n                        // Can only modify reserved and same user.\n                        return (\n                            range.type === \"reserved\" &&\n                            range.user === UsersManager.getAuthUser().id);\n                    }\n                };\n\n                // Return true if the IP range is in edit mode.\n                $scope.isIPRangeInEditMode = function(range) {\n                    return $scope.editIPRange === range;\n                };\n\n                // Toggle edit mode for the IP range.\n                $scope.ipRangeToggleEditMode = function(range) {\n                    $scope.deleteIPRange = null;\n                    if($scope.isIPRangeInEditMode(range)) {\n                        $scope.editIPRange = null;\n                    } else {\n                        $scope.editIPRange = range;\n                    }\n                };\n\n                // Clear edit mode for the IP range.\n                $scope.ipRangeClearEditMode = function() {\n                    $scope.editIPRange = null;\n                };\n\n                // Return true if the IP range is in delete mode.\n                $scope.isIPRangeInDeleteMode = function(range) {\n                    return $scope.deleteIPRange === range;\n                };\n\n                // Enter delete mode for the IP range.\n                $scope.ipRangeEnterDeleteMode = function(range) {\n                    $scope.editIPRange = null;\n                    $scope.deleteIPRange = range;\n                };\n\n                // Exit delete mode for the IP range.\n                $scope.ipRangeCancelDelete = function() {\n                    $scope.deleteIPRange = null;\n                };\n\n                // Perform the delete operation on the IP range.\n                $scope.ipRangeConfirmDelete = function() {\n                    IPRangesManager.deleteItem(\n                        $scope.deleteIPRange).then(function() {\n                            $scope.deleteIPRange = null;\n                    });\n                };\n\n                // Sort ranges by starting IP address.\n                $scope.ipRangeSort = function(range) {\n                    if(range.start_ip.indexOf(':') !== -1) {\n                        return ConverterService.ipv6Expand(range.start_ip);\n                    } else {\n                        return ConverterService.ipv4ToInteger(range.start_ip);\n                    }\n                };\n\n                // Load the reqiured managers.\n                ManagerHelperService.loadManagers($scope, [\n                    IPRangesManager, UsersManager]).then(\n                        function() {\n                            $scope.loading = false;\n                        });\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Login button for external authentication.\n */\n\nangular.module('MAAS').factory('getBakery', function() {\n    return function(visitPage) {\n        return new Bakery(\n            new WebHandler(),\n            new BakeryStorage(localStorage, {}), {visitPage: visitPage});\n    };\n}).directive('externalLogin', ['$window', 'getBakery',\n                               function($window, getBakery) {\n    return {\n        restrict: 'E',\n        scope: {},\n        template: [\n            '<a target=\"_blank\" class=\"p-button--positive\"',\n            '    href=\"{{ loginURL }}\"',\n            '    title=\"Login through {{ externalAuthURL }}\">',\n            '  Go to login page',\n            '</a>',\n            '<div id=\"login-error\" class=\"p-form-validation__message\"',\n            '    ng-if=\"errorMessage\">',\n            '  <strong>Error getting login link:</strong><br>',\n            '  {{ errorMessage }}',\n            '</div>',\n        ].join(''),\n        controller: function($scope, $rootScope, $element, $document) {\n            $scope.errorMessage = '';\n            $scope.loginURL = '#';\n            $scope.externalAuthURL = $element.attr('auth-url');\n\n            const visitPage = function(error) {\n                $scope.$apply(function() {\n                    $scope.loginURL =  error.Info.VisitURL;\n                    $scope.errorMessage = '';\n                });\n            }\n            const bakery = getBakery(visitPage);\n            const nextPath = $element.attr('next-path');\n            bakery.get(\n                '/MAAS/accounts/discharge-request/',\n                {'Accept': 'application/json',\n                 'Content-Type': 'application/json'},\n                function(error, response) {\n                    if (response.currentTarget.status != 200) {\n                        $scope.$apply(function() {\n                            $scope.errorMessage = (\n                                response.currentTarget.responseText);\n                        });\n                    } else {\n                        $window.location.replace(nextPath);\n                    }\n                });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS object directive.\n *\n * Directive that connects a field to an object from the websocket. The field\n * is an instant save on blur.\n */\n\nangular.module('MAAS').directive('maasObjForm', ['JSONService',\n    function(JSONService) {\n        function MAASFormController(scope) {\n            this.obj = scope.obj;\n            this.manager = scope.manager;\n            this.fields = {};\n            this.scope = scope;\n            this.scope.saving = false;\n            this.scope.savingKeys = [];\n            if(angular.isObject(this.scope.obj)) {\n                this.scope.obj.$maasForm = this;\n            }\n\n            // Set the managerMethod.\n            this.managerMethod = scope.managerMethod;\n            if(angular.isUndefined(this.managerMethod)) {\n                this.managerMethod = \"updateItem\";\n            }\n\n            var self = this;\n            scope.$watch(\"obj\", function() {\n                // Update the object when it changes.\n                self.obj = scope.obj;\n                if(angular.isObject(self.obj)) {\n                    self.obj.$maasForm = self;\n                }\n            });\n            scope.$on(\"$destroy\", function() {\n                // Remove the $maasForm from the object when directive is\n                // deleted.\n                if(angular.isObject(self.obj)) {\n                    delete self.obj.$maasForm;\n                }\n            });\n        }\n\n        // Get the current value for a field in the form.\n        MAASFormController.prototype.getValue = function (key) {\n            var field = this.fields[key];\n            if(angular.isObject(field) && angular.isObject(field.scope)) {\n                return field.scope.getValue();\n            }\n        };\n\n        // Update the current value for a field in the form.\n        MAASFormController.prototype.updateValue = function (key, value) {\n            var field = this.fields[key];\n            if(angular.isObject(field) && angular.isObject(field.scope)) {\n                return field.scope.updateValue(value);\n            }\n        };\n\n        // Clone the current object for this form without the $maasForm\n        // property set.\n        MAASFormController.prototype.cloneObject = function() {\n            if(!angular.isObject(this.obj)) {\n                return this.obj;\n            } else {\n                delete this.obj.$maasForm;\n                var clonedObj = angular.copy(this.obj);\n                this.obj.$maasForm = this;\n                return clonedObj;\n            }\n        };\n\n        // Return true if table form.\n        MAASFormController.prototype.isTableForm = function () {\n            if(angular.isUndefined(this.scope.tableForm)) {\n                // Default is not a table form.\n                return false;\n            } else {\n                return this.scope.tableForm;\n            }\n        };\n\n        // Return true if the form should be saved on blur.\n        MAASFormController.prototype.saveOnBlur = function() {\n            if(angular.isUndefined(this.scope.saveOnBlur)) {\n                // Default is save on blur.\n                return true;\n            } else {\n                return this.scope.saveOnBlur;\n            }\n        };\n\n        // Return true if the form is saving this field.\n        MAASFormController.prototype.isSaving = function(key) {\n            return (\n                this.scope.saving && this.scope.savingKeys.indexOf(key) >= 0);\n        };\n\n        // Return true if the input should show the saving spinner. This is\n        // only show on inputs in forms that are using save on blur.\n        MAASFormController.prototype.showInputSaving = function(key) {\n            return this.saveOnBlur() && this.isSaving(key);\n        };\n\n        // Return true if any field in the form as an error.\n        MAASFormController.prototype.hasErrors = function() {\n            var hasErrors = false;\n            angular.forEach(this.fields, function(field) {\n                if(field.scope.hasErrors()) {\n                    hasErrors = true;\n                }\n            });\n            if(angular.isDefined(this.errorScope)) {\n                if(this.errorScope.hasErrors()) {\n                    hasErrors = true;\n                }\n            }\n            return hasErrors;\n        };\n\n        // Called by maas-obj-field to register it as a editable field.\n        MAASFormController.prototype.registerField = function(key, scope) {\n            // Store the state of the field and its scope.\n            this.fields[key] = {\n                editing: false,\n                scope: scope\n            };\n\n            // Watch for changes on the value of the object.\n            var self = this;\n            this.scope.$watch(\"obj.\" + key, function() {\n                if(angular.isObject(self.obj) && !self.fields[key].editing) {\n                    self.fields[key].scope.updateValue(self.obj[key]);\n                }\n            });\n\n            // Return the current value for the field.\n            if(angular.isObject(this.obj)) {\n                return this.obj[key];\n            } else {\n                return null;\n            }\n        };\n\n        // Called by maas-obj-field to unregister it as a editable field.\n        MAASFormController.prototype.unregisterField = function(key) {\n            delete this.fields[key];\n        };\n\n        // Called by maas-obj-field to place field in edit mode.\n        MAASFormController.prototype.startEditingField = function(key) {\n            this.fields[key].editing = true;\n        };\n\n        // Called by maas-obj-field to end edit mode for the field.\n        MAASFormController.prototype.stopEditingField = function(key, value) {\n            var field = this.fields[key];\n\n            // Do nothing if not save on blur.\n            if(!this.saveOnBlur()) {\n                field.editing = false;\n                return;\n            }\n\n            // Clear errors before saving.\n            field.scope.clearErrors();\n\n            // Copy the object and update the editing field.\n            var updatedObj = this.cloneObject();\n            updatedObj[key] = value;\n            if(updatedObj[key] === this.obj[key]) {\n                // Nothing changed.\n                field.editing = false;\n                return;\n            }\n\n            // Update the item in the manager.\n            this.scope.saving = true;\n            this.scope.savingKeys = [key];\n            this.updateItem(updatedObj, [key]);\n        };\n\n        // Update the item using the manager.\n        MAASFormController.prototype.updateItem = function(updatedObj, keys) {\n            var key = keys[0];\n            var field = this.fields[key];\n            var self = this;\n\n            // Pre-process the updatedObj if one is defined.\n            if(angular.isFunction(this.scope.preProcess)) {\n                updatedObj = this.scope.preProcess(updatedObj, keys);\n            }\n\n            // Update the item with the manager.\n            return this.manager[this.managerMethod](\n                updatedObj).then(function(newObj) {\n                    // Update the value of the element.\n                    field.editing = false;\n                    field.scope.updateValue(newObj[key]);\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    if(angular.isFunction(self.scope.afterSave)) {\n                        self.scope.afterSave(newObj);\n                    }\n                    return newObj;\n                }, function(error) {\n                    var errorJson = JSONService.tryParse(error);\n                    if(angular.isObject(errorJson)) {\n                        // Add the error to each field it matches.\n                        angular.forEach(errorJson, function(value, key) {\n                            var errorField = self.fields[key];\n                            if(!angular.isArray(value)) {\n                                value = [value];\n                            }\n\n                            if(angular.isObject(errorField)) {\n                                // Error on a field we know about, place the\n                                // error on that field.\n                                errorField.scope.setErrors(value);\n                            } else {\n                                // Error on a field we don't know about, place\n                                // the error on the editing field. Prefixing\n                                // the error with the field.\n                                if(key !== \"__all__\") {\n                                    value = value.map(function(v) {\n                                        return key + \": \" + v;\n                                    });\n                                }\n                                field.scope.setErrors(value);\n                            }\n                        });\n                    } else {\n                        // Add the string error to just the field error.\n                        field.scope.setErrors([error]);\n                    }\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    return error;\n                });\n        };\n\n        // Called when saveOnBlur is false to save the whole form.\n        MAASFormController.prototype.saveForm = function () {\n            var keys = [];\n            var updatedObj = this.cloneObject();\n            angular.forEach(this.fields, function(value, key) {\n                value.scope.clearErrors();\n                var newValue = value.scope.getValue();\n                if(angular.isDefined(newValue) &&\n                    updatedObj[key] !== newValue) {\n                    updatedObj[key] = newValue;\n                    keys.push(key);\n                }\n            });\n\n\n            // Pre-process the updatedObj if one is defined.\n            if(angular.isFunction(this.scope.preProcess)) {\n                updatedObj = this.scope.preProcess(updatedObj, keys);\n            }\n\n            // Clear the errors on the errorScope before save.\n            if(angular.isDefined(this.errorScope)) {\n                this.errorScope.clearErrors();\n            }\n\n            var self = this;\n            this.scope.saving = true;\n            this.scope.savingKeys = keys;\n            return this.manager[this.managerMethod](\n                updatedObj).then(function(newObj) {\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    if(angular.isFunction(self.scope.afterSave)) {\n                        self.scope.afterSave(newObj);\n                    }\n                    return newObj;\n                }, function(error) {\n                    var errorJson = JSONService.tryParse(error);\n                    if(angular.isObject(errorJson)) {\n                        // Add the error to each field it matches.\n                        angular.forEach(errorJson, function(value, key) {\n                            var errorField = self.fields[key];\n                            if(!angular.isArray(value)) {\n                                value = [value];\n                            }\n\n                            if(angular.isObject(errorField)) {\n                                // Error on a field we know about, place the\n                                // error on that field.\n                                errorField.scope.setErrors(value);\n                            } else {\n                                if(key !== \"__all__\") {\n                                    value = value.map(function(v) {\n                                        return key + \": \" + v;\n                                    });\n                                }\n                                // Error on a field we don't know about, place\n                                // the error on errorScope if set.\n                                if(angular.isDefined(self.errorScope)) {\n                                    self.errorScope.setErrors(value);\n                                } else {\n                                    // No error scope, just log to console.\n                                    console.log(value);\n                                }\n                            }\n                        });\n                    } else {\n                        // Add the string error to just the field error.\n                        if(angular.isDefined(self.errorScope)) {\n                            self.errorScope.setErrors([error]);\n                        } else {\n                            // No error scope, just log to console.\n                            console.log(error);\n                        }\n                    }\n                    self.scope.saving = false;\n                    self.scope.savingKeys = [];\n                    return error;\n                });\n        };\n\n        return {\n            restrict: \"E\",\n            scope: {\n                obj: \"=\",\n                manager: \"=\",\n                managerMethod: \"@\",\n                preProcess: \"=\",\n                afterSave: \"=\",\n                tableForm: \"=\",\n                saveOnBlur: \"=\",\n                inline: \"=\",\n                ngDisabled: \"&\"\n            },\n            transclude: true,\n            template: (\n                '<form class=\"p-form\" data-ng-class=\"{saving: saving, ' +\n                '\\'p-form--inline\\': inline, ' +\n                '\\'p-form--stacked\\': tableForm}\" ' +\n                'ng-transclude></form>'),\n            controller: ['$scope', MAASFormController]\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjFieldGroup', ['JSONService',\n    function(JSONService) {\n        // Controller for this directive.\n        function MAASGroupController(scope, timeout) {\n            this.fields = {};\n            this.scope = scope;\n            this.scope.saving = false;\n            this.scope.savingKeys = [];\n            this.timeout = timeout;\n\n            var self = this;\n            this.scope.isEditing = function() {\n                var editing = false;\n                angular.forEach(self.fields, function(value) {\n                    if(!editing) {\n                        editing = value.editing;\n                    }\n                });\n                return editing;\n            };\n        }\n\n        // Return true if table form.\n        MAASGroupController.prototype.isTableForm = function () {\n            return this.formController.isTableForm();\n        };\n\n        // Return true if should save on blur.\n        MAASGroupController.prototype.saveOnBlur = function () {\n            return this.formController.saveOnBlur();\n        };\n\n        // Return true if group is saving.\n        MAASGroupController.prototype.isSaving = function(key) {\n            return (\n                this.scope.saving && this.scope.savingKeys.indexOf(key) >= 0);\n        };\n\n        // Return true if the input should show the saving spinner. This is\n        // only show on inputs in forms that are using save on blur.\n        MAASGroupController.prototype.showInputSaving = function(key) {\n            // In a group we say the entire group is saving, not just that\n            // one key in the field is being saved.\n            return this.saveOnBlur() && this.scope.saving;\n        };\n\n        // Called by maas-obj-field to register it as a editable field.\n        MAASGroupController.prototype.registerField = function(key, scope) {\n            // Store the state of the field and its scope.\n            this.fields[key] = {\n                editing: false,\n                scope: scope\n            };\n            return this.formController.registerField(key, scope);\n        };\n\n        // Called by maas-obj-field to unregister it as a editable field.\n        MAASGroupController.prototype.unregisterField = function(key) {\n            delete this.fields[key];\n            this.formController.unregisterField(key);\n        };\n\n        // Called by maas-obj-field to place field in edit mode.\n        MAASGroupController.prototype.startEditingField = function(key) {\n            this.fields[key].editing = true;\n\n            // Set all fields in the group as editing in the formController.\n            var self = this;\n            angular.forEach(this.fields, function(value, key) {\n                self.formController.startEditingField(key);\n            });\n        };\n\n        // Called by maas-obj-field to exit edit mode for the field.\n        MAASGroupController.prototype.stopEditingField = function(key, value) {\n            var field = this.fields[key];\n            field.editing = false;\n\n            // Exit early if not save on blur.\n            if(!this.saveOnBlur()) {\n                return;\n            }\n\n            // Delay the handling of stop to make sure start is not called on\n            // the next field in the group.\n            var self = this;\n            this.timeout(function() {\n                // If any other fields are in edit mode then nothing to do.\n                var editing = false;\n                angular.forEach(self.fields, function(value) {\n                    if(!editing) {\n                        editing = value.editing;\n                    }\n                });\n                if(editing) {\n                    return;\n                }\n\n                // Copy the object and update the editing fields.\n                var keys = [];\n                var changed = false;\n                var updatedObj = self.formController.cloneObject();\n                angular.forEach(self.fields, function(value, key) {\n                    value.scope.clearErrors();\n                    var newValue = value.scope.getValue();\n                    if(angular.isDefined(newValue) &&\n                        updatedObj[key] !== newValue) {\n                        keys.push(key);\n                        updatedObj[key] = newValue;\n                        changed = true;\n                    }\n                });\n                if(!changed) {\n                    return;\n                }\n\n                // Place the field that actually triggered the update first.\n                var keyIdx = keys.indexOf(key);\n                if(keyIdx !== -1) {\n                    keys.splice(keyIdx, 1);\n                    keys.splice(0, 0, key);\n                }\n\n                // Save the object.\n                self.scope.saving = true;\n                self.scope.savingKeys = keys;\n                self.formController.updateItem(updatedObj, keys).then(\n                    function(obj) {\n                      self.scope.saving = false;\n                      self.scope.savingKeys = [];\n                      return obj;\n                  }, function(error) {\n                      self.scope.saving = false;\n                      self.scope.savingKeys = [];\n                      return error;\n                  });\n            }, 10); // Really short has to be next click.\n        };\n\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\", \"maasObjFieldGroup\"],\n            scope: {},\n            transclude: true,\n            template: (\n                '<div class=\"form__siblings\" ' +\n                'data-ng-class=\"{\\'is-active\\': isEditing()}\" ' +\n                'data-ng-transclude></div>'),\n            controller: ['$scope', '$timeout', MAASGroupController],\n            link: {\n                pre: function(scope, element, attrs, controllers) {\n                    // Set formController on the MAASGroupController to\n                    // point to its parent MAASFormController. This is done in\n                    // pre-link so the controller has the formController before\n                    // registerField is called.\n                    controllers[1].formController = controllers[0];\n\n                    // Set ngDisabled on this scope from the form controller.\n                    scope.ngDisabled = controllers[0].scope.ngDisabled;\n\n                    // Set the object to always be the same on the scope.\n                    controllers[0].scope.$watch(\"obj\", function(obj) {\n                        scope.obj = obj;\n                    });\n                }\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjField', ['$compile',\n    function($compile) {\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\", \"?^^maasObjFieldGroup\"],\n            scope: {\n                onChange: \"=\",\n                subtleText: \"@\"\n            },\n            transclude: true,\n            template: (\n                '<div data-ng-transclude></div>'),\n            link: function(scope, element, attrs, controllers) {\n                // Select the controller based on which is available.\n                var controller = controllers[1];\n                if(!angular.isObject(controller)) {\n                    controller = controllers[0];\n                }\n\n                // Set ngDisabled from the parent controller.\n                scope.ngDisabled = controller.scope.ngDisabled;\n\n                element.addClass(\"p-form__group\");\n                if(attrs.subtle !== \"false\") {\n                    element.addClass(\"form__group--subtle\");\n                }\n\n                // type and key required.\n                var missingAttrs = [];\n                if(!angular.isString(attrs.type) || attrs.type.length === 0) {\n                    missingAttrs.push(\"type\");\n                }\n                if(!angular.isString(attrs.key) || attrs.key.length === 0) {\n                    missingAttrs.push(\"key\");\n                }\n                if(missingAttrs.length > 0) {\n                    throw new Error(\n                        missingAttrs.join(\", \") +\n                        \" are required on maas-obj-field.\");\n                }\n                if(angular.isString(attrs.disabled)) {\n                    scope.ngDisabled = function() { return true; };\n                }\n\n                // Remove transcluded element.\n                element.find(\"div\").remove();\n\n                // Render the label.\n                var label = attrs.label || attrs.key;\n\n                if(attrs.disableLabel !== \"true\" &&\n                        !(attrs.type === \"hidden\")) {\n                    var labelElement = angular.element('<label/>');\n                    labelElement.attr('for', attrs.key);\n                    labelElement.text(label);\n                    labelElement.addClass('p-form__label');\n                    if(attrs.labelWidth) {\n                        labelElement.addClass(\"col-\" + attrs.labelWidth);\n                    } else {\n                        labelElement.addClass(\"u-margin--right\");\n                    }\n                    if(attrs.labelLeft === \"true\") {\n                        labelElement.addClass('u-padding--left');\n                        labelElement.addClass('u-position--relative');\n                    }\n                    element.append(labelElement);\n\n                    // Add a label info icon with tooltip.\n                    if(angular.isString(attrs.labelInfo)\n                            && attrs.labelInfo.length > 0) {\n                        var infoWrapper = angular.element(\n                            '<span>&nbsp;</span>');\n                        infoWrapper.addClass('p-tooltip p-tooltip--btm-right');\n\n                        var infoIcon = angular.element('<i/>');\n                        infoIcon.addClass('p-icon--information');\n                        infoIcon.attr(\n                            'aria-describedby', attrs.key + '-tooptip');\n\n                        var infoTooltip = angular.element('<p></p>');\n                        infoTooltip.addClass('p-tooltip__message');\n                        infoTooltip.text(attrs.labelInfo);\n                        infoTooltip.attr('id', attrs.key + '-tooptip');\n\n                        infoWrapper.append(infoIcon);\n                        infoWrapper.append(infoTooltip);\n\n                        labelElement.append(infoWrapper);\n\n                        // prevents the icon from being clickable\n                        infoIcon.bind('click', function (evt) {\n                            evt.preventDefault();\n                        });\n                    }\n                }\n\n                // Add the wrapper for the input.\n                var inputWrapper = angular.element('<div></div>');\n                inputWrapper.addClass(\"p-form__control\");\n                inputWrapper.addClass(\"u-no-margin--top\");\n\n                if(attrs.inputWidth) {\n                    inputWrapper.addClass(\"col-\" + attrs.inputWidth);\n                }\n\n                // Render the input based on the type.\n                var placeholder = attrs.placeholder || label;\n                var inputElement = null;\n                if(attrs.type === \"text\" || attrs.type === \"textarea\" ||\n                   attrs.type === \"password\") {\n                    if(attrs.type === \"text\") {\n                        inputElement = $compile(\n                            '<input type=\"text\" id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">')(scope);\n                    } else if(attrs.type === \"textarea\") {\n                        inputElement = $compile(\n                            '<textarea id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">' +\n                                '</textarea>')(scope);\n                    } else if(attrs.type === \"password\") {\n                        inputElement = $compile(\n                            '<input type=\"password\" id=\"' + attrs.key +\n                            '\" placeholder=\"' + placeholder + '\"' +\n                            'data-ng-disabled=\"ngDisabled()\">')(scope);\n                    }\n\n                    // Allow enter on blur, by default.\n                    if(attrs.blurOnEnter) {\n                        inputElement.bind(\"keydown keypress\", function(evt) {\n                            if(evt.which === 13) {\n                                inputElement.blur();\n                                evt.preventDefault();\n                            }\n                        });\n                    }\n\n                    // Revert value on esc.\n                    var self = this;\n                    inputElement.bind(\"keydown keypress\", function(evt) {\n                        if(evt.which === 27) {\n                            inputElement.val(controller.scope.obj[attrs.key]);\n                            inputElement.blur();\n                            evt.preventDefault();\n                        }\n                    });\n\n                    // Register the field with the controller and set the\n                    // current value for the field.\n                    var currentValue = controller.registerField(\n                        attrs.key, scope);\n                    inputElement.val(currentValue);\n\n                    // When element is in focus then editing is on.\n                    inputElement.on(\"focus\", function() {\n                        scope.$apply(function() {\n                            controller.startEditingField(attrs.key);\n                        });\n                    });\n\n                    // When element is not in focus then editing is done.\n                    inputElement.on(\"blur\", function() {\n                        scope.$apply(function() {\n                            controller.stopEditingField(\n                                attrs.key, inputElement.val());\n                        });\n                    });\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        inputElement.val(newValue);\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return inputElement.val();\n                    };\n                } else if(attrs.type === \"options\") {\n                    // Requires the options attribute on the element. This\n                    // is copied directly into the ngOptions directive on\n                    // the select.\n                    var options = attrs.options;\n                    if(!angular.isString(options) || options.length === 0) {\n                        throw new Error(\n                            \"options attribute is required on type \" +\n                            \"'options' on maas-obj-field.\");\n                    }\n\n                    // Placeholder by default is disabled, allow it to be\n                    // enabled.\n                    var disabled = \"disabled\";\n                    if(attrs.placeholderEnabled === \"true\") {\n                        disabled = \"\";\n                    }\n\n                    // Create a child scope of the parent scope for this\n                    // directive. Since this directive is created with an\n                    // isolated scope we need the child to use the parent so\n                    // ngOptions can use properties defined in that scope.\n                    var childScope = scope.$parent.$new();\n                    childScope._ngDisabled = scope.ngDisabled;\n                    childScope._selectValue = controller.registerField(\n                        attrs.key, scope);\n                    childScope._selectNgChange = function() {\n                        scope._change();\n                        controller.stopEditingField(\n                            attrs.key, childScope._selectValue);\n                    };\n\n                    // Construct the select.\n                    inputElement = $compile(\n                        '<select id=\"' + attrs.key + '\" ' +\n                        'data-ng-model=\"_selectValue\" ' +\n                        'data-ng-options=\"' + options + '\"' +\n                        'data-ng-change=\"_selectNgChange()\"' +\n                        'data-ng-disabled=\"_ngDisabled()\">' +\n                        '<option value=\"\" ' + disabled + '>' + placeholder +\n                        '</option></select>')(childScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        childScope._selectValue = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return childScope._selectValue;\n                    };\n                } else if(attrs.type === \"checkboxes\") {\n                    // Requires the values attribute on the element.\n                    var values = attrs.values;\n                    if(!angular.isString(values) || values.length === 0) {\n                        throw new Error(\n                            \"values attribute is required on type \" +\n                            \"'checkboxes' on maas-obj-field.\");\n                    }\n\n                    // Create a child scope of the parent scope for this\n                    // directive. Since this directive is created with an\n                    // isolated scope we need the child to use the parent so\n                    // values can come from the parent scope.\n                    var checkScope = scope.$parent.$new();\n                    checkScope._selectedValues = controller.registerField(\n                        attrs.key, scope);\n                    checkScope._checked = function(val) {\n                        return checkScope._selectedValues.indexOf(val) > -1;\n                    };\n                    checkScope._toggleChecked = function(val) {\n                        var idx = checkScope._selectedValues.indexOf(val);\n                        if(idx > -1) {\n                            // Uncheck.\n                            checkScope._selectedValues.splice(idx, 1);\n                        } else {\n                            // Check.\n                            checkScope._selectedValues.push(val);\n                        }\n                    };\n\n                    // Construct the checkbox list.\n                    inputElement = angular.element([\n                        '<div class=\"width--full\" ',\n                            'data-ng-repeat=\"val in ' + values +'\">',\n                            '<input id=\"' + attrs.key + '_' + '{$ val $}',\n                                '\" type=\"checkbox\" value=\"{$ val $}\" ',\n                                'class=\"checkbox\" ',\n                                'data-ng-checked=\"_checked(val)\" ',\n                                'data-ng-click=\"_toggleChecked(val)\">',\n                            '<label for=\"' + attrs.key + '_',\n                                '{$ val $}' + '\" ',\n                                'class=\"checkbox-label\">{$ val $}</label>',\n                        '</div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(checkScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        checkScope._selectedValues = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return checkScope._selectedValues;\n                    };\n                } else if(attrs.type === \"tags\") {\n                    var tagsScope = scope.$new();\n                    var tags = controller.registerField(\n                        attrs.key, scope);\n                    tagsScope._tags = tags.map(function(val) {\n                        return {text: val};\n                    });\n\n                    // Construct the tags input.\n                    inputElement = angular.element([\n                        '<span data-ng-if=\"ngDisabled()\" ',\n                            'data-ng-repeat=\"tag in _tags\">',\n                            '{$ tag.text $} </span>',\n                        '<tags-input id=\"' + attrs.key + '\" ',\n                            'data-ng-model=\"_tags\" ',\n                            'data-ng-if=\"!ngDisabled()\" ',\n                            'placeholder=\"' + placeholder + '\" ',\n                            'data-ng-change=\"_change()\" ',\n                            'allow-tags-pattern=\"[\\\\w-]+\"></tags-input>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(tagsScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        tagsScope._tags = newValue.map(\n                            function(val) {\n                                return {text: val};\n                            });\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return tagsScope._tags.map(\n                            function(val) {\n                                return val.text;\n                            });\n                    };\n                } else if(attrs.type === \"hidden\") {\n                    var hiddenScope = scope.$new();\n                    hiddenScope._toggle = controller.registerField(\n                        attrs.key, scope);\n                    inputElement = angular.element([\n                        '<input type=\"hidden\" name=\"' + attrs.key + '\" ',\n                        'id=\"' + attrs.key + '\" ',\n                        'value=\"' + attrs.value + '\">',\n                        '</input>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(hiddenScope);\n                    scope.getValue = function() { return attrs.value; };\n                    scope.updateValue = function() { return null; };\n                } else if(attrs.type === \"onoffswitch\") {\n                    var switchScope = scope.$new();\n                    switchScope._toggle = controller.registerField(\n                        attrs.key, scope);\n                    switchScope._changed = function() {\n                        scope._change();\n                        controller.startEditingField(attrs.key);\n                        controller.stopEditingField(\n                            attrs.key, switchScope.getValue());\n                    };\n\n                    // Construct the on and off toggle.\n                    inputElement = angular.element([\n                      '<div class=\"maas-p-switch\">',\n                        '<input type=\"checkbox\" name=\"' + attrs.key + '\" ',\n                          'class=\"maas-p-switch--input\" ',\n                          'id=\"' + attrs.key + '\" ',\n                          'data-ng-model=\"_toggle\" ',\n                          'data-ng-change=\"_changed()\">',\n                        '<div class=\"maas-p-switch--mask\"></div>',\n                      '</div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(switchScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        // WARNING: This code is difficult to unit test, since\n                        // we could not figure out how to get the\n                        // isolateScope() from the transcluded element. Be sure\n                        // to manually test versions of this toggle with and\n                        // without the on-value and off-value attributes, such\n                        // as by verifying that both the on/off toggle on both\n                        // the discovery page and the subnet details page work.\n                        if(attrs.onValue && attrs.onValue === newValue) {\n                            switchScope._toggle = true;\n                        } else if(attrs.offValue &&\n                                attrs.offValue === newValue) {\n                            switchScope._toggle = false;\n                        } else {\n                            switchScope._toggle = newValue;\n                        }\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        // WARNING: This code is difficult to unit test, since\n                        // we could not figure out how to get the\n                        // isolateScope() from the transcluded element. Be sure\n                        // to manually test versions of this toggle with and\n                        // without the on-value and off-value attributes, such\n                        // as by verifying that both the on/off toggle on both\n                        // the discovery page and the subnet details page work.\n                        if(switchScope._toggle) {\n                            if(attrs.onValue) {\n                                return attrs.onValue;\n                            } else {\n                                return true;\n                            }\n                        } else {\n                            if(attrs.offValue) {\n                                return attrs.offValue;\n                            } else {\n                                return false;\n                            }\n                        }\n                    };\n                } else if(attrs.type == \"slider\") {\n                    var sliderScope = scope.$new();\n                    sliderScope._slider = controller.registerField(\n                        attrs.key, scope);\n                    sliderScope._ngDisabled = scope.ngDisabled;\n\n                    // Construct the tags input.\n                    inputElement = angular.element([\n                        '<div class=\"p-slider__wrapper\">',\n                        '<input class=\"p-slider\" type=\"range\"',\n                        'min=\"' + attrs.min + '\" max=\"' + attrs.max + '\" ',\n                        'value=\"1\" step=\"1\" id=\"' + attrs.key + '\" ',\n                        'data-ng-model=\"_slider\" data-ng-disabled=\"',\n                        '_ngDisabled()\">',\n                        '<input class=\"p-slider__input\" type=\"text\" ',\n                        'maxlength=\"3\" id=\"' + attrs.key + '-input\" ',\n                        'data-ng-model=\"_slider\" data-ng-disabled=\"',\n                        '_ngDisabled()\"></div>'\n                    ].join(''));\n                    inputElement = $compile(inputElement)(sliderScope);\n\n                    // Called by controller to update the value.\n                    scope.updateValue = function(newValue) {\n                        sliderScope._slider = newValue;\n                    };\n\n                    // Called by controller to get the value.\n                    scope.getValue = function() {\n                        return sliderScope._slider;\n                    };\n                } else {\n                    throw new Error(\n                        \"Unknown type on maas-obj-field: \" + attrs.type);\n                }\n\n                // Called on change.\n                scope._change = function() {\n                    if(angular.isFunction(scope.onChange)) {\n                        scope.onChange(\n                            attrs.key,\n                            controller.getValue(attrs.key),\n                            controller);\n                    }\n                };\n\n                // Copy input class to the input element.\n                if(attrs.inputClass) {\n                    inputElement.addClass(attrs.inputClass);\n                }\n                inputWrapper.append(inputElement);\n\n                // Errors element.\n                var errorsElement = angular.element(\n                    '<ul class=\"p-list u-no-margin--top\"></ul>');\n                if(!controller.isTableForm()) {\n                    errorsElement.addClass(\"form__error\");\n                }\n                inputWrapper.append(errorsElement);\n\n                // Help text elements\n                if (attrs.helpText) {\n                    var helpTextElement = angular.element(\n                        '<p>' + attrs.helpText + '</p>');\n                    helpTextElement.addClass(\"p-form-help-text\");\n                    inputWrapper.append(helpTextElement);\n                }\n\n                // Called by controller to clear all errors.\n                scope.clearErrors = function() {\n                    inputElement.removeClass(\"ng-dirty\");\n                    inputElement.removeClass(\"p-form-validation__input\");\n                    inputWrapper.removeClass(\"p-form-validation\");\n                    inputWrapper.removeClass(\"is-error\");\n                    inputWrapper.removeClass(\"u-no-margin--top\");\n                    errorsElement.empty();\n                };\n\n                // Called by controller to set errors.\n                scope.setErrors = function(errors) {\n                    if(errors.length > 0) {\n                        inputWrapper.addClass(\"p-form-validation\");\n                        inputWrapper.addClass(\"is-error\");\n                        inputWrapper.addClass(\"u-no-margin--top\");\n                        inputElement.addClass(\"ng-dirty\");\n                        inputElement.addClass(\"p-form-validation__input\");\n                        angular.forEach(errors, function(error) {\n                            errorsElement.append(\n                              '<li class=\"p-form-validation__message\">' +\n                              '<strong>Error:</strong> ' + error + '</li>'\n                            );\n                        });\n                        // Set the input in focus but outside of the current\n                        // digest cycle.\n                        setTimeout(function() {\n                            inputElement.focus();\n                        }, 1);\n                    }\n                };\n\n                // Called by controller to see if error is set on field.\n                scope.hasErrors = function() {\n                    return inputWrapper.hasClass(\"is-error\");\n                };\n\n                // Subtle text element.\n                if(attrs.subtleText) {\n                    var subtleTextElement = $compile(\n                        angular.element(\n                            '<span class=\"p-form-help-text\" ' +\n                            'data-ng-bind=\"subtleText\"></span>'))(scope);\n                    inputWrapper.append(subtleTextElement);\n                }\n                element.append(inputWrapper);\n\n                // Watch the showing of saving spinner. Update the elements\n                // correctly to show the saving.\n                scope.$watch(function() {\n                    return controller.showInputSaving(attrs.key);\n                }, function(value) {\n                    if(value) {\n                        inputWrapper.children(\n                            ':first').addClass('u-border--information');\n                        inputWrapper.append(\n                            '<i class=\"obj-saving icon ' +\n                            'p-icon--spinner u-animation--spin\"></i>');\n                        inputWrapper.addClass('p-tooltip');\n                        inputWrapper.addClass('p-tooltip--bottom');\n                        inputWrapper.addClass('u-no-margin--top');\n                        inputWrapper.attr('aria-label', 'Saving');\n                    } else {\n                      inputWrapper.children(\n                          ':first').removeClass('u-border--information');\n                        inputWrapper.find('i.obj-saving').remove();\n                        inputWrapper.removeClass('p-tooltip');\n                        inputWrapper.removeClass('p-tooltip--right');\n                        inputWrapper.addClass('u-no-margin--top');\n                        inputWrapper.removeAttr('aria-label');\n                    }\n                });\n\n                // Called when the scope is destroyed.\n                scope.$on(\"$destroy\", function() {\n                    controller.unregisterField(attrs.key);\n                });\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasObjSave', function() {\n        return {\n            restrict: \"A\",\n            require: [\"^^maasObjForm\"],\n            scope: {},\n            link: function(scope, element, attrs, controllers) {\n                // Only allow maas-obj-save when saveOnBlur is false.\n                var controller = controllers[0];\n                if(controller.saveOnBlur()) {\n                    throw new Error(\n                        \"maas-obj-save is only allowed when save-on-blur is \" +\n                        \"set to false.\");\n                }\n\n                element.on(\"click\", function() {\n                    scope.$apply(function() {\n                        controller.saveForm();\n                    });\n                });\n            }\n        };\n    });\n\nangular.module('MAAS').directive('maasObjErrors', function() {\n        return {\n            restrict: \"E\",\n            require: [\"^^maasObjForm\"],\n            scope: {},\n            template: '<ul class=\"p-list u-no-margin--top\"></ul>',\n            link: function(scope, element, attrs, controllers) {\n                // Set on the controller the global error handler.\n                controllers[0].errorScope = scope;\n                var ul = element.find(\"ul\");\n\n                // Called by controller to clear all errors.\n                scope.clearErrors = function() {\n                    ul.empty();\n                };\n\n                // Called by controller to set errors.\n                scope.setErrors = function(errors) {\n                    if(errors.length > 0) {\n                        angular.forEach(errors, function(error) {\n                            ul.append(\n                              '<li class=\"p-list__item\">' +\n                              '<i class=\"p-icon--error\"></i> ' +\n                              error + '</li>'\n                            );\n                        });\n                    }\n                };\n\n                // Called by controller to see if error is set on field.\n                scope.hasErrors = function() {\n                    return ul.children().length > 0;\n                };\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjSaving', function() {\n        return {\n            restrict: \"E\",\n            require: \"^^maasObjForm\",\n            scope: {},\n            transclude: true,\n            template: [\n              '<span data-ng-if=\"saving\">',\n                '<i class=\"p-icon--loading u-animation--spin\"></i>',\n                '<span data-ng-transclude></span>',\n              '</span>'].join(''),\n            link: function(scope, element, attrs, controller) {\n                scope.saving = false;\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    scope.saving = value;\n                });\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjShowSaving', function() {\n        return {\n            restrict: \"A\",\n            require: \"^^maasObjForm\",\n            link: function(scope, element, attrs, controller) {\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    if(value) {\n                        element.removeClass(\"ng-hide\");\n                    } else {\n                        element.addClass(\"ng-hide\");\n                    }\n                });\n            }\n        };\n    });\n\n\nangular.module('MAAS').directive('maasObjHideSaving', function() {\n        return {\n            restrict: \"A\",\n            require: \"^^maasObjForm\",\n            link: function(scope, element, attrs, controller) {\n                scope.$watch(function() {\n                    return controller.scope.saving;\n                }, function(value) {\n                    if(value) {\n                        element.addClass(\"ng-hide\");\n                    } else {\n                        element.removeClass(\"ng-hide\");\n                    }\n                });\n            }\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Creates the auto-formatting for MAC address inputs.\n */\n\nangular.module('MAAS').directive('macAddress', function () {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: function (scope, ele, attr, ngModelCtrl, ngModel) {\n            if (!ngModelCtrl) {\n              return;\n            }\n\n            var macAddressParse = function (value) {\n                return value.toUpperCase();\n            };\n\n            var macAddressFormat = function (value) {\n\n                if (!value) {\n                  return undefined;\n                }\n\n                var numbers = value.replace(/:/g, \"\");\n\n                if (value.length % 3 === 0) {\n\n                    return numbers.replace(/([0-9A-Za-z]{2})/g, \"$1:\");\n                }\n            };\n\n            ngModelCtrl.$parsers.push(macAddressParse);\n            ngModelCtrl.$formatters.push(macAddressFormat);\n\n            ele.on('input', function () {\n                var value = macAddressFormat(ele.val());\n\n                if (value !== undefined) {\n                    ngModelCtrl.$setViewValue(value);\n                    ngModelCtrl.$render();\n                }\n                scope.$apply();\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Machines listing directive.\n*\n* Renders the machines listing.\n*/\n// testing\n\n\n\nangular.module('MAAS').directive('maasMachinesTable', [\n  'MachinesManager', 'GeneralManager', 'ManagerHelperService',\n  function (MachinesManager, GeneralManager, ManagerHelperService) {\n    return {\n      restrict: \"E\",\n      scope: {\n        search: \"=\",\n        ngDisabled: \"&\",\n        machineHasError: \"&\",\n        hideCheckboxes: \"=?\",\n        onListingChange: \"&\",\n        onCheckAll: \"&\",\n        onCheck: \"&\"\n      },\n      templateUrl: (\n        'static/partials/machines-table.html?v=' + (\n          MAAS_config.files_version)),\n      link: function(scope, element, attrs) {\n        // Statuses that should show spinner.\n        var SPINNER_STATUSES = [\n          1,   // commissioning\n          9,   // deploying\n          12,  // releasing\n          14,  // disk erasing\n          17,  // entering rescue mode\n          19,  // exiting rescue mode\n          21   // testing\n        ];\n\n        // Scope variables.\n        scope.table = {\n          column: 'fqdn',\n          predicate: 'fqdn',\n          reverse: false,\n          allViewableChecked: false,\n          machines: MachinesManager.getItems(),\n          filteredMachines: [],\n          osinfo: GeneralManager.getData(\"osinfo\")\n        };\n\n        // Ensures that the checkbox for select all is the correct value.\n        scope.updateAllChecked = function() {\n          // Not checked when the filtered machines are empty.\n          if(scope.table.filteredMachines.length === 0) {\n              scope.table.allViewableChecked = false;\n              return;\n          }\n\n          // Loop through all filtered machines and see if all are checked.\n          var i;\n          for(i = 0; i < scope.table.filteredMachines.length; i++) {\n              if(!scope.table.filteredMachines[i].$selected) {\n                  scope.table.allViewableChecked = false;\n                  return;\n              }\n          }\n          scope.table.allViewableChecked = true;\n        };\n\n        // Selects and deselects visible machines.\n        scope.toggleCheckAll = function() {\n          if(scope.table.allViewableChecked) {\n            angular.forEach(\n              scope.table.filteredMachines, function(machine) {\n                MachinesManager.unselectItem(machine.system_id);\n              });\n          } else {\n            angular.forEach(\n              scope.table.filteredMachines, function(machine) {\n                MachinesManager.selectItem(machine.system_id);\n              });\n          }\n          scope.updateAllChecked();\n          scope.onCheckAll();\n        };\n\n        // Selects and unselects machine.\n        scope.toggleChecked = function(machine) {\n          if(MachinesManager.isSelected(machine.system_id)) {\n            MachinesManager.unselectItem(machine.system_id);\n          } else {\n            MachinesManager.selectItem(machine.system_id);\n          }\n          scope.updateAllChecked();\n          scope.onCheck({$machine: machine});\n        };\n\n        // Sorts the table by predicate.\n        scope.sortTable = function(predicate) {\n            scope.table.predicate = predicate;\n            scope.table.reverse = !scope.table.reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        scope.selectColumnOrSort = function(predicate) {\n            if(scope.table.column !== predicate) {\n                scope.table.column = predicate;\n            } else {\n                scope.sortTable(predicate);\n            }\n        };\n\n        // Return true if spinner should be shown.\n        scope.showSpinner = function(machine) {\n            return SPINNER_STATUSES.indexOf(machine.status_code) > -1;\n        };\n\n        scope.showFailedTestWarning = function(machine) {\n            if(scope.showSpinner(machine)) {\n                return false;\n            }\n            switch(machine.status_code) {\n                // NEW\n                case 0:\n                // COMMISSIONING\n                case 1:\n                // FAILED_COMMISSIONING\n                case 2:\n                // TESTING\n                case 21:\n                // FAILED_TESTING\n                case 22:\n                    return false;\n            }\n            switch(machine.testing_status) {\n                // Tests havn't been run\n                case -1:\n                // Tests have passed\n                case 2:\n                    return false;\n            }\n            return true;\n        };\n\n        // Return true if the other node status should be shown.\n        scope.showNodeStatus = function(machine) {\n            // -1 means tests havn't been run, 2 means tests have passed.\n            if(!scope.showSpinner(machine) &&\n               !scope.showFailedTestWarning(machine) &&\n               machine.other_test_status !== -1 &&\n               machine.other_test_status !== 2) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n\n        // Returns the release title from osinfo.\n        scope.getReleaseTitle = function(os_release) {\n          if(angular.isArray(scope.table.osinfo.releases)) {\n            for(i = 0; i < scope.table.osinfo.releases.length; i++) {\n              var release = scope.table.osinfo.releases[i];\n              if(release[0] === os_release) {\n                return release[1];\n              }\n            }\n          }\n          return os_release;\n        };\n\n        // Returns the status text to show.\n        scope.getStatusText = function(machine) {\n          var showRelease = ['Deploying', 'Deployed'];\n          if(showRelease.indexOf(machine.status) === -1) {\n            return machine.status;\n          } else {\n            var releaseTitle = scope.getReleaseTitle(\n              machine.osystem + '/' + machine.distro_series);\n            if(machine.osystem === \"ubuntu\") {\n              releaseTitle = releaseTitle.split('\"')[0].trim();\n            }\n            if(machine.status === \"Deployed\") {\n              return releaseTitle;\n            }\n            if(machine.status === \"Deploying\") {\n              return machine.status + ' ' + releaseTitle;\n            }\n          }\n        };\n\n        // When the list of filtered machines change update the all checkbox.\n        scope.$watchCollection(\"table.filteredMachines\", function() {\n          scope.updateAllChecked();\n          scope.onListingChange({$machines: scope.table.filteredMachines});\n        });\n      }\n    };\n}]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Navigation directive.\n *\n * Provides the navigation interactions on all screen sizes\n */\n\n\nangular.module('MAAS').directive(\n  'maasNavigationDropdown', ['$document', function($document) {\n  return {\n    restrict: \"A\",\n    link: function(scope, element, attrs) {\n\n      element.on('click', function(e) {\n        e.stopPropagation();\n        element.parent().find('.p-dropdown__menu').toggleClass('u-hide');\n      });\n\n      $document.on('click', function() {\n        element.parent().find('.p-dropdown__menu').addClass('u-hide');\n      });\n    }\n  };\n}]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Navigation directive.\n *\n * Provides the navigation interactions on all screen sizes\n */\n\n\nangular.module('MAAS').directive(\n  'maasNavigationMobile', ['$document', function($document) {\n  return {\n    restrict: \"A\",\n    link: function(scope, element, attrs) {\n\n      element.on('click', function(e) {\n        e.stopPropagation();\n        var mobileNavMenu = element.parent().parent().find('#mobile-nav-menu');\n        mobileNavMenu.toggleClass('u-show');\n      });\n    }\n  };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Notifications.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject notifications.html into the template cache.\n    $templateCache.put('directive/templates/notifications.html', [\n      '<div class=\"u-no-margin--top\" data-ng-repeat=\"category in categories\"',\n        ' data-ng-init=\"notifications = categoryNotifications[category]\">',\n        // 1 notification.\n        '<span class=\"row\" data-ng-if=\"notifications.length == 1\">',\n          '<ul class=\"p-list\" data-ng-class=\"{\\'is-open\\': shown}\">',\n            '<li data-ng-repeat=\"notification in notifications\"',\n            ' class=\"p-notification\"',\n            ' data-ng-class=\"categoryClasses[notification.category]\">',\n              '<p class=\"p-notification__response\">',\n                '<span data-ng-bind-html=\"notification.message\"></span> ',\n                '<a class=\"p-notification__action\"',\n                ' data-ng-click=\"dismiss(notification)\">Dismiss</a>',\n              '</p>',\n            '</li>',\n          '</ul>',\n        '</span>',\n        // 2 or more notifications.\n        '<div class=\"row p-notification--group\" ',\n             'data-ng-if=\"notifications.length >= 2\"',\n        ' data-ng-init=\"shown = false\">',\n            '<div data-ng-class=\"categoryClasses[notifications[0].category]\">',\n                '<a aria-label=\"{$ notifications.length $} ',\n                    '{$ categoryTitles[category] $}, click to open messages.\"',\n                    ' maas-enter=\"shown = !shown\"',\n                    ' class=\"p-notification__toggle\"',\n                    ' data-ng-click=\"shown = !shown\">',\n                    '<p class=\"p-notification__response\">',\n                        '<span class=\"p-notification__status\"',\n                        ' data-count=\"{$ notifications.length $}\"',\n                        ' data-ng-bind=\"notifications.length + \\' \\' + ',\n                                       'categoryTitles[category]\"></span>',\n                        '<small>',\n                        '<i data-ng-class=\"{ \\'p-icon--expand\\': !shown,',\n                        ' \\'p-icon--collapse\\': shown }\"></i></small>',\n                    '</p>',\n                '</a>',\n                '<ul class=\"p-list--divided\" ',\n                    'data-ng-class=\"{\\'u-hide\\': !shown}\">',\n                    '<li data-ng-repeat=\"notification in notifications\"',\n                    ' class=\"p-list__item\">',\n                    '<p class=\"p-notification__response\">',\n                        '<span data-ng-bind-html=\"notification.message\">',\n                        '</span> ',\n                        '<a class=\"p-notification__action\"',\n                        ' data-ng-click=\"dismiss(notification)\">Dismiss</a>',\n                    '</p>',\n                    '</li>',\n                '</ul>',\n            '</div>',\n        '</div>',\n      '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasNotifications', [\n    \"NotificationsManager\", \"ManagerHelperService\",\n    function(NotificationsManager, ManagerHelperService) {\n        return {\n            restrict: \"E\",\n            templateUrl: 'directive/templates/notifications.html',\n            link: function($scope, element, attrs) {\n                ManagerHelperService.loadManager($scope, NotificationsManager);\n                $scope.notifications = NotificationsManager.getItems();\n                $scope.dismiss = angular.bind(\n                    NotificationsManager, NotificationsManager.dismiss);\n\n                $scope.categories = [\n                    \"error\",\n                    \"warning\",\n                    \"success\",\n                    \"info\"\n                ];\n                $scope.categoryTitles = {\n                    error: \"Errors\",\n                    warning: \"Warnings\",\n                    success: \"Successes\",\n                    info: \"Other messages\"\n                };\n                $scope.categoryClasses = {\n                    error: \"p-notification--negative\",\n                    warning: \"p-notification--caution\",\n                    success: \"p-notification--positive\",\n                    info: \"p-notification\"  // No suffix.\n                };\n                $scope.categoryNotifications = {\n                    error: [],\n                    warning: [],\n                    success: [],\n                    info: []\n                };\n\n                $scope.$watchCollection(\n                    \"notifications\", function() {\n                        var cns = $scope.categoryNotifications;\n                        angular.forEach(\n                            $scope.categories, function(category) {\n                                cns[category].length = 0;\n                            }\n                        );\n                        angular.forEach(\n                            $scope.notifications, function(notification) {\n                                cns[notification.category].push(notification);\n                            }\n                        );\n                    }\n                );\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * OS/Release select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the os-select.html into the template cache.\n    $templateCache.put('directive/templates/os-select.html', [\n        '<ul class=\"p-inline-list--settings u-no-margin--top\">',\n            '<li class=\"p-inline-list__item\"> ',\n                '<label class=\"p-form__label\">Choose your image</label>',\n            '</li>',\n            '<li class=\"p-inline-list__item\"> ',\n                '<select name=\"os\" ',\n                    'data-ng-model=\"ngModel.osystem\" ',\n                    'data-ng-change=\"selectedOSChanged()\" ',\n                    'data-ng-options=\"',\n                    'os[0] as os[1] for os in maasOsSelect.osystems\">',\n                '</select>',\n            '</li>',\n            '<li class=\"p-inline-list__item\"> ',\n                '<select name=\"release\" ',\n                    'data-ng-model=\"ngModel.release\" ',\n                    'data-ng-change=\"selectedReleaseChanged()\" ',\n                    'data-ng-options=\"',\n                    'release[0] as release[1] for release in releases\">',\n                '</select>',\n            '</li>',\n            '<li class=\"p-inline-list__item\"> ',\n                '<select name=\"hwe_kernel\" data-ng-model=\"ngModel.hwe_kernel\" ',\n                    'data-ng-show=\"hwe_kernels.length\"',\n                    'data-ng-options=\"',\n                    'hwe_kernel[0] as hwe_kernel[1] for hwe_kernel ',\n                    'in hwe_kernels\">',\n                    '<option value=\"\">Default kernel</option>',\n                '</select>',\n            '</li>',\n        '</ul>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasOsSelect', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            maasOsSelect: '=',\n            ngModel: '='\n        },\n        templateUrl: 'directive/templates/os-select.html',\n        controller: function($scope) {\n\n            // Return only the selectable releases based on the selected os.\n            function getSelectableReleases() {\n                if(angular.isObject($scope.maasOsSelect) &&\n                    angular.isArray($scope.maasOsSelect.releases)) {\n                    var i, allChoices = $scope.maasOsSelect.releases;\n                    var choice, choices = [];\n                    for(i = 0; i < allChoices.length; i++) {\n                        choice = allChoices[i];\n                        if(choice[0].indexOf($scope.ngModel.osystem + '/') > -1)\n                        {\n                            choices.push(choice);\n                        }\n                    }\n                    return choices;\n                }\n                return [];\n            }\n\n            // Return only the selectable kernels based on the selected os.\n            function getSelectableKernels() {\n                if(angular.isObject($scope.maasOsSelect) &&\n                    angular.isObject($scope.maasOsSelect.kernels) &&\n                    angular.isString($scope.ngModel.osystem) &&\n                    angular.isString($scope.ngModel.release)) {\n                    var os = $scope.ngModel.osystem;\n                    var release = $scope.ngModel.release.split('/')[1];\n                    var osKernels = $scope.maasOsSelect.kernels[os];\n                    if(angular.isObject(osKernels)) {\n                        return osKernels[release];\n                    }\n                }\n                return [];\n            }\n\n            // Returns the defaultValue if its in the choices array. Otherwise\n            // it returns the weighted choice if present, followed by the\n            // first choice.\n            function getDefaultOrFirst(array, defaultValue, weightValue) {\n                var i, first, weightedPresent = false;\n                for(i = 0; i < array.length; i++) {\n                    if(angular.isUndefined(first)) {\n                        first = array[i][0];\n                    }\n                    if(array[i][0] === defaultValue) {\n                        return defaultValue;\n                    }\n                    if(angular.isString(weightValue) &&\n                        array[i][0] === weightValue) {\n                        weightedPresent = true;\n                    }\n                }\n                if(weightedPresent) {\n                    return weightValue;\n                }\n                if(angular.isUndefined(first)) {\n                    return null;\n                }\n                return first;\n            }\n\n            // Sets the default selected values for the ngModel. Only sets the\n            // values once the maasOsSelect is populated. Sets the selected\n            // osystem to default_osystem if present, followed by 'ubuntu' if\n            // present, followed by the first available. Sets the selected\n            // release to the default_release if present, followed by the first\n            // available.\n            function setDefault() {\n                // Do nothing if model is already set.\n                if(angular.isString($scope.ngModel.osystem) &&\n                    angular.isString($scope.ngModel.release)) {\n                    return;\n                }\n                // Do nothing if the default is not set.\n                if(angular.isUndefined($scope.maasOsSelect.default_osystem) ||\n                    angular.isUndefined($scope.maasOsSelect.default_release)) {\n                    return;\n                }\n\n                // Set the intial defaults.\n                $scope.ngModel.osystem = getDefaultOrFirst(\n                    $scope.maasOsSelect.osystems,\n                    $scope.maasOsSelect.default_osystem, \"ubuntu\");\n                $scope.releases = getSelectableReleases();\n                $scope.ngModel.release = getDefaultOrFirst(\n                    $scope.releases,\n                    $scope.ngModel.osystem + \"/\" +\n                    $scope.maasOsSelect.default_release);\n                $scope.ngModel.kernel = \"\";\n            }\n\n            // Defaults\n            if(!angular.isObject($scope.ngModel)) {\n                $scope.ngModel = {\n                    osystem: null,\n                    release: null,\n                    hwe_kernel: null\n                };\n            }\n            $scope.releases = getSelectableReleases();\n            $scope.hwe_kernels = getSelectableKernels();\n\n            // Add the reset function to ngModel, allowing users to call\n            // this function to reset the defauls.\n            $scope.ngModel.$reset = function() {\n                $scope.ngModel.osystem = null;\n                $scope.ngModel.release = null;\n                $scope.ngModel.hwe_kernel = null;\n                setDefault();\n            };\n\n            // If the available os change update the available releases and\n            // set the default.\n            $scope.$watch(\"maasOsSelect.releases\", function() {\n                $scope.releases = getSelectableReleases();\n                setDefault();\n            });\n\n            // If the available release change update the available kernels and\n            // set the default.\n            $scope.$watch(\"maasOsSelect.kernels\", function() {\n                $scope.hwe_kernels = getSelectableKernels();\n                setDefault();\n            });\n\n            // Updates the default and selectable releases.\n            $scope.selectedOSChanged = function() {\n                $scope.releases = getSelectableReleases();\n                $scope.hwe_kernels = getSelectableKernels();\n                $scope.ngModel.release = null;\n                $scope.ngModel.hwe_kernel = null;\n                if($scope.releases.length > 0) {\n                    $scope.ngModel.release = $scope.releases[0][0];\n                }\n            };\n\n            // Updates the default and selectable kernels.\n            $scope.selectedReleaseChanged = function() {\n                $scope.hwe_kernels = getSelectableKernels();\n                $scope.ngModel.hwe_kernel = null;\n            };\n        }\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Placeholder directive.\n *\n * Allows the placeholder attribute on an element to be dynamic.\n */\n\n\nangular.module('MAAS').directive('ngPlaceholder', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            ngPlaceholder: \"=\"\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('ngPlaceholder', function() {\n                element[0].placeholder = scope.ngPlaceholder;\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Pod parameters directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the power-parameters.html into the template cache.\n    $templateCache.put('directive/templates/pod-parameters.html', [\n        '<maas-obj-field type=\"options\" key=\"type\" label=\"Pod type\" ',\n          'label-width=\"2\" input-width=\"5\" ',\n          'placeholder=\"Select the pod type\" ',\n          'options=\"type.name as type.description for type in podTypes\" ',\n          'ng-if=\"!hideType\">',\n        '</maas-obj-field>',\n        '<div pod-fields></div>'\n    ].join(''));\n}]);\n\n\nangular.module('MAAS').directive(\n    'maasPodParameters', [\n        '$compile', 'GeneralManager', 'ManagerHelperService', function(\n        $compile, GeneralManager, ManagerHelperService) {\n    return {\n        restrict: \"E\",\n        require: \"^^maasObjForm\",\n        scope: {\n          hideType: '='\n        },\n        templateUrl: 'directive/templates/pod-parameters.html',\n        link: function(scope, element, attrs, controller) {\n            scope.powerTypes = GeneralManager.getData('power_types');\n            scope.podTypes = [];\n            scope.type = null;\n\n            var childScope, fieldsElement = angular.element(\n                element.find('div[pod-fields]'));\n\n            // Function to update the editable fields.\n            var updateFields = function(podType) {\n                var type = null;\n                var i;\n                for(i = 0; i < scope.podTypes.length; i++) {\n                    if(scope.podTypes[i].name === podType) {\n                      type = scope.podTypes[i];\n                    }\n                }\n\n                fieldsElement.empty();\n                if(childScope) {\n                  childScope.$destroy();\n                }\n                if(angular.isObject(type)) {\n                  var html = '<maas-obj-field-group>';\n                  angular.forEach(type.fields, function(field) {\n                      if(field.scope === 'bmc') {\n                          if(field.name === 'power_pass') {\n                              html += (\n                                  '<maas-obj-field type=\"password\" key=\"');\n                          } else {\n                              html += (\n                                  '<maas-obj-field type=\"text\" key=\"');\n                          }\n                          html += (field.name + '\" label=\"' + field.label +\n                            '\" ' + 'label-width=\"2\" input-width=\"5\">' +\n                            '</maas-obj-field>');\n                      }\n                  });\n\n                  if(type.name === 'virsh' && attrs.hideSlider !== \"true\") {\n                      html += (\n                          '<maas-obj-field type=\"slider\" key=\"' +\n                          'cpu_over_commit_ratio\" label=\"CPU over commit\" ' +\n                          'min=\"0\" max=\"10\" label-width=\"2\" input-width=\"5\">' +\n                          '</maas-obj-field>');\n                      html += (\n                          '<maas-obj-field type=\"slider\" key=\"' +\n                          'memory_over_commit_ratio\" label=\"' +\n                          'Memory over commit\" min=\"0\" max=\"10\" ' +\n                          'label-width=\"2\" input-width=\"5\"></maas-obj-field>');\n                  }\n                  html += '</maas-obj-field-group>';\n                  childScope = scope.$new();\n                  var ele = angular.element(html);\n                  fieldsElement.append(ele);\n                  $compile(ele)(\n                      childScope, undefined, {maasObjForm: controller});\n                }\n            };\n\n            // Return the selected type.\n            var getType = function() {\n                if(scope.hideType) {\n                    return controller.obj.type;\n                } else {\n                    return controller.getValue('type');\n                }\n            };\n\n            // Update the fields when the type changes.\n            scope.$watch(getType, updateFields);\n\n            // Update the pod types when the power types is updated.\n            scope.$watchCollection(\"powerTypes\", function() {\n                scope.podTypes.length = 0;\n                angular.forEach(scope.powerTypes, function(type) {\n                    if(type.driver_type === \"pod\") {\n                        scope.podTypes.push(type);\n                    }\n                });\n                updateFields(getType());\n            });\n\n            // Load the general manager.\n            ManagerHelperService.loadManager(scope, GeneralManager);\n        }\n    };\n}]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Power parameters directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the power-parameters.html into the template cache.\n    $templateCache.put('directive/templates/power-parameters.html', [\n        '<div class=\"p-form__group\">',\n            '<label for=\"power-type\" ',\n                    'class=\"form__group-label col-2\">Power type</label>',\n            '<div class=\"form__group-input col-3\">',\n                '<select name=\"power-type\" id=\"power-type\" ',\n                    'data-ng-disabled=\"ngDisabled || ngModel.in_pod\" ',\n                    'data-ng-class=\"{ invalid: !ngModel.type }\" ',\n                    'data-ng-model=\"ngModel.type\" ',\n                    'data-ng-options=\"',\n                    'type as type.description ',\n                    'for type in maasPowerParameters track by type.name\">',\n                    '<option value=\"\" disabled selected>',\n                        'Select your power type',\n                    '</option>',\n                '</select>',\n            '</div>',\n        '</div>',\n        '<div class=\"p-form__group\" ',\n            'data-ng-repeat=\"field in ngModel.type.fields\">',\n            '<label for=\"{$ field.name $}\" class=\"form__group-label col-2\" ',\n                 'data-ng-if=\"field.name !== ' + \"'default_storage_pool' && \",\n                 \"(field.scope !== 'bmc' || !ngModel.in_pod)\" + '\">',\n                '{$ field.label $}',\n            '</label>',\n            '<div class=\"form__group-input col-3\">',\n                '<maas-power-input field=\"field\" ',\n                    'data-ng-disabled=\"ngDisabled || (field.scope === ',\n                    \"'bmc' && ngModel.in_pod)\" + '\" ',\n                    'data-ng-if=\"field.name !== ' + \"'default_storage_pool' \",\n                    \"&& (field.scope !== 'bmc' || !ngModel.in_pod)\" + '\" ',\n                    'data-ng-model=\"ngModel.parameters[field.name]\">',\n            '</div>',\n        '</div>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasPowerInput', ['$compile',\n    function($compile) {\n        return {\n            restrict: \"E\",\n            require: \"ngModel\",\n            scope: {\n                field: '=',\n                ngModel: '='\n            },\n            link: function(scope, element, attrs) {\n                var type = scope.field.field_type;\n                var req = scope.field.required ? 'required=\"required\" ' : '';\n                var html = \"\";\n                if(type === \"string\" || type === \"mac_address\" ||\n                   type === \"password\") {\n                    // Build an input element with the correct attributes.\n                    var input_type = 'type=\"text\"';\n                    if(type === \"password\") {\n                        // If the input field is a password field, display it\n                        // as text or password depending on if we're editing\n                        // the fields.\n                        input_type = \"data-ng-type=\\\"ngModel.editing && \" +\n                            \"'text' || 'password'\\\"\";\n                    }\n                    html =\n                        '<input ' + input_type + ' ' +\n                        'name=\"' + scope.field.name + '\" ' +\n                        req + 'data-ng-model=\"' + attrs.ngModel + '\" ' +\n                        'data-ng-disabled=\"' + attrs.ngDisabled + '\" ';\n\n                    // Add mac address validation.\n                    if(type === \"mac_address\") {\n                        html +=\n                            'data-ng-pattern=\"' +\n                            '/^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$/\"';\n                    }\n                    html += '>';\n\n                    // Set the default value for the input on the model.\n                    if(angular.isUndefined(scope.ngModel)) {\n                        scope.ngModel = scope.field[\"default\"];\n                    }\n                } else if(type === \"choice\") {\n                    // Build a select element with the correct attributes.\n                    html =\n                        '<select name=\"' + scope.field.name + '\"' +\n                        req + 'data-ng-model=\"' + attrs.ngModel + '\" ' +\n                        'data-ng-disabled=\"' + attrs.ngDisabled + '\" ' +\n                        'data-ng-options=\"' +\n                        'choice[0] as choice[1] for choice in field.choices' +\n                        '\">';\n                    html += '</select>';\n\n                    // Set the default choice on the model.\n                    if(angular.isUndefined(scope.ngModel)) {\n                        if(scope.field[\"default\"]) {\n                            scope.ngModel = scope.field[\"default\"];\n                        }\n                    }\n                } else {\n                    throw new Error(\"Unknown power_type: \"+ type);\n                }\n\n                // Replace the element with the compiled html using the parents\n                // scope. The parent scope is used because we want to build the\n                // element as if it was in the parent scope, not the scope that\n                // is defined in this directive.\n                element.replaceWith($compile(html)(scope.$parent));\n            }\n        };\n    }]);\n\nangular.module('MAAS').directive('maasPowerParameters', function() {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            maasPowerParameters: '=',\n            ngModel: '=',\n            ngDisabled: '='\n        },\n        templateUrl: 'directive/templates/power-parameters.html'\n    };\n});\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * User preferences MAAS key\n *\n * Provides the interactivity of the MAAS key section of the user profile.\n */\n\n\nangular.module('MAAS')\n.directive('maasPrefKeys',\n    ['$q', 'RegionConnection', 'UsersManager',\n    function($q, RegionConnection, UsersManager) {\n        return {\n            restrict: \"A\",\n            controller: function() {\n                var self = this;\n\n                self.addKey = function() {\n                    var defer = $q.defer();\n                    RegionConnection.defaultConnect().then(function() {\n                        UsersManager.createAuthorisationToken().then(\n                            function(token) {\n                                if(self.injector) {\n                                    self.injector(token);\n                                }\n                                defer.resolve(token);\n                            });\n                    });\n                    return defer.promise;\n                };\n\n                self.deleteKey = function(key) {\n                    RegionConnection.defaultConnect().then(function() {\n                        UsersManager.deleteAuthorisationToken(key);\n                    });\n                };\n            }\n        };\n    }])\n.directive('maasPrefKeysInject',\n    ['$compile', '$templateCache',\n    function($compile, $templateCache) {\n        return {\n            restrict: 'A',\n            require: '^maasPrefKeys',\n            scope: {\n                template: '@maasPrefKeysInject'\n            },\n            link: function($scope, $element, $attrs, controller) {\n                var template = $templateCache.get($scope.template);\n                if(!template) {\n                    throw new Error(\n                        \"Unable to load template: \" + $scope.template);\n                }\n\n                // Set the injector on the controller.\n                controller.injector = function(token) {\n                    var newScope = $scope.$new();\n                    newScope.token = token;\n\n                    var newElement = angular.element(template);\n                    $element.append(newElement);\n                    $compile(newElement)(newScope);\n                };\n            }\n        };\n    }])\n.directive('maasPrefKeysAdd', function() {\n    return {\n        restrict: 'A',\n        require: '^maasPrefKeys',\n        link: function($scope, $element, $attrs, controller) {\n            var spinner = (\n                '<i class=\"p-icon--spinner u-animation--spin\"></i>');\n\n            $element.on('click', function(evt) {\n                evt.preventDefault();\n\n                // Add the spinner.\n                var spinElement = angular.element(spinner);\n                $element.prepend(spinElement);\n\n                // Add the new key.\n                $scope.$apply(function() {\n                    controller.addKey().then(function() {\n                        // Remove the spinner.\n                        spinElement.remove();\n                    });\n                });\n            });\n        }\n    };\n})\n.directive('maasPrefKey', function() {\n    return {\n        restrict: 'A',\n        require: '^maasPrefKeys',\n        scope: {\n            'key': '@maasPrefKey'\n        },\n        controller: ['$scope', '$element', function($scope, $element) {\n            var self = this;\n\n            self.deleteKey = function() {\n                $scope.prefsController.deleteKey($scope.key);\n\n                // Delete self.\n                $scope.$destroy();\n                $element.remove();\n            };\n        }],\n        link: function($scope, $element, $attrs, controller) {\n            // Needed so the controller of this directive can get the parent\n            // controller.\n            $scope.prefsController = controller;\n        }\n    };\n})\n.directive('maasPrefKeyDelete', function() {\n    return {\n        restrict: 'A',\n        require: '^maasPrefKey',\n        link: function($scope, $element, $attrs, controller) {\n            $element.on('click', function(evt) {\n                evt.preventDefault();\n\n                $scope.$apply(function() {\n                    controller.deleteKey();\n                });\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Proxy settings directive.\n*/\n\nangular.module('MAAS').directive('maasProxySettings', [\n    '$sce', 'ConfigsManager', 'ManagerHelperService', 'JSONService',\n    function($sce, ConfigsManager, ManagerHelperService, JSONService) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            templateUrl: 'static/partials/proxy-settings.html',\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                ManagerHelperService.loadManager(\n                    $scope, ConfigsManager).then(function() {\n                    $scope.loading = false;\n                    $scope.httpProxy = ConfigsManager.getItemFromList(\n                        \"http_proxy\");\n                    $scope.enableHttpProxy = ConfigsManager.getItemFromList(\n                        \"enable_http_proxy\");\n                    $scope.usePeerProxy = ConfigsManager.getItemFromList(\n                        \"use_peer_proxy\");\n                    if ($scope.enableHttpProxy.value) {\n                        if ($scope.httpProxy.value) {\n                            if ($scope.usePeerProxy.value) {\n                                $scope.proxy_type = \"peer-proxy\";\n                            } else {\n                                $scope.proxy_type = \"external-proxy\";\n                            }\n                        } else {\n                            $scope.proxy_type = \"builtin-proxy\";\n                        }\n                    } else {\n                        $scope.proxy_type = \"no-proxy\";\n                    }\n                });\n            }\n        };\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Release name.\n *\n * Converts the provided release name into the release title.\n */\n\n\nangular.module('MAAS').directive('maasReleaseName', [\n    'GeneralManager', 'ManagerHelperService',\n    function(GeneralManager, ManagerHelperService) {\n    return {\n        restrict: \"A\",\n        scope: {\n          releaseName: \"=maasReleaseName\"\n        },\n        link: function(scope, element, attrs) {\n            scope.osinfo = GeneralManager.getData(\"osinfo\");\n\n            // Gets the release name.\n            var getName = function() {\n                if(angular.isArray(scope.osinfo.releases)) {\n                  for(i = 0; i < scope.osinfo.releases.length; i++) {\n                      var release = scope.osinfo.releases[i];\n                      if(release[0] === scope.releaseName) {\n                          return release[1];\n                      }\n                  }\n                }\n                return scope.releaseName;\n            };\n\n            // Sets the text inside the element.\n            var setText = function() {\n                element.text(getName());\n            };\n\n            // Update the text when the release name or osinfo changes.\n            scope.$watch('releaseName', function() {\n              setText();\n            });\n            scope.$watchCollection('osinfo.releases', function() {\n              setText();\n            });\n        }\n    };\n}]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Release options directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the release-options.html into the template cache.\n    $templateCache.put('directive/templates/release-options.html', [\n        '<ul class=\"p-inline-list--settings u-no-margin--top\">',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"diskErase\" ',\n                    'type=\"checkbox\" data-ng-model=\"maasReleaseOptions.erase\" ',\n                    'data-ng-disabled=\"globalOptions.erase\" ',\n                    'data-ng-change=\"onEraseChange()\">',\n                '<label for=\"diskErase\">',\n                    'Erase disks before releasing',\n                '</label>',\n            '</li>',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"secureErase\" ',\n                    'type=\"checkbox\" ',\n                    'data-ng-model=\"maasReleaseOptions.secureErase\" ',\n                    'data-ng-disabled=\"!maasReleaseOptions.erase\">',\n                '<label for=\"secureErase\">',\n                    'Use secure erase',\n                '</label>',\n            '</li>',\n            '<li class=\"p-inline-list__item\">',\n                '<input id=\"quickErase\" type=\"checkbox\" ',\n                    'data-ng-model=\"maasReleaseOptions.quickErase\" ',\n                    'data-ng-disabled=\"!maasReleaseOptions.erase\">',\n                '<label for=\"quickErase\">',\n                    'Use quick erase (not secure)',\n                '</label>',\n            '</li>',\n        '</ul>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasReleaseOptions', [\n    'GeneralManager', function(GeneralManager) {\n        return {\n            restrict: \"A\",\n            scope: {\n                maasReleaseOptions: '='\n            },\n            templateUrl: 'directive/templates/release-options.html',\n            link: function(scope, element, attrs) {\n                // On click of enabling erasing set the others to the\n                // global default value.\n                scope.onEraseChange = function() {\n                    if(scope.maasReleaseOptions.erase) {\n                        scope.maasReleaseOptions.secureErase = (\n                            scope.globalOptions.secure_erase);\n                        scope.maasReleaseOptions.quickErase = (\n                            scope.globalOptions.quick_erase);\n                    } else {\n                        scope.maasReleaseOptions.secureErase = false;\n                        scope.maasReleaseOptions.quickErase = false;\n                    }\n                };\n\n                // Watch the global options. Once set update the defaults\n                // of maasReleaseOptions.\n                scope.globalOptions = GeneralManager.getData(\n                    \"release_options\");\n                scope.$watch('globalOptions', function() {\n                    if(angular.isDefined(scope.globalOptions.erase)) {\n                        // Set the initial defauls for the release options.\n                        scope.maasReleaseOptions.erase = (\n                            scope.globalOptions.erase);\n                        scope.onEraseChange();\n                    }\n                }, true);\n            }\n        };\n    }]);\n","/* Copyright 2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script expander\n *\n * Expands a scripts content.\n */\n\n\nangular.module('MAAS').directive('pScriptExpander', function() {\n    return {\n        restrict: \"C\",\n        link: function($scope, $element, $attrs) {\n            var link = $element.find('.p-script-expander__trigger');\n            var target = $element.find('.p-script-expander__content');\n            target.addClass('u-hide');\n\n            link.on('click', function(evt) {\n                evt.preventDefault();\n                target.toggleClass('u-hide');\n            });\n        }\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Script results listing directive.\n*\n*/\n\nangular.module('MAAS').directive('maasScriptResultsList', function() {\n    return {\n        templateUrl: (\n        'static/partials/script-results-list.html?v=' + (\n            MAAS_config.files_version))\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script runtime counter directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script_runtime.html into the template cache.\n    $templateCache.put('directive/templates/script_runtime.html', [\n        '<span data-ng-if=\"(scriptStatus === 1 || scriptStatus === 7) &&',\n        \" estimatedRunTime !== 'Unknown'\" + '\">{{counter}} of ',\n        '~{{estimatedRunTime}}</span>',\n        '<span data-ng-if=\"(scriptStatus === 1 || scriptStatus === 7) &&',\n        \" estimatedRunTime == 'Unknown'\" + '\">{{counter}}</span>',\n        '<span data-ng-if=\"scriptStatus === 0 && estimatedRunTime !== ',\n        \"'Unknown'\" + '\">~{{estimatedRunTime}}</span>',\n        '<span data-ng-if=\"scriptStatus !== 0 && scriptStatus !== 1 ',\n        '&& scriptStatus !== 7\">{{runTime}}</span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasScriptRunTime', function() {\n    return {\n        restrict: \"A\",\n        require: [\"startTime\", \"runTime\", \"estimatedRunTime\", \"scriptStatus\"],\n        scope: {\n            startTime: '=',\n            runTime: '@',\n            estimatedRunTime: '@',\n            scriptStatus: '='\n        },\n        templateUrl: 'directive/templates/script_runtime.html',\n        controller: function($scope, $interval) {\n            $scope.counter = \"0:00:00\";\n\n            function incrementCounter() {\n                if(($scope.scriptStatus === 1 || $scope.scriptStatus === 7) &&\n                    $scope.startTime) {\n                    var seconds = Math.floor(\n                        (Date.now() / 1000) - $scope.startTime);\n                    var minutes = Math.floor(seconds / 60);\n                    var hours = Math.floor(minutes / 60);\n                    var days = Math.floor(hours / 24);\n                    hours = hours - (days * 24);\n                    minutes = minutes - (days * 24 * 60) - (hours * 60);\n                    seconds = seconds - (days * 24 * 60 * 60) -\n                        (hours * 60 * 60) - (minutes * 60);\n                    var new_counter = \"\";\n                    // This outputs the same format used by Python. It is\n                    // import to use the same format as when scripts are not\n                    // running runtime is taken from the region using Python's\n                    // format.\n                    if(days === 1) {\n                        new_counter = days + \" day, \";\n                    }else if(days > 1) {\n                        new_counter = days + \" days, \";\n                    }\n                    new_counter += hours + \":\";\n                    if(minutes < 10) {\n                        new_counter += \"0\" + minutes + \":\";\n                    } else {\n                        new_counter += minutes + \":\";\n                    }\n                    if(seconds < 10) {\n                        new_counter += \"0\" + seconds;\n                    } else {\n                        new_counter += seconds;\n                    }\n                    $scope.counter = new_counter;\n                }\n            }\n\n            // Update the counter on init, start the interval and stop it when\n            // the directive is destroyed.\n            incrementCounter();\n            var promise = $interval(incrementCounter, 1000);\n            $scope.$on('$destroy', function() {\n              $interval.cancel(promise);\n            });\n        }\n    };\n});\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script-select.html into the template cache.\n    $templateCache.put('directive/templates/script-select.html', [\n        '<tags-input data-ng-model=\"ngModel\" placeholder=\"Select scripts\" ',\n                'key-property=\"id\" display-property=\"name\" min-length=1',\n                'on-tag-adding=\"onTagAdding($tag)\" spellcheck=\"false\"',\n                'add-from-autocomplete-only=\"true\" on-tag-removed=\"refocus()\"',\n                'on-tag-adding=\"onTagAdding($tag)\" on-tag-added=\"refocus()\">',\n            '<auto-complete source=\"getScripts($query)\" min-length=\"0\" ',\n                    'load-on-down-arrow=\"true\" load-on-focus=\"true\" ',\n                    'load-on-empty=\"true\" template=\"script-template\" ',\n                    'max-results-to-show=\"1000\">',\n            '</auto-complete>',\n        '</tags-input>',\n        '<script type=\"text/ng-template\" id=\"script-template\">',\n            '<div>',\n                '<p>',\n                    '{{data.name}} {{data.tags_string}}',\n                '</p>',\n                '<span class=\"p-form-help-text\">',\n                    '{{data.description}}',\n                '</span>',\n            '</div>',\n        '</script>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive(\n        'maasScriptSelect',\n        ['$q', 'ScriptsManager', 'ManagerHelperService',\n        function($q, ScriptsManager, ManagerHelperService) {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        scope: {\n            ngModel: '=',\n            scriptType: '='\n        },\n        templateUrl: 'directive/templates/script-select.html',\n        link: function($scope, element, attrs, ngModelCtrl) {\n\n            $scope.allScripts = ScriptsManager.getItems();\n            $scope.scripts = [];\n            $scope.getScripts = function(query) {\n                $scope.scripts.length = 0;\n                angular.forEach($scope.allScripts, function(script) {\n                    if(script.script_type === $scope.scriptType &&\n                            script.name.indexOf(query) >= 0) {\n                        script.tags_string = '';\n                        angular.forEach(script.tags, function (tag) {\n                            if(script.tags_string === '') {\n                                script.tags_string = '(' + tag;\n                            } else {\n                                script.tags_string += ', ' + tag;\n                            }\n                        });\n                        if(script.tags_string !== '') {\n                            script.tags_string += ')';\n                        }\n                        $scope.scripts.push(script);\n                    }\n                });\n                return {\n                    data: $scope.scripts\n                };\n            };\n            $scope.onTagAdding = function(tag) {\n                return tag.id !== undefined;\n            };\n\n            $scope.refocus = function() {\n                var tagsInput = element.find('tags-input');\n                var tagsInputScope = tagsInput.isolateScope();\n                tagsInputScope.eventHandlers.input.change('');\n                tagsInputScope.eventHandlers.input.focus();\n                tagsInput.find('input').focus();\n            };\n\n            if(!angular.isArray($scope.ngModel)) {\n                $scope.ngModel = [];\n            }\n            ManagerHelperService.loadManager($scope, ScriptsManager).then(\n                function() {\n                    $scope.ngModel.length = 0;\n                    angular.forEach($scope.allScripts, function(script) {\n                        if(script.script_type === $scope.scriptType &&\n                           script.for_hardware.length === 0) {\n                            if($scope.scriptType === 0) {\n                                // By default MAAS runs all custom\n                                // commissioning scripts in addition to all\n                                // builtin commissioning scripts.\n                                $scope.ngModel.push(script);\n                            } else if($scope.scriptType === 2 &&\n                                    script.tags.indexOf('commissioning') >= 0) {\n                                // By default MAAS runs testing scripts which\n                                // have been tagged 'commissioning'\n                                $scope.ngModel.push(script);\n                            }\n                        }\n                    });\n                }\n            );\n        }\n    };\n}]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Script status icon select directive.\n */\n\nangular.module('MAAS').run(['$templateCache', function ($templateCache) {\n    // Inject the script_status.html into the template cache.\n    $templateCache.put('directive/templates/script_status.html', [\n        '<span data-ng-class=\"icon\" data-ng-show=\"show\"></span>'\n    ].join(''));\n}]);\n\nangular.module('MAAS').directive('maasScriptStatus', function() {\n    return {\n        restrict: \"A\",\n        require: \"scriptStatus\",\n        scope: {\n            scriptStatus: '='\n        },\n        templateUrl: 'directive/templates/script_status.html',\n        controller: function($scope) {\n            function getIcon() {\n                $scope.show = true;\n                switch($scope.scriptStatus) {\n                    // SCRIPT_STATUS.PENDING\n                    case 0:\n                        $scope.icon = 'p-icon--pending';\n                        break;\n                    // SCRIPT_STATUS.RUNNING\n                    case 1:\n                    // SCRIPT_STATUS.INSTALLING\n                    case 7:\n                        $scope.icon = 'p-icon--running';\n                        break;\n                    // SCRIPT_STATUS.PASSED\n                    case 2:\n                        $scope.icon = 'p-icon--pass';\n                        break;\n                    // SCRIPT_STATUS.FAILED\n                    case 3:\n                    // SCRIPT_STATUS.ABORTED\n                    case 5:\n                    // SCRIPT_STATUS.DEGRADED\n                    case 6:\n                    // SCRIPT_STATUS.FAILED_INSTALLING\n                    case 8:\n                        $scope.icon = 'p-icon--power-error';\n                        break;\n                    // SCRIPT_STATUS.TIMEDOUT\n                    case 4:\n                        $scope.icon = 'p-icon--timed-out';\n                        break;\n                    // SCRIPT_STATUS.SKIPPED\n                    case 9:\n                        $scope.icon = 'p-icon--warning';\n                        break;\n                    case -1:\n                        // No scripts have been run.\n                        $scope.show = false;\n                        break;\n                    default:\n                        $scope.icon = 'p-icon--help';\n                        break;\n                }\n            }\n\n            getIcon();\n\n            $scope.$watch(\"scriptStatus\", function() {\n                getIcon();\n            });\n        }\n    };\n});\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * SSH keys directive.\n*/\n\nangular.module('MAAS').directive('maasSshKeys', [\n    '$sce', 'SSHKeysManager', 'ManagerHelperService', 'JSONService',\n    function($sce, SSHKeysManager, ManagerHelperService, JSONService) {\n        return {\n            restrict: \"E\",\n            scope: {},\n            templateUrl: (\n                'static/partials/ssh-keys.html?v=' + (\n                    MAAS_config.files_version)),\n            controller: function($scope, $rootScope, $element, $document) {\n                $scope.loading = true;\n                $scope.keys = SSHKeysManager.getItems();\n                $scope.groupedKeys = [];\n                $scope.add = {\n                    source: 'lp',\n                    authId: '',\n                    key: '',\n                    error: null,\n                    saving: false\n                };\n                $scope.sourceTitles = {\n                    'lp': 'Launchpad',\n                    'gh': 'Github',\n                    'upload': 'Upload'\n                };\n                $scope.openRow = null;\n                $scope.rowMode = null;\n\n                // Expose trustAsHtml on the scope for the view to use.\n                $scope.trustAsHtml = $sce.trustAsHtml;\n\n                // Open a row.\n                $scope.open = function(obj, mode) {\n                    $scope.openRow = obj.id;\n                    $scope.rowMode = mode;\n                };\n\n                // Close the open row.\n                $scope.close = function() {\n                    $scope.openRow = null;\n                };\n\n                // Returns true if the key can be imported.\n                $scope.canImportKeys = function() {\n                    if($scope.add.saving) {\n                        return false;\n                    } else if ($scope.add.source === 'lp' ||\n                        $scope.add.source === 'gh') {\n                        return $scope.add.authId.length > 0;\n                    } else {\n                        return $scope.add.key.length > 0;\n                    }\n                };\n\n                // Called to import the key.\n                $scope.importKeys = function() {\n                    if(!$scope.canImportKeys()) {\n                        return;\n                    }\n                    $scope.add.error = null;\n                    $scope.add.saving = true;\n                    if($scope.add.source === 'lp' ||\n                        $scope.add.source === 'gh') {\n                        SSHKeysManager.importKeys({\n                            'protocol': $scope.add.source,\n                            'auth_id': $scope.add.authId\n                        }).then(function() {\n                            $scope.add.saving = false;\n                            $scope.add.source = 'lp';\n                            $scope.add.authId = '';\n                            $scope.add.key = '';\n                        }, function(error) {\n                            $scope.add.saving = false;\n                            var errorJson = JSONService.tryParse(error);\n                            if(angular.isObject(errorJson)) {\n                                if(angular.isArray(errorJson.__all__)) {\n                                    $scope.add.error = errorJson.__all__[0];\n                                } else {\n                                    $scope.add.error = error;\n                                }\n                            } else {\n                                $scope.add.error = error;\n                            }\n                        });\n                    } else {\n                        SSHKeysManager.createItem({\n                            'key': $scope.add.key\n                        }).then(function() {\n                            $scope.add.saving = false;\n                            $scope.add.source = 'lp';\n                            $scope.add.authId = '';\n                            $scope.add.key = '';\n                        }, function(error) {\n                            $scope.add.saving = false;\n                            var errorJson = JSONService.tryParse(error);\n                            if(angular.isObject(errorJson)) {\n                                if(angular.isArray(errorJson.key)) {\n                                    $scope.add.error = errorJson.key[0];\n                                } else if(angular.isArray(errorJson.__all__)) {\n                                    $scope.add.error = errorJson.__all__[0];\n                                } else {\n                                    $scope.add.error = error;\n                                }\n                            } else {\n                                $scope.add.error = error;\n                            }\n                        });\n                    }\n                };\n\n                // Called to delete the selected group of keys.\n                $scope.confirmDelete = function(obj) {\n                    angular.forEach(obj.keys, function(key) {\n                        SSHKeysManager.deleteItem(key);\n                    });\n                };\n\n                // Updates the groupedKeys that is used to render the table.\n                $scope.$watchCollection(\"keys\", function() {\n                    $scope.groupedKeys = [];\n                    var keyMap = {};\n                    angular.forEach($scope.keys, function(key) {\n                        var groupObj, keysource = key.keysource;\n                        if(angular.isObject(keysource)) {\n                            var keysourceKey = (\n                                keysource.protocol + '/' + keysource.auth_id);\n                            groupObj = keyMap[keysourceKey];\n                            if(angular.isObject(groupObj)) {\n                                groupObj.keys.push(key);\n                            } else {\n                                groupObj = {\n                                    id: keysourceKey,\n                                    source: keysource.protocol,\n                                    authId: keysource.auth_id,\n                                    keys: [key]\n                                };\n                                keyMap[keysourceKey] = groupObj;\n                                $scope.groupedKeys.push(groupObj);\n                            }\n                        } else {\n                            groupObj = {\n                                id: 'upload/' + key.id,\n                                source: 'upload',\n                                authId: '',\n                                keys: [key]\n                            };\n                            $scope.groupedKeys.push(groupObj);\n                        }\n                    });\n                });\n\n                ManagerHelperService.loadManager($scope, SSHKeysManager).then(\n                    function() {\n                        $scope.loading = false;\n                    });\n            }\n        };\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n* GNU Affero General Public License version 3 (see the file LICENSE).\n*\n* Switches listing directive.\n*\n* Renders the switches listing.\n*/\n\n\nangular.module('MAAS').directive('maasSwitchesTable', [\n  'SwitchesManager', 'GeneralManager', 'ManagerHelperService',\n  function (SwitchesManager, GeneralManager, ManagerHelperService) {\n    return {\n      restrict: \"E\",\n      scope: {\n        search: \"=\",\n        ngDisabled: \"&\",\n        switchHasError: \"&\",\n        hideCheckboxes: \"=?\",\n        onListingChange: \"&\",\n        onCheckAll: \"&\",\n        onCheck: \"&\"\n      },\n      templateUrl: (\n        'static/partials/switches-table.html?v=' + (\n          MAAS_config.files_version)),\n      link: function(scope, element, attrs) {\n        // Statuses that should show spinner.\n        var SPINNER_STATUSES = [\n          1,   // commissioning\n          9,   // deploying\n          12,  // releasing\n          14,  // disk erasing\n          17,  // entering rescue mode\n          19,  // exiting rescue mode\n          21   // testing\n        ];\n\n        // Scope variables.\n        scope.table = {\n          column: 'fqdn',\n          predicate: 'fqdn',\n          reverse: false,\n          allViewableChecked: false,\n          switches: SwitchesManager.getItems(),\n          filteredSwitches: [],\n          osinfo: GeneralManager.getData(\"osinfo\")\n        };\n\n        // Ensures that the checkbox for select all is the correct value.\n        scope.updateAllChecked = function() {\n          // Not checked when the filtered switches are empty.\n          if(scope.table.filteredSwitches.length === 0) {\n              scope.table.allViewableChecked = false;\n              return;\n          }\n\n          // Loop through all filtered switches and see if all are checked.\n          var i;\n          for(i = 0; i < scope.table.filteredSwitches.length; i++) {\n              if(!scope.table.filteredSwitches[i].$selected) {\n                  scope.table.allViewableChecked = false;\n                  return;\n              }\n          }\n          scope.table.allViewableChecked = true;\n        };\n\n        // Selects and deselects visible switches.\n        scope.toggleCheckAll = function() {\n          if(scope.table.allViewableChecked) {\n            angular.forEach(\n              scope.table.filteredSwitches, function(switch_) {\n                SwitchesManager.unselectItem(switch_.system_id);\n              });\n          } else {\n            angular.forEach(\n              scope.table.filteredSwitches, function(switch_) {\n                SwitchesManager.selectItem(switch_.system_id);\n              });\n          }\n          scope.updateAllChecked();\n          scope.onCheckAll();\n        };\n\n        // Selects and unselects switch.\n        scope.toggleChecked = function(switch_) {\n          if(SwitchesManager.isSelected(switch_.system_id)) {\n            SwitchesManager.unselectItem(switch_.system_id);\n          } else {\n            SwitchesManager.selectItem(switch_.system_id);\n          }\n          scope.updateAllChecked();\n          scope.onCheck({$switch_: switch_});\n        };\n\n        // Sorts the table by predicate.\n        scope.sortTable = function(predicate) {\n            scope.table.predicate = predicate;\n            scope.table.reverse = !scope.table.reverse;\n        };\n\n        // Sets the viewable column or sorts.\n        scope.selectColumnOrSort = function(predicate) {\n            if(scope.table.column !== predicate) {\n                scope.table.column = predicate;\n            } else {\n                scope.sortTable(predicate);\n            }\n        };\n\n        // Return true if spinner should be shown.\n        scope.showSpinner = function(switch_) {\n          return SPINNER_STATUSES.indexOf(switch_.status_code) > -1;\n        };\n\n        // Returns the release title from osinfo.\n        scope.getReleaseTitle = function(os_release) {\n          if(angular.isArray(scope.table.osinfo.releases)) {\n            for(i = 0; i < scope.table.osinfo.releases.length; i++) {\n              var release = scope.table.osinfo.releases[i];\n              if(release[0] === os_release) {\n                return release[1];\n              }\n            }\n          }\n          return os_release;\n        };\n\n        // Returns the status text to show.\n        scope.getStatusText = function(switch_) {\n          var showRelease = ['Deploying', 'Deployed'];\n          if(showRelease.indexOf(switch_.status) === -1) {\n            return switch_.status;\n          } else {\n            var releaseTitle = scope.getReleaseTitle(\n              switch_.osystem + '/' + switch_.distro_series);\n            if(switch_.osystem === \"ubuntu\") {\n              releaseTitle = releaseTitle.split('\"')[0].trim();\n            }\n            if(switch_.status === \"Deployed\") {\n              return releaseTitle;\n            }\n            if(switch_.status === \"Deploying\") {\n              return switch_.status + ' ' + releaseTitle;\n            }\n          }\n        };\n\n        // When the list of filtered switches change update the all checkbox.\n        scope.$watchCollection(\"table.filteredSwitches\", function() {\n          scope.updateAllChecked();\n          scope.onListingChange({$switches: scope.table.filteredSwitches});\n        });\n      }\n    };\n}]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Toggle control.\n */\n\nangular.module('MAAS').directive('toggleCtrl',[\n    '$document',\n    function($document) {\n        return {\n            restrict: 'A',\n            link: function($scope, $element, $attr){\n\n                $scope.isToggled = false;\n                $scope.toggleMenu = function() {\n                  $scope.isToggled = !$scope.isToggled;\n                };\n\n                var clickHandler = function(event) {\n                    if ($element.find(event.target).length > 0) {\n                        return;\n                    }\n                    $scope.$apply(function() {\n                        $scope.isToggled = false;\n                    });\n                };\n\n                $document.on('click', clickHandler);\n                $scope.$on('$destroy', function() {\n                    $document.off('click', clickHandler);\n                });\n            }\n        };\n}]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Type directive.\n */\n\nangular.module('MAAS').directive('ngType', function() {\n    return {\n        restrict: \"A\",\n        scope: {\n            ngType: \"=\"\n        },\n        link: function(scope, element, attrs) {\n            scope.$watch('ngType', function() {\n                valid_types = [\n                    'button',\n                    'checkbox',\n                    'color',\n                    'date ',\n                    'datetime ',\n                    'datetime-local ',\n                    'email ',\n                    'file',\n                    'hidden',\n                    'image',\n                    'month ',\n                    'number ',\n                    'password',\n                    'radio',\n                    'range ',\n                    'reset',\n                    'search',\n                    'submit',\n                    'tel',\n                    'text',\n                    'time ',\n                    'url',\n                    'week'\n                ];\n                if(valid_types.indexOf(scope.ngType) !== -1) {\n                    element[0].type = scope.ngType;\n                }\n                else {\n                    throw new Error(\"Invalid input type: \" + scope.ngType);\n                }\n\n            });\n        }\n    };\n});","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Version reloader.\n *\n * Watches the version reported by the GeneralManager if it changes then\n * the entire page is reloaded by-passing the local browser cache.\n */\n\n\nangular.module('MAAS').directive('maasVersionReloader', [\n    '$window', 'GeneralManager', 'ManagerHelperService', 'LogService',\n    function($window, GeneralManager, ManagerHelperService, LogService) {\n        return {\n            restrict: \"A\",\n            controller: function($scope) {\n                $scope.version = GeneralManager.getData(\"version\");\n\n                // Reload the page by-passing the browser cache.\n                $scope.reloadPage = function() {\n                    // Force cache reload by passing true.\n                    $window.location.reload(true);\n                };\n\n                ManagerHelperService.loadManager($scope, GeneralManager).then(\n                    function() {\n                        GeneralManager.enableAutoReload(true);\n                        LogService.info(\n                            'Version reloader: Monitoring MAAS \"' +\n                            $scope.site + '\"; version', $scope.version.text,\n                            \"via\", $window.location.href);\n                        $scope.$watch(\"version.text\",\n                            function(newValue, oldValue) {\n                                if(newValue !== oldValue) {\n                                    LogService.info(\n                                        \"MAAS version changed from '\" +\n                                        oldValue + \"' to '\" + newValue +\n                                        \"'; forcing reload.\");\n                                    $scope.reloadPage();\n                                }\n                            });\n                    });\n            }\n        };\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Window Width.\n *\n * Watches the window width and calculates what the inner width of the window.\n * Applying the attribute window-wdith on the parent element and calling\n * data-ng-if=\"width > 768\" you can use this to hide / show elements for mobile\n * development.\n *\n */\n\n\nangular.module('MAAS').directive('windowWidth', [\n    '$window',\n    function ($window) {\n        return {\n            restrict: 'A',\n            link: function($scope, element, attrs){\n                $scope.windowWidth = $window.innerWidth;\n                function onResize(){\n                    // uncomment for only fire when $window.innerWidth change\n                    if ($scope.windowWidth !== $window.innerWidth) {\n                        $scope.windowWidth = $window.innerWidth;\n                        $scope.$apply(function () {\n                            $scope.message = \"Timeout called!\";\n                        });\n                    }\n                }\n\n                function cleanUp() {\n                    angular.element($window).off('resize', onResize);\n                }\n\n                angular.element($window).on('resize', onResize);\n                $scope.$on('$destroy', cleanUp);\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS BootResource Manager\n *\n * Manager for the boot resources. This manager is unique from all the other\n * managers because it uses polling instead of having the region push the\n * information.\n *\n * Why is it polling?\n * The boot resource information is split between the region controller and\n * all rack controllers. The region controller does not cache any information\n * about a rack controllers images it contacts the rack as its source of truth.\n * This means that the client needs to use polling so the region controller\n * can ask each rack controller what is the status of your images.\n */\n\nangular.module('MAAS').factory(\n    'BootResourcesManager',\n    ['$q', '$timeout', 'RegionConnection', 'ErrorService',\n    function($q, $timeout, RegionConnection, ErrorService) {\n\n        // Constructor\n        function BootResourcesManager() {\n            // Set true once been loaded the first time.\n            this._loaded = false;\n\n            // Holds the data recieved from polling.\n            this._data = {};\n\n            // Set to true when polling has been enabled.\n            this._polling = false;\n\n            // The next promise for the polling interval.\n            this._nextPromise = null;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 500;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n        }\n\n        // Return the data.\n        BootResourcesManager.prototype.getData = function() {\n            return this._data;\n        };\n\n        // Return true when data has been loaded.\n        BootResourcesManager.prototype.isLoaded = function() {\n            return this._loaded;\n        };\n\n        // Returns true when currently polling.\n        BootResourcesManager.prototype.isPolling = function() {\n            return this._polling;\n        };\n\n        // Starts the polling for data.\n        BootResourcesManager.prototype.startPolling = function() {\n            if(!this._polling) {\n                this._polling = true;\n                return this._poll();\n            } else {\n                return this._nextPromise;\n            }\n        };\n\n        // Stops the polling for data.\n        BootResourcesManager.prototype.stopPolling = function() {\n            this._polling = false;\n            if(angular.isObject(this._nextPromise)) {\n                $timeout.cancel(this._nextPromise);\n                this._nextPromise = null;\n            }\n        };\n\n        // Load the data from the region.\n        BootResourcesManager.prototype._loadData = function(raiseError) {\n            raiseError = raiseError || false;\n            var self = this;\n            return RegionConnection.callMethod(\"bootresource.poll\").then(\n                function(newData) {\n                    angular.copy(angular.fromJson(newData), self._data);\n                    self._loaded = true;\n                    return self._data;\n                }, function(error) {\n                    if(raiseError) {\n                        ErrorService.raiseError(error);\n                    }\n                });\n        };\n\n        // Registers the next polling attempt.\n        BootResourcesManager.prototype._pollAgain = function(timeout) {\n            var self = this;\n            this._nextPromise = $timeout(function() {\n                self._poll();\n            }, timeout);\n            return this._nextPromise;\n        };\n\n        // Polls for the data from the region.\n        BootResourcesManager.prototype._poll = function() {\n            var self = this;\n\n            // Can only poll if connected.\n            if(!RegionConnection.isConnected()) {\n                return this._pollAgain(this._pollErrorTimeout);\n            }\n\n            return this._loadData(false).then(function(newData) {\n                var pollTimeout = self._pollTimeout;\n                if(!angular.isObject(newData) ||\n                    newData.connection_error ||\n                    !angular.isArray(newData.resources) ||\n                    newData.resources.length === 0) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(pollTimeout);\n                return newData;\n            }, function(error) {\n                // Don't raise the error, just log it and try again.\n                console.log(error);\n                self._pollAgain(self._pollErrorTimeout);\n            });\n        };\n\n        // Loads the resources. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest.\n        BootResourcesManager.prototype.loadItems = function() {\n            var defer = $q.defer();\n            this._loadData(true).then(function() {\n                defer.resolve();\n            });\n            return defer.promise;\n        };\n\n        // Does nothing. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest.\n        BootResourcesManager.prototype.enableAutoReload = function() { };\n\n        // Stop the running image import process.\n        BootResourcesManager.prototype.stopImport = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.stop_import\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the ubuntu options and start the import process.\n        BootResourcesManager.prototype.saveUbuntu = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_ubuntu\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the Ubuntu Core images and start the import process.\n        BootResourcesManager.prototype.saveUbuntuCore = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_ubuntu_core\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Save the other images and start the import process.\n        BootResourcesManager.prototype.saveOther = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.save_other\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        // Fetch the releases and arches from the provided source.\n        BootResourcesManager.prototype.fetch = function(source) {\n            return RegionConnection.callMethod(\"bootresource.fetch\", source);\n        };\n\n        // Delete an image.\n        BootResourcesManager.prototype.deleteImage = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"bootresource.delete_image\", params).then(\n                    function(newData) {\n                        angular.copy(angular.fromJson(newData), self._data);\n                        self._loaded = true;\n                        return self._data;\n                    });\n        };\n\n        return new BootResourcesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Configs Manager\n *\n * Manages all of the config values in the browser. This manager is used for\n * the first-user journey and the settings page.\n */\n\n angular.module('MAAS').factory(\n     'ConfigsManager',\n     ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n             $q, $rootScope, RegionConnection, Manager) {\n\n         function ConfigsManager() {\n             Manager.call(this);\n\n             this._pk = \"name\";\n             this._handler = \"config\";\n\n             // Listen for notify events for the config object.\n             var self = this;\n             RegionConnection.registerNotifier(\"config\",\n                 function(action, data) {\n                     self.onNotify(action, data);\n                 });\n         }\n\n         ConfigsManager.prototype = new Manager();\n\n         return new ConfigsManager();\n     }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Controllers Manager\n *\n * Manages all of the controllers in the browser. This manager is used for the\n * controller listing and view pages. The manager is a subclass of\n * NodesManager.\n */\n\nangular.module('MAAS').factory(\n    'ControllersManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', 'ServicesManager',\n            function($q, $rootScope, RegionConnection, NodesManager,\n            ServicesManager) {\n\n        function ControllersManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"controller\";\n\n            // Listen for notify events for the controller object.\n            var self = this;\n            RegionConnection.registerNotifier(\"controller\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n        ControllersManager.prototype = new NodesManager();\n\n        ControllersManager.prototype.getServices = function(controller) {\n            var services = [];\n            angular.forEach(controller.service_ids, function(service_id) {\n                var service = ServicesManager.getItemFromList(service_id);\n                if(angular.isObject(service)) {\n                    services.push(service);\n                }\n            });\n            return services;\n        };\n\n        // Check the boot image import status.\n        ControllersManager.prototype.checkImageStates = function(controllers) {\n            return RegionConnection.callMethod(\n                this._handler + \".check_images\", controllers);\n        };\n\n        return new ControllersManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Devices Manager\n *\n * Manages all of the devices in the browser. This manager is used for the\n * device listing and the device view page. The manager uses the\n * RegionConnection to load the devices, update the devices, and listen for\n * notification events about devices.\n */\n\nangular.module('MAAS').factory(\n    'DevicesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function DevicesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"device\";\n            this._metadataAttributes = {\n                \"owner\": null,\n                \"subnets\": null,\n                \"tags\": null,\n                \"zone\": function(device) {\n                    return device.zone.name;\n                }\n            };\n\n            // Listen for notify events for the device object.\n            var self = this;\n            RegionConnection.registerNotifier(\"device\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        DevicesManager.prototype = new NodesManager();\n\n        // Create a device.\n        DevicesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the device to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"device.create\", node);\n        };\n\n        // Create an interface on device.\n        DevicesManager.prototype.createInterface = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"device.create_interface\", params).then(function(device) {\n                    self._replaceItem(device);\n                    return device;\n                });\n        };\n\n        // Perform the action on the device.\n        DevicesManager.prototype.performAction = function(\n            device, action, extra) {\n\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(\"device.action\", {\n                \"system_id\": device.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        return new DevicesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS DHCPSnippet Manager\n *\n * Manages all of the DHCPSnippets in the browser. The manager uses the\n * RegionConnection to load the DHCPSnippets, update the DHCPSnippets, and\n * listen for notification events about DHCPSnippets.\n */\n\nangular.module('MAAS').factory(\n    'DHCPSnippetsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function DHCPSnippetsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"dhcpsnippet\";\n\n            // Listen for notify events for the DHCPSnippet object.\n            var self = this;\n            RegionConnection.registerNotifier(\"dhcpsnippet\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        DHCPSnippetsManager.prototype = new Manager();\n\n        // Create the snippet.\n        DHCPSnippetsManager.prototype.create = function(snippet) {\n            return RegionConnection.callMethod(\n                this._handler + \".create\", snippet, true);\n        };\n\n        return new DHCPSnippetsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Discovery Manager\n *\n * A Discovery is a MAC, IP binding with an optional hostname that MAAS\n * believes it has discovered. It is associated with a particular fabric and\n * VLAN, and is aware of which rack or region interface most recently\n * discovered it.\n *\n * This class manages all of the discoveries in the browser. It uses the\n * RegionConnection to load the discoveries and listen for notification events\n * about discoveries.\n */\n\nangular.module('MAAS').factory(\n    'DiscoveriesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'PollingManager',\n    function($q, $rootScope, RegionConnection, PollingManager) {\n\n        function DiscoveriesManager() {\n            PollingManager.call(this);\n\n            this._pk = \"first_seen\";\n            this._batchKey = \"first_seen\";\n            this._handler = \"discovery\";\n\n            // Poll every 10 seconds when its empty as its okay for\n            // this to be empty.\n            this._pollEmptyTimeout = 5000;\n        }\n\n        DiscoveriesManager.prototype = new PollingManager();\n\n        return new DiscoveriesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Domain Manager\n *\n * Manages all of the domains in the browser. The manager uses the\n * RegionConnection to load the domains, update the domains, and listen for\n * notification events about domains.\n */\n\nangular.module('MAAS').factory(\n    'DomainsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function DomainsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"domain\";\n\n            // Listen for notify events for the domain object.\n            var self = this;\n            RegionConnection.registerNotifier(\"domain\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        DomainsManager.prototype = new Manager();\n\n        // Create a domain.\n        DomainsManager.prototype.create = function(domain) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"domain.create\", domain);\n        };\n\n        // Delete the domain.\n        DomainsManager.prototype.deleteDomain = function(domain) {\n            return RegionConnection.callMethod(\"domain.delete\", domain);\n        };\n\n        // Create a DNS record.\n        DomainsManager.prototype.createDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.create_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.create_dnsdata\", record);\n            }\n        };\n\n        // Update a DNS record.\n        DomainsManager.prototype.updateDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.update_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.update_dnsdata\", record);\n            }\n        };\n\n        // Delete a DNS record.\n        DomainsManager.prototype.deleteDNSRecord = function(record) {\n            if(record.rrtype === 'A' || record.rrtype === 'AAAA') {\n                record.ip_addresses = record.rrdata.split(/[ ,]+/);\n                return RegionConnection.callMethod(\n                    \"domain.delete_address_record\", record);\n            } else {\n                return RegionConnection.callMethod(\n                    \"domain.delete_dnsdata\", record);\n            }\n        };\n\n        DomainsManager.prototype.getDefaultDomain = function() {\n            if(this._items.length === 0) {\n                return null;\n            } else {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].id === 0) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return this._items[0];\n        };\n\n        DomainsManager.prototype.getDomainByName = function(name) {\n            if(this._items.length > 0) {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].name === name) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return null;\n        };\n\n        return new DomainsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Event Manager Factory\n *\n * Manages all of the events for a node in the browser. The manager uses the\n * RegionConnection to load the events and listen for event notifications.\n */\n\nangular.module('MAAS').factory(\n    'EventsManagerFactory',\n    ['RegionConnection', 'Manager', 'ErrorService',\n    function(RegionConnection, Manager, ErrorService) {\n\n        function EventsManager(nodeId, factory) {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"event\";\n            this._nodeId = nodeId;\n            this._factory = factory;\n            this._maxDays = 1;\n        }\n\n        EventsManager.prototype = new Manager();\n\n        // Return the initial batch parameters with the id of the node\n        // and the maximum number of days to load.\n        EventsManager.prototype._initBatchLoadParameters = function() {\n            return {\n                \"node_id\": this._nodeId,\n                \"max_days\": this._maxDays\n            };\n        };\n\n        // Destroys its self. Removes self from the EventsManagerFactory.\n        EventsManager.prototype.destroy = function(){\n            this._factory.destroyManager(this);\n\n            // If this manager has ever loaded then the region is sending\n            // events about this node. Tell the RegionConnection not to\n            // stop sending notification for events from this node.\n            if(this.isLoaded()) {\n                RegionConnection.callMethod(\"event.clear\", {\n                    node_id: this._nodeId\n                });\n            }\n        };\n\n        // Get the maximum number of days the manager will load.\n        EventsManager.prototype.getMaximumDays = function() {\n            return this._maxDays;\n        };\n\n        // Changes the maximum number of days to load and loads the items.\n        EventsManager.prototype.loadMaximumDays = function(days) {\n            var self = this;\n            var setMaximumDays = function() {\n                self._maxDays = days;\n                self.loadItems();\n            };\n\n            if(this.isLoading()) {\n                // Call loadItems to get an extra defer to know when\n                // the loading is done.\n                this.loadItems().then(function() {\n                    setMaximumDays();\n                });\n            } else {\n                setMaximumDays();\n            }\n        };\n\n        // Factory that holds all created EventsManagers.\n        function EventsManagerFactory() {\n            // Holds a list of all EventsManager that have been created.\n            this._managers = [];\n\n            // Listen for notify events for the event object.\n            var self = this;\n            RegionConnection.registerNotifier(\"event\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        // Gets the EventManager for the nodes with node_id.\n        EventsManagerFactory.prototype._getManager = function(nodeId) {\n            var i;\n            for(i = 0; i < this._managers.length; i++) {\n                if(this._managers[i]._nodeId === nodeId) {\n                    return this._managers[i];\n                }\n            }\n            return null;\n        };\n\n        // Gets the EventManager for the nodes node_id. Creates a new manager\n        // if one does not exist.\n        EventsManagerFactory.prototype.getManager = function(nodeId) {\n            var manager = this._getManager(nodeId);\n            if(!angular.isObject(manager)) {\n                // Not created so create it.\n                manager = new EventsManager(nodeId, this);\n                this._managers.push(manager);\n                return manager;\n            }\n            return manager;\n        };\n\n        // Destroy the EventManager.\n        EventsManagerFactory.prototype.destroyManager = function(manager) {\n            var idx = this._managers.indexOf(manager);\n            if(idx >= 0) {\n                this._managers.splice(idx, 1);\n            }\n        };\n\n        // Called when the RegionConnection gets a notification for an event.\n        EventsManagerFactory.prototype.onNotify = function(action, data) {\n            if(action === \"delete\") {\n                // Send all delete actions to all managers. Only one will\n                // remove the event with the given id.\n                angular.forEach(this._managers, function(manager) {\n                    manager.onNotify(action, data);\n                });\n            } else if (action === \"create\" || action === \"update\") {\n                // Get the manager based on the node_id in data, and send\n                // it the notification.\n                var manager = this._getManager(data.node_id);\n                if(angular.isObject(manager)) {\n                    manager.onNotify(action, data);\n                }\n            }\n        };\n\n        return new EventsManagerFactory();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Fabric Manager\n *\n * Manages all of the fabrics in the browser. The manager uses the\n * RegionConnection to load the fabrics, update the fabrics, and listen for\n * notification events about fabrics.\n */\n\nangular.module('MAAS').factory(\n    'FabricsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'VLANsManager',\n    function(\n    $q, $rootScope, RegionConnection, Manager, VLANsManager) {\n\n        function FabricsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"fabric\";\n\n            // Listen for notify events for the fabric object.\n            var self = this;\n            RegionConnection.registerNotifier(\"fabric\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        FabricsManager.prototype = new Manager();\n\n        // Given a Fabric object, returns its display name.\n        FabricsManager.prototype.getName = function(fabric) {\n            if(!angular.isObject(fabric)) {\n                return;\n            }\n            if(angular.isString(fabric.name)) {\n                return fabric.name;\n            } else {\n                return this._handler + \"-\" + fabric[this._pk];\n            }\n        };\n\n        // Delete the Fabric.\n        FabricsManager.prototype.deleteFabric = function(fabric) {\n            return RegionConnection.callMethod(\n                \"fabric.delete\", { \"id\": fabric.id }, true);\n        };\n\n        // Create a Fabric.\n        FabricsManager.prototype.create = function(fabric) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"fabric.create\", fabric);\n        };\n\n\n        return new FabricsManager();\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS General Manager\n *\n * Manager for general information from the region. The general handler on the\n * region side does not push information to the client. This manager uses\n * polling to grab this data periodically from the region.\n *\n * This manage provides different pieces of data and is structure differently\n * than extending the Manager service. It still provides the Manager service\n * interface allowing the ManagerHelperService to load this manager.\n */\n\nangular.module('MAAS').factory(\n    'GeneralManager',\n    ['$q', '$timeout', 'RegionConnection', 'ErrorService',\n    function($q, $timeout, RegionConnection, ErrorService) {\n\n        // Constructor\n        function GeneralManager() {\n            // Holds the available endpoints and its data.\n            this._data = {\n                machine_actions: {\n                    method: \"general.machine_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                device_actions: {\n                    method: \"general.device_actions\",\n                    data: [],\n                    request: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                region_controller_actions: {\n                    method: \"general.region_controller_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                rack_controller_actions: {\n                    method: \"general.rack_controller_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                region_and_rack_controller_actions: {\n                    method: \"general.region_and_rack_controller_actions\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                architectures: {\n                    method: \"general.architectures\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                known_architectures: {\n                    method: \"general.known_architectures\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                pockets_to_disable: {\n                    method: \"general.pockets_to_disable\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                components_to_disable: {\n                    method: \"general.components_to_disable\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                hwe_kernels: {\n                    method: \"general.hwe_kernels\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                min_hwe_kernels: {\n                    method: \"general.min_hwe_kernels\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null\n                },\n                default_min_hwe_kernel: {\n                    method: \"general.default_min_hwe_kernel\",\n                    data: { text: '' },\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        oldData.text = newData;\n                    }\n                },\n                osinfo: {\n                    method: \"general.osinfo\",\n                    data: {},\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    isEmpty: function(data) {\n                        var osystems = data.osystems;\n                        return (angular.isUndefined(osystems) ||\n                            osystems.length === 0);\n                    },\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                },\n                bond_options: {\n                    method: \"general.bond_options\",\n                    data: {},\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                },\n                version: {\n                    method: \"general.version\",\n                    data: { text: null },\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        oldData.text = newData;\n                    }\n                },\n                power_types: {\n                    method: \"general.power_types\",\n                    data: [],\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        // Add new power types.\n                        var i, j, newPowerType, oldPowerType;\n                        for(i = 0; i < newData.length; i++) {\n                            newPowerType = newData[i];\n                            var newItem = true;\n                            for(j = 0; j < oldData.length; j++) {\n                                oldPowerType = oldData[j];\n                                if(newPowerType.name === oldPowerType.name) {\n                                    newItem = false;\n                                    break;\n                                }\n                            }\n\n                            // Item was previously not in the list so it is\n                            // inserted into the array.\n                            if(newItem) {\n                                oldData.push(newPowerType);\n                            }\n                        }\n\n                        // Remove any power types that are not included in\n                        // the newData.\n                        for(i = oldData.length - 1; i >= 0; i--) {\n                            oldPowerType = oldData[i];\n                            var found = false;\n                            for(j = 0; j < newData.length; j++) {\n                                newPowerType = newData[j];\n                                if(newPowerType.name === oldPowerType.name) {\n                                    found = true;\n                                    break;\n                                }\n                            }\n\n                            // Item was previously not in the list so it is\n                            // inserted into the array.\n                            if(!found) {\n                                oldData.splice(i, 1);\n                            }\n                        }\n                    }\n                },\n                release_options: {\n                    method: \"general.release_options\",\n                    data: {},\n                    requested: false,\n                    loaded: false,\n                    polling: [],\n                    nextPromise: null,\n                    replaceData: function(oldData, newData) {\n                        angular.copy(newData, oldData);\n                    }\n                }\n            };\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 3000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n\n            // Set to true when the items list should reload upon re-connection\n            // to the region.\n            this._autoReload = false;\n\n            // Use the same notify type as a default manager.\n            this._type = 'notify';\n\n            // The scopes that have loaded this manager.\n            this._scopes = [];\n        }\n\n        GeneralManager.prototype._getInternalData = function(name) {\n            var data = this._data[name];\n            if(angular.isUndefined(data)) {\n                throw new Error(\"Unknown data: \" + name);\n            }\n            return data;\n        };\n\n        // Return loaded data.\n        GeneralManager.prototype.getData = function(name) {\n            var d = this._getInternalData(name);\n            d.requested = true;\n            return d.data;\n        };\n\n        // Return true when all data has been loaded.\n        GeneralManager.prototype.isLoaded = function() {\n            var loaded = true;\n            angular.forEach(this._data, function(data) {\n                if(!data.loaded) {\n                    loaded = false;\n                }\n            });\n            return loaded;\n        };\n\n        // Return true when data has been loaded.\n        GeneralManager.prototype.isDataLoaded = function(name) {\n            return this._getInternalData(name).loaded;\n        };\n\n        // Returns true when the manager is currently polling.\n        GeneralManager.prototype.isPolling = function() {\n            var polling = false;\n            angular.forEach(this._data, function(data) {\n                if(data.polling.length > 0) {\n                    polling = true;\n                }\n            });\n            return polling;\n        };\n\n        // Returns true when the manager is currently polling for that data.\n        GeneralManager.prototype.isDataPolling = function(name) {\n            return this._getInternalData(name).polling;\n        };\n\n        // Starts the manager polling for data.\n        GeneralManager.prototype.startPolling = function(scope, name) {\n            var data = this._getInternalData(name);\n            var idx = data.polling.indexOf(scope);\n            if(idx === -1) {\n                data.polling.push(scope);\n                if(data.polling.length === 1) {\n                    // Polling needs to be started. This is the first scope\n                    // that is requesting for polling to be performed.\n                    this._poll(data);\n                }\n            }\n        };\n\n        // Stops the manager polling for data.\n        GeneralManager.prototype.stopPolling = function(scope, name) {\n            var data = this._getInternalData(name);\n            var idx = data.polling.indexOf(scope);\n            if(idx >= 0) {\n                data.polling.splice(idx, 1);\n            }\n            if(data.polling.length === 0 &&\n                angular.isObject(data.nextPromise)) {\n                $timeout.cancel(data.nextPromise);\n                data.nextPromise = null;\n            }\n        };\n\n        // Load the data from the region.\n        GeneralManager.prototype._loadData = function(data, raiseError) {\n            var replaceData = data.replaceData;\n            raiseError = raiseError || false;\n\n            // Set default replaceData function if data doesn't provide its\n            // own function.\n            if(angular.isUndefined(replaceData)) {\n                replaceData = function(oldData, newData) {\n                    oldData.length = 0;\n                    oldData.push.apply(oldData, newData);\n                };\n            }\n\n            return RegionConnection.callMethod(data.method).then(\n                function(newData) {\n                    replaceData(data.data, newData);\n                    data.loaded = true;\n                    return data.data;\n                }, function(error) {\n                    if(raiseError) {\n                        ErrorService.raiseError(error);\n                    }\n                    return error;\n                });\n        };\n\n        GeneralManager.prototype._pollAgain = function(data, timeout) {\n            var self = this;\n            data.nextPromise = $timeout(function() {\n                self._poll(data);\n            }, timeout);\n        };\n\n        // Polls for the data from the region.\n        GeneralManager.prototype._poll = function(data) {\n            var self = this;\n            var isEmpty = data.isEmpty;\n\n            // Set default isEmpty function if data doesn't provide its\n            // own function.\n            if(angular.isUndefined(isEmpty)) {\n                isEmpty = function(data) {\n                    return data.length === 0;\n                };\n            }\n\n            // Can only poll if connected.\n            if(!RegionConnection.isConnected()) {\n                this._pollAgain(data, this._pollErrorTimeout);\n                return;\n            }\n\n            return this._loadData(data, false).then(function(newData) {\n                var pollTimeout = self._pollTimeout;\n                if(isEmpty(data.data)) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(data, pollTimeout);\n                return newData;\n            }, function(error) {\n                // Don't raise the error, just log it and try again.\n                console.log(error);\n                self._pollAgain(data, self._pollErrorTimeout);\n            });\n        };\n\n        // Loads all the items. This implemented so the ManagerHelperService\n        // can work on this manager just like all the rest. Optionally pass a\n        // list of specific items to load. Useful when reloading data.\n        GeneralManager.prototype.loadItems = function(items) {\n            var self = this;\n            var defer = $q.defer();\n            var waitingCount = 0;\n            if(angular.isArray(items)) {\n                waitingCount = items.length;\n            }else{\n                angular.forEach(this._data, function(data) {\n                    if(data.requested) {\n                        waitingCount++;\n                    }\n                });\n            }\n            var done = function() {\n                waitingCount -= 1;\n                if(waitingCount === 0) {\n                    defer.resolve();\n                }\n            };\n\n            angular.forEach(this._data, function(data, name) {\n                if((angular.isArray(items) && items.indexOf(name) !== -1) ||\n                        (!angular.isArray(items) && data.requested)) {\n                    self._loadData(data, true).then(function() {\n                        done();\n                    });\n                }\n            });\n\n            return defer.promise;\n        };\n\n        // Enables auto reloading of the item list on connection to region.\n        GeneralManager.prototype.enableAutoReload = function() {\n            if(!this._autoReload) {\n                this._autoReload = true;\n                var self = this;\n                this._reloadFunc = function() {\n                    self.loadItems();\n                };\n                RegionConnection.registerHandler(\"open\", this._reloadFunc);\n            }\n        };\n\n        // Disable auto reloading of the item list on connection to region.\n        GeneralManager.prototype.disableAutoReload = function() {\n            if(this._autoReload) {\n                RegionConnection.unregisterHandler(\"open\", this._reloadFunc);\n                this._reloadFunc = null;\n                this._autoReload = false;\n            }\n        };\n\n        return new GeneralManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS IPRange Manager\n *\n * Manages all of the IPRanges in the browser. The manager uses the\n * RegionConnection to load the IPRanges, update the IPRanges, and listen for\n * notification events about IPRanges.\n */\n\nangular.module('MAAS').factory(\n    'IPRangesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function IPRangesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"iprange\";\n\n            // Listen for notify events for the iprange object.\n            var self = this;\n            RegionConnection.registerNotifier(\"iprange\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        IPRangesManager.prototype = new Manager();\n\n        return new IPRangesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Machines Manager\n *\n * Manages all of the machines in the browser. This manager is used for the\n * machine listing and view pages. The manager is a subclass of NodesManager.\n */\n\nangular.module('MAAS').factory(\n    'MachinesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function MachinesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"machine\";\n\n            this._metadataAttributes = {\n                \"architecture\": null,\n                \"status\": null,\n                \"owner\": null,\n                \"tags\": null,\n                \"pod\": function(machine) {\n                    return (machine.pod === undefined) ? '' :machine.pod.name;\n                },\n                \"zone\": function(machine) {\n                    return machine.zone.name;\n                },\n                \"subnets\": null,\n                \"fabrics\": null,\n                \"spaces\": null,\n                \"storage_tags\": null,\n                \"release\": function(machine) {\n                    if(machine.status_code === 6 || machine.status_code === 9) {\n                        return machine.osystem + \"/\" + machine.distro_series;\n                    } else {\n                        return '';\n                    }\n                }\n            };\n\n            // Listen for notify events for the machine object.\n            var self = this;\n            RegionConnection.registerNotifier(\"machine\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n\n        }\n        MachinesManager.prototype = new NodesManager();\n\n        MachinesManager.prototype.mountSpecialFilesystem =\n            function(machine, fstype, mount_point, mount_options) {\n                var method = this._handler + \".mount_special\";\n                var params = {\n                    system_id: machine.system_id,\n                    fstype: fstype,\n                    mount_point: mount_point,\n                    mount_options: mount_options\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        MachinesManager.prototype.unmountSpecialFilesystem =\n            function(machine, mount_point) {\n                var method = this._handler + \".unmount_special\";\n                var params = {\n                    system_id: machine.system_id,\n                    mount_point: mount_point\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        return new MachinesManager();\n    }]);\n","/* Copyright 2017-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS NodeResultsManager Manager\n *\n * Manages all of the NodeResults in the browser. The manager uses the\n * RegionConnection to load the NodeResults, and listen for\n * notification events about NodeResults.\n */\n\nangular.module('MAAS').factory(\n    'NodeResultsManagerFactory', ['RegionConnection', 'Manager',\n    function(RegionConnection, Manager) {\n\n        function NodeResultsManager(node, factory) {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"noderesult\";\n            this._node = node;\n            this._factory = factory;\n\n            // Store as an array to preserve order.\n            this.commissioning_results = [\n                {\n                    title: null,\n                    hardware_type: 0,\n                    results: {}\n                },\n                {\n                    title: \"CPU\",\n                    hardware_type: 1,\n                    results: {}\n                },\n                {\n                    title: \"Memory\",\n                    hardware_type: 2,\n                    results: {}\n                },\n                {\n                    title: \"Storage\",\n                    hardware_type: 3,\n                    results: {}\n                }\n            ];\n            this.testing_results = [\n                {\n                    title: \"CPU\",\n                    hardware_type: 1,\n                    results: {}\n                },\n                {\n                    title: \"Memory\",\n                    hardware_type: 2,\n                    results: {}\n                },\n                {\n                    title: \"Storage\",\n                    hardware_type: 3,\n                    results: {}\n                },\n                {\n                    title: \"Other Results\",\n                    hardware_type: 0,\n                    results: {}\n                }\n            ];\n            this.installation_results = [];\n\n            // Listen for notify events for the ScriptResult object.\n            // This is noderesult instead of scriptresult because the\n            // class name is NodeResultHandler.\n            var self = this;\n            RegionConnection.registerNotifier(\"noderesult\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        NodeResultsManager.prototype = new Manager();\n\n        NodeResultsManager.prototype._getStorageSubtext = function(disk) {\n            var deviceinfo = '';\n            if(disk.model !== '') {\n                deviceinfo += \"Model: \" + disk.model;\n            }\n            if(disk.serial !== '') {\n                if(deviceinfo !== '') {\n                    deviceinfo += ', ';\n                }\n                deviceinfo += \"Serial: \" + disk.serial;\n            }\n            if(deviceinfo !== '') {\n                return '/dev/' + disk.name + ' (' + deviceinfo + ')';\n            }else{\n                return '/dev/' + disk.name;\n            }\n        };\n\n        NodeResultsManager.prototype._updateObject = function(\n            existing, updated) {\n            angular.forEach(updated, function(value, key) {\n                if(existing[key] !== value && key !== 'showing_results' &&\n                   key !== 'showing_history' && key !== 'showing_menu' &&\n                   key !== '$selected') {\n                    existing[key] = value;\n                }\n            });\n        };\n\n        NodeResultsManager.prototype._addOrReplace = function(results, result) {\n            var i;\n            for(i = 0; i < results.length; i++) {\n                if(results[i].name === result.name) {\n                    // Object already exists, update fields.\n                    result.$selected = results[i].$selected;\n                    result.showing_results = results[i].showing_results;\n                    result.showing_history = results[i].showing_history;\n                    result.showing_menu = results[i].showing_menu;\n                    angular.copy(result, results[i]);\n                    return;\n                }\n            }\n            // No result with the same name exists, add it to the sorted list.\n            for(i = 0; i < results.length; i++) {\n                if(results[i].name > result.name) {\n                    results.splice(i, 0, result);\n                    return;\n                }\n            }\n            results.push(result);\n        };\n\n        NodeResultsManager.prototype._processItem = function(result) {\n            var results;\n            result.showing_results = false;\n            result.showing_history = false;\n            result.showing_menu = false;\n            result.result_section = \"scripts\";\n\n            if(result.result_type === 0) {\n                results = this.commissioning_results;\n            } else if(result.result_type === 1) {\n                // Installation results are not split into hardware types or\n                // have subtext labels.\n                this._addOrReplace(this.installation_results, result);\n                return;\n            } else {\n                // Store all remaining result types as test results in case\n                // another result type is ever added.\n                results = this.testing_results;\n                result.result_section = \"tests\";\n            }\n            var i;\n            // Fallback to storing results in other results incase a new type\n            // is added\n            var hardware_type_results = results[3];\n            for(i = 0; i < results.length; i++) {\n                if(results[i].hardware_type === result.hardware_type) {\n                    hardware_type_results = results[i].results;\n                    break;\n                }\n            }\n\n            if(result.hardware_type === 3 &&\n               result.physical_blockdevice !== null) {\n                // Storage results are split into individual components.\n                var disk, subtext;\n                // If the storage result is associated with a specific\n                // component generate subtext for that component.\n                for(i = 0; i < this._node.disks.length; i++) {\n                    disk = this._node.disks[i];\n                    if(disk.id === result.physical_blockdevice) {\n                        subtext = this._getStorageSubtext(disk);\n                        if(!angular.isArray(\n                            hardware_type_results[subtext])) {\n                                hardware_type_results[subtext] = [];\n                        }\n                        this._addOrReplace(\n                            hardware_type_results[subtext], result);\n                        break;\n                    }\n                }\n            } else {\n                // Other hardware types are not split into individual\n                // components.\n                if(!angular.isArray(hardware_type_results[null])) {\n                    hardware_type_results[null] = [];\n                }\n                this._addOrReplace(hardware_type_results[null], result);\n            }\n        };\n\n        NodeResultsManager.prototype._removeItem = function(result) {\n            var idx = this._getIndexOfItem(this._items, result.id);\n            if(idx >= 0) {\n                this._updateMetadata(this._items[idx], \"delete\");\n            }\n            this._removeItemByIdFromArray(this._items, result.id);\n            this._removeItemByIdFromArray(this._selectedItems, result.id);\n\n            var self = this;\n            angular.forEach(this.commissioning_results, function(hw_type) {\n                angular.forEach(hw_type.results, function(results, subtext) {\n                    self._removeItemByIdFromArray(results, result.id);\n                    if(results.length === 0)\n                    {\n                        delete hw_type.results[subtext];\n                    }\n                });\n            });\n            angular.forEach(this.testing_results, function(hw_type) {\n                angular.forEach(hw_type.results, function(results, subtext) {\n                    self._removeItemByIdFromArray(results, result.id);\n                    if(results.length === 0)\n                    {\n                        delete hw_type.results[subtext];\n                    }\n                });\n            });\n            this._removeItemByIdFromArray(this.installation_results, result.id);\n        };\n\n        // Return the list of ScriptResults for the given node when retrieving\n        // the initial list.\n        NodeResultsManager.prototype._initBatchLoadParameters = function() {\n            var ret = {\n                \"system_id\": this._node.system_id\n            };\n            // Limit the results returned to what can be viewed.\n            if(this._area === \"summary\") {\n                ret.has_surfaced = true;\n                ret.result_type = 2;\n            }else if(this._area === \"testing\") {\n                ret.result_type = 2;\n            }else if(this._area === \"commissioning\") {\n                ret.result_type = 0;\n            }else if(this._area === \"logs\") {\n                ret.result_type = 1;\n            }\n            return ret;\n        };\n\n        // Destroys itself. Removes self from the NodeResultsManagerFactory.\n        NodeResultsManager.prototype.destroy = function() {\n            this._factory.destroyManager(this);\n\n            // If this manager has ever loaded then the region is sending\n            // results from this node. Tell the RegionConnection to stop.\n            if(this.isLoaded()) {\n                var method = this._handler + \".clear\";\n                RegionConnection.callMethod(method, {\n                    system_id: this._node.system_id\n                });\n            }\n        };\n\n        // Get result data.\n        NodeResultsManager.prototype.get_result_data = function(\n            script_id, data_type) {\n            var method = this._handler + \".get_result_data\";\n            var params = {\n                id: script_id,\n                data_type: data_type\n            };\n            return RegionConnection.callMethod(method, params);\n        };\n\n        // Get historic data.\n        NodeResultsManager.prototype.get_history = function(script_id) {\n            var method = this._handler + \".get_history\";\n            var params = {\n                id: script_id,\n            };\n            return RegionConnection.callMethod(method, params);\n        };\n\n        // Factory that holds all created NodeResultsManagers.\n        function NodeResultsManagerFactory() {\n            // Holds a list of all NodeResultsManagers that have been created.\n            this._managers = [];\n        }\n\n        // Gets the NodeResultsManager for the nodes with node_system_id.\n        NodeResultsManagerFactory.prototype._getManager = function(node) {\n            var i;\n            for(i = 0; i < this._managers.length; i++) {\n                if(this._managers[i]._node.system_id === node.system_id) {\n                    return this._managers[i];\n                }\n            }\n            return null;\n        };\n\n        // Gets the NodeResultsManager for the nodes system_id. Creates a new\n        // manager if one does not exist.\n        NodeResultsManagerFactory.prototype.getManager = function(\n            node, area) {\n            var manager = this._getManager(node);\n            if(!angular.isObject(manager)) {\n                // Not created so create it.\n                manager = new NodeResultsManager(node, this);\n                this._managers.push(manager);\n            }\n            manager._area = area;\n            if(area === \"commissioning\") {\n                manager.results = manager.commissioning_results;\n            }else if(area === \"logs\") {\n                manager.results = manager.installation_results;\n            }else{\n                manager.results = manager.testing_results;\n            }\n            return manager;\n        };\n\n        // Destroy the NodeResultsManager.\n        NodeResultsManagerFactory.prototype.destroyManager = function(manager) {\n            var idx = this._managers.indexOf(manager);\n            if(idx >= 0) {\n                this._managers.splice(idx, 1);\n            }\n        };\n\n        return new NodeResultsManagerFactory();\n    }]);\n","/* Copyright 2015-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Manager\n *\n * Manages all of the nodes in the browser. This manager is used for the\n * machine and controller listing and view pages (as machines and controllers\n * are both Nodes).  The manager uses the RegionConnection to load the nodes,\n * update the nodes, and listen for notification events about nodes.\n */\n\nangular.module('MAAS').service(\n    'NodesManager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, $timeout, RegionConnection, Manager) {\n\n        function NodesManager() {\n            Manager.call(this);\n        }\n\n        NodesManager.prototype = new Manager();\n\n        // Create a node.\n        NodesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the node to the list. Adding it here will cause angular\n            // to complain because the same object exist in the list.\n            return RegionConnection.callMethod(\n                this._handler + \".create\", node);\n        };\n\n        // Perform the action on the node.\n        NodesManager.prototype.performAction = function(\n            node, action, extra) {\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(this._handler + \".action\", {\n                \"system_id\": node.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        // Check the power state for the node.\n        NodesManager.prototype.checkPowerState = function(node) {\n            return RegionConnection.callMethod(this._handler + \".check_power\", {\n                \"system_id\": node.system_id\n                }).then(function(state) {\n                    node.power_state = state;\n                    return state;\n                }, function(error) {\n                    node.power_state = \"error\";\n\n                    // Already been logged server side, but log it client\n                    // side so if they really care they can see why.\n                    console.log(error);\n\n                    // Return the state as error to the remaining callbacks.\n                    return \"error\";\n                });\n        };\n\n        // Create the physical interface on the node.\n        NodesManager.prototype.createPhysicalInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_physical\", params);\n            };\n\n        // Create the VLAN interface on the node.\n        NodesManager.prototype.createVLANInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_vlan\", params);\n            };\n\n        // Create the bond interface on the node.\n        NodesManager.prototype.createBondInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bond\", params);\n            };\n\n        // Create the bridge interface on the node.\n        NodesManager.prototype.createBridgeInterface = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bridge\", params);\n            };\n\n        // Update the interface for the node.\n        NodesManager.prototype.updateInterface = function(\n            node, interface_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.interface_id = interface_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".update_interface\", params);\n            };\n\n        // Update an interface from a maas-obj-form.\n        NodesManager.prototype.updateInterfaceForm = function(\n            params) {\n                return RegionConnection.callMethod(\n                    this._handler + \".update_interface\", params);\n            };\n\n        // Delete the interface for the node.\n        NodesManager.prototype.deleteInterface = function(\n            node, interface_id) {\n                var params = {\n                    system_id: node.system_id,\n                    interface_id: interface_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".delete_interface\", params);\n            };\n\n        // Create or update the link to the subnet for the interface.\n        NodesManager.prototype.linkSubnet = function(\n            node, interface_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.interface_id = interface_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".link_subnet\", params);\n            };\n\n        // Remove the link to the subnet for the interface.\n        NodesManager.prototype.unlinkSubnet = function(\n            node, interface_id, link_id) {\n                var params = {\n                    system_id: node.system_id,\n                    interface_id: interface_id,\n                    link_id: link_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".unlink_subnet\", params);\n            };\n\n        // Send the update information to the region.\n        NodesManager.prototype.updateFilesystem = function(\n            node, block_id, partition_id, fstype, mount_point, mount_options,\n            tags) {\n                var self = this;\n                var method = this._handler + \".update_filesystem\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id,\n                    partition_id: partition_id,\n                    fstype: fstype,\n                    mount_point: mount_point,\n                    mount_options: mount_options,\n                    tags: tags\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the disk.\n        NodesManager.prototype.deleteDisk = function(\n            node, block_id) {\n                var self = this;\n                var method = this._handler + \".delete_disk\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the partition.\n        NodesManager.prototype.deletePartition = function(\n            node, partition_id) {\n                var self = this;\n                var method = this._handler + \".delete_partition\";\n                var params = {\n                    system_id: node.system_id,\n                    partition_id: partition_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete the disk or partition.\n        NodesManager.prototype.deleteVolumeGroup = function(\n            node, volume_group_id) {\n                var self = this;\n                var method = this._handler + \".delete_volume_group\";\n                var params = {\n                    system_id: node.system_id,\n                    volume_group_id: volume_group_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete a cache set.\n        NodesManager.prototype.deleteCacheSet = function(\n            node, cache_set_id) {\n                var self = this;\n                var method = this._handler + \".delete_cache_set\";\n                var params = {\n                    system_id: node.system_id,\n                    cache_set_id: cache_set_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Delete a filesystem.\n        NodesManager.prototype.deleteFilesystem = function(\n            node, blockdevice_id, partition_id, filesystem_id) {\n                var self = this;\n                var method = this._handler + \".delete_filesystem\";\n                var params = {\n                    system_id: node.system_id,\n                    blockdevice_id: blockdevice_id,\n                    partition_id: partition_id,\n                    filesystem_id: filesystem_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new partition.\n        NodesManager.prototype.createPartition = function(\n            node, block_id, size, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                var self = this;\n                var method = this._handler + \".create_partition\";\n                params.system_id = node.system_id;\n                params.block_id = block_id;\n                params.partition_size = size;\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new cache set.\n        NodesManager.prototype.createCacheSet = function(\n            node, block_id, partition_id) {\n                var self = this;\n                var method = this._handler + \".create_cache_set\";\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id,\n                    partition_id: partition_id\n                };\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Create a new bcache device.\n        NodesManager.prototype.createBcache = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_bcache\", params);\n            };\n\n        // Create a new RAID device.\n        NodesManager.prototype.createRAID = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_raid\", params);\n            };\n\n        // Create a new volume group.\n        NodesManager.prototype.createVolumeGroup = function(\n            node, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".create_volume_group\", params);\n            };\n\n        // Create a new logical volume.\n        NodesManager.prototype.createLogicalVolume = function(\n            node, volume_group_id, name, size, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                var self = this;\n                var method = this._handler + \".create_logical_volume\";\n                params.system_id = node.system_id;\n                params.volume_group_id = volume_group_id;\n                params.name = name;\n                params.size = size;\n                return RegionConnection.callMethod(method, params);\n            };\n\n        // Update a disk.\n        NodesManager.prototype.updateDisk = function(\n            node, block_id, params) {\n                if(!angular.isObject(params)) {\n                    params = {};\n                }\n                params.system_id = node.system_id;\n                params.block_id = block_id;\n                return RegionConnection.callMethod(\n                    this._handler + \".update_disk\", params);\n            };\n\n        // Set disk as the boot disk.\n        NodesManager.prototype.setBootDisk = function(\n            node, block_id) {\n                var params = {\n                    system_id: node.system_id,\n                    block_id: block_id\n                };\n                return RegionConnection.callMethod(\n                    this._handler + \".set_boot_disk\", params);\n            };\n\n        NodesManager.prototype.getSummaryXML = function(node) {\n            return RegionConnection.callMethod(\n                this._handler + \".get_summary_xml\",\n                {\"system_id\": node.system_id});\n        };\n\n        NodesManager.prototype.getSummaryYAML = function(node) {\n            return RegionConnection.callMethod(\n                this._handler + \".get_summary_yaml\",\n                {\"system_id\": node.system_id});\n        };\n\n        return NodesManager;\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Notifications Manager.\n *\n * Manages notifications in the browser. Uses RegionConnection to load\n * notifications, await new, updated, and deleted notifications, and to\n * dismiss them.\n */\n\nangular.module('MAAS').factory(\n    'NotificationsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n     function($q, $rootScope, RegionConnection, Manager) {\n\n        function NotificationsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"notification\";\n\n            // Listen for notify events for the notification object.\n            RegionConnection.registerNotifier(\n                \"notification\", angular.bind(this, this.onNotify));\n        }\n\n        NotificationsManager.prototype = new Manager();\n        NotificationsManager.prototype.dismiss = function(notification) {\n            return RegionConnection.callMethod(\n                \"notification.dismiss\", {id: notification.id});\n        };\n\n        return new NotificationsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS PackageRepositories Manager\n *\n * Manages all of the PackageRepositories in the browser. The manager uses the\n * RegionConnection to load the PackageRepositories, update them, and listen\n * for notification events about them.\n */\n\nangular.module('MAAS').factory(\n    'PackageRepositoriesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function PackageRepositoriesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"packagerepository\";\n\n            // Listen for notify events for the PackageRepository object.\n            var self = this;\n            RegionConnection.registerNotifier(\"packagerepository\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        PackageRepositoriesManager.prototype = new Manager();\n\n        // Create the repository.\n        PackageRepositoriesManager.prototype.create = function(repository) {\n            return RegionConnection.callMethod(\n                this._handler + \".create\", repository, true);\n        };\n\n        return new PackageRepositoriesManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Pods Manager\n *\n * Manages all of the pods in the browser. The manager uses the\n * RegionConnection to load the pods, update the pods, and listen for\n * notification events about pods.\n */\n\nangular.module('MAAS').service(\n    'PodsManager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, $timeout, RegionConnection, Manager) {\n\n        function PodsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"pod\";\n\n            // Listen for notify events for the pod object.\n            var self = this;\n            RegionConnection.registerNotifier(\"pod\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        PodsManager.prototype = new Manager();\n\n        // Refresh the pod information\n        PodsManager.prototype.refresh = function(pod) {\n            var self = this;\n            return RegionConnection.callMethod(\"pod.refresh\", pod).then(\n                function(pod) {\n                    self._replaceItem(pod);\n                    return pod;\n                });\n        };\n\n        // Compose a machine in the pod.\n        PodsManager.prototype.compose = function(params) {\n            var self = this;\n            return RegionConnection.callMethod(\"pod.compose\", params).then(\n                function(pod) {\n                    self._replaceItem(pod);\n                    return pod;\n                });\n        };\n\n        return new PodsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Region Connection\n *\n * Provides the websocket connection between the client and the MAAS regiond\n * service.\n */\n\nangular.module('MAAS').factory(\n    'RegionConnection',\n    ['$q', '$rootScope', '$timeout', '$window', '$cookies', function(\n        $q, $rootScope, $timeout, $window, $cookies) {\n\n        // Message types\n        var MSG_TYPE = {\n            REQUEST: 0,\n            RESPONSE: 1,\n            NOTIFY: 2\n        };\n\n        // Response types\n        var RESPONSE_TYPE = {\n            SUCCESS: 0,\n            ERROR: 1\n        };\n\n        // Constructor\n        function RegionConnection() {\n            this.callbacks = {};\n            this.requests = {};\n            this.requestId = 0;\n            this.url = null;\n            this.websocket = null;\n            this.connected = false;\n            this.autoReconnect = true;\n            this.retryTimeout = 5000;\n            this.error = null;\n\n            // Defer used for defaultConnect. If defaultConnect is called\n            // quickly only the first one will start the connection. The\n            // remaining will recieve this defer.\n            this.defaultConnectDefer = null;\n\n            // List of functions to call when a WebSocket event occurs. Each\n            // function will get the WebSocket event passed to it.\n            this.handlers = {\n                open: [],\n                error: [],\n                close: []\n            };\n\n            // Object containing a fields with list of functions. When\n            // a NOTIFY message is received it will match the name to a field\n            // in this object. If the field exists in the object the list\n            // of functions will be called with the action and obj_id.\n            this.notifiers = {};\n        }\n\n        // Return a new request id.\n        RegionConnection.prototype.newRequestId = function() {\n            this.requestId += 1;\n            return this.requestId;\n        };\n\n        // Register event handler.\n        RegionConnection.prototype.registerHandler = function (name, func) {\n            if(!angular.isDefined(this.handlers[name])) {\n                throw new Error(\"Invalid handler: \" + name);\n            }\n            if(!angular.isFunction(func)) {\n                throw new Error(\"Requires a function to register a handler.\");\n            }\n            this.handlers[name].push(func);\n        };\n\n        // Unregister event handler.\n        RegionConnection.prototype.unregisterHandler = function (name, func) {\n            if(!angular.isDefined(this.handlers[name])) {\n                throw new Error(\"Invalid handler: \" + name);\n            }\n            var idx = this.handlers[name].indexOf(func);\n            if(idx >= 0) {\n                this.handlers[name].splice(idx, 1);\n            }\n        };\n\n        // Register notification handler.\n        RegionConnection.prototype.registerNotifier = function(name, func) {\n            if(!angular.isFunction(func)) {\n                throw new Error(\"Requires a function to register a notifier.\");\n            }\n            if(angular.isUndefined(this.notifiers[name])) {\n                this.notifiers[name] = [];\n            }\n            this.notifiers[name].push(func);\n        };\n\n        // Unregister notification handler.\n        RegionConnection.prototype.unregisterNotifier = function(name, func) {\n            if(angular.isUndefined(this.notifiers[name])) {\n                return;\n            }\n            var idx = this.notifiers[name].indexOf(func);\n            if(idx >= 0) {\n                this.notifiers[name].splice(idx, 1);\n            }\n        };\n\n        // Return True if currently connected to region.\n        RegionConnection.prototype.isConnected = function() {\n            return this.connected;\n        };\n\n        // Builds the websocket connection.\n        RegionConnection.prototype.buildSocket = function(url) {\n            return new WebSocket(url);\n        };\n\n        // Opens the websocket connection.\n        RegionConnection.prototype.connect = function() {\n            this.url = this._buildUrl();\n            this.autoReconnect = true;\n            this.websocket = this.buildSocket(this.url);\n\n            var self = this;\n            this.websocket.onopen = function(evt) {\n                self.connected = true;\n                angular.forEach(self.handlers.open, function(func) {\n                    func(evt);\n                });\n            };\n            this.websocket.onerror = function(evt) {\n                angular.forEach(self.handlers.error, function(func) {\n                    func(evt);\n                });\n            };\n            this.websocket.onclose = function(evt) {\n                self.connected = false;\n                self.error = \"Unable to connect to: \" + self.url.split(\"?\")[0];\n                angular.forEach(self.handlers.close, function(func) {\n                    func(evt);\n                });\n                if(self.autoReconnect) {\n                    $timeout(function() {\n                        self.connect();\n                    }, self.retryTimeout);\n                }\n            };\n            this.websocket.onmessage = function(evt) {\n                self.onMessage(angular.fromJson(evt.data));\n            };\n        };\n\n        // Closes the websocket connection.\n        RegionConnection.prototype.close = function() {\n            this.autoReconnect = false;\n            this.websocket.close();\n            this.websocket = null;\n        };\n\n        // Return the protocol used for the websocket connection.\n        RegionConnection.prototype._getProtocol = function() {\n            return $window.location.protocol;\n        };\n\n        // Return connection url to websocket from current location and\n        // html options.\n        RegionConnection.prototype._buildUrl = function() {\n            var host = $window.location.hostname;\n            var port = $window.location.port;\n            var path = $window.location.pathname;\n            var proto = 'ws';\n            if (this._getProtocol() === 'https:') {\n                proto = 'wss';\n            }\n\n            // Path and port can be overridden by href and data-websocket-port\n            // in the base element respectively.\n            var base = angular.element(\"base\");\n            if(angular.isDefined(base)) {\n                var newPath = base.attr(\"href\");\n                if(angular.isDefined(newPath)) {\n                    path = newPath;\n                }\n                var newPort = base.data(\"websocket-port\");\n                if(angular.isDefined(newPort)) {\n                    port = newPort;\n                }\n            }\n\n            // Append final '/' if missing from end of path.\n            if(path[path.length - 1] !== '/') {\n                path += '/';\n            }\n\n            // Build the URL. Include the :port only if it has a value.\n            url = proto + \"://\" + host;\n            if(angular.isString(port) && port.length > 0){\n                url += \":\" + port;\n            }\n            url += path + \"ws\";\n\n            // Include the csrftoken in the URL if it's defined.\n            var csrftoken;\n            if(angular.isFunction($cookies.get)) {\n                csrftoken = $cookies.get('csrftoken');\n            } else {\n                csrftoken = $cookies.csrftoken;\n            }\n            if(angular.isDefined(csrftoken)) {\n                url += '?csrftoken=' + encodeURIComponent(csrftoken);\n            }\n\n            return url;\n        };\n\n        // Opens the default websocket connection.\n        RegionConnection.prototype.defaultConnect = function() {\n            // Already been called but the connection has not been completed.\n            if(angular.isObject(this.defaultConnectDefer)) {\n                return this.defaultConnectDefer.promise;\n            }\n\n            // Already connected.\n            var defer;\n            if(this.isConnected()) {\n                // Create a new defer as the defaultConnectDefer would\n                // have already been resolved.\n                defer = $q.defer();\n\n                // Cannot resolve the defer inline as it hasn't been given\n                // back to the caller. It will be called in the next loop.\n                $timeout(defer.resolve);\n                return defer.promise;\n            }\n\n            // Start the connection.\n            var self = this, opened, errored;\n            defer = this.defaultConnectDefer = $q.defer();\n            opened = function(evt) {\n                this.defaultConnectDefer = null;\n                self.unregisterHandler(\"open\", opened);\n                self.unregisterHandler(\"error\", errored);\n                $rootScope.$apply(defer.resolve(evt));\n            };\n            errored = function(evt) {\n                this.defaultConnectDefer = null;\n                self.unregisterHandler(\"open\", opened);\n                self.unregisterHandler(\"error\", errored);\n                $rootScope.$apply(defer.reject(evt));\n            };\n            this.registerHandler(\"open\", opened);\n            this.registerHandler(\"error\", errored);\n            this.connect();\n            return defer.promise;\n        };\n\n        // Called when a message is received.\n        RegionConnection.prototype.onMessage = function(msg) {\n            // Response\n            if(msg.type === MSG_TYPE.RESPONSE) {\n                this.onResponse(msg);\n            // Notify\n            } else if(msg.type === MSG_TYPE.NOTIFY) {\n                this.onNotify(msg);\n            }\n        };\n\n        // Called when a response message is recieved.\n        RegionConnection.prototype.onResponse = function(msg) {\n            // Grab the registered defer from the callbacks list.\n            var defer = this.callbacks[msg.request_id];\n            var remembered_request = this.requests[msg.request_id];\n            if(angular.isDefined(defer)) {\n                if(msg.rtype === RESPONSE_TYPE.SUCCESS) {\n                    // Resolve the defer inside of the digest cycle, so any\n                    // update to an object or collection will trigger a\n                    // watcher.\n                    $rootScope.$apply(defer.resolve(msg.result));\n                } else if(msg.rtype === RESPONSE_TYPE.ERROR) {\n                    // Reject the defer since an error occurred.\n                    if(angular.isObject(remembered_request)) {\n                        $rootScope.$apply(defer.reject({\n                            \"error\": msg.error,\n                            \"request\": remembered_request\n                        }));\n                    } else {\n                        $rootScope.$apply(defer.reject(msg.error));\n                    }\n                }\n                // Remove the defer from the callback list.\n                delete this.callbacks[msg.request_id];\n                delete this.requests[msg.request_id];\n            }\n        };\n\n        // Called when a notify response is recieved.\n        RegionConnection.prototype.onNotify = function(msg) {\n            var handlers = this.notifiers[msg.name];\n            if(angular.isArray(handlers)) {\n                angular.forEach(handlers, function(handler) {\n                    handler(msg.action, msg.data);\n                });\n            }\n        };\n\n        // Call method on the region.\n        RegionConnection.prototype.callMethod = function(\n                method, params, remember) {\n            var defer = $q.defer();\n            var request_id = this.newRequestId();\n            var request = {\n                type: MSG_TYPE.REQUEST,\n                request_id: request_id,\n                method: method,\n                params: params\n            };\n            this.callbacks[request_id] = defer;\n            // If requested, remember what the details of the request were,\n            // so that the controller can refresh its memory.\n            if (remember) {\n                this.requests[request_id] = request;\n            }\n            this.websocket.send(angular.toJson(request));\n            return defer.promise;\n        };\n\n        return new RegionConnection();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS ScriptsManager Manager\n *\n * Manages all of the Scripts in the browser. The manager uses the\n * RegionConnection to load the Scripts, and listen for notification\n * events about Scripts.\n */\n\nangular.module('MAAS').factory(\n    'ScriptsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function ScriptsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"script\";\n\n            // Listen for notify events for the Script object.\n            var self = this;\n            RegionConnection.registerNotifier(\"script\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ScriptsManager.prototype = new Manager();\n\n        return new ScriptsManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Service Manager\n *\n * Manages all of the services for a node in the browser. The manager uses the\n * RegionConnection to load the services and listen for service notifications.\n */\n\nangular.module('MAAS').factory(\n    'ServicesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function ServicesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"service\";\n\n            // Listen for notify events for the service object.\n            var self = this;\n            RegionConnection.registerNotifier(\"service\",\n                function(action, data) {\n                    self.onNotify(action, data);\n            });\n        }\n\n        ServicesManager.prototype = new Manager();\n\n        return new ServicesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Manager\n *\n * Manages all of the spaces in the browser. The manager uses the\n * RegionConnection to load the spaces, update the spaces, and listen for\n * notification events about spaces.\n */\n\nangular.module('MAAS').factory(\n    'SpacesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'SubnetsManager',\n    function($q, $rootScope, RegionConnection, Manager, SubnetsManager) {\n\n        function SpacesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"space\";\n\n            // Listen for notify events for the space object.\n            var self = this;\n            RegionConnection.registerNotifier(\"space\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SpacesManager.prototype = new Manager();\n\n        // Create a space.\n        SpacesManager.prototype.create = function(space) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"space.create\", space);\n        };\n\n\n        // Delete the space.\n        SpacesManager.prototype.deleteSpace = function(space) {\n            return RegionConnection.callMethod(\"space.delete\", space);\n        };\n\n        return new SpacesManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS SSHKey Manager\n *\n * Manages all of the SSHKeys in the browser. The manager uses the\n * RegionConnection to load the SSHKeys, update the SSHKeys, and\n * listen for notification events about SSHKeys.\n */\n\nangular.module('MAAS').factory(\n    'SSHKeysManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function SSHKeysManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"sshkey\";\n\n            // Listen for notify events for the sshkey object.\n            var self = this;\n            RegionConnection.registerNotifier(\"sshkey\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SSHKeysManager.prototype = new Manager();\n\n        // Imports SSH keys from a launchpad and github.\n        SSHKeysManager.prototype.importKeys = function(params) {\n            // We don't add the results to the list because a NOTIFY event will\n            // add the ssh key to the list. Adding it here will cause angular\n            // to complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"sshkey.import_keys\", params);\n        };\n\n        return new SSHKeysManager();\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS StaticRoute Manager\n *\n * Manages all of the StaticRoutes in the browser. The manager uses the\n * RegionConnection to load the StaticRoutes, update the StaticRoutes, and\n * listen for notification events about StaticRoutes.\n */\n\nangular.module('MAAS').factory(\n    'StaticRoutesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager',\n    function($q, $rootScope, RegionConnection, Manager) {\n\n        function StaticRoutesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"staticroute\";\n\n            // Listen for notify events for the staticroute object.\n            var self = this;\n            RegionConnection.registerNotifier(\"staticroute\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        StaticRoutesManager.prototype = new Manager();\n\n        return new StaticRoutesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Subnet Manager\n *\n * Manages all of the subnets in the browser. The manager uses the\n * RegionConnection to load the subnets, update the subnets, and listen for\n * notification events about subnets.\n */\n\nangular.module('MAAS').factory(\n    'SubnetsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function SubnetsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"subnet\";\n\n            // Listen for notify events for the subnet object.\n            var self = this;\n            RegionConnection.registerNotifier(\"subnet\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        SubnetsManager.prototype = new Manager();\n\n        // Return the name of the subnet. Will include the name of the subnet\n        // in '(', ')' if it exists and not the same as the cidr.\n        SubnetsManager.prototype.getName = function(subnet) {\n            if(!angular.isObject(subnet)) {\n                return \"\";\n            }\n\n            var name = subnet.cidr;\n            if(angular.isString(subnet.name) &&\n                subnet.name !== \"\" &&\n                subnet.name !== subnet.cidr) {\n                name += \" (\" + subnet.name + \")\";\n            }\n            return name;\n        };\n\n        SubnetsManager.prototype.getLargestRange = function(subnet) {\n            var largest_range = {num_addresses: 0, start: \"\", end: \"\"};\n            angular.forEach(subnet.statistics.ranges, function(iprange) {\n                if(angular.equals(iprange.purpose, [\"unused\"]) &&\n                        iprange.num_addresses > largest_range.num_addresses) {\n                    largest_range = iprange;\n                }\n            });\n            return largest_range;\n        };\n\n        SubnetsManager.prototype.hasDynamicRange = function(subnet) {\n            var i;\n            for(i = 0; i < subnet.statistics.ranges.length ; i++) {\n                var iprange = subnet.statistics.ranges[i];\n                if(iprange.purpose.indexOf(\"dynamic\") !== -1) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        // Create a subnet.\n        SubnetsManager.prototype.create = function(subnet) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"subnet.create\", subnet);\n        };\n\n        // Delete the subnet.\n        SubnetsManager.prototype.deleteSubnet = function(subnet) {\n            return RegionConnection.callMethod(\"subnet.delete\", {\n                \"id\": subnet.id\n            });\n        };\n\n        // Perform a neighbour discovery scan on the subnet.\n        SubnetsManager.prototype.scanSubnet = function(subnet) {\n            return RegionConnection.callMethod(\"subnet.scan\", {\n                \"id\": subnet.id\n            });\n        };\n\n        return new SubnetsManager();\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Switches Manager\n *\n * Manages all of the switches in the browser. This manager is used for the\n * switches listing and the switches view page. The manager uses the\n * RegionConnection to load the switches, update the switches, and listen for\n * notification events about switches.\n */\n\nangular.module('MAAS').factory(\n    'SwitchesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'NodesManager', function(\n            $q, $rootScope, RegionConnection, NodesManager) {\n\n        function SwitchesManager() {\n            NodesManager.call(this);\n\n            this._pk = \"system_id\";\n            this._handler = \"switch\";\n            this._metadataAttributes = {\n                \"owner\": null,\n                \"subnets\": null,\n                \"tags\": null,\n                \"zone\": function(device) {\n                    return device.zone.name;\n                }\n            };\n\n            // Listen for notify events for the switch object.\n            var self = this;\n            RegionConnection.registerNotifier(\"switch\", function(action, data) {\n                self.onNotify(action, data);\n            });\n        }\n\n        SwitchesManager.prototype = new NodesManager();\n\n        // Create a switch.\n        SwitchesManager.prototype.create = function(node) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the device to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"switch.create\", node);\n        };\n\n        // Perform the action on the switch.\n        SwitchesManager.prototype.performAction = function(\n            device, action, extra) {\n\n            if(!angular.isObject(extra)) {\n                extra = {};\n            }\n            return RegionConnection.callMethod(\"switch.action\", {\n                \"system_id\": device.system_id,\n                \"action\": action,\n                \"extra\": extra\n                });\n        };\n\n        return new SwitchesManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Tag Manager\n *\n * Manages all of the tags in the browser. The manager uses the\n * RegionConnection to load the tags, update the tags, and listen for\n * notification events about tags.\n */\n\nangular.module('MAAS').factory(\n    'TagsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function TagsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"tag\";\n\n            // Listen for notify events for the tag object.\n            var self = this;\n            RegionConnection.registerNotifier(\"tag\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        TagsManager.prototype = new Manager();\n\n        // Helper for autocomplete that will return a string of tags that\n        // contain the query text.\n        TagsManager.prototype.autocomplete = function(query) {\n            var matching = [];\n            angular.forEach(this._items, function(item) {\n                if(item.name.indexOf(query) > -1) {\n                    matching.push(item.name);\n                }\n            });\n            return matching;\n        };\n\n        return new TagsManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS User Manager\n *\n * Manages all of the users in the browser. The manager uses the\n * RegionConnection to load the users, update the users, and listen for\n * notification events about users.\n */\n\nangular.module('MAAS').factory(\n    'UsersManager',\n    ['RegionConnection', 'Manager', 'ErrorService',\n    function(RegionConnection, Manager, ErrorService) {\n\n        function UsersManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"user\";\n\n            // Holds the authenticated user for the connection.\n            this._authUser = null;\n\n            // Listen for notify events for the user object.\n            var self = this;\n            RegionConnection.registerNotifier(\"user\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        UsersManager.prototype = new Manager();\n\n        // Get the authenticated user for the connection.\n        UsersManager.prototype.getAuthUser = function() {\n            return this._authUser;\n        };\n\n        // Return true if the authenticated user is super user.\n        UsersManager.prototype.isSuperUser = function() {\n            var authUser = this.getAuthUser();\n            if(!angular.isObject(authUser)) {\n                return false;\n            }\n            return authUser.is_superuser;\n        };\n\n        // Return true if the authenticated user has uploaded at\n        // least one SSH key.\n        UsersManager.prototype.getSSHKeyCount = function() {\n            authuser = this._authUser;\n            if(!angular.isObject(authuser)) {\n                return 0;\n            }\n            return authuser.sshkeys_count;\n        };\n\n        // Load the authenticated user.\n        UsersManager.prototype._loadAuthUser = function() {\n            var self = this;\n            return RegionConnection.callMethod(\"user.auth_user\", {}).then(\n                function(user) {\n                    if(angular.isObject(self._authUser)) {\n                        // Copy the user into the authUser. This keeps the\n                        // reference the same, not requiring another call to\n                        // getAuthUser.\n                        angular.copy(user, self._authUser);\n                    } else {\n                        self._authUser = user;\n                    }\n                    return self._authUser;\n                }, function(error) {\n                    ErrorService.raiseError(error);\n                });\n        };\n\n        UsersManager.prototype._replaceItem = function(item) {\n            Manager.prototype._replaceItem.call(this, item);\n\n            // Update the authenticated user if updated item has the\n            // same primary key.\n            if(angular.isObject(this._authUser) &&\n                this._authUser[this._pk] === item[this._pk]) {\n                // Copy the item into the authUser. This keeps the reference\n                // the same, not requiring another call to getAuthUser.\n                angular.copy(item, this._authUser);\n            }\n        };\n\n        UsersManager.prototype.loadItems = function() {\n            // Load the auth user when all the items are loaded as well.\n            this._loadAuthUser();\n            return Manager.prototype.loadItems.call(this);\n        };\n\n        UsersManager.prototype.reloadItems = function() {\n            // Load the auth user when all the items are reloaded as well.\n            this._loadAuthUser();\n            return Manager.prototype.reloadItems.call(this);\n        };\n\n        // Mark the user as completed the intro.\n        UsersManager.prototype.markIntroComplete = function() {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"user.mark_intro_complete\", {}).then(\n                    function(user) {\n                        if(angular.isObject(self._authUser)) {\n                            // Copy the user into the authUser. This keeps the\n                            // reference the same, not requiring another call\n                            // to getAuthUser.\n                            angular.copy(user, self._authUser);\n                        } else {\n                            self._authUser = user;\n                        }\n                        return self._authUser;\n                    }, function(error) {\n                        ErrorService.raiseError(error);\n                    });\n        };\n\n        // Create a new authorisation token for the current user.\n        UsersManager.prototype.createAuthorisationToken = function() {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"user.create_authorisation_token\", {}).catch(function(error) {\n                    ErrorService.raiseError(error);\n                });\n        };\n\n        // Delete the authorisation token for the current user.\n        UsersManager.prototype.deleteAuthorisationToken = function(key) {\n            var self = this;\n            return RegionConnection.callMethod(\n                \"user.delete_authorisation_token\", {\n                    key: key\n                }).catch(function(error) {\n                    ErrorService.raiseError(error);\n                });\n        };\n\n        return new UsersManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS VLAN Manager\n *\n * Manages all of the VLANs in the browser. The manager uses the\n * RegionConnection to load the VLANs, update the VLANs, and listen for\n * notification events about VLANs.\n */\n\nangular.module('MAAS').factory(\n    'VLANsManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', 'SubnetsManager',\n    function($q, $rootScope, RegionConnection, Manager, SubnetsManager) {\n\n        function VLANsManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"vlan\";\n\n            // Listen for notify events for the vlan object.\n            var self = this;\n            RegionConnection.registerNotifier(\"vlan\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        VLANsManager.prototype = new Manager();\n\n        VLANsManager.prototype.getName = function(vlan) {\n            var name = vlan.vid;\n            if(vlan.vid === 0) {\n                name = \"untagged\";\n            } else if(angular.isString(vlan.name) && vlan.name !== \"\") {\n                name += \" (\" + vlan.name + \")\";\n            }\n            return name;\n        };\n\n        // Delete the VLAN.\n        VLANsManager.prototype.deleteVLAN = function(vlan) {\n            return RegionConnection.callMethod(\n                \"vlan.delete\", { \"id\": vlan.id }, true);\n        };\n\n        // This is needed for testing: in the normal course of things,\n        // rack_sids is generated entirely by the websocket handler.\n        VLANsManager.prototype.addRackController = function(vlan, rack) {\n            vlan.rack_sids.push(rack.system_id);\n        };\n\n        // Configure DHCP on the VLAN\n        VLANsManager.prototype.configureDHCP = function(\n           vlan, controllers, extra, relay_vlan) {\n           var params = {\n               \"id\": vlan.id,\n               \"controllers\": controllers,\n               \"extra\": extra\n           };\n           if(relay_vlan === null || angular.isNumber(relay_vlan)) {\n              params.relay_vlan = relay_vlan;\n           }\n           return RegionConnection.callMethod(\n                \"vlan.configure_dhcp\", params, true);\n        };\n\n        // Disable DHCP on the VLAN\n        VLANsManager.prototype.disableDHCP = function(vlan) {\n            return RegionConnection.callMethod(\n                \"vlan.configure_dhcp\", {\n                    \"id\": vlan.id,\n                    \"controllers\": [],\n                    \"relay_vlan\": null\n                }, true);\n        };\n\n        // Create a VLAN.\n        VLANsManager.prototype.create = function(vlan) {\n            // We don't add the item to the list because a NOTIFY event will\n            // add the domain to the list. Adding it here will cause angular to\n            // complain because the same object exist in the list.\n            return RegionConnection.callMethod(\"vlan.create\", vlan);\n        };\n\n        return new VLANsManager();\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Zone Manager\n *\n * Manages all of the zones in the browser. The manager uses the\n * RegionConnection to load the zones, update the zones, and listen for\n * notification events about zones.\n */\n\nangular.module('MAAS').factory(\n    'ZonesManager',\n    ['$q', '$rootScope', 'RegionConnection', 'Manager', function(\n            $q, $rootScope, RegionConnection, Manager) {\n\n        function ZonesManager() {\n            Manager.call(this);\n\n            this._pk = \"id\";\n            this._handler = \"zone\";\n\n            // Listen for notify events for the zone object.\n            var self = this;\n            RegionConnection.registerNotifier(\"zone\",\n                function(action, data) {\n                    self.onNotify(action, data);\n                });\n        }\n\n        ZonesManager.prototype = new Manager();\n\n        // Return the default zone.\n        ZonesManager.prototype.getDefaultZone = function() {\n            if(this._items.length === 0) {\n                return null;\n            } else {\n                var i;\n                for(i=0;i<this._items.length;i++) {\n                    if(this._items[i].id === 0) {\n                        return this._items[i];\n                    }\n                }\n            }\n            return this._items[0];\n        };\n\n        return new ZonesManager();\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter VLANs by Fabric.\n */\n\nangular.module('MAAS').filter('filterByFabric', function() {\n    return function(vlans, fabric) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(fabric)) {\n            id = fabric.id;\n        } else if(angular.isNumber(fabric)) {\n            id = fabric;\n        } else {\n            return filtered;\n        }\n        angular.forEach(vlans, function(vlan) {\n            if(vlan.fabric === id) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by Space.\n */\n\nangular.module('MAAS').filter('filterBySpace', function() {\n    return function(objects, space) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(space)) {\n            id = space.id;\n        } else if(angular.isNumber(space)) {\n            id = space;\n        } else {\n            return filtered;\n        }\n        angular.forEach(objects, function(object) {\n            if(object.space === id) {\n                filtered.push(object);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').filter('filterByNullSpace', function() {\n    return function(objects) {\n        var filtered = [];\n        angular.forEach(objects, function(object) {\n            if(object.space === null) {\n                filtered.push(object);\n            }\n        });\n        return filtered;\n    };\n});","/* Copyright 2016-2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Filter objects with subnet foreign key references by a particular subnet.\n */\n\nangular.module('MAAS').filter('filterBySubnet', function() {\n    return function(foreign_objects, subnet, key) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(subnet)) {\n            id = subnet.id;\n        } else if(angular.isNumber(subnet)) {\n            id = subnet;\n        } else {\n            return filtered;\n        }\n        if(angular.isUndefined(key)) {\n            key = 'subnet';\n        }\n        angular.forEach(foreign_objects, function(obj) {\n            if(obj[key] === id) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n\n// Filters by subnet, unless the subnet is not defined. If the subnet is not\n// defined, filters by VLAN.\nangular.module('MAAS').filter('filterBySubnetOrVlan', function() {\n    return function(foreign_objects, subnet, vlan) {\n        var filtered = [];\n        var id;\n        var key = null;\n        if(angular.isDefined(subnet) && subnet !== null) {\n            key = 'subnet';\n            if(angular.isObject(subnet)) {\n                id = subnet.id;\n            } else if(angular.isNumber(subnet)) {\n                id = subnet;\n            }\n        } else if(angular.isDefined(vlan) && vlan !== null) {\n            key = 'vlan';\n            if(angular.isObject(vlan)) {\n                id = vlan.id;\n            } else if(angular.isNumber(vlan)) {\n                id = vlan;\n            }\n        } else {\n            return filtered;\n        }\n        angular.forEach(foreign_objects, function(obj) {\n            if(obj[key] === id) {\n                filtered.push(obj);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by VLAN.\n */\n\nangular.module('MAAS').filter('filterByVLAN', function() {\n    return function(subnets, vlan) {\n        var filtered = [];\n        var id;\n        if(angular.isObject(vlan)) {\n            id = vlan.id;\n        } else if(angular.isNumber(vlan)) {\n            id = vlan;\n        } else {\n            return filtered;\n        }\n        angular.forEach(subnets, function(subnet) {\n            if(subnet.vlan === id) {\n                filtered.push(subnet);\n            }\n        });\n        return filtered;\n    };\n});\n\nangular.module('MAAS').filter('filterControllersByVLAN', function() {\n    return function(controllers, vlan) {\n        var filtered = [];\n        if(!angular.isObject(vlan)) {\n            return filtered;\n        }\n        angular.forEach(controllers, function(controller) {\n            // XXX mpontillo disable VLAN check until VLAN is populated\n            // on the rack controller's interfaces.\n            // if(controller.vlan_ids.indexOf(vlan.id) != -1) {\n\n            // XXX mpontillo 2016-02-22 this is a hack to prevent too many\n            // nodes from being sent through the filter; we have a bug which\n            // sends nodes in which are not controllers.\n            if(controller.node_type === 2 || controller.node_type === 4) {\n                filtered.push(controller);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Filter\n */\n\nangular.module('MAAS').filter('nodesFilter', ['$filter', 'SearchService',\n    function($filter, SearchService) {\n\n        // Default filter built-in angular. Used on all extra filters that do\n        // not specify a specific type.\n        var standardFilter = $filter('filter');\n\n        // Helpers that convert the pseudo field on node to an actual\n        // value from the node.\n        var mappings = {\n            cpu: function(node) {\n                return node.cpu_count;\n            },\n            cores: function(node) {\n                return node.cpu_count;\n            },\n            ram: function(node) {\n                return node.memory;\n            },\n            mac: function(node) {\n                macs = [];\n                macs.push(node.pxe_mac);\n                macs.push.apply(macs, node.extra_macs);\n                return macs;\n            },\n            zone: function(node) {\n                return node.zone.name;\n            },\n            pod: function(node) {\n                return (node.pod === undefined) ? undefined : node.pod.name;\n            },\n            'pod-id': function(node) {\n                return (node.pod === undefined) ? undefined : node.pod.id;\n            },\n            power: function(node) {\n                return node.power_state;\n            },\n            release: function(node) {\n                if(node.status_code === 6 || node.status_code === 9) {\n                    return node.osystem + \"/\" + node.distro_series;\n                } else {\n                    return '';\n                }\n            }\n        };\n\n        // Return true when value is an integer.\n        function isInteger(value) {\n            // +1 done to silence js-lint.\n            return value % +1 === 0;\n        }\n\n        // Return true when lowercase value contains the already\n        // lowercased lowerTerm.\n        function _matches(value, lowerTerm, exact) {\n            if(angular.isNumber(value)) {\n                if(exact) {\n                    if(isInteger(value)) {\n                        return value === parseInt(lowerTerm, 10);\n                    } else {\n                        return value === parseFloat(lowerTerm);\n                    }\n                } else {\n                    if(isInteger(value)) {\n                        return value >= parseInt(lowerTerm, 10);\n                    } else {\n                        return value >= parseFloat(lowerTerm);\n                    }\n                }\n            } else if(angular.isString(value)) {\n                if(exact) {\n                    return value.toLowerCase() === lowerTerm;\n                } else {\n                    return value.toLowerCase().indexOf(lowerTerm) >= 0;\n                }\n            } else {\n                return value === lowerTerm;\n            }\n        }\n\n        // Return true if value matches lowerTerm, unless negate is true then\n        // return false if matches.\n        function matches(value, lowerTerm, exact, negate) {\n            var match = _matches(value, lowerTerm, exact);\n            if(negate) {\n                return !match;\n            }\n            return match;\n        }\n\n        return function(nodes, search) {\n            if(angular.isUndefined(nodes) ||\n                angular.isUndefined(search) ||\n                nodes.length === 0) {\n                return nodes;\n            }\n\n            var filtered = nodes;\n            var filters = SearchService.getCurrentFilters(search);\n            angular.forEach(filters, function(terms, attr) {\n                if(attr === '_') {\n                    // Use the standard filter on terms that do not specify\n                    // an attribute.\n                    angular.forEach(terms, function(term) {\n                        filtered = standardFilter(filtered, term);\n                    });\n                } else if(attr === 'in') {\n                    // \"in:\" is used to filter the nodes by those that are\n                    // currently selected.\n                    angular.forEach(terms, function(term) {\n                        var matched = [];\n                        angular.forEach(filtered, function(node) {\n                            if(node.$selected &&\n                                term.toLowerCase() === \"selected\") {\n                                matched.push(node);\n                            } else if(!node.$selected &&\n                                term.toLowerCase() === \"!selected\") {\n                                matched.push(node);\n                            }\n                        });\n                        filtered = matched;\n                    });\n                } else {\n                    // Mapping function for the attribute.\n                    var mapFunc = mappings[attr];\n\n                    // Loop through each item and only select the matching.\n                    var matched = [];\n                    angular.forEach(filtered, function(node) {\n                        var value;\n                        if(angular.isFunction(mapFunc)) {\n                            value = mapFunc(node);\n                        } else if(node.hasOwnProperty(attr)) {\n                            value = node[attr];\n                        }\n\n                        // Unable to get value for this node. So skip it.\n                        if(angular.isUndefined(value)) {\n                            return;\n                        }\n\n                        var i, j;\n                        for(i = 0; i < terms.length; i++) {\n                            var term = terms[i].toLowerCase();\n                            var exact = false, negate = false;\n\n                            // '!' at the beginning means the term is negated.\n                            while(term.indexOf('!') === 0) {\n                                negate = !negate;\n                                term = term.substring(1);\n                            }\n\n                            // '=' at the beginning means to match exactly.\n                            if(term.indexOf('=') === 0) {\n                                exact = true;\n                                term = term.substring(1);\n                            }\n\n                            // Allow '!' after the '=' as well.\n                            while(term.indexOf('!') === 0) {\n                                negate = !negate;\n                                term = term.substring(1);\n                            }\n\n                            if(angular.isArray(value)) {\n                                // If value is an array check if the\n                                // term matches any value in the\n                                // array. If negated, check whether no\n                                // value in the array matches.\n                                if(negate) {\n                                    // Push to matched only if no value in\n                                    // the array matches term.\n                                    var no_match = true;\n                                    for(j = 0; j < value.length; j++) {\n                                        if(matches(\n                                            value[j], term, exact, false)) {\n                                            no_match = false;\n                                            break; // Skip remaining tests.\n                                        }\n                                    }\n                                    if(no_match) {\n                                        matched.push(node);\n                                        return;\n                                    }\n                                } else {\n                                    for(j = 0; j < value.length; j++) {\n                                        if(matches(\n                                            value[j], term, exact, false)) {\n                                            matched.push(node);\n                                            return;\n                                        }\n                                    }\n                                }\n                            } else {\n                                // Standard value check that it matches the\n                                // term.\n                                if(matches(value, term, exact, negate)) {\n                                    matched.push(node);\n                                    return;\n                                }\n                            }\n                        }\n                    });\n                    filtered = matched;\n                }\n            });\n            return filtered;\n        };\n    }]);\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter Subnets by VLAN.\n */\n\nangular.module('MAAS').filter('orderByDate', function() {\n    return function(items, field, field2) {\n        var sorted = items.slice();\n        sorted.sort(function(a, b) {\n            aDate = new Date(a[field]);\n            bDate = new Date(b[field]);\n\n            // Sort by ID as well if equal.\n            if(angular.isString(field2) &&\n                aDate.getTime() === bDate.getTime()) {\n                return (\n                    a[field2] > b[field2] ? -1 : a[field2] < b[field2] ? 1 : 0);\n            } else {\n              return aDate > bDate ? -1 : aDate < bDate ? 1 : 0;\n            }\n        });\n        return sorted;\n    };\n});\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Filter to remove the default VLAN as an option.\n */\n\nangular.module('MAAS').filter('removeDefaultVLAN', function() {\n    return function(vlans) {\n        var filtered = [];\n        angular.forEach(vlans, function(vlan) {\n            if(vlan.vid !== 0) {\n                filtered.push(vlan);\n            }\n        });\n        return filtered;\n    };\n});\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Module\n *\n * Initializes the MAAS module with its required dependencies and sets up\n * the interpolater to use '{$' and '$}' instead of '{{' and '}}' as this\n * conflicts with Django templates.\n */\n\nangular.module('MAAS',\n    ['ngRoute', 'ngCookies', 'ngSanitize', 'ngTagsInput', 'vs-repeat']).config(\n    function($interpolateProvider, $routeProvider, $httpProvider) {\n        $interpolateProvider.startSymbol('{$');\n        $interpolateProvider.endSymbol('$}');\n\n        // Set the $httpProvider to send the csrftoken in the header of any\n        // http request.\n        $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n        $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n        // Helper that wrappers the templateUrl to append the files version\n        // to the path. Used to override client cache.\n        function versionedPath(path) {\n            return path + \"?v=\" + MAAS_config.files_version;\n        }\n\n        // Setup routes only for the index page, all remaining pages should\n        // not use routes. Once all pages are converted to using Angular this\n        // will go away. Causing the page to never have to reload.\n        var href = angular.element(\"base\").attr('href');\n        var path = document.location.pathname;\n        if(path[path.length - 1] !== '/') {\n            path += '/';\n        }\n        if(path === href) {\n            var routes = $routeProvider.\n                when('/intro', {\n                    templateUrl: versionedPath(\n                        'static/partials/intro.html'),\n                    controller: 'IntroController'\n                }).\n                when('/intro/user', {\n                    templateUrl: versionedPath(\n                        'static/partials/intro-user.html'),\n                    controller: 'IntroUserController'\n                }).\n                when('/machines', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/machine/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/machine/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/machine/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/devices', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/device/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/device/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/device/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/controllers', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                }).\n                when('/controller/:system_id/:result_type/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-result.html'),\n                    controller: 'NodeResultController'\n                }).\n                when('/controller/:system_id/events', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-events.html'),\n                    controller: 'NodeEventsController'\n                }).\n                when('/controller/:system_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/node-details.html'),\n                    controller: 'NodeDetailsController'\n                }).\n                when('/nodes', {\n                    redirectTo: '/machines'\n                }).\n                when('/node/machine/:system_id', {\n                    redirectTo: '/machine/:system_id'\n                }).\n                when('/node/machine/:system_id/:result_type/:id', {\n                    redirectTo: '/machine/:system_id/:result_type/:id'\n                }).\n                when('/node/machine/:system_id/events', {\n                    redirectTo: '/machine/:system_id/events'\n                }).\n                when('/node/device/:system_id', {\n                    redirectTo: '/device/:system_id'\n                }).\n                when('/node/device/:system_id/:result_type/:id', {\n                    redirectTo: '/device/:system_id/:result_type/:id'\n                }).\n                when('/node/device/:system_id/events', {\n                    redirectTo: '/device/:system_id/events'\n                }).\n                when('/node/controller/:system_id', {\n                    redirectTo: '/controller/:system_id'\n                }).\n                when('/node/controller/:system_id/:result_type/:id', {\n                    redirectTo: '/controller/:system_id/:result_type/:id'\n                }).\n                when('/node/controller/:system_id/events', {\n                    redirectTo: '/controller/:system_id/events'\n                }).\n                when('/pods', {\n                    templateUrl: versionedPath(\n                        'static/partials/pods-list.html'),\n                    controller: 'PodsListController'\n                }).\n                when('/pod/:id', {\n                    templateUrl: versionedPath(\n                        'static/partials/pod-details.html'),\n                    controller: 'PodDetailsController'\n                }).\n                when('/images', {\n                    templateUrl: versionedPath(\n                        'static/partials/images.html'),\n                    controller: 'ImagesController'\n                }).\n                when('/domains', {\n                    templateUrl: versionedPath(\n                        'static/partials/domains-list.html'),\n                    controller: 'DomainsListController'\n                }).\n                when('/domain/:domain_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/domain-details.html'),\n                    controller: 'DomainDetailsController'\n                }).\n                when('/space/:space_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/space-details.html'),\n                    controller: 'SpaceDetailsController'\n                }).\n                when('/fabric/:fabric_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/fabric-details.html'),\n                    controller: 'FabricDetailsController'\n                }).\n                when('/subnets', {\n                    redirectTo: '/networks?by=fabric'\n                }).\n                when('/networks', {\n                    templateUrl: versionedPath(\n                        'static/partials/networks-list.html'),\n                    controller: 'NetworksListController',\n                    reloadOnSearch: false\n                }).\n                when('/subnet/:subnet_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/subnet-details.html'),\n                    controller: 'SubnetDetailsController'\n                }).\n                when('/vlan/:vlan_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/vlan-details.html'),\n                    controller: 'VLANDetailsController',\n                    controllerAs: 'vlanDetails'\n                }).\n                when('/settings/:section', {\n                    templateUrl: versionedPath(\n                        'static/partials/settings.html'),\n                    controller: 'SettingsController'\n                }).\n                when('/zone/:zone_id', {\n                    templateUrl: versionedPath(\n                        'static/partials/zone-details.html'),\n                    controller: 'ZoneDetailsController'\n                }).\n                when('/zones', {\n                    templateUrl: versionedPath(\n                        'static/partials/zones-list.html'),\n                    controller: 'ZonesListController',\n                    reloadOnSearch: false\n                });\n\n            if (MAAS_config.is_premium) {\n                routes = routes.when('/pools', {\n                    templateUrl: versionedPath(\n                        'static/partials/nodes-list.html'),\n                    controller: 'NodesListController'\n                });\n            }\n            if(MAAS_config.superuser) {\n                // Only superuser's can access the dashboard at the moment.\n                routes = routes.when('/dashboard', {\n                    templateUrl: versionedPath(\n                        'static/partials/dashboard.html'),\n                    controller: 'DashboardController'\n                });\n            }\n            routes = routes.otherwise({\n                redirectTo: '/machines'\n            });\n        }\n    });\n\n// Force users to #/intro when it has not been completed.\nangular.module('MAAS').run(['$rootScope', '$location',\n    function ($rootScope, $location) {\n        $rootScope.$on('$routeChangeStart', function(event, next, current) {\n            if(!MAAS_config.completed_intro) {\n                if(next.controller !== 'IntroController') {\n                    $location.path('/intro');\n                }\n            } else if (!MAAS_config.user_completed_intro) {\n                if(next.controller !== 'IntroUserController') {\n                    $location.path('/intro/user');\n                }\n            }\n        });\n    }]);\n\n// Send pageview to Google Anayltics when the route has changed.\nangular.module('MAAS').run(['$rootScope',\n    function ($rootScope) {\n        window.ga = window.ga || function() {\n            (window.ga.q = window.ga.q || []).push(arguments);\n        };\n        window.ga.l = +new Date();\n        window.ga('create', 'UA-1018242-63', 'auto', {\n          userId: MAAS_config.analytics_user_id\n        });\n        window.ga('set', 'dimension1', MAAS_config.version);\n        window.ga('set', 'dimension2', MAAS_config.uuid);\n        $rootScope.$on('$routeChangeSuccess', function() {\n            var path = window.location.pathname + window.location.hash;\n            window.ga('send', 'pageview', path);\n        });\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Browser Service\n *\n * Detects the browser used by the client. This is very simple case, because\n * at the moment we really only care about if the browser is Firefox. This\n * could be improved for other browsers, but this should only be used as a\n * last resort to prevent something bad happening on a misbehaving browser.\n */\n\nangular.module('MAAS').service('BrowserService', ['$window',\n    function($window) {\n\n        // The first items in the array will be matched first. So if the user\n        // agent for the browser contains both you need to make the more\n        // specific one first. E.g. Chrome contains both \"Chrome\" and \"Safari\"\n        // in its user-agent string. Since \"Safari\" does not chrome comes first\n        // so it matches that browser more specifically.\n        var BROWSERS = [\n            {\n                name: \"chrome\",\n                regex: /chrome/i\n            },\n            {\n                name: \"safari\",\n                regex: /safari/i\n            },\n            {\n                name: \"firefox\",\n                regex: /firefox/i\n            },\n            {\n                name: \"ie\",\n                regex: /MSIE/\n            }\n        ];\n\n        this.browser = \"other\";\n\n        // Set the browser if a regex matches. The first to match wins.\n        var self = this;\n        angular.forEach(BROWSERS, function(matcher) {\n            if(matcher.regex.test($window.navigator.userAgent) &&\n                self.browser === \"other\") {\n                self.browser = matcher.name;\n            }\n        });\n    }]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Converter Service\n *\n * Used by controllers to convert user inputs.\n */\n\nangular.module('MAAS').service('ConverterService', function() {\n\n        // Case is important: 1kB is 1000 bytes, whereas 1KB is 1024 bytes.\n        // See https://en.wikipedia.org/wiki/Byte#Unit_symbol\n        var UNITS = ['bytes', 'kB', 'MB', 'GB', 'TB'];\n\n        var KILOBYTE = 1000.0;\n        var MEGABYTE = 1000.0 * 1000.0;\n        var GIGABYTE = 1000.0 * 1000.0 * 1000.0;\n        var TERABYTE = 1000.0 * 1000.0 * 1000.0 * 1000.0;\n\n        // Convert the bytes to a unit.\n        this.bytesToUnits = function(bytes) {\n            // Support string being passed.\n            if(angular.isString(bytes)) {\n                bytes = parseInt(bytes, 10);\n            }\n\n            var i, unit, converted = bytes;\n            for(i = 0; i < UNITS.length; i++) {\n                unit = UNITS[i];\n                if(Math.abs(converted) < 1000.0 || unit === 'TB') {\n                    var string = converted.toFixed(1) + \" \" + unit;\n                    if(unit === 'bytes') {\n                        string = converted + \" \" + unit;\n                    }\n                    return {\n                        original: bytes,\n                        converted: converted,\n                        units: unit,\n                        string: string\n                    };\n                }\n                converted /= 1000.0;\n            }\n        };\n\n        // Convert the data based on the unit to bytes.\n        this.unitsToBytes = function(data, unit) {\n            // Support string being passed.\n            if(angular.isString(data)) {\n                data = parseFloat(data);\n            }\n            if(unit === 'bytes') {\n                return Math.floor(data);\n            } else if(unit === 'kB') {\n                return Math.floor(data * KILOBYTE);\n            } else if(unit === 'MB') {\n                return Math.floor(data * MEGABYTE);\n            } else if(unit === 'GB') {\n                return Math.floor(data * GIGABYTE);\n            } else if(unit === 'TB') {\n                return Math.floor(data * TERABYTE);\n            }\n        };\n\n        // Convert the data based on unit down to the lowest tolerance to still\n        // be the same value in that unit.\n        this.roundUnits = function(data, unit) {\n            // Support string being passed.\n            if(angular.isString(data)) {\n                data = parseFloat(data);\n            }\n            if(unit === 'bytes') {\n                return Math.floor(data);\n            } else if(unit === 'kB') {\n                return Math.floor(data * KILOBYTE) - (0.05 * KILOBYTE);\n            } else if(unit === 'MB') {\n                return Math.floor(data * MEGABYTE) - (0.05 * MEGABYTE);\n            } else if(unit === 'GB') {\n                return Math.floor(data * GIGABYTE) - (0.05 * GIGABYTE);\n            } else if(unit === 'TB') {\n                return Math.floor(data * TERABYTE) - (0.05 * TERABYTE);\n            }\n        };\n\n        // Round the bytes down to size based on the block size.\n        this.roundByBlockSize = function(bytes, block_size) {\n            return block_size * Math.floor(bytes / block_size);\n        };\n\n        // Convert string ipv4 address into octets array.\n        this.ipv4ToOctets = function(ipAddress) {\n            var parts = ipAddress.split('.');\n            var octets = [];\n            angular.forEach(parts, function(part) {\n                octets.push(parseInt(part, 10));\n            });\n            return octets;\n        };\n\n        // Convert string ipv4 address into integer.\n        this.ipv4ToInteger = function(ipAddress) {\n            var octets = this.ipv4ToOctets(ipAddress);\n            return (\n                (octets[0] * Math.pow(256,3)) +\n                (octets[1] * Math.pow(256,2)) +\n                (octets[2] * 256) + octets[3]);\n        };\n\n        // Convert ipv6 address to a full ipv6 address, removing the\n        // '::' shortcut and padding each group with zeros.\n        this.ipv6Expand = function(ipAddress) {\n            var i, expandedAddress = ipAddress;\n            if(expandedAddress.indexOf(\"::\") !== -1) {\n                // '::' is present so replace it with the required\n                // number of '0000:' based on its location in the string.\n                var split = ipAddress.split(\"::\");\n                var groups = 0;\n                for(i = 0; i < split.length; i++) {\n                    groups += split[i].split(\":\").length;\n                }\n                expandedAddress = split[0] + \":\";\n                for(i = 0; i < 8 - groups; i++) {\n                    expandedAddress += \"0000:\";\n                }\n                expandedAddress += split[1];\n            }\n            // Pad the output of each part with zeros.\n            var output = [], parts = expandedAddress.split(\":\");\n            angular.forEach(parts, function(part) {\n                output.push(\"0000\".substr(part.length) + part);\n            });\n            return output.join(\":\");\n        };\n\n        // Convert string ipv6 into groups array.\n        this.ipv6ToGroups = function(ipAddress) {\n            var groups = [];\n            var parts = this.ipv6Expand(ipAddress).split(\":\");\n            angular.forEach(parts, function(part) {\n                groups.push(parseInt(part, 16));\n            });\n            return groups;\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Error Service\n */\n\nangular.module('MAAS').service('ErrorService', function() {\n\n        // Holds the client error.\n        this._error = null;\n\n        // Raise this error in the UI.\n        this.raiseError = function(error) {\n            // Possible that this method is called more than once.\n            // Only take the first error.\n            if(!angular.isString(this._error)) {\n                this._error = error;\n            }\n        };\n    });\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS JSON Service\n *\n * Used by controllers to parse JSON.\n */\n\nangular.module('MAAS').service('JSONService', function() {\n\n    // Return the JSON for the string or null if it cannot be parsed.\n    this.tryParse = function(jsonString) {\n        try {\n            var obj = JSON.parse(jsonString);\n            // JSON.parse(false) or JSON.parse(1234) will throw errors, but\n            // JSON.parse(null) returns 'null', and typeof null === \"object\".\n            if (obj && typeof obj === \"object\" && obj !== null) {\n                return obj;\n            }\n        }\n        catch (e) { }\n        return null;\n    };\n});\n","/* Copyright 2017 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * Log Service\n *\n * Allows logging to be enabled or disabled, and allows a particular log level\n * to be set, which will allow logs of a specified importance (or more) to be\n * seen.\n *\n * Also appends a time index (in seconds, accurate to milliseconds) to the\n * beginning of the log string.\n */\n\nangular.module('MAAS').service('LogService', [\n    '$window', function($window) {\n        var self = this;\n\n        // Global enable/disable for MAAS logging. If set to `false`, this\n        // value takes precedence over the logLevel.\n        self.logging = true;\n\n        // Specifies the log level.\n        // Level 1: error() logging\n        // Level 2: error() and warn() logging\n        // Level 3: all of the above, plus info()\n        // Level 4: all of the above, plus log()\n        // Level 5: all of the above, plus debug()\n        self.logLevel = 5;\n\n        // Returns a monotonic time (in milliseconds) since page load.\n        self.now = function() {\n            return $window.performance ? $window.performance.now() : 0;\n        };\n\n        // Standard logging functions.\n        self._debug = console.debug;\n        self._log = console.log;\n        self._info = console.info;\n        self._warn = console.warn;\n        self._error = console.error;\n\n        // Formats the specified time (in milliseconds) in seconds.\n        this.formatMilliseconds = function(milliseconds) {\n            return parseFloat(milliseconds / 1000.0).toFixed(3);\n        };\n\n        // Internal function to log using the specified destination, with the\n        // specified list of arguments.\n        this.__log = function(destination, args) {\n            if(self.logging === true) {\n                // Add time index to the beginning of the log.\n                Array.prototype.unshift.call(args,\n                    \"[\" + self.formatMilliseconds(self.now()) + \"]\");\n                destination.apply(self, args);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._debug().\n        this.debug = function() {\n            if(self.logLevel >= 5) {\n                self.__log(self._debug, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._log().\n        this.log = function() {\n            if(self.logLevel >= 4) {\n                self.__log(self._log, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._info().\n        this.info = function() {\n            if(self.logLevel >= 3) {\n                self.__log(self._info, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._warn().\n        this.warn = function() {\n            if(self.logLevel >= 2) {\n                self.__log(self._warn, arguments);\n            }\n        };\n\n        // Wrapper to check the log level and then call self._err().\n        this.error = function() {\n            if(self.logLevel >= 1) {\n                self.__log(self._error, arguments);\n            }\n        };\n    }\n]);\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Base Manager\n *\n * Manages a collection of items from the websocket in the browser. The manager\n * uses the RegionConnection to load the items, update the items, and listen\n * for notification events about the items.\n */\n\nangular.module('MAAS').service(\n    'Manager',\n    ['$q', '$rootScope', '$timeout', 'RegionConnection', function(\n            $q, $rootScope, $timeout, RegionConnection) {\n\n        // Actions that are used to update the statuses metadata.\n        var METADATA_ACTIONS = {\n            CREATE: \"create\",\n            UPDATE: \"update\",\n            DELETE: \"delete\"\n        };\n\n        // Constructor\n        function Manager() {\n            // Primary key on the items in the list. Used to match items.\n            this._pk = \"id\";\n\n            // Key used when loading batches. Typically the same as _pk\n            // but not always.\n            this._batchKey = \"id\";\n\n            // The field from which to get a human-readable name.\n            this._name_field = \"name\";\n\n            // Handler on the region to call to list, create, update, delete,\n            // and listen for notifications. Must be set by overriding manager.\n            this._handler = null;\n\n            // Holds all items in the system. This list must always be the same\n            // object.\n            this._items = [];\n\n            // The way this manager recieves its updated information. 'notify'\n            // means this manager recieved notify messages from the websocket.\n            // See PollingManager for the other possible type. This is only\n            // used by the `ManagerHelperService` to identify how updating\n            // the data should be handled.\n            this._type = 'notify';\n\n            // Holds list of scopes that currently have this manager loaded.\n            this._scopes = [];\n\n            // True when all of the items have been loaded. This is done on\n            // intial connection to the region.\n            this._loaded = false;\n\n            // True when the items list is currently being loaded or reloaded.\n            // Actions will not be processed while this is false.\n            this._isLoading = false;\n\n            // Holds list of defers that need to be called once the loading of\n            // items has finished. This is used when a caller calls loadItems\n            // when its already loading.\n            this._extraLoadDefers = [];\n\n            // Holds list of defers that need to be called once the reloading\n            // of items has finished. This is used when a caller calls\n            // reloadItems when its already reloading.\n            this._extraReloadDefers = [];\n\n            // Holds all of the notify actions that need to be processed. This\n            // is used to hold the actions while the items are being loaded.\n            // Once all of the items are loaded the queue will be processed.\n            this._actionQueue = [];\n\n            // Holds list of all of the currently selected items. This is held\n            // in a seperate list to remove the need to loop through the full\n            // listing to grab the selected items.\n            this._selectedItems = [];\n\n            // Set to true when the items list should reload upon re-connection\n            // to the region.\n            this._autoReload = false;\n\n            // Holds the item that is currenly being viewed. This object will\n            // be updated if any notify events are recieved for it. This allows\n            // the ability of not having to keep pulling the item out of the\n            // items list.\n            this._activeItem = null;\n\n            // Holds metadata information that is used to helper filtering.\n            this._metadata = {};\n\n            // List of attributes to track on the loaded items. Each attribute\n            // in this list will be placed in _metadata to track its currect\n            // values and the number of items with that value.\n            this._metadataAttributes = [];\n        }\n\n        // Return index of the item in the given array.\n        Manager.prototype._getIndexOfItem = function(array, pk_value) {\n            var i;\n            for(i = 0, len = array.length; i < len; i++) {\n                if(array[i][this._pk] === pk_value) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n\n        // Replace the item in the array at the same index.\n        Manager.prototype._replaceItemInArray = function(array, item) {\n            var idx = this._getIndexOfItem(array, item[this._pk]);\n            if(idx >= 0) {\n                // Keep the current selection on the item.\n                item.$selected = array[idx].$selected;\n                angular.copy(item, array[idx]);\n            }\n        };\n\n        // Remove the item from the array.\n        Manager.prototype._removeItemByIdFromArray = function(\n            array, pk_value) {\n            var idx = this._getIndexOfItem(array, pk_value);\n            if(idx >= 0) {\n                array.splice(idx, 1);\n            }\n        };\n\n        // Return the parameters that should be used for the batch load\n        // request. Should be used by subclass that want to add extra\n        // parameters to the batch request. By default it returns an empty\n        // object.\n        Manager.prototype._initBatchLoadParameters = function() {\n            return {};\n        };\n\n        // Batch load items from the region in groups of 50.\n        Manager.prototype._batchLoadItems = function(array, extra_func) {\n            var self = this;\n            var defer = $q.defer();\n            var method = this._handler + \".list\";\n            function callLoad() {\n                var params = self._initBatchLoadParameters();\n                params.limit = 50;\n\n                // Get the last batchKey in the list so the region knows to\n                // start at that offset.\n                if(array.length > 0) {\n                    params.start = array[array.length-1][self._batchKey];\n                }\n                RegionConnection.callMethod(\n                    method, params).then(function(items) {\n                        // Pass each item to extra_func function if given.\n                        if(angular.isFunction(extra_func)) {\n                            angular.forEach(items, function(item) {\n                                extra_func(item);\n                            });\n                        }\n\n                        array.push.apply(array, items);\n                        if(items.length === 50) {\n                            // Could be more items, request the next 50.\n                            callLoad(array);\n                        } else {\n                            defer.resolve(array);\n                        }\n                    }, defer.reject);\n            }\n            callLoad();\n            return defer.promise;\n        };\n\n        // Resolves array of defers with item.\n        Manager.prototype._resolveDefers = function(defersArray, item) {\n            angular.forEach(defersArray, function(defer) {\n                defer.resolve(item);\n            });\n        };\n\n        // Rejects array of defers with error.\n        Manager.prototype._rejectDefers = function(defersArray, error) {\n            angular.forEach(defersArray, function(defer) {\n                defer.reject(error);\n            });\n        };\n\n        // Return list of items.\n        Manager.prototype.getItems = function() {\n            return this._items;\n        };\n\n        // Clears the currect state of the manager.\n        Manager.prototype.clear = function() {\n            this._loaded = false;\n            this._items.length = 0;\n            this._actionQueue.length = 0;\n            this._selectedItems.length = 0;\n            this._activeItem = null;\n            this._metadata = {};\n            this._metadataAttributes.length = 0;\n        };\n\n        // Load all the items.\n        Manager.prototype.loadItems = function() {\n            // If the items have already been loaded then, we need to\n            // reload the items list not load the initial list.\n            if(this._loaded) {\n                return this.reloadItems();\n            }\n\n            // If its already loading then the caller just needs to be informed\n            // of when it has finished loading.\n            if(this._isLoading) {\n                var defer = $q.defer();\n                this._extraLoadDefers.push(defer);\n                return defer.promise;\n            }\n\n            var self = this;\n            this._isLoading = true;\n            return this._batchLoadItems(this._items, function(item) {\n                item.$selected = false;\n                self._updateMetadata(item, METADATA_ACTIONS.CREATE);\n                self._processItem(item);\n            }).then(function() {\n                self._loaded = true;\n                self._isLoading = false;\n                self.processActions();\n                self._resolveDefers(self._extraLoadDefers, self._items);\n                self._extraLoadDefers = [];\n                return self._items;\n            }, function(error) {\n                self._rejectDefers(self._extraLoadDefers, error);\n                self._extraLoadDefers = [];\n                return $q.reject(error);\n            });\n        };\n\n        // Reload the items list.\n        Manager.prototype.reloadItems = function() {\n            // If the items have not been loaded then, we need to\n            // load the initial list.\n            if(!this._loaded) {\n                return this.loadItems();\n            }\n\n            // If its already reloading then the caller just needs to be\n            // informed of when it has refinished loading.\n            if(this._isLoading) {\n                var defer = $q.defer();\n                this._extraReloadDefers.push(defer);\n                return defer.promise;\n            }\n\n            // Updates the items list with the reloaded items.\n            var self = this;\n            function updateItems(items) {\n                // Iterate in reverse so we can remove items inline, without\n                // having to adjust the index.\n                var i = self._items.length;\n                while(i--) {\n                    var item = self._items[i];\n                    var updatedIdx = self._getIndexOfItem(\n                        items, item[self._pk]);\n                    if(updatedIdx === -1) {\n                        self._updateMetadata(item, METADATA_ACTIONS.DELETE);\n                        self._items.splice(i, 1);\n                        self._removeItemByIdFromArray(\n                            self._selectedItems, item[self._pk]);\n                    } else {\n                        var updatedItem = items[updatedIdx];\n                        self._updateMetadata(\n                            updatedItem, METADATA_ACTIONS.UPDATE);\n                        updatedItem.$selected = item.$selected;\n                        angular.copy(items[updatedIdx], item);\n                        items.splice(updatedIdx, 1);\n                    }\n                }\n\n                // The remain items in items array are the new items.\n                angular.forEach(items, function(item) {\n                    self._items.push(item);\n                    self._processItem(item);\n                });\n            }\n\n            // The reload action loads all of the items into this list\n            // instead of the items list. This list will then be used to\n            // update the items list.\n            var currentItems = [];\n\n            // Start the reload process and once complete call updateItems.\n            self._isLoading = true;\n            return this._batchLoadItems(currentItems).then(function(items) {\n                updateItems(items);\n                self._isLoading = false;\n                self.processActions();\n\n                // Set the activeItem again so the region knows that its\n                // the active item.\n                if(angular.isObject(self._activeItem)) {\n                    self.setActiveItem(self._activeItem[self._pk]);\n                }\n\n                self._resolveDefers(self._extraReloadDefers, self._items);\n                self._extraReloadDefers = [];\n                return self._items;\n            }, function(error) {\n                self._rejectDefers(self._extraReloadDefers, error);\n                self._extraReloadDefers = [];\n                return $q.reject(error);\n            });\n        };\n\n        // Enables auto reloading of the item list on connection to region.\n        Manager.prototype.enableAutoReload = function() {\n            if(!this._autoReload) {\n                this._autoReload = true;\n                var self = this;\n                this._reloadFunc = function() {\n                    self.reloadItems();\n                };\n                RegionConnection.registerHandler(\"open\", this._reloadFunc);\n            }\n        };\n\n        // Disable auto reloading of the item list on connection to region.\n        Manager.prototype.disableAutoReload = function() {\n            if(this._autoReload) {\n                RegionConnection.unregisterHandler(\"open\", this._reloadFunc);\n                this._reloadFunc = null;\n                this._autoReload = false;\n            }\n        };\n\n        // True when the initial item list has finished loading.\n        Manager.prototype.isLoaded = function() {\n            return this._loaded;\n        };\n\n        // True when the item list is currently being loaded or reloaded.\n        Manager.prototype.isLoading = function() {\n            return this._isLoading;\n        };\n\n        // Allow for extra processing of items as they are added or updated.\n        Manager.prototype._processItem = function(item) {\n        };\n\n        // Replace item in the items and selectedItems list.\n        Manager.prototype._replaceItem = function(item) {\n            this._updateMetadata(item, METADATA_ACTIONS.UPDATE);\n            this._replaceItemInArray(this._items, item);\n        };\n\n        // Remove item in the items and selectedItems list.\n        Manager.prototype._removeItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx >= 0) {\n                this._updateMetadata(this._items[idx], METADATA_ACTIONS.DELETE);\n            }\n            this._removeItemByIdFromArray(this._items, pk_value);\n            this._removeItemByIdFromArray(this._selectedItems, pk_value);\n        };\n\n        // Get the item from the list. Does not make a get request to the\n        // region to load more data.\n        Manager.prototype.getItemFromList = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx >= 0) {\n                return this._items[idx];\n            } else {\n                return null;\n            }\n        };\n\n        // Get the item from the region.\n        Manager.prototype.getItem = function(pk_value) {\n            var self = this;\n            var method = this._handler + \".get\";\n            var params = {};\n            params[this._pk] = pk_value;\n            return RegionConnection.callMethod(\n                method, params).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the create information to the region.\n        Manager.prototype.createItem = function(item) {\n            var self = this;\n            var method = this._handler + \".create\";\n            item = angular.copy(item);\n            delete item.$selected;\n            return RegionConnection.callMethod(\n                method, item).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the update information to the region.\n        Manager.prototype.updateItem = function(item) {\n            var self = this;\n            var method = this._handler + \".update\";\n            item = angular.copy(item);\n            delete item.$selected;\n            return RegionConnection.callMethod(\n                method, item).then(function(item) {\n                    self._replaceItem(item);\n                    return item;\n                });\n        };\n\n        // Send the delete call for item to the region.\n        Manager.prototype.deleteItem = function(item) {\n            var self = this;\n            var method = this._handler + \".delete\";\n            var params = {};\n            params[this._pk] = item[this._pk];\n            return RegionConnection.callMethod(\n                method, params).then(function() {\n                    self._removeItem(item[self._pk]);\n                });\n        };\n\n        // Return the active item.\n        Manager.prototype.getActiveItem = function() {\n            return this._activeItem;\n        };\n\n        // Set the active item.\n        Manager.prototype.setActiveItem = function(pk_value) {\n            if(!this._loaded) {\n                throw new Error(\n                    \"Cannot set active item unless the manager is loaded.\");\n            }\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                this._activeItem = null;\n                // Item with pk_value does not exists. Reject the returned\n                // deferred.\n                var defer = $q.defer();\n                $timeout(function() {\n                    defer.reject(\"No item with pk: \" + pk_value);\n                });\n                return defer.promise;\n            } else {\n                this._activeItem = this._items[idx];\n                // Data that is loaded from the list call is limited and\n                // doesn't contain all of the needed data for an activeItem.\n                // Call set_active on the handler for the region to know\n                // this item needs all information when updated.\n                var self = this;\n                var method = this._handler + \".set_active\";\n                var params = {};\n                params[this._pk] = pk_value;\n                return RegionConnection.callMethod(\n                    method, params).then(function(item) {\n                        self._replaceItem(item);\n                        return self._activeItem;\n                    });\n            }\n        };\n\n        // Clears the active item.\n        Manager.prototype.clearActiveItem = function() {\n            this._activeItem = null;\n        };\n\n        // True when the item list is stable and not being loaded or reloaded.\n        Manager.prototype.canProcessActions = function() {\n            return !this._isLoading;\n        };\n\n        // Handle notify from RegionConnection about an item.\n        Manager.prototype.onNotify = function(action, data) {\n            // Place the notification in the action queue.\n            this._actionQueue.push({\n                action: action,\n                data: data\n            });\n            // Processing incoming actions is enabled. Otherwise they\n            // will be queued until processActions is called.\n            if(this.canProcessActions()) {\n               $rootScope.$apply(this.processActions());\n            }\n        };\n\n        // Process all actions to keep the item information up-to-date.\n        Manager.prototype.processActions = function() {\n            while(this._actionQueue.length > 0) {\n                var action = this._actionQueue.shift();\n                if(action.action === \"create\") {\n                    // Check that the received data doesn't already exists\n                    // in the _items list. If it does then this is actually\n                    // an update action not a create action.\n                    var idx = this._getIndexOfItem(\n                        this._items, action.data[this._pk]);\n                    if(idx >= 0) {\n                        // Actually this is an update action not a create\n                        // action. So replace the item instead of adding it.\n                        this._replaceItem(action.data);\n                    } else {\n                        action.data.$selected = false;\n                        this._updateMetadata(\n                            action.data, METADATA_ACTIONS.CREATE);\n                        this._items.push(action.data);\n                    }\n                    this._processItem(action.data);\n                } else if(action.action === \"update\") {\n                    this._replaceItem(action.data);\n                    this._processItem(action.data);\n                } else if(action.action === \"delete\") {\n                    this._removeItem(action.data);\n                }\n            }\n        };\n\n        // Return list of selected items.\n        Manager.prototype.getSelectedItems = function() {\n            return this._selectedItems;\n        };\n\n        // Mark the given item as selected.\n        Manager.prototype.selectItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: selection of \" + this._handler + \"(\" + pk_value +\n                    \") failed because its missing in the items list.\");\n                return;\n            }\n\n            var item = this._items[idx];\n            item.$selected = true;\n\n            idx = this._selectedItems.indexOf(item);\n            if(idx === -1) {\n                this._selectedItems.push(item);\n            }\n        };\n\n        // Mark the given item as unselected.\n        Manager.prototype.unselectItem = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: de-selection of \" + this._handler + \"(\" +\n                    pk_value + \") failed because its missing in the \" +\n                    \"nodes list.\");\n                return;\n            }\n\n            var item = this._items[idx];\n            item.$selected = false;\n\n            idx = this._selectedItems.indexOf(item);\n            if(idx >= 0) {\n                this._selectedItems.splice(idx, 1);\n            }\n        };\n\n        // Determine if a item is selected.\n        Manager.prototype.isSelected = function(pk_value) {\n            var idx = this._getIndexOfItem(this._items, pk_value);\n            if(idx === -1) {\n                console.log(\n                    \"WARN: unable to determine if \" + this._handler + \"(\" +\n                    pk_value + \") is selected because its missing in the \" +\n                    \"nodes list.\");\n                return false;\n            }\n\n            return this._items[idx].$selected === true;\n        };\n\n        // Return the metadata object value from `metadatas` matching `name`.\n        Manager.prototype._getMetadataValue = function(metadatas, name) {\n            var i;\n            for(i = 0; i < metadatas.length; i++) {\n                if(metadatas[i].name === name) {\n                    return metadatas[i];\n                }\n            }\n            return null;\n        };\n\n        // Add new value to metadatas if it doesnt exists or increment the\n        // count if it already does.\n        Manager.prototype._addMetadataValue = function(metadatas, value) {\n            var metadata = this._getMetadataValue(metadatas, value);\n            if(metadata) {\n                metadata.count += 1;\n            } else {\n                metadata = {\n                    name: value,\n                    count: 1\n                };\n                metadatas.push(metadata);\n            }\n        };\n\n        // Remove value from metadatas.\n        Manager.prototype._removeMetadataValue = function(metadatas, value) {\n            var metadata = this._getMetadataValue(metadatas, value);\n            if(metadata) {\n                metadata.count -= 1;\n                if(metadata.count <= 0) {\n                    metadatas.splice(metadatas.indexOf(metadata), 1);\n                }\n            }\n        };\n\n        // Update the metadata entry in `metadatas` for the array value and\n        // based on the action.\n        Manager.prototype._updateMetadataArrayEntry = function(\n                metadatas, newValue, action, oldValue) {\n            var self = this;\n\n            if(action === METADATA_ACTIONS.CREATE) {\n                angular.forEach(newValue, function(value) {\n                    // On create ignore empty values.\n                    if(value === '') {\n                        return;\n                    }\n                    self._addMetadataValue(metadatas, value);\n                });\n            } else if(action === METADATA_ACTIONS.DELETE) {\n                angular.forEach(newValue, function(value) {\n                    self._removeMetadataValue(metadatas, value);\n                });\n            } else if(action === METADATA_ACTIONS.UPDATE &&\n                angular.isDefined(oldValue)) {\n                // Any values in added are new on the item, and any values left\n                // in oldArray have been removed.\n                var added = [];\n                var oldArray = angular.copy(oldValue);\n                angular.forEach(newValue, function(value) {\n                    var idx = oldArray.indexOf(value);\n                    if(idx === -1) {\n                        // Value not in oldArray so it has been added.\n                        added.push(value);\n                    } else {\n                        // Value already in oldArray so its already tracked.\n                        oldArray.splice(idx, 1);\n                    }\n                });\n\n                // Add the new values.\n                angular.forEach(added, function(value) {\n                    self._addMetadataValue(metadatas, value);\n                });\n\n                // Remove the old values.\n                angular.forEach(oldArray, function(value) {\n                    self._removeMetadataValue(metadatas, value);\n                });\n            }\n        };\n\n        // Update the metadata entry in `metadatas` for the newValue and based\n        // on the action. Method does not work with array values, use\n        // _updateMetadataArrayEntry for values that are arrays.\n        Manager.prototype._updateMetadataValueEntry = function(\n                metadatas, newValue, action, oldValue) {\n            if(action === METADATA_ACTIONS.CREATE) {\n                // On create ignore empty values.\n                if(newValue === '') {\n                    return;\n                }\n                this._addMetadataValue(metadatas, newValue);\n            } else if(action === METADATA_ACTIONS.DELETE) {\n                this._removeMetadataValue(metadatas, newValue);\n            } else if(action === METADATA_ACTIONS.UPDATE &&\n                angular.isDefined(oldValue)) {\n                if(oldValue !== newValue) {\n                    if(oldValue !== \"\") {\n                        // Decrement the old value\n                        this._removeMetadataValue(metadatas, oldValue);\n                    }\n\n                    // Increment the new value with the \"create\"\n                    // operation.\n                    this._updateMetadataEntry(\n                        metadatas, newValue, METADATA_ACTIONS.CREATE, oldValue);\n                }\n            }\n        };\n\n        // Update the metadata entry in `metadatas` with the newValue and based\n        // on the action. Update action will use the oldValue to remove it from\n        // the metadata.\n        Manager.prototype._updateMetadataEntry = function(\n                metadatas, newValue, action, oldValue) {\n            if(angular.isArray(newValue)) {\n                this._updateMetadataArrayEntry(\n                    metadatas, newValue, action, oldValue);\n            } else {\n                this._updateMetadataValueEntry(\n                    metadatas, newValue, action, oldValue);\n            }\n        };\n\n        // Return the metadata object.\n        Manager.prototype.getMetadata = function() {\n            return this._metadata;\n        };\n\n        // Update the metadata objects based on the given item and action.\n        Manager.prototype._updateMetadata = function(item, action) {\n            var self = this;\n            var oldItem, idx;\n            if(action === METADATA_ACTIONS.UPDATE) {\n                // Update actions require the oldItem if it exist in the\n                // current item listing.\n                idx = this._getIndexOfItem(this._items, item[this._pk]);\n                if(idx >= 0) {\n                    oldItem = this._items[idx];\n                }\n            }\n            angular.forEach(this._metadataAttributes, function(func, attr) {\n                if(angular.isUndefined(self._metadata[attr])) {\n                    self._metadata[attr] = [];\n                }\n                var newValue, oldValue;\n                if(angular.isFunction(func)) {\n                    newValue = func(item);\n                    if(angular.isObject(oldItem)) {\n                        oldValue = func(oldItem);\n                    }\n                } else {\n                    newValue = item[attr];\n                    if(angular.isObject(oldItem)) {\n                        oldValue = oldItem[attr];\n                    }\n                }\n                self._updateMetadataEntry(\n                    self._metadata[attr], newValue, action, oldValue);\n            });\n        };\n\n        // Default implementation of getName(): returns the default name for\n        // this object, if it exists.\n        Manager.prototype.getName = function(obj) {\n            if(!angular.isObject(obj)) {\n                return;\n            }\n            if(angular.isString(obj[this._name_field])) {\n                return obj[this._name_field];\n            }\n        };\n\n        return Manager;\n    }]);\n","/* Copyright 2015-2018 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Manager Helper Service\n *\n * Used by controllers to load managers. It helps the initialization of\n * managers and makes sure that all items in the manager are loaded\n * before resolving the defer.\n */\n\nangular.module('MAAS').service('ManagerHelperService', [\n    '$q', '$timeout', 'ErrorService', 'RegionConnection',\n    function($q, $timeout, ErrorService, RegionConnection) {\n\n        // Loads the manager.\n        this.loadManager = function(scope, manager) {\n            var defer = $q.defer();\n            var self = this;\n\n            // If the manager already has this scope loaded then nothing needs\n            // to be done.\n            if(manager._scopes.indexOf(scope) > -1) {\n                $timeout(function() {\n                    defer.resolve(manager);\n                });\n                return defer.promise;\n            }\n\n            // Do this entire operation with in the context of the region\n            // connection is connected.\n            RegionConnection.defaultConnect().then(function() {\n                if(manager._type === 'notify') {\n                    if(manager.isLoaded()) {\n                        $timeout(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        });\n                    } else {\n                        manager.loadItems().then(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                    }\n                    // Always enable auto reload. This will make sure the items\n                    // are reloaded if the connection goes down.\n                    manager.enableAutoReload();\n\n                    // Remove the scope for the loaded scopes for the manager.\n                    scope.$on(\"$destroy\", function() {\n                        self.unloadManager(scope, manager);\n                    });\n                } else if(manager._type === 'poll') {\n                    if(manager.isPolling()) {\n                        $timeout(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        });\n                    } else {\n                        manager.startPolling().then(function() {\n                            manager._scopes.push(scope);\n                            defer.resolve(manager);\n                        }, function(error) {\n                            ErrorService.raiseError(error);\n                        });\n                    }\n\n                    // Stop the polling when the scope is destroyed and its\n                    // not in use by any other scopes.\n                    scope.$on(\"$destroy\", function() {\n                        self.unloadManager(scope, manager);\n                    });\n                } else {\n                    throw new Error(\"Unknown manager type: \" + manager._type);\n                }\n            });\n            return defer.promise;\n        };\n\n        // Gets the list of managers.\n        this.loadManagers = function(scope, managers) {\n            var defer = $q.defer();\n            var loadedManagers = [];\n\n            // Resolves the defer if all managers are loaded.\n            var resolveAllLoaded = function() {\n                if(loadedManagers.length === managers.length) {\n                    defer.resolve(managers);\n                }\n            };\n\n            var self = this;\n            angular.forEach(managers, function(manager) {\n                self.loadManager(scope, manager).then(function(loadedManager) {\n                    loadedManagers.push(loadedManager);\n                    resolveAllLoaded();\n                });\n            });\n            return defer.promise;\n        };\n\n        this.unloadManager = function(scope, manager) {\n            var idx = manager._scopes.indexOf(scope);\n            if(idx > -1) {\n                manager._scopes.splice(idx, 1);\n            }\n            if(manager._type === 'poll' && manager._scopes.length === 0) {\n                manager.stopPolling();\n            }\n        }\n\n        this.unloadManagers = function(scope, managers) {\n            var self = this;\n            angular.forEach(managers, function(manager) {\n                self.unloadManager(scope, manager);\n            });\n        }\n\n        // Tries to parse the specified string as JSON. If parsing fails,\n        // returns the original string. (This is useful since some manager\n        // calls return an error that could be either plain text, or JSON.)\n        this.tryParsingJSON = function(string) {\n            var error;\n            try {\n                error = JSON.parse(string);\n            } catch(e) {\n                if (e instanceof SyntaxError) {\n                    return string;\n                } else {\n                    throw e;\n                }\n            }\n            return error;\n        };\n\n        // Returns a printable version of the specified dictionary (useful\n        // for displaying an error to the user).\n        this.getPrintableString = function(dict, showNames) {\n            var result = '';\n            angular.forEach(dict, function(value, key) {\n                var error = dict[key];\n                if(showNames === true) {\n                    result += key + \": \";\n                }\n                if(angular.isString(error) || angular.isNumber(error)) {\n                    result += error + \"  \";\n                } else if(angular.isObject(error)) {\n                    angular.forEach(error, function(error) {\n                        result += error + \"  \";\n                    });\n                }\n                result = result.trim() + \"\\n\";\n            });\n            return result.trim();\n        };\n\n        // Convert the Python dict error message to displayed message.\n        // We know it's probably a form ValidationError dictionary, so just use\n        // it as such, and recover if that doesn't parse as JSON.\n        this.parseValidationError = function(error, showNames) {\n            error = this.tryParsingJSON(error);\n            if(!angular.isObject(error)) {\n                return error;\n            } else {\n                return this.getPrintableString(error, showNames);\n            }\n        };\n    }]);\n","/* Copyright 2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Space Manager\n *\n * Manages all of the spaces in the browser. The manager uses the\n * RegionConnection to load the spaces, update the spaces, and listen for\n * notification events about spaces.\n */\n\nangular.module('MAAS').factory(\n    'PollingManager',\n    ['$q', '$timeout', 'RegionConnection', 'Manager',\n    function($q, $timeout, RegionConnection, Manager) {\n\n        function PollingManager() {\n            Manager.call(this);\n\n            // The way this manager recieves its updated information. 'poll'\n            // means this manager periodicly polls for new data from the\n            // websocket.\n            this._type = 'poll';\n\n            // Set to true when polling has been enabled.\n            this._polling = false;\n\n            // The next promise for the polling interval.\n            this._nextPromise = null;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data.\n            this._pollTimeout = 10000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when an error occurs.\n            this._pollErrorTimeout = 3000;\n\n            // Amount of time in milliseconds the manager should wait to poll\n            // for new data when the retrieved data is empty.\n            this._pollEmptyTimeout = 3000;\n        }\n\n        PollingManager.prototype = new Manager();\n\n        // Returns true when currently polling.\n        PollingManager.prototype.isPolling = function() {\n            return this._polling;\n        };\n\n        // Starts the polling.\n        PollingManager.prototype.startPolling = function() {\n            if(!this._polling) {\n                this._polling = true;\n                return this._poll();\n            } else {\n                return this._nextPromise;\n            }\n        };\n\n        // Stops the polling.\n        PollingManager.prototype.stopPolling = function() {\n            this._polling = false;\n            if(angular.isObject(this._nextPromise)) {\n                $timeout.cancel(this._nextPromise);\n                this._nextPromise = null;\n            }\n        };\n\n        // Registers the next polling attempt.\n        PollingManager.prototype._pollAgain = function(timeout) {\n            var self = this;\n            this._nextPromise = $timeout(function() {\n                self._poll();\n            }, timeout);\n            return this._nextPromise;\n        };\n\n        // Polls for the data from the region.\n        PollingManager.prototype._poll = function() {\n            var self = this;\n            return this.reloadItems().then(function(items) {\n                var pollTimeout = self._pollTimeout;\n                if(items.length === 0) {\n                    pollTimeout = self._pollEmptyTimeout;\n                }\n                self._pollAgain(pollTimeout);\n                return items;\n            }, function(error) {\n                self._pollAgain(self._pollErrorTimeout);\n                return $q.reject(error);\n            });\n        };\n\n        return PollingManager;\n    }]);\n","/* Copyright 2015 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Nodes Search Services\n */\n\nangular.module('MAAS').service('SearchService', function() {\n\n    // Holds an empty filter object.\n    var emptyFilter = { _: [] };\n\n    // Return a new empty filter;\n    this.getEmptyFilter = function() {\n        return angular.copy(emptyFilter);\n    };\n\n    // Splits the search string into different terms based on white space.\n    // This handles the ability for whitespace to be inside of '(', ')'.\n    //\n    // XXX blake_r 28-01-15: This could be improved with a regex, but was\n    // unable to come up with one that would allow me to validate the end\n    // ')' in the string.\n    this.getSplitSearch = function(search) {\n        var terms = search.split(' ');\n        var fixedTerms = [];\n        var spanningParentheses = false;\n        angular.forEach(terms, function(term, idx) {\n            if(spanningParentheses) {\n                // Previous term had an opening '(' but not a ')'. This\n                // term should join that previous term.\n                fixedTerms[fixedTerms.length - 1] += ' ' + term;\n\n                // If the term contains the ending ')' then its the last\n                // in the group.\n                if(term.indexOf(')') !== -1) {\n                    spanningParentheses = false;\n                }\n            } else {\n                // Term is not part of a previous '(' span.\n                fixedTerms.push(term);\n\n                var startIdx = term.indexOf('(');\n                if(startIdx !== -1) {\n                    if(term.indexOf(')', startIdx) === -1) {\n                        // Contains a starting '(' but not a ending ')'.\n                        spanningParentheses = true;\n                    }\n                }\n            }\n        });\n\n        if(spanningParentheses) {\n            // Missing ending parentheses so error with terms.\n            return null;\n        }\n        return fixedTerms;\n    };\n\n    // Return all of the currently active filters for the given search.\n    this.getCurrentFilters = function(search) {\n        var filters = this.getEmptyFilter();\n        if(search.length === 0) {\n            return filters;\n        }\n        var searchTerms = this.getSplitSearch(search);\n        if(!searchTerms) {\n            return null;\n        }\n        angular.forEach(searchTerms, function(terms) {\n            terms = terms.split(':');\n            if(terms.length === 1) {\n                // Search term is not specifing a specific field. Gets\n                // add to the '_' section of the filters.\n                if(filters._.indexOf(terms[0]) === -1) {\n                    filters._.push(terms[0]);\n                }\n            } else {\n                var field = terms.shift();\n                var values = terms.join(\":\");\n\n                // Remove the starting '(' and ending ')'.\n                values = values.replace('(', '');\n                values = values.replace(')', '');\n\n                // If empty values then do nothing.\n                if(values.length === 0) {\n                    return;\n                }\n\n                // Split the values based on comma.\n                values = values.split(',');\n\n                // Add the values to filters.\n                if(angular.isUndefined(filters[field])) {\n                    filters[field] = [];\n                }\n                angular.forEach(values, function(value) {\n                    if(filters[field].indexOf(value) === -1) {\n                        filters[field].push(value);\n                    }\n                });\n            }\n        });\n        return filters;\n    };\n\n    // Convert \"filters\" into a search string.\n    this.filtersToString = function(filters) {\n        var search = \"\";\n        angular.forEach(filters, function(terms, type) {\n            // Skip empty and skip \"_\" as it gets appended at the\n            // beginning of the search.\n            if(terms.length === 0 || type === \"_\") {\n                return;\n            }\n            search += type + \":(\" + terms.join(\",\") + \") \";\n        });\n        if(filters._.length > 0) {\n            search = filters._.join(\" \") + \" \" + search;\n        }\n        return search.trim();\n    };\n\n    // Return the index of the value in the type for the filter.\n    this._getFilterValueIndex = function(filters, type, value) {\n        var values = filters[type];\n        if(angular.isUndefined(values)) {\n            return -1;\n        }\n        var lowerValues = values.map(function(value) {\n            return value.toLowerCase();\n        });\n        return lowerValues.indexOf(value.toLowerCase());\n    };\n\n    // Return true if the type and value are in the filters.\n    this.isFilterActive = function(filters, type, value, exact) {\n        var values = filters[type];\n        if(angular.isUndefined(values)) {\n            return false;\n        }\n        if(angular.isUndefined(exact)) {\n            exact = false;\n        }\n        if(exact) {\n            value = \"=\" + value;\n        }\n        return this._getFilterValueIndex(filters, type, value) !== -1;\n    };\n\n    // Toggles a filter on or off based on type and value.\n    this.toggleFilter = function(filters, type, value, exact) {\n        if(angular.isUndefined(filters[type])) {\n            filters[type] = [];\n        }\n        if(exact) {\n            value = \"=\" + value;\n        }\n        var idx = this._getFilterValueIndex(filters, type, value);\n        if(idx === -1) {\n            filters[type].push(value);\n        } else {\n            filters[type].splice(idx, 1);\n        }\n        return filters;\n    };\n\n    // Holds all stored filters.\n    var storedFilters = {};\n\n    // Store a filter for later.\n    this.storeFilters = function(name, filters) {\n        storedFilters[name] = filters;\n    };\n\n    // Retrieve a stored fitler.\n    this.retrieveFilters = function(name) {\n        return storedFilters[name];\n    };\n});\n","/* Copyright 2015-2016 Canonical Ltd.  This software is licensed under the\n * GNU Affero General Public License version 3 (see the file LICENSE).\n *\n * MAAS Validation Service\n *\n * Used by controllers to validate user inputs.\n */\n\nangular.module('MAAS').service('ValidationService', [\n    'ConverterService', function(ConverterService) {\n\n        // Pattern that matches a domainname.\n        // XXX 2016-02-24 lamont: This also matches \"example.com.\",\n        // which is wrong.\n        var domainnamePattern =\n            /^([a-z\\d]|[a-z\\d][a-z\\d-.]*[a-z\\d])*$/i;\n\n        // Pattern that matches a hostname.\n        var hostnamePattern =\n            /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])*$/;\n\n        // Pattern that matches a MAC.\n        var macPattern = /^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$/;\n\n        // Pattern used to match IPv4.\n        var ipv4Pattern = new RegExp([\n            '^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.',\n            '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n            ].join(''));\n\n        // Returns true if the octets in one equal two with the cidr mask in\n        // bits applied to both.\n        function cidrMatcher(one, two, size, bits) {\n            var part = 0;\n            while(bits > 0) {\n                var shift = size - bits;\n                if(shift < 0) {\n                    shift = 0;\n                }\n\n                var oneShift = one[part] >> shift;\n                var twoShift = two[part] >> shift;\n                if(oneShift !== twoShift) {\n                    return false;\n                }\n                bits -= size;\n                part += 1;\n            }\n            return true;\n        }\n\n        // Return true if the domainname is valid, false otherwise.\n        this.validateDomainName = function(domainname) {\n            // Invalid if the domain is not a string, empty, or more than\n            // 253 characters.\n            if(!angular.isString(domainname) ||\n                domainname.length === 0 || domainname.length > 253) {\n                return false;\n            }\n            return domainnamePattern.test(domainname);\n        };\n\n        // Return true if the hostname is valid, false otherwise.\n        this.validateHostname = function(hostname) {\n            // Invalid if the hostname is not a string, empty, or more than\n            // 63 characters.\n            if(!angular.isString(hostname) ||\n                hostname.length === 0 || hostname.length > 63) {\n                return false;\n            }\n            return hostnamePattern.test(hostname);\n        };\n\n        // Return true if the MAC is valid, false otherwise.\n        this.validateMAC = function(macAddress) {\n            // Invalid if the macAddress is not a string.\n            if(!angular.isString(macAddress)) {\n                return false;\n            }\n            return macPattern.test(macAddress.trim());\n        };\n\n        // Return true if the IP is valid IPv4 address, false otherwise.\n        this.validateIPv4 = function(ipAddress) {\n            // Invalid if the ipAddress is not a string or empty.\n            if(!angular.isString(ipAddress) || ipAddress.length === 0) {\n                return false;\n            }\n            return ipv4Pattern.test(ipAddress);\n        };\n\n        // Return true if the IP is valid IPv6 address, false otherwise.\n        this.validateIPv6 = function(ipAddress) {\n            // Invalid if the ipAddress is not a string, empty, or missing\n            // at least one ':'.\n            if(!angular.isString(ipAddress) ||\n                ipAddress.length === 0 ||\n                ipAddress.indexOf(':') === -1) {\n                return false;\n            }\n            var expandedAddress = ConverterService.ipv6Expand(ipAddress);\n            var octets = ConverterService.ipv6ToGroups(expandedAddress);\n            if(octets.length !== 8) {\n                return false;\n            }\n\n            // Make sure all octets are in range.\n            var i;\n            for(i = 0; i < 8; i++) {\n                if(isNaN(octets[i]) || octets[i] < 0 || octets[i] > 0xffff) {\n                    // Out of range.\n                    return false;\n                }\n            }\n\n            // Don't allow unspecified, loopback, multicast, link-local\n            // unicast, or anything out of range.\n            if(octets[0] < 1 ||\n                octets[0] === 0xff00 ||\n                octets[0] === 0xfe80) {\n                return false;\n            }\n            return true;\n        };\n\n        // Return true if the IP is valid, false otherwise.\n        this.validateIP = function(ipAddress) {\n            return (\n                this.validateIPv4(ipAddress) || this.validateIPv6(ipAddress));\n        };\n\n        // Return true if the ipAddress is in the network.\n        this.validateIPInNetwork = function(ipAddress, network) {\n            var networkSplit = network.split('/');\n            var networkAddress = networkSplit[0];\n            var cidrBits = parseInt(networkSplit[1], 10);\n\n            if(this.validateIPv4(ipAddress) &&\n                this.validateIPv4(networkAddress)) {\n                return cidrMatcher(\n                    ConverterService.ipv4ToOctets(ipAddress),\n                    ConverterService.ipv4ToOctets(networkAddress),\n                    8, cidrBits);\n            } else if(this.validateIPv6(ipAddress) &&\n                this.validateIPv6(networkAddress)) {\n                return cidrMatcher(\n                    ConverterService.ipv6ToGroups(ipAddress),\n                    ConverterService.ipv6ToGroups(networkAddress),\n                    16, cidrBits);\n            }\n            return false;\n        };\n\n        // Return true if the ipAddress is in the network and between the\n        // lowAddress and highAddress inclusive.\n        this.validateIPInRange = function(\n            ipAddress, network, lowAddress, highAddress) {\n            // If the ip address is not even in the network then its\n            // not in the range.\n            if(!this.validateIPInNetwork(ipAddress, network)) {\n                return false;\n            }\n\n            var i, ipOctets, lowOctets, highOctets;\n            if(this.validateIPv4(ipAddress) &&\n                this.validateIPv4(lowAddress) &&\n                this.validateIPv4(highAddress)) {\n\n                // Check that each octet is of the ip address is more or equal\n                // to the low address and less or equal to the high address.\n                ipOctets = ConverterService.ipv4ToOctets(ipAddress);\n                lowOctets = ConverterService.ipv4ToOctets(lowAddress);\n                highOctets = ConverterService.ipv4ToOctets(highAddress);\n                for(i = 0; i < 4; i++) {\n                    if(ipOctets[i] > highOctets[i] ||\n                        ipOctets[i] < lowOctets[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            } else if(this.validateIPv6(ipAddress) &&\n                this.validateIPv6(lowAddress) &&\n                this.validateIPv6(highAddress)) {\n\n                // Check that each octet is of the ip address is more or equal\n                // to the low address and less or equal to the high address.\n                ipOctets = ConverterService.ipv6ToGroups(ipAddress);\n                lowOctets = ConverterService.ipv6ToGroups(lowAddress);\n                highOctets = ConverterService.ipv6ToGroups(highAddress);\n                for(i = 0; i < 8; i++) {\n                    if(ipOctets[i] > highOctets[i] ||\n                        ipOctets[i] < lowOctets[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return false;\n        };\n    }]);\n"],"sourceRoot":""}