{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/maasserver/static/js/angular/3rdparty/ng-tags-input.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","KEYS","SUPPORTED_INPUT_TYPES","tagsInput","angular","directive","$timeout","$document","$window","tagsInputConfig","tiUtil","validateType","type","indexOf","restrict","require","scope","tags","onTagAdding","onTagAdded","onInvalidTag","onTagRemoving","onTagRemoved","replace","transclude","templateUrl","controller","$scope","$attrs","$element","events","simplePubSub","load","template","String","placeholder","tabindex","Number","removeTagSymbol","fromCharCode","replaceSpacesWithDashes","Boolean","minLength","maxLength","addOnEnter","addOnSpace","addOnComma","addOnBlur","addOnPaste","pasteSplitPattern","RegExp","allowedTagsPattern","enableEditingLastTag","minTags","maxTags","displayProperty","keyProperty","allowLeftoverText","addFromAutocompleteOnly","spellcheck","tagList","options","getTagText","setTagText","tagIsValid","self","tag","safeToString","text","tagText","length","test","findInObjectArray","items","$tag","addText","add","push","trigger","remove","index","splice","clearSelection","select","selected","selectPrior","selectNext","removeSelected","handleUndefinedResult","this","registerAutocomplete","find","addTag","focusInput","getTags","getCurrentTagText","newTag","getOptions","on","handler","registerTagItem","removeTag","disabled","link","element","attrs","ngModelCtrl","setElementValidity","hotkeys","input","validationOptions","$setValidity","hasFocus","$isEmpty","invalid","setText","track","$watch","makeObjectArray","$observe","eventHandlers","change","keydown","$event","focus","blur","activeElement","prop","lostFocusToBrowserWindow","lostFocusToChildElement","contains","paste","getTextData","clipboardData","originalEvent","getData","host","click","$setViewValue","e","triggerHandler","event","shouldAdd","shouldRemove","shouldSelect","shouldEditLastTag","key","keyCode","addKeys","shiftKey","altKey","ctrlKey","metaKey","preventDefault","split","forEach","data","tagsInputCtrl","$$template","$$removeTagSymbol","$getDisplayText","$removeTag","$index","$sce","$q","source","debounceDelay","highlightMatchedText","maxResultsToShow","loadOnDownArrow","loadOnEmpty","loadOnFocus","selectFirstMatch","suggestionList","loadFn","getDifference","lastPromise","getTagId","array1","array2","filter","item","a","b","defaultComparer","reset","visible","query","show","debounce","promise","when","$query","then","slice","getCurrentTag","$parent","registerAutocompleteMatch","getQuery","shouldLoadSuggestions","addSuggestionByIndex","addSuggestion","added","copy","handled","stopImmediatePropagation","root","eq","parent","elementTop","elementHeight","parentHeight","parentScrollTop","scrollToElement","autoCompleteCtrl","autoComplete","$highlight","safeHighlight","trustAsHtml","ctrl","transcludeFn","clone","append","span","resize","threshold","getTextAutosizeThreshold","css","originalValue","width","isString","$parsers","unshift","$formatters","$modelValue","tiBindAttrs","$set","provider","globalDefaults","interpolationStatus","autosizeThreshold","setDefaults","defaults","setActiveInterpolation","setTextAutosizeThreshold","$get","$interpolate","converters","parseInt","toLowerCase","defaultValidator","localDefault","validator","converter","getDefault","updateValue","globalValue","isDefined","newValue","factory","fn","delay","timeoutId","args","arguments","cancel","apply","array","isObject","obj","comparer","some","str","encodeHTML","expression","escapeRegexChars","match","isUndefined","toString","trim","valueIfUndefined","result","names","every","run","$templateCache","put"],"mappings":"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","file":"vendor-min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 625);\n","/*!\n * ngTagsInput v2.3.0\n * http://mbenford.github.io/ngTagsInput\n *\n * Copyright (c) 2013-2015 Michael Benford\n * License: MIT\n *\n * Generated at 2015-03-24 00:49:44 -0300\n */\n(function() {\n'use strict';\n\nvar KEYS = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    escape: 27,\n    space: 32,\n    up: 38,\n    down: 40,\n    left: 37,\n    right: 39,\n    delete: 46,\n    comma: 188\n};\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\nvar SUPPORTED_INPUT_TYPES = ['text', 'email', 'url'];\n\nvar tagsInput = angular.module('ngTagsInput', []);\n\n/**\n * @ngdoc directive\n * @name tagsInput\n * @module ngTagsInput\n *\n * @description\n * Renders an input box with tag editing support.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} [displayProperty=text] Property to be rendered as the tag label.\n * @param {string=} [keyProperty=text] Property to be used as a unique identifier for the tag.\n * @param {string=} [type=text] Type of the input element. Only 'text', 'email' and 'url' are supported values.\n * @param {number=} tabindex Tab order of the control.\n * @param {string=} [placeholder=Add a tag] Placeholder text for the control.\n * @param {number=} [minLength=3] Minimum length for a new tag.\n * @param {number=} [maxLength=MAX_SAFE_INTEGER] Maximum length allowed for a new tag.\n * @param {number=} [minTags=0] Sets minTags validation error key if the number of tags added is less than minTags.\n * @param {number=} [maxTags=MAX_SAFE_INTEGER] Sets maxTags validation error key if the number of tags added is greater than maxTags.\n * @param {boolean=} [allowLeftoverText=false] Sets leftoverText validation error key if there is any leftover text in\n *                                             the input element when the directive loses focus.\n * @param {string=} [removeTagSymbol=×] Symbol character for the remove tag button.\n * @param {boolean=} [addOnEnter=true] Flag indicating that a new tag will be added on pressing the ENTER key.\n * @param {boolean=} [addOnSpace=false] Flag indicating that a new tag will be added on pressing the SPACE key.\n * @param {boolean=} [addOnComma=true] Flag indicating that a new tag will be added on pressing the COMMA key.\n * @param {boolean=} [addOnBlur=true] Flag indicating that a new tag will be added when the input field loses focus.\n * @param {boolean=} [addOnPaste=false] Flag indicating that the text pasted into the input field will be split into tags.\n * @param {string=} [pasteSplitPattern=,] Regular expression used to split the pasted text into tags.\n * @param {boolean=} [replaceSpacesWithDashes=true] Flag indicating that spaces will be replaced with dashes.\n * @param {string=} [allowedTagsPattern=.+] Regular expression that determines whether a new tag is valid.\n * @param {boolean=} [enableEditingLastTag=false] Flag indicating that the last tag will be moved back into\n *                                                the new tag input box instead of being removed when the backspace key\n *                                                is pressed and the input box is empty.\n * @param {boolean=} [addFromAutocompleteOnly=false] Flag indicating that only tags coming from the autocomplete list will be allowed.\n *                                                   When this flag is true, addOnEnter, addOnComma, addOnSpace, addOnBlur and\n *                                                   allowLeftoverText values are ignored.\n * @param {boolean=} [spellcheck=true] Flag indicating whether the browser's spellcheck is enabled for the input field or not.\n * @param {expression} onTagAdding Expression to evaluate that will be invoked before adding a new tag. The new tag is available as $tag. This method must return either true or false. If false, the tag will not be added.\n * @param {expression} onTagAdded Expression to evaluate upon adding a new tag. The new tag is available as $tag.\n * @param {expression} onInvalidTag Expression to evaluate when a tag is invalid. The invalid tag is available as $tag.\n * @param {expression} onTagRemoving Expression to evaluate that will be invoked before removing a tag. The tag is available as $tag. This method must return either true or false. If false, the tag will not be removed.\n * @param {expression} onTagRemoved Expression to evaluate upon removing an existing tag. The removed tag is available as $tag.\n */\ntagsInput.directive('tagsInput', [\"$timeout\",\"$document\",\"$window\",\"tagsInputConfig\",\"tiUtil\", function($timeout, $document, $window, tagsInputConfig, tiUtil) {\n    function TagList(options, events, onTagAdding, onTagRemoving) {\n        var self = {}, getTagText, setTagText, tagIsValid;\n\n        getTagText = function(tag) {\n            return tiUtil.safeToString(tag[options.displayProperty]);\n        };\n\n        setTagText = function(tag, text) {\n            tag[options.displayProperty] = text;\n        };\n\n        tagIsValid = function(tag) {\n            var tagText = getTagText(tag);\n\n            return tagText &&\n                   tagText.length >= options.minLength &&\n                   tagText.length <= options.maxLength &&\n                   options.allowedTagsPattern.test(tagText) &&\n                   !tiUtil.findInObjectArray(self.items, tag, options.keyProperty || options.displayProperty) &&\n                   onTagAdding({ $tag: tag });\n        };\n\n        self.items = [];\n\n        self.addText = function(text) {\n            var tag = {};\n            setTagText(tag, text);\n            return self.add(tag);\n        };\n\n        self.add = function(tag) {\n            var tagText = getTagText(tag);\n\n            if (options.replaceSpacesWithDashes) {\n                tagText = tiUtil.replaceSpacesWithDashes(tagText);\n            }\n\n            setTagText(tag, tagText);\n\n            if (tagIsValid(tag)) {\n                self.items.push(tag);\n                events.trigger('tag-added', { $tag: tag });\n            }\n            else if (tagText) {\n                events.trigger('invalid-tag', { $tag: tag });\n            }\n\n            return tag;\n        };\n\n        self.remove = function(index) {\n            var tag = self.items[index];\n\n            if (onTagRemoving({ $tag: tag }))  {\n                self.items.splice(index, 1);\n                self.clearSelection();\n                events.trigger('tag-removed', { $tag: tag });\n                return tag;\n            }\n        };\n\n        self.select = function(index) {\n            if (index < 0) {\n                index = self.items.length - 1;\n            }\n            else if (index >= self.items.length) {\n                index = 0;\n            }\n\n            self.index = index;\n            self.selected = self.items[index];\n        };\n\n        self.selectPrior = function() {\n            self.select(--self.index);\n        };\n\n        self.selectNext = function() {\n            self.select(++self.index);\n        };\n\n        self.removeSelected = function() {\n            return self.remove(self.index);\n        };\n\n        self.clearSelection = function() {\n            self.selected = null;\n            self.index = -1;\n        };\n\n        self.clearSelection();\n\n        return self;\n    }\n\n    function validateType(type) {\n        return SUPPORTED_INPUT_TYPES.indexOf(type) !== -1;\n    }\n\n    return {\n        restrict: 'E',\n        require: 'ngModel',\n        scope: {\n            tags: '=ngModel',\n            onTagAdding: '&',\n            onTagAdded: '&',\n            onInvalidTag: '&',\n            onTagRemoving: '&',\n            onTagRemoved: '&'\n        },\n        replace: false,\n        transclude: true,\n        templateUrl: 'ngTagsInput/tags-input.html',\n        controller: [\"$scope\",\"$attrs\",\"$element\", function($scope, $attrs, $element) {\n            $scope.events = tiUtil.simplePubSub();\n\n            tagsInputConfig.load('tagsInput', $scope, $attrs, {\n                template: [String, 'ngTagsInput/tag-item.html'],\n                type: [String, 'text', validateType],\n                placeholder: [String, 'Add a tag'],\n                tabindex: [Number, null],\n                removeTagSymbol: [String, String.fromCharCode(215)],\n                replaceSpacesWithDashes: [Boolean, true],\n                minLength: [Number, 3],\n                maxLength: [Number, MAX_SAFE_INTEGER],\n                addOnEnter: [Boolean, true],\n                addOnSpace: [Boolean, false],\n                addOnComma: [Boolean, true],\n                addOnBlur: [Boolean, true],\n                addOnPaste: [Boolean, false],\n                pasteSplitPattern: [RegExp, /,/],\n                allowedTagsPattern: [RegExp, /.+/],\n                enableEditingLastTag: [Boolean, false],\n                minTags: [Number, 0],\n                maxTags: [Number, MAX_SAFE_INTEGER],\n                displayProperty: [String, 'text'],\n                keyProperty: [String, ''],\n                allowLeftoverText: [Boolean, false],\n                addFromAutocompleteOnly: [Boolean, false],\n                spellcheck: [Boolean, true]\n            });\n\n            $scope.tagList = new TagList($scope.options, $scope.events,\n                tiUtil.handleUndefinedResult($scope.onTagAdding, true),\n                tiUtil.handleUndefinedResult($scope.onTagRemoving, true));\n\n            this.registerAutocomplete = function() {\n                var input = $element.find('input');\n\n                return {\n                    addTag: function(tag) {\n                        return $scope.tagList.add(tag);\n                    },\n                    focusInput: function() {\n                        // blake_r - Stop the focus as this breaks on the\n                        // version of AngularJS that ships with MAAS.\n                        //input[0].focus();\n                    },\n                    getTags: function() {\n                        return $scope.tags;\n                    },\n                    getCurrentTagText: function() {\n                        return $scope.newTag.text;\n                    },\n                    getOptions: function() {\n                        return $scope.options;\n                    },\n                    on: function(name, handler) {\n                        $scope.events.on(name, handler);\n                        return this;\n                    }\n                };\n            };\n\n            this.registerTagItem = function() {\n                return {\n                    getOptions: function() {\n                        return $scope.options;\n                    },\n                    removeTag: function(index) {\n                        if ($scope.disabled) {\n                            return;\n                        }\n                        $scope.tagList.remove(index);\n                    }\n                };\n            };\n        }],\n        link: function(scope, element, attrs, ngModelCtrl) {\n            var hotkeys = [KEYS.enter, KEYS.comma, KEYS.space, KEYS.backspace, KEYS.delete, KEYS.left, KEYS.right],\n                tagList = scope.tagList,\n                events = scope.events,\n                options = scope.options,\n                input = element.find('input'),\n                validationOptions = ['minTags', 'maxTags', 'allowLeftoverText'],\n                setElementValidity;\n\n            setElementValidity = function() {\n                ngModelCtrl.$setValidity('maxTags', scope.tags.length <= options.maxTags);\n                ngModelCtrl.$setValidity('minTags', scope.tags.length >= options.minTags);\n                ngModelCtrl.$setValidity('leftoverText', scope.hasFocus || options.allowLeftoverText ? true : !scope.newTag.text);\n            };\n\n            ngModelCtrl.$isEmpty = function(value) {\n                return !value || !value.length;\n            };\n\n            scope.newTag = {\n                text: '',\n                invalid: null,\n                setText: function(value) {\n                    this.text = value;\n                    events.trigger('input-change', value);\n                }\n            };\n\n            scope.track = function(tag) {\n                return tag[options.keyProperty || options.displayProperty];\n            };\n\n            scope.$watch('tags', function(value) {\n                scope.tags = tiUtil.makeObjectArray(value, options.displayProperty);\n                tagList.items = scope.tags;\n            });\n\n            scope.$watch('tags.length', function() {\n                setElementValidity();\n            });\n\n            attrs.$observe('disabled', function(value) {\n                scope.disabled = value;\n            });\n\n            scope.eventHandlers = {\n                input: {\n                    change: function(text) {\n                        events.trigger('input-change', text);\n                    },\n                    keydown: function($event) {\n                        events.trigger('input-keydown', $event);\n                    },\n                    focus: function() {\n                        if (scope.hasFocus) {\n                            return;\n                        }\n\n                        scope.hasFocus = true;\n                        events.trigger('input-focus');\n                    },\n                    blur: function() {\n                        $timeout(function() {\n                            var activeElement = $document.prop('activeElement'),\n                                lostFocusToBrowserWindow = activeElement === input[0],\n                                lostFocusToChildElement = element[0].contains(activeElement);\n\n                            if (lostFocusToBrowserWindow || !lostFocusToChildElement) {\n                                scope.hasFocus = false;\n                                events.trigger('input-blur');\n                            }\n                        });\n                    },\n                    paste: function($event) {\n                        $event.getTextData = function() {\n                            var clipboardData = $event.clipboardData || ($event.originalEvent && $event.originalEvent.clipboardData);\n                            return clipboardData ? clipboardData.getData('text/plain') : $window.clipboardData.getData('Text');\n                        };\n                        events.trigger('input-paste', $event);\n                    }\n                },\n                host: {\n                    click: function() {\n                        if (scope.disabled) {\n                            return;\n                        }\n                        // blake_r - Stop the focus as this breaks on the\n                        // version of AngularJS that ships with MAAS.\n                        //input[0].focus();\n                    }\n                }\n            };\n\n            events\n                .on('tag-added', scope.onTagAdded)\n                .on('invalid-tag', scope.onInvalidTag)\n                .on('tag-removed', scope.onTagRemoved)\n                .on('tag-added', function() {\n                    scope.newTag.setText('');\n                })\n                .on('tag-added tag-removed', function() {\n                    // Sets the element to its dirty state\n                    // In Angular 1.3 this will be replaced with $setDirty.\n                    ngModelCtrl.$setViewValue(scope.tags);\n                })\n                .on('invalid-tag', function() {\n                    scope.newTag.invalid = true;\n                })\n                .on('option-change', function(e) {\n                    if (validationOptions.indexOf(e.name) !== -1) {\n                        setElementValidity();\n                    }\n                })\n                .on('input-change', function() {\n                    tagList.clearSelection();\n                    scope.newTag.invalid = null;\n                })\n                .on('input-focus', function() {\n                    element.triggerHandler('focus');\n                    ngModelCtrl.$setValidity('leftoverText', true);\n                })\n                .on('input-blur', function() {\n                    if (options.addOnBlur && !options.addFromAutocompleteOnly) {\n                        tagList.addText(scope.newTag.text);\n                    }\n                    element.triggerHandler('blur');\n                    setElementValidity();\n                })\n                .on('input-keydown', function(event) {\n                    var key = event.keyCode,\n                        isModifier = event.shiftKey || event.altKey || event.ctrlKey || event.metaKey,\n                        addKeys = {},\n                        shouldAdd, shouldRemove, shouldSelect, shouldEditLastTag;\n\n                    if (isModifier || hotkeys.indexOf(key) === -1) {\n                        return;\n                    }\n\n                    addKeys[KEYS.enter] = options.addOnEnter;\n                    addKeys[KEYS.comma] = options.addOnComma;\n                    addKeys[KEYS.space] = options.addOnSpace;\n\n                    shouldAdd = !options.addFromAutocompleteOnly && addKeys[key];\n                    shouldRemove = (key === KEYS.backspace || key === KEYS.delete) && tagList.selected;\n                    shouldEditLastTag = key === KEYS.backspace && scope.newTag.text.length === 0 && options.enableEditingLastTag;\n                    shouldSelect = (key === KEYS.backspace || key === KEYS.left || key === KEYS.right) && scope.newTag.text.length === 0 && !options.enableEditingLastTag;\n\n                    if (shouldAdd) {\n                        tagList.addText(scope.newTag.text);\n                    }\n                    else if (shouldEditLastTag) {\n                        var tag;\n\n                        tagList.selectPrior();\n                        tag = tagList.removeSelected();\n\n                        if (tag) {\n                            scope.newTag.setText(tag[options.displayProperty]);\n                        }\n                    }\n                    else if (shouldRemove) {\n                        tagList.removeSelected();\n                    }\n                    else if (shouldSelect) {\n                        if (key === KEYS.left || key === KEYS.backspace) {\n                            tagList.selectPrior();\n                        }\n                        else if (key === KEYS.right) {\n                            tagList.selectNext();\n                        }\n                    }\n\n                    if (shouldAdd || shouldSelect || shouldRemove || shouldEditLastTag) {\n                        event.preventDefault();\n                    }\n                })\n                .on('input-paste', function(event) {\n                    if (options.addOnPaste) {\n                        var data = event.getTextData();\n                        var tags = data.split(options.pasteSplitPattern);\n\n                        if (tags.length > 1) {\n                            tags.forEach(function(tag) {\n                                tagList.addText(tag);\n                            });\n                            event.preventDefault();\n                        }\n                    }\n                });\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name tiTagItem\n * @module ngTagsInput\n *\n * @description\n * Represents a tag item. Used internally by the tagsInput directive.\n */\ntagsInput.directive('tiTagItem', [\"tiUtil\", function(tiUtil) {\n    return {\n        restrict: 'E',\n        require: '^tagsInput',\n        template: '<ng-include src=\"$$template\"></ng-include>',\n        scope: { data: '=' },\n        link: function(scope, element, attrs, tagsInputCtrl) {\n            var tagsInput = tagsInputCtrl.registerTagItem(),\n                options = tagsInput.getOptions();\n\n            scope.$$template = options.template;\n            scope.$$removeTagSymbol = options.removeTagSymbol;\n\n            scope.$getDisplayText = function() {\n                return tiUtil.safeToString(scope.data[options.displayProperty]);\n            };\n            scope.$removeTag = function() {\n                tagsInput.removeTag(scope.$index);\n            };\n\n            scope.$watch('$parent.$index', function(value) {\n                scope.$index = value;\n            });\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name autoComplete\n * @module ngTagsInput\n *\n * @description\n * Provides autocomplete support for the tagsInput directive.\n *\n * @param {expression} source Expression to evaluate upon changing the input content. The input value is available as\n *                            $query. The result of the expression must be a promise that eventually resolves to an\n *                            array of strings.\n * @param {string=} [displayProperty=text] Property to be rendered as the autocomplete label.\n * @param {number=} [debounceDelay=100] Amount of time, in milliseconds, to wait before evaluating the expression in\n *                                      the source option after the last keystroke.\n * @param {number=} [minLength=3] Minimum number of characters that must be entered before evaluating the expression\n *                                 in the source option.\n * @param {boolean=} [highlightMatchedText=true] Flag indicating that the matched text will be highlighted in the\n *                                               suggestions list.\n * @param {number=} [maxResultsToShow=10] Maximum number of results to be displayed at a time.\n * @param {boolean=} [loadOnDownArrow=false] Flag indicating that the source option will be evaluated when the down arrow\n *                                           key is pressed and the suggestion list is closed. The current input value\n *                                           is available as $query.\n * @param {boolean=} {loadOnEmpty=false} Flag indicating that the source option will be evaluated when the input content\n *                                       becomes empty. The $query variable will be passed to the expression as an empty string.\n * @param {boolean=} {loadOnFocus=false} Flag indicating that the source option will be evaluated when the input element\n *                                       gains focus. The current input value is available as $query.\n * @param {boolean=} [selectFirstMatch=true] Flag indicating that the first match will be automatically selected once\n *                                           the suggestion list is shown.\n * @param {string=} [template=] URL or id of a custom template for rendering each element of the autocomplete list.\n */\ntagsInput.directive('autoComplete', [\"$document\",\"$timeout\",\"$sce\",\"$q\",\"tagsInputConfig\",\"tiUtil\", function($document, $timeout, $sce, $q, tagsInputConfig, tiUtil) {\n    function SuggestionList(loadFn, options, events) {\n        var self = {}, getDifference, lastPromise, getTagId;\n\n        getTagId = function() {\n            return options.tagsInput.keyProperty || options.tagsInput.displayProperty;\n        };\n\n        getDifference = function(array1, array2) {\n            return array1.filter(function(item) {\n                return !tiUtil.findInObjectArray(array2, item, getTagId(), function(a, b) {\n                    if (options.tagsInput.replaceSpacesWithDashes) {\n                        a = tiUtil.replaceSpacesWithDashes(a);\n                        b = tiUtil.replaceSpacesWithDashes(b);\n                    }\n                    return tiUtil.defaultComparer(a, b);\n                });\n            });\n        };\n\n        self.reset = function() {\n            lastPromise = null;\n\n            self.items = [];\n            self.visible = false;\n            self.index = -1;\n            self.selected = null;\n            self.query = null;\n        };\n        self.show = function() {\n            if (options.selectFirstMatch) {\n                self.select(0);\n            }\n            else {\n                self.selected = null;\n            }\n            self.visible = true;\n        };\n        self.load = tiUtil.debounce(function(query, tags) {\n            self.query = query;\n\n            var promise = $q.when(loadFn({ $query: query }));\n            lastPromise = promise;\n\n            promise.then(function(items) {\n                if (promise !== lastPromise) {\n                    return;\n                }\n\n                items = tiUtil.makeObjectArray(items.data || items, getTagId());\n                items = getDifference(items, tags);\n                self.items = items.slice(0, options.maxResultsToShow);\n\n                if (self.items.length > 0) {\n                    self.show();\n                }\n                else {\n                    self.reset();\n                }\n            });\n        }, options.debounceDelay);\n\n        self.selectNext = function() {\n            self.select(++self.index);\n        };\n        self.selectPrior = function() {\n            self.select(--self.index);\n        };\n        self.select = function(index) {\n            if (index < 0) {\n                index = self.items.length - 1;\n            }\n            else if (index >= self.items.length) {\n                index = 0;\n            }\n            self.index = index;\n            self.selected = self.items[index];\n            events.trigger('suggestion-selected', index);\n        };\n\n        self.reset();\n\n        return self;\n    }\n\n    function scrollToElement(root, index) {\n        var element = root.find('li').eq(index),\n            parent = element.parent(),\n            elementTop = element.prop('offsetTop'),\n            elementHeight = element.prop('offsetHeight'),\n            parentHeight = parent.prop('clientHeight'),\n            parentScrollTop = parent.prop('scrollTop');\n\n        if (elementTop < parentScrollTop) {\n            parent.prop('scrollTop', elementTop);\n        }\n        else if (elementTop + elementHeight > parentHeight + parentScrollTop) {\n            parent.prop('scrollTop', elementTop + elementHeight - parentHeight);\n        }\n    }\n\n    return {\n        restrict: 'E',\n        require: '^tagsInput',\n        scope: { source: '&' },\n        templateUrl: 'ngTagsInput/auto-complete.html',\n        controller: [\"$scope\",\"$element\",\"$attrs\", function($scope, $element, $attrs) {\n            $scope.events = tiUtil.simplePubSub();\n\n            tagsInputConfig.load('autoComplete', $scope, $attrs, {\n                template: [String, 'ngTagsInput/auto-complete-match.html'],\n                debounceDelay: [Number, 100],\n                minLength: [Number, 3],\n                highlightMatchedText: [Boolean, true],\n                maxResultsToShow: [Number, 10],\n                loadOnDownArrow: [Boolean, false],\n                loadOnEmpty: [Boolean, false],\n                loadOnFocus: [Boolean, false],\n                selectFirstMatch: [Boolean, true],\n                displayProperty: [String, '']\n            });\n\n            $scope.suggestionList = new SuggestionList($scope.source, $scope.options, $scope.events);\n            $scope.getCurrentTag = function() {\n                return $scope.$parent.$parent.newTag.text;\n            };\n\n            $scope.addTag = function(tag) {\n                $scope.$parent.$parent.tagList.items.push({ text: tag });\n                $scope.$parent.$parent.newTag.setText('');\n            };\n\n            this.registerAutocompleteMatch = function() {\n                return {\n                    getOptions: function() {\n                        return $scope.options;\n                    },\n                    getQuery: function() {\n                        return $scope.suggestionList.query;\n                    }\n                };\n            };\n        }],\n        link: function(scope, element, attrs, tagsInputCtrl) {\n            var hotkeys = [KEYS.enter, KEYS.tab, KEYS.escape, KEYS.up, KEYS.down],\n                suggestionList = scope.suggestionList,\n                tagsInput = tagsInputCtrl.registerAutocomplete(),\n                options = scope.options,\n                events = scope.events,\n                shouldLoadSuggestions;\n\n            options.tagsInput = tagsInput.getOptions();\n\n            shouldLoadSuggestions = function(value) {\n                return value && value.length >= options.minLength || !value && options.loadOnEmpty;\n            };\n\n            scope.addSuggestionByIndex = function(index) {\n                suggestionList.select(index);\n                scope.addSuggestion();\n            };\n\n            scope.addSuggestion = function() {\n                var added = false;\n\n                if (suggestionList.selected) {\n                    tagsInput.addTag(angular.copy(suggestionList.selected));\n                    suggestionList.reset();\n                    tagsInput.focusInput();\n\n                    added = true;\n                }\n                return added;\n            };\n\n            scope.track = function(item) {\n                return item[options.tagsInput.keyProperty || options.tagsInput.displayProperty];\n            };\n\n            tagsInput\n                .on('tag-added invalid-tag input-blur', function() {\n                    suggestionList.reset();\n                })\n                .on('input-change', function(value) {\n                    if (shouldLoadSuggestions(value)) {\n                        suggestionList.load(value, tagsInput.getTags());\n                    }\n                    else {\n                        suggestionList.reset();\n                    }\n                })\n                .on('input-focus', function() {\n                    var value = tagsInput.getCurrentTagText();\n                    scope.hasFocus = true;\n                    scope.shouldLoadSuggestions = shouldLoadSuggestions(value);\n                    if (options.loadOnFocus && scope.shouldLoadSuggestions) {\n                        suggestionList.load(value, tagsInput.getTags());\n                    }\n                })\n                .on('input-keydown', function(event) {\n                    var key = event.keyCode,\n                        handled = false;\n\n                    if (hotkeys.indexOf(key) === -1) {\n                        return;\n                    }\n\n                    if (suggestionList.visible) {\n\n                        if (key === KEYS.down) {\n                            suggestionList.selectNext();\n                            handled = true;\n                        }\n                        else if (key === KEYS.up) {\n                            suggestionList.selectPrior();\n                            handled = true;\n                        }\n                        else if (key === KEYS.escape) {\n                            suggestionList.reset();\n                            handled = true;\n                        }\n                        else if (key === KEYS.enter || key === KEYS.tab) {\n                            handled = scope.addSuggestion();\n                        }\n                    }\n                    else {\n                        if (key === KEYS.down && scope.options.loadOnDownArrow) {\n                            suggestionList.load(tagsInput.getCurrentTagText(), tagsInput.getTags());\n                            handled = true;\n                        }\n                    }\n\n                    if (handled) {\n                        event.preventDefault();\n                        event.stopImmediatePropagation();\n                        return false;\n                    }\n                })\n                .on('input-blur', function() {\n                    scope.hasFocus = false;\n                });\n\n            events.on('suggestion-selected', function(index) {\n                scrollToElement(element, index);\n            });\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name tiAutocompleteMatch\n * @module ngTagsInput\n *\n * @description\n * Represents an autocomplete match. Used internally by the autoComplete directive.\n */\ntagsInput.directive('tiAutocompleteMatch', [\"$sce\",\"tiUtil\", function($sce, tiUtil) {\n    return {\n        restrict: 'E',\n        require: '^autoComplete',\n        template: '<ng-include src=\"$$template\"></ng-include>',\n        scope: { data: '=' },\n        link: function(scope, element, attrs, autoCompleteCtrl) {\n            var autoComplete = autoCompleteCtrl.registerAutocompleteMatch(),\n                options = autoComplete.getOptions();\n\n            scope.$$template = options.template;\n            scope.$index = scope.$parent.$index;\n\n            scope.$highlight = function(text) {\n                if (options.highlightMatchedText) {\n                    text = tiUtil.safeHighlight(text, autoComplete.getQuery());\n                }\n                return $sce.trustAsHtml(text);\n            };\n            scope.$getDisplayText =  function() {\n                return tiUtil.safeToString(scope.data[options.displayProperty || options.tagsInput.displayProperty]);\n            };\n        }\n    };\n}]);\n\n\n/**\n * @ngdoc directive\n * @name tiTranscludeAppend\n * @module ngTagsInput\n *\n * @description\n * Re-creates the old behavior of ng-transclude. Used internally by tagsInput directive.\n */\ntagsInput.directive('tiTranscludeAppend', function() {\n    return function(scope, element, attrs, ctrl, transcludeFn) {\n        transcludeFn(function(clone) {\n            element.append(clone);\n        });\n    };\n});\n\n/**\n * @ngdoc directive\n * @name tiAutosize\n * @module ngTagsInput\n *\n * @description\n * Automatically sets the input's width so its content is always visible. Used internally by tagsInput directive.\n */\ntagsInput.directive('tiAutosize', [\"tagsInputConfig\", function(tagsInputConfig) {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attrs, ctrl) {\n            var threshold = tagsInputConfig.getTextAutosizeThreshold(),\n                span, resize;\n\n            span = angular.element('<span class=\"input\"></span>');\n            span.css('display', 'none')\n                .css('visibility', 'hidden')\n                .css('width', 'auto')\n                .css('white-space', 'pre');\n\n            element.parent().append(span);\n\n            resize = function(originalValue) {\n                var value = originalValue, width;\n\n                if (angular.isString(value) && value.length === 0) {\n                    value = attrs.placeholder;\n                }\n\n                if (value) {\n                    span.text(value);\n                    span.css('display', '');\n                    width = span.prop('offsetWidth');\n                    span.css('display', 'none');\n                }\n\n                element.css('width', width ? width + threshold + 'px' : '');\n\n                return originalValue;\n            };\n\n            ctrl.$parsers.unshift(resize);\n            ctrl.$formatters.unshift(resize);\n\n            attrs.$observe('placeholder', function(value) {\n                if (!ctrl.$modelValue) {\n                    resize(value);\n                }\n            });\n        }\n    };\n}]);\n\n/**\n * @ngdoc directive\n * @name tiBindAttrs\n * @module ngTagsInput\n *\n * @description\n * Binds attributes to expressions. Used internally by tagsInput directive.\n */\ntagsInput.directive('tiBindAttrs', function() {\n    return function(scope, element, attrs) {\n        scope.$watch(attrs.tiBindAttrs, function(value) {\n            angular.forEach(value, function(value, key) {\n                /**\n                 * blake_r - Added to work around the version of jQuery that\n                 * MAAS currently ships with. Once packaging for jQuery is\n                 * version >1.9 this can be removed.\n                 */\n                if(key === \"type\") {\n                    element[0].type = value;\n                } else {\n                    attrs.$set(key, value);\n                }\n            });\n        }, true);\n    };\n});\n\n/**\n * @ngdoc service\n * @name tagsInputConfig\n * @module ngTagsInput\n *\n * @description\n * Sets global configuration settings for both tagsInput and autoComplete directives. It's also used internally to parse and\n * initialize options from HTML attributes.\n */\ntagsInput.provider('tagsInputConfig', function() {\n    var globalDefaults = {},\n        interpolationStatus = {},\n        autosizeThreshold = 3;\n\n    /**\n     * @ngdoc method\n     * @name setDefaults\n     * @description Sets the default configuration option for a directive.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} defaults Object containing options and their values.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setDefaults = function(directive, defaults) {\n        globalDefaults[directive] = defaults;\n        return this;\n    };\n\n    /***\n     * @ngdoc method\n     * @name setActiveInterpolation\n     * @description Sets active interpolation for a set of options.\n     * @methodOf tagsInputConfig\n     *\n     * @param {string} directive Name of the directive to be configured. Must be either 'tagsInput' or 'autoComplete'.\n     * @param {object} options Object containing which options should have interpolation turned on at all times.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setActiveInterpolation = function(directive, options) {\n        interpolationStatus[directive] = options;\n        return this;\n    };\n\n    /***\n     * @ngdoc method\n     * @name setTextAutosizeThreshold\n     * @description Sets the threshold used by the tagsInput directive to re-size the inner input field element based on its contents.\n     * @methodOf tagsInputConfig\n     *\n     * @param {number} threshold Threshold value, in pixels.\n     *\n     * @returns {object} The service itself for chaining purposes.\n     */\n    this.setTextAutosizeThreshold = function(threshold) {\n        autosizeThreshold = threshold;\n        return this;\n    };\n\n    this.$get = [\"$interpolate\", function($interpolate) {\n        var converters = {};\n        converters[String] = function(value) { return value; };\n        converters[Number] = function(value) { return parseInt(value, 10); };\n        converters[Boolean] = function(value) { return value.toLowerCase() === 'true'; };\n        converters[RegExp] = function(value) { return new RegExp(value); };\n\n        return {\n            load: function(directive, scope, attrs, options) {\n                var defaultValidator = function() { return true; };\n\n                scope.options = {};\n\n                angular.forEach(options, function(value, key) {\n                    var type, localDefault, validator, converter, getDefault, updateValue;\n\n                    type = value[0];\n                    localDefault = value[1];\n                    validator = value[2] || defaultValidator;\n                    converter = converters[type];\n\n                    getDefault = function() {\n                        var globalValue = globalDefaults[directive] && globalDefaults[directive][key];\n                        return angular.isDefined(globalValue) ? globalValue : localDefault;\n                    };\n\n                    updateValue = function(value) {\n                        scope.options[key] = value && validator(value) ? converter(value) : getDefault();\n                    };\n\n                    if (interpolationStatus[directive] && interpolationStatus[directive][key]) {\n                        attrs.$observe(key, function(value) {\n                            updateValue(value);\n                            scope.events.trigger('option-change', { name: key, newValue: value });\n                        });\n                    }\n                    else {\n                        updateValue(attrs[key] && $interpolate(attrs[key])(scope.$parent));\n                    }\n                });\n            },\n            getTextAutosizeThreshold: function() {\n                return autosizeThreshold;\n            }\n        };\n    }];\n});\n\n\n/***\n * @ngdoc factory\n * @name tiUtil\n * @module ngTagsInput\n *\n * @description\n * Helper methods used internally by the directive. Should not be called directly from user code.\n */\ntagsInput.factory('tiUtil', [\"$timeout\", function($timeout) {\n    var self = {};\n\n    self.debounce = function(fn, delay) {\n        var timeoutId;\n        return function() {\n            var args = arguments;\n            $timeout.cancel(timeoutId);\n            timeoutId = $timeout(function() { fn.apply(null, args); }, delay);\n        };\n    };\n\n    self.makeObjectArray = function(array, key) {\n        array = array || [];\n        if (array.length > 0 && !angular.isObject(array[0])) {\n            array.forEach(function(item, index) {\n                array[index] = {};\n                array[index][key] = item;\n            });\n        }\n        return array;\n    };\n\n    self.findInObjectArray = function(array, obj, key, comparer) {\n        var item = null;\n        comparer = comparer || self.defaultComparer;\n\n        array.some(function(element) {\n            if (comparer(element[key], obj[key])) {\n                item = element;\n                return true;\n            }\n        });\n\n        return item;\n    };\n\n    self.defaultComparer = function(a, b) {\n        // I'm aware of the internationalization issues regarding toLowerCase()\n        // but I couldn't come up with a better solution right now\n        return self.safeToString(a).toLowerCase() === self.safeToString(b).toLowerCase();\n    };\n\n    self.safeHighlight = function(str, value) {\n        if (!value) {\n            return str;\n        }\n\n        function escapeRegexChars(str) {\n            return str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n        }\n\n        str = self.encodeHTML(str);\n        value = self.encodeHTML(value);\n\n        var expression = new RegExp('&[^;]+;|' + escapeRegexChars(value), 'gi');\n        return str.replace(expression, function(match) {\n            return match.toLowerCase() === value.toLowerCase() ? '<em>' + match + '</em>' : match;\n        });\n    };\n\n    self.safeToString = function(value) {\n        return angular.isUndefined(value) || value == null ? '' : value.toString().trim();\n    };\n\n    self.encodeHTML = function(value) {\n        return self.safeToString(value)\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n    };\n\n    self.handleUndefinedResult = function(fn, valueIfUndefined) {\n        return function() {\n            var result = fn.apply(null, arguments);\n            return angular.isUndefined(result) ? valueIfUndefined : result;\n        };\n    };\n\n    self.replaceSpacesWithDashes = function(str) {\n        return self.safeToString(str).replace(/\\s/g, '-');\n    };\n\n    self.simplePubSub = function() {\n        var events = {};\n        return {\n            on: function(names, handler) {\n                names.split(' ').forEach(function(name) {\n                    if (!events[name]) {\n                        events[name] = [];\n                    }\n                    events[name].push(handler);\n                });\n                return this;\n            },\n            trigger: function(name, args) {\n                var handlers = events[name] || [];\n                handlers.every(function(handler) {\n                    return self.handleUndefinedResult(handler, true)(args);\n                });\n                return this;\n            }\n        };\n    };\n\n    return self;\n}]);\n\n/* HTML templates */\ntagsInput.run([\"$templateCache\", function($templateCache) {\n    $templateCache.put('ngTagsInput/tags-input.html',\n    '<div class=\"host\" tabindex=\"-1\" data-ng-click=\"eventHandlers.host.click()\" ti-transclude-append=\"\">' +\n    '<div class=\"tags\" data-ng-class=\"{focused: hasFocus}\">' +\n    '<ul class=\"tag-list\">' +\n    '<li class=\"tag-item\" data-ng-repeat=\"tag in tagList.items track by track(tag)\" data-ng-class=\"{ selected: tag == tagList.selected }\">' +\n    '<ti-tag-item data=\"tag\"></ti-tag-item>' +\n    '</li>' +\n    '</ul>' +\n    '<input class=\"input u-no-margin--top u-no-margin--bottom\" autocomplete=\"off\" data-ng-model=\"newTag.text\" data-ng-change=\"eventHandlers.input.change(newTag.text)\" data-ng-keydown=\"eventHandlers.input.keydown($event)\" data-ng-focus=\"eventHandlers.input.focus($event)\" data-ng-blur=\"eventHandlers.input.blur($event)\" data-ng-paste=\"eventHandlers.input.paste($event)\" data-ng-trim=\"false\" data-ng-class=\"{\\'invalid-tag\\': newTag.invalid}\" data-ng-disabled=\"disabled\" ti-bind-attrs=\"{type: options.type, placeholder: options.placeholder, tabindex: options.tabindex, spellcheck: options.spellcheck}\" ti-autosize=\"\">' +\n    '</div>' +\n    '</div>'\n  );\n\n  $templateCache.put('ngTagsInput/tag-item.html',\n    '<span ng-bind=\"$getDisplayText()\"></span> ' +\n    '<a class=\"p-icon--close\" data-ng-click=\"$removeTag()\" data-ng-bind=\"$$removeTagSymbol\">' +\n    'Remove tag' +\n    '</a>'\n  );\n\n  $templateCache.put('ngTagsInput/auto-complete.html',\n    '<div class=\"autocomplete\" data-ng-if=\"suggestionList.visible\">' +\n    '<ul class=\"p-list suggestion-list\">' +\n    '<li class=\"suggestion-item create-tag-label\" data-ng-if=\"getCurrentTag().length\">' +\n    '<span data-ng-click=\"addTag(getCurrentTag())\">Create new tag</span> <span class=\"tag-item\">{$ getCurrentTag() $}</span>' +\n    '</li>' +\n    '<li class=\"suggestion-item\" data-ng-repeat=\"item in suggestionList.items track by track(item)\" data-ng-class=\"{selected: item == suggestionList.selected}\" data-ng-click=\"addSuggestionByIndex($index)\" data-ng-mouseenter=\"suggestionList.select($index)\">' +\n    '<ti-autocomplete-match data=\"item\"></ti-autocomplete-match>' +\n    '</li>' +\n    '</ul>' +\n    '</div>' +\n    '<div class=\"autocomplete no-suggestion\" data-ng-if=\"!suggestionList.visible && hasFocus && shouldLoadSuggestions && getCurrentTag().length\">' +\n    '<ul class=\"p-list suggestion-list\">' +\n    '<li class=\"suggestion-item create-tag-label\" data-ng-if=\"getCurrentTag().length\">' +\n    '<span data-ng-click=\"addTag(getCurrentTag())\">Create new tag</span> <span class=\"tag-item\">{$ getCurrentTag() $}</span>' +\n    '</li>' +\n    '</ul>' +\n    '</div>'\n  );\n\n  $templateCache.put('ngTagsInput/auto-complete-match.html',\n    '<span data-ng-bind-html=\"$highlight($getDisplayText())\"></span>'\n  );\n}]);\n\n}());\n"],"sourceRoot":""}