# Copyright 2014 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

"""Tests for networking preseed code."""

from __future__ import (
    absolute_import,
    print_function,
    unicode_literals,
    )

str = None

__metaclass__ = type
__all__ = [
    ]

from random import randint

from maasserver import networking_preseed
from maasserver.dns import zonegenerator
from maasserver.enum import NODEGROUPINTERFACE_MANAGEMENT
from maasserver.exceptions import UnresolvableHost
from maasserver.networking_preseed import (
    extract_network_interfaces,
    generate_dns_server_entry,
    generate_ethernet_link_entry,
    generate_network_entry,
    generate_networking_config,
    generate_route_entries,
    list_dns_servers,
    normalise_mac,
    )
from maasserver.testing.factory import factory
from maasserver.testing.testcase import MAASServerTestCase
from maastesting.matchers import MockCalledOnceWith
from testtools.matchers import HasLength


def make_denormalised_mac():
    return ' %s ' % factory.make_mac_address().upper()


class TestExtractNetworkInterfaces(MAASServerTestCase):

    def test__returns_nothing_if_no_lshw_output_found(self):
        node = factory.make_Node()
        self.assertEqual([], extract_network_interfaces(node))

    def test__returns_nothing_if_no_network_description_found_in_lshw(self):
        node = factory.make_Node()
        lshw_output = """
            <list xmlns:lldp="lldp" xmlns:lshw="lshw">
              <lshw:list>
              </lshw:list>
            </list>
            """
        factory.make_NodeResult_for_commissioning(
            node=node, name='00-maas-01-lshw.out', script_result=0,
            data=lshw_output.encode('ascii'))
        self.assertEqual([], extract_network_interfaces(node))

    def test__extracts_interface_data(self):
        node = factory.make_Node()
        interface = factory.make_name('eth')
        mac = factory.make_mac_address()
        lshw_output = """
            <node id="network" claimed="true" class="network">
             <logicalname>%(interface)s</logicalname>
             <serial>%(mac)s</serial>
            </node>
            """ % {'interface': interface, 'mac': mac}
        factory.make_NodeResult_for_commissioning(
            node=node, name='00-maas-01-lshw.out', script_result=0,
            data=lshw_output.encode('ascii'))
        self.assertEqual([(interface, mac)], extract_network_interfaces(node))

    def test__finds_network_interface_on_motherboard(self):
        node = factory.make_Node()
        interface = factory.make_name('eth')
        mac = factory.make_mac_address()
        # Stripped-down version of real lshw output:
        lshw_output = """
            <!-- generated by lshw-B.02.16 -->
            <list>
            <node id="mynode" claimed="true" class="system" handle="DMI:0002">
              <node id="core" claimed="true" class="bus" handle="DMI:0003">
               <description>Motherboard</description>
                <node id="pci" claimed="true" class="bridge" \
                      handle="PCIBUS:0000:00">
                 <description>Host bridge</description>
                  <node id="network" claimed="true" class="network" \
                      handle="PCI:0000:00:19.0">
                   <description>Ethernet interface</description>
                   <product>82566DM-2 Gigabit Network Connection</product>
                   <vendor>Intel Corporation</vendor>
                   <logicalname>%(interface)s</logicalname>
                   <serial>%(mac)s</serial>
                   <configuration>
                    <setting id="ip" value="10.99.99.1" />
                   </configuration>
                  </node>
                </node>
              </node>
            </node>
            </list>
            """ % {'interface': interface, 'mac': mac}
        factory.make_NodeResult_for_commissioning(
            node=node, name='00-maas-01-lshw.out', script_result=0,
            data=lshw_output.encode('ascii'))
        self.assertEqual([(interface, mac)], extract_network_interfaces(node))

    def test__finds_network_interface_on_pci_bus(self):
        node = factory.make_Node()
        interface = factory.make_name('eth')
        mac = factory.make_mac_address()
        # Stripped-down version of real lshw output:
        lshw_output = """
            <!-- generated by lshw-B.02.16 -->
            <list>
            <node id="mynode" claimed="true" class="system" handle="DMI:0002">
              <node id="core" claimed="true" class="bus" handle="DMI:0003">
               <description>Motherboard</description>
                <node id="pci" claimed="true" class="bridge" \
                    handle="PCIBUS:0000:00">
                 <description>Host bridge</description>
                  <node id="pci:2" claimed="true" class="bridge" \
                      handle="PCIBUS:0000:07">
                   <description>PCI bridge</description>
                    <node id="network" claimed="true" class="network" \
                        handle="PCI:0000:07:04.0">
                     <description>Ethernet interface</description>
                     <logicalname>%(interface)s</logicalname>
                     <serial>%(mac)s</serial>
                     <configuration>
                      <setting id="ip" value="192.168.1.114" />
                     </configuration>
                    </node>
                  </node>
                </node>
              </node>
            </node>
            </list>
            """ % {'interface': interface, 'mac': mac}
        factory.make_NodeResult_for_commissioning(
            node=node, name='00-maas-01-lshw.out', script_result=0,
            data=lshw_output.encode('ascii'))
        self.assertEqual([(interface, mac)], extract_network_interfaces(node))

    def test__ignores_nodes_without_interface_name(self):
        node = factory.make_Node()
        mac = factory.make_mac_address()
        lshw_output = """
            <node id="network" claimed="true" class="network">
             <serial>%s</serial>
            </node>
            """ % mac
        factory.make_NodeResult_for_commissioning(
            node=node, name='00-maas-01-lshw.out', script_result=0,
            data=lshw_output.encode('ascii'))
        self.assertEqual([], extract_network_interfaces(node))

    def test__ignores_nodes_without_mac(self):
        node = factory.make_Node()
        interface = factory.make_name('eth')
        lshw_output = """
            <node id="network" claimed="true" class="network">
             <logicalname>%s</logicalname>
            </node>
            """ % interface
        factory.make_NodeResult_for_commissioning(
            node=node, name='00-maas-01-lshw.out', script_result=0,
            data=lshw_output.encode('ascii'))
        self.assertEqual([], extract_network_interfaces(node))

    def test__normalises_mac(self):
        node = factory.make_Node()
        interface = factory.make_name('eth')
        mac = make_denormalised_mac()
        self.assertNotEqual(normalise_mac(mac), mac)
        lshw_output = """
            <node id="network" claimed="true" class="network">
             <logicalname>%(interface)s</logicalname>
             <serial>%(mac)s</serial>
            </node>
            """ % {'interface': interface, 'mac': mac}
        factory.make_NodeResult_for_commissioning(
            node=node, name='00-maas-01-lshw.out', script_result=0,
            data=lshw_output.encode('ascii'))
        [entry] = extract_network_interfaces(node)
        _, extracted_mac = entry
        self.assertEqual(normalise_mac(mac), extracted_mac)


class TestNormaliseMAC(MAASServerTestCase):

    def test__normalises_case(self):
        mac = factory.make_mac_address()
        self.assertEqual(
            normalise_mac(mac.lower()),
            normalise_mac(mac.upper()))

    def test__strips_whitespace(self):
        mac = factory.make_mac_address()
        self.assertEqual(
            normalise_mac(mac),
            normalise_mac(' %s ' % mac))

    def test__is_idempotent(self):
        mac = factory.make_mac_address()
        self.assertEqual(
            normalise_mac(mac),
            normalise_mac(normalise_mac(mac)))


class TestGenerateEthernetLinkEntry(MAASServerTestCase):

    def test__generates_dict(self):
        interface = factory.make_name('eth')
        mac = factory.make_mac_address()
        self.assertEqual(
            {
                'id': interface,
                'type': 'phy',
                'ethernet_mac_address': mac,
            },
            generate_ethernet_link_entry(interface, mac))


class TestGenerateDNServerEntry(MAASServerTestCase):

    def test__returns_dict(self):
        address = factory.make_ipv4_address()
        self.assertEqual(
            {
                'type': 'dns',
                'address': address,
            },
            generate_dns_server_entry(address))


def patch_dns_servers(testcase, ipv4_dns=None, ipv6_dns=None):
    """Patch `get_dns_server_address` to return the given addresses.

    The fake will return `ipv4_dns` or `ipv6_dns` as appropriate to the
    arguments.  For that reason, this patch does not use a `Mock`.
    """

    def fake_get_maas_facing_server_address(cluster, ipv4=True, ipv6=True):
        result = None
        if ipv4:
            result = ipv4_dns
        if result is None and ipv6:
            result = ipv6_dns
        if result is None:
            raise UnresolvableHost()
        return result

    testcase.patch(
        zonegenerator, 'get_maas_facing_server_address',
        fake_get_maas_facing_server_address)
    testcase.patch(zonegenerator, 'warn_loopback')


class ListDNSServers(MAASServerTestCase):

    def test__includes_ipv4_and_ipv6_by_default(self):
        ipv4_dns = factory.make_ipv4_address()
        ipv6_dns = factory.make_ipv6_address()
        patch_dns_servers(self, ipv4_dns=ipv4_dns, ipv6_dns=ipv6_dns)
        node = factory.make_Node(disable_ipv4=False)
        self.assertItemsEqual([ipv4_dns, ipv6_dns], list_dns_servers(node))

    def test__omits_ipv4_if_disabled_for_node(self):
        ipv4_dns = factory.make_ipv4_address()
        ipv6_dns = factory.make_ipv6_address()
        patch_dns_servers(self, ipv4_dns=ipv4_dns, ipv6_dns=ipv6_dns)
        node = factory.make_Node(disable_ipv4=True)
        self.assertItemsEqual([ipv6_dns], list_dns_servers(node))

    def test__omits_ipv4_if_unvailable(self):
        ipv6_dns = factory.make_ipv6_address()
        patch_dns_servers(self, ipv6_dns=ipv6_dns)
        node = factory.make_Node(disable_ipv4=False)
        self.assertItemsEqual([ipv6_dns], list_dns_servers(node))

    def test__omits_ipv6_if_unavailable(self):
        ipv4_dns = factory.make_ipv4_address()
        patch_dns_servers(self, ipv4_dns=ipv4_dns)
        node = factory.make_Node(disable_ipv4=False)
        self.assertItemsEqual([ipv4_dns], list_dns_servers(node))


def make_cluster_interface(network=None, **kwargs):
    return factory.make_NodeGroupInterface(
        factory.make_NodeGroup(), network=network, **kwargs)


class TestGenerateRouteEntries(MAASServerTestCase):

    def test__generates_IPv4_default_route_if_available(self):
        network = factory.make_ipv4_network()
        router = factory.pick_ip_in_network(network)
        cluster_interface = make_cluster_interface(network, router_ip=router)
        self.assertEqual(
            [
                {
                    'network': '0.0.0.0',
                    'netmask': '0.0.0.0',
                    'gateway': unicode(router),
                },
            ],
            generate_route_entries(cluster_interface))

    def test__generates_IPv6_default_route_if_available(self):
        network = factory.make_ipv6_network()
        router = factory.pick_ip_in_network(network)
        cluster_interface = make_cluster_interface(network, router_ip=router)
        self.assertEqual(
            [
                {
                    'network': '::',
                    'netmask': '::',
                    'gateway': unicode(router),
                },
            ],
            generate_route_entries(cluster_interface))

    def test__generates_empty_list_if_no_route_available(self):
        network = factory.make_ipv4_network()
        cluster_interface = make_cluster_interface(
            network, management=NODEGROUPINTERFACE_MANAGEMENT.UNMANAGED,
            router_ip='')
        self.assertEqual([], generate_route_entries(cluster_interface))


class TestGenerateNetworkEntry(MAASServerTestCase):

    def test__generates_IPv4_dict(self):
        network = factory.make_ipv4_network()
        network_interface = factory.make_name('eth')
        cluster_interface = make_cluster_interface(network)
        ip = factory.pick_ip_in_network(network)

        entry = generate_network_entry(
            network_interface, cluster_interface, ip=ip)

        del entry['routes']
        self.assertEqual(
            {
                'type': 'ipv4',
                'link': network_interface,
                'ip_address': unicode(ip),
                'netmask': unicode(network.netmask),
            },
            entry)

    def test__generates_IPv6_dict(self):
        slash = randint(48, 64)
        network = factory.make_ipv6_network(slash=slash)
        network_interface = factory.make_name('eth')
        cluster_interface = make_cluster_interface(network)
        ip = factory.pick_ip_in_network(network)

        entry = generate_network_entry(
            network_interface, cluster_interface, ip=ip)

        del entry['routes']
        self.assertEqual(
            {
                'type': 'ipv6',
                'link': network_interface,
                'ip_address': '%s/%d' % (ip, slash),
            },
            entry)

    def test__omits_IP_if_not_given(self):
        network = factory.make_ipv4_network()
        network_interface = factory.make_name('eth')
        cluster_interface = make_cluster_interface(network)

        entry = generate_network_entry(network_interface, cluster_interface)

        del entry['routes']
        self.assertEqual(
            {
                'type': 'ipv4',
                'link': network_interface,
                'netmask': unicode(network.netmask),
            },
            entry)

    def test__tells_IPv4_from_IPv6_even_without_IP(self):
        cluster_interface = make_cluster_interface(factory.make_ipv6_network())
        entry = generate_network_entry(
            factory.make_name('eth'), cluster_interface)
        self.assertEqual('ipv6', entry['type'])

    def test__includes_IPv4_routes_on_IPv4_network(self):
        network = factory.make_ipv4_network()
        router = factory.pick_ip_in_network(network)
        cluster_interface = make_cluster_interface(
            network, management=NODEGROUPINTERFACE_MANAGEMENT.DHCP,
            router_ip=router)

        entry = generate_network_entry(
            factory.make_name('eth'), cluster_interface)

        self.assertThat(entry['routes'], HasLength(1))
        [route] = entry['routes']
        self.assertEqual(unicode(router), route['gateway'])

    def test__includes_IPv6_routes_on_IPv6_network(self):
        network = factory.make_ipv6_network()
        router = factory.pick_ip_in_network(network)
        cluster_interface = make_cluster_interface(
            network, management=NODEGROUPINTERFACE_MANAGEMENT.DHCP,
            router_ip=router)

        entry = generate_network_entry(
            factory.make_name('eth'), cluster_interface)

        self.assertThat(entry['routes'], HasLength(1))
        [route] = entry['routes']
        self.assertEqual(unicode(router), route['gateway'])


class TestGenerateNetworkingConfig(MAASServerTestCase):

    def patch_interfaces(self, interface_mac_pairs):
        patch = self.patch_autospec(
            networking_preseed, 'extract_network_interfaces')
        patch.return_value = interface_mac_pairs
        return patch

    def test__returns_config_dict(self):
        self.patch_interfaces([])
        patch_dns_servers(self)
        config = generate_networking_config(factory.make_Node())
        self.assertIsInstance(config, dict)
        self.assertEqual("MAAS", config['provider'])

    def test__includes_links(self):
        patch_dns_servers(self)
        node = factory.make_Node()
        interface = factory.make_name('eth')
        mac = factory.make_mac_address()
        patch = self.patch_interfaces([(interface, mac)])

        config = generate_networking_config(node)

        self.assertThat(patch, MockCalledOnceWith(node))
        self.assertEqual(
            [
                {
                    'id': interface,
                    'type': 'phy',
                    'ethernet_mac_address': mac,
                },
            ],
            config['network_info']['links'])

    def test__includes_networks(self):
        # This section is not yet implemented, so expect an empty list.
        patch_dns_servers(self)
        self.patch_interfaces([])
        config = generate_networking_config(factory.make_Node())
        self.assertEqual([], config['network_info']['networks'])

    def test__includes_dns_servers(self):
        dns_address = factory.make_ipv4_address()
        patch_dns_servers(self, dns_address)
        self.patch_interfaces([])
        config = generate_networking_config(
            factory.make_Node(disable_ipv4=False))
        self.assertEqual(
            [
                {
                    'type': 'dns',
                    'address': dns_address,
                },
            ],
            config['network_info']['services'])
