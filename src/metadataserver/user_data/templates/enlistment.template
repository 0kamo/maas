{{base_user_data_sh}}

# This script is passed to cloud-init from MAAS during enlistment. This
# script contains multiple files inside it. When executed these files are
# extracted and run. This script detects power settings, runs enlistment, then
# commissioning scripts to gather data about the system.

main() {
    prep_maas_api_helper
    load_ipmi_modules

    # Bring up all interfaces.
    ip -o link | cut -d: -f2 | xargs -I{} ip link set dev {} up

    # Early check to see if this machine already exists in MAAS. Already
    # existing machines just stop running and power off. We do not want to
    # update the power parameters of an existing machine.
    maas-enlist --serverurl "{{server_url}}" --exists
    if [ $? -eq 1 ]; then
	echo "Machine already registered on {{server_url}}; skipping enlistment"
	maas-enlist --serverurl "{{server_url}}" --in-action
	if [ $? -eq 1 ]; then
	    echo "Rebooting machine to resume action"
	    reboot
	fi
	sleep 10
	exit 0
    fi

    # Create MAAS IPMI user
    power_type=$(get_power_type)
    case "$power_type" in
        ipmi)
            power_params=$(maas-ipmi-autodetect \
                ${IPMI_AUTODETECT_ARGS} --maas-ipmi-user "{{maas_ipmi_user}}" \
                    --commission-creds) &&
                [ -n "${power_params}" ] && power_params=${power_params%.}
            ;;
        moonshot)
            power_params=$(maas-moonshot-autodetect --commission-creds) &&
                [ -n "${power_params}" ] && power_params=${power_params%.}
            ;;
        wedge)
            power_params=$(maas-wedge-autodetect --get-enlist-creds) || power_params=""
            ;;
    esac

    # Capture the output so we can discover the system_id. If the machine
    # already exists and is not in a NEW state this will fail.
    output=$(maas-enlist --quite --serverurl "{{server_url}}" \
        ${power_params:+--power-params "${power_params}" \
        --power-type "${power_type}"}{{if enlist_commissioning}} --commission{{endif}})
    ret=$?
    echo $output | jq .
    if [ $ret -ne 0 ]; then
	echo "Enlistment on {{server_url}} failed!"
	sleep 10
	exit 1
    fi

    {{if enlist_commissioning}}
    # Reload cloud-init preseed using the system_id to get OAUTH credentials.
    system_id=$(echo $output | jq -r .system_id)
    mv ${CRED_CFG} ${CRED_CFG}.orig
    wget -q {{server_url.replace('api/2.0/machines/', 'metadata/latest/by-id/${system_id}/?op=get_preseed')}} -O ${CRED_CFG}

    signal COMMISSIONING "Enlistment complete, starting commissioning"

    maas-run-remote-scripts "--config=${CRED_CFG}" "${TEMP_D}"
    {{endif}}
}

### begin writing files ###

add_bin "maas-ipmi-autodetect-tool" <<"END_MAAS_IPMI_AUTODETECT_TOOL"
{{maas_ipmi_autodetect_tool_py}}
END_MAAS_IPMI_AUTODETECT_TOOL

add_bin "maas-ipmi-autodetect" <<"END_MAAS_IPMI_AUTODETECT"
{{maas_ipmi_autodetect_py}}
END_MAAS_IPMI_AUTODETECT

add_bin "maas-moonshot-autodetect" <<"END_MAAS_MOONSHOT_AUTODETECT"
{{maas_moonshot_autodetect_py}}
END_MAAS_MOONSHOT_AUTODETECT

add_bin "maas-wedge-autodetect" <<"END_MAAS_WEDGE_AUTODETECT"
{{maas_wedge_autodetect_sh}}
END_MAAS_WEDGE_AUTODETECT

{{if enlist_commissioning}}
add_bin "maas_api_helper.py" <<"END_MAAS_API_HELPER"
{{maas_api_helper_py}}
END_MAAS_API_HELPER

add_bin "maas-signal" <<"END_MAAS_SIGNAL"
{{maas_signal_py}}
END_MAAS_SIGNAL

add_bin "maas-run-remote-scripts" <<"END_MAAS_RUN_REMOTE_SCRIPTS"
{{maas_run_remote_scripts_py}}
END_MAAS_RUN_REMOTE_SCRIPTS
{{endif}}

add_bin "maas-enlist" <<"END_MAAS_ENLIST"
{{maas_enlist_sh}}
END_MAAS_ENLIST

main
exit
