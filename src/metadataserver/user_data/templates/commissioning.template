{{base_user_data_sh}}

# This script is passed to cloud-init from MAAS during commissioning. This
# script contains multiple files inside it. When executed these files are
# extracted and run. This script detects power settings, runs commissioning
# scripts to gather data about the system, and runs testing scripts to validate
# the hardware is in a functioning state.

####  IPMI setup  ######
IPMI_CONFIG_D="${TEMP_D}/ipmi.d"
mkdir -p "$IPMI_CONFIG_D"
# If IPMI network settings have been configured statically, you can
# make them DHCP. If 'true', the IPMI network source will be changed
# to DHCP.
IPMI_CHANGE_STATIC_TO_DHCP="false"

# In certain hardware, the parameters for the ipmi_si kernel module
# might need to be specified. If you wish to send parameters, uncomment
# the following line.
#IPMI_SI_PARAMS="type=kcs ports=0xca2"

add_ipmi_config() {
   cat > "${IPMI_CONFIG_D}/$1"
   chmod "${2:-644}" "${IPMI_CONFIG_D}/$1"
}

main() {
    prep_maas_api_helper

    # LP:1730524 - Make sure we can signal the metadata service before updating
    # the BMC username and password.
    signal WORKING "Starting [maas-bmc-autodetect]" || exit 1

    # Install IPMI deps
    aptget install freeipmi-tools openipmi ipmitool sshpass

    # Load IPMI kernel modules
    modprobe ipmi_msghandler
    modprobe ipmi_devintf
    modprobe ipmi_si ${IPMI_SI_PARAMS}
    modprobe ipmi_ssif
    udevadm settle

    # Power settings.
    local pargs=""
    if $IPMI_CHANGE_STATIC_TO_DHCP; then
        pargs="--dhcp-if-static"
    fi
    power_type=$(maas-ipmi-autodetect-tool)
    if [ -z $power_type ]; then
        power_type=$(maas-wedge-autodetect --check) || power_type=""
    fi
    case "$power_type" in
        ipmi)
            power_settings=$(maas-ipmi-autodetect \
              --configdir "$IPMI_CONFIG_D" ${pargs})
            ;;
        moonshot)
            power_settings=$(maas-moonshot-autodetect)
            ;;
        wedge)
            power_settings=$(maas-wedge-autodetect --get-credentials) || power_settings=""
            ;;
    esac
    if [ ! -z "$power_settings" ]; then
        signal \
          "--power-type=${power_type}" "--power-parameters=${power_settings}" \
          WORKING "Finished [maas-bmc-autodetect]"
    fi

    maas-run-remote-scripts "--config=${CRED_CFG}" "${TEMP_D}"
}

### begin writing files ###

add_bin "maas-ipmi-autodetect-tool" <<"END_MAAS_IPMI_AUTODETECT_TOOL"
{{maas_ipmi_autodetect_tool_py}}
END_MAAS_IPMI_AUTODETECT_TOOL

add_bin "maas-ipmi-autodetect" <<"END_MAAS_IPMI_AUTODETECT"
{{maas_ipmi_autodetect_py}}
END_MAAS_IPMI_AUTODETECT

add_bin "maas-moonshot-autodetect" <<"END_MAAS_MOONSHOT_AUTODETECT"
{{maas_moonshot_autodetect_py}}
END_MAAS_MOONSHOT_AUTODETECT

add_bin "maas-wedge-autodetect" <<"END_MAAS_WEDGE_AUTODETECT"
{{maas_wedge_autodetect_sh}}
END_MAAS_WEDGE_AUTODETECT

add_bin "maas_api_helper.py" <<"END_MAAS_API_HELPER"
{{maas_api_helper_py}}
END_MAAS_API_HELPER

add_bin "maas-signal" <<"END_MAAS_SIGNAL"
{{maas_signal_py}}
END_MAAS_SIGNAL

add_bin "maas-run-remote-scripts" <<"END_MAAS_RUN_REMOTE_SCRIPTS"
{{maas_run_remote_scripts_py}}
END_MAAS_RUN_REMOTE_SCRIPTS


main
exit
