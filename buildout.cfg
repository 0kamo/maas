[buildout]
parts =
  cli
  cli-test
  config-test
  coverage
  flake8
  rack
  rack-test
  region
  region-test
  repl
  sphinx
  testing-test
versions = versions
extends = versions.cfg
offline = false
newest = false

# Uncomment the following two lines and set allow-picked-versions=true
# to automatically update versions.cfg when building recipes.
# extensions = buildout-versions
# buildout_versions_file = versions.cfg

prefer-final = true
allow-picked-versions = false

[common]
extra-paths =
  ${buildout:directory}/etc
  ${buildout:directory}/src
  ${buildout:directory}
test-eggs =
  blessings
  coverage
  fixtures
  hypothesis
  ipdb
  nose
  nose-progressive
  nose-timer
  postgresfixture
  python-subunit
  testresources
  testscenarios
  testtools
initialization =
  ${common:path-sort}
  ${common:warnings}
  ${common:environment}
path-sort =
  from pathlib import Path
  from sys import path, prefix
  prefix = Path(prefix)
  sortkey = lambda path: prefix in Path(path).parents
  path.sort(key=sortkey)
environment =
  from os import environ
  environ.setdefault("MAAS_ROOT", "${buildout:directory}/run")
warnings =
  from warnings import filterwarnings
  filterwarnings("ignore", category=RuntimeWarning, module="pkg_resources")
inject-test-options =
  # When running tests from a console use the progressive output plugin.
  # When running headless increase the verbosity so we can see the test
  # being run from a log file. An `options` list must be defined ahead
  # of the use of this snippet.
  # *** NOSE PROGRESSIVE IS BROKEN IN PYTHON 3.5 ***
  # ["--verbosity=0", "--with-progressive"]
  options += (
    ["--verbosity=1"]
    if sys.stdout.isatty() else
    ["--verbosity=2"]
  )
  sys.argv[1:1] = options

[database]
recipe = zc.recipe.egg
eggs = postgresfixture
extra-paths =
  ${common:extra-paths}
initialization =
  ${common:path-sort}
interpreter =
entry-points = database=postgresfixture.main:main
scripts = database

[region]
recipe = zc.recipe.egg
test-eggs =
  ${common:test-eggs}
  selenium
eggs =
  ${region:test-eggs}
entry-points =
  maas-region=maasserver:execute_from_command_line
  twistd.region=twisted.scripts.twistd:run
initialization =
  ${common:initialization}
  environ.setdefault("DJANGO_SETTINGS_MODULE", "maas.development")
scripts =
  maas-region
  twistd.region
extra-paths =
  ${common:extra-paths}

[region-test]
recipe = zc.recipe.egg
eggs =
  ${region:eggs}
entry-points =
  test.region=maasserver:execute_from_command_line
initialization =
  ${region:initialization}
  environ.setdefault("MAAS_PREVENT_MIGRATIONS", "1")
  options = [
    "test",
    "--noinput",
    "--with-crochet",
    "--with-scenarios",
    "--with-select",
    "--select-dir=src/maas",
    "--select-dir=src/maasserver",
    "--select-dir=src/metadataserver",
    "--cover-package=maas,maasserver,metadataserver",
    "--cover-branches",
    # Reduce the logging level to INFO here as
    # DebuggingLoggerMiddleware logs the content of all the
    # requests at DEBUG level: we don't want this in the
    # tests as it's too verbose.
    "--logging-level=INFO",
    "--logging-clear-handlers",
  ]
  ${common:inject-test-options}
scripts = test.region
extra-paths =
  ${region:extra-paths}

[cli]
recipe = zc.recipe.egg
eggs =
  ${region:eggs}
initialization =
  ${common:path-sort}
entry-points =
  maas=maascli:main
extra-paths =
  ${common:extra-paths}
scripts =
  maas

[cli-test]
recipe = zc.recipe.egg
eggs =
  ${cli:eggs}
  ${common:test-eggs}
entry-points =
  test.cli=maastesting.noseplug:main
initialization =
  ${common:path-sort}
  ${common:warnings}
  options = [
    "--with-scenarios",
    "--with-select",
    "--select-dir=src/apiclient",
    "--select-dir=src/maascli",
    "--cover-package=apiclient,maascli",
    "--cover-branches",
  ]
  ${common:inject-test-options}
extra-paths = ${cli:extra-paths}
scripts =
  test.cli

[js-test]
recipe = zc.recipe.egg
eggs =
  ${common:test-eggs}
entry-points =
  test.js=maastesting.karma:run_karma
extra-paths =
  ${common:extra-paths}
scripts =
  test.js
initialization =
  ${common:initialization}

[testing-test]
recipe = zc.recipe.egg
eggs =
  ${common:test-eggs}
entry-points =
  test.testing=maastesting.noseplug:main
initialization =
  ${common:path-sort}
  ${common:warnings}
  options = [
    "--with-scenarios",
    "--with-select",
    "--select-dir=src/maastesting",
    "--cover-package=maastesting",
    "--cover-branches",
  ]
  ${common:inject-test-options}
extra-paths =
  ${common:extra-paths}
scripts =
  test.testing

[rack]
recipe = zc.recipe.egg
eggs =
entry-points =
  maas-rack=provisioningserver.__main__:main
  twistd.rack=twisted.scripts.twistd:run
extra-paths =
  ${common:extra-paths}
scripts =
  maas-rack
  twistd.rack
initialization =
  ${common:initialization}
  environ.setdefault("MAAS_RACK_DEVELOP", "TRUE")

[rack-test]
recipe = zc.recipe.egg
eggs =
  ${rack:eggs}
  ${common:test-eggs}
entry-points =
  test.rack=maastesting.noseplug:main
initialization =
  ${common:initialization}
  options = [
    "--with-crochet",
    "--crochet-no-setup",
    "--with-scenarios",
    "--with-select",
    "--select-dir=src/provisioningserver",
    "--cover-package=provisioningserver",
    "--cover-branches",
  ]
  ${common:inject-test-options}
extra-paths = ${rack:extra-paths}
scripts =
  test.rack

[config-test]
recipe = zc.recipe.egg
eggs =
  ${common:test-eggs}
entry-points =
  test.config=maastesting.noseplug:main
initialization =
  ${common:initialization}
  options = [
    "--with-scenarios",
    "--with-select",
    "--select-dir=etc/maas/templates/commissioning-user-data",
    "--cover-package=snippets",
    "--cover-branches",
  ]
  ${common:inject-test-options}
extra-paths = ${common:extra-paths}
scripts =
  test.config

[e2e-test]
recipe = zc.recipe.egg
eggs =
  ${region:test-eggs}
entry-points =
  test.e2e=maastesting.protractor.runner:run_protractor
extra-paths =
  ${common:extra-paths}
scripts =
  test.e2e
initialization =
  ${common:path-sort}
  from os import environ
  environ.setdefault("MAAS_RACK_DEVELOP", "TRUE")
  environ.setdefault("MAAS_ROOT", "${buildout:directory}/run-e2e")
  environ.setdefault("DJANGO_SETTINGS_MODULE", "maas.development")
  environ.setdefault("DEV_DB_NAME", "test_maas_e2e")
  environ.setdefault("MAAS_PREVENT_MIGRATIONS", "1")

[flake8]
recipe = zc.recipe.egg
eggs =
  flake8
entry-points =
  flake8=flake8.run:main
initialization =
  ${common:path-sort}
  ${common:warnings}

[coverage]
recipe = zc.recipe.egg
eggs =
  coverage
entry-points =
  coverage=coverage.cmdline:main
initialization =
  ${common:path-sort}
  ${common:warnings}
scripts =
  coverage

[sphinx]
recipe = collective.recipe.sphinxbuilder
source = ${buildout:directory}/docs
build = ${buildout:directory}/docs/_build
extra-paths = ${common:extra-paths}
eggs =
  ${region:eggs}
  ${rack:eggs}

# Convenient REPLs with all eggs available.
[repl]
recipe = zc.recipe.egg
eggs =
  ${region:eggs}
  ${rack:eggs}
  ${common:test-eggs}
extra-paths = ${common:extra-paths}
interpreter = py
scripts = ipy
entry-points =
  ipy=IPython.terminal.ipapp:launch_new_instance
initialization =
  ${common:initialization}
